package {
    import flash.display.*;

    public dynamic class HeaderRenderer_selectedUpSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CellRenderer_selectedUpSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class RadioButton_downIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class Button_downSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class HeaderRenderer_downSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;
    import flash.text.*;

    public dynamic class LtdFlag extends MovieClip {

        public var text:TextField;

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class HeaderRenderer_selectedOverSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class ScrollArrowDown_upSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class TextInput_disabledSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.text.*;

    public dynamic class FontArialBold extends Font {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CellRenderer_selectedDownSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.geom.*;
    import flash.text.*;
    import flash.system.*;
    import flash.net.*;
    import flash.filters.*;
    import flash.media.*;
    import flash.globalization.*;
    import flash.external.*;
    import flash.ui.*;
    import flash.errors.*;
    import flash.printing.*;
    import adobe.utils.*;
    import flash.accessibility.*;
    import flash.desktop.*;
    import flash.net.drm.*;
    import flash.profiler.*;
    import flash.sampler.*;
    import flash.sensors.*;
    import flash.text.ime.*;
    import flash.text.engine.*;
    import flash.xml.*;

    public dynamic class TooltipCA extends MovieClip {

        public var label_txt:TextField;
        public var bg_mc:MovieClip;

        public function TooltipCA(){
            addFrameScript(0, this.frame1);
        }
        public function setText(inputText:String){
            this.label_txt.text = inputText;
            this.label_txt.height = this.label_txt.height;
            this.bg_mc.rect_mc.width = (this.label_txt.width + 13);
            this.bg_mc.rect_mc.height = (this.label_txt.height + 3);
        }
        function frame1(){
            this.label_txt.wordWrap = false;
            this.label_txt.autoSize = "left";
            this.setText(" ");
        }

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class ScrollThumb_upSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class TableSeparator extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class ComboBox_downSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class Button_emphasizedSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class Button_Close extends SimpleButton {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class ComboBox_overSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CheckBox_selectedUpIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class ScrollArrowUp_disabledSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CellRenderer_selectedDisabledSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class dialogIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CheckBox_selectedOverIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class MarketTickerFullPane extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class AlertManagerComponentShim extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CellRenderer_selectedOverSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class focusRectSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class Button_selectedOverSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class Button_selectedDisabledSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class Component_avatar extends MovieClip {

    }
}//package 
﻿package {
    import com.settrade.streaming5.page.component.calendar.*;

    public dynamic class CalendarDateLabel extends CalendarDateLabel {

        public function CalendarDateLabel(){
            addFrameScript(0, this.frame1, 1, this.frame2);
        }
        function frame1(){
            stop();
        }
        function frame2(){
            stop();
        }

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class ScrollPane_disabledSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CellRenderer_overSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class ScrollArrowDown_disabledSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class ScrollTrack_skin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class ColumnStretch_cursor extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class SliderTrack_disabledSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class HeaderRenderer_overSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class TextInput_upSkin extends MovieClip {

    }
}//package 
﻿package {
    import com.settrade.streaming5.page.component.calendar.*;

    public dynamic class Calendar extends Calendar {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class Title_skin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class HeaderRenderer_selectedDisabledSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CheckBox_disabledIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class confirmationIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class RadioButton_selectedOverIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.geom.*;
    import flash.text.*;
    import flash.system.*;
    import flash.net.*;
    import flash.filters.*;
    import flash.media.*;
    import com.settrade.streaming5.page.component.calendar.*;
    import flash.globalization.*;
    import flash.external.*;
    import flash.ui.*;
    import flash.errors.*;
    import flash.printing.*;
    import adobe.utils.*;
    import flash.accessibility.*;
    import flash.desktop.*;
    import flash.net.drm.*;
    import flash.profiler.*;
    import flash.sampler.*;
    import flash.sensors.*;
    import flash.text.ime.*;
    import flash.text.engine.*;
    import flash.xml.*;

    public dynamic class CalendarTime extends CalendarTime {

        public function CalendarTime(){
            this.__setProp_closeBtn_CalendarTime_Close_0();
            this.__setProp_hourSlider_CalendarTime_Time_0();
            this.__setProp_minuteSlider_CalendarTime_Time_0();
            this.__setProp_secondSlider_CalendarTime_Time_0();
        }
        function __setProp_closeBtn_CalendarTime_Close_0(){
            try {
                closeBtn["componentInspectorSetting"] = true;
            } catch(e:Error) {
            };
            closeBtn.emphasized = false;
            closeBtn.enabled = true;
            closeBtn.label = "";
            closeBtn.labelPlacement = "right";
            closeBtn.selected = false;
            closeBtn.toggle = false;
            closeBtn.visible = true;
            try {
                closeBtn["componentInspectorSetting"] = false;
            } catch(e:Error) {
            };
        }
        function __setProp_hourSlider_CalendarTime_Time_0(){
            try {
                hourSlider["componentInspectorSetting"] = true;
            } catch(e:Error) {
            };
            hourSlider.direction = "horizontal";
            hourSlider.enabled = true;
            hourSlider.liveDragging = true;
            hourSlider.maximum = 23;
            hourSlider.minimum = 0;
            hourSlider.snapInterval = 1;
            hourSlider.tickInterval = 0;
            hourSlider.value = 0;
            hourSlider.visible = true;
            try {
                hourSlider["componentInspectorSetting"] = false;
            } catch(e:Error) {
            };
        }
        function __setProp_minuteSlider_CalendarTime_Time_0(){
            try {
                minuteSlider["componentInspectorSetting"] = true;
            } catch(e:Error) {
            };
            minuteSlider.direction = "horizontal";
            minuteSlider.enabled = true;
            minuteSlider.liveDragging = true;
            minuteSlider.maximum = 59;
            minuteSlider.minimum = 0;
            minuteSlider.snapInterval = 1;
            minuteSlider.tickInterval = 0;
            minuteSlider.value = 0;
            minuteSlider.visible = true;
            try {
                minuteSlider["componentInspectorSetting"] = false;
            } catch(e:Error) {
            };
        }
        function __setProp_secondSlider_CalendarTime_Time_0(){
            try {
                secondSlider["componentInspectorSetting"] = true;
            } catch(e:Error) {
            };
            secondSlider.direction = "horizontal";
            secondSlider.enabled = true;
            secondSlider.liveDragging = true;
            secondSlider.maximum = 59;
            secondSlider.minimum = 0;
            secondSlider.snapInterval = 1;
            secondSlider.tickInterval = 0;
            secondSlider.value = 0;
            secondSlider.visible = true;
            try {
                secondSlider["componentInspectorSetting"] = false;
            } catch(e:Error) {
            };
        }

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class ScrollArrowDown_downSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class Button_disabledSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class RadioButton_selectedIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class SliderThumb_upSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class RadioButton_selectedDownIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;
    import flash.text.*;

    public dynamic class TsFlag extends MovieClip {

        public var text:TextField;

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class SliderThumb_disabledSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CheckBox_upIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class NotificationTypeSymbol extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CaFlag extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class panelBackground_Base extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class ScrollBar_thumbIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class search_icon extends SimpleButton {

    }
}//package 
﻿package {
    import flash.text.*;

    public dynamic class FontArialNarrow extends Font {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CheckBox_selectedDownIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class Button_selectedDownSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CellRenderer_downSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CellRenderer_upSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class DataGridCellEditor_skin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class RadioButton_selectedDisabledIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class ScrollArrowUp_downSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class TooltipBackground extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class AlertErrorIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class HeaderRenderer_upSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class AlertBuyingIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class ScrollArrowDown_overSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class ComboBox_disabledSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class Button_selectedUpSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class Background_skin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class ComboBox_upSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class LoadingIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class warningIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CheckBox_selectedDisabledIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class SliderTrack_skin extends MovieClip {

    }
}//package 
﻿package {
    import com.settrade.streaming5.page.component.datepicker.*;

    public dynamic class DateTimePicker extends DateTimePicker {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class RadioButton_overIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CellRenderer_disabledSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class AlertNotiIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class RadioButton_upIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class SliderTick_skin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class TextArea_disabledSkin extends MovieClip {

    }
}//package 
﻿package Streaming5_fla {
    import flash.display.*;

    public dynamic class UI_Noti_Push_29 extends MovieClip {

        public var box:MovieClip;

        public function UI_Noti_Push_29(){
            addFrameScript(0, this.frame1, 9, this.frame10, 19, this.frame20);
        }
        function frame1(){
            visible = true;
        }
        function frame10(){
            stop();
        }
        function frame20(){
            stop();
            if (parent != null){
                parent.removeChild(this);
            };
        }

    }
}//package Streaming5_fla 
﻿package Streaming5_fla {
    import flash.display.*;
    import flash.text.*;

    public dynamic class UI_noti_bg_177 extends MovieClip {

        public var text:TextField;

        public function UI_noti_bg_177(){
            addFrameScript(39, this.frame40);
        }
        function frame40(){
            stop();
        }

    }
}//package Streaming5_fla 
﻿package Streaming5_fla {
    import flash.display.*;
    import flash.text.*;

    public dynamic class PopupVolumeBox_211 extends MovieClip {

        public var minus100Button:SimpleButton;
        public var plusMuchLabel:TextField;
        public var minusMuchLabel:TextField;
        public var minus1000Button:SimpleButton;
        public var plusLessLabel:TextField;
        public var plus1000Button:SimpleButton;
        public var closeButton:SimpleButton;
        public var plus100Button:SimpleButton;
        public var minusLessLabel:TextField;

        public function PopupVolumeBox_211(){
            addFrameScript(0, this.frame1, 1, this.frame2);
        }
        function frame1(){
            stop();
        }
        function frame2(){
            stop();
        }

    }
}//package Streaming5_fla 
﻿package {
    import flash.display.*;

    public dynamic class HeaderSortArrow_descIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class HeaderRenderer_selectedDownSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class Button_upSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class ScrollPane_upSkin extends MovieClip {

    }
}//package 
﻿package fl.controls {
    import fl.core.*;
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import fl.events.*;

    public class BaseButton extends UIComponent {

        private static var defaultStyles:Object = {
            upSkin:"Button_upSkin",
            downSkin:"Button_downSkin",
            overSkin:"Button_overSkin",
            disabledSkin:"Button_disabledSkin",
            selectedDisabledSkin:"Button_selectedDisabledSkin",
            selectedUpSkin:"Button_selectedUpSkin",
            selectedDownSkin:"Button_selectedDownSkin",
            selectedOverSkin:"Button_selectedOverSkin",
            focusRectSkin:null,
            focusRectPadding:null,
            repeatDelay:500,
            repeatInterval:35
        };

        protected var background:DisplayObject;
        protected var mouseState:String;
        protected var _selected:Boolean = false;
        protected var _autoRepeat:Boolean = false;
        protected var pressTimer:Timer;
        private var _mouseStateLocked:Boolean = false;
        private var unlockedMouseState:String;

        public function BaseButton(){
            buttonMode = true;
            mouseChildren = false;
            useHandCursor = false;
            setupMouseEvents();
            setMouseState("up");
            pressTimer = new Timer(1, 0);
            pressTimer.addEventListener(TimerEvent.TIMER, buttonDown, false, 0, true);
        }
        public static function getStyleDefinition():Object{
            return (defaultStyles);
        }

        override public function get enabled():Boolean{
            return (super.enabled);
        }
        override public function set enabled(_arg1:Boolean):void{
            super.enabled = _arg1;
            mouseEnabled = _arg1;
        }
        public function get selected():Boolean{
            return (_selected);
        }
        public function set selected(_arg1:Boolean):void{
            if (_selected == _arg1){
                return;
            };
            _selected = _arg1;
            invalidate(InvalidationType.STATE);
        }
        public function get autoRepeat():Boolean{
            return (_autoRepeat);
        }
        public function set autoRepeat(_arg1:Boolean):void{
            _autoRepeat = _arg1;
        }
        public function set mouseStateLocked(_arg1:Boolean):void{
            _mouseStateLocked = _arg1;
            if (_arg1 == false){
                setMouseState(unlockedMouseState);
            } else {
                unlockedMouseState = mouseState;
            };
        }
        public function setMouseState(_arg1:String):void{
            if (_mouseStateLocked){
                unlockedMouseState = _arg1;
                return;
            };
            if (mouseState == _arg1){
                return;
            };
            mouseState = _arg1;
            invalidate(InvalidationType.STATE);
        }
        protected function setupMouseEvents():void{
            addEventListener(MouseEvent.ROLL_OVER, mouseEventHandler, false, 0, true);
            addEventListener(MouseEvent.MOUSE_DOWN, mouseEventHandler, false, 0, true);
            addEventListener(MouseEvent.MOUSE_UP, mouseEventHandler, false, 0, true);
            addEventListener(MouseEvent.ROLL_OUT, mouseEventHandler, false, 0, true);
        }
        protected function mouseEventHandler(_arg1:MouseEvent):void{
            if (_arg1.type == MouseEvent.MOUSE_DOWN){
                setMouseState("down");
                startPress();
            } else {
                if ((((_arg1.type == MouseEvent.ROLL_OVER)) || ((_arg1.type == MouseEvent.MOUSE_UP)))){
                    setMouseState("over");
                    endPress();
                } else {
                    if (_arg1.type == MouseEvent.ROLL_OUT){
                        setMouseState("up");
                        endPress();
                    };
                };
            };
        }
        protected function startPress():void{
            if (_autoRepeat){
                pressTimer.delay = Number(getStyleValue("repeatDelay"));
                pressTimer.start();
            };
            dispatchEvent(new ComponentEvent(ComponentEvent.BUTTON_DOWN, true));
        }
        protected function buttonDown(_arg1:TimerEvent):void{
            if (!_autoRepeat){
                endPress();
                return;
            };
            if (pressTimer.currentCount == 1){
                pressTimer.delay = Number(getStyleValue("repeatInterval"));
            };
            dispatchEvent(new ComponentEvent(ComponentEvent.BUTTON_DOWN, true));
        }
        protected function endPress():void{
            pressTimer.reset();
        }
        override protected function draw():void{
            if (isInvalid(InvalidationType.STYLES, InvalidationType.STATE)){
                drawBackground();
                invalidate(InvalidationType.SIZE, false);
            };
            if (isInvalid(InvalidationType.SIZE)){
                drawLayout();
            };
            super.draw();
        }
        protected function drawBackground():void{
            var _local1:String = ((enabled) ? mouseState : "disabled");
            if (selected){
                _local1 = (("selected" + _local1.substr(0, 1).toUpperCase()) + _local1.substr(1));
            };
            _local1 = (_local1 + "Skin");
            var _local2:DisplayObject = background;
            background = getDisplayObjectInstance(getStyleValue(_local1));
            addChildAt(background, 0);
            if (((!((_local2 == null))) && (!((_local2 == background))))){
                removeChild(_local2);
            };
        }
        protected function drawLayout():void{
            background.width = width;
            background.height = height;
        }

    }
}//package fl.controls 
﻿package fl.controls {
    import fl.controls.listClasses.*;
    import fl.core.*;
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import fl.data.*;
    import fl.managers.*;
    import fl.events.*;
    import fl.containers.*;
    import flash.ui.*;

    public class SelectableList extends BaseScrollPane implements IFocusManagerComponent {

        private static var defaultStyles:Object = {
            skin:"List_skin",
            cellRenderer:CellRenderer,
            contentPadding:null,
            disabledAlpha:null
        };
        public static var createAccessibilityImplementation:Function;

        protected var listHolder:Sprite;
        protected var list:Sprite;
        protected var _dataProvider:DataProvider;
        protected var activeCellRenderers:Array;
        protected var availableCellRenderers:Array;
        protected var renderedItems:Dictionary;
        protected var invalidItems:Dictionary;
        protected var _horizontalScrollPosition:Number;
        protected var _verticalScrollPosition:Number;
        protected var _allowMultipleSelection:Boolean = false;
        protected var _selectable:Boolean = true;
        protected var _selectedIndices:Array;
        protected var caretIndex:int = -1;
        protected var lastCaretIndex:int = -1;
        protected var preChangeItems:Array;
        private var collectionItemImport:SimpleCollectionItem;
        protected var rendererStyles:Object;
        protected var updatedRendererStyles:Object;

        public function SelectableList(){
            activeCellRenderers = [];
            availableCellRenderers = [];
            invalidItems = new Dictionary(true);
            renderedItems = new Dictionary(true);
            _selectedIndices = [];
            if (dataProvider == null){
                dataProvider = new DataProvider();
            };
            verticalScrollPolicy = ScrollPolicy.AUTO;
            rendererStyles = {};
            updatedRendererStyles = {};
        }
        public static function getStyleDefinition():Object{
            return (mergeStyles(defaultStyles, BaseScrollPane.getStyleDefinition()));
        }

        override public function set enabled(_arg1:Boolean):void{
            super.enabled = _arg1;
            list.mouseChildren = _enabled;
        }
        public function get dataProvider():DataProvider{
            return (_dataProvider);
        }
        public function set dataProvider(_arg1:DataProvider):void{
            if (_dataProvider != null){
                _dataProvider.removeEventListener(DataChangeEvent.DATA_CHANGE, handleDataChange);
                _dataProvider.removeEventListener(DataChangeEvent.PRE_DATA_CHANGE, onPreChange);
            };
            _dataProvider = _arg1;
            _dataProvider.addEventListener(DataChangeEvent.DATA_CHANGE, handleDataChange, false, 0, true);
            _dataProvider.addEventListener(DataChangeEvent.PRE_DATA_CHANGE, onPreChange, false, 0, true);
            clearSelection();
            invalidateList();
        }
        override public function get maxHorizontalScrollPosition():Number{
            return (_maxHorizontalScrollPosition);
        }
        public function set maxHorizontalScrollPosition(_arg1:Number):void{
            _maxHorizontalScrollPosition = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        public function get length():uint{
            return (_dataProvider.length);
        }
        public function get allowMultipleSelection():Boolean{
            return (_allowMultipleSelection);
        }
        public function set allowMultipleSelection(_arg1:Boolean):void{
            if (_arg1 == _allowMultipleSelection){
                return;
            };
            _allowMultipleSelection = _arg1;
            if (((!(_arg1)) && ((_selectedIndices.length > 1)))){
                _selectedIndices = [_selectedIndices.pop()];
                invalidate(InvalidationType.DATA);
            };
        }
        public function get selectable():Boolean{
            return (_selectable);
        }
        public function set selectable(_arg1:Boolean):void{
            if (_arg1 == _selectable){
                return;
            };
            if (!_arg1){
                selectedIndices = [];
            };
            _selectable = _arg1;
        }
        public function get selectedIndex():int{
            return (((_selectedIndices.length)==0) ? -1 : _selectedIndices[(_selectedIndices.length - 1)]);
        }
        public function set selectedIndex(_arg1:int):void{
            selectedIndices = ((_arg1)==-1) ? null : [_arg1];
        }
        public function get selectedIndices():Array{
            return (_selectedIndices.concat());
        }
        public function set selectedIndices(_arg1:Array):void{
            if (!_selectable){
                return;
            };
            _selectedIndices = ((_arg1)==null) ? [] : _arg1.concat();
            invalidate(InvalidationType.SELECTED);
        }
        public function get selectedItem():Object{
            return (((_selectedIndices.length)==0) ? null : _dataProvider.getItemAt(selectedIndex));
        }
        public function set selectedItem(_arg1:Object):void{
            var _local2:int = _dataProvider.getItemIndex(_arg1);
            selectedIndex = _local2;
        }
        public function get selectedItems():Array{
            var _local1:Array = [];
            var _local2:uint;
            while (_local2 < _selectedIndices.length) {
                _local1.push(_dataProvider.getItemAt(_selectedIndices[_local2]));
                _local2++;
            };
            return (_local1);
        }
        public function set selectedItems(_arg1:Array):void{
            var _local4:int;
            if (_arg1 == null){
                selectedIndices = null;
                return;
            };
            var _local2:Array = [];
            var _local3:uint;
            while (_local3 < _arg1.length) {
                _local4 = _dataProvider.getItemIndex(_arg1[_local3]);
                if (_local4 != -1){
                    _local2.push(_local4);
                };
                _local3++;
            };
            selectedIndices = _local2;
        }
        public function get rowCount():uint{
            return (0);
        }
        public function clearSelection():void{
            selectedIndex = -1;
        }
        public function itemToCellRenderer(_arg1:Object):ICellRenderer{
            var _local2:*;
            var _local3:ICellRenderer;
            if (_arg1 != null){
                for (_local2 in activeCellRenderers) {
                    _local3 = (activeCellRenderers[_local2] as ICellRenderer);
                    if (_local3.data == _arg1){
                        return (_local3);
                    };
                };
            };
            return (null);
        }
        public function addItem(_arg1:Object):void{
            _dataProvider.addItem(_arg1);
            invalidateList();
        }
        public function addItemAt(_arg1:Object, _arg2:uint):void{
            _dataProvider.addItemAt(_arg1, _arg2);
            invalidateList();
        }
        public function removeAll():void{
            _dataProvider.removeAll();
        }
        public function getItemAt(_arg1:uint):Object{
            return (_dataProvider.getItemAt(_arg1));
        }
        public function removeItem(_arg1:Object):Object{
            return (_dataProvider.removeItem(_arg1));
        }
        public function removeItemAt(_arg1:uint):Object{
            return (_dataProvider.removeItemAt(_arg1));
        }
        public function replaceItemAt(_arg1:Object, _arg2:uint):Object{
            return (_dataProvider.replaceItemAt(_arg1, _arg2));
        }
        public function invalidateList():void{
            _invalidateList();
            invalidate(InvalidationType.DATA);
        }
        public function invalidateItem(_arg1:Object):void{
            if (renderedItems[_arg1] == null){
                return;
            };
            invalidItems[_arg1] = true;
            invalidate(InvalidationType.DATA);
        }
        public function invalidateItemAt(_arg1:uint):void{
            var _local2:Object = _dataProvider.getItemAt(_arg1);
            if (_local2 != null){
                invalidateItem(_local2);
            };
        }
        public function sortItems(... _args){
            return (_dataProvider.sort.apply(_dataProvider, _args));
        }
        public function sortItemsOn(_arg1:String, _arg2:Object=null){
            return (_dataProvider.sortOn(_arg1, _arg2));
        }
        public function isItemSelected(_arg1:Object):Boolean{
            return ((selectedItems.indexOf(_arg1) > -1));
        }
        public function scrollToSelected():void{
            scrollToIndex(selectedIndex);
        }
        public function scrollToIndex(_arg1:int):void{
        }
        public function getNextIndexAtLetter(_arg1:String, _arg2:int=-1):int{
            var _local5:Number;
            var _local6:Object;
            var _local7:String;
            if (length == 0){
                return (-1);
            };
            _arg1 = _arg1.toUpperCase();
            var _local3:int = (length - 1);
            var _local4:Number = 0;
            while (_local4 < _local3) {
                _local5 = ((_arg2 + 1) + _local4);
                if (_local5 > (length - 1)){
                    _local5 = (_local5 - length);
                };
                _local6 = getItemAt(_local5);
                if (_local6 == null){
                    break;
                };
                _local7 = itemToLabel(_local6);
                if (_local7 == null){
                } else {
                    if (_local7.charAt(0).toUpperCase() == _arg1){
                        return (_local5);
                    };
                };
                _local4++;
            };
            return (-1);
        }
        public function itemToLabel(_arg1:Object):String{
            return (_arg1["label"]);
        }
        public function setRendererStyle(_arg1:String, _arg2:Object, _arg3:uint=0):void{
            if (rendererStyles[_arg1] == _arg2){
                return;
            };
            updatedRendererStyles[_arg1] = _arg2;
            rendererStyles[_arg1] = _arg2;
            invalidate(InvalidationType.RENDERER_STYLES);
        }
        public function getRendererStyle(_arg1:String, _arg2:int=-1):Object{
            return (rendererStyles[_arg1]);
        }
        public function clearRendererStyle(_arg1:String, _arg2:int=-1):void{
            delete rendererStyles[_arg1];
            updatedRendererStyles[_arg1] = null;
            invalidate(InvalidationType.RENDERER_STYLES);
        }
        override protected function configUI():void{
            super.configUI();
            listHolder = new Sprite();
            addChild(listHolder);
            listHolder.scrollRect = contentScrollRect;
            list = new Sprite();
            listHolder.addChild(list);
        }
        protected function _invalidateList():void{
            availableCellRenderers = [];
            while (activeCellRenderers.length > 0) {
                list.removeChild((activeCellRenderers.pop() as DisplayObject));
            };
        }
        protected function handleDataChange(_arg1:DataChangeEvent):void{
            var _local5:uint;
            var _local2:int = _arg1.startIndex;
            var _local3:int = _arg1.endIndex;
            var _local4:String = _arg1.changeType;
            if (_local4 == DataChangeType.INVALIDATE_ALL){
                clearSelection();
                invalidateList();
            } else {
                if (_local4 == DataChangeType.INVALIDATE){
                    _local5 = 0;
                    while (_local5 < _arg1.items.length) {
                        invalidateItem(_arg1.items[_local5]);
                        _local5++;
                    };
                } else {
                    if (_local4 == DataChangeType.ADD){
                        _local5 = 0;
                        while (_local5 < _selectedIndices.length) {
                            if (_selectedIndices[_local5] >= _local2){
                                _selectedIndices[_local5] = (_selectedIndices[_local5] + (_local2 - _local3));
                            };
                            _local5++;
                        };
                    } else {
                        if (_local4 == DataChangeType.REMOVE){
                            _local5 = 0;
                            while (_local5 < _selectedIndices.length) {
                                if (_selectedIndices[_local5] >= _local2){
                                    if (_selectedIndices[_local5] <= _local3){
                                        delete _selectedIndices[_local5];
                                    } else {
                                        _selectedIndices[_local5] = (_selectedIndices[_local5] - ((_local2 - _local3) + 1));
                                    };
                                };
                                _local5++;
                            };
                        } else {
                            if (_local4 == DataChangeType.REMOVE_ALL){
                                clearSelection();
                            } else {
                                if (_local4 == DataChangeType.REPLACE){
                                } else {
                                    selectedItems = preChangeItems;
                                    preChangeItems = null;
                                };
                            };
                        };
                    };
                };
            };
            invalidate(InvalidationType.DATA);
        }
        protected function handleCellRendererMouseEvent(_arg1:MouseEvent):void{
            var _local2:ICellRenderer = (_arg1.target as ICellRenderer);
            var _local3:String = ((_arg1.type)==MouseEvent.ROLL_OVER) ? ListEvent.ITEM_ROLL_OVER : ListEvent.ITEM_ROLL_OUT;
            dispatchEvent(new ListEvent(_local3, false, false, _local2.listData.column, _local2.listData.row, _local2.listData.index, _local2.data));
        }
        protected function handleCellRendererClick(_arg1:MouseEvent):void{
            var _local5:int;
            var _local6:uint;
            if (!_enabled){
                return;
            };
            var _local2:ICellRenderer = (_arg1.currentTarget as ICellRenderer);
            var _local3:uint = _local2.listData.index;
            if (((!(dispatchEvent(new ListEvent(ListEvent.ITEM_CLICK, false, true, _local2.listData.column, _local2.listData.row, _local3, _local2.data)))) || (!(_selectable)))){
                return;
            };
            var _local4:int = selectedIndices.indexOf(_local3);
            if (!_allowMultipleSelection){
                if (_local4 != -1){
                    return;
                };
                _local2.selected = true;
                _selectedIndices = [_local3];
                lastCaretIndex = (caretIndex = _local3);
            } else {
                if (_arg1.shiftKey){
                    _local6 = ((_selectedIndices.length)>0) ? _selectedIndices[0] : _local3;
                    _selectedIndices = [];
                    if (_local6 > _local3){
                        _local5 = _local6;
                        while (_local5 >= _local3) {
                            _selectedIndices.push(_local5);
                            _local5--;
                        };
                    } else {
                        _local5 = _local6;
                        while (_local5 <= _local3) {
                            _selectedIndices.push(_local5);
                            _local5++;
                        };
                    };
                    caretIndex = _local3;
                } else {
                    if (_arg1.ctrlKey){
                        if (_local4 != -1){
                            _local2.selected = false;
                            _selectedIndices.splice(_local4, 1);
                        } else {
                            _local2.selected = true;
                            _selectedIndices.push(_local3);
                        };
                        caretIndex = _local3;
                    } else {
                        _selectedIndices = [_local3];
                        lastCaretIndex = (caretIndex = _local3);
                    };
                };
            };
            dispatchEvent(new Event(Event.CHANGE));
            invalidate(InvalidationType.DATA);
        }
        protected function handleCellRendererChange(_arg1:Event):void{
            var _local2:ICellRenderer = (_arg1.currentTarget as ICellRenderer);
            var _local3:uint = _local2.listData.index;
            _dataProvider.invalidateItemAt(_local3);
        }
        protected function handleCellRendererDoubleClick(_arg1:MouseEvent):void{
            if (!_enabled){
                return;
            };
            var _local2:ICellRenderer = (_arg1.currentTarget as ICellRenderer);
            var _local3:uint = _local2.listData.index;
            dispatchEvent(new ListEvent(ListEvent.ITEM_DOUBLE_CLICK, false, true, _local2.listData.column, _local2.listData.row, _local3, _local2.data));
        }
        override protected function setHorizontalScrollPosition(_arg1:Number, _arg2:Boolean=false):void{
            if (_arg1 == _horizontalScrollPosition){
                return;
            };
            var _local3:Number = (_arg1 - _horizontalScrollPosition);
            _horizontalScrollPosition = _arg1;
            if (_arg2){
                dispatchEvent(new ScrollEvent(ScrollBarDirection.HORIZONTAL, _local3, _arg1));
            };
        }
        override protected function setVerticalScrollPosition(_arg1:Number, _arg2:Boolean=false):void{
            if (_arg1 == _verticalScrollPosition){
                return;
            };
            var _local3:Number = (_arg1 - _verticalScrollPosition);
            _verticalScrollPosition = _arg1;
            if (_arg2){
                dispatchEvent(new ScrollEvent(ScrollBarDirection.VERTICAL, _local3, _arg1));
            };
        }
        override protected function draw():void{
            super.draw();
        }
        override protected function drawLayout():void{
            super.drawLayout();
            contentScrollRect = listHolder.scrollRect;
            contentScrollRect.width = availableWidth;
            contentScrollRect.height = availableHeight;
            listHolder.scrollRect = contentScrollRect;
        }
        protected function updateRendererStyles():void{
            var _local4:String;
            var _local1:Array = availableCellRenderers.concat(activeCellRenderers);
            var _local2:uint = _local1.length;
            var _local3:uint;
            while (_local3 < _local2) {
                if (_local1[_local3].setStyle == null){
                } else {
                    for (_local4 in updatedRendererStyles) {
                        _local1[_local3].setStyle(_local4, updatedRendererStyles[_local4]);
                    };
                    _local1[_local3].drawNow();
                };
                _local3++;
            };
            updatedRendererStyles = {};
        }
        protected function drawList():void{
        }
        override protected function keyDownHandler(_arg1:KeyboardEvent):void{
            if (!selectable){
                return;
            };
            switch (_arg1.keyCode){
                case Keyboard.UP:
                case Keyboard.DOWN:
                case Keyboard.END:
                case Keyboard.HOME:
                case Keyboard.PAGE_UP:
                case Keyboard.PAGE_DOWN:
                    moveSelectionVertically(_arg1.keyCode, ((_arg1.shiftKey) && (_allowMultipleSelection)), ((_arg1.ctrlKey) && (_allowMultipleSelection)));
                    _arg1.stopPropagation();
                    break;
                case Keyboard.LEFT:
                case Keyboard.RIGHT:
                    moveSelectionHorizontally(_arg1.keyCode, ((_arg1.shiftKey) && (_allowMultipleSelection)), ((_arg1.ctrlKey) && (_allowMultipleSelection)));
                    _arg1.stopPropagation();
                    break;
            };
        }
        protected function moveSelectionHorizontally(_arg1:uint, _arg2:Boolean, _arg3:Boolean):void{
        }
        protected function moveSelectionVertically(_arg1:uint, _arg2:Boolean, _arg3:Boolean):void{
        }
        override protected function initializeAccessibility():void{
            if (SelectableList.createAccessibilityImplementation != null){
                SelectableList.createAccessibilityImplementation(this);
            };
        }
        protected function onPreChange(_arg1:DataChangeEvent):void{
            switch (_arg1.changeType){
                case DataChangeType.REMOVE:
                case DataChangeType.ADD:
                case DataChangeType.INVALIDATE:
                case DataChangeType.REMOVE_ALL:
                case DataChangeType.REPLACE:
                case DataChangeType.INVALIDATE_ALL:
                    break;
                default:
                    preChangeItems = selectedItems;
            };
        }

    }
}//package fl.controls 
﻿package fl.controls {
    import flash.display.*;

    public class CheckBox extends LabelButton {

        private static var defaultStyles:Object = {
            icon:null,
            upIcon:"CheckBox_upIcon",
            downIcon:"CheckBox_downIcon",
            overIcon:"CheckBox_overIcon",
            disabledIcon:"CheckBox_disabledIcon",
            selectedDisabledIcon:"CheckBox_selectedDisabledIcon",
            focusRectSkin:null,
            focusRectPadding:null,
            selectedUpIcon:"CheckBox_selectedUpIcon",
            selectedDownIcon:"CheckBox_selectedDownIcon",
            selectedOverIcon:"CheckBox_selectedOverIcon",
            textFormat:null,
            disabledTextFormat:null,
            embedFonts:null,
            textPadding:5
        };
        public static var createAccessibilityImplementation:Function;

        public static function getStyleDefinition():Object{
            return (defaultStyles);
        }

        override public function get toggle():Boolean{
            return (true);
        }
        override public function set toggle(_arg1:Boolean):void{
            throw (new Error("Warning: You cannot change a CheckBox's toggle."));
        }
        override public function get autoRepeat():Boolean{
            return (false);
        }
        override public function set autoRepeat(_arg1:Boolean):void{
        }
        override protected function drawLayout():void{
            super.drawLayout();
            var _local1:Number = Number(getStyleValue("textPadding"));
            switch (_labelPlacement){
                case ButtonLabelPlacement.RIGHT:
                    icon.x = _local1;
                    textField.x = (icon.x + (icon.width + _local1));
                    background.width = ((textField.x + textField.width) + _local1);
                    background.height = (Math.max(textField.height, icon.height) + (_local1 * 2));
                    break;
                case ButtonLabelPlacement.LEFT:
                    icon.x = ((width - icon.width) - _local1);
                    textField.x = (((width - icon.width) - (_local1 * 2)) - textField.width);
                    background.width = ((textField.width + icon.width) + (_local1 * 3));
                    background.height = (Math.max(textField.height, icon.height) + (_local1 * 2));
                    break;
                case ButtonLabelPlacement.TOP:
                case ButtonLabelPlacement.BOTTOM:
                    background.width = (Math.max(textField.width, icon.width) + (_local1 * 2));
                    background.height = ((textField.height + icon.height) + (_local1 * 3));
                    break;
            };
            background.x = Math.min((icon.x - _local1), (textField.x - _local1));
            background.y = Math.min((icon.y - _local1), (textField.y - _local1));
        }
        override protected function drawBackground():void{
        }
        override public function drawFocus(_arg1:Boolean):void{
            var _local2:Number;
            super.drawFocus(_arg1);
            if (_arg1){
                _local2 = Number(getStyleValue("focusRectPadding"));
                uiFocusRect.x = (background.x - _local2);
                uiFocusRect.y = (background.y - _local2);
                uiFocusRect.width = (background.width + (_local2 << 1));
                uiFocusRect.height = (background.height + (_local2 << 1));
            };
        }
        override protected function initializeAccessibility():void{
            if (CheckBox.createAccessibilityImplementation != null){
                CheckBox.createAccessibilityImplementation(this);
            };
        }
        override protected function configUI():void{
            super.configUI();
            super.toggle = true;
            var _local1:Shape = new Shape();
            var _local2:Graphics = _local1.graphics;
            _local2.beginFill(0, 0);
            _local2.drawRect(0, 0, 100, 100);
            _local2.endFill();
            background = (_local1 as DisplayObject);
            addChildAt(background, 0);
        }

    }
}//package fl.controls 
﻿package fl.controls {
    import fl.controls.listClasses.*;
    import fl.core.*;
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.geom.*;
    import fl.managers.*;
    import flash.ui.*;

    public class List extends SelectableList implements IFocusManagerComponent {

        private static var defaultStyles:Object = {
            focusRectSkin:null,
            focusRectPadding:null
        };
        public static var createAccessibilityImplementation:Function;

        protected var _rowHeight:Number = 20;
        protected var _cellRenderer:Object;
        protected var _labelField:String = "label";
        protected var _labelFunction:Function;
        protected var _iconField:String = "icon";
        protected var _iconFunction:Function;

        public static function getStyleDefinition():Object{
            return (mergeStyles(defaultStyles, SelectableList.getStyleDefinition()));
        }

        public function get labelField():String{
            return (_labelField);
        }
        public function set labelField(_arg1:String):void{
            if (_arg1 == _labelField){
                return;
            };
            _labelField = _arg1;
            invalidate(InvalidationType.DATA);
        }
        public function get labelFunction():Function{
            return (_labelFunction);
        }
        public function set labelFunction(_arg1:Function):void{
            if (_labelFunction == _arg1){
                return;
            };
            _labelFunction = _arg1;
            invalidate(InvalidationType.DATA);
        }
        public function get iconField():String{
            return (_iconField);
        }
        public function set iconField(_arg1:String):void{
            if (_arg1 == _iconField){
                return;
            };
            _iconField = _arg1;
            invalidate(InvalidationType.DATA);
        }
        public function get iconFunction():Function{
            return (_iconFunction);
        }
        public function set iconFunction(_arg1:Function):void{
            if (_iconFunction == _arg1){
                return;
            };
            _iconFunction = _arg1;
            invalidate(InvalidationType.DATA);
        }
        override public function get rowCount():uint{
            return (Math.ceil((calculateAvailableHeight() / rowHeight)));
        }
        public function set rowCount(_arg1:uint):void{
            var _local2:Number = Number(getStyleValue("contentPadding"));
            var _local3:Number = (((((_horizontalScrollPolicy == ScrollPolicy.ON)) || ((((_horizontalScrollPolicy == ScrollPolicy.AUTO)) && ((_maxHorizontalScrollPosition > 0)))))) ? 15 : 0);
            height = (((rowHeight * _arg1) + (2 * _local2)) + _local3);
        }
        public function get rowHeight():Number{
            return (_rowHeight);
        }
        public function set rowHeight(_arg1:Number):void{
            _rowHeight = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        override public function scrollToIndex(_arg1:int):void{
            drawNow();
            var _local2:uint = (Math.floor(((_verticalScrollPosition + availableHeight) / rowHeight)) - 1);
            var _local3:uint = Math.ceil((_verticalScrollPosition / rowHeight));
            if (_arg1 < _local3){
                verticalScrollPosition = (_arg1 * rowHeight);
            } else {
                if (_arg1 > _local2){
                    verticalScrollPosition = (((_arg1 + 1) * rowHeight) - availableHeight);
                };
            };
        }
        override protected function configUI():void{
            useFixedHorizontalScrolling = true;
            _horizontalScrollPolicy = ScrollPolicy.AUTO;
            _verticalScrollPolicy = ScrollPolicy.AUTO;
            super.configUI();
        }
        protected function calculateAvailableHeight():Number{
            var _local1:Number = Number(getStyleValue("contentPadding"));
            return (((height - (_local1 * 2)) - (((((_horizontalScrollPolicy == ScrollPolicy.ON)) || ((((_horizontalScrollPolicy == ScrollPolicy.AUTO)) && ((_maxHorizontalScrollPosition > 0)))))) ? 15 : 0)));
        }
        override protected function setHorizontalScrollPosition(_arg1:Number, _arg2:Boolean=false):void{
            list.x = -(_arg1);
            super.setHorizontalScrollPosition(_arg1, true);
        }
        override protected function setVerticalScrollPosition(_arg1:Number, _arg2:Boolean=false):void{
            invalidate(InvalidationType.SCROLL);
            super.setVerticalScrollPosition(_arg1, true);
        }
        override protected function draw():void{
            var _local1 = !((contentHeight == (rowHeight * length)));
            contentHeight = (rowHeight * length);
            if (isInvalid(InvalidationType.STYLES)){
                setStyles();
                drawBackground();
                if (contentPadding != getStyleValue("contentPadding")){
                    invalidate(InvalidationType.SIZE, false);
                };
                if (_cellRenderer != getStyleValue("cellRenderer")){
                    _invalidateList();
                    _cellRenderer = getStyleValue("cellRenderer");
                };
            };
            if (((isInvalid(InvalidationType.SIZE, InvalidationType.STATE)) || (_local1))){
                drawLayout();
            };
            if (isInvalid(InvalidationType.RENDERER_STYLES)){
                updateRendererStyles();
            };
            if (isInvalid(InvalidationType.STYLES, InvalidationType.SIZE, InvalidationType.DATA, InvalidationType.SCROLL, InvalidationType.SELECTED)){
                drawList();
            };
            updateChildren();
            validate();
        }
        override protected function drawList():void{
            var _local4:uint;
            var _local5:Object;
            var _local6:ICellRenderer;
            var _local9:Boolean;
            var _local10:String;
            var _local11:Object;
            var _local12:Sprite;
            var _local13:String;
            listHolder.x = (listHolder.y = contentPadding);
            var _local1:Rectangle = listHolder.scrollRect;
            _local1.x = _horizontalScrollPosition;
            _local1.y = (Math.floor(_verticalScrollPosition) % rowHeight);
            listHolder.scrollRect = _local1;
            listHolder.cacheAsBitmap = useBitmapScrolling;
            var _local2:uint = Math.floor((_verticalScrollPosition / rowHeight));
            var _local3:uint = Math.min(length, ((_local2 + rowCount) + 1));
            var _local7:Dictionary = (renderedItems = new Dictionary(true));
            _local4 = _local2;
            while (_local4 < _local3) {
                _local7[_dataProvider.getItemAt(_local4)] = true;
                _local4++;
            };
            var _local8:Dictionary = new Dictionary(true);
            while (activeCellRenderers.length > 0) {
                _local6 = (activeCellRenderers.pop() as ICellRenderer);
                _local5 = _local6.data;
                if ((((_local7[_local5] == null)) || ((invalidItems[_local5] == true)))){
                    availableCellRenderers.push(_local6);
                } else {
                    _local8[_local5] = _local6;
                    invalidItems[_local5] = true;
                };
                list.removeChild((_local6 as DisplayObject));
            };
            invalidItems = new Dictionary(true);
            _local4 = _local2;
            while (_local4 < _local3) {
                _local9 = false;
                _local5 = _dataProvider.getItemAt(_local4);
                if (_local8[_local5] != null){
                    _local9 = true;
                    _local6 = _local8[_local5];
                    delete _local8[_local5];
                } else {
                    if (availableCellRenderers.length > 0){
                        _local6 = (availableCellRenderers.pop() as ICellRenderer);
                    } else {
                        _local6 = (getDisplayObjectInstance(getStyleValue("cellRenderer")) as ICellRenderer);
                        _local12 = (_local6 as Sprite);
                        if (_local12 != null){
                            _local12.addEventListener(MouseEvent.CLICK, handleCellRendererClick, false, 0, true);
                            _local12.addEventListener(MouseEvent.ROLL_OVER, handleCellRendererMouseEvent, false, 0, true);
                            _local12.addEventListener(MouseEvent.ROLL_OUT, handleCellRendererMouseEvent, false, 0, true);
                            _local12.addEventListener(Event.CHANGE, handleCellRendererChange, false, 0, true);
                            _local12.doubleClickEnabled = true;
                            _local12.addEventListener(MouseEvent.DOUBLE_CLICK, handleCellRendererDoubleClick, false, 0, true);
                            if (_local12.hasOwnProperty("setStyle")){
                                for (_local13 in rendererStyles) {
                                    var _local16 = _local12;
                                    _local16["setStyle"](_local13, rendererStyles[_local13]);
                                };
                            };
                        };
                    };
                };
                list.addChild((_local6 as Sprite));
                activeCellRenderers.push(_local6);
                _local6.y = (rowHeight * (_local4 - _local2));
                _local6.setSize((availableWidth + _maxHorizontalScrollPosition), rowHeight);
                _local10 = itemToLabel(_local5);
                _local11 = null;
                if (_iconFunction != null){
                    _local11 = _iconFunction(_local5);
                } else {
                    if (_iconField != null){
                        _local11 = _local5[_iconField];
                    };
                };
                if (!_local9){
                    _local6.data = _local5;
                };
                _local6.listData = new ListData(_local10, _local11, this, _local4, _local4, 0);
                _local6.selected = !((_selectedIndices.indexOf(_local4) == -1));
                if ((_local6 is UIComponent)){
                    (_local6 as UIComponent).drawNow();
                };
                _local4++;
            };
        }
        override protected function keyDownHandler(_arg1:KeyboardEvent):void{
            var _local2:int;
            if (!selectable){
                return;
            };
            switch (_arg1.keyCode){
                case Keyboard.UP:
                case Keyboard.DOWN:
                case Keyboard.END:
                case Keyboard.HOME:
                case Keyboard.PAGE_UP:
                case Keyboard.PAGE_DOWN:
                    moveSelectionVertically(_arg1.keyCode, ((_arg1.shiftKey) && (_allowMultipleSelection)), ((_arg1.ctrlKey) && (_allowMultipleSelection)));
                    break;
                case Keyboard.LEFT:
                case Keyboard.RIGHT:
                    moveSelectionHorizontally(_arg1.keyCode, ((_arg1.shiftKey) && (_allowMultipleSelection)), ((_arg1.ctrlKey) && (_allowMultipleSelection)));
                    break;
                case Keyboard.SPACE:
                    if (caretIndex == -1){
                        caretIndex = 0;
                    };
                    doKeySelection(caretIndex, _arg1.shiftKey, _arg1.ctrlKey);
                    scrollToSelected();
                    break;
                default:
                    _local2 = getNextIndexAtLetter(String.fromCharCode(_arg1.keyCode), selectedIndex);
                    if (_local2 > -1){
                        selectedIndex = _local2;
                        scrollToSelected();
                    };
            };
            _arg1.stopPropagation();
        }
        override protected function moveSelectionHorizontally(_arg1:uint, _arg2:Boolean, _arg3:Boolean):void{
        }
        override protected function moveSelectionVertically(_arg1:uint, _arg2:Boolean, _arg3:Boolean):void{
            var _local4:int = Math.max(Math.floor((calculateAvailableHeight() / rowHeight)), 1);
            var _local5 = -1;
            var _local6:int;
            switch (_arg1){
                case Keyboard.UP:
                    if (caretIndex > 0){
                        _local5 = (caretIndex - 1);
                    };
                    break;
                case Keyboard.DOWN:
                    if (caretIndex < (length - 1)){
                        _local5 = (caretIndex + 1);
                    };
                    break;
                case Keyboard.PAGE_UP:
                    if (caretIndex > 0){
                        _local5 = Math.max((caretIndex - _local4), 0);
                    };
                    break;
                case Keyboard.PAGE_DOWN:
                    if (caretIndex < (length - 1)){
                        _local5 = Math.min((caretIndex + _local4), (length - 1));
                    };
                    break;
                case Keyboard.HOME:
                    if (caretIndex > 0){
                        _local5 = 0;
                    };
                    break;
                case Keyboard.END:
                    if (caretIndex < (length - 1)){
                        _local5 = (length - 1);
                    };
                    break;
            };
            if (_local5 >= 0){
                doKeySelection(_local5, _arg2, _arg3);
                scrollToSelected();
            };
        }
        protected function doKeySelection(_arg1:int, _arg2:Boolean, _arg3:Boolean):void{
            var _local5:int;
            var _local6:Array;
            var _local7:int;
            var _local8:int;
            var _local4:Boolean;
            if (_arg2){
                _local6 = [];
                _local7 = lastCaretIndex;
                _local8 = _arg1;
                if (_local7 == -1){
                    _local7 = ((caretIndex)!=-1) ? caretIndex : _arg1;
                };
                if (_local7 > _local8){
                    _local8 = _local7;
                    _local7 = _arg1;
                };
                _local5 = _local7;
                while (_local5 <= _local8) {
                    _local6.push(_local5);
                    _local5++;
                };
                selectedIndices = _local6;
                caretIndex = _arg1;
                _local4 = true;
            } else {
                selectedIndex = _arg1;
                caretIndex = (lastCaretIndex = _arg1);
                _local4 = true;
            };
            if (_local4){
                dispatchEvent(new Event(Event.CHANGE));
            };
            invalidate(InvalidationType.DATA);
        }
        override public function itemToLabel(_arg1:Object):String{
            if (_labelFunction != null){
                return (String(_labelFunction(_arg1)));
            };
            return (((_arg1[_labelField])!=null) ? String(_arg1[_labelField]) : "");
        }
        override protected function initializeAccessibility():void{
            if (List.createAccessibilityImplementation != null){
                List.createAccessibilityImplementation(this);
            };
        }

    }
}//package fl.controls 
﻿package fl.controls {
    import flash.events.*;

    public class RadioButtonGroup extends EventDispatcher {

        private static var groups:Object;
        private static var groupCount:uint = 0;

        protected var _name:String;
        protected var radioButtons:Array;
        protected var _selection:RadioButton;

        public function RadioButtonGroup(_arg1:String){
            _name = _arg1;
            radioButtons = [];
            registerGroup(this);
        }
        public static function getGroup(_arg1:String):RadioButtonGroup{
            if (groups == null){
                groups = {};
            };
            var _local2:RadioButtonGroup = (groups[_arg1] as RadioButtonGroup);
            if (_local2 == null){
                _local2 = new RadioButtonGroup(_arg1);
                if ((++groupCount % 20) == 0){
                    cleanUpGroups();
                };
            };
            return (_local2);
        }
        private static function registerGroup(_arg1:RadioButtonGroup):void{
            if (groups == null){
                groups = {};
            };
            groups[_arg1.name] = _arg1;
        }
        private static function cleanUpGroups():void{
            var _local1:String;
            var _local2:RadioButtonGroup;
            for (_local1 in groups) {
                _local2 = (groups[_local1] as RadioButtonGroup);
                if (_local2.radioButtons.length == 0){
                    delete groups[_local1];
                };
            };
        }

        public function get name():String{
            return (_name);
        }
        public function addRadioButton(_arg1:RadioButton):void{
            if (_arg1.groupName != name){
                _arg1.groupName = name;
                return;
            };
            radioButtons.push(_arg1);
            if (_arg1.selected){
                selection = _arg1;
            };
        }
        public function removeRadioButton(_arg1:RadioButton):void{
            var _local2:int = getRadioButtonIndex(_arg1);
            if (_local2 != -1){
                radioButtons.splice(_local2, 1);
            };
            if (_selection == _arg1){
                _selection = null;
            };
        }
        public function get selection():RadioButton{
            return (_selection);
        }
        public function set selection(_arg1:RadioButton):void{
            if ((((((_selection == _arg1)) || ((_arg1 == null)))) || ((getRadioButtonIndex(_arg1) == -1)))){
                return;
            };
            _selection = _arg1;
            dispatchEvent(new Event(Event.CHANGE, true));
        }
        public function get selectedData():Object{
            var _local1:RadioButton = _selection;
            return (((_local1)==null) ? null : _local1.value);
        }
        public function set selectedData(_arg1:Object):void{
            var _local3:RadioButton;
            var _local2:int;
            while (_local2 < radioButtons.length) {
                _local3 = (radioButtons[_local2] as RadioButton);
                if (_local3.value == _arg1){
                    selection = _local3;
                    return;
                };
                _local2++;
            };
        }
        public function getRadioButtonIndex(_arg1:RadioButton):int{
            var _local3:RadioButton;
            var _local2:int;
            while (_local2 < radioButtons.length) {
                _local3 = (radioButtons[_local2] as RadioButton);
                if (_local3 == _arg1){
                    return (_local2);
                };
                _local2++;
            };
            return (-1);
        }
        public function getRadioButtonAt(_arg1:int):RadioButton{
            return (RadioButton(radioButtons[_arg1]));
        }
        public function get numRadioButtons():int{
            return (radioButtons.length);
        }

    }
}//package fl.controls 
﻿package fl.controls {
    import fl.core.*;
    import flash.display.*;
    import flash.events.*;
    import fl.managers.*;
    import fl.events.*;
    import flash.ui.*;

    public class Slider extends UIComponent implements IFocusManagerComponent {

        protected static const TRACK_STYLES:Object = {
            upSkin:"sliderTrackSkin",
            overSkin:"sliderTrackSkin",
            downSkin:"sliderTrackSkin",
            disabledSkin:"sliderTrackDisabledSkin"
        };
        protected static const THUMB_STYLES:Object = {
            upSkin:"thumbUpSkin",
            overSkin:"thumbOverSkin",
            downSkin:"thumbDownSkin",
            disabledSkin:"thumbDisabledSkin"
        };
        protected static const TICK_STYLES:Object = {upSkin:"tickSkin"};

        protected static var defaultStyles:Object = {
            thumbUpSkin:"SliderThumb_upSkin",
            thumbOverSkin:"SliderThumb_overSkin",
            thumbDownSkin:"SliderThumb_downSkin",
            thumbDisabledSkin:"SliderThumb_disabledSkin",
            sliderTrackSkin:"SliderTrack_skin",
            sliderTrackDisabledSkin:"SliderTrack_disabledSkin",
            tickSkin:"SliderTick_skin",
            focusRectSkin:null,
            focusRectPadding:null
        };

        protected var _direction:String;
        protected var _minimum:Number = 0;
        protected var _maximum:Number = 10;
        protected var _value:Number = 0;
        protected var _tickInterval:Number = 0;
        protected var _snapInterval:Number = 0;
        protected var _liveDragging:Boolean = false;
        protected var tickContainer:Sprite;
        protected var thumb:BaseButton;
        protected var track:BaseButton;

        public function Slider(){
            _direction = SliderDirection.HORIZONTAL;
            super();
            setStyles();
        }
        public static function getStyleDefinition():Object{
            return (defaultStyles);
        }

        public function get direction():String{
            return (_direction);
        }
        public function set direction(_arg1:String):void{
            _direction = _arg1;
            var _local2 = (_direction == SliderDirection.VERTICAL);
            if (isLivePreview){
                if (_local2){
                    setScaleY(-1);
                    y = track.height;
                } else {
                    setScaleY(1);
                    y = 0;
                };
                positionThumb();
                return;
            };
            if (((_local2) && (componentInspectorSetting))){
                if ((rotation % 90) == 0){
                    setScaleY(-1);
                };
            };
            if (!componentInspectorSetting){
                rotation = ((_local2) ? 90 : 0);
            };
        }
        public function get minimum():Number{
            return (_minimum);
        }
        public function set minimum(_arg1:Number):void{
            _minimum = _arg1;
            this.value = Math.max(_arg1, this.value);
            invalidate(InvalidationType.DATA);
        }
        public function get maximum():Number{
            return (_maximum);
        }
        public function set maximum(_arg1:Number):void{
            _maximum = _arg1;
            this.value = Math.min(_arg1, this.value);
            invalidate(InvalidationType.DATA);
        }
        public function get tickInterval():Number{
            return (_tickInterval);
        }
        public function set tickInterval(_arg1:Number):void{
            _tickInterval = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        public function get snapInterval():Number{
            return (_snapInterval);
        }
        public function set snapInterval(_arg1:Number):void{
            _snapInterval = _arg1;
        }
        public function set liveDragging(_arg1:Boolean):void{
            _liveDragging = _arg1;
        }
        public function get liveDragging():Boolean{
            return (_liveDragging);
        }
        override public function get enabled():Boolean{
            return (super.enabled);
        }
        override public function set enabled(_arg1:Boolean):void{
            if (enabled == _arg1){
                return;
            };
            super.enabled = _arg1;
            track.enabled = (thumb.enabled = _arg1);
        }
        override public function setSize(_arg1:Number, _arg2:Number):void{
            if ((((_direction == SliderDirection.VERTICAL)) && (!(isLivePreview)))){
                super.setSize(_arg2, _arg1);
            } else {
                super.setSize(_arg1, _arg2);
            };
            invalidate(InvalidationType.SIZE);
        }
        public function get value():Number{
            return (_value);
        }
        public function set value(_arg1:Number):void{
            doSetValue(_arg1);
        }
        protected function doSetValue(_arg1:Number, _arg2:String=null, _arg3:String=null, _arg4:int=undefined):void{
            var _local6:Number;
            var _local7:Number;
            var _local8:Number;
            var _local9:Number;
            var _local5:Number = _value;
            if (((!((_snapInterval == 0))) && (!((_snapInterval == 1))))){
                _local6 = Math.pow(10, getPrecision(snapInterval));
                _local7 = (_snapInterval * _local6);
                _local8 = Math.round((_arg1 * _local6));
                _local9 = (Math.round((_local8 / _local7)) * _local7);
                _arg1 = (_local9 / _local6);
                _value = Math.max(minimum, Math.min(maximum, _arg1));
            } else {
                _value = Math.max(minimum, Math.min(maximum, Math.round(_arg1)));
            };
            if (((!((_local5 == _value))) && (((((liveDragging) && (!((_arg3 == null))))) || ((_arg2 == InteractionInputType.KEYBOARD)))))){
                dispatchEvent(new SliderEvent(SliderEvent.CHANGE, value, _arg3, _arg2, _arg4));
            };
            positionThumb();
        }
        protected function setStyles():void{
            copyStylesToChild(thumb, THUMB_STYLES);
            copyStylesToChild(track, TRACK_STYLES);
        }
        override protected function draw():void{
            if (isInvalid(InvalidationType.STYLES)){
                setStyles();
                invalidate(InvalidationType.SIZE, false);
            };
            if (isInvalid(InvalidationType.SIZE)){
                track.setSize(_width, track.height);
                track.drawNow();
                thumb.drawNow();
            };
            if (tickInterval > 0){
                drawTicks();
            } else {
                clearTicks();
            };
            positionThumb();
            super.draw();
        }
        protected function positionThumb():void{
            thumb.x = ((((_direction)==SliderDirection.VERTICAL) ? (maximum - value) : (value - minimum) / (maximum - minimum)) * _width);
        }
        protected function drawTicks():void{
            var _local5:DisplayObject;
            clearTicks();
            tickContainer = new Sprite();
            var _local1:Number = ((maximum)<1) ? (tickInterval / 100) : tickInterval;
            var _local2:Number = ((maximum - minimum) / _local1);
            var _local3:Number = (_width / _local2);
            var _local4:uint;
            while (_local4 <= _local2) {
                _local5 = getDisplayObjectInstance(getStyleValue("tickSkin"));
                _local5.x = (_local3 * _local4);
                _local5.y = ((track.y - _local5.height) - 2);
                tickContainer.addChild(_local5);
                _local4++;
            };
            addChild(tickContainer);
        }
        protected function clearTicks():void{
            if (((!(tickContainer)) || (!(tickContainer.parent)))){
                return;
            };
            removeChild(tickContainer);
        }
        protected function calculateValue(_arg1:Number, _arg2:String, _arg3:String, _arg4:int=undefined):void{
            var _local5:Number = ((_arg1 / _width) * (maximum - minimum));
            if (_direction == SliderDirection.VERTICAL){
                _local5 = (maximum - _local5);
            } else {
                _local5 = (minimum + _local5);
            };
            doSetValue(_local5, _arg2, _arg3, _arg4);
        }
        protected function doDrag(_arg1:MouseEvent):void{
            var _local2:Number = (_width / snapInterval);
            var _local3:Number = track.mouseX;
            calculateValue(_local3, InteractionInputType.MOUSE, SliderEventClickTarget.THUMB);
            dispatchEvent(new SliderEvent(SliderEvent.THUMB_DRAG, value, SliderEventClickTarget.THUMB, InteractionInputType.MOUSE));
        }
        protected function thumbPressHandler(_arg1:MouseEvent):void{
            var _local2:DisplayObjectContainer = focusManager.form;
            _local2.addEventListener(MouseEvent.MOUSE_MOVE, doDrag, false, 0, true);
            _local2.addEventListener(MouseEvent.MOUSE_UP, thumbReleaseHandler, false, 0, true);
            dispatchEvent(new SliderEvent(SliderEvent.THUMB_PRESS, value, SliderEventClickTarget.THUMB, InteractionInputType.MOUSE));
        }
        protected function thumbReleaseHandler(_arg1:MouseEvent):void{
            var _local2:DisplayObjectContainer = focusManager.form;
            _local2.removeEventListener(MouseEvent.MOUSE_MOVE, doDrag);
            _local2.removeEventListener(MouseEvent.MOUSE_UP, thumbReleaseHandler);
            dispatchEvent(new SliderEvent(SliderEvent.THUMB_RELEASE, value, SliderEventClickTarget.THUMB, InteractionInputType.MOUSE));
            dispatchEvent(new SliderEvent(SliderEvent.CHANGE, value, SliderEventClickTarget.THUMB, InteractionInputType.MOUSE));
        }
        protected function onTrackClick(_arg1:MouseEvent):void{
            calculateValue(track.mouseX, InteractionInputType.MOUSE, SliderEventClickTarget.TRACK);
            if (!liveDragging){
                dispatchEvent(new SliderEvent(SliderEvent.CHANGE, value, SliderEventClickTarget.TRACK, InteractionInputType.MOUSE));
            };
        }
        override protected function keyDownHandler(_arg1:KeyboardEvent):void{
            var _local3:Number;
            if (!enabled){
                return;
            };
            var _local2:Number = ((snapInterval)>0) ? snapInterval : 1;
            var _local4 = (direction == SliderDirection.HORIZONTAL);
            if ((((((_arg1.keyCode == Keyboard.DOWN)) && (!(_local4)))) || ((((_arg1.keyCode == Keyboard.LEFT)) && (_local4))))){
                _local3 = (value - _local2);
            } else {
                if ((((((_arg1.keyCode == Keyboard.UP)) && (!(_local4)))) || ((((_arg1.keyCode == Keyboard.RIGHT)) && (_local4))))){
                    _local3 = (value + _local2);
                } else {
                    if ((((((_arg1.keyCode == Keyboard.PAGE_DOWN)) && (!(_local4)))) || ((((_arg1.keyCode == Keyboard.HOME)) && (_local4))))){
                        _local3 = minimum;
                    } else {
                        if ((((((_arg1.keyCode == Keyboard.PAGE_UP)) && (!(_local4)))) || ((((_arg1.keyCode == Keyboard.END)) && (_local4))))){
                            _local3 = maximum;
                        };
                    };
                };
            };
            if (!isNaN(_local3)){
                _arg1.stopPropagation();
                doSetValue(_local3, InteractionInputType.KEYBOARD, null, _arg1.keyCode);
            };
        }
        override protected function configUI():void{
            super.configUI();
            thumb = new BaseButton();
            thumb.setSize(13, 13);
            thumb.autoRepeat = false;
            addChild(thumb);
            thumb.addEventListener(MouseEvent.MOUSE_DOWN, thumbPressHandler, false, 0, true);
            track = new BaseButton();
            track.move(0, 0);
            track.setSize(80, 4);
            track.autoRepeat = false;
            track.useHandCursor = false;
            track.addEventListener(MouseEvent.CLICK, onTrackClick, false, 0, true);
            addChildAt(track, 0);
        }
        protected function getPrecision(_arg1:Number):Number{
            var _local2:String = _arg1.toString();
            if (_local2.indexOf(".") == -1){
                return (0);
            };
            return (_local2.split(".").pop().length);
        }

    }
}//package fl.controls 
﻿package fl.controls {
    import fl.core.*;
    import flash.display.*;
    import flash.events.*;
    import flash.text.*;
    import fl.managers.*;
    import fl.events.*;
    import flash.ui.*;

    public class TextInput extends UIComponent implements IFocusManagerComponent {

        private static var defaultStyles:Object = {
            upSkin:"TextInput_upSkin",
            disabledSkin:"TextInput_disabledSkin",
            focusRectSkin:null,
            focusRectPadding:null,
            textFormat:null,
            disabledTextFormat:null,
            textPadding:0,
            embedFonts:false
        };
        public static var createAccessibilityImplementation:Function;

        public var textField:TextField;
        protected var _editable:Boolean = true;
        protected var background:DisplayObject;
        protected var _html:Boolean = false;
        protected var _savedHTML:String;

        public static function getStyleDefinition():Object{
            return (defaultStyles);
        }

        public function get text():String{
            return (textField.text);
        }
        public function set text(_arg1:String):void{
            textField.text = _arg1;
            _html = false;
            invalidate(InvalidationType.DATA);
            invalidate(InvalidationType.STYLES);
        }
        override public function get enabled():Boolean{
            return (super.enabled);
        }
        override public function set enabled(_arg1:Boolean):void{
            super.enabled = _arg1;
            updateTextFieldType();
        }
        public function get imeMode():String{
            return (_imeMode);
        }
        public function set imeMode(_arg1:String):void{
            _imeMode = _arg1;
        }
        public function get alwaysShowSelection():Boolean{
            return (textField.alwaysShowSelection);
        }
        public function set alwaysShowSelection(_arg1:Boolean):void{
            textField.alwaysShowSelection = _arg1;
        }
        override public function drawFocus(_arg1:Boolean):void{
            if (focusTarget != null){
                focusTarget.drawFocus(_arg1);
                return;
            };
            super.drawFocus(_arg1);
        }
        public function get editable():Boolean{
            return (_editable);
        }
        public function set editable(_arg1:Boolean):void{
            _editable = _arg1;
            updateTextFieldType();
        }
        public function get horizontalScrollPosition():int{
            return (textField.scrollH);
        }
        public function set horizontalScrollPosition(_arg1:int):void{
            textField.scrollH = _arg1;
        }
        public function get maxHorizontalScrollPosition():int{
            return (textField.maxScrollH);
        }
        public function get length():int{
            return (textField.length);
        }
        public function get maxChars():int{
            return (textField.maxChars);
        }
        public function set maxChars(_arg1:int):void{
            textField.maxChars = _arg1;
        }
        public function get displayAsPassword():Boolean{
            return (textField.displayAsPassword);
        }
        public function set displayAsPassword(_arg1:Boolean):void{
            textField.displayAsPassword = _arg1;
        }
        public function get restrict():String{
            return (textField.restrict);
        }
        public function set restrict(_arg1:String):void{
            if (((componentInspectorSetting) && ((_arg1 == "")))){
                _arg1 = null;
            };
            textField.restrict = _arg1;
        }
        public function get selectionBeginIndex():int{
            return (textField.selectionBeginIndex);
        }
        public function get selectionEndIndex():int{
            return (textField.selectionEndIndex);
        }
        public function get condenseWhite():Boolean{
            return (textField.condenseWhite);
        }
        public function set condenseWhite(_arg1:Boolean):void{
            textField.condenseWhite = _arg1;
        }
        public function get htmlText():String{
            return (textField.htmlText);
        }
        public function set htmlText(_arg1:String):void{
            if (_arg1 == ""){
                text = "";
                return;
            };
            _html = true;
            _savedHTML = _arg1;
            textField.htmlText = _arg1;
            invalidate(InvalidationType.DATA);
            invalidate(InvalidationType.STYLES);
        }
        public function get textHeight():Number{
            return (textField.textHeight);
        }
        public function get textWidth():Number{
            return (textField.textWidth);
        }
        public function setSelection(_arg1:int, _arg2:int):void{
            textField.setSelection(_arg1, _arg2);
        }
        public function getLineMetrics(_arg1:int):TextLineMetrics{
            return (textField.getLineMetrics(_arg1));
        }
        public function appendText(_arg1:String):void{
            textField.appendText(_arg1);
        }
        protected function updateTextFieldType():void{
            textField.type = ((((enabled) && (editable))) ? TextFieldType.INPUT : TextFieldType.DYNAMIC);
            textField.selectable = enabled;
        }
        protected function handleKeyDown(_arg1:KeyboardEvent):void{
            if (_arg1.keyCode == Keyboard.ENTER){
                dispatchEvent(new ComponentEvent(ComponentEvent.ENTER, true));
            };
        }
        protected function handleChange(_arg1:Event):void{
            _arg1.stopPropagation();
            dispatchEvent(new Event(Event.CHANGE, true));
        }
        protected function handleTextInput(_arg1:TextEvent):void{
            _arg1.stopPropagation();
            dispatchEvent(new TextEvent(TextEvent.TEXT_INPUT, true, false, _arg1.text));
        }
        protected function setEmbedFont(){
            var _local1:Object = getStyleValue("embedFonts");
            if (_local1 != null){
                textField.embedFonts = _local1;
            };
        }
        override protected function draw():void{
            var _local1:Object;
            if (isInvalid(InvalidationType.STYLES, InvalidationType.STATE)){
                drawTextFormat();
                drawBackground();
                _local1 = getStyleValue("embedFonts");
                if (_local1 != null){
                    textField.embedFonts = _local1;
                };
                invalidate(InvalidationType.SIZE, false);
            };
            if (isInvalid(InvalidationType.SIZE)){
                drawLayout();
            };
            super.draw();
        }
        protected function drawBackground():void{
            var _local1:DisplayObject = background;
            var _local2:String = ((enabled) ? "upSkin" : "disabledSkin");
            background = getDisplayObjectInstance(getStyleValue(_local2));
            if (background == null){
                return;
            };
            addChildAt(background, 0);
            if (((((!((_local1 == null))) && (!((_local1 == background))))) && (contains(_local1)))){
                removeChild(_local1);
            };
        }
        protected function drawTextFormat():void{
            var _local1:Object = UIComponent.getStyleDefinition();
            var _local2:TextFormat = ((enabled) ? (_local1.defaultTextFormat as TextFormat) : (_local1.defaultDisabledTextFormat as TextFormat));
            textField.setTextFormat(_local2);
            var _local3:TextFormat = (getStyleValue(((enabled) ? "textFormat" : "disabledTextFormat")) as TextFormat);
            if (_local3 != null){
                textField.setTextFormat(_local3);
            } else {
                _local3 = _local2;
            };
            textField.defaultTextFormat = _local3;
            setEmbedFont();
            if (_html){
                textField.htmlText = _savedHTML;
            };
        }
        protected function drawLayout():void{
            var _local1:Number = Number(getStyleValue("textPadding"));
            if (background != null){
                background.width = width;
                background.height = height;
            };
            textField.width = (width - (2 * _local1));
            textField.height = (height - (2 * _local1));
            textField.x = (textField.y = _local1);
        }
        override protected function configUI():void{
            super.configUI();
            tabChildren = true;
            textField = new TextField();
            addChild(textField);
            updateTextFieldType();
            textField.addEventListener(TextEvent.TEXT_INPUT, handleTextInput, false, 0, true);
            textField.addEventListener(Event.CHANGE, handleChange, false, 0, true);
            textField.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown, false, 0, true);
        }
        override public function setFocus():void{
            stage.focus = textField;
        }
        override protected function isOurFocus(_arg1:DisplayObject):Boolean{
            return ((((_arg1 == textField)) || (super.isOurFocus(_arg1))));
        }
        override protected function focusInHandler(_arg1:FocusEvent):void{
            if (_arg1.target == this){
                stage.focus = textField;
            };
            var _local2:IFocusManager = focusManager;
            if (((editable) && (_local2))){
                _local2.showFocusIndicator = true;
                if (((textField.selectable) && ((textField.selectionBeginIndex == textField.selectionBeginIndex)))){
                    setSelection(0, textField.length);
                };
            };
            super.focusInHandler(_arg1);
            if (editable){
                setIMEMode(true);
            };
        }
        override protected function focusOutHandler(_arg1:FocusEvent):void{
            super.focusOutHandler(_arg1);
            if (editable){
                setIMEMode(false);
            };
        }

    }
}//package fl.controls 
﻿package fl.controls {
    import fl.core.*;
    import flash.text.*;
    import fl.events.*;

    public class Label extends UIComponent {

        private static var defaultStyles:Object = {
            textFormat:null,
            embedFonts:false
        };

        public var textField:TextField;
        protected var actualWidth:Number;
        protected var actualHeight:Number;
        protected var defaultLabel:String = "Label";
        protected var _savedHTML:String;
        protected var _html:Boolean = false;

        public function Label(){
            text = defaultLabel;
            actualWidth = _width;
            actualHeight = _height;
        }
        public static function getStyleDefinition():Object{
            return (defaultStyles);
        }

        public function get text():String{
            return (textField.text);
        }
        public function set text(_arg1:String):void{
            if (_arg1 == text){
                return;
            };
            if (((componentInspectorSetting) && ((_arg1 == defaultLabel)))){
                return;
            };
            _html = false;
            textField.text = _arg1;
            if (textField.autoSize != TextFieldAutoSize.NONE){
                invalidate(InvalidationType.SIZE);
            };
        }
        public function get htmlText():String{
            return (textField.htmlText);
        }
        public function set htmlText(_arg1:String):void{
            if (_arg1 == htmlText){
                return;
            };
            if (((componentInspectorSetting) && ((_arg1 == "")))){
                return;
            };
            _html = true;
            _savedHTML = _arg1;
            textField.htmlText = _arg1;
            if (textField.autoSize != TextFieldAutoSize.NONE){
                invalidate(InvalidationType.SIZE);
            };
        }
        public function get condenseWhite():Boolean{
            return (textField.condenseWhite);
        }
        public function set condenseWhite(_arg1:Boolean):void{
            textField.condenseWhite = _arg1;
            if (textField.autoSize != TextFieldAutoSize.NONE){
                invalidate(InvalidationType.SIZE);
            };
        }
        public function get selectable():Boolean{
            return (textField.selectable);
        }
        public function set selectable(_arg1:Boolean):void{
            textField.selectable = _arg1;
        }
        public function get wordWrap():Boolean{
            return (textField.wordWrap);
        }
        public function set wordWrap(_arg1:Boolean):void{
            textField.wordWrap = _arg1;
            if (textField.autoSize != TextFieldAutoSize.NONE){
                invalidate(InvalidationType.SIZE);
            };
        }
        public function get autoSize():String{
            return (textField.autoSize);
        }
        public function set autoSize(_arg1:String):void{
            textField.autoSize = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        override public function get width():Number{
            if (((!((textField.autoSize == TextFieldAutoSize.NONE))) && (!(wordWrap)))){
                return (_width);
            };
            return (actualWidth);
        }
        override public function set width(_arg1:Number):void{
            actualWidth = _arg1;
            super.width = _arg1;
        }
        override public function get height():Number{
            if (((!((textField.autoSize == TextFieldAutoSize.NONE))) && (wordWrap))){
                return (_height);
            };
            return (actualHeight);
        }
        override public function setSize(_arg1:Number, _arg2:Number):void{
            actualWidth = _arg1;
            actualHeight = _arg2;
            super.setSize(_arg1, _arg2);
        }
        override protected function configUI():void{
            super.configUI();
            textField = new TextField();
            addChild(textField);
            textField.type = TextFieldType.DYNAMIC;
            textField.selectable = false;
            textField.wordWrap = false;
        }
        override protected function draw():void{
            var _local1:Object;
            if (isInvalid(InvalidationType.STYLES, InvalidationType.STATE)){
                drawTextFormat();
                _local1 = getStyleValue("embedFonts");
                if (_local1 != null){
                    textField.embedFonts = _local1;
                };
                if (textField.autoSize != TextFieldAutoSize.NONE){
                    invalidate(InvalidationType.SIZE, false);
                };
            };
            if (isInvalid(InvalidationType.SIZE)){
                drawLayout();
            };
            super.draw();
        }
        protected function drawTextFormat():void{
            var _local2:Object;
            var _local1:TextFormat = (getStyleValue("textFormat") as TextFormat);
            if (_local1 == null){
                _local2 = UIComponent.getStyleDefinition();
                _local1 = ((enabled) ? (_local2.defaultTextFormat as TextFormat) : (_local2.defaultDisabledTextFormat as TextFormat));
            };
            textField.defaultTextFormat = _local1;
            textField.setTextFormat(_local1);
            if (((_html) && (!((_savedHTML == null))))){
                htmlText = _savedHTML;
            };
        }
        protected function drawLayout():void{
            var _local2:Number;
            var _local3:Number;
            var _local1:Boolean;
            textField.width = width;
            textField.height = height;
            if (textField.autoSize != TextFieldAutoSize.NONE){
                _local2 = textField.width;
                _local3 = textField.height;
                _local1 = ((!((_width == _local2))) || (!((_height == _local3))));
                _width = _local2;
                _height = _local3;
                switch (textField.autoSize){
                    case TextFieldAutoSize.CENTER:
                        textField.x = ((actualWidth / 2) - (textField.width / 2));
                        break;
                    case TextFieldAutoSize.LEFT:
                        textField.x = 0;
                        break;
                    case TextFieldAutoSize.RIGHT:
                        textField.x = -((textField.width - actualWidth));
                        break;
                };
            } else {
                textField.width = actualWidth;
                textField.height = actualHeight;
                textField.x = 0;
            };
            if (_local1){
                dispatchEvent(new ComponentEvent(ComponentEvent.RESIZE, true));
            };
        }

    }
}//package fl.controls 
﻿package fl.controls {
    import fl.controls.listClasses.*;
    import fl.core.*;
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.geom.*;
    import fl.data.*;
    import fl.managers.*;
    import fl.events.*;
    import fl.controls.dataGridClasses.*;
    import flash.ui.*;

    public class DataGrid extends SelectableList implements IFocusManagerComponent {

        protected static const HEADER_STYLES:Object = {
            disabledSkin:"headerDisabledSkin",
            downSkin:"headerDownSkin",
            overSkin:"headerOverSkin",
            upSkin:"headerUpSkin",
            textFormat:"headerTextFormat",
            disabledTextFormat:"headerDisabledTextFormat",
            textPadding:"headerTextPadding"
        };

        private static var defaultStyles:Object = {
            headerUpSkin:"HeaderRenderer_upSkin",
            headerDownSkin:"HeaderRenderer_downSkin",
            headerOverSkin:"HeaderRenderer_overSkin",
            headerDisabledSkin:"HeaderRenderer_disabledSkin",
            headerSortArrowDescSkin:"HeaderSortArrow_descIcon",
            headerSortArrowAscSkin:"HeaderSortArrow_ascIcon",
            columnStretchCursorSkin:"ColumnStretch_cursor",
            columnDividerSkin:null,
            headerTextFormat:null,
            headerDisabledTextFormat:null,
            headerTextPadding:5,
            headerRenderer:HeaderRenderer,
            focusRectSkin:null,
            focusRectPadding:null,
            skin:"DataGrid_skin"
        };
        public static var createAccessibilityImplementation:Function;

        protected var _rowHeight:Number = 20;
        protected var _headerHeight:Number = 25;
        protected var _showHeaders:Boolean = true;
        protected var _columns:Array;
        protected var _minColumnWidth:Number;
        protected var header:Sprite;
        protected var headerMask:Sprite;
        protected var headerSortArrow:Sprite;
        protected var _cellRenderer:Object;
        protected var _headerRenderer:Object;
        protected var _labelFunction:Function;
        protected var visibleColumns:Array;
        protected var displayableColumns:Array;
        protected var columnsInvalid:Boolean = true;
        protected var minColumnWidthInvalid:Boolean = false;
        protected var activeCellRenderersMap:Dictionary;
        protected var availableCellRenderersMap:Dictionary;
        protected var dragHandlesMap:Dictionary;
        protected var columnStretchIndex:Number = -1;
        protected var columnStretchStartX:Number;
        protected var columnStretchStartWidth:Number;
        protected var columnStretchCursor:Sprite;
        protected var _sortIndex:int = -1;
        protected var lastSortIndex:int = -1;
        protected var _sortDescending:Boolean = false;
        protected var _editedItemPosition:Object;
        protected var editedItemPositionChanged:Boolean = false;
        protected var proposedEditedItemPosition;
        protected var actualRowIndex:int;
        protected var actualColIndex:int;
        protected var isPressed:Boolean = false;
        protected var losingFocus:Boolean = false;
        protected var maxHeaderHeight:Number = 25;
        protected var currentHoveredRow:int = -1;
        public var editable:Boolean = false;
        public var resizableColumns:Boolean = true;
        public var sortableColumns:Boolean = true;
        public var itemEditorInstance:Object;

        public function DataGrid(){
            if (_columns == null){
                _columns = [];
            };
            _horizontalScrollPolicy = ScrollPolicy.OFF;
            activeCellRenderersMap = new Dictionary(true);
            availableCellRenderersMap = new Dictionary(true);
            addEventListener(DataGridEvent.ITEM_EDIT_BEGINNING, itemEditorItemEditBeginningHandler, false, -50);
            addEventListener(DataGridEvent.ITEM_EDIT_BEGIN, itemEditorItemEditBeginHandler, false, -50);
            addEventListener(DataGridEvent.ITEM_EDIT_END, itemEditorItemEditEndHandler, false, -50);
            addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
            addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
        }
        public static function getStyleDefinition():Object{
            return (mergeStyles(defaultStyles, SelectableList.getStyleDefinition(), ScrollBar.getStyleDefinition()));
        }

        override public function set dataProvider(_arg1:DataProvider):void{
            super.dataProvider = _arg1;
            if (_columns == null){
                _columns = [];
            };
            if (_columns.length == 0){
                createColumnsFromDataProvider();
            };
            removeCellRenderers();
        }
        override public function set enabled(_arg1:Boolean):void{
            super.enabled = _arg1;
            header.mouseChildren = _enabled;
        }
        override public function setSize(_arg1:Number, _arg2:Number):void{
            super.setSize(_arg1, _arg2);
            columnsInvalid = true;
        }
        override public function get horizontalScrollPolicy():String{
            return (_horizontalScrollPolicy);
        }
        override public function set horizontalScrollPolicy(_arg1:String):void{
            super.horizontalScrollPolicy = _arg1;
            columnsInvalid = true;
        }
        public function get columns():Array{
            return (_columns.slice(0));
        }
        public function set columns(_arg1:Array):void{
            removeCellRenderers();
            _columns = [];
            var _local2:uint;
            while (_local2 < _arg1.length) {
                addColumn(_arg1[_local2]);
                _local2++;
            };
        }
        public function get minColumnWidth():Number{
            return (_minColumnWidth);
        }
        public function set minColumnWidth(_arg1:Number):void{
            _minColumnWidth = _arg1;
            columnsInvalid = true;
            minColumnWidthInvalid = true;
            invalidate(InvalidationType.SIZE);
        }
        public function get labelFunction():Function{
            return (_labelFunction);
        }
        public function set labelFunction(_arg1:Function):void{
            if (_labelFunction == _arg1){
                return;
            };
            _labelFunction = _arg1;
            invalidate(InvalidationType.DATA);
        }
        override public function get rowCount():uint{
            return (Math.ceil((calculateAvailableHeight() / rowHeight)));
        }
        public function set rowCount(_arg1:uint):void{
            var _local2:Number = Number(getStyleValue("contentPadding"));
            var _local3:Number = (((((_horizontalScrollPolicy == ScrollPolicy.ON)) || ((((_horizontalScrollPolicy == ScrollPolicy.AUTO)) && (hScrollBar))))) ? 15 : 0);
            height = ((((rowHeight * _arg1) + (2 * _local2)) + _local3) + ((showHeaders) ? headerHeight : 0));
        }
        public function get rowHeight():Number{
            return (_rowHeight);
        }
        public function set rowHeight(_arg1:Number):void{
            _rowHeight = Math.max(0, _arg1);
            invalidate(InvalidationType.SIZE);
        }
        public function get headerHeight():Number{
            return (_headerHeight);
        }
        public function set headerHeight(_arg1:Number):void{
            maxHeaderHeight = _arg1;
            _headerHeight = Math.max(0, _arg1);
            invalidate(InvalidationType.SIZE);
        }
        public function get showHeaders():Boolean{
            return (_showHeaders);
        }
        public function set showHeaders(_arg1:Boolean):void{
            _showHeaders = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        public function get sortIndex():int{
            return (_sortIndex);
        }
        public function get sortDescending():Boolean{
            return (_sortDescending);
        }
        public function get imeMode():String{
            return (_imeMode);
        }
        public function set imeMode(_arg1:String):void{
            _imeMode = _arg1;
        }
        public function get editedItemRenderer():ICellRenderer{
            if (!itemEditorInstance){
                return (null);
            };
            return (getCellRendererAt(actualRowIndex, actualColIndex));
        }
        public function get editedItemPosition():Object{
            if (_editedItemPosition){
                return ({
                    rowIndex:_editedItemPosition.rowIndex,
                    columnIndex:_editedItemPosition.columnIndex
                });
            };
            return (_editedItemPosition);
        }
        public function set editedItemPosition(_arg1:Object):void{
            var _local2:Object = {
                rowIndex:_arg1.rowIndex,
                columnIndex:_arg1.columnIndex
            };
            setEditedItemPosition(_local2);
        }
        protected function calculateAvailableHeight():Number{
            var _local1:Number = Number(getStyleValue("contentPadding"));
            var _local2:Number = (((((_horizontalScrollPolicy == ScrollPolicy.ON)) || ((((_horizontalScrollPolicy == ScrollPolicy.AUTO)) && ((_maxHorizontalScrollPosition > 0)))))) ? 15 : 0);
            return ((((height - (_local1 * 2)) - _local2) - ((showHeaders) ? headerHeight : 0)));
        }
        public function addColumn(_arg1):DataGridColumn{
            return (addColumnAt(_arg1, _columns.length));
        }
        public function addColumnAt(_arg1, _arg2:uint):DataGridColumn{
            var _local3:DataGridColumn;
            var _local5:uint;
            if (_arg2 < _columns.length){
                _columns.splice(_arg2, 0, "");
                _local5 = (_arg2 + 1);
                while (_local5 < _columns.length) {
                    _local3 = (_columns[_local5] as DataGridColumn);
                    _local3.colNum = _local5;
                    _local5++;
                };
            };
            var _local4:* = _arg1;
            if (!(_local4 is DataGridColumn)){
                if ((_local4 is String)){
                    _local4 = new DataGridColumn(_local4);
                } else {
                    _local4 = new DataGridColumn();
                };
            };
            _local3 = (_local4 as DataGridColumn);
            _local3.owner = this;
            _local3.colNum = _arg2;
            _columns[_arg2] = _local3;
            invalidate(InvalidationType.SIZE);
            columnsInvalid = true;
            return (_local3);
        }
        public function removeColumnAt(_arg1:uint):DataGridColumn{
            var _local3:uint;
            var _local2:DataGridColumn = (_columns[_arg1] as DataGridColumn);
            if (_local2 != null){
                removeCellRenderersByColumn(_local2);
                _columns.splice(_arg1, 1);
                _local3 = _arg1;
                while (_local3 < _columns.length) {
                    _local2 = (_columns[_local3] as DataGridColumn);
                    if (_local2){
                        _local2.colNum = _local3;
                    };
                    _local3++;
                };
                invalidate(InvalidationType.SIZE);
                columnsInvalid = true;
            };
            return (_local2);
        }
        public function removeAllColumns():void{
            if (_columns.length > 0){
                removeCellRenderers();
                _columns = [];
                invalidate(InvalidationType.SIZE);
                columnsInvalid = true;
            };
        }
        public function getColumnAt(_arg1:uint):DataGridColumn{
            return ((_columns[_arg1] as DataGridColumn));
        }
        public function getColumnIndex(_arg1:String):int{
            var _local3:DataGridColumn;
            var _local2:uint;
            while (_local2 < _columns.length) {
                _local3 = (_columns[_local2] as DataGridColumn);
                if (_local3.dataField == _arg1){
                    return (_local2);
                };
                _local2++;
            };
            return (-1);
        }
        public function getColumnCount():uint{
            return (_columns.length);
        }
        public function spaceColumnsEqually():void{
            var _local1:Number;
            var _local2:int;
            var _local3:DataGridColumn;
            drawNow();
            if (displayableColumns.length > 0){
                _local1 = (availableWidth / displayableColumns.length);
                _local2 = 0;
                while (_local2 < displayableColumns.length) {
                    _local3 = (displayableColumns[_local2] as DataGridColumn);
                    _local3.width = _local1;
                    _local2++;
                };
                invalidate(InvalidationType.SIZE);
                columnsInvalid = true;
            };
        }
        public function editField(_arg1:uint, _arg2:String, _arg3:Object):void{
            var _local4:Object = getItemAt(_arg1);
            _local4[_arg2] = _arg3;
            replaceItemAt(_local4, _arg1);
        }
        override public function itemToCellRenderer(_arg1:Object):ICellRenderer{
            return (null);
        }
        override protected function configUI():void{
            useFixedHorizontalScrolling = false;
            super.configUI();
            headerMask = new Sprite();
            var _local1:Graphics = headerMask.graphics;
            _local1.beginFill(0, 0.3);
            _local1.drawRect(0, 0, 100, 100);
            _local1.endFill();
            headerMask.visible = false;
            addChild(headerMask);
            header = new Sprite();
            addChild(header);
            header.mask = headerMask;
            _horizontalScrollPolicy = ScrollPolicy.OFF;
            _verticalScrollPolicy = ScrollPolicy.AUTO;
        }
        override protected function draw():void{
            var _local1 = !((contentHeight == (rowHeight * length)));
            contentHeight = (rowHeight * length);
            if (isInvalid(InvalidationType.STYLES)){
                setStyles();
                drawBackground();
                if (contentPadding != getStyleValue("contentPadding")){
                    invalidate(InvalidationType.SIZE, false);
                };
                if (((!((_cellRenderer == getStyleValue("cellRenderer")))) || (!((_headerRenderer == getStyleValue("headerRenderer")))))){
                    _invalidateList();
                    _cellRenderer = getStyleValue("cellRenderer");
                    _headerRenderer = getStyleValue("headerRenderer");
                };
            };
            if (isInvalid(InvalidationType.SIZE)){
                columnsInvalid = true;
            };
            if (((isInvalid(InvalidationType.SIZE, InvalidationType.STATE)) || (_local1))){
                drawLayout();
                drawDisabledOverlay();
            };
            if (isInvalid(InvalidationType.RENDERER_STYLES)){
                updateRendererStyles();
            };
            if (isInvalid(InvalidationType.STYLES, InvalidationType.SIZE, InvalidationType.DATA, InvalidationType.SCROLL, InvalidationType.SELECTED)){
                drawList();
            };
            updateChildren();
            validate();
        }
        override protected function drawLayout():void{
            vOffset = ((showHeaders) ? headerHeight : 0);
            super.drawLayout();
            contentScrollRect = listHolder.scrollRect;
            if (showHeaders){
                headerHeight = maxHeaderHeight;
                if (Math.floor((availableHeight - headerHeight)) <= 0){
                    _headerHeight = availableHeight;
                };
                list.y = headerHeight;
                contentScrollRect = listHolder.scrollRect;
                contentScrollRect.y = (contentPadding + headerHeight);
                contentScrollRect.height = (availableHeight - headerHeight);
                listHolder.y = (contentPadding + headerHeight);
                headerMask.x = contentPadding;
                headerMask.y = contentPadding;
                headerMask.width = availableWidth;
                headerMask.height = headerHeight;
            } else {
                contentScrollRect.y = contentPadding;
                listHolder.y = 0;
            };
            listHolder.scrollRect = contentScrollRect;
        }
        override protected function drawList():void{
            var _local3:Number;
            var _local4:Number;
            var _local5:uint;
            var _local6:Object;
            var _local7:ICellRenderer;
            var _local8:Array;
            var _local9:DataGridColumn;
            var _local13:Sprite;
            var _local14:UIComponent;
            var _local18:Number;
            var _local19:DataGridColumn;
            var _local20:Object;
            var _local21:Array;
            var _local22:Dictionary;
            var _local23:Object;
            var _local24:HeaderRenderer;
            var _local25:Sprite;
            var _local26:Graphics;
            var _local27:Boolean;
            var _local28:String;
            if (showHeaders){
                header.visible = true;
                header.x = (contentPadding - _horizontalScrollPosition);
                header.y = contentPadding;
                listHolder.y = (contentPadding + headerHeight);
                _local18 = Math.floor((availableHeight - headerHeight));
                _verticalScrollBar.setScrollProperties(_local18, 0, (contentHeight - _local18), _verticalScrollBar.pageScrollSize);
            } else {
                header.visible = false;
                listHolder.y = contentPadding;
            };
            listHolder.x = contentPadding;
            contentScrollRect = listHolder.scrollRect;
            contentScrollRect.x = _horizontalScrollPosition;
            contentScrollRect.y = (vOffset + (Math.floor(_verticalScrollPosition) % rowHeight));
            listHolder.scrollRect = contentScrollRect;
            listHolder.cacheAsBitmap = useBitmapScrolling;
            var _local1:uint = Math.min(Math.max((length - 1), 0), Math.floor((_verticalScrollPosition / rowHeight)));
            var _local2:uint = Math.min(Math.max((length - 1), 0), ((_local1 + rowCount) + 1));
            var _local10:Boolean = list.hitTestPoint(stage.mouseX, stage.mouseY);
            calculateColumnSizes();
            var _local11:Dictionary = (renderedItems = new Dictionary(true));
            if (length > 0){
                _local5 = _local1;
                while (_local5 <= _local2) {
                    _local11[_dataProvider.getItemAt(_local5)] = true;
                    _local5++;
                };
            };
            _local3 = 0;
            var _local12:DataGridColumn = (visibleColumns[0] as DataGridColumn);
            _local5 = 0;
            while (_local5 < displayableColumns.length) {
                _local19 = (displayableColumns[_local5] as DataGridColumn);
                if (_local19 != _local12){
                    _local3 = (_local3 + _local19.width);
                } else {
                    break;
                };
                _local5++;
            };
            while (header.numChildren > 0) {
                header.removeChildAt(0);
            };
            dragHandlesMap = new Dictionary(true);
            var _local15:Array = [];
            var _local16:uint = visibleColumns.length;
            var _local17:uint;
            while (_local17 < _local16) {
                _local9 = (visibleColumns[_local17] as DataGridColumn);
                _local15.push(_local9.colNum);
                if (showHeaders){
                    _local23 = ((_local9.headerRenderer)!=null) ? _local9.headerRenderer : _headerRenderer;
                    _local24 = (getDisplayObjectInstance(_local23) as HeaderRenderer);
                    if (_local24 != null){
                        _local24.addEventListener(MouseEvent.CLICK, handleHeaderRendererClick, false, 0, true);
                        _local24.x = _local3;
                        _local24.y = 0;
                        _local24.setSize(_local9.width, headerHeight);
                        _local24.column = _local9.colNum;
                        _local24.label = _local9.headerText;
                        header.addChildAt(_local24, _local17);
                        copyStylesToChild(_local24, HEADER_STYLES);
                        if ((((((sortIndex == -1)) && ((lastSortIndex == -1)))) || (!((_local9.colNum == sortIndex))))){
                            _local24.setStyle("icon", null);
                        } else {
                            _local24.setStyle("icon", ((sortDescending) ? getStyleValue("headerSortArrowAscSkin") : getStyleValue("headerSortArrowDescSkin")));
                        };
                        if ((((((_local17 < (_local16 - 1))) && (resizableColumns))) && (_local9.resizable))){
                            _local25 = new Sprite();
                            _local26 = _local25.graphics;
                            _local26.beginFill(0, 0);
                            _local26.drawRect(0, 0, 3, headerHeight);
                            _local26.endFill();
                            _local25.x = ((_local3 + _local9.width) - 2);
                            _local25.y = 0;
                            _local25.alpha = 0;
                            _local25.addEventListener(MouseEvent.MOUSE_OVER, handleHeaderResizeOver, false, 0, true);
                            _local25.addEventListener(MouseEvent.MOUSE_OUT, handleHeaderResizeOut, false, 0, true);
                            _local25.addEventListener(MouseEvent.MOUSE_DOWN, handleHeaderResizeDown, false, 0, true);
                            header.addChild(_local25);
                            dragHandlesMap[_local25] = _local9.colNum;
                        };
                        if ((((((_local17 == (_local16 - 1))) && ((_horizontalScrollPosition == 0)))) && ((availableWidth > (_local3 + _local9.width))))){
                            _local4 = Math.floor((availableWidth - _local3));
                            _local24.setSize(_local4, headerHeight);
                        } else {
                            _local4 = _local9.width;
                        };
                        _local24.drawNow();
                    };
                };
                _local20 = ((_local9.cellRenderer)!=null) ? _local9.cellRenderer : _cellRenderer;
                _local21 = availableCellRenderersMap[_local9];
                _local8 = activeCellRenderersMap[_local9];
                if (_local8 == null){
                    _local8 = [];
                    activeCellRenderersMap[_local9] = _local8;
                };
                if (_local21 == null){
                    _local21 = [];
                    availableCellRenderersMap[_local9] = _local21;
                };
                _local22 = new Dictionary(true);
                while (_local8.length > 0) {
                    _local7 = _local8.pop();
                    _local6 = _local7.data;
                    if ((((_local11[_local6] == null)) || ((invalidItems[_local6] == true)))){
                        _local21.push(_local7);
                    } else {
                        _local22[_local6] = _local7;
                        invalidItems[_local6] = true;
                    };
                    list.removeChild((_local7 as DisplayObject));
                };
                if (length > 0){
                    _local5 = _local1;
                    while (_local5 <= _local2) {
                        _local27 = false;
                        _local6 = _dataProvider.getItemAt(_local5);
                        if (_local22[_local6] != null){
                            _local27 = true;
                            _local7 = _local22[_local6];
                            delete _local22[_local6];
                        } else {
                            if (_local21.length > 0){
                                _local7 = (_local21.pop() as ICellRenderer);
                            } else {
                                _local7 = (getDisplayObjectInstance(_local20) as ICellRenderer);
                                _local13 = (_local7 as Sprite);
                                if (_local13 != null){
                                    _local13.addEventListener(MouseEvent.CLICK, handleCellRendererClick, false, 0, true);
                                    _local13.addEventListener(MouseEvent.ROLL_OVER, handleCellRendererMouseEvent, false, 0, true);
                                    _local13.addEventListener(MouseEvent.ROLL_OUT, handleCellRendererMouseEvent, false, 0, true);
                                    _local13.addEventListener(Event.CHANGE, handleCellRendererChange, false, 0, true);
                                    _local13.doubleClickEnabled = true;
                                    _local13.addEventListener(MouseEvent.DOUBLE_CLICK, handleCellRendererDoubleClick, false, 0, true);
                                    if (_local13["setStyle"] != null){
                                        for (_local28 in rendererStyles) {
                                            var _local31 = _local13;
                                            _local31["setStyle"](_local28, rendererStyles[_local28]);
                                        };
                                    };
                                };
                            };
                        };
                        list.addChild((_local7 as Sprite));
                        _local8.push(_local7);
                        _local7.x = _local3;
                        _local7.y = (rowHeight * (_local5 - _local1));
                        _local7.setSize(((_local17)==(_local16 - 1)) ? _local4 : _local9.width, rowHeight);
                        if (!_local27){
                            _local7.data = _local6;
                        };
                        _local7.listData = new ListData(columnItemToLabel(_local9.colNum, _local6), null, this, _local5, _local5, _local9.colNum);
                        if (((_local10) && (isHovered(_local7)))){
                            _local7.setMouseState("over");
                            currentHoveredRow = _local5;
                        } else {
                            _local7.setMouseState("up");
                        };
                        _local7.selected = !((_selectedIndices.indexOf(_local5) == -1));
                        if ((_local7 is UIComponent)){
                            _local14 = (_local7 as UIComponent);
                            _local14.drawNow();
                        };
                        _local5++;
                    };
                };
                _local3 = (_local3 + _local9.width);
                _local17++;
            };
            _local5 = 0;
            while (_local5 < _columns.length) {
                if (_local15.indexOf(_local5) == -1){
                    removeCellRenderersByColumn((_columns[_local5] as DataGridColumn));
                };
                _local5++;
            };
            if (editedItemPositionChanged){
                editedItemPositionChanged = false;
                commitEditedItemPosition(proposedEditedItemPosition);
                proposedEditedItemPosition = undefined;
            };
            invalidItems = new Dictionary(true);
        }
        override protected function updateRendererStyles():void{
            var _local2:Object;
            var _local3:uint;
            var _local4:uint;
            var _local5:String;
            var _local1:Array = [];
            for (_local2 in availableCellRenderersMap) {
                _local1 = _local1.concat(availableCellRenderersMap[_local2]);
            };
            for (_local2 in activeCellRenderersMap) {
                _local1 = _local1.concat(activeCellRenderersMap[_local2]);
            };
            _local3 = _local1.length;
            _local4 = 0;
            while (_local4 < _local3) {
                if (_local1[_local4]["setStyle"] == null){
                } else {
                    for (_local5 in updatedRendererStyles) {
                        _local1[_local4].setStyle(_local5, updatedRendererStyles[_local5]);
                    };
                    _local1[_local4].drawNow();
                };
                _local4++;
            };
            updatedRendererStyles = {};
        }
        protected function removeCellRenderers():void{
            var _local1:uint;
            while (_local1 < _columns.length) {
                removeCellRenderersByColumn((_columns[_local1] as DataGridColumn));
                _local1++;
            };
        }
        protected function removeCellRenderersByColumn(_arg1:DataGridColumn):void{
            if (_arg1 == null){
                return;
            };
            var _local2:Array = activeCellRenderersMap[_arg1];
            if (_local2 != null){
                while (_local2.length > 0) {
                    list.removeChild((_local2.pop() as DisplayObject));
                };
            };
        }
        override protected function handleCellRendererMouseEvent(_arg1:MouseEvent):void{
            var _local3:int;
            var _local4:String;
            var _local5:uint;
            var _local6:DataGridColumn;
            var _local7:ICellRenderer;
            var _local2:ICellRenderer = (_arg1.target as ICellRenderer);
            if (_local2){
                _local3 = _local2.listData.row;
                if (_arg1.type == MouseEvent.ROLL_OVER){
                    _local4 = "over";
                } else {
                    if (_arg1.type == MouseEvent.ROLL_OUT){
                        _local4 = "up";
                    };
                };
                if (_local4){
                    _local5 = 0;
                    while (_local5 < visibleColumns.length) {
                        _local6 = (visibleColumns[_local5] as DataGridColumn);
                        _local7 = getCellRendererAt(_local3, _local6.colNum);
                        if (_local7){
                            _local7.setMouseState(_local4);
                        };
                        if (_local3 != currentHoveredRow){
                            _local7 = getCellRendererAt(currentHoveredRow, _local6.colNum);
                            if (_local7){
                                _local7.setMouseState("up");
                            };
                        };
                        _local5++;
                    };
                };
            };
            super.handleCellRendererMouseEvent(_arg1);
        }
        protected function isHovered(_arg1:ICellRenderer):Boolean{
            var _local2:uint = Math.min(Math.max((length - 1), 0), Math.floor((_verticalScrollPosition / rowHeight)));
            var _local3:Number = ((_arg1.listData.row - _local2) * rowHeight);
            var _local4:Point = list.globalToLocal(new Point(0, stage.mouseY));
            return ((((_local4.y > _local3)) && ((_local4.y < (_local3 + rowHeight)))));
        }
        override protected function setHorizontalScrollPosition(_arg1:Number, _arg2:Boolean=false):void{
            if (_arg1 == _horizontalScrollPosition){
                return;
            };
            contentScrollRect = listHolder.scrollRect;
            contentScrollRect.x = _arg1;
            listHolder.scrollRect = contentScrollRect;
            list.x = 0;
            header.x = -(_arg1);
            super.setHorizontalScrollPosition(_arg1, true);
            invalidate(InvalidationType.SCROLL);
            columnsInvalid = true;
        }
        override protected function setVerticalScrollPosition(_arg1:Number, _arg2:Boolean=false):void{
            if (itemEditorInstance){
                endEdit(DataGridEventReason.OTHER);
            };
            invalidate(InvalidationType.SCROLL);
            super.setVerticalScrollPosition(_arg1, true);
        }
        public function columnItemToLabel(_arg1:uint, _arg2:Object):String{
            var _local3:DataGridColumn = (_columns[_arg1] as DataGridColumn);
            if (_local3 != null){
                return (_local3.itemToLabel(_arg2));
            };
            return (" ");
        }
        protected function calculateColumnSizes():void{
            var _local1:Number;
            var _local2:int;
            var _local3:int;
            var _local5:DataGridColumn;
            var _local6:DataGridColumn;
            var _local7:Number;
            var _local8:int;
            var _local9:Number;
            var _local10:int;
            var _local11:Number;
            var _local12:Number;
            var _local13:Number;
            var _local14:Number;
            var _local4:Number = 0;
            if (_columns.length == 0){
                visibleColumns = [];
                displayableColumns = [];
                return;
            };
            if (columnsInvalid){
                columnsInvalid = false;
                visibleColumns = [];
                if (minColumnWidthInvalid){
                    _local2 = _columns.length;
                    _local3 = 0;
                    while (_local3 < _local2) {
                        _columns[_local3].minWidth = minColumnWidth;
                        _local3++;
                    };
                    minColumnWidthInvalid = false;
                };
                displayableColumns = null;
                _local2 = _columns.length;
                _local3 = 0;
                while (_local3 < _local2) {
                    if (((displayableColumns) && (_columns[_local3].visible))){
                        displayableColumns.push(_columns[_local3]);
                    } else {
                        if (((!(displayableColumns)) && (!(_columns[_local3].visible)))){
                            displayableColumns = new Array(_local3);
                            _local8 = 0;
                            while (_local8 < _local3) {
                                displayableColumns[_local8] = _columns[_local8];
                                _local8++;
                            };
                        };
                    };
                    _local3++;
                };
                if (!displayableColumns){
                    displayableColumns = _columns;
                };
                if (horizontalScrollPolicy == ScrollPolicy.OFF){
                    _local2 = displayableColumns.length;
                    _local3 = 0;
                    while (_local3 < _local2) {
                        visibleColumns.push(displayableColumns[_local3]);
                        _local3++;
                    };
                } else {
                    _local2 = displayableColumns.length;
                    _local9 = 0;
                    _local3 = 0;
                    while (_local3 < _local2) {
                        _local5 = (displayableColumns[_local3] as DataGridColumn);
                        if (((((_local9 + _local5.width) > _horizontalScrollPosition)) && ((_local9 < (_horizontalScrollPosition + availableWidth))))){
                            visibleColumns.push(_local5);
                        };
                        _local9 = (_local9 + _local5.width);
                        _local3++;
                    };
                };
            };
            if (horizontalScrollPolicy == ScrollPolicy.OFF){
                _local10 = 0;
                _local11 = 0;
                _local2 = visibleColumns.length;
                _local3 = 0;
                while (_local3 < _local2) {
                    _local5 = (visibleColumns[_local3] as DataGridColumn);
                    if (_local5.resizable){
                        if (!isNaN(_local5.explicitWidth)){
                            _local11 = (_local11 + _local5.width);
                        } else {
                            _local10++;
                            _local11 = (_local11 + _local5.minWidth);
                        };
                    } else {
                        _local11 = (_local11 + _local5.width);
                    };
                    _local4 = (_local4 + _local5.width);
                    _local3++;
                };
                _local13 = availableWidth;
                if ((((availableWidth > _local11)) && (_local10))){
                    _local2 = visibleColumns.length;
                    _local3 = 0;
                    while (_local3 < _local2) {
                        _local5 = (visibleColumns[_local3] as DataGridColumn);
                        if (((_local5.resizable) && (isNaN(_local5.explicitWidth)))){
                            _local6 = _local5;
                            if (_local4 > availableWidth){
                                _local12 = ((_local6.width - _local6.minWidth) / (_local4 - _local11));
                            } else {
                                _local12 = (_local6.width / _local4);
                            };
                            _local7 = (_local6.width - ((_local4 - availableWidth) * _local12));
                            _local14 = _local5.minWidth;
                            _local5.setWidth(Math.max(_local7, _local14));
                        };
                        _local13 = (_local13 - _local5.width);
                        _local3++;
                    };
                    if (((_local13) && (_local6))){
                        _local6.setWidth((_local6.width + _local13));
                    };
                } else {
                    _local2 = visibleColumns.length;
                    _local3 = 0;
                    while (_local3 < _local2) {
                        _local6 = (visibleColumns[_local3] as DataGridColumn);
                        _local12 = (_local6.width / _local4);
                        _local7 = (availableWidth * _local12);
                        _local6.setWidth(_local7);
                        _local6.explicitWidth = NaN;
                        _local13 = (_local13 - _local7);
                        _local3++;
                    };
                    if (((_local13) && (_local6))){
                        _local6.setWidth((_local6.width + _local13));
                    };
                };
            };
        }
        override protected function calculateContentWidth():void{
            var _local1:int;
            var _local2:int;
            var _local3:DataGridColumn;
            if (_columns.length == 0){
                contentWidth = 0;
                return;
            };
            if (minColumnWidthInvalid){
                _local1 = _columns.length;
                _local2 = 0;
                while (_local2 < _local1) {
                    _local3 = (_columns[_local2] as DataGridColumn);
                    _local3.minWidth = minColumnWidth;
                    _local2++;
                };
                minColumnWidthInvalid = false;
            };
            if (horizontalScrollPolicy == ScrollPolicy.OFF){
                contentWidth = availableWidth;
            } else {
                contentWidth = 0;
                _local1 = _columns.length;
                _local2 = 0;
                while (_local2 < _local1) {
                    _local3 = (_columns[_local2] as DataGridColumn);
                    if (_local3.visible){
                        contentWidth = (contentWidth + _local3.width);
                    };
                    _local2++;
                };
                if (((!(isNaN(_horizontalScrollPosition))) && (((_horizontalScrollPosition + availableWidth) > contentWidth)))){
                    setHorizontalScrollPosition((contentWidth - availableWidth));
                };
            };
        }
        protected function handleHeaderRendererClick(_arg1:MouseEvent):void{
            var _local5:uint;
            var _local6:DataGridEvent;
            if (!_enabled){
                return;
            };
            var _local2:HeaderRenderer = (_arg1.currentTarget as HeaderRenderer);
            var _local3:uint = _local2.column;
            var _local4:DataGridColumn = (_columns[_local3] as DataGridColumn);
            if (((sortableColumns) && (_local4.sortable))){
                _local5 = _sortIndex;
                _sortIndex = _local3;
                _local6 = new DataGridEvent(DataGridEvent.HEADER_RELEASE, false, true, _local3, -1, _local2, ((_local4) ? _local4.dataField : null));
                if (((!(dispatchEvent(_local6))) || (!(_selectable)))){
                    _sortIndex = lastSortIndex;
                    return;
                };
                lastSortIndex = _local5;
                sortByColumn(_local3);
                invalidate(InvalidationType.DATA);
            };
        }
        public function resizeColumn(_arg1:int, _arg2:Number):void{
            var _local4:int;
            var _local5:Number;
            var _local6:int;
            var _local7:DataGridColumn;
            var _local8:DataGridColumn;
            var _local9:int;
            var _local10:Number;
            var _local11:Number;
            var _local12:Number;
            if (_columns.length == 0){
                return;
            };
            var _local3:DataGridColumn = (_columns[_arg1] as DataGridColumn);
            if (!_local3){
                return;
            };
            if (((!(visibleColumns)) || ((visibleColumns.length == 0)))){
                _local3.setWidth(_arg2);
                return;
            };
            if (_arg2 < _local3.minWidth){
                _arg2 = _local3.minWidth;
            };
            if ((((_horizontalScrollPolicy == ScrollPolicy.ON)) || ((_horizontalScrollPolicy == ScrollPolicy.AUTO)))){
                _local3.setWidth(_arg2);
                _local3.explicitWidth = _arg2;
            } else {
                _local4 = getVisibleColumnIndex(_local3);
                if (_local4 != -1){
                    _local5 = 0;
                    _local6 = visibleColumns.length;
                    _local9 = (_local4 + 1);
                    while (_local9 < _local6) {
                        _local7 = (visibleColumns[_local9] as DataGridColumn);
                        if (((_local7) && (_local7.resizable))){
                            _local5 = (_local5 + _local7.width);
                        };
                        _local9++;
                    };
                    _local11 = ((_local3.width - _arg2) + _local5);
                    if (_local5){
                        _local3.setWidth(_arg2);
                        _local3.explicitWidth = _arg2;
                    };
                    _local12 = 0;
                    _local9 = (_local4 + 1);
                    while (_local9 < _local6) {
                        _local7 = (visibleColumns[_local9] as DataGridColumn);
                        if (_local7.resizable){
                            _local10 = ((_local7.width * _local11) / _local5);
                            if (_local10 < _local7.minWidth){
                                _local10 = _local7.minWidth;
                            };
                            _local7.setWidth(_local10);
                            _local12 = (_local12 + _local7.width);
                            _local8 = _local7;
                        };
                        _local9++;
                    };
                    if (_local12 > _local11){
                        _local10 = ((_local3.width - _local12) + _local11);
                        if (_local10 < _local3.minWidth){
                            _local10 = _local3.minWidth;
                        };
                        _local3.setWidth(_local10);
                    } else {
                        if (_local8){
                            _local8.setWidth(((_local8.width - _local12) + _local11));
                        };
                    };
                } else {
                    _local3.setWidth(_arg2);
                    _local3.explicitWidth = _arg2;
                };
            };
            columnsInvalid = true;
            invalidate(InvalidationType.SIZE);
        }
        protected function sortByColumn(_arg1:int):void{
            var _local2:DataGridColumn = (columns[_arg1] as DataGridColumn);
            if (((((!(enabled)) || (!(_local2)))) || (!(_local2.sortable)))){
                return;
            };
            var _local3:Boolean = _local2.sortDescending;
            var _local4:uint = _local2.sortOptions;
            if (_local3){
                _local4 = (_local4 | Array.DESCENDING);
            } else {
                _local4 = (_local4 & ~(Array.DESCENDING));
            };
            if (_local2.sortCompareFunction != null){
                sortItems(_local2.sortCompareFunction, _local4);
            } else {
                sortItemsOn(_local2.dataField, _local4);
            };
            _sortDescending = (_local2.sortDescending = !(_local3));
            if ((((lastSortIndex >= 0)) && (!((lastSortIndex == sortIndex))))){
                _local2 = (columns[lastSortIndex] as DataGridColumn);
                if (_local2 != null){
                    _local2.sortDescending = false;
                };
            };
        }
        protected function createColumnsFromDataProvider():void{
            var _local1:Object;
            var _local2:String;
            _columns = [];
            if (length > 0){
                _local1 = _dataProvider.getItemAt(0);
                for (_local2 in _local1) {
                    addColumn(_local2);
                };
            };
        }
        protected function getVisibleColumnIndex(_arg1:DataGridColumn):int{
            var _local2:uint;
            while (_local2 < visibleColumns.length) {
                if (_arg1 == visibleColumns[_local2]){
                    return (_local2);
                };
                _local2++;
            };
            return (-1);
        }
        protected function handleHeaderResizeOver(_arg1:MouseEvent):void{
            if (columnStretchIndex == -1){
                showColumnStretchCursor();
            };
        }
        protected function handleHeaderResizeOut(_arg1:MouseEvent):void{
            if (columnStretchIndex == -1){
                showColumnStretchCursor(false);
            };
        }
        protected function handleHeaderResizeDown(_arg1:MouseEvent):void{
            var _local2:Sprite = (_arg1.currentTarget as Sprite);
            var _local3:Number = dragHandlesMap[_local2];
            var _local4:DataGridColumn = getColumnAt(_local3);
            columnStretchIndex = _local3;
            columnStretchStartX = _arg1.stageX;
            columnStretchStartWidth = _local4.width;
            var _local5:DisplayObjectContainer = focusManager.form;
            _local5.addEventListener(MouseEvent.MOUSE_MOVE, handleHeaderResizeMove, false, 0, true);
            _local5.addEventListener(MouseEvent.MOUSE_UP, handleHeaderResizeUp, false, 0, true);
        }
        protected function handleHeaderResizeMove(_arg1:MouseEvent):void{
            var _local2:Number = (_arg1.stageX - columnStretchStartX);
            var _local3:Number = (columnStretchStartWidth + _local2);
            resizeColumn(columnStretchIndex, _local3);
        }
        protected function handleHeaderResizeUp(_arg1:MouseEvent):void{
            var _local4:HeaderRenderer;
            var _local2:Sprite = (_arg1.currentTarget as Sprite);
            var _local3:DataGridColumn = (_columns[columnStretchIndex] as DataGridColumn);
            var _local5:uint;
            while (_local5 < header.numChildren) {
                _local4 = (header.getChildAt(_local5) as HeaderRenderer);
                if (((_local4) && ((_local4.column == columnStretchIndex)))){
                    break;
                };
                _local5++;
            };
            var _local6:DataGridEvent = new DataGridEvent(DataGridEvent.COLUMN_STRETCH, false, true, columnStretchIndex, -1, _local4, ((_local3) ? _local3.dataField : null));
            dispatchEvent(_local6);
            columnStretchIndex = -1;
            showColumnStretchCursor(false);
            var _local7:DisplayObjectContainer = focusManager.form;
            _local7.removeEventListener(MouseEvent.MOUSE_MOVE, handleHeaderResizeMove, false);
            _local7.removeEventListener(MouseEvent.MOUSE_UP, handleHeaderResizeUp, false);
        }
        protected function showColumnStretchCursor(_arg1:Boolean=true):void{
            var _local3:Point;
            if (columnStretchCursor == null){
                columnStretchCursor = (getDisplayObjectInstance(getStyleValue("columnStretchCursorSkin")) as Sprite);
                columnStretchCursor.mouseEnabled = false;
            };
            var _local2:DisplayObjectContainer = focusManager.form;
            if (_arg1){
                Mouse.hide();
                _local2.addChild(columnStretchCursor);
                _local2.addEventListener(MouseEvent.MOUSE_MOVE, positionColumnStretchCursor, false, 0, true);
                _local3 = _local2.globalToLocal(new Point(stage.mouseX, stage.mouseY));
                columnStretchCursor.x = _local3.x;
                columnStretchCursor.y = _local3.y;
            } else {
                _local2.removeEventListener(MouseEvent.MOUSE_MOVE, positionColumnStretchCursor, false);
                if (_local2.contains(columnStretchCursor)){
                    _local2.removeChild(columnStretchCursor);
                };
                Mouse.show();
            };
        }
        protected function positionColumnStretchCursor(_arg1:MouseEvent):void{
            var _local2:DisplayObjectContainer = focusManager.form;
            var _local3:Point = _local2.globalToLocal(new Point(_arg1.stageX, _arg1.stageY));
            columnStretchCursor.x = _local3.x;
            columnStretchCursor.y = _local3.y;
        }
        protected function setEditedItemPosition(_arg1:Object):void{
            editedItemPositionChanged = true;
            proposedEditedItemPosition = _arg1;
            if (((_arg1) && (!((_arg1.rowIndex == selectedIndex))))){
                selectedIndex = _arg1.rowIndex;
            };
            invalidate(InvalidationType.DATA);
        }
        protected function commitEditedItemPosition(_arg1:Object):void{
            var _local4:String;
            var _local5:int;
            if (((!(enabled)) || (!(editable)))){
                return;
            };
            if (((((((((itemEditorInstance) && (_arg1))) && ((itemEditorInstance is IFocusManagerComponent)))) && ((_editedItemPosition.rowIndex == _arg1.rowIndex)))) && ((_editedItemPosition.columnIndex == _arg1.columnIndex)))){
                IFocusManagerComponent(itemEditorInstance).setFocus();
                return;
            };
            if (itemEditorInstance){
                if (!_arg1){
                    _local4 = DataGridEventReason.OTHER;
                } else {
                    if (((!(editedItemPosition)) || ((_arg1.rowIndex == editedItemPosition.rowIndex)))){
                        _local4 = DataGridEventReason.NEW_COLUMN;
                    } else {
                        _local4 = DataGridEventReason.NEW_ROW;
                    };
                };
                if (((!(endEdit(_local4))) && (!((_local4 == DataGridEventReason.OTHER))))){
                    return;
                };
            };
            _editedItemPosition = _arg1;
            if (!_arg1){
                return;
            };
            actualRowIndex = _arg1.rowIndex;
            actualColIndex = _arg1.columnIndex;
            if (displayableColumns.length != _columns.length){
                _local5 = 0;
                while (_local5 < displayableColumns.length) {
                    if (displayableColumns[_local5].colNum >= actualColIndex){
                        actualColIndex = displayableColumns[_local5].colNum;
                        break;
                    };
                    _local5++;
                };
                if (_local5 == displayableColumns.length){
                    actualColIndex = 0;
                };
            };
            scrollToPosition(actualRowIndex, actualColIndex);
            var _local2:ICellRenderer = getCellRendererAt(actualRowIndex, actualColIndex);
            var _local3:DataGridEvent = new DataGridEvent(DataGridEvent.ITEM_EDIT_BEGIN, false, true, actualColIndex, actualRowIndex, _local2);
            dispatchEvent(_local3);
            if (editedItemPositionChanged){
                editedItemPositionChanged = false;
                commitEditedItemPosition(proposedEditedItemPosition);
                proposedEditedItemPosition = undefined;
            };
            if (!itemEditorInstance){
                commitEditedItemPosition(null);
            };
        }
        protected function itemEditorItemEditBeginningHandler(_arg1:DataGridEvent):void{
            if (!_arg1.isDefaultPrevented()){
                setEditedItemPosition({
                    columnIndex:_arg1.columnIndex,
                    rowIndex:uint(_arg1.rowIndex)
                });
            } else {
                if (!itemEditorInstance){
                    _editedItemPosition = null;
                    editable = false;
                    setFocus();
                    editable = true;
                };
            };
        }
        protected function itemEditorItemEditBeginHandler(_arg1:DataGridEvent):void{
            var _local2:IFocusManager;
            addEventListener(Event.DEACTIVATE, deactivateHandler, false, 0, true);
            if (!_arg1.isDefaultPrevented()){
                createItemEditor(_arg1.columnIndex, uint(_arg1.rowIndex));
                ICellRenderer(itemEditorInstance).listData = ICellRenderer(editedItemRenderer).listData;
                ICellRenderer(itemEditorInstance).data = editedItemRenderer.data;
                itemEditorInstance.imeMode = ((columns[_arg1.columnIndex].imeMode)==null) ? _imeMode : columns[_arg1.columnIndex].imeMode;
                _local2 = focusManager;
                if ((itemEditorInstance is IFocusManagerComponent)){
                    _local2.setFocus(InteractiveObject(itemEditorInstance));
                };
                _local2.defaultButtonEnabled = false;
                _arg1 = new DataGridEvent(DataGridEvent.ITEM_FOCUS_IN, false, false, _editedItemPosition.columnIndex, _editedItemPosition.rowIndex, itemEditorInstance);
                dispatchEvent(_arg1);
            };
        }
        protected function itemEditorItemEditEndHandler(_arg1:DataGridEvent):void{
            var _local2:Boolean;
            var _local3:Object;
            var _local4:String;
            var _local5:Object;
            var _local6:String;
            var _local7:XML;
            var _local8:IFocusManager;
            if (!_arg1.isDefaultPrevented()){
                _local2 = false;
                if (((itemEditorInstance) && (!((_arg1.reason == DataGridEventReason.CANCELLED))))){
                    _local3 = itemEditorInstance[_columns[_arg1.columnIndex].editorDataField];
                    _local4 = _columns[_arg1.columnIndex].dataField;
                    _local5 = _arg1.itemRenderer.data;
                    _local6 = "";
                    for each (_local7 in describeType(_local5).variable) {
                        if (_local4 == _local7.@name.toString()){
                            _local6 = _local7.@type.toString();
                            break;
                        };
                    };
                    switch (_local6){
                        case "String":
                            if (!(_local3 is String)){
                                _local3 = _local3.toString();
                            };
                            break;
                        case "uint":
                            if (!(_local3 is uint)){
                                _local3 = uint(_local3);
                            };
                            break;
                        case "int":
                            if (!(_local3 is int)){
                                _local3 = int(_local3);
                            };
                            break;
                        case "Number":
                            if (!(_local3 is Number)){
                                _local3 = Number(_local3);
                            };
                            break;
                    };
                    if (_local5[_local4] != _local3){
                        _local2 = true;
                        _local5[_local4] = _local3;
                    };
                    _arg1.itemRenderer.data = _local5;
                };
            } else {
                if (_arg1.reason != DataGridEventReason.OTHER){
                    if (((itemEditorInstance) && (_editedItemPosition))){
                        if (selectedIndex != _editedItemPosition.rowIndex){
                            selectedIndex = _editedItemPosition.rowIndex;
                        };
                        _local8 = focusManager;
                        if ((itemEditorInstance is IFocusManagerComponent)){
                            _local8.setFocus(InteractiveObject(itemEditorInstance));
                        };
                    };
                };
            };
            if ((((_arg1.reason == DataGridEventReason.OTHER)) || (!(_arg1.isDefaultPrevented())))){
                destroyItemEditor();
            };
        }
        override protected function focusInHandler(_arg1:FocusEvent):void{
            var _local2:Boolean;
            var _local3:DataGridColumn;
            if (_arg1.target != this){
                return;
            };
            if (losingFocus){
                losingFocus = false;
                return;
            };
            setIMEMode(true);
            super.focusInHandler(_arg1);
            if (((editable) && (!(isPressed)))){
                _local2 = !((editedItemPosition == null));
                if (!_editedItemPosition){
                    _editedItemPosition = {
                        rowIndex:0,
                        columnIndex:0
                    };
                    while (_editedItemPosition.columnIndex < _columns.length) {
                        _local3 = (_columns[_editedItemPosition.columnIndex] as DataGridColumn);
                        if (((_local3.editable) && (_local3.visible))){
                            _local2 = true;
                            break;
                        };
                        _editedItemPosition.columnIndex++;
                    };
                };
                if (_local2){
                    setEditedItemPosition(_editedItemPosition);
                };
            };
            if (editable){
                addEventListener(FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler);
                addEventListener(MouseEvent.MOUSE_DOWN, mouseFocusChangeHandler);
            };
        }
        override protected function focusOutHandler(_arg1:FocusEvent):void{
            setIMEMode(false);
            if (_arg1.target == this){
                super.focusOutHandler(_arg1);
            };
            if ((((_arg1.relatedObject == this)) && (itemRendererContains(itemEditorInstance, DisplayObject(_arg1.target))))){
                return;
            };
            if ((((_arg1.relatedObject == null)) && (itemRendererContains(editedItemRenderer, DisplayObject(_arg1.target))))){
                return;
            };
            if ((((_arg1.relatedObject == null)) && (itemRendererContains(itemEditorInstance, DisplayObject(_arg1.target))))){
                return;
            };
            if (((itemEditorInstance) && (((!(_arg1.relatedObject)) || (!(itemRendererContains(itemEditorInstance, _arg1.relatedObject))))))){
                endEdit(DataGridEventReason.OTHER);
                removeEventListener(FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler);
                removeEventListener(MouseEvent.MOUSE_DOWN, mouseFocusChangeHandler);
            };
        }
        protected function editorMouseDownHandler(_arg1:MouseEvent):void{
            var _local2:ICellRenderer;
            var _local3:uint;
            if (!itemRendererContains(itemEditorInstance, DisplayObject(_arg1.target))){
                if ((((_arg1.target is ICellRenderer)) && (contains(DisplayObject(_arg1.target))))){
                    _local2 = (_arg1.target as ICellRenderer);
                    _local3 = _local2.listData.row;
                    if (_editedItemPosition.rowIndex == _local3){
                        endEdit(DataGridEventReason.NEW_COLUMN);
                    } else {
                        endEdit(DataGridEventReason.NEW_ROW);
                    };
                } else {
                    endEdit(DataGridEventReason.OTHER);
                };
            };
        }
        protected function editorKeyDownHandler(_arg1:KeyboardEvent):void{
            if (_arg1.keyCode == Keyboard.ESCAPE){
                endEdit(DataGridEventReason.CANCELLED);
            } else {
                if (((_arg1.ctrlKey) && ((_arg1.charCode == 46)))){
                    endEdit(DataGridEventReason.CANCELLED);
                } else {
                    if ((((_arg1.charCode == Keyboard.ENTER)) && (!((_arg1.keyCode == 229))))){
                        if (endEdit(DataGridEventReason.NEW_ROW)){
                            findNextEnterItemRenderer(_arg1);
                        };
                    };
                };
            };
        }
        protected function findNextItemRenderer(_arg1:Boolean):Boolean{
            var _local7:String;
            var _local8:DataGridEvent;
            if (!_editedItemPosition){
                return (false);
            };
            if (proposedEditedItemPosition !== undefined){
                return (false);
            };
            var _local2:int = _editedItemPosition.rowIndex;
            var _local3:int = _editedItemPosition.columnIndex;
            var _local4:Boolean;
            var _local5:int = ((_arg1) ? -1 : 1);
            var _local6:int = (length - 1);
            while (!(_local4)) {
                _local3 = (_local3 + _local5);
                if ((((_local3 < 0)) || ((_local3 >= _columns.length)))){
                    _local3 = ((_local3)<0) ? (_columns.length - 1) : 0;
                    _local2 = (_local2 + _local5);
                    if ((((_local2 < 0)) || ((_local2 > _local6)))){
                        setEditedItemPosition(null);
                        losingFocus = true;
                        setFocus();
                        return (false);
                    };
                };
                if (((_columns[_local3].editable) && (_columns[_local3].visible))){
                    _local4 = true;
                    if (_local2 == _editedItemPosition.rowIndex){
                        _local7 = DataGridEventReason.NEW_COLUMN;
                    } else {
                        _local7 = DataGridEventReason.NEW_ROW;
                    };
                    if (((!(itemEditorInstance)) || (endEdit(_local7)))){
                        _local8 = new DataGridEvent(DataGridEvent.ITEM_EDIT_BEGINNING, false, true, _local3, _local2);
                        _local8.dataField = _columns[_local3].dataField;
                        dispatchEvent(_local8);
                    };
                };
            };
            return (_local4);
        }
        protected function findNextEnterItemRenderer(_arg1:KeyboardEvent):void{
            if (proposedEditedItemPosition !== undefined){
                return;
            };
            var _local2:int = _editedItemPosition.rowIndex;
            var _local3:int = _editedItemPosition.columnIndex;
            var _local4:int = (_editedItemPosition.rowIndex + ((_arg1.shiftKey) ? -1 : 1));
            if ((((_local4 >= 0)) && ((_local4 < length)))){
                _local2 = _local4;
            };
            var _local5:DataGridEvent = new DataGridEvent(DataGridEvent.ITEM_EDIT_BEGINNING, false, true, _local3, _local2);
            _local5.dataField = _columns[_local3].dataField;
            dispatchEvent(_local5);
        }
        protected function mouseFocusChangeHandler(_arg1:MouseEvent):void{
            if (((((itemEditorInstance) && (!(_arg1.isDefaultPrevented())))) && (itemRendererContains(itemEditorInstance, DisplayObject(_arg1.target))))){
                _arg1.preventDefault();
            };
        }
        protected function keyFocusChangeHandler(_arg1:FocusEvent):void{
            if ((((((_arg1.keyCode == Keyboard.TAB)) && (!(_arg1.isDefaultPrevented())))) && (findNextItemRenderer(_arg1.shiftKey)))){
                _arg1.preventDefault();
            };
        }
        private function itemEditorFocusOutHandler(_arg1:FocusEvent):void{
            if (((_arg1.relatedObject) && (contains(_arg1.relatedObject)))){
                return;
            };
            if (!_arg1.relatedObject){
                return;
            };
            if (itemEditorInstance){
                endEdit(DataGridEventReason.OTHER);
            };
        }
        protected function deactivateHandler(_arg1:Event):void{
            if (itemEditorInstance){
                endEdit(DataGridEventReason.OTHER);
                losingFocus = true;
                setFocus();
            };
        }
        protected function mouseDownHandler(_arg1:MouseEvent):void{
            if (((!(enabled)) || (!(selectable)))){
                return;
            };
            isPressed = true;
        }
        protected function mouseUpHandler(_arg1:MouseEvent):void{
            if (((!(enabled)) || (!(selectable)))){
                return;
            };
            isPressed = false;
        }
        override protected function handleCellRendererClick(_arg1:MouseEvent):void{
            var _local3:DataGridColumn;
            var _local4:DataGridEvent;
            super.handleCellRendererClick(_arg1);
            var _local2:ICellRenderer = (_arg1.currentTarget as ICellRenderer);
            if (((((_local2) && (_local2.data))) && (!((_local2 == itemEditorInstance))))){
                _local3 = (_columns[_local2.listData.column] as DataGridColumn);
                if (((((editable) && (_local3))) && (_local3.editable))){
                    _local4 = new DataGridEvent(DataGridEvent.ITEM_EDIT_BEGINNING, false, true, _local2.listData.column, _local2.listData.row, _local2, _local3.dataField);
                    dispatchEvent(_local4);
                };
            };
        }
        public function createItemEditor(_arg1:uint, _arg2:uint):void{
            var _local6:int;
            if (displayableColumns.length != _columns.length){
                _local6 = 0;
                while (_local6 < displayableColumns.length) {
                    if (displayableColumns[_local6].colNum >= _arg1){
                        _arg1 = displayableColumns[_local6].colNum;
                        break;
                    };
                    _local6++;
                };
                if (_local6 == displayableColumns.length){
                    _arg1 = 0;
                };
            };
            var _local3:DataGridColumn = (_columns[_arg1] as DataGridColumn);
            var _local4:ICellRenderer = getCellRendererAt(_arg2, _arg1);
            if (!itemEditorInstance){
                itemEditorInstance = getDisplayObjectInstance(_local3.itemEditor);
                itemEditorInstance.tabEnabled = false;
                list.addChild(DisplayObject(itemEditorInstance));
            };
            list.setChildIndex(DisplayObject(itemEditorInstance), (list.numChildren - 1));
            var _local5:Sprite = (_local4 as Sprite);
            itemEditorInstance.visible = true;
            itemEditorInstance.move(_local5.x, _local5.y);
            itemEditorInstance.setSize(_local3.width, rowHeight);
            itemEditorInstance.drawNow();
            DisplayObject(itemEditorInstance).addEventListener(FocusEvent.FOCUS_OUT, itemEditorFocusOutHandler);
            _local5.visible = false;
            DisplayObject(itemEditorInstance).addEventListener(KeyboardEvent.KEY_DOWN, editorKeyDownHandler);
            focusManager.form.addEventListener(MouseEvent.MOUSE_DOWN, editorMouseDownHandler, true, 0, true);
        }
        public function destroyItemEditor():void{
            var _local1:DataGridEvent;
            if (itemEditorInstance){
                DisplayObject(itemEditorInstance).removeEventListener(KeyboardEvent.KEY_DOWN, editorKeyDownHandler);
                focusManager.form.removeEventListener(MouseEvent.MOUSE_DOWN, editorMouseDownHandler, true);
                _local1 = new DataGridEvent(DataGridEvent.ITEM_FOCUS_OUT, false, false, _editedItemPosition.columnIndex, _editedItemPosition.rowIndex, itemEditorInstance);
                dispatchEvent(_local1);
                if (((itemEditorInstance) && ((itemEditorInstance is UIComponent)))){
                    UIComponent(itemEditorInstance).drawFocus(false);
                };
                list.removeChild(DisplayObject(itemEditorInstance));
                DisplayObject(editedItemRenderer).visible = true;
                itemEditorInstance = null;
            };
        }
        protected function endEdit(_arg1:String):Boolean{
            if (!editedItemRenderer){
                return (true);
            };
            var _local2:DataGridEvent = new DataGridEvent(DataGridEvent.ITEM_EDIT_END, false, true, editedItemPosition.columnIndex, editedItemPosition.rowIndex, editedItemRenderer, _columns[editedItemPosition.columnIndex].dataField, _arg1);
            dispatchEvent(_local2);
            return (!(_local2.isDefaultPrevented()));
        }
        public function getCellRendererAt(_arg1:uint, _arg2:uint):ICellRenderer{
            var _local4:Array;
            var _local5:uint;
            var _local6:ICellRenderer;
            var _local3:DataGridColumn = (_columns[_arg2] as DataGridColumn);
            if (_local3 != null){
                _local4 = (activeCellRenderersMap[_local3] as Array);
                if (_local4 != null){
                    _local5 = 0;
                    while (_local5 < _local4.length) {
                        _local6 = (_local4[_local5] as ICellRenderer);
                        if (_local6.listData.row == _arg1){
                            return (_local6);
                        };
                        _local5++;
                    };
                };
            };
            return (null);
        }
        protected function itemRendererContains(_arg1:Object, _arg2:DisplayObject):Boolean{
            if (((((!(_arg2)) || (!(_arg1)))) || (!((_arg1 is DisplayObjectContainer))))){
                return (false);
            };
            return (DisplayObjectContainer(_arg1).contains(_arg2));
        }
        override protected function handleDataChange(_arg1:DataChangeEvent):void{
            super.handleDataChange(_arg1);
            if (_columns == null){
                _columns = [];
            };
            if (_columns.length == 0){
                createColumnsFromDataProvider();
            };
        }
        override protected function keyDownHandler(_arg1:KeyboardEvent):void{
            if (((!(selectable)) || (itemEditorInstance))){
                return;
            };
            switch (_arg1.keyCode){
                case Keyboard.UP:
                case Keyboard.DOWN:
                case Keyboard.END:
                case Keyboard.HOME:
                case Keyboard.PAGE_UP:
                case Keyboard.PAGE_DOWN:
                    moveSelectionVertically(_arg1.keyCode, ((_arg1.shiftKey) && (_allowMultipleSelection)), ((_arg1.ctrlKey) && (_allowMultipleSelection)));
                    break;
                case Keyboard.LEFT:
                case Keyboard.RIGHT:
                    moveSelectionHorizontally(_arg1.keyCode, ((_arg1.shiftKey) && (_allowMultipleSelection)), ((_arg1.ctrlKey) && (_allowMultipleSelection)));
                    break;
                case Keyboard.SPACE:
                    if (caretIndex == -1){
                        caretIndex = 0;
                    };
                    scrollToIndex(caretIndex);
                    doKeySelection(caretIndex, _arg1.shiftKey, _arg1.ctrlKey);
                    break;
            };
            _arg1.stopPropagation();
        }
        override protected function moveSelectionHorizontally(_arg1:uint, _arg2:Boolean, _arg3:Boolean):void{
        }
        override protected function moveSelectionVertically(_arg1:uint, _arg2:Boolean, _arg3:Boolean):void{
            var _local4:int = Math.max(Math.floor((calculateAvailableHeight() / rowHeight)), 1);
            var _local5 = -1;
            var _local6:int;
            switch (_arg1){
                case Keyboard.UP:
                    if (caretIndex > 0){
                        _local5 = (caretIndex - 1);
                    };
                    break;
                case Keyboard.DOWN:
                    if (caretIndex < (length - 1)){
                        _local5 = (caretIndex + 1);
                    };
                    break;
                case Keyboard.PAGE_UP:
                    if (caretIndex > 0){
                        _local5 = Math.max((caretIndex - _local4), 0);
                    };
                    break;
                case Keyboard.PAGE_DOWN:
                    if (caretIndex < (length - 1)){
                        _local5 = Math.min((caretIndex + _local4), (length - 1));
                    };
                    break;
                case Keyboard.HOME:
                    if (caretIndex > 0){
                        _local5 = 0;
                    };
                    break;
                case Keyboard.END:
                    if (caretIndex < (length - 1)){
                        _local5 = (length - 1);
                    };
                    break;
            };
            if (_local5 >= 0){
                doKeySelection(_local5, _arg2, _arg3);
                scrollToSelected();
            };
        }
        override public function scrollToIndex(_arg1:int):void{
            var _local4:Number;
            drawNow();
            var _local2:int = (Math.floor(((_verticalScrollPosition + availableHeight) / rowHeight)) - 1);
            var _local3:int = Math.ceil((_verticalScrollPosition / rowHeight));
            if (_arg1 < _local3){
                verticalScrollPosition = (_arg1 * rowHeight);
            } else {
                if (_arg1 >= _local2){
                    _local4 = (((((_horizontalScrollPolicy == ScrollPolicy.ON)) || ((((_horizontalScrollPolicy == ScrollPolicy.AUTO)) && (hScrollBar))))) ? 15 : 0);
                    verticalScrollPosition = (((((_arg1 + 1) * rowHeight) - availableHeight) + _local4) + ((showHeaders) ? headerHeight : 0));
                };
            };
        }
        protected function scrollToPosition(_arg1:int, _arg2:int):void{
            var _local5:uint;
            var _local8:DataGridColumn;
            var _local3:Number = verticalScrollPosition;
            var _local4:Number = horizontalScrollPosition;
            scrollToIndex(_arg1);
            var _local6:Number = 0;
            var _local7:DataGridColumn = (_columns[_arg2] as DataGridColumn);
            _local5 = 0;
            while (_local5 < displayableColumns.length) {
                _local8 = (displayableColumns[_local5] as DataGridColumn);
                if (_local8 != _local7){
                    _local6 = (_local6 + _local8.width);
                } else {
                    break;
                };
                _local5++;
            };
            if (horizontalScrollPosition > _local6){
                horizontalScrollPosition = _local6;
            } else {
                if ((horizontalScrollPosition + availableWidth) < (_local6 + _local7.width)){
                    horizontalScrollPosition = -((availableWidth - (_local6 + _local7.width)));
                };
            };
            if (((!((_local3 == verticalScrollPosition))) || (!((_local4 == horizontalScrollPosition))))){
                drawNow();
            };
        }
        protected function doKeySelection(_arg1:int, _arg2:Boolean, _arg3:Boolean):void{
            var _local5:int;
            var _local6:Array;
            var _local7:int;
            var _local8:int;
            var _local4:Boolean;
            if (_arg2){
                _local6 = [];
                _local7 = lastCaretIndex;
                _local8 = _arg1;
                if (_local7 == -1){
                    _local7 = ((caretIndex)!=-1) ? caretIndex : _arg1;
                };
                if (_local7 > _local8){
                    _local8 = _local7;
                    _local7 = _arg1;
                };
                _local5 = _local7;
                while (_local5 <= _local8) {
                    _local6.push(_local5);
                    _local5++;
                };
                selectedIndices = _local6;
                caretIndex = _arg1;
                _local4 = true;
            } else {
                if (_arg3){
                    caretIndex = _arg1;
                } else {
                    selectedIndex = _arg1;
                    caretIndex = (lastCaretIndex = _arg1);
                    _local4 = true;
                };
            };
            if (_local4){
                dispatchEvent(new Event(Event.CHANGE));
            };
            invalidate(InvalidationType.DATA);
        }
        override protected function initializeAccessibility():void{
            if (DataGrid.createAccessibilityImplementation != null){
                DataGrid.createAccessibilityImplementation(this);
            };
        }

    }
}//package fl.controls 
﻿package fl.controls {

    public class ScrollBarDirection {

        public static const VERTICAL:String = "vertical";
        public static const HORIZONTAL:String = "horizontal";

    }
}//package fl.controls 
﻿package fl.controls {
    import flash.display.*;
    import flash.events.*;
    import fl.managers.*;
    import flash.ui.*;

    public class RadioButton extends LabelButton implements IFocusManagerGroup {

        private static var defaultStyles:Object = {
            icon:null,
            upIcon:"RadioButton_upIcon",
            downIcon:"RadioButton_downIcon",
            overIcon:"RadioButton_overIcon",
            disabledIcon:"RadioButton_disabledIcon",
            selectedDisabledIcon:"RadioButton_selectedDisabledIcon",
            selectedUpIcon:"RadioButton_selectedUpIcon",
            selectedDownIcon:"RadioButton_selectedDownIcon",
            selectedOverIcon:"RadioButton_selectedOverIcon",
            focusRectSkin:null,
            focusRectPadding:null,
            textFormat:null,
            disabledTextFormat:null,
            embedFonts:null,
            textPadding:5
        };
        public static var createAccessibilityImplementation:Function;

        protected var _value:Object;
        protected var _group:RadioButtonGroup;
        protected var defaultGroupName:String = "RadioButtonGroup";

        public function RadioButton(){
            mode = "border";
            groupName = defaultGroupName;
        }
        public static function getStyleDefinition():Object{
            return (defaultStyles);
        }

        override public function get toggle():Boolean{
            return (true);
        }
        override public function set toggle(_arg1:Boolean):void{
            throw (new Error("Warning: You cannot change a RadioButtons toggle."));
        }
        override public function get autoRepeat():Boolean{
            return (false);
        }
        override public function set autoRepeat(_arg1:Boolean):void{
        }
        override public function get selected():Boolean{
            return (super.selected);
        }
        override public function set selected(_arg1:Boolean):void{
            if ((((_arg1 == false)) || (selected))){
                return;
            };
            if (_group != null){
                _group.selection = this;
            } else {
                super.selected = _arg1;
            };
        }
        override protected function configUI():void{
            super.configUI();
            super.toggle = true;
            var _local1:Shape = new Shape();
            var _local2:Graphics = _local1.graphics;
            _local2.beginFill(0, 0);
            _local2.drawRect(0, 0, 100, 100);
            _local2.endFill();
            background = (_local1 as DisplayObject);
            addChildAt(background, 0);
            addEventListener(MouseEvent.CLICK, handleClick, false, 0, true);
        }
        override protected function drawLayout():void{
            super.drawLayout();
            var _local1:Number = Number(getStyleValue("textPadding"));
            switch (_labelPlacement){
                case ButtonLabelPlacement.RIGHT:
                    icon.x = _local1;
                    textField.x = (icon.x + (icon.width + _local1));
                    background.width = ((textField.x + textField.width) + _local1);
                    background.height = (Math.max(textField.height, icon.height) + (_local1 * 2));
                    break;
                case ButtonLabelPlacement.LEFT:
                    icon.x = ((width - icon.width) - _local1);
                    textField.x = (((width - icon.width) - (_local1 * 2)) - textField.width);
                    background.width = ((textField.width + icon.width) + (_local1 * 3));
                    background.height = (Math.max(textField.height, icon.height) + (_local1 * 2));
                    break;
                case ButtonLabelPlacement.TOP:
                case ButtonLabelPlacement.BOTTOM:
                    background.width = (Math.max(textField.width, icon.width) + (_local1 * 2));
                    background.height = ((textField.height + icon.height) + (_local1 * 3));
                    break;
            };
            background.x = Math.min((icon.x - _local1), (textField.x - _local1));
            background.y = Math.min((icon.y - _local1), (textField.y - _local1));
        }
        public function get groupName():String{
            return (((_group)==null) ? null : _group.name);
        }
        public function set groupName(_arg1:String):void{
            if (_group != null){
                _group.removeRadioButton(this);
                _group.removeEventListener(Event.CHANGE, handleChange);
            };
            _group = ((_arg1)==null) ? null : RadioButtonGroup.getGroup(_arg1);
            if (_group != null){
                _group.addRadioButton(this);
                _group.addEventListener(Event.CHANGE, handleChange, false, 0, true);
            };
        }
        public function get group():RadioButtonGroup{
            return (_group);
        }
        public function set group(_arg1:RadioButtonGroup):void{
            groupName = _arg1.name;
        }
        public function get value():Object{
            return (_value);
        }
        public function set value(_arg1:Object):void{
            _value = _arg1;
        }
        override public function drawFocus(_arg1:Boolean):void{
            var _local2:Number;
            super.drawFocus(_arg1);
            if (_arg1){
                _local2 = Number(getStyleValue("focusRectPadding"));
                uiFocusRect.x = (background.x - _local2);
                uiFocusRect.y = (background.y - _local2);
                uiFocusRect.width = (background.width + (_local2 * 2));
                uiFocusRect.height = (background.height + (_local2 * 2));
            };
        }
        protected function handleChange(_arg1:Event):void{
            super.selected = (_group.selection == this);
            dispatchEvent(new Event(Event.CHANGE, true));
        }
        protected function handleClick(_arg1:MouseEvent):void{
            if (_group == null){
                return;
            };
            _group.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true));
        }
        override protected function draw():void{
            super.draw();
        }
        override protected function drawBackground():void{
        }
        override protected function initializeAccessibility():void{
            if (RadioButton.createAccessibilityImplementation != null){
                RadioButton.createAccessibilityImplementation(this);
            };
        }
        override protected function keyDownHandler(_arg1:KeyboardEvent):void{
            switch (_arg1.keyCode){
                case Keyboard.DOWN:
                    setNext(!(_arg1.ctrlKey));
                    _arg1.stopPropagation();
                    break;
                case Keyboard.UP:
                    setPrev(!(_arg1.ctrlKey));
                    _arg1.stopPropagation();
                    break;
                case Keyboard.LEFT:
                    setPrev(!(_arg1.ctrlKey));
                    _arg1.stopPropagation();
                    break;
                case Keyboard.RIGHT:
                    setNext(!(_arg1.ctrlKey));
                    _arg1.stopPropagation();
                    break;
                case Keyboard.SPACE:
                    setThis();
                    _toggle = false;
                default:
                    super.keyDownHandler(_arg1);
            };
        }
        override protected function keyUpHandler(_arg1:KeyboardEvent):void{
            super.keyUpHandler(_arg1);
            if ((((_arg1.keyCode == Keyboard.SPACE)) && (!(_toggle)))){
                _toggle = true;
            };
        }
        private function setPrev(_arg1:Boolean=true):void{
            var _local6:RadioButton;
            var _local2:RadioButtonGroup = _group;
            if (_local2 == null){
                return;
            };
            var _local3:IFocusManager = focusManager;
            if (_local3){
                _local3.showFocusIndicator = true;
            };
            var _local4:int = _local2.getRadioButtonIndex(this);
            var _local5:int = _local4;
            if (_local4 != -1){
                do  {
                    --_local5;
                    _local5 = ((_local5)==-1) ? (_local2.numRadioButtons - 1) : _local5;
                    _local6 = _local2.getRadioButtonAt(_local5);
                    if (((_local6) && (_local6.enabled))){
                        if (_arg1){
                            _local2.selection = _local6;
                        };
                        _local6.setFocus();
                        return;
                    };
                    if (((_arg1) && (!((_local2.getRadioButtonAt(_local5) == _local2.selection))))){
                        _local2.selection = this;
                    };
                    this.drawFocus(true);
                } while (_local5 != _local4);
            };
        }
        private function setNext(_arg1:Boolean=true):void{
            var _local7:RadioButton;
            var _local2:RadioButtonGroup = _group;
            if (_local2 == null){
                return;
            };
            var _local3:IFocusManager = focusManager;
            if (_local3){
                _local3.showFocusIndicator = true;
            };
            var _local4:int = _local2.getRadioButtonIndex(this);
            var _local5:Number = _local2.numRadioButtons;
            var _local6:int = _local4;
            if (_local4 != -1){
                do  {
                    _local6++;
                    _local6 = ((_local6)>(_local2.numRadioButtons - 1)) ? 0 : _local6;
                    _local7 = _local2.getRadioButtonAt(_local6);
                    if (((_local7) && (_local7.enabled))){
                        if (_arg1){
                            _local2.selection = _local7;
                        };
                        _local7.setFocus();
                        return;
                    };
                    if (((_arg1) && (!((_local2.getRadioButtonAt(_local6) == _local2.selection))))){
                        _local2.selection = this;
                    };
                    this.drawFocus(true);
                } while (_local6 != _local4);
            };
        }
        private function setThis():void{
            var _local1:RadioButtonGroup = _group;
            if (_local1 != null){
                if (_local1.selection != this){
                    _local1.selection = this;
                };
            } else {
                super.selected = true;
            };
        }

    }
}//package fl.controls 
﻿package fl.controls {
    import fl.core.*;
    import flash.display.*;
    import flash.events.*;
    import flash.text.*;
    import flash.system.*;
    import fl.managers.*;
    import fl.events.*;
    import flash.ui.*;

    public class TextArea extends UIComponent implements IFocusManagerComponent {

        protected static const SCROLL_BAR_STYLES:Object = {
            downArrowDisabledSkin:"downArrowDisabledSkin",
            downArrowDownSkin:"downArrowDownSkin",
            downArrowOverSkin:"downArrowOverSkin",
            downArrowUpSkin:"downArrowUpSkin",
            upArrowDisabledSkin:"upArrowDisabledSkin",
            upArrowDownSkin:"upArrowDownSkin",
            upArrowOverSkin:"upArrowOverSkin",
            upArrowUpSkin:"upArrowUpSkin",
            thumbDisabledSkin:"thumbDisabledSkin",
            thumbDownSkin:"thumbDownSkin",
            thumbOverSkin:"thumbOverSkin",
            thumbUpSkin:"thumbUpSkin",
            thumbIcon:"thumbIcon",
            trackDisabledSkin:"trackDisabledSkin",
            trackDownSkin:"trackDownSkin",
            trackOverSkin:"trackOverSkin",
            trackUpSkin:"trackUpSkin",
            repeatDelay:"repeatDelay",
            repeatInterval:"repeatInterval"
        };

        private static var defaultStyles:Object = {
            upSkin:"TextArea_upSkin",
            disabledSkin:"TextArea_disabledSkin",
            focusRectSkin:null,
            focusRectPadding:null,
            textFormat:null,
            disabledTextFormat:null,
            textPadding:3,
            embedFonts:false
        };
        public static var createAccessibilityImplementation:Function;

        public var textField:TextField;
        protected var _editable:Boolean = true;
        protected var _wordWrap:Boolean = true;
        protected var _horizontalScrollPolicy:String = "auto";
        protected var _verticalScrollPolicy:String = "auto";
        protected var _horizontalScrollBar:UIScrollBar;
        protected var _verticalScrollBar:UIScrollBar;
        protected var background:DisplayObject;
        protected var _html:Boolean = false;
        protected var _savedHTML:String;
        protected var textHasChanged:Boolean = false;

        public static function getStyleDefinition():Object{
            return (UIComponent.mergeStyles(defaultStyles, ScrollBar.getStyleDefinition()));
        }

        public function get horizontalScrollBar():UIScrollBar{
            return (_horizontalScrollBar);
        }
        public function get verticalScrollBar():UIScrollBar{
            return (_verticalScrollBar);
        }
        override public function get enabled():Boolean{
            return (super.enabled);
        }
        override public function set enabled(_arg1:Boolean):void{
            super.enabled = _arg1;
            mouseChildren = enabled;
            invalidate(InvalidationType.STATE);
        }
        public function get text():String{
            return (textField.text);
        }
        public function set text(_arg1:String):void{
            if (((componentInspectorSetting) && ((_arg1 == "")))){
                return;
            };
            textField.text = _arg1;
            _html = false;
            invalidate(InvalidationType.DATA);
            invalidate(InvalidationType.STYLES);
            textHasChanged = true;
        }
        public function get htmlText():String{
            return (textField.htmlText);
        }
        public function set htmlText(_arg1:String):void{
            if (((componentInspectorSetting) && ((_arg1 == "")))){
                return;
            };
            if (_arg1 == ""){
                text = "";
                return;
            };
            _html = true;
            _savedHTML = _arg1;
            textField.htmlText = _arg1;
            invalidate(InvalidationType.DATA);
            invalidate(InvalidationType.STYLES);
            textHasChanged = true;
        }
        public function get condenseWhite():Boolean{
            return (textField.condenseWhite);
        }
        public function set condenseWhite(_arg1:Boolean):void{
            textField.condenseWhite = _arg1;
            invalidate(InvalidationType.DATA);
        }
        public function get horizontalScrollPolicy():String{
            return (_horizontalScrollPolicy);
        }
        public function set horizontalScrollPolicy(_arg1:String):void{
            _horizontalScrollPolicy = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        public function get verticalScrollPolicy():String{
            return (_verticalScrollPolicy);
        }
        public function set verticalScrollPolicy(_arg1:String):void{
            _verticalScrollPolicy = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        public function get horizontalScrollPosition():Number{
            return (textField.scrollH);
        }
        public function set horizontalScrollPosition(_arg1:Number):void{
            drawNow();
            textField.scrollH = _arg1;
        }
        public function get verticalScrollPosition():Number{
            return (textField.scrollV);
        }
        public function set verticalScrollPosition(_arg1:Number):void{
            drawNow();
            textField.scrollV = _arg1;
        }
        public function get textWidth():Number{
            drawNow();
            return (textField.textWidth);
        }
        public function get textHeight():Number{
            drawNow();
            return (textField.textHeight);
        }
        public function get length():Number{
            return (textField.text.length);
        }
        public function get restrict():String{
            return (textField.restrict);
        }
        public function set restrict(_arg1:String):void{
            if (((componentInspectorSetting) && ((_arg1 == "")))){
                _arg1 = null;
            };
            textField.restrict = _arg1;
        }
        public function get maxChars():int{
            return (textField.maxChars);
        }
        public function set maxChars(_arg1:int):void{
            textField.maxChars = _arg1;
        }
        public function get maxHorizontalScrollPosition():int{
            return (textField.maxScrollH);
        }
        public function get maxVerticalScrollPosition():int{
            return (textField.maxScrollV);
        }
        public function get wordWrap():Boolean{
            return (_wordWrap);
        }
        public function set wordWrap(_arg1:Boolean):void{
            _wordWrap = _arg1;
            invalidate(InvalidationType.STATE);
        }
        public function get selectionBeginIndex():int{
            return (textField.selectionBeginIndex);
        }
        public function get selectionEndIndex():int{
            return (textField.selectionEndIndex);
        }
        public function get displayAsPassword():Boolean{
            return (textField.displayAsPassword);
        }
        public function set displayAsPassword(_arg1:Boolean):void{
            textField.displayAsPassword = _arg1;
        }
        public function get editable():Boolean{
            return (_editable);
        }
        public function set editable(_arg1:Boolean):void{
            _editable = _arg1;
            invalidate(InvalidationType.STATE);
        }
        public function get imeMode():String{
            return (IME.conversionMode);
        }
        public function set imeMode(_arg1:String):void{
            _imeMode = _arg1;
        }
        public function get alwaysShowSelection():Boolean{
            return (textField.alwaysShowSelection);
        }
        public function set alwaysShowSelection(_arg1:Boolean):void{
            textField.alwaysShowSelection = _arg1;
        }
        override public function drawFocus(_arg1:Boolean):void{
            if (focusTarget != null){
                focusTarget.drawFocus(_arg1);
                return;
            };
            super.drawFocus(_arg1);
        }
        public function getLineMetrics(_arg1:int):TextLineMetrics{
            return (textField.getLineMetrics(_arg1));
        }
        public function setSelection(_arg1:int, _arg2:int):void{
            textField.setSelection(_arg1, _arg2);
        }
        public function appendText(_arg1:String):void{
            textField.appendText(_arg1);
            invalidate(InvalidationType.DATA);
        }
        override protected function configUI():void{
            super.configUI();
            tabChildren = true;
            textField = new TextField();
            addChild(textField);
            updateTextFieldType();
            _verticalScrollBar = new UIScrollBar();
            _verticalScrollBar.name = "V";
            _verticalScrollBar.visible = false;
            _verticalScrollBar.focusEnabled = false;
            copyStylesToChild(_verticalScrollBar, SCROLL_BAR_STYLES);
            _verticalScrollBar.addEventListener(ScrollEvent.SCROLL, handleScroll, false, 0, true);
            addChild(_verticalScrollBar);
            _horizontalScrollBar = new UIScrollBar();
            _horizontalScrollBar.name = "H";
            _horizontalScrollBar.visible = false;
            _horizontalScrollBar.focusEnabled = false;
            _horizontalScrollBar.direction = ScrollBarDirection.HORIZONTAL;
            copyStylesToChild(_horizontalScrollBar, SCROLL_BAR_STYLES);
            _horizontalScrollBar.addEventListener(ScrollEvent.SCROLL, handleScroll, false, 0, true);
            addChild(_horizontalScrollBar);
            textField.addEventListener(TextEvent.TEXT_INPUT, handleTextInput, false, 0, true);
            textField.addEventListener(Event.CHANGE, handleChange, false, 0, true);
            textField.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown, false, 0, true);
            _horizontalScrollBar.scrollTarget = textField;
            _verticalScrollBar.scrollTarget = textField;
            addEventListener(MouseEvent.MOUSE_WHEEL, handleWheel, false, 0, true);
        }
        protected function updateTextFieldType():void{
            textField.type = ((((enabled) && (_editable))) ? TextFieldType.INPUT : TextFieldType.DYNAMIC);
            textField.selectable = enabled;
            textField.wordWrap = _wordWrap;
            textField.multiline = true;
        }
        protected function handleKeyDown(_arg1:KeyboardEvent):void{
            if (_arg1.keyCode == Keyboard.ENTER){
                dispatchEvent(new ComponentEvent(ComponentEvent.ENTER, true));
            };
        }
        protected function handleChange(_arg1:Event):void{
            _arg1.stopPropagation();
            dispatchEvent(new Event(Event.CHANGE, true));
            invalidate(InvalidationType.DATA);
        }
        protected function handleTextInput(_arg1:TextEvent):void{
            _arg1.stopPropagation();
            dispatchEvent(new TextEvent(TextEvent.TEXT_INPUT, true, false, _arg1.text));
        }
        protected function handleScroll(_arg1:ScrollEvent):void{
            dispatchEvent(_arg1);
        }
        protected function handleWheel(_arg1:MouseEvent):void{
            if (((!(enabled)) || (!(_verticalScrollBar.visible)))){
                return;
            };
            _verticalScrollBar.scrollPosition = (_verticalScrollBar.scrollPosition - (_arg1.delta * _verticalScrollBar.lineScrollSize));
            dispatchEvent(new ScrollEvent(ScrollBarDirection.VERTICAL, (_arg1.delta * _verticalScrollBar.lineScrollSize), _verticalScrollBar.scrollPosition));
        }
        protected function setEmbedFont(){
            var _local1:Object = getStyleValue("embedFonts");
            if (_local1 != null){
                textField.embedFonts = _local1;
            };
        }
        override protected function draw():void{
            if (isInvalid(InvalidationType.STATE)){
                updateTextFieldType();
            };
            if (isInvalid(InvalidationType.STYLES)){
                setStyles();
                setEmbedFont();
            };
            if (isInvalid(InvalidationType.STYLES, InvalidationType.STATE)){
                drawTextFormat();
                drawBackground();
                invalidate(InvalidationType.SIZE, false);
            };
            if (isInvalid(InvalidationType.SIZE, InvalidationType.DATA)){
                drawLayout();
            };
            super.draw();
        }
        protected function setStyles():void{
            copyStylesToChild(_verticalScrollBar, SCROLL_BAR_STYLES);
            copyStylesToChild(_horizontalScrollBar, SCROLL_BAR_STYLES);
        }
        protected function drawTextFormat():void{
            var _local1:Object = UIComponent.getStyleDefinition();
            var _local2:TextFormat = ((enabled) ? (_local1.defaultTextFormat as TextFormat) : (_local1.defaultDisabledTextFormat as TextFormat));
            textField.setTextFormat(_local2);
            var _local3:TextFormat = (getStyleValue(((enabled) ? "textFormat" : "disabledTextFormat")) as TextFormat);
            if (_local3 != null){
                textField.setTextFormat(_local3);
            } else {
                _local3 = _local2;
            };
            textField.defaultTextFormat = _local3;
            setEmbedFont();
            if (_html){
                textField.htmlText = _savedHTML;
            };
        }
        protected function drawBackground():void{
            var _local1:DisplayObject = background;
            var _local2:String = ((enabled) ? "upSkin" : "disabledSkin");
            background = getDisplayObjectInstance(getStyleValue(_local2));
            if (background != null){
                addChildAt(background, 0);
            };
            if (((((!((_local1 == null))) && (!((_local1 == background))))) && (contains(_local1)))){
                removeChild(_local1);
            };
        }
        protected function drawLayout():void{
            var _local1:Number = Number(getStyleValue("textPadding"));
            textField.x = (textField.y = _local1);
            background.width = width;
            background.height = height;
            var _local2:Number = height;
            var _local3:Boolean = needVScroll();
            var _local4:Number = (width - ((_local3) ? _verticalScrollBar.width : 0));
            var _local5:Boolean = needHScroll();
            if (_local5){
                _local2 = (_local2 - _horizontalScrollBar.height);
            };
            setTextSize(_local4, _local2, _local1);
            if (((((_local5) && (!(_local3)))) && (needVScroll()))){
                _local3 = true;
                _local4 = (_local4 - _verticalScrollBar.width);
                setTextSize(_local4, _local2, _local1);
            };
            if (_local3){
                _verticalScrollBar.visible = true;
                _verticalScrollBar.x = (width - _verticalScrollBar.width);
                _verticalScrollBar.height = _local2;
                _verticalScrollBar.visible = true;
                _verticalScrollBar.enabled = enabled;
            } else {
                _verticalScrollBar.visible = false;
            };
            if (_local5){
                _horizontalScrollBar.visible = true;
                _horizontalScrollBar.y = (height - _horizontalScrollBar.height);
                _horizontalScrollBar.width = _local4;
                _horizontalScrollBar.visible = true;
                _horizontalScrollBar.enabled = enabled;
            } else {
                _horizontalScrollBar.visible = false;
            };
            updateScrollBars();
            addEventListener(Event.ENTER_FRAME, delayedLayoutUpdate, false, 0, true);
        }
        protected function delayedLayoutUpdate(_arg1:Event):void{
            if (textHasChanged){
                textHasChanged = false;
                drawLayout();
                return;
            };
            removeEventListener(Event.ENTER_FRAME, delayedLayoutUpdate);
        }
        protected function updateScrollBars(){
            _horizontalScrollBar.update();
            _verticalScrollBar.update();
            _verticalScrollBar.enabled = enabled;
            _horizontalScrollBar.enabled = enabled;
            _horizontalScrollBar.drawNow();
            _verticalScrollBar.drawNow();
        }
        protected function needVScroll():Boolean{
            if (_verticalScrollPolicy == ScrollPolicy.OFF){
                return (false);
            };
            if (_verticalScrollPolicy == ScrollPolicy.ON){
                return (true);
            };
            return ((textField.maxScrollV > 1));
        }
        protected function needHScroll():Boolean{
            if (_horizontalScrollPolicy == ScrollPolicy.OFF){
                return (false);
            };
            if (_horizontalScrollPolicy == ScrollPolicy.ON){
                return (true);
            };
            return ((textField.maxScrollH > 0));
        }
        protected function setTextSize(_arg1:Number, _arg2:Number, _arg3:Number):void{
            var _local4:Number = (_arg1 - (_arg3 * 2));
            var _local5:Number = (_arg2 - (_arg3 * 2));
            if (_local4 != textField.width){
                textField.width = _local4;
            };
            if (_local5 != textField.height){
                textField.height = _local5;
            };
        }
        override protected function isOurFocus(_arg1:DisplayObject):Boolean{
            return ((((_arg1 == textField)) || (super.isOurFocus(_arg1))));
        }
        override protected function focusInHandler(_arg1:FocusEvent):void{
            setIMEMode(true);
            if (_arg1.target == this){
                stage.focus = textField;
            };
            var _local2:IFocusManager = focusManager;
            if (_local2){
                if (editable){
                    _local2.showFocusIndicator = true;
                };
                _local2.defaultButtonEnabled = false;
            };
            super.focusInHandler(_arg1);
            if (editable){
                setIMEMode(true);
            };
        }
        override protected function focusOutHandler(_arg1:FocusEvent):void{
            var _local2:IFocusManager = focusManager;
            if (_local2){
                _local2.defaultButtonEnabled = true;
            };
            setSelection(0, 0);
            super.focusOutHandler(_arg1);
            if (editable){
                setIMEMode(false);
            };
        }

    }
}//package fl.controls 
﻿package fl.controls {

    public class ScrollPolicy {

        public static const ON:String = "on";
        public static const AUTO:String = "auto";
        public static const OFF:String = "off";

    }
}//package fl.controls 
﻿package fl.controls {
    import fl.core.*;
    import flash.display.*;
    import flash.events.*;
    import flash.text.*;
    import fl.managers.*;
    import fl.events.*;
    import flash.ui.*;

    public class LabelButton extends BaseButton implements IFocusManagerComponent {

        private static var defaultStyles:Object = {
            icon:null,
            upIcon:null,
            downIcon:null,
            overIcon:null,
            disabledIcon:null,
            selectedDisabledIcon:null,
            selectedUpIcon:null,
            selectedDownIcon:null,
            selectedOverIcon:null,
            textFormat:null,
            disabledTextFormat:null,
            textPadding:5,
            embedFonts:false
        };
        public static var createAccessibilityImplementation:Function;

        public var textField:TextField;
        protected var _labelPlacement:String = "right";
        protected var _toggle:Boolean = false;
        protected var icon:DisplayObject;
        protected var oldMouseState:String;
        protected var _label:String = "Label";
        protected var mode:String = "center";

        public static function getStyleDefinition():Object{
            return (mergeStyles(defaultStyles, BaseButton.getStyleDefinition()));
        }

        public function get label():String{
            return (_label);
        }
        public function set label(_arg1:String):void{
            _label = _arg1;
            if (textField.text != _label){
                textField.text = _label;
                dispatchEvent(new ComponentEvent(ComponentEvent.LABEL_CHANGE));
            };
            invalidate(InvalidationType.SIZE);
            invalidate(InvalidationType.STYLES);
        }
        public function get labelPlacement():String{
            return (_labelPlacement);
        }
        public function set labelPlacement(_arg1:String):void{
            _labelPlacement = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        public function get toggle():Boolean{
            return (_toggle);
        }
        public function set toggle(_arg1:Boolean):void{
            if (((!(_arg1)) && (super.selected))){
                selected = false;
            };
            _toggle = _arg1;
            if (_toggle){
                addEventListener(MouseEvent.CLICK, toggleSelected, false, 0, true);
            } else {
                removeEventListener(MouseEvent.CLICK, toggleSelected);
            };
            invalidate(InvalidationType.STATE);
        }
        protected function toggleSelected(_arg1:MouseEvent):void{
            selected = !(selected);
            dispatchEvent(new Event(Event.CHANGE, true));
        }
        override public function get selected():Boolean{
            return (((_toggle) ? _selected : false));
        }
        override public function set selected(_arg1:Boolean):void{
            _selected = _arg1;
            if (_toggle){
                invalidate(InvalidationType.STATE);
            };
        }
        override protected function configUI():void{
            super.configUI();
            textField = new TextField();
            textField.type = TextFieldType.DYNAMIC;
            textField.selectable = false;
            addChild(textField);
        }
        override protected function draw():void{
            if (textField.text != _label){
                label = _label;
            };
            if (isInvalid(InvalidationType.STYLES, InvalidationType.STATE)){
                drawBackground();
                drawIcon();
                drawTextFormat();
                invalidate(InvalidationType.SIZE, false);
            };
            if (isInvalid(InvalidationType.SIZE)){
                drawLayout();
            };
            if (isInvalid(InvalidationType.SIZE, InvalidationType.STYLES)){
                if (((isFocused) && (focusManager.showFocusIndicator))){
                    drawFocus(true);
                };
            };
            validate();
        }
        protected function drawIcon():void{
            var _local1:DisplayObject = icon;
            var _local2:String = ((enabled) ? mouseState : "disabled");
            if (selected){
                _local2 = (("selected" + _local2.substr(0, 1).toUpperCase()) + _local2.substr(1));
            };
            _local2 = (_local2 + "Icon");
            var _local3:Object = getStyleValue(_local2);
            if (_local3 == null){
                _local3 = getStyleValue("icon");
            };
            if (_local3 != null){
                icon = getDisplayObjectInstance(_local3);
            };
            if (icon != null){
                addChildAt(icon, 1);
            };
            if (((!((_local1 == null))) && (!((_local1 == icon))))){
                removeChild(_local1);
            };
        }
        protected function drawTextFormat():void{
            var _local1:Object = UIComponent.getStyleDefinition();
            var _local2:TextFormat = ((enabled) ? (_local1.defaultTextFormat as TextFormat) : (_local1.defaultDisabledTextFormat as TextFormat));
            textField.setTextFormat(_local2);
            var _local3:TextFormat = (getStyleValue(((enabled) ? "textFormat" : "disabledTextFormat")) as TextFormat);
            if (_local3 != null){
                textField.setTextFormat(_local3);
            } else {
                _local3 = _local2;
            };
            textField.defaultTextFormat = _local3;
            setEmbedFont();
        }
        protected function setEmbedFont(){
            var _local1:Object = getStyleValue("embedFonts");
            if (_local1 != null){
                textField.embedFonts = _local1;
            };
        }
        override protected function drawLayout():void{
            var _local7:Number;
            var _local8:Number;
            var _local1:Number = Number(getStyleValue("textPadding"));
            var _local2:String = (((((icon == null)) && ((mode == "center")))) ? ButtonLabelPlacement.TOP : _labelPlacement);
            textField.height = (textField.textHeight + 4);
            var _local3:Number = (textField.textWidth + 4);
            var _local4:Number = (textField.textHeight + 4);
            var _local5:Number = ((icon)==null) ? 0 : (icon.width + _local1);
            var _local6:Number = ((icon)==null) ? 0 : (icon.height + _local1);
            textField.visible = (label.length > 0);
            if (icon != null){
                icon.x = Math.round(((width - icon.width) / 2));
                icon.y = Math.round(((height - icon.height) / 2));
            };
            if (textField.visible == false){
                textField.width = 0;
                textField.height = 0;
            } else {
                if ((((_local2 == ButtonLabelPlacement.BOTTOM)) || ((_local2 == ButtonLabelPlacement.TOP)))){
                    _local7 = Math.max(0, Math.min(_local3, (width - (2 * _local1))));
                    if ((height - 2) > _local4){
                        _local8 = _local4;
                    } else {
                        _local8 = (height - 2);
                    };
                    _local3 = _local7;
                    textField.width = _local3;
                    _local4 = _local8;
                    textField.height = _local4;
                    textField.x = Math.round(((width - _local3) / 2));
                    textField.y = Math.round(((((height - textField.height) - _local6) / 2) + ((_local2)==ButtonLabelPlacement.BOTTOM) ? _local6 : 0));
                    if (icon != null){
                        icon.y = Math.round(((_local2)==ButtonLabelPlacement.BOTTOM) ? (textField.y - _local6) : ((textField.y + textField.height) + _local1));
                    };
                } else {
                    _local7 = Math.max(0, Math.min(_local3, ((width - _local5) - (2 * _local1))));
                    _local3 = _local7;
                    textField.width = _local3;
                    textField.x = Math.round(((((width - _local3) - _local5) / 2) + ((_local2)!=ButtonLabelPlacement.LEFT) ? _local5 : 0));
                    textField.y = Math.round(((height - textField.height) / 2));
                    if (icon != null){
                        icon.x = Math.round(((_local2)!=ButtonLabelPlacement.LEFT) ? (textField.x - _local5) : ((textField.x + _local3) + _local1));
                    };
                };
            };
            super.drawLayout();
        }
        override protected function keyDownHandler(_arg1:KeyboardEvent):void{
            if (!enabled){
                return;
            };
            if (_arg1.keyCode == Keyboard.SPACE){
                if (oldMouseState == null){
                    oldMouseState = mouseState;
                };
                setMouseState("down");
                startPress();
            };
        }
        override protected function keyUpHandler(_arg1:KeyboardEvent):void{
            if (!enabled){
                return;
            };
            if (_arg1.keyCode == Keyboard.SPACE){
                setMouseState(oldMouseState);
                oldMouseState = null;
                endPress();
                dispatchEvent(new MouseEvent(MouseEvent.CLICK));
            };
        }
        override protected function initializeAccessibility():void{
            if (LabelButton.createAccessibilityImplementation != null){
                LabelButton.createAccessibilityImplementation(this);
            };
        }

    }
}//package fl.controls 
﻿package fl.controls {
    import fl.core.*;
    import flash.display.*;
    import fl.managers.*;

    public class Button extends LabelButton implements IFocusManagerComponent {

        private static var defaultStyles:Object = {
            emphasizedSkin:"Button_emphasizedSkin",
            emphasizedPadding:2
        };
        public static var createAccessibilityImplementation:Function;

        protected var _emphasized:Boolean = false;
        protected var emphasizedBorder:DisplayObject;

        public static function getStyleDefinition():Object{
            return (UIComponent.mergeStyles(LabelButton.getStyleDefinition(), defaultStyles));
        }

        public function get emphasized():Boolean{
            return (_emphasized);
        }
        public function set emphasized(_arg1:Boolean):void{
            _emphasized = _arg1;
            invalidate(InvalidationType.STYLES);
        }
        override protected function draw():void{
            if (((isInvalid(InvalidationType.STYLES)) || (isInvalid(InvalidationType.SIZE)))){
                drawEmphasized();
            };
            super.draw();
            if (emphasizedBorder != null){
                setChildIndex(emphasizedBorder, (numChildren - 1));
            };
        }
        protected function drawEmphasized():void{
            var _local2:Number;
            if (emphasizedBorder != null){
                removeChild(emphasizedBorder);
            };
            emphasizedBorder = null;
            if (!_emphasized){
                return;
            };
            var _local1:Object = getStyleValue("emphasizedSkin");
            if (_local1 != null){
                emphasizedBorder = getDisplayObjectInstance(_local1);
            };
            if (emphasizedBorder != null){
                addChildAt(emphasizedBorder, 0);
                _local2 = Number(getStyleValue("emphasizedPadding"));
                emphasizedBorder.x = (emphasizedBorder.y = -(_local2));
                emphasizedBorder.width = (width + (_local2 * 2));
                emphasizedBorder.height = (height + (_local2 * 2));
            };
        }
        override public function drawFocus(_arg1:Boolean):void{
            var _local2:Number;
            var _local3:*;
            super.drawFocus(_arg1);
            if (_arg1){
                _local2 = Number(getStyleValue("emphasizedPadding"));
                if ((((_local2 < 0)) || (!(_emphasized)))){
                    _local2 = 0;
                };
                _local3 = getStyleValue("focusRectPadding");
                _local3 = ((_local3)==null) ? 2 : _local3;
                _local3 = (_local3 + _local2);
                uiFocusRect.x = -(_local3);
                uiFocusRect.y = -(_local3);
                uiFocusRect.width = (width + (_local3 * 2));
                uiFocusRect.height = (height + (_local3 * 2));
            };
        }
        override protected function initializeAccessibility():void{
            if (Button.createAccessibilityImplementation != null){
                Button.createAccessibilityImplementation(this);
            };
        }

    }
}//package fl.controls 
﻿package fl.controls.listClasses {
    import fl.core.*;

    public class ListData {

        protected var _icon:Object = null;
        protected var _label:String;
        protected var _owner:UIComponent;
        protected var _index:uint;
        protected var _row:uint;
        protected var _column:uint;

        public function ListData(_arg1:String, _arg2:Object, _arg3:UIComponent, _arg4:uint, _arg5:uint, _arg6:uint=0){
            _label = _arg1;
            _icon = _arg2;
            _owner = _arg3;
            _index = _arg4;
            _row = _arg5;
            _column = _arg6;
        }
        public function get label():String{
            return (_label);
        }
        public function get icon():Object{
            return (_icon);
        }
        public function get owner():UIComponent{
            return (_owner);
        }
        public function get index():uint{
            return (_index);
        }
        public function get row():uint{
            return (_row);
        }
        public function get column():uint{
            return (_column);
        }

    }
}//package fl.controls.listClasses 
﻿package fl.controls.listClasses {

    public interface ICellRenderer {

        function set y(_arg1:Number):void;
        function set x(_arg1:Number):void;
        function setSize(_arg1:Number, _arg2:Number):void;
        function get listData():ListData;
        function set listData(_arg1:ListData):void;
        function get data():Object;
        function set data(_arg1:Object):void;
        function get selected():Boolean;
        function set selected(_arg1:Boolean):void;
        function setMouseState(_arg1:String):void;

    }
}//package fl.controls.listClasses 
﻿package fl.controls.listClasses {
    import fl.controls.*;
    import flash.events.*;

    public class CellRenderer extends LabelButton implements ICellRenderer {

        private static var defaultStyles:Object = {
            upSkin:"CellRenderer_upSkin",
            downSkin:"CellRenderer_downSkin",
            overSkin:"CellRenderer_overSkin",
            disabledSkin:"CellRenderer_disabledSkin",
            selectedDisabledSkin:"CellRenderer_selectedDisabledSkin",
            selectedUpSkin:"CellRenderer_selectedUpSkin",
            selectedDownSkin:"CellRenderer_selectedDownSkin",
            selectedOverSkin:"CellRenderer_selectedOverSkin",
            textFormat:null,
            disabledTextFormat:null,
            embedFonts:null,
            textPadding:5
        };

        protected var _listData:ListData;
        protected var _data:Object;

        public function CellRenderer():void{
            toggle = true;
            focusEnabled = false;
        }
        public static function getStyleDefinition():Object{
            return (defaultStyles);
        }

        override public function setSize(_arg1:Number, _arg2:Number):void{
            super.setSize(_arg1, _arg2);
        }
        public function get listData():ListData{
            return (_listData);
        }
        public function set listData(_arg1:ListData):void{
            _listData = _arg1;
            label = _listData.label;
            setStyle("icon", _listData.icon);
        }
        public function get data():Object{
            return (_data);
        }
        public function set data(_arg1:Object):void{
            _data = _arg1;
        }
        override public function get selected():Boolean{
            return (super.selected);
        }
        override public function set selected(_arg1:Boolean):void{
            super.selected = _arg1;
        }
        override protected function toggleSelected(_arg1:MouseEvent):void{
        }
        override protected function drawLayout():void{
            var _local3:Number;
            var _local1:Number = Number(getStyleValue("textPadding"));
            var _local2:Number = 0;
            if (icon != null){
                icon.x = _local1;
                icon.y = Math.round(((height - icon.height) >> 1));
                _local2 = (icon.width + _local1);
            };
            if (label.length > 0){
                textField.visible = true;
                _local3 = Math.max(0, ((width - _local2) - (_local1 * 2)));
                textField.width = _local3;
                textField.height = (textField.textHeight + 4);
                textField.x = (_local2 + _local1);
                textField.y = Math.round(((height - textField.height) >> 1));
            } else {
                textField.visible = false;
            };
            background.width = width;
            background.height = height;
        }

    }
}//package fl.controls.listClasses 
﻿package fl.controls {

    public class ButtonLabelPlacement {

        public static const BOTTOM:String = "bottom";
        public static const TOP:String = "top";
        public static const LEFT:String = "left";
        public static const RIGHT:String = "right";

    }
}//package fl.controls 
﻿package fl.controls {
    import fl.core.*;
    import flash.display.*;
    import flash.events.*;
    import fl.events.*;

    public class UIScrollBar extends ScrollBar {

        private static var defaultStyles:Object = {};

        protected var _scrollTarget:DisplayObject;
        protected var inEdit:Boolean = false;
        protected var inScroll:Boolean = false;
        protected var _targetScrollProperty:String;
        protected var _targetMaxScrollProperty:String;

        public static function getStyleDefinition():Object{
            return (UIComponent.mergeStyles(defaultStyles, ScrollBar.getStyleDefinition()));
        }

        override public function set minScrollPosition(_arg1:Number):void{
            super.minScrollPosition = ((_arg1)<0) ? 0 : _arg1;
        }
        override public function set maxScrollPosition(_arg1:Number):void{
            var _local2:Number = _arg1;
            if (_scrollTarget != null){
                _local2 = Math.min(_local2, _scrollTarget[_targetMaxScrollProperty]);
            };
            super.maxScrollPosition = _local2;
        }
        public function get scrollTarget():DisplayObject{
            return (_scrollTarget);
        }
        public function set scrollTarget(_arg1:DisplayObject):void{
            var target:* = _arg1;
            if (_scrollTarget != null){
                _scrollTarget.removeEventListener(Event.CHANGE, handleTargetChange, false);
                _scrollTarget.removeEventListener(TextEvent.TEXT_INPUT, handleTargetChange, false);
                _scrollTarget.removeEventListener(Event.SCROLL, handleTargetScroll, false);
            };
            _scrollTarget = target;
            var blockProg:* = null;
            var textDir:* = null;
            var hasPixelVS:* = false;
            if (_scrollTarget != null){
                try {
                    if (_scrollTarget.hasOwnProperty("blockProgression")){
                        blockProg = _scrollTarget["blockProgression"];
                    };
                    if (_scrollTarget.hasOwnProperty("direction")){
                        textDir = _scrollTarget["direction"];
                    };
                    if (_scrollTarget.hasOwnProperty("pixelScrollV")){
                        hasPixelVS = true;
                    };
                } catch(e:Error) {
                    blockProg = null;
                    textDir = null;
                };
            };
            var scrollHoriz:* = (this.direction == ScrollBarDirection.HORIZONTAL);
            var rot:* = Math.abs(this.rotation);
            if (((scrollHoriz) && ((((blockProg == "rl")) || ((textDir == "rtl")))))){
                if ((((getScaleY() > 0)) && ((rotation == 90)))){
                    x = (x + width);
                };
                setScaleY(-1);
            } else {
                if (((((!(scrollHoriz)) && ((blockProg == "rl")))) && ((textDir == "rtl")))){
                    if ((((getScaleY() > 0)) && (!((rotation == 90))))){
                        y = (y + height);
                    };
                    setScaleY(-1);
                } else {
                    if (getScaleY() < 0){
                        if (scrollHoriz){
                            if (rotation == 90){
                                x = (x - width);
                            };
                        } else {
                            if (rotation != 90){
                                y = (y - height);
                            };
                        };
                    };
                    setScaleY(1);
                };
            };
            setTargetScrollProperties(scrollHoriz, blockProg, hasPixelVS);
            if (_scrollTarget != null){
                _scrollTarget.addEventListener(Event.CHANGE, handleTargetChange, false, 0, true);
                _scrollTarget.addEventListener(TextEvent.TEXT_INPUT, handleTargetChange, false, 0, true);
                _scrollTarget.addEventListener(Event.SCROLL, handleTargetScroll, false, 0, true);
            };
            invalidate(InvalidationType.DATA);
        }
        public function get scrollTargetName():String{
            return (_scrollTarget.name);
        }
        public function set scrollTargetName(_arg1:String):void{
            var target:* = _arg1;
            try {
                scrollTarget = parent.getChildByName(target);
            } catch(error:Error) {
                throw (new Error("ScrollTarget not found, or is not a valid target"));
            };
        }
        override public function get direction():String{
            return (super.direction);
        }
        override public function set direction(_arg1:String):void{
            var _local2:DisplayObject;
            if (isLivePreview){
                return;
            };
            if (((!(componentInspectorSetting)) && (!((_scrollTarget == null))))){
                _local2 = _scrollTarget;
                scrollTarget = null;
            };
            super.direction = _arg1;
            if (_local2 != null){
                scrollTarget = _local2;
            } else {
                updateScrollTargetProperties();
            };
        }
        public function update():void{
            inEdit = true;
            updateScrollTargetProperties();
            inEdit = false;
        }
        override protected function draw():void{
            if (isInvalid(InvalidationType.DATA)){
                updateScrollTargetProperties();
            };
            super.draw();
        }
        protected function updateScrollTargetProperties():void{
            var blockProg:* = null;
            var hasPixelVS:* = false;
            var pageSize:* = NaN;
            var minScroll:* = NaN;
            var minScrollVValue:* = undefined;
            if (_scrollTarget == null){
                setScrollProperties(pageSize, minScrollPosition, maxScrollPosition);
                scrollPosition = 0;
            } else {
                blockProg = null;
                hasPixelVS = false;
                try {
                    if (_scrollTarget.hasOwnProperty("blockProgression")){
                        blockProg = _scrollTarget["blockProgression"];
                    };
                    if (_scrollTarget.hasOwnProperty("pixelScrollV")){
                        hasPixelVS = true;
                    };
                } catch(e1:Error) {
                };
                setTargetScrollProperties((this.direction == ScrollBarDirection.HORIZONTAL), blockProg, hasPixelVS);
                if (_targetScrollProperty == "scrollH"){
                    minScroll = 0;
                    try {
                        if (((_scrollTarget.hasOwnProperty("controller")) && (_scrollTarget["controller"].hasOwnProperty("compositionWidth")))){
                            pageSize = _scrollTarget["controller"]["compositionWidth"];
                        } else {
                            pageSize = _scrollTarget.width;
                        };
                    } catch(e2:Error) {
                        pageSize = _scrollTarget.width;
                    };
                } else {
                    try {
                        if (blockProg != null){
                            minScrollVValue = _scrollTarget["pixelMinScrollV"];
                            if ((minScrollVValue is int)){
                                minScroll = minScrollVValue;
                            } else {
                                minScroll = 1;
                            };
                        } else {
                            minScroll = 1;
                        };
                    } catch(e3:Error) {
                        minScroll = 1;
                    };
                    pageSize = 10;
                };
                setScrollProperties(pageSize, minScroll, scrollTarget[_targetMaxScrollProperty]);
                scrollPosition = _scrollTarget[_targetScrollProperty];
            };
        }
        override public function setScrollProperties(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number=0):void{
            var _local5:Number = _arg3;
            var _local6:Number = ((_arg2)<0) ? 0 : _arg2;
            if (_scrollTarget != null){
                _local5 = Math.min(_arg3, _scrollTarget[_targetMaxScrollProperty]);
            };
            super.setScrollProperties(_arg1, _local6, _local5, _arg4);
        }
        override public function setScrollPosition(_arg1:Number, _arg2:Boolean=true):void{
            super.setScrollPosition(_arg1, _arg2);
            if (!_scrollTarget){
                inScroll = false;
                return;
            };
            updateTargetScroll();
        }
        protected function updateTargetScroll(_arg1:ScrollEvent=null):void{
            if (inEdit){
                return;
            };
            _scrollTarget[_targetScrollProperty] = scrollPosition;
        }
        protected function handleTargetChange(_arg1:Event):void{
            inEdit = true;
            setScrollPosition(_scrollTarget[_targetScrollProperty], true);
            updateScrollTargetProperties();
            inEdit = false;
        }
        protected function handleTargetScroll(_arg1:Event):void{
            if (inDrag){
                return;
            };
            if (!enabled){
                return;
            };
            inEdit = true;
            updateScrollTargetProperties();
            scrollPosition = _scrollTarget[_targetScrollProperty];
            inEdit = false;
        }
        private function setTargetScrollProperties(_arg1:Boolean, _arg2:String, _arg3:Boolean=false):void{
            if (_arg2 == "rl"){
                if (_arg1){
                    _targetScrollProperty = ((_arg3) ? "pixelScrollV" : "scrollV");
                    _targetMaxScrollProperty = ((_arg3) ? "pixelMaxScrollV" : "maxScrollV");
                } else {
                    _targetScrollProperty = "scrollH";
                    _targetMaxScrollProperty = "maxScrollH";
                };
            } else {
                if (_arg1){
                    _targetScrollProperty = "scrollH";
                    _targetMaxScrollProperty = "maxScrollH";
                } else {
                    _targetScrollProperty = ((_arg3) ? "pixelScrollV" : "scrollV");
                    _targetMaxScrollProperty = ((_arg3) ? "pixelMaxScrollV" : "maxScrollV");
                };
            };
        }

    }
}//package fl.controls 
﻿package fl.controls {

    public class SliderDirection {

        public static var HORIZONTAL:String = "horizontal";
        public static var VERTICAL:String = "vertical";

    }
}//package fl.controls 
﻿package fl.controls {
    import fl.controls.listClasses.*;
    import fl.core.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import flash.text.*;
    import fl.data.*;
    import fl.managers.*;
    import fl.events.*;
    import flash.ui.*;

    public class ComboBox extends UIComponent implements IFocusManagerComponent {

        protected static const LIST_STYLES:Object = {
            upSkin:"comboListUpSkin",
            overSkin:"comboListOverSkin",
            downSkin:"comobListDownSkin",
            disabledSkin:"comboListDisabledSkin",
            downArrowDisabledSkin:"downArrowDisabledSkin",
            downArrowDownSkin:"downArrowDownSkin",
            downArrowOverSkin:"downArrowOverSkin",
            downArrowUpSkin:"downArrowUpSkin",
            upArrowDisabledSkin:"upArrowDisabledSkin",
            upArrowDownSkin:"upArrowDownSkin",
            upArrowOverSkin:"upArrowOverSkin",
            upArrowUpSkin:"upArrowUpSkin",
            thumbDisabledSkin:"thumbDisabledSkin",
            thumbDownSkin:"thumbDownSkin",
            thumbOverSkin:"thumbOverSkin",
            thumbUpSkin:"thumbUpSkin",
            thumbIcon:"thumbIcon",
            trackDisabledSkin:"trackDisabledSkin",
            trackDownSkin:"trackDownSkin",
            trackOverSkin:"trackOverSkin",
            trackUpSkin:"trackUpSkin",
            repeatDelay:"repeatDelay",
            repeatInterval:"repeatInterval",
            textFormat:"textFormat",
            disabledAlpha:"disabledAlpha",
            skin:"listSkin"
        };
        protected static const BACKGROUND_STYLES:Object = {
            overSkin:"overSkin",
            downSkin:"downSkin",
            upSkin:"upSkin",
            disabledSkin:"disabledSkin",
            repeatInterval:"repeatInterval"
        };

        private static var defaultStyles:Object = {
            upSkin:"ComboBox_upSkin",
            downSkin:"ComboBox_downSkin",
            overSkin:"ComboBox_overSkin",
            disabledSkin:"ComboBox_disabledSkin",
            focusRectSkin:null,
            focusRectPadding:null,
            textFormat:null,
            disabledTextFormat:null,
            textPadding:3,
            buttonWidth:24,
            disabledAlpha:null,
            listSkin:null
        };
        public static var createAccessibilityImplementation:Function;

        protected var inputField:TextInput;
        protected var background:BaseButton;
        protected var list:List;
        protected var _rowCount:uint = 5;
        protected var _editable:Boolean = false;
        protected var isOpen:Boolean = false;
        protected var highlightedCell:int = -1;
        protected var editableValue:String;
        protected var _prompt:String;
        protected var isKeyDown:Boolean = false;
        protected var currentIndex:int;
        protected var listOverIndex:uint;
        protected var _dropdownWidth:Number;
        protected var _labels:Array;
        private var collectionItemImport:SimpleCollectionItem;

        public static function getStyleDefinition():Object{
            return (mergeStyles(defaultStyles, List.getStyleDefinition()));
        }

        public function get editable():Boolean{
            return (_editable);
        }
        public function set editable(_arg1:Boolean):void{
            _editable = _arg1;
            drawTextField();
        }
        public function get rowCount():uint{
            return (_rowCount);
        }
        public function set rowCount(_arg1:uint):void{
            _rowCount = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        public function get restrict():String{
            return (inputField.restrict);
        }
        public function set restrict(_arg1:String):void{
            if (((componentInspectorSetting) && ((_arg1 == "")))){
                _arg1 = null;
            };
            if (!_editable){
                return;
            };
            inputField.restrict = _arg1;
        }
        public function get selectedIndex():int{
            return (list.selectedIndex);
        }
        public function set selectedIndex(_arg1:int):void{
            list.selectedIndex = _arg1;
            highlightCell();
            invalidate(InvalidationType.SELECTED);
        }
        public function get text():String{
            return (inputField.text);
        }
        public function set text(_arg1:String):void{
            if (!editable){
                return;
            };
            inputField.text = _arg1;
        }
        public function get labelField():String{
            return (list.labelField);
        }
        public function set labelField(_arg1:String):void{
            list.labelField = _arg1;
            invalidate(InvalidationType.DATA);
        }
        public function get labelFunction():Function{
            return (list.labelFunction);
        }
        public function set labelFunction(_arg1:Function):void{
            list.labelFunction = _arg1;
            invalidate(InvalidationType.DATA);
        }
        public function itemToLabel(_arg1:Object):String{
            if (_arg1 == null){
                return ("");
            };
            return (list.itemToLabel(_arg1));
        }
        public function get selectedItem():Object{
            return (list.selectedItem);
        }
        public function set selectedItem(_arg1:Object):void{
            list.selectedItem = _arg1;
            invalidate(InvalidationType.SELECTED);
        }
        public function get dropdown():List{
            return (list);
        }
        public function get length():int{
            return (list.length);
        }
        public function get textField():TextInput{
            return (inputField);
        }
        public function get value():String{
            var _local1:Object;
            if (editableValue != null){
                return (editableValue);
            };
            _local1 = selectedItem;
            if (((!(_editable)) && (!((_local1.data == null))))){
                return (_local1.data);
            };
            return (itemToLabel(_local1));
        }
        public function get dataProvider():DataProvider{
            return (list.dataProvider);
        }
        public function set dataProvider(_arg1:DataProvider):void{
            _arg1.addEventListener(DataChangeEvent.DATA_CHANGE, handleDataChange, false, 0, true);
            list.dataProvider = _arg1;
            invalidate(InvalidationType.DATA);
        }
        public function get dropdownWidth():Number{
            return (list.width);
        }
        public function set dropdownWidth(_arg1:Number):void{
            _dropdownWidth = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        public function addItem(_arg1:Object):void{
            list.addItem(_arg1);
            invalidate(InvalidationType.DATA);
        }
        public function get prompt():String{
            return (_prompt);
        }
        public function set prompt(_arg1:String):void{
            if (_arg1 == ""){
                _prompt = null;
            } else {
                _prompt = _arg1;
            };
            invalidate(InvalidationType.STATE);
        }
        public function get imeMode():String{
            return (inputField.imeMode);
        }
        public function set imeMode(_arg1:String):void{
            inputField.imeMode = _arg1;
        }
        public function addItemAt(_arg1:Object, _arg2:uint):void{
            list.addItemAt(_arg1, _arg2);
            invalidate(InvalidationType.DATA);
        }
        public function removeAll():void{
            list.removeAll();
            inputField.text = "";
            invalidate(InvalidationType.DATA);
        }
        public function removeItem(_arg1:Object):Object{
            return (list.removeItem(_arg1));
        }
        public function removeItemAt(_arg1:uint):void{
            list.removeItemAt(_arg1);
            invalidate(InvalidationType.DATA);
        }
        public function getItemAt(_arg1:uint):Object{
            return (list.getItemAt(_arg1));
        }
        public function replaceItemAt(_arg1:Object, _arg2:uint):Object{
            return (list.replaceItemAt(_arg1, _arg2));
        }
        public function sortItems(... _args){
            return (list.sortItems.apply(list, _args));
        }
        public function sortItemsOn(_arg1:String, _arg2:Object=null){
            return (list.sortItemsOn(_arg1, _arg2));
        }
        public function open():void{
            currentIndex = selectedIndex;
            if (((isOpen) || ((length == 0)))){
                return;
            };
            dispatchEvent(new Event(Event.OPEN));
            isOpen = true;
            addEventListener(Event.ENTER_FRAME, addCloseListener, false, 0, true);
            positionList();
            list.scrollToSelected();
            focusManager.form.addChild(list);
        }
        public function close():void{
            highlightCell();
            highlightedCell = -1;
            if (!isOpen){
                return;
            };
            dispatchEvent(new Event(Event.CLOSE));
            var _local1:DisplayObjectContainer = focusManager.form;
            _local1.removeEventListener(MouseEvent.MOUSE_DOWN, onStageClick);
            isOpen = false;
            _local1.removeChild(list);
        }
        public function get selectedLabel():String{
            if (editableValue != null){
                return (editableValue);
            };
            if (selectedIndex == -1){
                return (null);
            };
            return (itemToLabel(selectedItem));
        }
        override protected function configUI():void{
            super.configUI();
            background = new BaseButton();
            background.focusEnabled = false;
            copyStylesToChild(background, BACKGROUND_STYLES);
            background.addEventListener(MouseEvent.MOUSE_DOWN, onToggleListVisibility, false, 0, true);
            addChild(background);
            inputField = new TextInput();
            inputField.focusTarget = (this as IFocusManagerComponent);
            inputField.focusEnabled = false;
            inputField.addEventListener(Event.CHANGE, onTextInput, false, 0, true);
            addChild(inputField);
            list = new List();
            list.focusEnabled = false;
            copyStylesToChild(list, LIST_STYLES);
            list.addEventListener(Event.CHANGE, onListChange, false, 0, true);
            list.addEventListener(ListEvent.ITEM_CLICK, onListChange, false, 0, true);
            list.addEventListener(ListEvent.ITEM_ROLL_OUT, passEvent, false, 0, true);
            list.addEventListener(ListEvent.ITEM_ROLL_OVER, passEvent, false, 0, true);
            list.verticalScrollBar.addEventListener(Event.SCROLL, passEvent, false, 0, true);
        }
        override protected function focusInHandler(_arg1:FocusEvent):void{
            super.focusInHandler(_arg1);
            if (editable){
                stage.focus = inputField.textField;
            };
        }
        override protected function focusOutHandler(_arg1:FocusEvent):void{
            isKeyDown = false;
            if (isOpen){
                if (((!(_arg1.relatedObject)) || (!(list.contains(_arg1.relatedObject))))){
                    if (((!((highlightedCell == -1))) && (!((highlightedCell == selectedIndex))))){
                        selectedIndex = highlightedCell;
                        dispatchEvent(new Event(Event.CHANGE));
                    };
                    close();
                };
            };
            super.focusOutHandler(_arg1);
        }
        protected function handleDataChange(_arg1:DataChangeEvent):void{
            invalidate(InvalidationType.DATA);
        }
        override protected function draw():void{
            var _local1:* = selectedIndex;
            if ((((_local1 == -1)) && (((((!((prompt == null))) || (editable))) || ((length == 0)))))){
                _local1 = Math.max(-1, Math.min(_local1, (length - 1)));
            } else {
                editableValue = null;
                _local1 = Math.max(0, Math.min(_local1, (length - 1)));
            };
            if (list.selectedIndex != _local1){
                list.selectedIndex = _local1;
                invalidate(InvalidationType.SELECTED, false);
            };
            if (isInvalid(InvalidationType.STYLES)){
                setStyles();
                setEmbedFonts();
                invalidate(InvalidationType.SIZE, false);
            };
            if (isInvalid(InvalidationType.SIZE, InvalidationType.DATA, InvalidationType.STATE)){
                drawTextFormat();
                drawLayout();
                invalidate(InvalidationType.DATA);
            };
            if (isInvalid(InvalidationType.DATA)){
                drawList();
                invalidate(InvalidationType.SELECTED, true);
            };
            if (isInvalid(InvalidationType.SELECTED)){
                if ((((_local1 == -1)) && (!((editableValue == null))))){
                    inputField.text = editableValue;
                } else {
                    if (_local1 > -1){
                        if (length > 0){
                            inputField.horizontalScrollPosition = 0;
                            inputField.text = itemToLabel(list.selectedItem);
                        };
                    } else {
                        if ((((_local1 == -1)) && (!((_prompt == null))))){
                            showPrompt();
                        } else {
                            inputField.text = "";
                        };
                    };
                };
                if (((((editable) && ((selectedIndex > -1)))) && ((stage.focus == inputField.textField)))){
                    inputField.setSelection(0, inputField.length);
                };
            };
            drawTextField();
            super.draw();
        }
        protected function setEmbedFonts():void{
            var _local1:Object = getStyleValue("embedFonts");
            if (_local1 != null){
                inputField.textField.embedFonts = _local1;
            };
        }
        protected function showPrompt():void{
            inputField.text = _prompt;
        }
        protected function setStyles():void{
            copyStylesToChild(background, BACKGROUND_STYLES);
            copyStylesToChild(list, LIST_STYLES);
        }
        protected function drawLayout():void{
            var _local1:Number = (getStyleValue("buttonWidth") as Number);
            var _local2:Number = (getStyleValue("textPadding") as Number);
            background.setSize(width, height);
            inputField.x = (inputField.y = _local2);
            inputField.setSize(((width - _local1) - _local2), (height - _local2));
            list.width = ((isNaN(_dropdownWidth)) ? width : _dropdownWidth);
            background.enabled = enabled;
            background.drawNow();
        }
        protected function drawTextFormat():void{
            var _local1:TextFormat = (getStyleValue(((_enabled) ? "textFormat" : "disabledTextFormat")) as TextFormat);
            if (_local1 == null){
                _local1 = new TextFormat();
            };
            inputField.textField.defaultTextFormat = _local1;
            inputField.textField.setTextFormat(_local1);
            setEmbedFonts();
        }
        protected function drawList():void{
            list.rowCount = Math.max(0, Math.min(_rowCount, list.dataProvider.length));
        }
        protected function positionList():void{
            var myForm:* = null;
            var theStageHeight:* = NaN;
            var p:* = localToGlobal(new Point(0, 0));
            myForm = focusManager.form;
            p = myForm.globalToLocal(p);
            list.x = p.x;
            try {
                theStageHeight = stage.stageHeight;
            } catch(se:SecurityError) {
                theStageHeight = myForm.height;
            };
            if (((p.y + height) + list.height) > theStageHeight){
                list.y = (p.y - list.height);
            } else {
                list.y = (p.y + height);
            };
        }
        protected function drawTextField():void{
            inputField.setStyle("upSkin", "");
            inputField.setStyle("disabledSkin", "");
            inputField.enabled = enabled;
            inputField.editable = _editable;
            inputField.textField.selectable = ((enabled) && (_editable));
            inputField.mouseEnabled = (inputField.mouseChildren = ((enabled) && (_editable)));
            inputField.focusEnabled = false;
            if (_editable){
                inputField.addEventListener(FocusEvent.FOCUS_IN, onInputFieldFocus, false, 0, true);
                inputField.addEventListener(FocusEvent.FOCUS_OUT, onInputFieldFocusOut, false, 0, true);
            } else {
                inputField.removeEventListener(FocusEvent.FOCUS_IN, onInputFieldFocus);
                inputField.removeEventListener(FocusEvent.FOCUS_OUT, onInputFieldFocusOut);
            };
        }
        protected function onInputFieldFocus(_arg1:FocusEvent):void{
            inputField.addEventListener(ComponentEvent.ENTER, onEnter, false, 0, true);
            close();
        }
        protected function onInputFieldFocusOut(_arg1:FocusEvent):void{
            inputField.removeEventListener(ComponentEvent.ENTER, onEnter);
            selectedIndex = selectedIndex;
        }
        protected function onEnter(_arg1:ComponentEvent):void{
            _arg1.stopPropagation();
        }
        protected function onToggleListVisibility(_arg1:MouseEvent):void{
            _arg1.stopPropagation();
            dispatchEvent(_arg1);
            if (isOpen){
                close();
            } else {
                open();
                focusManager.form.addEventListener(MouseEvent.MOUSE_UP, onListItemUp, false, 0, true);
            };
        }
        protected function onListItemUp(_arg1:MouseEvent):void{
            focusManager.form.removeEventListener(MouseEvent.MOUSE_UP, onListItemUp);
            if (((!((_arg1.target is ICellRenderer))) || (!(list.contains((_arg1.target as DisplayObject)))))){
                return;
            };
            editableValue = null;
            var _local2:* = selectedIndex;
            selectedIndex = _arg1.target.listData.index;
            if (_local2 != selectedIndex){
                dispatchEvent(new Event(Event.CHANGE));
            };
            close();
        }
        protected function onListChange(_arg1:Event):void{
            editableValue = null;
            dispatchEvent(_arg1);
            invalidate(InvalidationType.SELECTED);
            if (isKeyDown){
                return;
            };
            close();
        }
        protected function onStageClick(_arg1:MouseEvent):void{
            if (!isOpen){
                return;
            };
            if (((!(contains((_arg1.target as DisplayObject)))) && (!(list.contains((_arg1.target as DisplayObject)))))){
                if (highlightedCell != -1){
                    selectedIndex = highlightedCell;
                    dispatchEvent(new Event(Event.CHANGE));
                };
                close();
            };
        }
        protected function passEvent(_arg1:Event):void{
            dispatchEvent(_arg1);
        }
        private function addCloseListener(_arg1:Event){
            removeEventListener(Event.ENTER_FRAME, addCloseListener);
            if (!isOpen){
                return;
            };
            focusManager.form.addEventListener(MouseEvent.MOUSE_DOWN, onStageClick, false, 0, true);
        }
        protected function onTextInput(_arg1:Event):void{
            _arg1.stopPropagation();
            if (!_editable){
                return;
            };
            editableValue = inputField.text;
            selectedIndex = -1;
            dispatchEvent(new Event(Event.CHANGE));
        }
        protected function calculateAvailableHeight():Number{
            var _local1:Number = Number(getStyleValue("contentPadding"));
            return ((list.height - (_local1 * 2)));
        }
        override protected function keyDownHandler(_arg1:KeyboardEvent):void{
            isKeyDown = true;
            if (_arg1.ctrlKey){
                switch (_arg1.keyCode){
                    case Keyboard.UP:
                        if (highlightedCell > -1){
                            selectedIndex = highlightedCell;
                            dispatchEvent(new Event(Event.CHANGE));
                        };
                        close();
                        break;
                    case Keyboard.DOWN:
                        open();
                        break;
                };
                return;
            };
            _arg1.stopPropagation();
            var _local2:int = Math.max(((calculateAvailableHeight() / list.rowHeight) << 0), 1);
            var _local3:uint = selectedIndex;
            var _local4:Number = ((highlightedCell)==-1) ? selectedIndex : highlightedCell;
            var _local5 = -1;
            switch (_arg1.keyCode){
                case Keyboard.SPACE:
                    if (isOpen){
                        close();
                    } else {
                        open();
                    };
                    return;
                case Keyboard.ESCAPE:
                    if (isOpen){
                        if (highlightedCell > -1){
                            selectedIndex = selectedIndex;
                        };
                        close();
                    };
                    return;
                case Keyboard.UP:
                    _local5 = Math.max(0, (_local4 - 1));
                    break;
                case Keyboard.DOWN:
                    _local5 = Math.min((length - 1), (_local4 + 1));
                    break;
                case Keyboard.PAGE_UP:
                    _local5 = Math.max((_local4 - _local2), 0);
                    break;
                case Keyboard.PAGE_DOWN:
                    _local5 = Math.min((_local4 + _local2), (length - 1));
                    break;
                case Keyboard.HOME:
                    _local5 = 0;
                    break;
                case Keyboard.END:
                    _local5 = (length - 1);
                    break;
                case Keyboard.ENTER:
                    if (((_editable) && ((highlightedCell == -1)))){
                        editableValue = inputField.text;
                        selectedIndex = -1;
                    } else {
                        if (((isOpen) && ((highlightedCell > -1)))){
                            editableValue = null;
                            selectedIndex = highlightedCell;
                            dispatchEvent(new Event(Event.CHANGE));
                        };
                    };
                    dispatchEvent(new ComponentEvent(ComponentEvent.ENTER));
                    close();
                    return;
                default:
                    if (editable){
                        break;
                    };
                    _local5 = list.getNextIndexAtLetter(String.fromCharCode(_arg1.keyCode), _local4);
            };
            if (_local5 > -1){
                if (isOpen){
                    highlightCell(_local5);
                    inputField.text = list.itemToLabel(getItemAt(_local5));
                } else {
                    highlightCell();
                    selectedIndex = _local5;
                    dispatchEvent(new Event(Event.CHANGE));
                };
            };
        }
        protected function highlightCell(_arg1:int=-1):void{
            var _local2:ICellRenderer;
            if (highlightedCell > -1){
                _local2 = list.itemToCellRenderer(getItemAt(highlightedCell));
                if (_local2 != null){
                    _local2.setMouseState("up");
                };
            };
            if (_arg1 == -1){
                return;
            };
            list.scrollToIndex(_arg1);
            list.drawNow();
            _local2 = list.itemToCellRenderer(getItemAt(_arg1));
            if (_local2 != null){
                _local2.setMouseState("over");
                highlightedCell = _arg1;
            };
        }
        override protected function keyUpHandler(_arg1:KeyboardEvent):void{
            isKeyDown = false;
        }
        override protected function initializeAccessibility():void{
            if (ComboBox.createAccessibilityImplementation != null){
                ComboBox.createAccessibilityImplementation(this);
            };
        }

    }
}//package fl.controls 
﻿package fl.controls {
    import fl.core.*;
    import flash.display.*;
    import flash.events.*;
    import fl.events.*;

    public class ScrollBar extends UIComponent {

        public static const WIDTH:Number = 15;
        protected static const DOWN_ARROW_STYLES:Object = {
            disabledSkin:"downArrowDisabledSkin",
            downSkin:"downArrowDownSkin",
            overSkin:"downArrowOverSkin",
            upSkin:"downArrowUpSkin",
            repeatDelay:"repeatDelay",
            repeatInterval:"repeatInterval"
        };
        protected static const THUMB_STYLES:Object = {
            disabledSkin:"thumbDisabledSkin",
            downSkin:"thumbDownSkin",
            overSkin:"thumbOverSkin",
            upSkin:"thumbUpSkin",
            icon:"thumbIcon",
            textPadding:0
        };
        protected static const TRACK_STYLES:Object = {
            disabledSkin:"trackDisabledSkin",
            downSkin:"trackDownSkin",
            overSkin:"trackOverSkin",
            upSkin:"trackUpSkin",
            repeatDelay:"repeatDelay",
            repeatInterval:"repeatInterval"
        };
        protected static const UP_ARROW_STYLES:Object = {
            disabledSkin:"upArrowDisabledSkin",
            downSkin:"upArrowDownSkin",
            overSkin:"upArrowOverSkin",
            upSkin:"upArrowUpSkin",
            repeatDelay:"repeatDelay",
            repeatInterval:"repeatInterval"
        };

        private static var defaultStyles:Object = {
            downArrowDisabledSkin:"ScrollArrowDown_disabledSkin",
            downArrowDownSkin:"ScrollArrowDown_downSkin",
            downArrowOverSkin:"ScrollArrowDown_overSkin",
            downArrowUpSkin:"ScrollArrowDown_upSkin",
            thumbDisabledSkin:"ScrollThumb_upSkin",
            thumbDownSkin:"ScrollThumb_downSkin",
            thumbOverSkin:"ScrollThumb_overSkin",
            thumbUpSkin:"ScrollThumb_upSkin",
            trackDisabledSkin:"ScrollTrack_skin",
            trackDownSkin:"ScrollTrack_skin",
            trackOverSkin:"ScrollTrack_skin",
            trackUpSkin:"ScrollTrack_skin",
            upArrowDisabledSkin:"ScrollArrowUp_disabledSkin",
            upArrowDownSkin:"ScrollArrowUp_downSkin",
            upArrowOverSkin:"ScrollArrowUp_overSkin",
            upArrowUpSkin:"ScrollArrowUp_upSkin",
            thumbIcon:"ScrollBar_thumbIcon",
            repeatDelay:500,
            repeatInterval:35
        };

        private var _pageSize:Number = 10;
        private var _pageScrollSize:Number = 0;
        private var _lineScrollSize:Number = 1;
        private var _minScrollPosition:Number = 0;
        private var _maxScrollPosition:Number = 0;
        private var _scrollPosition:Number = 0;
        private var _direction:String = "vertical";
        private var thumbScrollOffset:Number;
        protected var inDrag:Boolean = false;
        protected var upArrow:BaseButton;
        protected var downArrow:BaseButton;
        protected var thumb:LabelButton;
        protected var track:BaseButton;

        public function ScrollBar(){
            setStyles();
            focusEnabled = false;
        }
        public static function getStyleDefinition():Object{
            return (defaultStyles);
        }

        override public function setSize(_arg1:Number, _arg2:Number):void{
            if (_direction == ScrollBarDirection.HORIZONTAL){
                super.setSize(_arg2, _arg1);
            } else {
                super.setSize(_arg1, _arg2);
            };
        }
        override public function get width():Number{
            return (((_direction)==ScrollBarDirection.HORIZONTAL) ? super.height : super.width);
        }
        override public function get height():Number{
            return (((_direction)==ScrollBarDirection.HORIZONTAL) ? super.width : super.height);
        }
        override public function get enabled():Boolean{
            return (super.enabled);
        }
        override public function set enabled(_arg1:Boolean):void{
            super.enabled = _arg1;
            downArrow.enabled = (track.enabled = (thumb.enabled = (upArrow.enabled = ((enabled) && ((_maxScrollPosition > _minScrollPosition))))));
            updateThumb();
        }
        public function setScrollProperties(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number=0):void{
            this.pageSize = _arg1;
            _minScrollPosition = _arg2;
            _maxScrollPosition = _arg3;
            if (_arg4 >= 0){
                _pageScrollSize = _arg4;
            };
            enabled = (_maxScrollPosition > _minScrollPosition);
            setScrollPosition(_scrollPosition, false);
            updateThumb();
        }
        public function get scrollPosition():Number{
            return (_scrollPosition);
        }
        public function set scrollPosition(_arg1:Number):void{
            setScrollPosition(_arg1, true);
        }
        public function get minScrollPosition():Number{
            return (_minScrollPosition);
        }
        public function set minScrollPosition(_arg1:Number):void{
            setScrollProperties(_pageSize, _arg1, _maxScrollPosition);
        }
        public function get maxScrollPosition():Number{
            return (_maxScrollPosition);
        }
        public function set maxScrollPosition(_arg1:Number):void{
            setScrollProperties(_pageSize, _minScrollPosition, _arg1);
        }
        public function get pageSize():Number{
            return (_pageSize);
        }
        public function set pageSize(_arg1:Number):void{
            if (_arg1 > 0){
                _pageSize = _arg1;
            };
        }
        public function get pageScrollSize():Number{
            return (((_pageScrollSize)==0) ? _pageSize : _pageScrollSize);
        }
        public function set pageScrollSize(_arg1:Number):void{
            if (_arg1 >= 0){
                _pageScrollSize = _arg1;
            };
        }
        public function get lineScrollSize():Number{
            return (_lineScrollSize);
        }
        public function set lineScrollSize(_arg1:Number):void{
            if (_arg1 > 0){
                _lineScrollSize = _arg1;
            };
        }
        public function get direction():String{
            return (_direction);
        }
        public function set direction(_arg1:String):void{
            if (_direction == _arg1){
                return;
            };
            _direction = _arg1;
            if (isLivePreview){
                return;
            };
            setScaleY(1);
            var _local2 = (_direction == ScrollBarDirection.HORIZONTAL);
            if (((_local2) && (componentInspectorSetting))){
                if (rotation == 90){
                    return;
                };
                setScaleX(-1);
                rotation = -90;
            };
            if (!componentInspectorSetting){
                if (((_local2) && ((rotation == 0)))){
                    rotation = -90;
                    setScaleX(-1);
                } else {
                    if (((!(_local2)) && ((rotation == -90)))){
                        rotation = 0;
                        setScaleX(1);
                    };
                };
            };
            invalidate(InvalidationType.SIZE);
        }
        override protected function configUI():void{
            super.configUI();
            track = new BaseButton();
            track.move(0, 14);
            track.useHandCursor = false;
            track.autoRepeat = true;
            track.focusEnabled = false;
            addChild(track);
            thumb = new LabelButton();
            thumb.label = "";
            thumb.setSize(WIDTH, 15);
            thumb.move(0, 15);
            thumb.focusEnabled = false;
            addChild(thumb);
            downArrow = new BaseButton();
            downArrow.setSize(WIDTH, 14);
            downArrow.autoRepeat = true;
            downArrow.focusEnabled = false;
            addChild(downArrow);
            upArrow = new BaseButton();
            upArrow.setSize(WIDTH, 14);
            upArrow.move(0, 0);
            upArrow.autoRepeat = true;
            upArrow.focusEnabled = false;
            addChild(upArrow);
            upArrow.addEventListener(ComponentEvent.BUTTON_DOWN, scrollPressHandler, false, 0, true);
            downArrow.addEventListener(ComponentEvent.BUTTON_DOWN, scrollPressHandler, false, 0, true);
            track.addEventListener(ComponentEvent.BUTTON_DOWN, scrollPressHandler, false, 0, true);
            thumb.addEventListener(MouseEvent.MOUSE_DOWN, thumbPressHandler, false, 0, true);
            enabled = false;
        }
        override protected function draw():void{
            var _local1:Number;
            if (isInvalid(InvalidationType.SIZE)){
                _local1 = super.height;
                downArrow.move(0, Math.max(upArrow.height, (_local1 - downArrow.height)));
                track.setSize(WIDTH, Math.max(0, (_local1 - (downArrow.height + upArrow.height))));
                updateThumb();
            };
            if (isInvalid(InvalidationType.STYLES, InvalidationType.STATE)){
                setStyles();
            };
            downArrow.drawNow();
            upArrow.drawNow();
            track.drawNow();
            thumb.drawNow();
            validate();
        }
        protected function scrollPressHandler(_arg1:ComponentEvent):void{
            var _local2:Number;
            var _local3:Number;
            _arg1.stopImmediatePropagation();
            if (_arg1.currentTarget == upArrow){
                setScrollPosition((_scrollPosition - _lineScrollSize));
            } else {
                if (_arg1.currentTarget == downArrow){
                    setScrollPosition((_scrollPosition + _lineScrollSize));
                } else {
                    _local2 = (((track.mouseY / track.height) * (_maxScrollPosition - _minScrollPosition)) + _minScrollPosition);
                    _local3 = ((pageScrollSize)==0) ? pageSize : pageScrollSize;
                    if (_scrollPosition < _local2){
                        setScrollPosition(Math.min(_local2, (_scrollPosition + _local3)));
                    } else {
                        if (_scrollPosition > _local2){
                            setScrollPosition(Math.max(_local2, (_scrollPosition - _local3)));
                        };
                    };
                };
            };
        }
        protected function thumbPressHandler(_arg1:MouseEvent):void{
            inDrag = true;
            thumbScrollOffset = (mouseY - thumb.y);
            thumb.mouseStateLocked = true;
            mouseChildren = false;
            var _local2:DisplayObjectContainer = focusManager.form;
            _local2.addEventListener(MouseEvent.MOUSE_MOVE, handleThumbDrag, false, 0, true);
            _local2.addEventListener(MouseEvent.MOUSE_UP, thumbReleaseHandler, false, 0, true);
        }
        protected function handleThumbDrag(_arg1:MouseEvent):void{
            var _local2:Number = Math.max(0, Math.min((track.height - thumb.height), ((mouseY - track.y) - thumbScrollOffset)));
            setScrollPosition((((_local2 / (track.height - thumb.height)) * (_maxScrollPosition - _minScrollPosition)) + _minScrollPosition));
        }
        protected function thumbReleaseHandler(_arg1:MouseEvent):void{
            inDrag = false;
            mouseChildren = true;
            thumb.mouseStateLocked = false;
            var _local2:DisplayObjectContainer = focusManager.form;
            _local2.removeEventListener(MouseEvent.MOUSE_MOVE, handleThumbDrag);
            _local2.removeEventListener(MouseEvent.MOUSE_UP, thumbReleaseHandler);
        }
        public function setScrollPosition(_arg1:Number, _arg2:Boolean=true):void{
            var _local3:Number = scrollPosition;
            _scrollPosition = Math.max(_minScrollPosition, Math.min(_maxScrollPosition, _arg1));
            if (_local3 == _scrollPosition){
                return;
            };
            if (_arg2){
                dispatchEvent(new ScrollEvent(_direction, (scrollPosition - _local3), scrollPosition));
            };
            updateThumb();
        }
        protected function setStyles():void{
            copyStylesToChild(downArrow, DOWN_ARROW_STYLES);
            copyStylesToChild(thumb, THUMB_STYLES);
            copyStylesToChild(track, TRACK_STYLES);
            copyStylesToChild(upArrow, UP_ARROW_STYLES);
        }
        protected function updateThumb():void{
            var _local1:Number = ((_maxScrollPosition - _minScrollPosition) + _pageSize);
            if ((((((track.height <= 12)) || ((_maxScrollPosition <= _minScrollPosition)))) || ((((_local1 == 0)) || (isNaN(_local1)))))){
                thumb.height = 12;
                thumb.visible = false;
            } else {
                thumb.height = Math.max(13, ((_pageSize / _local1) * track.height));
                thumb.y = (track.y + ((track.height - thumb.height) * ((_scrollPosition - _minScrollPosition) / (_maxScrollPosition - _minScrollPosition))));
                thumb.visible = enabled;
            };
        }

    }
}//package fl.controls 
﻿package fl.controls.dataGridClasses {
    import fl.controls.listClasses.*;
    import fl.controls.*;

    public class DataGridCellEditor extends TextInput implements ICellRenderer {

        private static var defaultStyles:Object = {
            textPadding:1,
            textFormat:null,
            upSkin:"DataGridCellEditor_skin"
        };

        protected var _listData:ListData;
        protected var _data:Object;

        public function DataGridCellEditor():void{
        }
        public static function getStyleDefinition():Object{
            return (defaultStyles);
        }

        public function get listData():ListData{
            return (_listData);
        }
        public function set listData(_arg1:ListData):void{
            _listData = _arg1;
            text = _listData.label;
        }
        public function get data():Object{
            return (_data);
        }
        public function set data(_arg1:Object):void{
            _data = _arg1;
        }
        public function get selected():Boolean{
            return (false);
        }
        public function set selected(_arg1:Boolean):void{
        }
        public function setMouseState(_arg1:String):void{
        }

    }
}//package fl.controls.dataGridClasses 
﻿package fl.controls.dataGridClasses {
    import fl.controls.*;

    public class HeaderRenderer extends LabelButton {

        private static var defaultStyles:Object = {
            upSkin:"HeaderRenderer_upSkin",
            downSkin:"HeaderRenderer_downSkin",
            overSkin:"HeaderRenderer_overSkin",
            disabledSkin:"HeaderRenderer_disabledSkin",
            selectedDisabledSkin:"HeaderRenderer_selectedDisabledSkin",
            selectedUpSkin:"HeaderRenderer_selectedUpSkin",
            selectedDownSkin:"HeaderRenderer_selectedDownSkin",
            selectedOverSkin:"HeaderRenderer_selectedOverSkin",
            textFormat:null,
            disabledTextFormat:null,
            textPadding:5
        };

        public var _column:uint;

        public function HeaderRenderer():void{
            focusEnabled = false;
        }
        public static function getStyleDefinition():Object{
            return (defaultStyles);
        }

        public function get column():uint{
            return (_column);
        }
        public function set column(_arg1:uint):void{
            _column = _arg1;
        }
        override protected function drawLayout():void{
            var _local1:Number = Number(getStyleValue("textPadding"));
            textField.height = (textField.textHeight + 4);
            textField.visible = (label.length > 0);
            var _local2:Number = (textField.textWidth + 4);
            var _local3:Number = (textField.textHeight + 4);
            var _local4:Number = ((icon)==null) ? 0 : (icon.width + 4);
            var _local5:Number = Math.max(0, Math.min(_local2, ((width - (2 * _local1)) - _local4)));
            if (icon != null){
                icon.x = (((width - _local1) - icon.width) - 2);
                icon.y = Math.round(((height - icon.height) / 2));
            };
            textField.width = _local5;
            textField.x = _local1;
            textField.y = Math.round(((height - textField.height) / 2));
            background.width = width;
            background.height = height;
        }

    }
}//package fl.controls.dataGridClasses 
﻿package fl.controls.dataGridClasses {
    import fl.core.*;
    import fl.controls.*;

    public class DataGridColumn {

        private var _columnName:String;
        private var _headerText:String;
        private var _minWidth:Number = 20;
        private var _width:Number = 100;
        private var _visible:Boolean = true;
        private var _cellRenderer:Object;
        private var _headerRenderer:Object;
        private var _labelFunction:Function;
        private var _sortCompareFunction:Function;
        private var _imeMode:String;
        public var owner:DataGrid;
        public var colNum:Number;
        public var explicitWidth:Number;
        public var sortable:Boolean = true;
        public var resizable:Boolean = true;
        public var editable:Boolean = true;
        public var itemEditor:Object = "fl.controls.dataGridClasses.DataGridCellEditor";
        public var editorDataField:String = "text";
        public var dataField:String;
        public var sortDescending:Boolean = false;
        public var sortOptions:uint = 0;
        private var forceImport:DataGridCellEditor;

        public function DataGridColumn(_arg1:String=null){
            if (_arg1){
                dataField = _arg1;
                headerText = _arg1;
            };
        }
        public function get cellRenderer():Object{
            return (_cellRenderer);
        }
        public function set cellRenderer(_arg1:Object):void{
            _cellRenderer = _arg1;
            if (owner){
                owner.invalidate(InvalidationType.DATA);
            };
        }
        public function get headerRenderer():Object{
            return (_headerRenderer);
        }
        public function set headerRenderer(_arg1:Object):void{
            _headerRenderer = _arg1;
            if (owner){
                owner.invalidate(InvalidationType.DATA);
            };
        }
        public function get headerText():String{
            return (((_headerText)!=null) ? _headerText : dataField);
        }
        public function set headerText(_arg1:String):void{
            _headerText = _arg1;
            if (owner){
                owner.invalidate(InvalidationType.DATA);
            };
        }
        public function get imeMode():String{
            return (_imeMode);
        }
        public function set imeMode(_arg1:String):void{
            _imeMode = _arg1;
        }
        public function get labelFunction():Function{
            return (_labelFunction);
        }
        public function set labelFunction(_arg1:Function):void{
            if (_labelFunction == _arg1){
                return;
            };
            _labelFunction = _arg1;
            if (owner){
                owner.invalidate(InvalidationType.DATA);
            };
        }
        public function get minWidth():Number{
            return (_minWidth);
        }
        public function set minWidth(_arg1:Number):void{
            _minWidth = _arg1;
            if (_width < _arg1){
                _width = _arg1;
            };
            if (owner){
                owner.invalidate(InvalidationType.SIZE);
            };
        }
        public function get sortCompareFunction():Function{
            return (_sortCompareFunction);
        }
        public function set sortCompareFunction(_arg1:Function):void{
            _sortCompareFunction = _arg1;
        }
        public function get visible():Boolean{
            return (_visible);
        }
        public function set visible(_arg1:Boolean):void{
            if (_visible != _arg1){
                _visible = _arg1;
                if (owner){
                    owner.invalidate(InvalidationType.SIZE);
                };
            };
        }
        public function get width():Number{
            return (_width);
        }
        public function set width(_arg1:Number):void{
            var _local2:Boolean;
            explicitWidth = _arg1;
            if (owner != null){
                _local2 = resizable;
                resizable = false;
                owner.resizeColumn(colNum, _arg1);
                resizable = _local2;
            } else {
                _width = _arg1;
            };
        }
        public function setWidth(_arg1:Number):void{
            _width = _arg1;
        }
        public function itemToLabel(_arg1:Object):String{
            var data:* = _arg1;
            if (!data){
                return (" ");
            };
            if (labelFunction != null){
                return (labelFunction(data));
            };
            if (owner.labelFunction != null){
                return (owner.labelFunction(data, this));
            };
            if ((((typeof(data) == "object")) || ((typeof(data) == "xml")))){
                try {
                    data = data[dataField];
                } catch(e:Error) {
                    data = null;
                };
            };
            if ((data is String)){
                return (String(data));
            };
            try {
                return (data.toString());
            } catch(e:Error) {
            };
            return (" ");
        }
        public function toString():String{
            return ("[object DataGridColumn]");
        }

    }
}//package fl.controls.dataGridClasses 
﻿package fl.transitions.easing {

    public class Strong {

        public static function easeIn(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            _arg1 = (_arg1 / _arg4);
            return (((((((_arg3 * _arg1) * _arg1) * _arg1) * _arg1) * _arg1) + _arg2));
        }
        public static function easeOut(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            _arg1 = ((_arg1 / _arg4) - 1);
            return (((_arg3 * (((((_arg1 * _arg1) * _arg1) * _arg1) * _arg1) + 1)) + _arg2));
        }
        public static function easeInOut(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            _arg1 = (_arg1 / (_arg4 / 2));
            if (_arg1 < 1){
                return ((((((((_arg3 / 2) * _arg1) * _arg1) * _arg1) * _arg1) * _arg1) + _arg2));
            };
            _arg1 = (_arg1 - 2);
            return ((((_arg3 / 2) * (((((_arg1 * _arg1) * _arg1) * _arg1) * _arg1) + 2)) + _arg2));
        }

    }
}//package fl.transitions.easing 
﻿package fl.transitions {
    import flash.events.*;

    public class TweenEvent extends Event {

        public static const MOTION_START:String = "motionStart";
        public static const MOTION_STOP:String = "motionStop";
        public static const MOTION_FINISH:String = "motionFinish";
        public static const MOTION_CHANGE:String = "motionChange";
        public static const MOTION_RESUME:String = "motionResume";
        public static const MOTION_LOOP:String = "motionLoop";

        public var time:Number = NaN;
        public var position:Number = NaN;

        public function TweenEvent(_arg1:String, _arg2:Number, _arg3:Number, _arg4:Boolean=false, _arg5:Boolean=false){
            super(_arg1, _arg4, _arg5);
            this.time = _arg2;
            this.position = _arg3;
        }
        override public function clone():Event{
            return (new TweenEvent(this.type, this.time, this.position, this.bubbles, this.cancelable));
        }

    }
}//package fl.transitions 
﻿package fl.transitions {
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;

    public class Tween extends EventDispatcher {

        protected static var _mc:MovieClip = new MovieClip();

        public var isPlaying:Boolean = false;
        public var obj:Object = null;
        public var prop:String = "";
        public var func:Function;
        public var begin:Number = NaN;
        public var change:Number = NaN;
        public var useSeconds:Boolean = false;
        public var prevTime:Number = NaN;
        public var prevPos:Number = NaN;
        public var looping:Boolean = false;
        private var _duration:Number = NaN;
        private var _time:Number = NaN;
        private var _fps:Number = NaN;
        private var _position:Number = NaN;
        private var _startTime:Number = NaN;
        private var _intervalID:uint = 0;
        private var _finish:Number = NaN;
        private var _timer:Timer = null;

        public function Tween(_arg1:Object, _arg2:String, _arg3:Function, _arg4:Number, _arg5:Number, _arg6:Number, _arg7:Boolean=false){
            this.func = function (_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
                return ((((_arg3 * _arg1) / _arg4) + _arg2));
            };
            super();
            if (!arguments.length){
                return;
            };
            this.obj = _arg1;
            this.prop = _arg2;
            this.begin = _arg4;
            this.position = _arg4;
            this.duration = _arg6;
            this.useSeconds = _arg7;
            if ((_arg3 is Function)){
                this.func = _arg3;
            };
            this.finish = _arg5;
            this._timer = new Timer(100);
            this.start();
        }
        public function get time():Number{
            return (this._time);
        }
        public function set time(_arg1:Number):void{
            this.prevTime = this._time;
            if (_arg1 > this.duration){
                if (this.looping){
                    this.rewind((_arg1 - this._duration));
                    this.update();
                    this.dispatchEvent(new TweenEvent(TweenEvent.MOTION_LOOP, this._time, this._position));
                } else {
                    if (this.useSeconds){
                        this._time = this._duration;
                        this.update();
                    };
                    this.stop();
                    this.dispatchEvent(new TweenEvent(TweenEvent.MOTION_FINISH, this._time, this._position));
                };
            } else {
                if (_arg1 < 0){
                    this.rewind();
                    this.update();
                } else {
                    this._time = _arg1;
                    this.update();
                };
            };
        }
        public function get duration():Number{
            return (this._duration);
        }
        public function set duration(_arg1:Number):void{
            this._duration = ((_arg1)<=0) ? Infinity : _arg1;
        }
        public function get FPS():Number{
            return (this._fps);
        }
        public function set FPS(_arg1:Number):void{
            var _local2:Boolean = this.isPlaying;
            this.stopEnterFrame();
            this._fps = _arg1;
            if (_local2){
                this.startEnterFrame();
            };
        }
        public function get position():Number{
            return (this.getPosition(this._time));
        }
        public function set position(_arg1:Number):void{
            this.setPosition(_arg1);
        }
        public function getPosition(_arg1:Number=NaN):Number{
            if (isNaN(_arg1)){
                _arg1 = this._time;
            };
            return (this.func(_arg1, this.begin, this.change, this._duration));
        }
        public function setPosition(_arg1:Number):void{
            this.prevPos = this._position;
            if (this.prop.length){
                this.obj[this.prop] = (this._position = _arg1);
            };
            this.dispatchEvent(new TweenEvent(TweenEvent.MOTION_CHANGE, this._time, this._position));
        }
        public function get finish():Number{
            return ((this.begin + this.change));
        }
        public function set finish(_arg1:Number):void{
            this.change = (_arg1 - this.begin);
        }
        public function continueTo(_arg1:Number, _arg2:Number):void{
            this.begin = this.position;
            this.finish = _arg1;
            if (!isNaN(_arg2)){
                this.duration = _arg2;
            };
            this.start();
        }
        public function yoyo():void{
            this.continueTo(this.begin, this.time);
        }
        protected function startEnterFrame():void{
            var _local1:Number;
            if (isNaN(this._fps)){
                _mc.addEventListener(Event.ENTER_FRAME, this.onEnterFrame, false, 0, true);
            } else {
                _local1 = (1000 / this._fps);
                this._timer.delay = _local1;
                this._timer.addEventListener(TimerEvent.TIMER, this.timerHandler, false, 0, true);
                this._timer.start();
            };
            this.isPlaying = true;
        }
        protected function stopEnterFrame():void{
            if (isNaN(this._fps)){
                _mc.removeEventListener(Event.ENTER_FRAME, this.onEnterFrame);
            } else {
                this._timer.stop();
            };
            this.isPlaying = false;
        }
        public function start():void{
            this.rewind();
            this.startEnterFrame();
            this.dispatchEvent(new TweenEvent(TweenEvent.MOTION_START, this._time, this._position));
        }
        public function stop():void{
            this.stopEnterFrame();
            this.dispatchEvent(new TweenEvent(TweenEvent.MOTION_STOP, this._time, this._position));
        }
        public function resume():void{
            this.fixTime();
            this.startEnterFrame();
            this.dispatchEvent(new TweenEvent(TweenEvent.MOTION_RESUME, this._time, this._position));
        }
        public function rewind(_arg1:Number=0):void{
            this._time = _arg1;
            this.fixTime();
            this.update();
        }
        public function fforward():void{
            this.time = this._duration;
            this.fixTime();
        }
        public function nextFrame():void{
            if (this.useSeconds){
                this.time = ((getTimer() - this._startTime) / 1000);
            } else {
                this.time = (this._time + 1);
            };
        }
        protected function onEnterFrame(_arg1:Event):void{
            this.nextFrame();
        }
        protected function timerHandler(_arg1:TimerEvent):void{
            this.nextFrame();
            _arg1.updateAfterEvent();
        }
        public function prevFrame():void{
            if (!this.useSeconds){
                this.time = (this._time - 1);
            };
        }
        private function fixTime():void{
            if (this.useSeconds){
                this._startTime = (getTimer() - (this._time * 1000));
            };
        }
        private function update():void{
            this.setPosition(this.getPosition(this._time));
        }

    }
}//package fl.transitions 
﻿package fl.motion {
    import flash.display.*;
    import flash.geom.*;

    public class Color extends ColorTransform {

        private var _tintColor:Number = 0;
        private var _tintMultiplier:Number = 0;

        public function Color(_arg1:Number=1, _arg2:Number=1, _arg3:Number=1, _arg4:Number=1, _arg5:Number=0, _arg6:Number=0, _arg7:Number=0, _arg8:Number=0){
            super(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8);
        }
        public static function fromXML(_arg1:XML):Color{
            return (Color(new (Color)().parseXML(_arg1)));
        }
        public static function interpolateTransform(_arg1:ColorTransform, _arg2:ColorTransform, _arg3:Number):ColorTransform{
            var _local4:Number = (1 - _arg3);
            var _local5:ColorTransform = new ColorTransform(((_arg1.redMultiplier * _local4) + (_arg2.redMultiplier * _arg3)), ((_arg1.greenMultiplier * _local4) + (_arg2.greenMultiplier * _arg3)), ((_arg1.blueMultiplier * _local4) + (_arg2.blueMultiplier * _arg3)), ((_arg1.alphaMultiplier * _local4) + (_arg2.alphaMultiplier * _arg3)), ((_arg1.redOffset * _local4) + (_arg2.redOffset * _arg3)), ((_arg1.greenOffset * _local4) + (_arg2.greenOffset * _arg3)), ((_arg1.blueOffset * _local4) + (_arg2.blueOffset * _arg3)), ((_arg1.alphaOffset * _local4) + (_arg2.alphaOffset * _arg3)));
            return (_local5);
        }
        public static function interpolateColor(_arg1:uint, _arg2:uint, _arg3:Number):uint{
            var _local4:Number = (1 - _arg3);
            var _local5:uint = ((_arg1 >> 24) & 0xFF);
            var _local6:uint = ((_arg1 >> 16) & 0xFF);
            var _local7:uint = ((_arg1 >> 8) & 0xFF);
            var _local8:uint = (_arg1 & 0xFF);
            var _local9:uint = ((_arg2 >> 24) & 0xFF);
            var _local10:uint = ((_arg2 >> 16) & 0xFF);
            var _local11:uint = ((_arg2 >> 8) & 0xFF);
            var _local12:uint = (_arg2 & 0xFF);
            var _local13:uint = ((_local5 * _local4) + (_local9 * _arg3));
            var _local14:uint = ((_local6 * _local4) + (_local10 * _arg3));
            var _local15:uint = ((_local7 * _local4) + (_local11 * _arg3));
            var _local16:uint = ((_local8 * _local4) + (_local12 * _arg3));
            var _local17:uint = ((((_local13 << 24) | (_local14 << 16)) | (_local15 << 8)) | _local16);
            return (_local17);
        }

        public function get brightness():Number{
            return (((this.redOffset) ? (1 - this.redMultiplier) : (this.redMultiplier - 1)));
        }
        public function set brightness(_arg1:Number):void{
            if (_arg1 > 1){
                _arg1 = 1;
            } else {
                if (_arg1 < -1){
                    _arg1 = -1;
                };
            };
            var _local2:Number = (1 - Math.abs(_arg1));
            var _local3:Number = 0;
            if (_arg1 > 0){
                _local3 = (_arg1 * 0xFF);
            };
            this.redMultiplier = (this.greenMultiplier = (this.blueMultiplier = _local2));
            this.redOffset = (this.greenOffset = (this.blueOffset = _local3));
        }
        public function setTint(_arg1:uint, _arg2:Number):void{
            this._tintColor = _arg1;
            this._tintMultiplier = _arg2;
            this.redMultiplier = (this.greenMultiplier = (this.blueMultiplier = (1 - _arg2)));
            var _local3:uint = ((_arg1 >> 16) & 0xFF);
            var _local4:uint = ((_arg1 >> 8) & 0xFF);
            var _local5:uint = (_arg1 & 0xFF);
            this.redOffset = Math.round((_local3 * _arg2));
            this.greenOffset = Math.round((_local4 * _arg2));
            this.blueOffset = Math.round((_local5 * _arg2));
        }
        public function get tintColor():uint{
            return (this._tintColor);
        }
        public function set tintColor(_arg1:uint):void{
            this.setTint(_arg1, this.tintMultiplier);
        }
        private function deriveTintColor():uint{
            var _local1:Number = (1 / this.tintMultiplier);
            var _local2:uint = Math.round((this.redOffset * _local1));
            var _local3:uint = Math.round((this.greenOffset * _local1));
            var _local4:uint = Math.round((this.blueOffset * _local1));
            var _local5:uint = (((_local2 << 16) | (_local3 << 8)) | _local4);
            return (_local5);
        }
        public function get tintMultiplier():Number{
            return (this._tintMultiplier);
        }
        public function set tintMultiplier(_arg1:Number):void{
            this.setTint(this.tintColor, _arg1);
        }
        private function parseXML(_arg1:XML=null):Color{
            var _local3:XML;
            var _local4:String;
            var _local5:uint;
            if (!_arg1){
                return (this);
            };
            var _local2:XML = _arg1.elements()[0];
            if (!_local2){
                return (this);
            };
            for each (_local3 in _local2.attributes()) {
                _local4 = _local3.localName();
                if (_local4 == "tintColor"){
                    _local5 = (Number(_local3.toString()) as uint);
                    this.tintColor = _local5;
                } else {
                    this[_local4] = Number(_local3.toString());
                };
            };
            return (this);
        }

    }
}//package fl.motion 
﻿package fl.core {

    public class InvalidationType {

        public static const ALL:String = "all";
        public static const SIZE:String = "size";
        public static const STYLES:String = "styles";
        public static const RENDERER_STYLES:String = "rendererStyles";
        public static const STATE:String = "state";
        public static const DATA:String = "data";
        public static const SCROLL:String = "scroll";
        public static const SELECTED:String = "selected";

    }
}//package fl.core 
﻿package fl.core {
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.text.*;
    import flash.system.*;
    import fl.managers.*;
    import fl.events.*;

    public class UIComponent extends Sprite {

        public static var inCallLaterPhase:Boolean = false;
        private static var defaultStyles:Object = {
            focusRectSkin:"focusRectSkin",
            focusRectPadding:2,
            textFormat:new TextFormat("_sans", 11, 0, false, false, false, "", "", TextFormatAlign.LEFT, 0, 0, 0, 0),
            disabledTextFormat:new TextFormat("_sans", 11, 0x999999, false, false, false, "", "", TextFormatAlign.LEFT, 0, 0, 0, 0),
            defaultTextFormat:new TextFormat("_sans", 11, 0, false, false, false, "", "", TextFormatAlign.LEFT, 0, 0, 0, 0),
            defaultDisabledTextFormat:new TextFormat("_sans", 11, 0x999999, false, false, false, "", "", TextFormatAlign.LEFT, 0, 0, 0, 0)
        };
        private static var focusManagers:Dictionary = new Dictionary(true);
        private static var focusManagerUsers:Dictionary = new Dictionary(true);
        public static var createAccessibilityImplementation:Function;

        public const version:String = "3.0.3.1";

        public var focusTarget:IFocusManagerComponent;
        protected var isLivePreview:Boolean = false;
        private var tempText:TextField;
        protected var instanceStyles:Object;
        protected var sharedStyles:Object;
        protected var callLaterMethods:Dictionary;
        protected var invalidateFlag:Boolean = false;
        protected var _enabled:Boolean = true;
        protected var invalidHash:Object;
        protected var uiFocusRect:DisplayObject;
        protected var isFocused:Boolean = false;
        private var _focusEnabled:Boolean = true;
        private var _mouseFocusEnabled:Boolean = true;
        protected var _width:Number;
        protected var _height:Number;
        protected var _x:Number;
        protected var _y:Number;
        protected var startWidth:Number;
        protected var startHeight:Number;
        protected var _imeMode:String = null;
        protected var _oldIMEMode:String = null;
        protected var errorCaught:Boolean = false;
        protected var _inspector:Boolean = false;

        public function UIComponent(){
            instanceStyles = {};
            sharedStyles = {};
            invalidHash = {};
            callLaterMethods = new Dictionary();
            StyleManager.registerInstance(this);
            configUI();
            invalidate(InvalidationType.ALL);
            tabEnabled = (this is IFocusManagerComponent);
            focusRect = false;
            if (tabEnabled){
                addEventListener(FocusEvent.FOCUS_IN, focusInHandler);
                addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);
                addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);
                addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);
            };
            initializeFocusManager();
            addEventListener(Event.ENTER_FRAME, hookAccessibility, false, 0, true);
        }
        public static function getStyleDefinition():Object{
            return (defaultStyles);
        }
        public static function mergeStyles(... _args):Object{
            var _local5:Object;
            var _local6:String;
            var _local2:Object = {};
            var _local3:uint = _args.length;
            var _local4:uint;
            while (_local4 < _local3) {
                _local5 = _args[_local4];
                for (_local6 in _local5) {
                    if (_local2[_local6] != null){
                    } else {
                        _local2[_local6] = _args[_local4][_local6];
                    };
                };
                _local4++;
            };
            return (_local2);
        }

        public function get componentInspectorSetting():Boolean{
            return (_inspector);
        }
        public function set componentInspectorSetting(_arg1:Boolean):void{
            _inspector = _arg1;
            if (_inspector){
                beforeComponentParameters();
            } else {
                afterComponentParameters();
            };
        }
        protected function beforeComponentParameters():void{
        }
        protected function afterComponentParameters():void{
        }
        public function get enabled():Boolean{
            return (_enabled);
        }
        public function set enabled(_arg1:Boolean):void{
            if (_arg1 == _enabled){
                return;
            };
            _enabled = _arg1;
            invalidate(InvalidationType.STATE);
        }
        public function setSize(_arg1:Number, _arg2:Number):void{
            _width = _arg1;
            _height = _arg2;
            invalidate(InvalidationType.SIZE);
            dispatchEvent(new ComponentEvent(ComponentEvent.RESIZE, false));
        }
        override public function get width():Number{
            return (_width);
        }
        override public function set width(_arg1:Number):void{
            if (_width == _arg1){
                return;
            };
            setSize(_arg1, height);
        }
        override public function get height():Number{
            return (_height);
        }
        override public function set height(_arg1:Number):void{
            if (_height == _arg1){
                return;
            };
            setSize(width, _arg1);
        }
        public function setStyle(_arg1:String, _arg2:Object):void{
            if ((((instanceStyles[_arg1] === _arg2)) && (!((_arg2 is TextFormat))))){
                return;
            };
            instanceStyles[_arg1] = _arg2;
            invalidate(InvalidationType.STYLES);
        }
        public function clearStyle(_arg1:String):void{
            setStyle(_arg1, null);
        }
        public function getStyle(_arg1:String):Object{
            return (instanceStyles[_arg1]);
        }
        public function move(_arg1:Number, _arg2:Number):void{
            _x = _arg1;
            _y = _arg2;
            super.x = Math.round(_arg1);
            super.y = Math.round(_arg2);
            dispatchEvent(new ComponentEvent(ComponentEvent.MOVE));
        }
        override public function get x():Number{
            return (((isNaN(_x)) ? super.x : _x));
        }
        override public function set x(_arg1:Number):void{
            move(_arg1, _y);
        }
        override public function get y():Number{
            return (((isNaN(_y)) ? super.y : _y));
        }
        override public function set y(_arg1:Number):void{
            move(_x, _arg1);
        }
        override public function get scaleX():Number{
            return ((width / startWidth));
        }
        override public function set scaleX(_arg1:Number):void{
            setSize((startWidth * _arg1), height);
        }
        override public function get scaleY():Number{
            return ((height / startHeight));
        }
        override public function set scaleY(_arg1:Number):void{
            setSize(width, (startHeight * _arg1));
        }
        protected function getScaleY():Number{
            return (super.scaleY);
        }
        protected function setScaleY(_arg1:Number):void{
            super.scaleY = _arg1;
        }
        protected function getScaleX():Number{
            return (super.scaleX);
        }
        protected function setScaleX(_arg1:Number):void{
            super.scaleX = _arg1;
        }
        override public function get visible():Boolean{
            return (super.visible);
        }
        override public function set visible(_arg1:Boolean):void{
            if (super.visible == _arg1){
                return;
            };
            super.visible = _arg1;
            var _local2:String = ((_arg1) ? ComponentEvent.SHOW : ComponentEvent.HIDE);
            dispatchEvent(new ComponentEvent(_local2, true));
        }
        public function validateNow():void{
            invalidate(InvalidationType.ALL, false);
            draw();
        }
        public function invalidate(_arg1:String="all", _arg2:Boolean=true):void{
            invalidHash[_arg1] = true;
            if (_arg2){
                this.callLater(draw);
            };
        }
        public function setSharedStyle(_arg1:String, _arg2:Object):void{
            if ((((sharedStyles[_arg1] === _arg2)) && (!((_arg2 is TextFormat))))){
                return;
            };
            sharedStyles[_arg1] = _arg2;
            if (instanceStyles[_arg1] == null){
                invalidate(InvalidationType.STYLES);
            };
        }
        public function get focusEnabled():Boolean{
            return (_focusEnabled);
        }
        public function set focusEnabled(_arg1:Boolean):void{
            _focusEnabled = _arg1;
        }
        public function get mouseFocusEnabled():Boolean{
            return (_mouseFocusEnabled);
        }
        public function set mouseFocusEnabled(_arg1:Boolean):void{
            _mouseFocusEnabled = _arg1;
        }
        public function get focusManager():IFocusManager{
            var o:* = this;
            while (o) {
                if (UIComponent.focusManagers[o] != null){
                    return (IFocusManager(UIComponent.focusManagers[o]));
                };
                try {
                    o = o.parent;
                } catch(se:SecurityError) {
                    return (null);
                };
            };
            return (null);
        }
        public function set focusManager(_arg1:IFocusManager):void{
            UIComponent.focusManagers[this] = _arg1;
        }
        public function drawFocus(_arg1:Boolean):void{
            var _local2:Number;
            isFocused = _arg1;
            if (((!((uiFocusRect == null))) && (contains(uiFocusRect)))){
                removeChild(uiFocusRect);
                uiFocusRect = null;
            };
            if (_arg1){
                uiFocusRect = (getDisplayObjectInstance(getStyleValue("focusRectSkin")) as Sprite);
                if (uiFocusRect == null){
                    return;
                };
                _local2 = Number(getStyleValue("focusRectPadding"));
                uiFocusRect.x = -(_local2);
                uiFocusRect.y = -(_local2);
                uiFocusRect.width = (width + (_local2 * 2));
                uiFocusRect.height = (height + (_local2 * 2));
                addChildAt(uiFocusRect, 0);
            };
        }
        public function setFocus():void{
            if (stage){
                stage.focus = this;
            };
        }
        public function getFocus():InteractiveObject{
            if (stage){
                return (stage.focus);
            };
            return (null);
        }
        protected function setIMEMode(_arg1:Boolean){
            var enabled:* = _arg1;
            if (_imeMode != null){
                if (enabled){
                    IME.enabled = true;
                    _oldIMEMode = IME.conversionMode;
                    try {
                        if (((!(errorCaught)) && (!((IME.conversionMode == IMEConversionMode.UNKNOWN))))){
                            IME.conversionMode = _imeMode;
                        };
                        errorCaught = false;
                    } catch(e:Error) {
                        errorCaught = true;
                        throw (new Error(("IME mode not supported: " + _imeMode)));
                    };
                } else {
                    if (((!((IME.conversionMode == IMEConversionMode.UNKNOWN))) && (!((_oldIMEMode == IMEConversionMode.UNKNOWN))))){
                        IME.conversionMode = _oldIMEMode;
                    };
                    IME.enabled = false;
                };
            };
        }
        public function drawNow():void{
            draw();
        }
        protected function configUI():void{
            isLivePreview = checkLivePreview();
            var _local1:Number = rotation;
            rotation = 0;
            var _local2:Number = super.width;
            var _local3:Number = super.height;
            var _local4 = 1;
            super.scaleY = _local4;
            super.scaleX = _local4;
            setSize(_local2, _local3);
            move(super.x, super.y);
            rotation = _local1;
            startWidth = _local2;
            startHeight = _local3;
            if (numChildren > 0){
                removeChildAt(0);
            };
        }
        protected function checkLivePreview():Boolean{
            var className:* = null;
            if (parent == null){
                return (false);
            };
            try {
                className = getQualifiedClassName(parent);
            } catch(e:Error) {
            };
            return ((className == "fl.livepreview::LivePreviewParent"));
        }
        protected function isInvalid(_arg1:String, ... _args):Boolean{
            if (((invalidHash[_arg1]) || (invalidHash[InvalidationType.ALL]))){
                return (true);
            };
            while (_args.length > 0) {
                if (invalidHash[_args.pop()]){
                    return (true);
                };
            };
            return (false);
        }
        protected function validate():void{
            invalidHash = {};
        }
        protected function draw():void{
            if (isInvalid(InvalidationType.SIZE, InvalidationType.STYLES)){
                if (((isFocused) && (focusManager.showFocusIndicator))){
                    drawFocus(true);
                };
            };
            validate();
        }
        protected function getDisplayObjectInstance(_arg1:Object):DisplayObject{
            var skin:* = _arg1;
            var classDef:* = null;
            if ((skin is Class)){
                return ((new (skin)() as DisplayObject));
            };
            if ((skin is DisplayObject)){
                (skin as DisplayObject).x = 0;
                (skin as DisplayObject).y = 0;
                return ((skin as DisplayObject));
            };
            try {
                classDef = getDefinitionByName(skin.toString());
            } catch(e:Error) {
                try {
                    classDef = (loaderInfo.applicationDomain.getDefinition(skin.toString()) as Object);
                } catch(e:Error) {
                };
            };
            if (classDef == null){
                return (null);
            };
            return ((new (classDef)() as DisplayObject));
        }
        protected function getStyleValue(_arg1:String):Object{
            return (((instanceStyles[_arg1])==null) ? sharedStyles[_arg1] : instanceStyles[_arg1]);
        }
        protected function copyStylesToChild(_arg1:UIComponent, _arg2:Object):void{
            var _local3:String;
            for (_local3 in _arg2) {
                _arg1.setStyle(_local3, getStyleValue(_arg2[_local3]));
            };
        }
        protected function callLater(_arg1:Function):void{
            var fn:* = _arg1;
            if (inCallLaterPhase){
                return;
            };
            callLaterMethods[fn] = true;
            if (stage != null){
                try {
                    stage.addEventListener(Event.RENDER, callLaterDispatcher, false, 0, true);
                    stage.invalidate();
                } catch(se:SecurityError) {
                    addEventListener(Event.ENTER_FRAME, callLaterDispatcher, false, 0, true);
                };
            } else {
                addEventListener(Event.ADDED_TO_STAGE, callLaterDispatcher, false, 0, true);
            };
        }
        private function callLaterDispatcher(_arg1:Event):void{
            var method:* = null;
            var event:* = _arg1;
            if (event.type == Event.ADDED_TO_STAGE){
                try {
                    removeEventListener(Event.ADDED_TO_STAGE, callLaterDispatcher);
                    stage.addEventListener(Event.RENDER, callLaterDispatcher, false, 0, true);
                    stage.invalidate();
                    return;
                } catch(se1:SecurityError) {
                    addEventListener(Event.ENTER_FRAME, callLaterDispatcher, false, 0, true);
                };
            } else {
                event.target.removeEventListener(Event.RENDER, callLaterDispatcher);
                event.target.removeEventListener(Event.ENTER_FRAME, callLaterDispatcher);
                try {
                    if (stage == null){
                        addEventListener(Event.ADDED_TO_STAGE, callLaterDispatcher, false, 0, true);
                        return;
                    };
                } catch(se2:SecurityError) {
                };
            };
            inCallLaterPhase = true;
            var methods:* = callLaterMethods;
            for (method in methods) {
                method();
                delete methods[method];
            };
            inCallLaterPhase = false;
        }
        private function initializeFocusManager():void{
            var _local1:IFocusManager;
            var _local2:Dictionary;
            if (stage == null){
                addEventListener(Event.ADDED_TO_STAGE, addedHandler, false, 0, true);
            } else {
                createFocusManager();
                _local1 = focusManager;
                if (_local1 != null){
                    _local2 = focusManagerUsers[_local1];
                    if (_local2 == null){
                        _local2 = new Dictionary(true);
                        focusManagerUsers[_local1] = _local2;
                    };
                    _local2[this] = true;
                };
            };
            addEventListener(Event.REMOVED_FROM_STAGE, removedHandler);
        }
        private function addedHandler(_arg1:Event):void{
            removeEventListener(Event.ADDED_TO_STAGE, addedHandler);
            initializeFocusManager();
        }
        private function removedHandler(_arg1:Event):void{
            var _local3:Dictionary;
            var _local4:Boolean;
            var _local5:*;
            var _local6:*;
            var _local7:IFocusManager;
            removeEventListener(Event.REMOVED_FROM_STAGE, removedHandler);
            addEventListener(Event.ADDED_TO_STAGE, addedHandler);
            var _local2:IFocusManager = focusManager;
            if (_local2 != null){
                _local3 = focusManagerUsers[_local2];
                if (_local3 != null){
                    delete _local3[this];
                    _local4 = true;
                    for (_local5 in _local3) {
                        _local4 = false;
                        break;
                    };
                    if (_local4){
                        delete focusManagerUsers[_local2];
                        _local3 = null;
                    };
                };
                if (_local3 == null){
                    _local2.deactivate();
                    for (_local6 in focusManagers) {
                        _local7 = focusManagers[_local6];
                        if (_local2 == _local7){
                            delete focusManagers[_local6];
                        };
                    };
                };
            };
        }
        protected function createFocusManager():void{
            var stageAccessOK:* = true;
            try {
                stage.getChildAt(0);
            } catch(se:SecurityError) {
                stageAccessOK = false;
            };
            var myTopLevel:* = null;
            if (stageAccessOK){
                myTopLevel = stage;
            } else {
                myTopLevel = this;
                try {
                    while (myTopLevel.parent != null) {
                        myTopLevel = myTopLevel.parent;
                    };
                } catch(se:SecurityError) {
                };
            };
            if (focusManagers[myTopLevel] == null){
                focusManagers[myTopLevel] = new FocusManager(myTopLevel);
            };
        }
        protected function isOurFocus(_arg1:DisplayObject):Boolean{
            return ((_arg1 == this));
        }
        protected function focusInHandler(_arg1:FocusEvent):void{
            var _local2:IFocusManager;
            if (isOurFocus((_arg1.target as DisplayObject))){
                _local2 = focusManager;
                if (((_local2) && (_local2.showFocusIndicator))){
                    drawFocus(true);
                    isFocused = true;
                };
            };
        }
        protected function focusOutHandler(_arg1:FocusEvent):void{
            if (isOurFocus((_arg1.target as DisplayObject))){
                drawFocus(false);
                isFocused = false;
            };
        }
        protected function keyDownHandler(_arg1:KeyboardEvent):void{
        }
        protected function keyUpHandler(_arg1:KeyboardEvent):void{
        }
        protected function hookAccessibility(_arg1:Event):void{
            removeEventListener(Event.ENTER_FRAME, hookAccessibility);
            initializeAccessibility();
        }
        protected function initializeAccessibility():void{
            if (UIComponent.createAccessibilityImplementation != null){
                UIComponent.createAccessibilityImplementation(this);
            };
        }

    }
}//package fl.core 
﻿package fl.core {
    import flash.display.*;

    public dynamic class ComponentShim extends MovieClip {

    }
}//package fl.core 
﻿package fl.managers {
    import fl.controls.*;
    import flash.display.*;

    public interface IFocusManager {

        function get defaultButton():Button;
        function set defaultButton(_arg1:Button):void;
        function get defaultButtonEnabled():Boolean;
        function set defaultButtonEnabled(_arg1:Boolean):void;
        function get nextTabIndex():int;
        function get showFocusIndicator():Boolean;
        function set showFocusIndicator(_arg1:Boolean):void;
        function getFocus():InteractiveObject;
        function setFocus(_arg1:InteractiveObject):void;
        function showFocus():void;
        function hideFocus():void;
        function activate():void;
        function deactivate():void;
        function findFocusManagerComponent(_arg1:InteractiveObject):InteractiveObject;
        function getNextFocusManagerComponent(_arg1:Boolean=false):InteractiveObject;
        function get form():DisplayObjectContainer;
        function set form(_arg1:DisplayObjectContainer):void;

    }
}//package fl.managers 
﻿package fl.managers {

    public interface IFocusManagerComponent {

        function get focusEnabled():Boolean;
        function set focusEnabled(_arg1:Boolean):void;
        function get mouseFocusEnabled():Boolean;
        function get tabEnabled():Boolean;
        function get tabIndex():int;
        function setFocus():void;
        function drawFocus(_arg1:Boolean):void;

    }
}//package fl.managers 
﻿package fl.managers {
    import fl.core.*;
    import flash.utils.*;
    import flash.text.*;

    public class StyleManager {

        private static var _instance:StyleManager;

        private var styleToClassesHash:Object;
        private var classToInstancesDict:Dictionary;
        private var classToStylesDict:Dictionary;
        private var classToDefaultStylesDict:Dictionary;
        private var globalStyles:Object;

        public function StyleManager(){
            styleToClassesHash = {};
            classToInstancesDict = new Dictionary(true);
            classToStylesDict = new Dictionary(true);
            classToDefaultStylesDict = new Dictionary(true);
            globalStyles = UIComponent.getStyleDefinition();
        }
        private static function getInstance(){
            if (_instance == null){
                _instance = new (StyleManager)();
            };
            return (_instance);
        }
        public static function registerInstance(_arg1:UIComponent):void{
            var target:* = null;
            var defaultStyles:* = null;
            var styleToClasses:* = null;
            var n:* = null;
            var instance:* = _arg1;
            var inst:* = getInstance();
            var classDef:* = getClassDef(instance);
            if (classDef == null){
                return;
            };
            if (inst.classToInstancesDict[classDef] == null){
                inst.classToInstancesDict[classDef] = new Dictionary(true);
                target = classDef;
                while (defaultStyles == null) {
                    if (target["getStyleDefinition"] != null){
                        defaultStyles = target["getStyleDefinition"]();
                        break;
                    };
                    try {
                        target = (instance.loaderInfo.applicationDomain.getDefinition(getQualifiedSuperclassName(target)) as Class);
                    } catch(err:Error) {
                        try {
                            target = (getDefinitionByName(getQualifiedSuperclassName(target)) as Class);
                        } catch(e:Error) {
                            defaultStyles = UIComponent.getStyleDefinition();
                            break;
                        };
                    };
                };
                styleToClasses = inst.styleToClassesHash;
                for (n in defaultStyles) {
                    if (styleToClasses[n] == null){
                        styleToClasses[n] = new Dictionary(true);
                    };
                    styleToClasses[n][classDef] = true;
                };
                inst.classToDefaultStylesDict[classDef] = defaultStyles;
                if (inst.classToStylesDict[classDef] == null){
                    inst.classToStylesDict[classDef] = {};
                };
            };
            inst.classToInstancesDict[classDef][instance] = true;
            setSharedStyles(instance);
        }
        private static function setSharedStyles(_arg1:UIComponent):void{
            var _local5:String;
            var _local2:StyleManager = getInstance();
            var _local3:Class = getClassDef(_arg1);
            var _local4:Object = _local2.classToDefaultStylesDict[_local3];
            for (_local5 in _local4) {
                _arg1.setSharedStyle(_local5, getSharedStyle(_arg1, _local5));
            };
        }
        private static function getSharedStyle(_arg1:UIComponent, _arg2:String):Object{
            var _local3:Class = getClassDef(_arg1);
            var _local4:StyleManager = getInstance();
            var _local5:Object = _local4.classToStylesDict[_local3][_arg2];
            if (_local5 != null){
                return (_local5);
            };
            _local5 = _local4.globalStyles[_arg2];
            if (_local5 != null){
                return (_local5);
            };
            return (_local4.classToDefaultStylesDict[_local3][_arg2]);
        }
        public static function getComponentStyle(_arg1:Object, _arg2:String):Object{
            var _local3:Class = getClassDef(_arg1);
            var _local4:Object = getInstance().classToStylesDict[_local3];
            return (((_local4)==null) ? null : _local4[_arg2]);
        }
        public static function clearComponentStyle(_arg1:Object, _arg2:String):void{
            var _local3:Class = getClassDef(_arg1);
            var _local4:Object = getInstance().classToStylesDict[_local3];
            if (((!((_local4 == null))) && (!((_local4[_arg2] == null))))){
                delete _local4[_arg2];
                invalidateComponentStyle(_local3, _arg2);
            };
        }
        public static function setComponentStyle(_arg1:Object, _arg2:String, _arg3:Object):void{
            var _local4:Class = getClassDef(_arg1);
            var _local5:Object = getInstance().classToStylesDict[_local4];
            if (_local5 == null){
                _local5 = (getInstance().classToStylesDict[_local4] = {});
            };
            if (_local5 == _arg3){
                return;
            };
            _local5[_arg2] = _arg3;
            invalidateComponentStyle(_local4, _arg2);
        }
        private static function getClassDef(_arg1:Object):Class{
            var component:* = _arg1;
            if ((component is Class)){
                return ((component as Class));
            };
            try {
                return ((getDefinitionByName(getQualifiedClassName(component)) as Class));
            } catch(e:Error) {
                if ((component is UIComponent)){
                    try {
                        return ((component.loaderInfo.applicationDomain.getDefinition(getQualifiedClassName(component)) as Class));
                    } catch(e:Error) {
                    };
                };
            };
            return (null);
        }
        private static function invalidateStyle(_arg1:String):void{
            var _local3:Object;
            var _local2:Dictionary = getInstance().styleToClassesHash[_arg1];
            if (_local2 == null){
                return;
            };
            for (_local3 in _local2) {
                invalidateComponentStyle(Class(_local3), _arg1);
            };
        }
        private static function invalidateComponentStyle(_arg1:Class, _arg2:String):void{
            var _local4:Object;
            var _local5:UIComponent;
            var _local3:Dictionary = getInstance().classToInstancesDict[_arg1];
            if (_local3 == null){
                return;
            };
            for (_local4 in _local3) {
                _local5 = (_local4 as UIComponent);
                if (_local5 == null){
                } else {
                    _local5.setSharedStyle(_arg2, getSharedStyle(_local5, _arg2));
                };
            };
        }
        public static function setStyle(_arg1:String, _arg2:Object):void{
            var _local3:Object = getInstance().globalStyles;
            if ((((_local3[_arg1] === _arg2)) && (!((_arg2 is TextFormat))))){
                return;
            };
            _local3[_arg1] = _arg2;
            invalidateStyle(_arg1);
        }
        public static function clearStyle(_arg1:String):void{
            setStyle(_arg1, null);
        }
        public static function getStyle(_arg1:String):Object{
            return (getInstance().globalStyles[_arg1]);
        }

    }
}//package fl.managers 
﻿package fl.managers {

    public interface IFocusManagerGroup {

        function get groupName():String;
        function set groupName(_arg1:String):void;
        function get selected():Boolean;
        function set selected(_arg1:Boolean):void;

    }
}//package fl.managers 
﻿package fl.managers {
    import fl.core.*;
    import fl.controls.*;
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.text.*;
    import flash.ui.*;

    public class FocusManager implements IFocusManager {

        private var _form:DisplayObjectContainer;
        private var focusableObjects:Dictionary;
        private var focusableCandidates:Array;
        private var activated:Boolean = false;
        private var calculateCandidates:Boolean = true;
        private var lastFocus:InteractiveObject;
        private var _showFocusIndicator:Boolean = true;
        private var lastAction:String;
        private var defButton:Button;
        private var _defaultButton:Button;
        private var _defaultButtonEnabled:Boolean = true;

        public function FocusManager(_arg1:DisplayObjectContainer){
            focusableObjects = new Dictionary(true);
            if (_arg1 != null){
                _form = _arg1;
                activate();
            };
        }
        private function addedHandler(_arg1:Event):void{
            var _local2:DisplayObject = DisplayObject(_arg1.target);
            if (_local2.stage){
                addFocusables(DisplayObject(_arg1.target));
            };
        }
        private function removedHandler(_arg1:Event):void{
            var _local2:int;
            var _local4:InteractiveObject;
            var _local3:DisplayObject = DisplayObject(_arg1.target);
            if ((((_local3 is IFocusManagerComponent)) && ((focusableObjects[_local3] == true)))){
                if (_local3 == lastFocus){
                    IFocusManagerComponent(lastFocus).drawFocus(false);
                    lastFocus = null;
                };
                _local3.removeEventListener(Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler, false);
                delete focusableObjects[_local3];
                calculateCandidates = true;
            } else {
                if ((((_local3 is InteractiveObject)) && ((focusableObjects[_local3] == true)))){
                    _local4 = (_local3 as InteractiveObject);
                    if (_local4){
                        if (_local4 == lastFocus){
                            lastFocus = null;
                        };
                        delete focusableObjects[_local4];
                        calculateCandidates = true;
                    };
                    _local3.addEventListener(Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler, false, 0, true);
                };
            };
            removeFocusables(_local3);
        }
        private function addFocusables(_arg1:DisplayObject, _arg2:Boolean=false):void{
            var focusable:* = null;
            var io:* = null;
            var doc:* = null;
            var docParent:* = null;
            var i:* = 0;
            var child:* = null;
            var o:* = _arg1;
            var skipTopLevel:Boolean = _arg2;
            if (!skipTopLevel){
                if ((o is IFocusManagerComponent)){
                    focusable = IFocusManagerComponent(o);
                    if (focusable.focusEnabled){
                        if (((focusable.tabEnabled) && (isTabVisible(o)))){
                            focusableObjects[o] = true;
                            calculateCandidates = true;
                        };
                        o.addEventListener(Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler, false, 0, true);
                        o.addEventListener(Event.TAB_INDEX_CHANGE, tabIndexChangeHandler, false, 0, true);
                    };
                } else {
                    if ((o is InteractiveObject)){
                        io = (o as InteractiveObject);
                        if (((((io) && (io.tabEnabled))) && ((findFocusManagerComponent(io) == io)))){
                            focusableObjects[io] = true;
                            calculateCandidates = true;
                        };
                        io.addEventListener(Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler, false, 0, true);
                        io.addEventListener(Event.TAB_INDEX_CHANGE, tabIndexChangeHandler, false, 0, true);
                    };
                };
            };
            if ((o is DisplayObjectContainer)){
                doc = DisplayObjectContainer(o);
                o.addEventListener(Event.TAB_CHILDREN_CHANGE, tabChildrenChangeHandler, false, 0, true);
                docParent = null;
                try {
                    docParent = doc.parent;
                } catch(se:SecurityError) {
                    docParent = null;
                };
                if ((((((doc is Stage)) || ((docParent is Stage)))) || (doc.tabChildren))){
                    i = 0;
                    while (i < doc.numChildren) {
                        try {
                            child = doc.getChildAt(i);
                            if (child != null){
                                addFocusables(doc.getChildAt(i));
                            };
                        } catch(error:SecurityError) {
                        };
                        i = (i + 1);
                    };
                };
            };
        }
        private function removeFocusables(_arg1:DisplayObject):void{
            var _local2:Object;
            var _local3:DisplayObject;
            if ((_arg1 is DisplayObjectContainer)){
                _arg1.removeEventListener(Event.TAB_CHILDREN_CHANGE, tabChildrenChangeHandler, false);
                _arg1.removeEventListener(Event.TAB_INDEX_CHANGE, tabIndexChangeHandler, false);
                for (_local2 in focusableObjects) {
                    _local3 = DisplayObject(_local2);
                    if (DisplayObjectContainer(_arg1).contains(_local3)){
                        if (_local3 == lastFocus){
                            lastFocus = null;
                        };
                        _local3.removeEventListener(Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler, false);
                        delete focusableObjects[_local2];
                        calculateCandidates = true;
                    };
                };
            };
        }
        private function isTabVisible(_arg1:DisplayObject):Boolean{
            var p:* = null;
            var o:* = _arg1;
            try {
                p = o.parent;
                while (((((p) && (!((p is Stage))))) && (!(((p.parent) && ((p.parent is Stage))))))) {
                    if (!p.tabChildren){
                        return (false);
                    };
                    p = p.parent;
                };
            } catch(se:SecurityError) {
            };
            return (true);
        }
        private function isValidFocusCandidate(_arg1:DisplayObject, _arg2:String):Boolean{
            var _local3:IFocusManagerGroup;
            if (!isEnabledAndVisible(_arg1)){
                return (false);
            };
            if ((_arg1 is IFocusManagerGroup)){
                _local3 = IFocusManagerGroup(_arg1);
                if (_arg2 == _local3.groupName){
                    return (false);
                };
            };
            return (true);
        }
        private function isEnabledAndVisible(_arg1:DisplayObject):Boolean{
            var formParent:* = null;
            var tf:* = null;
            var sb:* = null;
            var o:* = _arg1;
            try {
                formParent = DisplayObject(form).parent;
                while (o != formParent) {
                    if ((o is UIComponent)){
                        if (!UIComponent(o).enabled){
                            return (false);
                        };
                    } else {
                        if ((o is TextField)){
                            tf = TextField(o);
                            if ((((tf.type == TextFieldType.DYNAMIC)) || (!(tf.selectable)))){
                                return (false);
                            };
                        } else {
                            if ((o is SimpleButton)){
                                sb = SimpleButton(o);
                                if (!sb.enabled){
                                    return (false);
                                };
                            };
                        };
                    };
                    if (!o.visible){
                        return (false);
                    };
                    o = o.parent;
                };
            } catch(se:SecurityError) {
            };
            return (true);
        }
        private function tabEnabledChangeHandler(_arg1:Event):void{
            calculateCandidates = true;
            var _local2:InteractiveObject = InteractiveObject(_arg1.target);
            var _local3 = (focusableObjects[_local2] == true);
            if (_local2.tabEnabled){
                if (((!(_local3)) && (isTabVisible(_local2)))){
                    if (!(_local2 is IFocusManagerComponent)){
                        _local2.focusRect = false;
                    };
                    focusableObjects[_local2] = true;
                };
            } else {
                if (_local3){
                    delete focusableObjects[_local2];
                };
            };
        }
        private function tabIndexChangeHandler(_arg1:Event):void{
            calculateCandidates = true;
        }
        private function tabChildrenChangeHandler(_arg1:Event):void{
            if (_arg1.target != _arg1.currentTarget){
                return;
            };
            calculateCandidates = true;
            var _local2:DisplayObjectContainer = DisplayObjectContainer(_arg1.target);
            if (_local2.tabChildren){
                addFocusables(_local2, true);
            } else {
                removeFocusables(_local2);
            };
        }
        public function activate():void{
            if (activated){
                return;
            };
            addFocusables(form);
            form.addEventListener(Event.ADDED, addedHandler, false, 0, true);
            form.addEventListener(Event.REMOVED, removedHandler, false, 0, true);
            try {
                form.stage.addEventListener(FocusEvent.MOUSE_FOCUS_CHANGE, mouseFocusChangeHandler, false, 0, true);
                form.stage.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler, false, 0, true);
                form.stage.addEventListener(Event.ACTIVATE, activateHandler, false, 0, true);
                form.stage.addEventListener(Event.DEACTIVATE, deactivateHandler, false, 0, true);
            } catch(se:SecurityError) {
                form.addEventListener(FocusEvent.MOUSE_FOCUS_CHANGE, mouseFocusChangeHandler, false, 0, true);
                form.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler, false, 0, true);
                form.addEventListener(Event.ACTIVATE, activateHandler, false, 0, true);
                form.addEventListener(Event.DEACTIVATE, deactivateHandler, false, 0, true);
            };
            form.addEventListener(FocusEvent.FOCUS_IN, focusInHandler, true, 0, true);
            form.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler, true, 0, true);
            form.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler, false, 0, true);
            form.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler, true, 0, true);
            activated = true;
            if (lastFocus){
                setFocus(lastFocus);
            };
        }
        public function deactivate():void{
            if (!activated){
                return;
            };
            focusableObjects = new Dictionary(true);
            focusableCandidates = null;
            lastFocus = null;
            defButton = null;
            form.removeEventListener(Event.ADDED, addedHandler, false);
            form.removeEventListener(Event.REMOVED, removedHandler, false);
            try {
                form.stage.removeEventListener(FocusEvent.MOUSE_FOCUS_CHANGE, mouseFocusChangeHandler, false);
                form.stage.removeEventListener(FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler, false);
                form.stage.removeEventListener(Event.ACTIVATE, activateHandler, false);
                form.stage.removeEventListener(Event.DEACTIVATE, deactivateHandler, false);
            } catch(se:SecurityError) {
            };
            form.removeEventListener(FocusEvent.MOUSE_FOCUS_CHANGE, mouseFocusChangeHandler, false);
            form.removeEventListener(FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler, false);
            form.removeEventListener(Event.ACTIVATE, activateHandler, false);
            form.removeEventListener(Event.DEACTIVATE, deactivateHandler, false);
            form.removeEventListener(FocusEvent.FOCUS_IN, focusInHandler, true);
            form.removeEventListener(FocusEvent.FOCUS_OUT, focusOutHandler, true);
            form.removeEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler, false);
            form.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler, true);
            activated = false;
        }
        private function focusInHandler(_arg1:FocusEvent):void{
            var _local3:Button;
            if (!activated){
                return;
            };
            var _local2:InteractiveObject = InteractiveObject(_arg1.target);
            if (form.contains(_local2)){
                lastFocus = findFocusManagerComponent(InteractiveObject(_local2));
                if ((lastFocus is Button)){
                    _local3 = Button(lastFocus);
                    if (defButton){
                        defButton.emphasized = false;
                        defButton = _local3;
                        _local3.emphasized = true;
                    };
                } else {
                    if (((defButton) && (!((defButton == _defaultButton))))){
                        defButton.emphasized = false;
                        defButton = _defaultButton;
                        _defaultButton.emphasized = true;
                    };
                };
            };
        }
        private function focusOutHandler(_arg1:FocusEvent):void{
            if (!activated){
                return;
            };
            var _local2:InteractiveObject = (_arg1.target as InteractiveObject);
        }
        private function activateHandler(_arg1:Event):void{
            if (!activated){
                return;
            };
            var _local2:InteractiveObject = InteractiveObject(_arg1.target);
            if (lastFocus){
                if ((lastFocus is IFocusManagerComponent)){
                    IFocusManagerComponent(lastFocus).setFocus();
                } else {
                    form.stage.focus = lastFocus;
                };
            };
            lastAction = "ACTIVATE";
        }
        private function deactivateHandler(_arg1:Event):void{
            if (!activated){
                return;
            };
            var _local2:InteractiveObject = InteractiveObject(_arg1.target);
        }
        private function mouseFocusChangeHandler(_arg1:FocusEvent):void{
            if (!activated){
                return;
            };
            if ((_arg1.relatedObject is TextField)){
                return;
            };
            _arg1.preventDefault();
        }
        private function keyFocusChangeHandler(_arg1:FocusEvent):void{
            if (!activated){
                return;
            };
            showFocusIndicator = true;
            if ((((((_arg1.keyCode == Keyboard.TAB)) || ((_arg1.keyCode == 0)))) && (!(_arg1.isDefaultPrevented())))){
                setFocusToNextObject(_arg1);
                _arg1.preventDefault();
            };
        }
        private function keyDownHandler(_arg1:KeyboardEvent):void{
            if (!activated){
                return;
            };
            if (_arg1.keyCode == Keyboard.TAB){
                lastAction = "KEY";
                if (calculateCandidates){
                    sortFocusableObjects();
                    calculateCandidates = false;
                };
            };
            if (((((((defaultButtonEnabled) && ((_arg1.keyCode == Keyboard.ENTER)))) && (defaultButton))) && (defButton.enabled))){
                sendDefaultButtonEvent();
            };
        }
        private function mouseDownHandler(_arg1:MouseEvent):void{
            if (!activated){
                return;
            };
            if (_arg1.isDefaultPrevented()){
                return;
            };
            var _local2:InteractiveObject = getTopLevelFocusTarget(InteractiveObject(_arg1.target));
            if (!_local2){
                return;
            };
            showFocusIndicator = false;
            if (((((!((_local2 == lastFocus))) || ((lastAction == "ACTIVATE")))) && (!((_local2 is TextField))))){
                setFocus(_local2);
            };
            lastAction = "MOUSEDOWN";
        }
        public function get defaultButton():Button{
            return (_defaultButton);
        }
        public function set defaultButton(_arg1:Button):void{
            var _local2:Button = ((_arg1) ? Button(_arg1) : null);
            if (_local2 != _defaultButton){
                if (_defaultButton){
                    _defaultButton.emphasized = false;
                };
                if (defButton){
                    defButton.emphasized = false;
                };
                _defaultButton = _local2;
                defButton = _local2;
                if (_local2){
                    _local2.emphasized = true;
                };
            };
        }
        public function sendDefaultButtonEvent():void{
            defButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
        }
        private function setFocusToNextObject(_arg1:FocusEvent):void{
            if (!hasFocusableObjects()){
                return;
            };
            var _local2:InteractiveObject = getNextFocusManagerComponent(_arg1.shiftKey);
            if (_local2){
                setFocus(_local2);
            };
        }
        private function hasFocusableObjects():Boolean{
            var _local1:Object;
            for (_local1 in focusableObjects) {
                return (true);
            };
            return (false);
        }
        public function getNextFocusManagerComponent(_arg1:Boolean=false):InteractiveObject{
            var _local8:IFocusManagerGroup;
            if (!hasFocusableObjects()){
                return (null);
            };
            if (calculateCandidates){
                sortFocusableObjects();
                calculateCandidates = false;
            };
            var _local2:DisplayObject = form.stage.focus;
            _local2 = DisplayObject(findFocusManagerComponent(InteractiveObject(_local2)));
            var _local3 = "";
            if ((_local2 is IFocusManagerGroup)){
                _local8 = IFocusManagerGroup(_local2);
                _local3 = _local8.groupName;
            };
            var _local4:int = getIndexOfFocusedObject(_local2);
            var _local5:Boolean;
            var _local6:int = _local4;
            if (_local4 == -1){
                if (_arg1){
                    _local4 = focusableCandidates.length;
                };
                _local5 = true;
            };
            var _local7:int = getIndexOfNextObject(_local4, _arg1, _local5, _local3);
            return (findFocusManagerComponent(focusableCandidates[_local7]));
        }
        private function getIndexOfFocusedObject(_arg1:DisplayObject):int{
            var _local2:int = focusableCandidates.length;
            var _local3:int;
            _local3 = 0;
            while (_local3 < _local2) {
                if (focusableCandidates[_local3] == _arg1){
                    return (_local3);
                };
                _local3++;
            };
            return (-1);
        }
        private function getIndexOfNextObject(_arg1:int, _arg2:Boolean, _arg3:Boolean, _arg4:String):int{
            var _local7:DisplayObject;
            var _local8:IFocusManagerGroup;
            var _local9:int;
            var _local10:DisplayObject;
            var _local11:IFocusManagerGroup;
            var _local5:int = focusableCandidates.length;
            var _local6:int = _arg1;
            while (true) {
                if (_arg2){
                    _arg1--;
                } else {
                    _arg1++;
                };
                if (_arg3){
                    if (((_arg2) && ((_arg1 < 0)))){
                        break;
                    };
                    if (((!(_arg2)) && ((_arg1 == _local5)))){
                        break;
                    };
                } else {
                    _arg1 = ((_arg1 + _local5) % _local5);
                    if (_local6 == _arg1){
                        break;
                    };
                };
                if (isValidFocusCandidate(focusableCandidates[_arg1], _arg4)){
                    _local7 = DisplayObject(findFocusManagerComponent(focusableCandidates[_arg1]));
                    if ((_local7 is IFocusManagerGroup)){
                        _local8 = IFocusManagerGroup(_local7);
                        _local9 = 0;
                        while (_local9 < focusableCandidates.length) {
                            _local10 = focusableCandidates[_local9];
                            if ((_local10 is IFocusManagerGroup)){
                                _local11 = IFocusManagerGroup(_local10);
                                if ((((_local11.groupName == _local8.groupName)) && (_local11.selected))){
                                    _arg1 = _local9;
                                    break;
                                };
                            };
                            _local9++;
                        };
                    };
                    return (_arg1);
                };
            };
            return (_arg1);
        }
        private function sortFocusableObjects():void{
            var _local1:Object;
            var _local2:InteractiveObject;
            focusableCandidates = [];
            for (_local1 in focusableObjects) {
                _local2 = InteractiveObject(_local1);
                if (((((_local2.tabIndex) && (!(isNaN(Number(_local2.tabIndex)))))) && ((_local2.tabIndex > 0)))){
                    sortFocusableObjectsTabIndex();
                    return;
                };
                focusableCandidates.push(_local2);
            };
            focusableCandidates.sort(sortByDepth);
        }
        private function sortFocusableObjectsTabIndex():void{
            var _local1:Object;
            var _local2:InteractiveObject;
            focusableCandidates = [];
            for (_local1 in focusableObjects) {
                _local2 = InteractiveObject(_local1);
                if (((_local2.tabIndex) && (!(isNaN(Number(_local2.tabIndex)))))){
                    focusableCandidates.push(_local2);
                };
            };
            focusableCandidates.sort(sortByTabIndex);
        }
        private function sortByDepth(_arg1:InteractiveObject, _arg2:InteractiveObject):Number{
            var index:* = 0;
            var tmp:* = null;
            var tmp2:* = null;
            var aa:* = _arg1;
            var bb:* = _arg2;
            var val1:* = "";
            var val2:* = "";
            var zeros:* = "0000";
            var a:* = DisplayObject(aa);
            var b:* = DisplayObject(bb);
            try {
                while (((!((a == DisplayObject(form)))) && (a.parent))) {
                    index = getChildIndex(a.parent, a);
                    tmp = index.toString(16);
                    if (tmp.length < 4){
                        tmp2 = (zeros.substring(0, (4 - tmp.length)) + tmp);
                    };
                    val1 = (tmp2 + val1);
                    a = a.parent;
                };
            } catch(se1:SecurityError) {
            };
            try {
                while (((!((b == DisplayObject(form)))) && (b.parent))) {
                    index = getChildIndex(b.parent, b);
                    tmp = index.toString(16);
                    if (tmp.length < 4){
                        tmp2 = (zeros.substring(0, (4 - tmp.length)) + tmp);
                    };
                    val2 = (tmp2 + val2);
                    b = b.parent;
                };
            } catch(se2:SecurityError) {
            };
            return ((((val1 > val2)) ? 1 : (((val1 < val2)) ? -1 : 0)));
        }
        private function getChildIndex(_arg1:DisplayObjectContainer, _arg2:DisplayObject):int{
            return (_arg1.getChildIndex(_arg2));
        }
        private function sortByTabIndex(_arg1:InteractiveObject, _arg2:InteractiveObject):int{
            return ((((_arg1.tabIndex > _arg2.tabIndex)) ? 1 : (((_arg1.tabIndex < _arg2.tabIndex)) ? -1 : sortByDepth(_arg1, _arg2))));
        }
        public function get defaultButtonEnabled():Boolean{
            return (_defaultButtonEnabled);
        }
        public function set defaultButtonEnabled(_arg1:Boolean):void{
            _defaultButtonEnabled = _arg1;
        }
        public function get nextTabIndex():int{
            return (0);
        }
        public function get showFocusIndicator():Boolean{
            return (_showFocusIndicator);
        }
        public function set showFocusIndicator(_arg1:Boolean):void{
            _showFocusIndicator = _arg1;
        }
        public function get form():DisplayObjectContainer{
            return (_form);
        }
        public function set form(_arg1:DisplayObjectContainer):void{
            _form = _arg1;
        }
        public function getFocus():InteractiveObject{
            var _local1:InteractiveObject = form.stage.focus;
            return (findFocusManagerComponent(_local1));
        }
        public function setFocus(_arg1:InteractiveObject):void{
            if ((_arg1 is IFocusManagerComponent)){
                IFocusManagerComponent(_arg1).setFocus();
            } else {
                form.stage.focus = _arg1;
            };
        }
        public function showFocus():void{
        }
        public function hideFocus():void{
        }
        public function findFocusManagerComponent(_arg1:InteractiveObject):InteractiveObject{
            var component:* = _arg1;
            var p:* = component;
            try {
                while (component) {
                    if ((((component is IFocusManagerComponent)) && (IFocusManagerComponent(component).focusEnabled))){
                        return (component);
                    };
                    component = component.parent;
                };
            } catch(se:SecurityError) {
            };
            return (p);
        }
        private function getTopLevelFocusTarget(_arg1:InteractiveObject):InteractiveObject{
            var o:* = _arg1;
            try {
                while (o != InteractiveObject(form)) {
                    if ((((((((o is IFocusManagerComponent)) && (IFocusManagerComponent(o).focusEnabled))) && (IFocusManagerComponent(o).mouseFocusEnabled))) && (UIComponent(o).enabled))){
                        return (o);
                    };
                    o = o.parent;
                    if (o == null){
                        break;
                    };
                };
            } catch(se:SecurityError) {
            };
            return (null);
        }

    }
}//package fl.managers 
﻿package fl.display {
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.system.*;
    import flash.errors.*;

    public class ProLoaderInfo extends EventDispatcher {

        private var _proLoader:ProLoader;
        private var _realLI:LoaderInfo;
        private var _realContentLI:LoaderInfo;
        private var _rslPreloaderLoaded:Boolean;
        private var _doneProgressStalling:Boolean;
        private var _numAdded:int;
        var _lcRequestedContentParentSet:Boolean;

        public function ProLoaderInfo(_arg1:ProLoader){
            this._realContentLI = null;
            this._lcRequestedContentParentSet = false;
            this._rslPreloaderLoaded = false;
            this._doneProgressStalling = false;
            this._numAdded = 0;
            this._proLoader = _arg1;
            this._realLI = _arg1.realLoader.contentLoaderInfo;
            this._realLI.addEventListener(AsyncErrorEvent.ASYNC_ERROR, this.handleAsyncErrorEvent, false, 0, true);
            this._realLI.addEventListener(Event.COMPLETE, this.handleLoaderInfoEvent, false, 0, true);
            this._realLI.addEventListener(HTTPStatusEvent.HTTP_STATUS, this.handleLoaderInfoEvent, false, 0, true);
            this._realLI.addEventListener(Event.INIT, this.handleLoaderInfoEvent, false, 0, true);
            this._realLI.addEventListener(IOErrorEvent.IO_ERROR, this.handleLoaderInfoEvent, false, 0, true);
            this._realLI.addEventListener(Event.OPEN, this.handleLoaderInfoEvent, false, 0, true);
            this._realLI.addEventListener(ProgressEvent.PROGRESS, this.handleProgressEvent, false, 0, true);
            this._realLI.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.handleSecurityErrorEvent, false, 0, true);
            this._realLI.addEventListener(Event.UNLOAD, this.handleLoaderInfoEvent, false, 0, true);
        }
        function reset():void{
            this._realContentLI = null;
            this._rslPreloaderLoaded = false;
            this._doneProgressStalling = false;
            this._lcRequestedContentParentSet = false;
        }
        public function get actionScriptVersion():uint{
            return (this._realLI.actionScriptVersion);
        }
        public function get applicationDomain():ApplicationDomain{
            return (this._realLI.applicationDomain);
        }
        public function get bytes():ByteArray{
            return (this._realLI.bytes);
        }
        public function get bytesLoaded():uint{
            if ((((this._realLI.bytesLoaded >= this._realLI.bytesTotal)) && ((this._proLoader.content == null)))){
                return ((this._realLI.bytesTotal - 1));
            };
            return (this._realLI.bytesLoaded);
        }
        public function get bytesTotal():uint{
            return (this._realLI.bytesTotal);
        }
        public function get childAllowsParent():Boolean{
            return (this._realLI.childAllowsParent);
        }
        public function get childSandboxBridge():Object{
            if (this._realContentLI != null){
                return (this._realContentLI["childSandboxBridge"]);
            };
            return (this._realLI["childSandboxBridge"]);
        }
        public function set childSandboxBridge(_arg1:Object):void{
            if (this._realContentLI != null){
                this._realContentLI["childSandboxBridge"] = _arg1;
            } else {
                this._realLI["childSandboxBridge"] = _arg1;
            };
        }
        public function get content():DisplayObject{
            return (this._proLoader.content);
        }
        public function get contentType():String{
            return (this._realLI.contentType);
        }
        public function get frameRate():Number{
            return (this._realLI.frameRate);
        }
        public function get height():int{
            return (this._realLI.height);
        }
        public function get isURLInaccessible():Boolean{
            return (this._realLI.isURLInaccessible);
        }
        public function get loader():ProLoader{
            return (this._proLoader);
        }
        public function get loaderURL():String{
            return (this._realLI.loaderURL);
        }
        public function get parameters():Object{
            return (this._realLI.parameters);
        }
        public function get parentAllowsChild():Boolean{
            return (this._realLI.parentAllowsChild);
        }
        public function get parentSandboxBridge():Object{
            if (this._realContentLI != null){
                return (this._realContentLI["parentSandboxBridge"]);
            };
            return (this._realLI["parentSandboxBridge"]);
        }
        public function set parentSandboxBridge(_arg1:Object){
            if (this._realContentLI != null){
                this._realContentLI["parentSandboxBridge"] = _arg1;
            } else {
                this._realLI["parentSandboxBridge"] = _arg1;
            };
        }
        public function get sameDomain():Boolean{
            return (this._realLI.sameDomain);
        }
        public function get sharedEvents():EventDispatcher{
            if (this._realContentLI != null){
                return (this._realContentLI.sharedEvents);
            };
            return (this._realLI.sharedEvents);
        }
        public function get swfVersion():uint{
            return (this._realLI.swfVersion);
        }
        public function get url():String{
            return (this._realLI.url);
        }
        public function get width():int{
            return (this._realLI.width);
        }
        override public function dispatchEvent(_arg1:Event):Boolean{
            Error.throwError(IllegalOperationError, 2118);
            return (false);
        }
        private function handleAsyncErrorEvent(_arg1:AsyncErrorEvent):void{
            if (!this._lcRequestedContentParentSet){
                super.dispatchEvent(_arg1);
            };
        }
        private function handleLoaderInfoEvent(_arg1:Event):void{
            var theContent:* = null;
            var theName:* = null;
            var rslPreloader:* = null;
            var e:* = _arg1;
            switch (e.type){
                case HTTPStatusEvent.HTTP_STATUS:
                case IOErrorEvent.IO_ERROR:
                case Event.OPEN:
                case Event.UNLOAD:
                    super.dispatchEvent(e);
                    break;
                case Event.INIT:
                    if (!this._rslPreloaderLoaded){
                        try {
                            theContent = this._realLI.content;
                            theName = getQualifiedClassName(theContent);
                            if (theName.substr(-13) == "__Preloader__"){
                                rslPreloader = theContent["__rslPreloader"];
                                if (rslPreloader != null){
                                    theName = getQualifiedClassName(rslPreloader);
                                    if (theName == "fl.rsl::RSLPreloader"){
                                        this._rslPreloaderLoaded = true;
                                        this._numAdded = 0;
                                        theContent.addEventListener(Event.ADDED, this.handleAddedEvent, false, 0, true);
                                    };
                                };
                            };
                        } catch(err:Error) {
                            _rslPreloaderLoaded = false;
                        };
                    };
                    if (!this._rslPreloaderLoaded){
                        this._proLoader.loadDoneCallback(theContent);
                        if (((!(this._doneProgressStalling)) && ((this._realLI.bytesLoaded >= this._realLI.bytesTotal)))){
                            this._doneProgressStalling = true;
                            super.dispatchEvent(new ProgressEvent(ProgressEvent.PROGRESS, false, false, this._realLI.bytesLoaded, this._realLI.bytesTotal));
                        };
                        super.dispatchEvent(e);
                    };
                    break;
                case Event.COMPLETE:
                    if (!this._rslPreloaderLoaded){
                        super.dispatchEvent(e);
                    };
                    break;
            };
        }
        private function handleProgressEvent(_arg1:ProgressEvent):void{
            if (((this._doneProgressStalling) || ((_arg1.bytesLoaded < _arg1.bytesTotal)))){
                super.dispatchEvent(_arg1);
            };
        }
        private function handleSecurityErrorEvent(_arg1:SecurityErrorEvent):void{
            if (((!(this._lcRequestedContentParentSet)) || (!((_arg1.errorID == 2047))))){
                super.dispatchEvent(_arg1);
            };
        }
        private function handleAddedEvent(_arg1:Event):void{
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            var _local3:DisplayObjectContainer = (_arg1.currentTarget as DisplayObjectContainer);
            if (((((!((_local2 == null))) && (!((_local3 == null))))) && ((_local2.parent == _local3)))){
                this._numAdded++;
            };
            if (this._numAdded > 1){
                _arg1.currentTarget.removeEventListener(Event.ADDED, this.handleAddedEvent);
                if (this._proLoader.loadDoneCallback(_local2)){
                    if (((!(this._doneProgressStalling)) && ((this._realLI.bytesLoaded >= this._realLI.bytesTotal)))){
                        this._doneProgressStalling = true;
                        super.dispatchEvent(new ProgressEvent(ProgressEvent.PROGRESS, false, false, this._realLI.bytesLoaded, this._realLI.bytesTotal));
                    };
                    super.dispatchEvent(new Event(Event.INIT, false, false));
                    super.dispatchEvent(new Event(Event.COMPLETE, false, false));
                };
            };
        }
        function set realContentLoaderInfo(_arg1:LoaderInfo):void{
            var obj:* = null;
            var value:* = _arg1;
            this._realContentLI = value;
            this._realContentLI.addEventListener(Event.COMPLETE, this.handleRealContentEvent, false, 0, true);
            this._realContentLI.addEventListener(Event.INIT, this.handleRealContentEvent, false, 0, true);
            this._realContentLI.addEventListener(IOErrorEvent.IO_ERROR, this.handleLoaderInfoEvent, false, 0, true);
            this._realContentLI.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.handleSecurityErrorEvent, false, 0, true);
            this._rslPreloaderLoaded = true;
            if (this._realContentLI.hasOwnProperty("childSandboxBridge")){
                try {
                    obj = this._realLI["childSandboxBridge"];
                    if (obj != null){
                        this._realContentLI["childSandboxBridge"] = obj;
                    };
                } catch(se:SecurityError) {
                };
                try {
                    obj = this._realLI["parentSandboxBridge"];
                    if (obj != null){
                        this._realContentLI["parentSandboxBridge"] = obj;
                    };
                } catch(se:SecurityError) {
                };
            };
        }
        function get realContentLoaderInfo():LoaderInfo{
            return (this._realContentLI);
        }
        private function handleRealContentEvent(_arg1:Event):void{
            var d:* = null;
            var e:* = _arg1;
            if (e.type == Event.INIT){
                try {
                    d = this._realContentLI.content;
                } catch(se:SecurityError) {
                    d = null;
                };
                this._proLoader.loadDoneCallback(d);
                if (((!(this._doneProgressStalling)) && ((this._realLI.bytesLoaded >= this._realLI.bytesTotal)))){
                    this._doneProgressStalling = true;
                    super.dispatchEvent(new ProgressEvent(ProgressEvent.PROGRESS, false, false, this._realLI.bytesLoaded, this._realLI.bytesTotal));
                };
            };
            super.dispatchEvent(e);
        }

    }
}//package fl.display 
﻿package fl.display {
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.system.*;
    import flash.net.*;
    import fl.events.*;

    public class ProLoader extends Sprite {

        private var _cli:ProLoaderInfo;
        private var _loader:Loader;
        private var _realContentLoader:Loader;
        private var _loading:Boolean;
        private var _hasRequestedContentParentProp:Boolean;

        public function ProLoader(){
            this._loader = new Loader();
            this._loader.contentLoaderInfo.sharedEvents.addEventListener(ProLoaderRSLPreloaderSandboxEvent.PROLOADER_RSLPRELOADER_SANDBOX, this.handleProLoaderRSLPreloaderSandboxEvent, false, 0, true);
            super.addChild(this._loader);
            this._realContentLoader = null;
            this._cli = new ProLoaderInfo(this);
            this._loading = false;
            this._hasRequestedContentParentProp = false;
        }
        private function handleProLoaderRSLPreloaderSandboxEvent(_arg1:Object):void{
            var content:* = null;
            var e:* = _arg1;
            if (e.loaderInfo != null){
                try {
                    this._realContentLoader = e.loaderInfo.loader;
                } catch(se:SecurityError) {
                    _realContentLoader = null;
                };
                this._cli.realContentLoaderInfo = e.loaderInfo;
            } else {
                if (((!((e.shape == null))) && ((getQualifiedClassName(e.shape) == "flash.display::Shape")))){
                    try {
                        content = e.shape.parent;
                        if (content != null){
                            content.removeChild(e.shape);
                            if (super.numChildren < 2){
                                super.addChild(content);
                            };
                        };
                    } catch(se:SecurityError) {
                    };
                };
            };
        }
        function loadDoneCallback(_arg1:DisplayObject):Boolean{
            var p:* = null;
            var d:* = _arg1;
            if (!this._loading){
                this._loader.unload();
                return (false);
            };
            this._loading = false;
            if (d != null){
                try {
                    if (this._cli.realContentLoaderInfo == null){
                        if (d.loaderInfo.loader != this._loader){
                            this._realContentLoader = d.loaderInfo.loader;
                            this._cli.realContentLoaderInfo = this._realContentLoader.contentLoaderInfo;
                            if (this._hasRequestedContentParentProp){
                                p = (this._loader.content.parent as DisplayObjectContainer);
                                if ((((p == this)) || ((p == null)))){
                                    while (super.numChildren > 1) {
                                        super.removeChildAt(1);
                                    };
                                    super.addChild(d);
                                } else {
                                    p.addChildAt(d, p.getChildIndex(this._loader.content));
                                    p.removeChild(this._loader.content);
                                };
                            } else {
                                super.addChild(d);
                            };
                        } else {
                            if (((!(this._hasRequestedContentParentProp)) || (((this._cli._lcRequestedContentParentSet) && (!((d.parent == this))))))){
                                super.addChild(d);
                            };
                        };
                    } else {
                        if (this._hasRequestedContentParentProp){
                            if (d.parent == this){
                                while (super.numChildren > 2) {
                                    super.removeChildAt(1);
                                };
                            };
                        } else {
                            super.addChild(d);
                        };
                    };
                } catch(se:SecurityError) {
                };
            };
            return (true);
        }
        public function get realLoader():Loader{
            return (this._loader.contentLoaderInfo.loader);
        }
        public function get realContentLoader():Loader{
            return (((this._realContentLoader)==null) ? null : this._realContentLoader.contentLoaderInfo.loader);
        }
        public function get content():DisplayObject{
            if (super.numChildren > 1){
                return (super.getChildAt(1));
            };
            if (this._realContentLoader){
                return (this._realContentLoader.content);
            };
            return (this._loader.content);
        }
        public function get contentLoaderInfo():ProLoaderInfo{
            return (this._cli);
        }
        public function close():void{
            if (this._loading){
                this._loading = false;
                try {
                    this._loader.close();
                } catch(err:Error) {
                };
            } else {
                this._loader.close();
            };
        }
        public function load(_arg1:URLRequest, _arg2:LoaderContext=null):void{
            var _local3:DisplayObjectContainer;
            while (super.numChildren > 1) {
                super.removeChildAt(1);
            };
            this._realContentLoader = null;
            this._hasRequestedContentParentProp = false;
            this._cli.reset();
            if (_arg2 == null){
                _arg2 = new LoaderContext();
            };
            if (_arg2.hasOwnProperty("requestedContentParent")){
                this._hasRequestedContentParentProp = true;
                _local3 = _arg2["requestedContentParent"];
                if (_local3 == null){
                    _arg2["requestedContentParent"] = this;
                    this._cli._lcRequestedContentParentSet = true;
                };
            };
            this._loader.load(_arg1, _arg2);
            this._loading = true;
        }
        public function loadBytes(_arg1:ByteArray, _arg2:LoaderContext=null):void{
            var _local3:DisplayObjectContainer;
            while (super.numChildren > 1) {
                super.removeChildAt(1);
            };
            this._realContentLoader = null;
            this._hasRequestedContentParentProp = false;
            this._cli.reset();
            if (_arg2 == null){
                _arg2 = new LoaderContext();
            };
            if (_arg2.hasOwnProperty("requestedContentParent")){
                this._hasRequestedContentParentProp = true;
                _local3 = _arg2["requestedContentParent"];
                if (_local3 == null){
                    _arg2["requestedContentParent"] = this;
                    this._cli._lcRequestedContentParentSet = true;
                };
            };
            this._loader.loadBytes(_arg1, _arg2);
            this._loading = true;
        }
        public function loadFilePromise(_arg1:Object, _arg2:LoaderContext=null):void{
            var _local3:DisplayObjectContainer;
            while (super.numChildren > 1) {
                super.removeChildAt(1);
            };
            this._realContentLoader = null;
            this._hasRequestedContentParentProp = false;
            this._cli.reset();
            if (_arg2 == null){
                _arg2 = new LoaderContext();
            };
            if (_arg2.hasOwnProperty("requestedContentParent")){
                this._hasRequestedContentParentProp = true;
                _local3 = _arg2["requestedContentParent"];
                if (_local3 == null){
                    _arg2["requestedContentParent"] = this;
                    this._cli._lcRequestedContentParentSet = true;
                };
            };
            var _local4 = this._loader;
            _local4["loadFilePromise"](_arg1, _arg2);
            this._loading = true;
        }
        public function unload():void{
            if (!this._loading){
                while (super.numChildren > 1) {
                    super.removeChildAt(1);
                };
                this._loader.unload();
            };
        }
        public function unloadAndStop(_arg1:Boolean=true):void{
            if (!this._loading){
                while (super.numChildren > 1) {
                    super.removeChildAt(1);
                };
                var _local2 = this._loader;
                _local2["unloadAndStop"](_arg1);
            };
        }
        override public function addChild(_arg1:DisplayObject):DisplayObject{
            if (((((!((this._realContentLoader == null))) && ((this._realContentLoader.content == _arg1)))) || ((this._loader.content == _arg1)))){
                return (super.addChild(_arg1));
            };
            throw (new Error("Error #2069: The ProLoader class does not implement this method."));
        }
        override public function addChildAt(_arg1:DisplayObject, _arg2:int):DisplayObject{
            throw (new Error("Error #2069: The ProLoader class does not implement this method."));
        }
        override public function removeChild(_arg1:DisplayObject):DisplayObject{
            throw (new Error("Error #2069: The ProLoader class does not implement this method."));
        }
        override public function removeChildAt(_arg1:int):DisplayObject{
            throw (new Error("Error #2069: The ProLoader class does not implement this method."));
        }
        override public function setChildIndex(_arg1:DisplayObject, _arg2:int):void{
            throw (new Error("Error #2069: The ProLoader class does not implement this method."));
        }
        override public function get numChildren():int{
            return ((super.numChildren - 1));
        }
        override public function getChildAt(_arg1:int):DisplayObject{
            if (_arg1 >= 0){
                _arg1++;
            };
            return (super.getChildAt(_arg1));
        }
        override public function getChildIndex(_arg1:DisplayObject):int{
            return ((super.getChildIndex(_arg1) - 1));
        }
        public function get uncaughtErrorEvents():EventDispatcher{
            return (this._loader["uncaughtErrorEvents"]);
        }

    }
}//package fl.display 
﻿package fl.containers {
    import fl.core.*;
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import fl.display.*;
    import flash.system.*;
    import flash.net.*;
    import fl.events.*;

    public class UILoader extends UIComponent {

        private static var defaultStyles:Object = {};

        protected var _scaleContent:Boolean = true;
        protected var _autoLoad:Boolean = true;
        protected var contentInited:Boolean = false;
        protected var _source:Object;
        protected var loader:ProLoader;
        protected var _maintainAspectRatio:Boolean = true;
        protected var contentClip:Sprite;

        public static function getStyleDefinition():Object{
            return (defaultStyles);
        }

        override public function setSize(_arg1:Number, _arg2:Number):void{
            if (((!(_scaleContent)) && ((_width > 0)))){
                return;
            };
            super.setSize(_arg1, _arg2);
        }
        public function get autoLoad():Boolean{
            return (_autoLoad);
        }
        public function set autoLoad(_arg1:Boolean):void{
            _autoLoad = _arg1;
            if (((((((_autoLoad) && ((loader == null)))) && (!((_source == null))))) && (!((_source == ""))))){
                load();
            };
        }
        public function get scaleContent():Boolean{
            return (_scaleContent);
        }
        public function set scaleContent(_arg1:Boolean):void{
            if (_scaleContent == _arg1){
                return;
            };
            _scaleContent = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        public function get maintainAspectRatio():Boolean{
            return (_maintainAspectRatio);
        }
        public function set maintainAspectRatio(_arg1:Boolean):void{
            _maintainAspectRatio = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        public function get bytesLoaded():uint{
            return ((((((loader == null)) || ((loader.contentLoaderInfo == null)))) ? 0 : loader.contentLoaderInfo.bytesLoaded));
        }
        public function get bytesTotal():uint{
            return ((((((loader == null)) || ((loader.contentLoaderInfo == null)))) ? 0 : loader.contentLoaderInfo.bytesTotal));
        }
        public function loadBytes(_arg1:ByteArray, _arg2:LoaderContext=null):void{
            var bytes:* = _arg1;
            var context = _arg2;
            _unload();
            initLoader();
            try {
                loader.loadBytes(bytes, context);
            } catch(error) {
                throw (error);
            };
        }
        public function get content():DisplayObject{
            if (loader != null){
                return (loader.content);
            };
            if (contentClip.numChildren){
                return (contentClip.getChildAt(0));
            };
            return (null);
        }
        public function get source():Object{
            return (_source);
        }
        public function set source(_arg1:Object):void{
            if (_arg1 == ""){
                return;
            };
            _source = _arg1;
            _unload();
            if (((_autoLoad) && (!((_source == null))))){
                load();
            };
        }
        public function get percentLoaded():Number{
            return (((bytesTotal)<=0) ? 0 : ((bytesLoaded / bytesTotal) * 100));
        }
        public function load(_arg1:URLRequest=null, _arg2:LoaderContext=null):void{
            _unload();
            if ((((((_arg1 == null)) || ((_arg1.url == null)))) && ((((_source == null)) || ((_source == "")))))){
                return;
            };
            var _local3:DisplayObject = getDisplayObjectInstance(source);
            if (_local3 != null){
                contentClip.addChild(_local3);
                contentInited = true;
                invalidate(InvalidationType.SIZE);
                return;
            };
            if (_arg1 == null){
                _arg1 = new URLRequest(_source.toString());
            };
            if (_arg2 == null){
                _arg2 = new LoaderContext(false, ApplicationDomain.currentDomain);
            };
            initLoader();
            loader.load(_arg1, _arg2);
        }
        public function unload():void{
            _source = null;
            _unload(true);
        }
        public function close():void{
            try {
                loader.close();
            } catch(error) {
                throw (error);
            };
        }
        protected function _unload(_arg1:Boolean=false):void{
            var throwError:Boolean = _arg1;
            if (loader != null){
                clearLoadEvents();
                contentClip.removeChild(loader);
                try {
                    loader.close();
                } catch(e:Error) {
                };
                try {
                    loader.unload();
                } catch(e) {
                    if (throwError){
                        throw (e);
                    };
                };
                loader = null;
                return;
            };
            contentInited = false;
            if (contentClip.numChildren){
                contentClip.removeChildAt(0);
            };
        }
        protected function initLoader():void{
            loader = new ProLoader();
            loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, handleError, false, 0, true);
            loader.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR, handleError, false, 0, true);
            loader.contentLoaderInfo.addEventListener(Event.OPEN, passEvent, false, 0, true);
            loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, passEvent, false, 0, true);
            loader.contentLoaderInfo.addEventListener(Event.COMPLETE, handleComplete, false, 0, true);
            loader.contentLoaderInfo.addEventListener(Event.INIT, handleInit, false, 0, true);
            loader.contentLoaderInfo.addEventListener(HTTPStatusEvent.HTTP_STATUS, passEvent, false, 0, true);
            contentClip.addChild(loader);
        }
        protected function handleComplete(_arg1:Event):void{
            clearLoadEvents();
            passEvent(_arg1);
        }
        protected function passEvent(_arg1:Event):void{
            dispatchEvent(_arg1);
        }
        protected function handleError(_arg1:Event):void{
            passEvent(_arg1);
            clearLoadEvents();
            loader.contentLoaderInfo.removeEventListener(Event.INIT, handleInit);
        }
        protected function handleInit(_arg1:Event):void{
            loader.contentLoaderInfo.removeEventListener(Event.INIT, handleInit);
            contentInited = true;
            passEvent(_arg1);
            invalidate(InvalidationType.SIZE);
        }
        protected function clearLoadEvents():void{
            loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, handleError);
            loader.contentLoaderInfo.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, handleError);
            loader.contentLoaderInfo.removeEventListener(Event.OPEN, passEvent);
            loader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, passEvent);
            loader.contentLoaderInfo.removeEventListener(HTTPStatusEvent.HTTP_STATUS, passEvent);
            loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, handleComplete);
        }
        override protected function draw():void{
            if (isInvalid(InvalidationType.SIZE)){
                drawLayout();
            };
            super.draw();
        }
        protected function drawLayout():void{
            var _local2:Number;
            var _local3:Number;
            var _local6:ProLoaderInfo;
            if (!contentInited){
                return;
            };
            var _local1:Boolean;
            if (loader){
                _local6 = loader.contentLoaderInfo;
                _local2 = _local6.width;
                _local3 = _local6.height;
            } else {
                _local2 = contentClip.width;
                _local3 = contentClip.height;
            };
            var _local4:Number = _width;
            var _local5:Number = _height;
            if (!_scaleContent){
                _width = contentClip.width;
                _height = contentClip.height;
            } else {
                sizeContent(contentClip, _local2, _local3, _width, _height);
            };
            if (((!((_local4 == _width))) || (!((_local5 == _height))))){
                dispatchEvent(new ComponentEvent(ComponentEvent.RESIZE, true));
            };
        }
        protected function sizeContent(_arg1:DisplayObject, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Number):void{
            var _local8:Number;
            var _local9:Number;
            var _local6:Number = _arg4;
            var _local7:Number = _arg5;
            if (_maintainAspectRatio){
                _local8 = (_arg4 / _arg5);
                _local9 = (_arg2 / _arg3);
                if (_local8 < _local9){
                    _local7 = (_local6 / _local9);
                } else {
                    _local6 = (_local7 * _local9);
                };
            };
            _arg1.width = _local6;
            _arg1.height = _local7;
            _arg1.x = ((_arg4 / 2) - (_local6 / 2));
            _arg1.y = ((_arg5 / 2) - (_local7 / 2));
        }
        override protected function configUI():void{
            super.configUI();
            contentClip = new Sprite();
            addChild(contentClip);
        }

    }
}//package fl.containers 
﻿package fl.containers {
    import fl.core.*;
    import fl.controls.*;
    import flash.display.*;
    import flash.events.*;
    import fl.display.*;
    import flash.system.*;
    import flash.net.*;
    import fl.managers.*;
    import fl.events.*;
    import flash.ui.*;

    public class ScrollPane extends BaseScrollPane implements IFocusManagerComponent {

        private static var defaultStyles:Object = {
            upSkin:"ScrollPane_upSkin",
            disabledSkin:"ScrollPane_disabledSkin",
            focusRectSkin:null,
            focusRectPadding:null,
            contentPadding:0
        };

        protected var _source:Object = "";
        protected var _scrollDrag:Boolean = false;
        protected var contentClip:Sprite;
        protected var loader:ProLoader;
        protected var xOffset:Number;
        protected var yOffset:Number;
        protected var scrollDragHPos:Number;
        protected var scrollDragVPos:Number;
        protected var currentContent:Object;

        public static function getStyleDefinition():Object{
            return (mergeStyles(defaultStyles, BaseScrollPane.getStyleDefinition()));
        }

        public function get scrollDrag():Boolean{
            return (_scrollDrag);
        }
        public function set scrollDrag(_arg1:Boolean):void{
            _scrollDrag = _arg1;
            invalidate(InvalidationType.STATE);
        }
        public function get percentLoaded():Number{
            if (loader != null){
                return (Math.round(((bytesLoaded / bytesTotal) * 100)));
            };
            return (0);
        }
        public function get bytesLoaded():Number{
            return ((((((loader == null)) || ((loader.contentLoaderInfo == null)))) ? 0 : loader.contentLoaderInfo.bytesLoaded));
        }
        public function get bytesTotal():Number{
            return ((((((loader == null)) || ((loader.contentLoaderInfo == null)))) ? 0 : loader.contentLoaderInfo.bytesTotal));
        }
        public function refreshPane():void{
            if ((_source is URLRequest)){
                _source = _source.url;
            };
            source = _source;
        }
        public function update():void{
            var _local1:DisplayObject = contentClip.getChildAt(0);
            setContentSize(_local1.width, _local1.height);
        }
        public function get content():DisplayObject{
            var _local1:Object = currentContent;
            if ((_local1 is URLRequest)){
                _local1 = loader.content;
            };
            return ((_local1 as DisplayObject));
        }
        public function get source():Object{
            return (_source);
        }
        public function set source(_arg1:Object):void{
            var _local2:*;
            clearContent();
            if (isLivePreview){
                return;
            };
            _source = _arg1;
            if ((((_source == "")) || ((_source == null)))){
                return;
            };
            currentContent = getDisplayObjectInstance(_arg1);
            if (currentContent != null){
                _local2 = contentClip.addChild((currentContent as DisplayObject));
                dispatchEvent(new Event(Event.INIT));
                update();
            } else {
                load(new URLRequest(_source.toString()));
            };
        }
        public function load(_arg1:URLRequest, _arg2:LoaderContext=null):void{
            if (_arg2 == null){
                _arg2 = new LoaderContext(false, ApplicationDomain.currentDomain);
            };
            clearContent();
            initLoader();
            currentContent = (_source = _arg1);
            loader.load(_arg1, _arg2);
        }
        override protected function setVerticalScrollPosition(_arg1:Number, _arg2:Boolean=false):void{
            var _local3:* = contentClip.scrollRect;
            _local3.y = _arg1;
            contentClip.scrollRect = _local3;
        }
        override protected function setHorizontalScrollPosition(_arg1:Number, _arg2:Boolean=false):void{
            var _local3:* = contentClip.scrollRect;
            _local3.x = _arg1;
            contentClip.scrollRect = _local3;
        }
        override protected function drawLayout():void{
            super.drawLayout();
            contentScrollRect = contentClip.scrollRect;
            contentScrollRect.width = availableWidth;
            contentScrollRect.height = availableHeight;
            contentClip.cacheAsBitmap = useBitmapScrolling;
            contentClip.scrollRect = contentScrollRect;
            contentClip.x = (contentClip.y = contentPadding);
        }
        protected function onContentLoad(_arg1:Event):void{
            update();
            var _local2:* = calculateAvailableHeight();
            calculateAvailableSize();
            horizontalScrollBar.setScrollProperties(availableWidth, 0, ((useFixedHorizontalScrolling) ? _maxHorizontalScrollPosition : (contentWidth - availableWidth)), availableWidth);
            verticalScrollBar.setScrollProperties(_local2, 0, (contentHeight - _local2), _local2);
            passEvent(_arg1);
        }
        protected function passEvent(_arg1:Event):void{
            dispatchEvent(_arg1);
        }
        protected function initLoader():void{
            loader = new ProLoader();
            loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, handleError, false, 0, true);
            loader.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR, handleError, false, 0, true);
            loader.contentLoaderInfo.addEventListener(Event.OPEN, passEvent, false, 0, true);
            loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, passEvent, false, 0, true);
            loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onContentLoad, false, 0, true);
            loader.contentLoaderInfo.addEventListener(Event.INIT, passEvent, false, 0, true);
            loader.contentLoaderInfo.addEventListener(HTTPStatusEvent.HTTP_STATUS, passEvent, false, 0, true);
            contentClip.addChild(loader);
        }
        override protected function handleScroll(_arg1:ScrollEvent):void{
            passEvent(_arg1);
            super.handleScroll(_arg1);
        }
        protected function handleError(_arg1:Event):void{
            passEvent(_arg1);
            clearLoadEvents();
            loader.contentLoaderInfo.removeEventListener(Event.INIT, handleInit);
        }
        protected function handleInit(_arg1:Event):void{
            loader.contentLoaderInfo.removeEventListener(Event.INIT, handleInit);
            passEvent(_arg1);
            invalidate(InvalidationType.SIZE);
        }
        protected function clearLoadEvents():void{
            loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, handleError);
            loader.contentLoaderInfo.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, handleError);
            loader.contentLoaderInfo.removeEventListener(Event.OPEN, passEvent);
            loader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, passEvent);
            loader.contentLoaderInfo.removeEventListener(HTTPStatusEvent.HTTP_STATUS, passEvent);
            loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, onContentLoad);
        }
        protected function doDrag(_arg1:MouseEvent):void{
            var _local2:* = (scrollDragVPos - (mouseY - yOffset));
            _verticalScrollBar.setScrollPosition(_local2);
            setVerticalScrollPosition(_verticalScrollBar.scrollPosition, true);
            var _local3:* = (scrollDragHPos - (mouseX - xOffset));
            _horizontalScrollBar.setScrollPosition(_local3);
            setHorizontalScrollPosition(_horizontalScrollBar.scrollPosition, true);
        }
        protected function doStartDrag(_arg1:MouseEvent):void{
            if (!enabled){
                return;
            };
            xOffset = mouseX;
            yOffset = mouseY;
            scrollDragHPos = horizontalScrollPosition;
            scrollDragVPos = verticalScrollPosition;
            focusManager.form.addEventListener(MouseEvent.MOUSE_MOVE, doDrag, false, 0, true);
        }
        protected function endDrag(_arg1:MouseEvent):void{
            focusManager.form.removeEventListener(MouseEvent.MOUSE_MOVE, doDrag);
        }
        protected function setScrollDrag():void{
            if (_scrollDrag){
                contentClip.addEventListener(MouseEvent.MOUSE_DOWN, doStartDrag, false, 0, true);
                focusManager.form.addEventListener(MouseEvent.MOUSE_UP, endDrag, false, 0, true);
            } else {
                contentClip.removeEventListener(MouseEvent.MOUSE_DOWN, doStartDrag);
                focusManager.form.removeEventListener(MouseEvent.MOUSE_UP, endDrag);
                removeEventListener(MouseEvent.MOUSE_MOVE, doDrag);
            };
            contentClip.buttonMode = _scrollDrag;
        }
        override protected function draw():void{
            if (isInvalid(InvalidationType.STYLES)){
                drawBackground();
            };
            if (isInvalid(InvalidationType.STATE)){
                setScrollDrag();
            };
            super.draw();
        }
        override protected function drawBackground():void{
            var _local1:DisplayObject = background;
            background = getDisplayObjectInstance(getStyleValue(((enabled) ? "upSkin" : "disabledSkin")));
            background.width = width;
            background.height = height;
            addChildAt(background, 0);
            if (((!((_local1 == null))) && (!((_local1 == background))))){
                removeChild(_local1);
            };
        }
        protected function clearContent():void{
            if (contentClip.numChildren == 0){
                return;
            };
            contentClip.removeChildAt(0);
            currentContent = null;
            if (loader != null){
                try {
                    loader.close();
                } catch(e) {
                };
                try {
                    loader.unload();
                } catch(e) {
                };
                loader = null;
            };
        }
        override protected function keyDownHandler(_arg1:KeyboardEvent):void{
            var _local2:int = calculateAvailableHeight();
            switch (_arg1.keyCode){
                case Keyboard.DOWN:
                    verticalScrollPosition++;
                    break;
                case Keyboard.UP:
                    verticalScrollPosition--;
                    break;
                case Keyboard.RIGHT:
                    horizontalScrollPosition++;
                    break;
                case Keyboard.LEFT:
                    horizontalScrollPosition--;
                    break;
                case Keyboard.END:
                    verticalScrollPosition = maxVerticalScrollPosition;
                    break;
                case Keyboard.HOME:
                    verticalScrollPosition = 0;
                    break;
                case Keyboard.PAGE_UP:
                    verticalScrollPosition = (verticalScrollPosition - _local2);
                    break;
                case Keyboard.PAGE_DOWN:
                    verticalScrollPosition = (verticalScrollPosition + _local2);
                    break;
            };
        }
        protected function calculateAvailableHeight():Number{
            var _local1:Number = Number(getStyleValue("contentPadding"));
            return (((height - (_local1 * 2)) - (((((_horizontalScrollPolicy == ScrollPolicy.ON)) || ((((_horizontalScrollPolicy == ScrollPolicy.AUTO)) && ((_maxHorizontalScrollPosition > 0)))))) ? 15 : 0)));
        }
        override protected function configUI():void{
            super.configUI();
            contentClip = new Sprite();
            addChild(contentClip);
            contentClip.scrollRect = contentScrollRect;
            _horizontalScrollPolicy = ScrollPolicy.AUTO;
            _verticalScrollPolicy = ScrollPolicy.AUTO;
        }

    }
}//package fl.containers 
﻿package fl.containers {
    import fl.core.*;
    import fl.controls.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import fl.events.*;

    public class BaseScrollPane extends UIComponent {

        protected static const SCROLL_BAR_STYLES:Object = {
            upArrowDisabledSkin:"upArrowDisabledSkin",
            upArrowDownSkin:"upArrowDownSkin",
            upArrowOverSkin:"upArrowOverSkin",
            upArrowUpSkin:"upArrowUpSkin",
            downArrowDisabledSkin:"downArrowDisabledSkin",
            downArrowDownSkin:"downArrowDownSkin",
            downArrowOverSkin:"downArrowOverSkin",
            downArrowUpSkin:"downArrowUpSkin",
            thumbDisabledSkin:"thumbDisabledSkin",
            thumbDownSkin:"thumbDownSkin",
            thumbOverSkin:"thumbOverSkin",
            thumbUpSkin:"thumbUpSkin",
            thumbIcon:"thumbIcon",
            trackDisabledSkin:"trackDisabledSkin",
            trackDownSkin:"trackDownSkin",
            trackOverSkin:"trackOverSkin",
            trackUpSkin:"trackUpSkin",
            repeatDelay:"repeatDelay",
            repeatInterval:"repeatInterval"
        };

        private static var defaultStyles:Object = {
            repeatDelay:500,
            repeatInterval:35,
            skin:"ScrollPane_upSkin",
            contentPadding:0,
            disabledAlpha:0.5
        };

        protected var _verticalScrollBar:ScrollBar;
        protected var _horizontalScrollBar:ScrollBar;
        protected var contentScrollRect:Rectangle;
        protected var disabledOverlay:Shape;
        protected var background:DisplayObject;
        protected var contentWidth:Number = 0;
        protected var contentHeight:Number = 0;
        protected var _horizontalScrollPolicy:String;
        protected var _verticalScrollPolicy:String;
        protected var contentPadding:Number = 0;
        protected var availableWidth:Number;
        protected var availableHeight:Number;
        protected var vOffset:Number = 0;
        protected var vScrollBar:Boolean;
        protected var hScrollBar:Boolean;
        protected var _maxHorizontalScrollPosition:Number = 0;
        protected var _horizontalPageScrollSize:Number = 0;
        protected var _verticalPageScrollSize:Number = 0;
        protected var defaultLineScrollSize:Number = 4;
        protected var useFixedHorizontalScrolling:Boolean = false;
        protected var _useBitmpScrolling:Boolean = false;

        public static function getStyleDefinition():Object{
            return (mergeStyles(defaultStyles, ScrollBar.getStyleDefinition()));
        }

        override public function set enabled(_arg1:Boolean):void{
            if (enabled == _arg1){
                return;
            };
            _verticalScrollBar.enabled = _arg1;
            _horizontalScrollBar.enabled = _arg1;
            super.enabled = _arg1;
        }
        public function get horizontalScrollPolicy():String{
            return (_horizontalScrollPolicy);
        }
        public function set horizontalScrollPolicy(_arg1:String):void{
            _horizontalScrollPolicy = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        public function get verticalScrollPolicy():String{
            return (_verticalScrollPolicy);
        }
        public function set verticalScrollPolicy(_arg1:String):void{
            _verticalScrollPolicy = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        public function get horizontalLineScrollSize():Number{
            return (_horizontalScrollBar.lineScrollSize);
        }
        public function set horizontalLineScrollSize(_arg1:Number):void{
            _horizontalScrollBar.lineScrollSize = _arg1;
        }
        public function get verticalLineScrollSize():Number{
            return (_verticalScrollBar.lineScrollSize);
        }
        public function set verticalLineScrollSize(_arg1:Number):void{
            _verticalScrollBar.lineScrollSize = _arg1;
        }
        public function get horizontalScrollPosition():Number{
            return (_horizontalScrollBar.scrollPosition);
        }
        public function set horizontalScrollPosition(_arg1:Number):void{
            drawNow();
            _horizontalScrollBar.scrollPosition = _arg1;
            setHorizontalScrollPosition(_horizontalScrollBar.scrollPosition, false);
        }
        public function get verticalScrollPosition():Number{
            return (_verticalScrollBar.scrollPosition);
        }
        public function set verticalScrollPosition(_arg1:Number):void{
            drawNow();
            _verticalScrollBar.scrollPosition = _arg1;
            setVerticalScrollPosition(_verticalScrollBar.scrollPosition, false);
        }
        public function get maxHorizontalScrollPosition():Number{
            drawNow();
            return (Math.max(0, (contentWidth - availableWidth)));
        }
        public function get maxVerticalScrollPosition():Number{
            drawNow();
            return (Math.max(0, (contentHeight - availableHeight)));
        }
        public function get useBitmapScrolling():Boolean{
            return (_useBitmpScrolling);
        }
        public function set useBitmapScrolling(_arg1:Boolean):void{
            _useBitmpScrolling = _arg1;
            invalidate(InvalidationType.STATE);
        }
        public function get horizontalPageScrollSize():Number{
            if (isNaN(availableWidth)){
                drawNow();
            };
            return ((((((_horizontalPageScrollSize == 0)) && (!(isNaN(availableWidth))))) ? availableWidth : _horizontalPageScrollSize));
        }
        public function set horizontalPageScrollSize(_arg1:Number):void{
            _horizontalPageScrollSize = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        public function get verticalPageScrollSize():Number{
            if (isNaN(availableHeight)){
                drawNow();
            };
            return ((((((_verticalPageScrollSize == 0)) && (!(isNaN(availableHeight))))) ? availableHeight : _verticalPageScrollSize));
        }
        public function set verticalPageScrollSize(_arg1:Number):void{
            _verticalPageScrollSize = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        public function get horizontalScrollBar():ScrollBar{
            return (_horizontalScrollBar);
        }
        public function get verticalScrollBar():ScrollBar{
            return (_verticalScrollBar);
        }
        override protected function configUI():void{
            super.configUI();
            contentScrollRect = new Rectangle(0, 0, 85, 85);
            _verticalScrollBar = new ScrollBar();
            _verticalScrollBar.addEventListener(ScrollEvent.SCROLL, handleScroll, false, 0, true);
            _verticalScrollBar.visible = false;
            _verticalScrollBar.lineScrollSize = defaultLineScrollSize;
            addChild(_verticalScrollBar);
            copyStylesToChild(_verticalScrollBar, SCROLL_BAR_STYLES);
            _horizontalScrollBar = new ScrollBar();
            _horizontalScrollBar.direction = ScrollBarDirection.HORIZONTAL;
            _horizontalScrollBar.addEventListener(ScrollEvent.SCROLL, handleScroll, false, 0, true);
            _horizontalScrollBar.visible = false;
            _horizontalScrollBar.lineScrollSize = defaultLineScrollSize;
            addChild(_horizontalScrollBar);
            copyStylesToChild(_horizontalScrollBar, SCROLL_BAR_STYLES);
            disabledOverlay = new Shape();
            var _local1:Graphics = disabledOverlay.graphics;
            _local1.beginFill(0xFFFFFF);
            _local1.drawRect(0, 0, width, height);
            _local1.endFill();
            addEventListener(MouseEvent.MOUSE_WHEEL, handleWheel, false, 0, true);
        }
        protected function setContentSize(_arg1:Number, _arg2:Number):void{
            if ((((((contentWidth == _arg1)) || (useFixedHorizontalScrolling))) && ((contentHeight == _arg2)))){
                return;
            };
            contentWidth = _arg1;
            contentHeight = _arg2;
            invalidate(InvalidationType.SIZE);
        }
        protected function handleScroll(_arg1:ScrollEvent):void{
            if (_arg1.target == _verticalScrollBar){
                setVerticalScrollPosition(_arg1.position);
            } else {
                setHorizontalScrollPosition(_arg1.position);
            };
        }
        protected function handleWheel(_arg1:MouseEvent):void{
            if (((((!(enabled)) || (!(_verticalScrollBar.visible)))) || ((contentHeight <= availableHeight)))){
                return;
            };
            _verticalScrollBar.scrollPosition = (_verticalScrollBar.scrollPosition - (_arg1.delta * verticalLineScrollSize));
            setVerticalScrollPosition(_verticalScrollBar.scrollPosition);
            dispatchEvent(new ScrollEvent(ScrollBarDirection.VERTICAL, _arg1.delta, horizontalScrollPosition));
        }
        protected function setHorizontalScrollPosition(_arg1:Number, _arg2:Boolean=false):void{
        }
        protected function setVerticalScrollPosition(_arg1:Number, _arg2:Boolean=false):void{
        }
        override protected function draw():void{
            if (isInvalid(InvalidationType.STYLES)){
                setStyles();
                drawBackground();
                if (contentPadding != getStyleValue("contentPadding")){
                    invalidate(InvalidationType.SIZE, false);
                };
            };
            if (isInvalid(InvalidationType.SIZE, InvalidationType.STATE)){
                drawLayout();
            };
            updateChildren();
            super.draw();
        }
        protected function setStyles():void{
            copyStylesToChild(_verticalScrollBar, SCROLL_BAR_STYLES);
            copyStylesToChild(_horizontalScrollBar, SCROLL_BAR_STYLES);
        }
        protected function drawBackground():void{
            var _local1:DisplayObject = background;
            background = getDisplayObjectInstance(getStyleValue("skin"));
            background.width = width;
            background.height = height;
            addChildAt(background, 0);
            if (((!((_local1 == null))) && (!((_local1 == background))))){
                removeChild(_local1);
            };
        }
        protected function drawLayout():void{
            calculateAvailableSize();
            calculateContentWidth();
            background.width = width;
            background.height = height;
            if (vScrollBar){
                _verticalScrollBar.visible = true;
                _verticalScrollBar.x = ((width - ScrollBar.WIDTH) - contentPadding);
                _verticalScrollBar.y = contentPadding;
                _verticalScrollBar.height = availableHeight;
            } else {
                _verticalScrollBar.visible = false;
            };
            _verticalScrollBar.setScrollProperties(availableHeight, 0, (contentHeight - availableHeight), verticalPageScrollSize);
            setVerticalScrollPosition(_verticalScrollBar.scrollPosition, false);
            if (hScrollBar){
                _horizontalScrollBar.visible = true;
                _horizontalScrollBar.x = contentPadding;
                _horizontalScrollBar.y = ((height - ScrollBar.WIDTH) - contentPadding);
                _horizontalScrollBar.width = availableWidth;
            } else {
                _horizontalScrollBar.visible = false;
            };
            _horizontalScrollBar.setScrollProperties(availableWidth, 0, ((useFixedHorizontalScrolling) ? _maxHorizontalScrollPosition : (contentWidth - availableWidth)), horizontalPageScrollSize);
            setHorizontalScrollPosition(_horizontalScrollBar.scrollPosition, false);
            drawDisabledOverlay();
        }
        protected function drawDisabledOverlay():void{
            if (enabled){
                if (contains(disabledOverlay)){
                    removeChild(disabledOverlay);
                };
            } else {
                disabledOverlay.x = (disabledOverlay.y = contentPadding);
                disabledOverlay.width = availableWidth;
                disabledOverlay.height = availableHeight;
                disabledOverlay.alpha = (getStyleValue("disabledAlpha") as Number);
                addChild(disabledOverlay);
            };
        }
        protected function calculateAvailableSize():void{
            var _local1:Number = ScrollBar.WIDTH;
            var _local2:Number = (contentPadding = Number(getStyleValue("contentPadding")));
            var _local3:Number = ((height - (2 * _local2)) - vOffset);
            vScrollBar = (((_verticalScrollPolicy == ScrollPolicy.ON)) || ((((_verticalScrollPolicy == ScrollPolicy.AUTO)) && ((contentHeight > _local3)))));
            var _local4:Number = ((width - ((vScrollBar) ? _local1 : 0)) - (2 * _local2));
            var _local5:Number = ((useFixedHorizontalScrolling) ? _maxHorizontalScrollPosition : (contentWidth - _local4));
            hScrollBar = (((_horizontalScrollPolicy == ScrollPolicy.ON)) || ((((_horizontalScrollPolicy == ScrollPolicy.AUTO)) && ((_local5 > 0)))));
            if (hScrollBar){
                _local3 = (_local3 - _local1);
            };
            if (((((((hScrollBar) && (!(vScrollBar)))) && ((_verticalScrollPolicy == ScrollPolicy.AUTO)))) && ((contentHeight > _local3)))){
                vScrollBar = true;
                _local4 = (_local4 - _local1);
            };
            availableHeight = (_local3 + vOffset);
            availableWidth = _local4;
        }
        protected function calculateContentWidth():void{
        }
        protected function updateChildren():void{
            _verticalScrollBar.enabled = (_horizontalScrollBar.enabled = enabled);
            _verticalScrollBar.drawNow();
            _horizontalScrollBar.drawNow();
        }

    }
}//package fl.containers 
﻿package fl.data {

    public dynamic class SimpleCollectionItem {

        public var label:String;
        public var data:String;

        public function toString():String{
            return ((((("[SimpleCollectionItem: " + label) + ",") + data) + "]"));
        }

    }
}//package fl.data 
﻿package fl.data {
    import flash.events.*;
    import fl.events.*;

    public class DataProvider extends EventDispatcher {

        protected var data:Array;

        public function DataProvider(_arg1:Object=null){
            if (_arg1 == null){
                data = [];
            } else {
                data = getDataFromObject(_arg1);
            };
        }
        public function get length():uint{
            return (data.length);
        }
        public function invalidateItemAt(_arg1:int):void{
            checkIndex(_arg1, (data.length - 1));
            dispatchChangeEvent(DataChangeType.INVALIDATE, [data[_arg1]], _arg1, _arg1);
        }
        public function invalidateItem(_arg1:Object):void{
            var _local2:uint = getItemIndex(_arg1);
            if (_local2 == -1){
                return;
            };
            invalidateItemAt(_local2);
        }
        public function invalidate():void{
            dispatchEvent(new DataChangeEvent(DataChangeEvent.DATA_CHANGE, DataChangeType.INVALIDATE_ALL, data.concat(), 0, data.length));
        }
        public function addItemAt(_arg1:Object, _arg2:uint):void{
            checkIndex(_arg2, data.length);
            dispatchPreChangeEvent(DataChangeType.ADD, [_arg1], _arg2, _arg2);
            data.splice(_arg2, 0, _arg1);
            dispatchChangeEvent(DataChangeType.ADD, [_arg1], _arg2, _arg2);
        }
        public function addItem(_arg1:Object):void{
            dispatchPreChangeEvent(DataChangeType.ADD, [_arg1], (data.length - 1), (data.length - 1));
            data.push(_arg1);
            dispatchChangeEvent(DataChangeType.ADD, [_arg1], (data.length - 1), (data.length - 1));
        }
        public function addItemsAt(_arg1:Object, _arg2:uint):void{
            checkIndex(_arg2, data.length);
            var _local3:Array = getDataFromObject(_arg1);
            dispatchPreChangeEvent(DataChangeType.ADD, _local3, _arg2, ((_arg2 + _local3.length) - 1));
            data.splice.apply(data, [_arg2, 0].concat(_local3));
            dispatchChangeEvent(DataChangeType.ADD, _local3, _arg2, ((_arg2 + _local3.length) - 1));
        }
        public function addItems(_arg1:Object):void{
            addItemsAt(_arg1, data.length);
        }
        public function concat(_arg1:Object):void{
            addItems(_arg1);
        }
        public function merge(_arg1:Object):void{
            var _local6:Object;
            var _local2:Array = getDataFromObject(_arg1);
            var _local3:uint = _local2.length;
            var _local4:uint = data.length;
            dispatchPreChangeEvent(DataChangeType.ADD, data.slice(_local4, data.length), _local4, (this.data.length - 1));
            var _local5:uint;
            while (_local5 < _local3) {
                _local6 = _local2[_local5];
                if (getItemIndex(_local6) == -1){
                    data.push(_local6);
                };
                _local5++;
            };
            if (data.length > _local4){
                dispatchChangeEvent(DataChangeType.ADD, data.slice(_local4, data.length), _local4, (this.data.length - 1));
            } else {
                dispatchChangeEvent(DataChangeType.ADD, [], -1, -1);
            };
        }
        public function getItemAt(_arg1:uint):Object{
            checkIndex(_arg1, (data.length - 1));
            return (data[_arg1]);
        }
        public function getItemIndex(_arg1:Object):int{
            return (data.indexOf(_arg1));
        }
        public function removeItemAt(_arg1:uint):Object{
            checkIndex(_arg1, (data.length - 1));
            dispatchPreChangeEvent(DataChangeType.REMOVE, data.slice(_arg1, (_arg1 + 1)), _arg1, _arg1);
            var _local2:Array = data.splice(_arg1, 1);
            dispatchChangeEvent(DataChangeType.REMOVE, _local2, _arg1, _arg1);
            return (_local2[0]);
        }
        public function removeItem(_arg1:Object):Object{
            var _local2:int = getItemIndex(_arg1);
            if (_local2 != -1){
                return (removeItemAt(_local2));
            };
            return (null);
        }
        public function removeAll():void{
            var _local1:Array = data.concat();
            dispatchPreChangeEvent(DataChangeType.REMOVE_ALL, _local1, 0, _local1.length);
            data = [];
            dispatchChangeEvent(DataChangeType.REMOVE_ALL, _local1, 0, _local1.length);
        }
        public function replaceItem(_arg1:Object, _arg2:Object):Object{
            var _local3:int = getItemIndex(_arg2);
            if (_local3 != -1){
                return (replaceItemAt(_arg1, _local3));
            };
            return (null);
        }
        public function replaceItemAt(_arg1:Object, _arg2:uint):Object{
            checkIndex(_arg2, (data.length - 1));
            var _local3:Array = [data[_arg2]];
            dispatchPreChangeEvent(DataChangeType.REPLACE, _local3, _arg2, _arg2);
            data[_arg2] = _arg1;
            dispatchChangeEvent(DataChangeType.REPLACE, _local3, _arg2, _arg2);
            return (_local3[0]);
        }
        public function sort(... _args){
            dispatchPreChangeEvent(DataChangeType.SORT, data.concat(), 0, (data.length - 1));
            var _local2:Array = data.sort.apply(data, _args);
            dispatchChangeEvent(DataChangeType.SORT, data.concat(), 0, (data.length - 1));
            return (_local2);
        }
        public function sortOn(_arg1:Object, _arg2:Object=null){
            dispatchPreChangeEvent(DataChangeType.SORT, data.concat(), 0, (data.length - 1));
            var _local3:Array = data.sortOn(_arg1, _arg2);
            dispatchChangeEvent(DataChangeType.SORT, data.concat(), 0, (data.length - 1));
            return (_local3);
        }
        public function clone():DataProvider{
            return (new DataProvider(data));
        }
        public function toArray():Array{
            return (data.concat());
        }
        override public function toString():String{
            return ((("DataProvider [" + data.join(" , ")) + "]"));
        }
        protected function getDataFromObject(_arg1:Object):Array{
            var _local2:Array;
            var _local3:Array;
            var _local4:uint;
            var _local5:Object;
            var _local6:XML;
            var _local7:XMLList;
            var _local8:XML;
            var _local9:XMLList;
            var _local10:XML;
            var _local11:XMLList;
            var _local12:XML;
            if ((_arg1 is Array)){
                _local3 = (_arg1 as Array);
                if (_local3.length > 0){
                    if ((((_local3[0] is String)) || ((_local3[0] is Number)))){
                        _local2 = [];
                        _local4 = 0;
                        while (_local4 < _local3.length) {
                            _local5 = {
                                label:String(_local3[_local4]),
                                data:_local3[_local4]
                            };
                            _local2.push(_local5);
                            _local4++;
                        };
                        return (_local2);
                    };
                };
                return (_arg1.concat());
            };
            if ((_arg1 is DataProvider)){
                return (_arg1.toArray());
            };
            if ((_arg1 is XML)){
                _local6 = (_arg1 as XML);
                _local2 = [];
                _local7 = _local6.*;
                for each (_local8 in _local7) {
                    _arg1 = {};
                    _local9 = _local8.attributes();
                    for each (_local10 in _local9) {
                        _arg1[_local10.localName()] = _local10.toString();
                    };
                    _local11 = _local8.*;
                    for each (_local12 in _local11) {
                        if (_local12.hasSimpleContent()){
                            _arg1[_local12.localName()] = _local12.toString();
                        };
                    };
                    _local2.push(_arg1);
                };
                return (_local2);
            };
            throw (new TypeError((("Error: Type Coercion failed: cannot convert " + _arg1) + " to Array or DataProvider.")));
        }
        protected function checkIndex(_arg1:int, _arg2:int):void{
            if ((((_arg1 > _arg2)) || ((_arg1 < 0)))){
                throw (new RangeError((((("DataProvider index (" + _arg1) + ") is not in acceptable range (0 - ") + _arg2) + ")")));
            };
        }
        protected function dispatchChangeEvent(_arg1:String, _arg2:Array, _arg3:int, _arg4:int):void{
            dispatchEvent(new DataChangeEvent(DataChangeEvent.DATA_CHANGE, _arg1, _arg2, _arg3, _arg4));
        }
        protected function dispatchPreChangeEvent(_arg1:String, _arg2:Array, _arg3:int, _arg4:int):void{
            dispatchEvent(new DataChangeEvent(DataChangeEvent.PRE_DATA_CHANGE, _arg1, _arg2, _arg3, _arg4));
        }

    }
}//package fl.data 
﻿package fl.events {
    import flash.events.*;

    public class ListEvent extends Event {

        public static const ITEM_ROLL_OUT:String = "itemRollOut";
        public static const ITEM_ROLL_OVER:String = "itemRollOver";
        public static const ITEM_CLICK:String = "itemClick";
        public static const ITEM_DOUBLE_CLICK:String = "itemDoubleClick";

        protected var _rowIndex:int;
        protected var _columnIndex:int;
        protected var _index:int;
        protected var _item:Object;

        public function ListEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false, _arg4:int=-1, _arg5:int=-1, _arg6:int=-1, _arg7:Object=null){
            super(_arg1, _arg2, _arg3);
            _rowIndex = _arg5;
            _columnIndex = _arg4;
            _index = _arg6;
            _item = _arg7;
        }
        public function get rowIndex():Object{
            return (_rowIndex);
        }
        public function get columnIndex():int{
            return (_columnIndex);
        }
        public function get index():int{
            return (_index);
        }
        public function get item():Object{
            return (_item);
        }
        override public function toString():String{
            return (formatToString("ListEvent", "type", "bubbles", "cancelable", "columnIndex", "rowIndex", "index", "item"));
        }
        override public function clone():Event{
            return (new ListEvent(type, bubbles, cancelable, _columnIndex, _rowIndex));
        }

    }
}//package fl.events 
﻿package fl.events {
    import flash.display.*;
    import flash.events.*;

    public class ProLoaderRSLPreloaderSandboxEvent extends Event {

        public static const PROLOADER_RSLPRELOADER_SANDBOX:String = "__proLoaderRSLPreloaderSandbox";

        public var loaderInfo:LoaderInfo;
        public var shape:Shape;

        public function ProLoaderRSLPreloaderSandboxEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false, _arg4:LoaderInfo=null, _arg5:Shape=null){
            super(_arg1, _arg2, _arg3);
            this.loaderInfo = _arg4;
            this.shape = _arg5;
        }
        override public function clone():Event{
            return (new ProLoaderRSLPreloaderSandboxEvent(type, bubbles, cancelable, this.loaderInfo, this.shape));
        }
        override public function toString():String{
            return (formatToString("ProLoaderRSLPreloaderSandboxEvent", "type", "bubbles", "cancelable", "eventPhase", "loaderInfo", "shape"));
        }

    }
}//package fl.events 
﻿package fl.events {
    import flash.events.*;

    public class ScrollEvent extends Event {

        public static const SCROLL:String = "scroll";

        private var _direction:String;
        private var _delta:Number;
        private var _position:Number;

        public function ScrollEvent(_arg1:String, _arg2:Number, _arg3:Number){
            super(ScrollEvent.SCROLL, false, false);
            _direction = _arg1;
            _delta = _arg2;
            _position = _arg3;
        }
        public function get direction():String{
            return (_direction);
        }
        public function get delta():Number{
            return (_delta);
        }
        public function get position():Number{
            return (_position);
        }
        override public function toString():String{
            return (formatToString("ScrollEvent", "type", "bubbles", "cancelable", "direction", "delta", "position"));
        }
        override public function clone():Event{
            return (new ScrollEvent(_direction, _delta, _position));
        }

    }
}//package fl.events 
﻿package fl.events {

    public class DataChangeType {

        public static const CHANGE:String = "change";
        public static const INVALIDATE:String = "invalidate";
        public static const INVALIDATE_ALL:String = "invalidateAll";
        public static const ADD:String = "add";
        public static const REMOVE:String = "remove";
        public static const REMOVE_ALL:String = "removeAll";
        public static const REPLACE:String = "replace";
        public static const SORT:String = "sort";

    }
}//package fl.events 
﻿package fl.events {

    public final class DataGridEventReason {

        public static const CANCELLED:String = "cancelled";
        public static const OTHER:String = "other";
        public static const NEW_COLUMN:String = "newColumn";
        public static const NEW_ROW:String = "newRow";

    }
}//package fl.events 
﻿package fl.events {
    import flash.events.*;

    public class DataChangeEvent extends Event {

        public static const DATA_CHANGE:String = "dataChange";
        public static const PRE_DATA_CHANGE:String = "preDataChange";

        protected var _startIndex:uint;
        protected var _endIndex:uint;
        protected var _changeType:String;
        protected var _items:Array;

        public function DataChangeEvent(_arg1:String, _arg2:String, _arg3:Array, _arg4:int=-1, _arg5:int=-1):void{
            super(_arg1);
            _changeType = _arg2;
            _startIndex = _arg4;
            _items = _arg3;
            _endIndex = ((_arg5)==-1) ? _startIndex : _arg5;
        }
        public function get changeType():String{
            return (_changeType);
        }
        public function get items():Array{
            return (_items);
        }
        public function get startIndex():uint{
            return (_startIndex);
        }
        public function get endIndex():uint{
            return (_endIndex);
        }
        override public function toString():String{
            return (formatToString("DataChangeEvent", "type", "changeType", "startIndex", "endIndex", "bubbles", "cancelable"));
        }
        override public function clone():Event{
            return (new DataChangeEvent(type, _changeType, _items, _startIndex, _endIndex));
        }

    }
}//package fl.events 
﻿package fl.events {

    public class InteractionInputType {

        public static const MOUSE:String = "mouse";
        public static const KEYBOARD:String = "keyboard";

    }
}//package fl.events 
﻿package fl.events {
    import flash.events.*;

    public class DataGridEvent extends ListEvent {

        public static const COLUMN_STRETCH:String = "columnStretch";
        public static const HEADER_RELEASE:String = "headerRelease";
        public static const ITEM_EDIT_BEGINNING:String = "itemEditBeginning";
        public static const ITEM_EDIT_BEGIN:String = "itemEditBegin";
        public static const ITEM_EDIT_END:String = "itemEditEnd";
        public static const ITEM_FOCUS_IN:String = "itemFocusIn";
        public static const ITEM_FOCUS_OUT:String = "itemFocusOut";

        protected var _dataField:String;
        protected var _itemRenderer:Object;
        protected var _reason:String;

        public function DataGridEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false, _arg4:int=-1, _arg5:int=-1, _arg6:Object=null, _arg7:String=null, _arg8:String=null){
            super(_arg1, _arg2, _arg3, _arg4, _arg5);
            _itemRenderer = _arg6;
            _dataField = _arg7;
            _reason = _arg8;
        }
        public function get itemRenderer():Object{
            return (_itemRenderer);
        }
        public function get dataField():String{
            return (_dataField);
        }
        public function set dataField(_arg1:String):void{
            _dataField = _arg1;
        }
        public function get reason():String{
            return (_reason);
        }
        override public function toString():String{
            return (formatToString("DataGridEvent", "type", "bubbles", "cancelable", "columnIndex", "rowIndex", "itemRenderer", "dataField", "reason"));
        }
        override public function clone():Event{
            return (new DataGridEvent(type, bubbles, cancelable, columnIndex, int(rowIndex), _itemRenderer, _dataField, _reason));
        }

    }
}//package fl.events 
﻿package fl.events {
    import flash.events.*;

    public class ComponentEvent extends Event {

        public static const BUTTON_DOWN:String = "buttonDown";
        public static const LABEL_CHANGE:String = "labelChange";
        public static const HIDE:String = "hide";
        public static const SHOW:String = "show";
        public static const RESIZE:String = "resize";
        public static const MOVE:String = "move";
        public static const ENTER:String = "enter";

        public function ComponentEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
        override public function toString():String{
            return (formatToString("ComponentEvent", "type", "bubbles", "cancelable"));
        }
        override public function clone():Event{
            return (new ComponentEvent(type, bubbles, cancelable));
        }

    }
}//package fl.events 
﻿package fl.events {

    public class SliderEventClickTarget {

        public static const THUMB:String = "thumb";
        public static const TRACK:String = "track";

    }
}//package fl.events 
﻿package fl.events {
    import flash.events.*;

    public class SliderEvent extends Event {

        public static const CHANGE:String = "change";
        public static const THUMB_DRAG:String = "thumbDrag";
        public static const THUMB_PRESS:String = "thumbPress";
        public static const THUMB_RELEASE:String = "thumbRelease";

        protected var _triggerEvent:String;
        protected var _value:Number;
        protected var _keyCode:Number;
        protected var _clickTarget:String;

        public function SliderEvent(_arg1:String, _arg2:Number, _arg3:String, _arg4:String, _arg5:int=0){
            _value = _arg2;
            _keyCode = _arg5;
            _triggerEvent = _arg4;
            _clickTarget = _arg3;
            super(_arg1);
        }
        public function get value():Number{
            return (_value);
        }
        public function get keyCode():Number{
            return (_keyCode);
        }
        public function get triggerEvent():String{
            return (_triggerEvent);
        }
        public function get clickTarget():String{
            return (_clickTarget);
        }
        override public function toString():String{
            return (formatToString("SliderEvent", "type", "value", "bubbles", "cancelable", "keyCode", "triggerEvent", "clickTarget"));
        }
        override public function clone():Event{
            return (new SliderEvent(type, _value, _clickTarget, _triggerEvent, _keyCode));
        }

    }
}//package fl.events 
﻿package {
    import flash.display.*;

    public dynamic class DataGrid_skin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class List_skin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class TextArea_upSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class AlertWarningIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class ScrollThumb_overSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CancelButton extends SimpleButton {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class ScrollThumb_downSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CheckBox_selectedIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public class FusionChartsComponent extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CheckBox_downIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class RadioButton_disabledIcon extends MovieClip {

    }
}//package 
﻿package com.fusioncharts.components.codec {
    import flash.display.*;
    import flash.utils.*;

    public class PNGEncoder implements IImageEncoder {

        private static const CONTENT_TYPE:String = "image/png";

        private var crcTable:Array;

        public function PNGEncoder(){
            initializeCRCTable();
        }
        private function internalEncode(_arg1:Object, _arg2:int, _arg3:int, _arg4:Boolean=true):ByteArray{
            var _local5:BitmapData;
            var _local6:ByteArray;
            var _local7:ByteArray;
            var _local8:ByteArray;
            var _local9:ByteArray;
            var _local10:int;
            var _local11:int;
            var _local12:uint;
            _local5 = (_arg1 as BitmapData);
            _local6 = (_arg1 as ByteArray);
            if (_local6){
                _local6.position = 0;
            };
            _local7 = new ByteArray();
            _local7.writeUnsignedInt(2303741511);
            _local7.writeUnsignedInt(218765834);
            _local8 = new ByteArray();
            _local8.writeInt(_arg2);
            _local8.writeInt(_arg3);
            _local8.writeByte(8);
            _local8.writeByte(6);
            _local8.writeByte(0);
            _local8.writeByte(0);
            _local8.writeByte(0);
            writeChunk(_local7, 1229472850, _local8);
            _local9 = new ByteArray();
            _local10 = 0;
            while (_local10 < _arg3) {
                _local9.writeByte(0);
                if (!_arg4){
                    _local11 = 0;
                    while (_local11 < _arg2) {
                        if (_local5){
                            _local12 = _local5.getPixel(_local11, _local10);
                        } else {
                            _local12 = _local6.readUnsignedInt();
                        };
                        _local9.writeUnsignedInt(uint((((_local12 & 0xFFFFFF) << 8) | 0xFF)));
                        _local11++;
                    };
                } else {
                    _local11 = 0;
                    while (_local11 < _arg2) {
                        if (_local5){
                            _local12 = _local5.getPixel32(_local11, _local10);
                        } else {
                            _local12 = _local6.readUnsignedInt();
                        };
                        _local9.writeUnsignedInt(uint((((_local12 & 0xFFFFFF) << 8) | (_local12 >>> 24))));
                        _local11++;
                    };
                };
                _local10++;
            };
            _local9.compress();
            writeChunk(_local7, 1229209940, _local9);
            writeChunk(_local7, 1229278788, null);
            _local7.position = 0;
            return (_local7);
        }
        private function writeChunk(_arg1:ByteArray, _arg2:uint, _arg3:ByteArray):void{
            var _local4:uint;
            var _local5:uint;
            var _local6:uint;
            var _local7:uint;
            var _local8:uint;
            _local4 = 0;
            if (_arg3){
                _local4 = _arg3.length;
            };
            _arg1.writeUnsignedInt(_local4);
            _local5 = _arg1.position;
            _arg1.writeUnsignedInt(_arg2);
            if (_arg3){
                _arg1.writeBytes(_arg3);
            };
            _local6 = _arg1.position;
            _arg1.position = _local5;
            _local7 = 0xFFFFFFFF;
            _local8 = _local5;
            while (_local8 < _local6) {
                _local7 = uint((crcTable[((_local7 ^ _arg1.readUnsignedByte()) & uint(0xFF))] ^ uint((_local7 >>> 8))));
                _local8++;
            };
            _local7 = uint((_local7 ^ uint(0xFFFFFFFF)));
            _arg1.position = _local6;
            _arg1.writeUnsignedInt(_local7);
        }
        private function initializeCRCTable():void{
            var _local1:uint;
            var _local2:uint;
            var _local3:uint;
            crcTable = [];
            _local1 = 0;
            while (_local1 < 0x0100) {
                _local2 = _local1;
                _local3 = 0;
                while (_local3 < 8) {
                    if ((_local2 & 1)){
                        _local2 = uint((uint(3988292384) ^ uint((_local2 >>> 1))));
                    } else {
                        _local2 = uint((_local2 >>> 1));
                    };
                    _local3++;
                };
                crcTable[_local1] = _local2;
                _local1++;
            };
        }
        public function get contentType():String{
            return (CONTENT_TYPE);
        }
        public function encode(_arg1:BitmapData):ByteArray{
            return (internalEncode(_arg1, _arg1.width, _arg1.height, _arg1.transparent));
        }
        public function encodeByteArray(_arg1:ByteArray, _arg2:int, _arg3:int, _arg4:Boolean=true):ByteArray{
            return (internalEncode(_arg1, _arg2, _arg3, _arg4));
        }

    }
}//package com.fusioncharts.components.codec 
﻿package com.fusioncharts.components.codec {
    import flash.display.*;
    import flash.utils.*;

    public interface IImageEncoder {

        function get contentType():String;
        function encode(_arg1:BitmapData):ByteArray;
        function encodeByteArray(_arg1:ByteArray, _arg2:int, _arg3:int, _arg4:Boolean=true):ByteArray;

    }
}//package com.fusioncharts.components.codec 
﻿package com.fusioncharts.components.codec {
    import flash.display.*;
    import flash.utils.*;

    public class JPEGEncoder implements IImageEncoder {

        private static const CONTENT_TYPE:String = "image/jpeg";

        private const std_ac_chrominance_values:Array;
        private const std_dc_chrominance_nrcodes:Array;
        private const std_dc_chrominance_values:Array;
        private const ZigZag:Array;
        private const std_ac_chrominance_nrcodes:Array;
        private const std_ac_luminance_values:Array;
        private const std_ac_luminance_nrcodes:Array;
        private const std_dc_luminance_values:Array;
        private const std_dc_luminance_nrcodes:Array;

        private var fdtbl_UV:Array;
        private var DU:Array;
        private var YDC_HT:Array;
        private var YAC_HT:Array;
        private var fdtbl_Y:Array;
        private var bytenew:int = 0;
        private var UVTable:Array;
        private var YDU:Array;
        private var UDU:Array;
        private var byteout:ByteArray;
        private var UVAC_HT:Array;
        private var UVDC_HT:Array;
        private var bytepos:int = 7;
        private var VDU:Array;
        private var YTable:Array;
        private var bitcode:Array;
        private var category:Array;

        public function JPEGEncoder(_arg1:Number=50){
            var _local2:int;
            std_dc_luminance_nrcodes = [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];
            std_dc_luminance_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
            std_dc_chrominance_nrcodes = [0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0];
            std_dc_chrominance_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
            std_ac_luminance_nrcodes = [0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125];
            std_ac_luminance_values = [1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250];
            std_ac_chrominance_nrcodes = [0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119];
            std_ac_chrominance_values = [0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250];
            ZigZag = [0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63];
            category = new Array(0xFFFF);
            bitcode = new Array(0xFFFF);
            YTable = new Array(64);
            UVTable = new Array(64);
            fdtbl_Y = new Array(64);
            fdtbl_UV = new Array(64);
            bytenew = 0;
            bytepos = 7;
            DU = new Array(64);
            YDU = new Array(64);
            UDU = new Array(64);
            VDU = new Array(64);
            super();
            if (_arg1 <= 0){
                _arg1 = 1;
            };
            if (_arg1 > 100){
                _arg1 = 100;
            };
            _local2 = 0;
            if (_arg1 < 50){
                _local2 = int((5000 / _arg1));
            } else {
                _local2 = int((200 - (_arg1 * 2)));
            };
            initHuffmanTbl();
            initCategoryNumber();
            initQuantTables(_local2);
        }
        private function RGB2YUV(_arg1:BitmapData, _arg2:ByteArray, _arg3:int, _arg4:int, _arg5:int, _arg6:int):void{
            var _local7:int;
            var _local8:int;
            var _local9:int;
            var _local10:int;
            var _local11:int;
            var _local12:uint;
            var _local13:Number;
            var _local14:Number;
            var _local15:Number;
            _local7 = 0;
            _local8 = 0;
            while (_local8 < 8) {
                _local9 = (_arg4 + _local8);
                if (_local9 >= _arg6){
                    _local9 = (_arg6 - 1);
                };
                _local10 = 0;
                while (_local10 < 8) {
                    _local11 = (_arg3 + _local10);
                    if (_local11 >= _arg5){
                        _local11 = (_arg5 - 1);
                    };
                    if (_arg1){
                        _local12 = _arg1.getPixel32(_local11, _local9);
                    } else {
                        _arg2.position = (4 * ((_local9 * _arg5) + _local11));
                        _local12 = _arg2.readUnsignedInt();
                    };
                    _local13 = Number(((_local12 >> 16) & 0xFF));
                    _local14 = Number(((_local12 >> 8) & 0xFF));
                    _local15 = Number((_local12 & 0xFF));
                    YDU[_local7] = ((((0.299 * _local13) + (0.587 * _local14)) + (0.114 * _local15)) - 128);
                    UDU[_local7] = (((-0.16874 * _local13) - (0.33126 * _local14)) + (0.5 * _local15));
                    VDU[_local7] = (((0.5 * _local13) - (0.41869 * _local14)) - (0.08131 * _local15));
                    _local7++;
                    _local10++;
                };
                _local8++;
            };
        }
        private function writeWord(_arg1:int):void{
            writeByte(((_arg1 >> 8) & 0xFF));
            writeByte((_arg1 & 0xFF));
        }
        private function writeByte(_arg1:int):void{
            byteout.writeByte(_arg1);
        }
        private function writeBits(_arg1:BitString):void{
            var _local2:int;
            var _local3:int;
            _local2 = _arg1.val;
            _local3 = (_arg1.len - 1);
            while (_local3 >= 0) {
                if ((_local2 & uint((1 << _local3)))){
                    bytenew = (bytenew | uint((1 << bytepos)));
                };
                _local3--;
                bytepos--;
                if (bytepos < 0){
                    if (bytenew == 0xFF){
                        writeByte(0xFF);
                        writeByte(0);
                    } else {
                        writeByte(bytenew);
                    };
                    bytepos = 7;
                    bytenew = 0;
                };
            };
        }
        private function initHuffmanTbl():void{
            YDC_HT = computeHuffmanTbl(std_dc_luminance_nrcodes, std_dc_luminance_values);
            UVDC_HT = computeHuffmanTbl(std_dc_chrominance_nrcodes, std_dc_chrominance_values);
            YAC_HT = computeHuffmanTbl(std_ac_luminance_nrcodes, std_ac_luminance_values);
            UVAC_HT = computeHuffmanTbl(std_ac_chrominance_nrcodes, std_ac_chrominance_values);
        }
        public function encode(_arg1:BitmapData):ByteArray{
            return (internalEncode(_arg1, _arg1.width, _arg1.height, _arg1.transparent));
        }
        private function initCategoryNumber():void{
            var _local1:int;
            var _local2:int;
            var _local3:int;
            var _local4:int;
            _local2 = 1;
            _local3 = 2;
            _local4 = 1;
            while (_local4 <= 15) {
                _local1 = _local2;
                while (_local1 < _local3) {
                    category[(32767 + _local1)] = _local4;
                    bitcode[(32767 + _local1)] = new BitString();
                    bitcode[(32767 + _local1)].len = _local4;
                    bitcode[(32767 + _local1)].val = _local1;
                    _local1++;
                };
                _local1 = -((_local3 - 1));
                while (_local1 <= -(_local2)) {
                    category[(32767 + _local1)] = _local4;
                    bitcode[(32767 + _local1)] = new BitString();
                    bitcode[(32767 + _local1)].len = _local4;
                    bitcode[(32767 + _local1)].val = ((_local3 - 1) + _local1);
                    _local1++;
                };
                _local2 = (_local2 << 1);
                _local3 = (_local3 << 1);
                _local4++;
            };
        }
        private function writeDQT():void{
            var _local1:int;
            writeWord(65499);
            writeWord(132);
            writeByte(0);
            _local1 = 0;
            while (_local1 < 64) {
                writeByte(YTable[_local1]);
                _local1++;
            };
            writeByte(1);
            _local1 = 0;
            while (_local1 < 64) {
                writeByte(UVTable[_local1]);
                _local1++;
            };
        }
        private function writeAPP0():void{
            writeWord(65504);
            writeWord(16);
            writeByte(74);
            writeByte(70);
            writeByte(73);
            writeByte(70);
            writeByte(0);
            writeByte(1);
            writeByte(1);
            writeByte(0);
            writeWord(1);
            writeWord(1);
            writeByte(0);
            writeByte(0);
        }
        private function writeSOS():void{
            writeWord(65498);
            writeWord(12);
            writeByte(3);
            writeByte(1);
            writeByte(0);
            writeByte(2);
            writeByte(17);
            writeByte(3);
            writeByte(17);
            writeByte(0);
            writeByte(63);
            writeByte(0);
        }
        private function internalEncode(_arg1:Object, _arg2:int, _arg3:int, _arg4:Boolean=true):ByteArray{
            var _local5:BitmapData;
            var _local6:ByteArray;
            var _local7:Number;
            var _local8:Number;
            var _local9:Number;
            var _local10:int;
            var _local11:int;
            var _local12:BitString;
            _local5 = (_arg1 as BitmapData);
            _local6 = (_arg1 as ByteArray);
            byteout = new ByteArray();
            bytenew = 0;
            bytepos = 7;
            writeWord(65496);
            writeAPP0();
            writeDQT();
            writeSOF0(_arg2, _arg3);
            writeDHT();
            writeSOS();
            _local7 = 0;
            _local8 = 0;
            _local9 = 0;
            bytenew = 0;
            bytepos = 7;
            _local10 = 0;
            while (_local10 < _arg3) {
                _local11 = 0;
                while (_local11 < _arg2) {
                    RGB2YUV(_local5, _local6, _local11, _local10, _arg2, _arg3);
                    _local7 = processDU(YDU, fdtbl_Y, _local7, YDC_HT, YAC_HT);
                    _local8 = processDU(UDU, fdtbl_UV, _local8, UVDC_HT, UVAC_HT);
                    _local9 = processDU(VDU, fdtbl_UV, _local9, UVDC_HT, UVAC_HT);
                    _local11 = (_local11 + 8);
                };
                _local10 = (_local10 + 8);
            };
            if (bytepos >= 0){
                _local12 = new BitString();
                _local12.len = (bytepos + 1);
                _local12.val = ((1 << (bytepos + 1)) - 1);
                writeBits(_local12);
            };
            writeWord(65497);
            return (byteout);
        }
        private function writeDHT():void{
            var _local1:int;
            writeWord(65476);
            writeWord(418);
            writeByte(0);
            _local1 = 0;
            while (_local1 < 16) {
                writeByte(std_dc_luminance_nrcodes[(_local1 + 1)]);
                _local1++;
            };
            _local1 = 0;
            while (_local1 <= 11) {
                writeByte(std_dc_luminance_values[_local1]);
                _local1++;
            };
            writeByte(16);
            _local1 = 0;
            while (_local1 < 16) {
                writeByte(std_ac_luminance_nrcodes[(_local1 + 1)]);
                _local1++;
            };
            _local1 = 0;
            while (_local1 <= 161) {
                writeByte(std_ac_luminance_values[_local1]);
                _local1++;
            };
            writeByte(1);
            _local1 = 0;
            while (_local1 < 16) {
                writeByte(std_dc_chrominance_nrcodes[(_local1 + 1)]);
                _local1++;
            };
            _local1 = 0;
            while (_local1 <= 11) {
                writeByte(std_dc_chrominance_values[_local1]);
                _local1++;
            };
            writeByte(17);
            _local1 = 0;
            while (_local1 < 16) {
                writeByte(std_ac_chrominance_nrcodes[(_local1 + 1)]);
                _local1++;
            };
            _local1 = 0;
            while (_local1 <= 161) {
                writeByte(std_ac_chrominance_values[_local1]);
                _local1++;
            };
        }
        private function processDU(_arg1:Array, _arg2:Array, _arg3:Number, _arg4:Array, _arg5:Array):Number{
            var _local6:BitString;
            var _local7:BitString;
            var _local8:int;
            var _local9:Array;
            var _local10:int;
            var _local11:int;
            var _local12:int;
            var _local13:int;
            var _local14:int;
            _local6 = _arg5[0];
            _local7 = _arg5[240];
            _local9 = fDCTQuant(_arg1, _arg2);
            _local8 = 0;
            while (_local8 < 64) {
                DU[ZigZag[_local8]] = _local9[_local8];
                _local8++;
            };
            _local10 = (DU[0] - _arg3);
            _arg3 = DU[0];
            if (_local10 == 0){
                writeBits(_arg4[0]);
            } else {
                writeBits(_arg4[category[(32767 + _local10)]]);
                writeBits(bitcode[(32767 + _local10)]);
            };
            _local11 = 63;
            while ((((_local11 > 0)) && ((DU[_local11] == 0)))) {
                _local11--;
            };
            if (_local11 == 0){
                writeBits(_local6);
                return (_arg3);
            };
            _local8 = 1;
            while (_local8 <= _local11) {
                _local12 = _local8;
                while ((((DU[_local8] == 0)) && ((_local8 <= _local11)))) {
                    _local8++;
                };
                _local13 = (_local8 - _local12);
                if (_local13 >= 16){
                    _local14 = 1;
                    while (_local14 <= (_local13 / 16)) {
                        writeBits(_local7);
                        _local14++;
                    };
                    _local13 = int((_local13 & 15));
                };
                writeBits(_arg5[((_local13 * 16) + category[(32767 + DU[_local8])])]);
                writeBits(bitcode[(32767 + DU[_local8])]);
                _local8++;
            };
            if (_local11 != 63){
                writeBits(_local6);
            };
            return (_arg3);
        }
        public function encodeByteArray(_arg1:ByteArray, _arg2:int, _arg3:int, _arg4:Boolean=true):ByteArray{
            return (internalEncode(_arg1, _arg2, _arg3, _arg4));
        }
        private function initQuantTables(_arg1:int):void{
            var _local2:int;
            var _local3:Number;
            var _local4:Array;
            var _local5:Array;
            var _local6:Array;
            var _local7:int;
            var _local8:int;
            _local2 = 0;
            _local4 = [16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99];
            _local2 = 0;
            while (_local2 < 64) {
                _local3 = Math.floor((((_local4[_local2] * _arg1) + 50) / 100));
                if (_local3 < 1){
                    _local3 = 1;
                } else {
                    if (_local3 > 0xFF){
                        _local3 = 0xFF;
                    };
                };
                YTable[ZigZag[_local2]] = _local3;
                _local2++;
            };
            _local5 = [17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99];
            _local2 = 0;
            while (_local2 < 64) {
                _local3 = Math.floor((((_local5[_local2] * _arg1) + 50) / 100));
                if (_local3 < 1){
                    _local3 = 1;
                } else {
                    if (_local3 > 0xFF){
                        _local3 = 0xFF;
                    };
                };
                UVTable[ZigZag[_local2]] = _local3;
                _local2++;
            };
            _local6 = [1, 1.387039845, 1.306562965, 1.175875602, 1, 0.785694958, 0.5411961, 0.275899379];
            _local2 = 0;
            _local7 = 0;
            while (_local7 < 8) {
                _local8 = 0;
                while (_local8 < 8) {
                    fdtbl_Y[_local2] = (1 / (((YTable[ZigZag[_local2]] * _local6[_local7]) * _local6[_local8]) * 8));
                    fdtbl_UV[_local2] = (1 / (((UVTable[ZigZag[_local2]] * _local6[_local7]) * _local6[_local8]) * 8));
                    _local2++;
                    _local8++;
                };
                _local7++;
            };
        }
        public function get contentType():String{
            return (CONTENT_TYPE);
        }
        private function writeSOF0(_arg1:int, _arg2:int):void{
            writeWord(65472);
            writeWord(17);
            writeByte(8);
            writeWord(_arg2);
            writeWord(_arg1);
            writeByte(3);
            writeByte(1);
            writeByte(17);
            writeByte(0);
            writeByte(2);
            writeByte(17);
            writeByte(1);
            writeByte(3);
            writeByte(17);
            writeByte(1);
        }
        private function computeHuffmanTbl(_arg1:Array, _arg2:Array):Array{
            var _local3:int;
            var _local4:int;
            var _local5:Array;
            var _local6:int;
            var _local7:int;
            _local3 = 0;
            _local4 = 0;
            _local5 = [];
            _local6 = 1;
            while (_local6 <= 16) {
                _local7 = 1;
                while (_local7 <= _arg1[_local6]) {
                    _local5[_arg2[_local4]] = new BitString();
                    _local5[_arg2[_local4]].val = _local3;
                    _local5[_arg2[_local4]].len = _local6;
                    _local4++;
                    _local3++;
                    _local7++;
                };
                _local3 = (_local3 * 2);
                _local6++;
            };
            return (_local5);
        }
        private function fDCTQuant(_arg1:Array, _arg2:Array):Array{
            var _local3:int;
            var _local4:int;
            var _local5:Number;
            var _local6:Number;
            var _local7:Number;
            var _local8:Number;
            var _local9:Number;
            var _local10:Number;
            var _local11:Number;
            var _local12:Number;
            var _local13:Number;
            var _local14:Number;
            var _local15:Number;
            var _local16:Number;
            var _local17:Number;
            var _local18:Number;
            var _local19:Number;
            var _local20:Number;
            var _local21:Number;
            var _local22:Number;
            var _local23:Number;
            _local3 = 0;
            _local4 = 0;
            while (_local4 < 8) {
                _local5 = (_arg1[(_local3 + 0)] + _arg1[(_local3 + 7)]);
                _local6 = (_arg1[(_local3 + 0)] - _arg1[(_local3 + 7)]);
                _local7 = (_arg1[(_local3 + 1)] + _arg1[(_local3 + 6)]);
                _local8 = (_arg1[(_local3 + 1)] - _arg1[(_local3 + 6)]);
                _local9 = (_arg1[(_local3 + 2)] + _arg1[(_local3 + 5)]);
                _local10 = (_arg1[(_local3 + 2)] - _arg1[(_local3 + 5)]);
                _local11 = (_arg1[(_local3 + 3)] + _arg1[(_local3 + 4)]);
                _local12 = (_arg1[(_local3 + 3)] - _arg1[(_local3 + 4)]);
                _local13 = (_local5 + _local11);
                _local14 = (_local5 - _local11);
                _local15 = (_local7 + _local9);
                _local16 = (_local7 - _local9);
                _arg1[(_local3 + 0)] = (_local13 + _local15);
                _arg1[(_local3 + 4)] = (_local13 - _local15);
                _local17 = ((_local16 + _local14) * 0.707106781);
                _arg1[(_local3 + 2)] = (_local14 + _local17);
                _arg1[(_local3 + 6)] = (_local14 - _local17);
                _local13 = (_local12 + _local10);
                _local15 = (_local10 + _local8);
                _local16 = (_local8 + _local6);
                _local18 = ((_local13 - _local16) * 0.382683433);
                _local19 = ((0.5411961 * _local13) + _local18);
                _local20 = ((1.306562965 * _local16) + _local18);
                _local21 = (_local15 * 0.707106781);
                _local22 = (_local6 + _local21);
                _local23 = (_local6 - _local21);
                _arg1[(_local3 + 5)] = (_local23 + _local19);
                _arg1[(_local3 + 3)] = (_local23 - _local19);
                _arg1[(_local3 + 1)] = (_local22 + _local20);
                _arg1[(_local3 + 7)] = (_local22 - _local20);
                _local3 = (_local3 + 8);
                _local4++;
            };
            _local3 = 0;
            _local4 = 0;
            while (_local4 < 8) {
                _local5 = (_arg1[(_local3 + 0)] + _arg1[(_local3 + 56)]);
                _local6 = (_arg1[(_local3 + 0)] - _arg1[(_local3 + 56)]);
                _local7 = (_arg1[(_local3 + 8)] + _arg1[(_local3 + 48)]);
                _local8 = (_arg1[(_local3 + 8)] - _arg1[(_local3 + 48)]);
                _local9 = (_arg1[(_local3 + 16)] + _arg1[(_local3 + 40)]);
                _local10 = (_arg1[(_local3 + 16)] - _arg1[(_local3 + 40)]);
                _local11 = (_arg1[(_local3 + 24)] + _arg1[(_local3 + 32)]);
                _local12 = (_arg1[(_local3 + 24)] - _arg1[(_local3 + 32)]);
                _local13 = (_local5 + _local11);
                _local14 = (_local5 - _local11);
                _local15 = (_local7 + _local9);
                _local16 = (_local7 - _local9);
                _arg1[(_local3 + 0)] = (_local13 + _local15);
                _arg1[(_local3 + 32)] = (_local13 - _local15);
                _local17 = ((_local16 + _local14) * 0.707106781);
                _arg1[(_local3 + 16)] = (_local14 + _local17);
                _arg1[(_local3 + 48)] = (_local14 - _local17);
                _local13 = (_local12 + _local10);
                _local15 = (_local10 + _local8);
                _local16 = (_local8 + _local6);
                _local18 = ((_local13 - _local16) * 0.382683433);
                _local19 = ((0.5411961 * _local13) + _local18);
                _local20 = ((1.306562965 * _local16) + _local18);
                _local21 = (_local15 * 0.707106781);
                _local22 = (_local6 + _local21);
                _local23 = (_local6 - _local21);
                _arg1[(_local3 + 40)] = (_local23 + _local19);
                _arg1[(_local3 + 24)] = (_local23 - _local19);
                _arg1[(_local3 + 8)] = (_local22 + _local20);
                _arg1[(_local3 + 56)] = (_local22 - _local20);
                _local3++;
                _local4++;
            };
            _local4 = 0;
            while (_local4 < 64) {
                _arg1[_local4] = Math.round((_arg1[_local4] * _arg2[_local4]));
                _local4++;
            };
            return (_arg1);
        }

    }
}//package com.fusioncharts.components.codec 

class BitString {

    public var len:int = 0;
    public var val:int = 0;

    public function BitString(){
        len = 0;
        val = 0;
        super();
    }
}
﻿package com.fusioncharts.components.codec {
    import flash.display.*;
    import flash.utils.*;
    import flash.geom.*;

    public class PDFEncoder {

        private var numPages:uint = 1;
        private var PDFBytes:ByteArray;
        private var iHeight:uint;
        private var xRefList:Array;
        private var iWidth:uint;
        private var arrExportData:Array;

        public function PDFEncoder(){
            arrExportData = [];
            numPages = 1;
            xRefList = [];
            PDFBytes = new ByteArray();
            super();
        }
        private function calculateXPos(_arg1:int):String{
            return (("0000000000".replace(new RegExp((("0{" + (_arg1 + "").length) + "}$")), _arg1) + " 00000 n \n"));
        }
        public function addPDFObjects(_arg1:String):void{
        }
        private function addImageToPDF(_arg1:int=0, _arg2:Boolean=true):ByteArray{
            var _local3:int;
            var _local4:ByteArray;
            var _local5:ByteArray;
            var _local6:int;
            var _local7:String;
            _local3 = (6 + (_arg1 * 3));
            _local4 = new ByteArray();
            _local5 = new ByteArray();
            _local5 = getBitmapData24(arrExportData[_arg1].stream);
            if (_arg2){
                _local5.compress();
            };
            _local6 = _local5.length;
            _local7 = (((((((_local3 + " 0 obj\n<<\n/Subtype /Image /ColorSpace /DeviceRGB /BitsPerComponent 8 /HDPI 72 /VDPI 72 /Filter /FlateDecode /Width ") + iWidth) + " /Height ") + iHeight) + " /Length ") + _local6) + " >>\nstream\n");
            _local4.writeUTFBytes(_local7);
            _local4.writeBytes(_local5);
            _local7 = "endstream\nendobj\n";
            _local4.writeUTFBytes(_local7);
            return (_local4);
        }
        private function getXObjResource(_arg1:int):String{
            return (((((((((((((_arg1 + 2) * 3) - 1) + " 0 obj\n<< /Length ") + (24 + ((iWidth + "") + iHeight).length)) + " >>\nstream\nq\n") + iWidth) + " 0 0 ") + iHeight) + " 0 0 cm\n/R") + (_arg1 + 1)) + " Do\nQ\nendstream\nendobj\n"));
        }
        private function getTrailer(_arg1:uint, _arg2:uint=7):String{
            return ((((("trailer\n<<\n/Size " + _arg2) + "\n/Root 2 0 R\n/Info 1 0 R\n>>\nstartxref\n") + _arg1) + "\n"));
        }
        private function getBitmapData24(_arg1:BitmapData):ByteArray{
            var _local2:ByteArray;
            var _local3:ByteArray;
            var _local4:uint;
            _local2 = _arg1.getPixels(new Rectangle(0, 0, _arg1.width, _arg1.height));
            _local3 = new ByteArray();
            _local4 = 0;
            while (_local4 < _local2.length) {
                if ((_local4 % 4) == 0){
                } else {
                    _local3.writeByte(_local2[_local4]);
                };
                _local4++;
            };
            return (_local3);
        }
        public function encode(_arg1:Boolean=true):ByteArray{
            var _local2:String;
            var _local3:int;
            var _local4:int;
            var _local5:String;
            var _local6:ByteArray;
            _local2 = "";
            numPages = arrExportData.length;
            xRefList.push("xref\n0 ");
            xRefList.push("0000000000 65535 f \n");
            _local2 = "%PDF-1.3\n%{FC}\n";
            PDFBytes.writeUTFBytes(_local2);
            _local2 = "1 0 obj<<\n/Author (FusionCharts)\n/Title (FusionCharts)\n/Creator (FusionCharts)\n>>\nendobj\n";
            xRefList.push(calculateXPos(PDFBytes.length));
            PDFBytes.writeUTFBytes(_local2);
            _local2 = "2 0 obj\n<< /Type /Catalog /Pages 3 0 R >>\nendobj\n";
            xRefList.push(calculateXPos(PDFBytes.length));
            PDFBytes.writeUTFBytes(_local2);
            _local2 = "3 0 obj\n<<  /Type /Pages /Kids [";
            _local3 = 0;
            while (_local3 < numPages) {
                _local2 = (_local2 + ((((_local3 + 1) * 3) + 1) + " 0 R\n"));
                _local3++;
            };
            _local2 = (_local2 + (("] /Count " + numPages) + " >>\nendobj\n"));
            xRefList.push(calculateXPos(PDFBytes.length));
            PDFBytes.writeUTFBytes(_local2);
            _local4 = 0;
            while (_local4 < numPages) {
                iWidth = arrExportData[_local4].meta.width;
                iHeight = arrExportData[_local4].meta.height;
                _local2 = ((((((((((((((_local4 + 2) * 3) - 2) + " 0 obj\n<<\n/Type /Page /Parent 3 0 R \n/MediaBox [ 0 0 ") + iWidth) + " ") + iHeight) + " ]\n/Resources <<\n/ProcSet [ /PDF ]\n/XObject <</R") + (_local4 + 1)) + " ") + ((_local4 + 2) * 3)) + " 0 R>>\n>>\n/Contents [ ") + (((_local4 + 2) * 3) - 1)) + " 0 R ]\n>>\nendobj\n");
                xRefList.push(calculateXPos(PDFBytes.length));
                PDFBytes.writeUTFBytes(_local2);
                xRefList.push(calculateXPos(PDFBytes.length));
                PDFBytes.writeUTFBytes(getXObjResource(_local4));
                _local6 = addImageToPDF(_local4, _arg1);
                xRefList.push(calculateXPos(PDFBytes.length));
                PDFBytes.writeBytes(_local6);
                _local4++;
            };
            xRefList[0] = (xRefList[0] + ((xRefList.length - 1) + "\n"));
            _local5 = getTrailer(PDFBytes.length, (xRefList.length - 1));
            PDFBytes.writeUTFBytes(xRefList.join(""));
            PDFBytes.writeUTFBytes(_local5);
            PDFBytes.writeUTFBytes("%%EOF\n");
            return (this.PDFBytes);
        }
        public function setBitmapData(_arg1:BitmapData, _arg2:int, _arg3:int):void{
            arrExportData.push({
                stream:_arg1,
                meta:{
                    width:_arg2,
                    height:_arg3
                }
            });
        }

    }
}//package com.fusioncharts.components.codec 
﻿package com.fusioncharts.components {

    public class FCChartData {

        private var chartNoData:String = "";
        private var invalidXML:String = "";
        private var xmlLoading:String = "";
        private var barLoading:String = "";
        private var renderingChart:String = "";
        private var paramDATA:String;
        private var loadDataError:String = "";
        private var hTrendDATA:String;
        private var xmlDATA:String;
        private var trendDATA:String;
        private var styleDATA:String;
        private var vTrendDATA:String;
        private var parsingData:String = "";

        public function FCChartData(){
            barLoading = "";
            xmlLoading = "";
            parsingData = "";
            chartNoData = "";
            renderingChart = "";
            loadDataError = "";
            invalidXML = "";
            super();
        }
        public function set FCStyles(_arg1:Object):void{
            var _local2:String;
            var _local3:String;
            var _local4:String;
            var _local5:Array;
            var _local6:String;
            var _local7:String;
            var _local8:Number;
            var _local9:String;
            var _local10:String;
            var _local11:String;
            var _local12:String;
            var _local13:String;
            var _local14:Number;
            var _local15:String;
            var _local16:String;
            var _local17:String;
            var _local18:String;
            var _local19:String;
            var _local20:String;
            var _local21:String;
            var _local22:String;
            styleDATA = "";
            if ((_arg1 is XML)){
                _local2 = "";
                _local3 = "";
                _local4 = XML(_arg1).children().children().toXMLString();
                _local5 = _local4.split("/>");
                _local8 = 0;
                while (_local8 < (_local5.length - 1)) {
                    if (_local5[_local8].toString().indexOf("name", 0) != -1){
                        _local2 = (((_local2 + "<style ") + _local5[_local8].substring(_local5[_local8].indexOf(" ", 0), _local5[_local8].length)) + "/>");
                    };
                    if (_local5[_local8].toString().indexOf("toObject", 0) != -1){
                        _local3 = (((_local3 + "<apply ") + _local5[_local8].substring(_local5[_local8].indexOf(" ", 0), _local5[_local8].length)) + "/>");
                    };
                    _local8++;
                };
                styleDATA = (((("<styles><definition>" + _local2) + "</definition><application>") + _local3) + "</application></styles>");
            } else {
                if (!isNaN(_arg1.length)){
                    _local6 = "";
                    _local7 = "";
                    _local8 = 0;
                    while (_local8 < _arg1.length) {
                        _local9 = "";
                        for (_local10 in _arg1[_local8]) {
                            _local9 = ((((_local9 + _local10) + "='") + String(_arg1[_local8][_local10]).split("'").join("&apos;")) + "'");
                        };
                        if (_local9.indexOf("name", 0) != -1){
                            _local6 = (((_local6 + "<style ") + _local9) + "/>");
                        };
                        if (_local9.indexOf("toObject", 0) != -1){
                            _local7 = (((_local7 + "<apply ") + _local9) + "/>");
                        };
                        _local8++;
                    };
                    styleDATA = (((("<styles><definition>" + _local6) + "</definition><application>") + _local7) + "</application></styles>");
                } else {
                    _local11 = "";
                    _local12 = "";
                    for (_local13 in _arg1) {
                        if (!isNaN(_arg1[_local13].length)){
                            _local14 = 0;
                            while (_local14 < _arg1[_local13].length) {
                                if (_local13 == "definition"){
                                    _local15 = "";
                                    for (_local16 in _arg1[_local13][_local14]) {
                                        if (_local16 == "types"){
                                            _local15 = (((_local15 + "type='") + String(_arg1[_local13][_local14][_local16]).split("'").join("&apos;")) + "'");
                                        } else {
                                            _local15 = ((((_local15 + _local16) + "='") + String(_arg1[_local13][_local14][_local16]).split("'").join("&apos;")) + "'");
                                        };
                                    };
                                    _local11 = (((_local11 + "<style ") + _local15) + "/>");
                                };
                                if (_local13 == "application"){
                                    _local17 = "";
                                    for (_local18 in _arg1[_local13][_local14]) {
                                        _local17 = ((((_local17 + _local18) + "='") + String(_arg1[_local13][_local14][_local18]).split("'").join("&apos;")) + "'");
                                    };
                                    _local12 = (((_local12 + "<apply ") + _local17) + "/>");
                                };
                                _local14++;
                            };
                        } else {
                            if (_local13 == "definition"){
                                _local19 = "";
                                for (_local20 in _arg1[_local13]) {
                                    if (_local20 == "types"){
                                        _local19 = (((_local19 + "type='") + String(_arg1[_local13][_local20]).split("'").join("&apos;")) + "'");
                                    } else {
                                        _local19 = ((((_local19 + _local20) + "='") + String(_arg1[_local13][_local20]).split("'").join("&apos;")) + "'");
                                    };
                                };
                                _local11 = (((_local11 + "<style ") + _local19) + "/>");
                            };
                            if (_local13 == "application"){
                                _local21 = "";
                                for (_local22 in _arg1[_local13]) {
                                    _local21 = ((((_local21 + _local22) + "='") + String(_arg1[_local13][_local22]).split("'").join("&apos;")) + "'");
                                };
                                _local12 = (((_local12 + "<apply ") + _local21) + "/>");
                            };
                        };
                    };
                    styleDATA = (((("<styles><definition>" + _local11) + "</definition><application>") + _local12) + "</application></styles>");
                };
            };
        }
        public function get FCStyles():Object{
            return (styleDATA);
        }
        public function get FChTrendLines():Object{
            return (hTrendDATA);
        }
        private function multiSeries(_arg1:Object):void{
            var _local2:String;
            var _local3:String;
            var _local4:String;
            var _local5:String;
            var _local6:Number;
            var _local7:Array;
            var _local8:Number;
            var _local9:Number;
            var _local10:String;
            var _local11:String;
            var _local12:String;
            var _local13:String;
            var _local14:String;
            var _local15:String;
            var _local16:String;
            var _local17:String;
            var _local18:String;
            var _local19:String;
            var _local20:String;
            var _local21:String;
            var _local22:Number;
            xmlDATA = "";
            _local2 = "";
            _local3 = "";
            _local4 = "";
            _local5 = "";
            _local6 = 0;
            _local7 = new Array();
            _local8 = 0;
            if ((_arg1 is XML)){
            } else {
                _local9 = 0;
                while (_local9 < _arg1.length) {
                    for (_local10 in _arg1[_local9]) {
                        if ((((((_local10 == "verticalLineColor")) || ((_local10 == "verticalLineThickness")))) || ((_local10 == "verticalLineAlpha")))){
                            _local11 = "";
                            for (_local12 in _arg1[_local9]) {
                                _local11 = ((((_local11 + _local12) + "='") + String(_arg1[_local9][_local12]).split("'").join("&apos;")) + "' ");
                            };
                            _local5 = _local11;
                        };
                        if (_local10 == "label"){
                            _local13 = "";
                            for (_local14 in _arg1[_local9]) {
                                _local13 = ((((_local13 + _local14) + "='") + String(_arg1[_local9][_local14]).split("'").join("&apos;")) + "' ");
                            };
                            _local2 = (_local2 + (("<category " + _local13) + "/>"));
                        };
                        if (_local10 == "vLine"){
                            _local15 = "";
                            for (_local16 in _arg1[_local9]) {
                                _local15 = ((((_local15 + _local16) + "='") + String(_arg1[_local9][_local16]).split("'").join("&apos;")) + "' ");
                            };
                            _local2 = (_local2 + (("<vLine " + _local15) + " />"));
                        };
                        if (_local10 == "dataset"){
                            _local8++;
                            _local3 = "";
                        };
                        if (_local10 == "seriesName"){
                            _local17 = "";
                            for (_local18 in _arg1[_local9]) {
                                _local17 = ((((_local17 + _local18) + "='") + String(_arg1[_local9][_local18]).split("'").join("&apos;")) + "' ");
                            };
                            _local3 = (_local3 + String((("<dataset " + _local17) + ">")));
                            _local4 = "";
                            _local6 = (_local9 + 1);
                            while (((((!((_arg1[_local6]["value"] == undefined))) || (!((_arg1[_local6]["x"] == undefined))))) || (!((_arg1[_local6]["y"] == undefined))))) {
                                _local19 = "";
                                for (_local20 in _arg1[_local6]) {
                                    _local19 = ((((_local19 + _local20) + "='") + String(_arg1[_local6][_local20]).split("'").join("&apos;")) + "' ");
                                };
                                _local4 = (_local4 + String((("<set " + _local19) + "/>")));
                                if (_local6 < (_arg1.length - 1)){
                                    _local6++;
                                } else {
                                    break;
                                };
                            };
                            _local3 = ((_local3 + _local4) + "</dataset>");
                            _local7[_local8] = _local3;
                        };
                    };
                    _local9++;
                };
                if (_local7.length == 1){
                    xmlDATA = ((((("<categories " + _local5) + " >") + _local2) + "</categories>") + _local7[0].toString());
                    _local5 = "";
                } else {
                    _local21 = "";
                    _local22 = 1;
                    while (_local22 <= _local7.length) {
                        _local21 = (_local21 + (("<dataset>" + _local7[_local22]) + "</dataset>"));
                        _local22++;
                    };
                    xmlDATA = ((((("<categories " + _local5) + " >") + _local2) + "</categories>") + _local21);
                    _local5 = "";
                };
            };
        }
        public function get XMLLoadingText():String{
            return (xmlLoading);
        }
        public function get InvalidXMLText():String{
            return (invalidXML);
        }
        public function set FCData(_arg1:Object):void{
            var _local2:Boolean;
            var _local3:String;
            var _local4:String;
            var _local5:String;
            var _local6:Boolean;
            var _local7:Number;
            var _local8:String;
            var _local9:String;
            xmlDATA = "";
            if ((_arg1 is XML)){
                _local2 = (((_arg1.categories[0] == null)) && ((_arg1.dataset[0] == null)));
                _local3 = XML(_arg1).children().toXMLString();
                if (_local2){
                    xmlDATA = parseSSXml(_local3);
                } else {
                    xmlDATA = parseMSXml(_local3);
                };
            } else {
                if (!isNaN(_arg1.length)){
                    _local4 = "";
                    _local5 = "";
                    _local6 = false;
                    _local7 = 0;
                    while (_local7 < _arg1.length) {
                        for (_local8 in _arg1[_local7]) {
                            if (_arg1[0]["value"] == undefined){
                                _local7 = _arg1.length;
                                _local6 = true;
                                multiSeries(_arg1);
                                break;
                            };
                            if (_arg1[_local7]["value"] == undefined){
                                _local5 = ((((_local5 + _local8) + "='") + String(_arg1[_local7][_local8]).split("'").join("&apos;")) + "'");
                            } else {
                                _local4 = ((((_local4 + _local8) + "='") + String(_arg1[_local7][_local8]).split("'").join("&apos;")) + "'");
                            };
                        };
                        if (_local5 != ""){
                            xmlDATA = (((xmlDATA + "<vline ") + _local5) + " />");
                        } else {
                            if (!_local6){
                                xmlDATA = (((xmlDATA + "<set ") + _local4) + " />");
                            };
                        };
                        _local4 = "";
                        _local5 = "";
                        _local7++;
                    };
                } else {
                    xmlDATA = "<set ";
                    for (_local9 in _arg1) {
                        xmlDATA = ((((xmlDATA + _local9) + "='") + String(_arg1[_local9]).split("'").join("&apos;")) + "'");
                    };
                    xmlDATA = (xmlDATA + "/>");
                };
                xmlDATA = (xmlDATA + "</chart>");
            };
        }
        public function get FCData():Object{
            return (xmlDATA);
        }
        public function set FChTrendLines(_arg1:Object):void{
            var _local2:String;
            var _local3:Array;
            var _local4:Number;
            var _local5:String;
            var _local6:String;
            hTrendDATA = "";
            if ((_arg1 is XML)){
                _local2 = XML(_arg1).children().toXMLString();
                _local3 = _local2.split("/>");
                _local4 = 0;
                while (_local4 < (_local3.length - 1)) {
                    hTrendDATA = (((hTrendDATA + "<line ") + _local3[_local4].substring(_local3[_local4].indexOf(" ", 0), _local3[_local4].length)) + "/>");
                    _local4++;
                };
                hTrendDATA = (("<hTrendlines>" + hTrendDATA) + "</hTrendlines>");
            } else {
                if (!isNaN(_arg1.length)){
                    _local4 = 0;
                    while (_local4 < _arg1.length) {
                        hTrendDATA = (hTrendDATA + "<line ");
                        for (_local5 in _arg1[_local4]) {
                            hTrendDATA = ((((hTrendDATA + _local5) + "='") + String(_arg1[_local4][_local5]).split("'").join("&apos;")) + "' ");
                        };
                        hTrendDATA = (hTrendDATA + "/>");
                        _local4++;
                    };
                    hTrendDATA = (("<hTrendlines>" + hTrendDATA) + "</hTrendlines>");
                } else {
                    hTrendDATA = (hTrendDATA + "<line ");
                    for (_local6 in _arg1) {
                        hTrendDATA = ((((hTrendDATA + _local6) + "='") + String(_arg1[_local6]).split("'").join("&apos;")) + "' ");
                    };
                    hTrendDATA = (hTrendDATA + "/>");
                    hTrendDATA = (("<hTrendlines>" + hTrendDATA) + "</hTrendlines>");
                };
            };
        }
        public function get FCvTrendLines():Object{
            return (vTrendDATA);
        }
        public function get RenderingChartText():String{
            return (renderingChart);
        }
        public function set InvalidXMLText(_arg1:String):void{
            invalidXML = _arg1;
        }
        public function get FCParams():Object{
            return (paramDATA);
        }
        public function set XMLLoadingText(_arg1:String):void{
            xmlLoading = _arg1;
        }
        public function get ParsingDataText():String{
            return (parsingData);
        }
        public function get ChartNoDataText():String{
            return (chartNoData);
        }
        public function set RenderingChartText(_arg1:String):void{
            renderingChart = _arg1;
        }
        private function parseSSXml(_arg1:String):String{
            var strXML:* = null;
            var strOut:* = null;
            var regExpReplaceFn:* = null;
            var xml:* = _arg1;
            strXML = xml;
            strOut = "";
            regExpReplaceFn = function (_arg1:String, _arg2="", _arg3=0, _arg4:String=""):String{
                if (_arg1.toLowerCase() == "<vline "){
                    return (_arg1);
                };
                return ("<set ");
            };
            strOut = strXML.replace(/<[^\>\s]+?\s/g, regExpReplaceFn);
            return ((strOut + "</chart>"));
        }
        public function set FCvTrendLines(_arg1:Object):void{
            var _local2:String;
            var _local3:Array;
            var _local4:Number;
            var _local5:String;
            var _local6:String;
            vTrendDATA = "";
            if ((_arg1 is XML)){
                _local2 = XML(_arg1).children().toXMLString();
                _local3 = _local2.split("/>");
                _local4 = 0;
                while (_local4 < (_local3.length - 1)) {
                    vTrendDATA = (((vTrendDATA + "<line ") + _local3[_local4].substring(_local3[_local4].indexOf(" ", 0), _local3[_local4].length)) + "/>");
                    _local4++;
                };
                vTrendDATA = (("<vTrendlines>" + vTrendDATA) + "</vTrendlines>");
            } else {
                if (!isNaN(_arg1.length)){
                    _local4 = 0;
                    while (_local4 < _arg1.length) {
                        vTrendDATA = (vTrendDATA + "<line ");
                        for (_local5 in _arg1[_local4]) {
                            vTrendDATA = ((((vTrendDATA + _local5) + "='") + String(_arg1[_local4][_local5]).split("'").join("&apos;")) + "' ");
                        };
                        vTrendDATA = (vTrendDATA + "/>");
                        _local4++;
                    };
                    vTrendDATA = (("<vTrendlines>" + vTrendDATA) + "</vTrendlines>");
                } else {
                    vTrendDATA = (vTrendDATA + "<line ");
                    for (_local6 in _arg1) {
                        vTrendDATA = ((((vTrendDATA + _local6) + "='") + String(_arg1[_local6]).split("'").join("&apos;")) + "' ");
                    };
                    vTrendDATA = (vTrendDATA + "/>");
                    vTrendDATA = (("<vTrendlines>" + vTrendDATA) + "</vTrendlines>");
                };
            };
        }
        public function set FCParams(_arg1:Object):void{
            var _local2:String;
            var _local3:Number;
            var _local4:String;
            var _local5:String;
            paramDATA = "";
            if ((_arg1 is XML)){
                _local2 = XML(_arg1).children().toXMLString();
                paramDATA = (("<chart " + _local2.substring(_local2.indexOf(" ", 0), (_local2.length - 2))) + ">");
            } else {
                if (!isNaN(_arg1.length)){
                    paramDATA = "<chart ";
                    _local3 = 0;
                    while (_local3 < _arg1.length) {
                        for (_local4 in _arg1[_local3]) {
                            paramDATA = ((((paramDATA + _local4) + "='") + String(_arg1[_local3][_local4]).split("'").join("&apos;")) + "' ");
                        };
                        _local3++;
                    };
                    paramDATA = (paramDATA + ">");
                } else {
                    paramDATA = "<chart ";
                    for (_local5 in _arg1) {
                        paramDATA = ((((paramDATA + _local5) + "='") + String(_arg1[_local5]).split("'").join("&apos;")) + "' ");
                    };
                    paramDATA = (paramDATA + ">");
                };
            };
        }
        public function set PBarLoadingText(_arg1:String):void{
            barLoading = _arg1;
        }
        private function parseMSXml(_arg1:String):String{
            var strXML:* = null;
            var strCats:* = null;
            var strDsets:* = null;
            var cats:* = null;
            var dsets:* = null;
            var regExpReplaceFn:* = null;
            var i:* = 0;
            var regExpReplaceFn2:* = null;
            var xml:* = _arg1;
            strXML = xml;
            strCats = "";
            strDsets = "";
            cats = strXML.match(/\<categories[\s\S]+?<\/categories\>/ig);
            dsets = strXML.match(/\<dataset[\s\S]+?<\/dataset\>/ig);
            regExpReplaceFn = function (_arg1:String, _arg2="", _arg3=0, _arg4:String=""):String{
                if ((((_arg1.toLowerCase() == "<vline ")) || ((_arg1.toLowerCase().search(/<categories/i) == 0)))){
                    return (_arg1);
                };
                return ("<category ");
            };
            i = 0;
            while (i < cats.length) {
                strCats = (strCats + cats[i].replace(/<[^\>\s]+?\s/g, regExpReplaceFn));
                i = (i + 1);
            };
            regExpReplaceFn2 = function (_arg1:String, _arg2="", _arg3=0, _arg4:String=""):String{
                if (_arg1.toLowerCase() == "<dataset "){
                    return (_arg1);
                };
                return ("<set ");
            };
            i = 0;
            while (i < dsets.length) {
                strDsets = (strDsets + dsets[i].replace(/<[^\>\s]+?\s/g, regExpReplaceFn2));
                i = (i + 1);
            };
            return (((strCats + strDsets) + "</chart>"));
        }
        public function set ParsingDataText(_arg1:String):void{
            parsingData = _arg1;
        }
        public function set LoadDataErrorText(_arg1:String):void{
            loadDataError = _arg1;
        }
        public function get LoadDataErrorText():String{
            return (loadDataError);
        }
        public function get PBarLoadingText():String{
            return (barLoading);
        }
        public function set ChartNoDataText(_arg1:String):void{
            chartNoData = _arg1;
        }
        public function set FCTrendLines(_arg1:Object):void{
            var _local2:String;
            var _local3:Array;
            var _local4:Number;
            var _local5:String;
            var _local6:String;
            trendDATA = "";
            if ((_arg1 is XML)){
                _local2 = XML(_arg1).children().toXMLString();
                _local3 = _local2.split("/>");
                _local4 = 0;
                while (_local4 < (_local3.length - 1)) {
                    trendDATA = (((trendDATA + "<line ") + _local3[_local4].substring(_local3[_local4].indexOf(" ", 0), _local3[_local4].length)) + "/>");
                    _local4++;
                };
                trendDATA = (("<trendlines>" + trendDATA) + "</trendlines>");
            } else {
                if (!isNaN(_arg1.length)){
                    _local4 = 0;
                    while (_local4 < _arg1.length) {
                        trendDATA = (trendDATA + "<line ");
                        for (_local5 in _arg1[_local4]) {
                            trendDATA = ((((trendDATA + _local5) + "='") + String(_arg1[_local4][_local5]).split("'").join("&apos;")) + "' ");
                        };
                        trendDATA = (trendDATA + "/>");
                        _local4++;
                    };
                    trendDATA = (("<trendlines>" + trendDATA) + "</trendlines>");
                } else {
                    trendDATA = (trendDATA + "<line ");
                    for (_local6 in _arg1) {
                        trendDATA = ((((trendDATA + _local6) + "='") + String(_arg1[_local6]).split("'").join("&apos;")) + "' ");
                    };
                    trendDATA = (trendDATA + "/>");
                    trendDATA = (("<trendlines>" + trendDATA) + "</trendlines>");
                };
            };
        }
        public function get FCTrendLines():Object{
            return (trendDATA);
        }

    }
}//package com.fusioncharts.components 
﻿package com.fusioncharts.components {
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.geom.*;
    import flash.text.*;
    import flash.system.*;
    import flash.net.*;
    import com.fusioncharts.components.codec.*;
    import com.utils.*;
    import com.data.*;
    import com.events.*;
    import flash.external.*;
    import flash.printing.*;

    public class FusionCharts extends Sprite {

        private static var isAir:Boolean;
        private static var callIndex:Object;
        private static var appId:String;
        private static var idArray:Object;

        private var success:Boolean;
        private var imgData:ByteArray;
        private var loader:Loader;
        private var resizeTimeout:uint;
        private var fileName:String;
        private var swc2chart:LocalConnection;
        private var chartType:String;
        private var uniConn:LocalConnection;
        private var connectCheck:Boolean;
        private var xmlDATA:String;
        private var chartMessage:Array;
        private var debug:String;
        private var folder:String;
        private var txtFormat:TextFormat;
        private var chartWidth:Number;
        private var rec:Rectangle;
        private var swc2chartConName:String;
        private var fileFormat:String;
        private var chartHeight:Number;
        private var _FCChartData:FCChartData;
        private var CSVData:String;
        private var signature:String;
        private var trendDATA:String;
        private var isURLprovided:Boolean;
        private var bgLoader:Loader;
        private var styleDATA:String;
        private var vTrendDATA:String;
        private var _xmlDATA:String;
        private var tmr:Timer;
        private var stageInit:Boolean = false;
        private var prevHeight:Number;
        private var logoProperties:Object;
        private var hTrendDATA:String;
        private var isChartChanged:Boolean;
        private var linkHandlerObject:Object;
        private var prevWidth:Number;
        private var bgProperties:Object;
        private var isFolderChanged:Boolean;
        private var isXMLprovided:Boolean;
        public var idSetter:Class;
        private var isLargeData:Boolean;
        private var useDefaultData:Boolean;
        private var isFlexDataProvided:Boolean;
        private var logoLoader:Loader;
        private var paramDATA:String;
        private var bgContainer:Sprite;
        private var errorData:String;
        private var largeDataArray:Array;
        private var loaderText:TextField;
        private var xmlURL:String;
        private var chart2swc:LocalConnection;
        private var xmlFromChart:String;

        public function FusionCharts():void{
            stageInit = false;
            _FCChartData = new FCChartData();
            super();
            createChildren();
            if (callIndex == null){
                callIndex = new Object();
            };
            tmr = new Timer(50);
            tmr.addEventListener(TimerEvent.TIMER, tmrWork);
            if (idArray == null){
                idArray = new Object();
            };
            swc2chart = new LocalConnection();
            chart2swc = new LocalConnection();
            chart2swc.client = this;
            chartWidth = 400;
            chartHeight = 300;
            xmlURL = "";
            xmlDATA = "";
            chartMessage = new Array();
            chartMessage["PBarLoadingText"] = "Loading chart. Please wait.";
            paramDATA = "<chart>";
            isFlexDataProvided = (connectCheck = (isChartChanged = (isFolderChanged = (isURLprovided = (isXMLprovided = false)))));
            debug = "0";
            chartType = "Column2D";
            folder = "fusioncharts/";
            errorData = "";
            this.addEventListener(Event.ENTER_FRAME, stageEnter);
            addEventListener(Event.REMOVED, removeHandler);
        }
        public function dataLoadedHandler():void{
            dispatchEvent(new FCEvent(FCEvent.FCDataLoadedEvent, this.name));
        }
        private function loaded(_arg1:Event):void{
            rec = new Rectangle(0, 0, chartWidth, chartHeight);
            loader.scrollRect = (logoLoader.scrollRect = (bgLoader.scrollRect = rec));
            bgContainer.scrollRect = rec;
            if (idArray[this.chartType] == undefined){
                idArray[this.chartType] = [];
            };
            if (idArray[this.chartType].indexOf(this, 0) == -1){
                idArray[this.chartType].push(this);
            };
            loader.x = 0;
            loader.y = 0;
            dispatchEvent(new FCEvent(FCEvent.FCLoadEvent, this.name));
            loaderText.text = "";
        }
        public function FCData(_arg1:Object):void{
            isFlexDataProvided = true;
            isURLprovided = false;
            isXMLprovided = false;
            _FCChartData.FCData = _arg1;
            _xmlDATA = String(_FCChartData.FCData);
        }
        public function get FCChartType():String{
            return (chartType);
        }
        private function getXMLdata():String{
            if (isFlexDataProvided){
                xmlDATA = (((((paramDATA + trendDATA) + vTrendDATA) + hTrendDATA) + styleDATA) + _xmlDATA);
                if (xmlDATA == null){
                    xmlDATA = "";
                };
                isFlexDataProvided = false;
            };
            return (xmlDATA);
        }
        public function FCStyles(_arg1:Object):void{
            isFlexDataProvided = true;
            isURLprovided = false;
            isXMLprovided = false;
            _FCChartData.FCStyles = _arg1;
            styleDATA = String(_FCChartData.FCStyles);
        }
        public function set FCChartType(_arg1:String):void{
            chartType = _arg1;
            isChartChanged = true;
        }
        private function _draw():void{
            var _local1:int;
            if (callIndex[this.chartType] == undefined){
                callIndex[this.chartType] = [];
            };
            callIndex[this.chartType].push(this);
            _local1 = callIndex[this.chartType].indexOf(this, 0);
            if (callIndex[this.chartType][(_local1 - 1)] == null){
                callIndex[this.chartType][_local1].draw();
            } else {
                tmr.start();
            };
        }
        public function executeHandler(_arg1:String):void{
            var _local2:Array;
            var _local3:String;
            var _local4:Number;
            _local2 = _arg1.split(",");
            _local3 = "";
            _local4 = 1;
            while (_local4 < _local2.length) {
                _local3 = (_local3 + _local2[_local4].toString());
                if (_local4 != (_local2.length - 1)){
                    _local3 = (_local3 + ",");
                };
                _local4++;
            };
            if (linkHandlerObject == null){
                var _local5 = root;
                _local5[_local2[0].toString()](_local3);
            } else {
                _local5 = linkHandlerObject;
                _local5[_local2[0].toString()](_local3);
            };
        }
        private function removeHandler(_arg1:Event):void{
            var e:* = _arg1;
            if ((e.target is FusionCharts)){
                removeEventListener(Event.REMOVED, removeHandler);
                removeEventListener(Event.ENTER_FRAME, stageEnter);
                removeEventListener(Event.ENTER_FRAME, appIdTrack);
                try {
                    if (swc2chartConName != null){
                        swc2chart.send(swc2chartConName, "_prepareGC");
                        chart2swc.close();
                        chart2swc = null;
                    };
                } catch(e:ErrorEvent) {
                };
            };
        }
        private function handleLargeData(_arg1:String):void{
            var _local2:String;
            var _local3:int;
            var _local4:int;
            var _local5:int;
            _local2 = (_arg1 + "#");
            largeDataArray = new Array();
            _local3 = (_local2.length / 20000);
            _local4 = (_local2.length % 20000);
            _local5 = 0;
            while (_local5 < _local3) {
                largeDataArray.push(_local2.slice((_local5 * 20000), ((_local5 + 1) * 20000)));
                _local5++;
            };
            largeDataArray.push(_local2.slice((_local2.length - _local4), _local2.length));
            sendLargeData(0);
        }
        private function resizer():void{
            if (((!((prevWidth == chartWidth))) || (!((prevHeight == chartHeight))))){
                swc2chart.send(swc2chartConName, "_resize", chartWidth, chartHeight);
                prevWidth = chartWidth;
                prevHeight = chartHeight;
                clearTimeout(resizeTimeout);
            };
            rec.width = chartWidth;
            rec.height = chartHeight;
            loader.scrollRect = (logoLoader.scrollRect = (bgLoader.scrollRect = rec));
            bgContainer.scrollRect = rec;
        }
        override public function set height(_arg1:Number):void{
            chartHeight = _arg1;
        }
        public function get FCDebugMode():Boolean{
            return (((debug)=="1") ? true : false);
        }
        public function initConn(_arg1:String, _arg2:String):void{
            if (idArray[_arg2] != undefined){
                idArray[_arg2][0].initChart(_arg1);
                idArray[_arg2].shift();
            };
        }
        private function LCConnectError():void{
            errorData = "LocalConnection Error !";
            dispatchEvent(new FCEvent(FCEvent.FCErrorEvent, errorData));
        }
        public function get FCDataXML():String{
            return (xmlDATA);
        }
        public function FCParams(_arg1:Object):void{
            isFlexDataProvided = true;
            isURLprovided = false;
            isXMLprovided = false;
            _FCChartData.FCParams = _arg1;
            paramDATA = String(_FCChartData.FCParams);
        }
        private function stageEnter(_arg1:Event):void{
            var _local2:Loader;
            if (this.stage != null){
                this.stageInit = true;
                removeEventListener(Event.ENTER_FRAME, stageEnter);
                loaderText = new TextField();
                txtFormat = new TextFormat();
                txtFormat.color = 0x666666;
                txtFormat.font = "Verdana";
                txtFormat.size = 10;
                addChild(loaderText);
                loaderText.autoSize = TextFieldAutoSize.LEFT;
                if (appId == null){
                    if (loaderInfo.url.indexOf("app:", 0) == -1){
                        appId = "";
                        _local2 = new Loader();
                        addChild(_local2);
                        _local2.load(new URLRequest("com/idsetter/idSetter.swf"));
                        this.addEventListener(Event.ENTER_FRAME, appIdTrack);
                    } else {
                        appId = new Date().getTime().toString();
                        isAir = true;
                        setUniConn();
                    };
                };
                _draw();
            };
        }
        private function initChart(_arg1:String):void{
            var a:* = 0;
            var chart2swcConName:* = null;
            var param:* = _arg1;
            a = callIndex[this.chartType].indexOf(this, 0);
            callIndex[this.chartType][a] = null;
            swc2chartConName = param;
            chart2swcConName = (appId + loader.name);
            if (getXMLdata().length < 20000){
                swc2chart.send(swc2chartConName, "initChart", chart2swcConName, xmlURL, getXMLdata(), chartWidth, chartHeight, debug, "Data.xml", "flex", "En", "domId", chartMessage["PBarLoadingText"], chartMessage["XMLLoadingText"], chartMessage["ParsingDataText"], chartMessage["RenderingChartText"], chartMessage["ChartNoDataText"], chartMessage["LoadDataErrorText"], chartMessage["InvalidXMLText"]);
            } else {
                isLargeData = true;
                swc2chart.send(swc2chartConName, "initChart", chart2swcConName, xmlURL, "<chart></chart>", chartWidth, chartHeight, debug, "Data.xml", "flex", "En", "domId", chartMessage["PBarLoadingText"], chartMessage["XMLLoadingText"], chartMessage["ParsingDataText"], chartMessage["RenderingChartText"], chartMessage["ChartNoDataText"], chartMessage["LoadDataErrorText"], chartMessage["InvalidXMLText"]);
            };
            try {
                chart2swc.connect(chart2swcConName);
            } catch(err:Error) {
                LCConnectError();
            };
            isChartChanged = (isFolderChanged = (isURLprovided = (isXMLprovided = (connectCheck = false))));
        }
        public function FCRender():void{
            if (!this.stageInit){
                return;
            };
            if (((((isChartChanged) && (!(connectCheck)))) || (isFolderChanged))){
                if (bgLoader.content != null){
                    bgLoader.unload();
                };
                if (loader.content != null){
                    loader.unload();
                };
                if (logoLoader.content != null){
                    logoLoader.unload();
                };
                removeBGChildren();
                isChartChanged = false;
                isFolderChanged = false;
                connectCheck = true;
                chart2swc.close();
                _draw();
            } else {
                if (isURLprovided){
                    try {
                        swc2chart.send(swc2chartConName, "_setDataURL", xmlURL);
                    } catch(err:Error) {
                        LCConnectError();
                    };
                    isURLprovided = false;
                } else {
                    if (isXMLprovided){
                        try {
                            if (xmlDATA.length < 20000){
                                swc2chart.send(swc2chartConName, "_setDataXML", xmlDATA);
                            } else {
                                handleLargeData(xmlDATA);
                            };
                        } catch(err:Error) {
                            LCConnectError();
                        };
                        isXMLprovided = false;
                    } else {
                        if (isFlexDataProvided){
                            try {
                                if (xmlDATA.length < 20000){
                                    swc2chart.send(swc2chartConName, "_setDataXML", getXMLdata());
                                } else {
                                    handleLargeData(getXMLdata());
                                };
                            } catch(err:Error) {
                                LCConnectError();
                            };
                            isFlexDataProvided = false;
                        } else {
                            try {
                                swc2chart.send(swc2chartConName, "_reInit");
                                swc2chart.send(swc2chartConName, "_render");
                            } catch(err:Error) {
                                LCConnectError();
                            };
                        };
                    };
                };
            };
        }
        private function logoCompleteHandler(_arg1:Event):void{
            logoLoader.alpha = logoProperties.alpha;
            logoLoader.scaleX = (logoLoader.scaleY = logoProperties.scale);
            switch (logoProperties.position.toUpperCase()){
                case "TR":
                    logoLoader.x = ((chartWidth - logoLoader.content.width) - logoProperties.thickness);
                    logoLoader.y = logoProperties.thickness;
                    break;
                case "BR":
                    logoLoader.x = ((chartWidth - logoLoader.content.width) - logoProperties.thickness);
                    logoLoader.y = ((chartHeight - logoLoader.content.height) - logoProperties.thickness);
                    break;
                case "BL":
                    logoLoader.x = logoProperties.thickness;
                    logoLoader.y = ((chartHeight - logoLoader.content.height) - logoProperties.thickness);
                    break;
                case "CC":
                    logoLoader.x = ((chartWidth / 2) - (logoLoader.content.width / 2));
                    logoLoader.y = ((chartHeight / 2) - (logoLoader.content.height / 2));
                    break;
                default:
                    logoLoader.x = logoProperties.thickness;
                    logoLoader.y = logoProperties.thickness;
            };
        }
        public function set FCDebugMode(_arg1:Boolean):void{
            debug = ((_arg1)==true) ? "1" : "0";
        }
        public function FCEnableLink():void{
            swc2chart.send(swc2chartConName, "_enableLink");
        }
        public function returnCSV(_arg1:String):void{
            CSVData = _arg1;
        }
        public function noDataToDisplayHandler():void{
            dispatchEvent(new FCEvent(FCEvent.FCNoDataToDisplayEvent, this.name));
        }
        private function bgCompleteHandler(_arg1:Event):void{
            var _local2:DisplayObject;
            var _local3:String;
            var _local4:DisplayObject;
            _local2 = Loader(_arg1.currentTarget.loader).content;
            _local3 = bgProperties.displayMode;
            if (_local3 != ImageUtils.DISPLAYMODE_TILE){
                bgContainer.addChild(_local2);
            };
            if ((((((_local3 == ImageUtils.DISPLAYMODE_NONE)) || ((_local3 == ImageUtils.DISPLAYMODE_CENTER)))) || ((_local3 == ImageUtils.DISPLAYMODE_TILE)))){
                ImageUtils.setPropOf(_local2, {
                    propName:"bgImageScale",
                    value:bgProperties.scale
                });
            };
            _local4 = ImageUtils.setDisplayMode(bgProperties.imageUrl, _local2, bgContainer, chartWidth, chartHeight, bgProperties.borderThickness, bgProperties.displayMode);
            ImageUtils.setPropOf(_local4, {
                propName:"bgSWFAlpha",
                value:bgProperties.alpha
            });
            if (((!((_local3 == ImageUtils.DISPLAYMODE_CENTER))) && (!((_local3 == ImageUtils.DISPLAYMODE_STRETCH))))){
                ImageUtils.setAlignment(_local4, chartWidth, chartHeight, bgProperties.borderThickness, bgProperties.vAlign, bgProperties.hAlign);
            };
        }
        public function returnXML(_arg1:String):void{
            xmlFromChart = _arg1;
        }
        public function dataXMLInvalidHandler():void{
            dispatchEvent(new FCEvent(FCEvent.FCDataXMLInvalidEvent, this.name));
        }
        public function renderHandler():void{
            if (isLargeData){
                isLargeData = false;
                handleLargeData(getXMLdata());
                return;
            };
            dispatchEvent(new FCEvent(FCEvent.FCRenderEvent, this.name));
            try {
                swc2chart.send(swc2chartConName, "_getCSVData");
                swc2chart.send(swc2chartConName, "_getSignature");
                swc2chart.send(swc2chartConName, "_getXML", false);
            } catch(err:Error) {
                LCConnectError();
            };
        }
        public function FCGetXMLData(_arg1:Boolean):String{
            if (_arg1){
                return (escape(xmlFromChart));
            };
            return (xmlFromChart);
        }
        public function sendLargeData(_arg1:Number):void{
            var index:* = _arg1;
            try {
                swc2chart.send(swc2chartConName, "_getLargeData", largeDataArray[index].toString(), index);
            } catch(err:Error) {
                LCConnectError();
            };
        }
        public function FCEnableSlicingMovement():void{
            swc2chart.send(swc2chartConName, "_enableSlicingMovement");
        }
        private function removeBGChildren():void{
            var _local1:int;
            if (bgContainer){
                _local1 = (bgContainer.numChildren - 1);
                while (_local1 > 0) {
                    if (bgContainer.getChildAt(_local1)){
                        bgContainer.removeChildAt(_local1);
                        _local1--;
                    };
                };
            };
        }
        public function exportHandler(_arg1:String, _arg2:String):void{
            fileName = ((_arg1)!="") ? _arg1 : "FusionCharts";
            fileFormat = _arg2.toUpperCase();
            export(fileFormat);
        }
        private function exportComplete(_arg1:Event):void{
            var _local2:Object;
            this.success = true;
            _local2 = new Object();
            _local2.fileName = this.fileName;
            _local2.fileFormat = this.fileFormat;
            _local2.success = this.success;
            dispatchEvent(new FCEvent(FCEvent.FCExported, _local2));
        }
        public function FChTrendLines(_arg1:Object):void{
            isFlexDataProvided = true;
            isURLprovided = false;
            isXMLprovided = false;
            _FCChartData.FChTrendLines = _arg1;
            hTrendDATA = String(_FCChartData.FChTrendLines);
        }
        public function set FCFlexFunctionsObject(_arg1:Object):void{
            linkHandlerObject = _arg1;
        }
        private function createChildren():void{
            if (!bgLoader){
                bgLoader = new Loader();
                addChild(bgLoader);
            };
            if (!bgContainer){
                bgContainer = new Sprite();
                addChild(bgContainer);
            };
            if (!loader){
                loader = new Loader();
                loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loaded);
                loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, loaderErrorHandler);
                addChild(loader);
            };
            if (!logoLoader){
                logoLoader = new Loader();
                addChild(logoLoader);
            };
        }
        public function set FCFolder(_arg1:String):void{
            if (_arg1 == ""){
                folder = "fusioncharts/";
            } else {
                if (_arg1 == "."){
                    folder = "";
                } else {
                    folder = (_arg1 + "/");
                };
            };
            isFolderChanged = true;
        }
        override public function get height():Number{
            return (chartHeight);
        }
        private function savingError():void{
            errorData = "Flash Player 10 (or higher) missing or the application is not compiled with Flex SDK 3.3 and FP 10 or illegal parameters provided.";
            dispatchEvent(new FCEvent(FCEvent.FCErrorEvent, errorData));
        }
        public function FCGetCSVData():String{
            return (CSVData);
        }
        public function set FCDataXML(_arg1:String):void{
            xmlDATA = _arg1;
            xmlURL = "";
            isFlexDataProvided = false;
            isURLprovided = false;
            isXMLprovided = true;
            if (bgLoader != null){
                bgLoader.unload();
            };
            if (logoLoader != null){
                logoLoader.unload();
            };
            removeBGChildren();
        }
        public function set FCUseDefaultData(_arg1:Boolean):void{
            useDefaultData = _arg1;
            if (_arg1){
                xmlURL = "";
            };
        }
        public function FCGetAttribute(_arg1:String):String{
            var _local2:XML;
            _local2 = new XML(xmlFromChart);
            return (_local2.attribute(_arg1));
        }
        private function draw():void{
            var _local1:URLRequest;
            if (!this.stageInit){
                return;
            };
            if (((!(loader.content)) && (!((chartType == null))))){
                defaultData();
                if (!isAir){
                    _local1 = new URLRequest(((folder + chartType) + ".swf"));
                } else {
                    _local1 = new URLRequest((((folder + chartType) + ".swf?appId=") + appId));
                };
                loader.load(_local1);
                loaderText.text = chartMessage["PBarLoadingText"];
                loaderText.setTextFormat(txtFormat);
                loaderText.x = ((chartWidth - loaderText.width) / 2);
                loaderText.y = ((chartHeight - loaderText.height) / 2);
            };
        }
        private function exportCancel(_arg1:Event):void{
            var _local2:Object;
            this.success = false;
            _local2 = new Object();
            _local2.fileName = this.fileName;
            _local2.fileFormat = this.fileFormat;
            _local2.success = this.success;
            dispatchEvent(new FCEvent(FCEvent.FCExported, _local2));
        }
        public function FCSetDataURL(_arg1:String):void{
            var value:* = _arg1;
            try {
                swc2chart.send(swc2chartConName, "_setDataURL", value);
                if (bgLoader != null){
                    bgLoader.unload();
                };
                if (logoLoader != null){
                    logoLoader.unload();
                };
                removeBGChildren();
            } catch(err:Error) {
                LCConnectError();
            };
        }
        public function FCGetSignature():String{
            return (signature);
        }
        public function returnSignature(_arg1:String):void{
            signature = _arg1;
        }
        public function bgLoaderHandler(_arg1:String, _arg2:String, _arg3:Number, _arg4:String, _arg5:String, _arg6:Number, _arg7:Number):void{
            bgProperties = new Object();
            bgProperties.imageUrl = _arg1;
            bgProperties.displayMode = _arg2;
            bgProperties.scale = _arg3;
            bgProperties.vAlign = _arg4;
            bgProperties.hAlign = _arg5;
            bgProperties.alpha = _arg6;
            bgProperties.borderThickness = _arg7;
            bgLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, bgCompleteHandler);
            bgLoader.load(new URLRequest(_arg1));
        }
        public function set dataProvider(_arg1:FCChartData):void{
            _xmlDATA = "";
            if (String(_arg1.FCData) != "null"){
                isFlexDataProvided = true;
                _xmlDATA = String(_arg1.FCData);
                if (bgLoader != null){
                    bgLoader.unload();
                };
                if (logoLoader != null){
                    logoLoader.unload();
                };
                removeBGChildren();
            };
            paramDATA = "<chart>";
            if (String(_arg1.FCParams) != "null"){
                paramDATA = String(_arg1.FCParams);
            };
            trendDATA = "";
            if (String(_arg1.FCTrendLines) != "null"){
                trendDATA = String(_arg1.FCTrendLines);
            };
            vTrendDATA = "";
            if (String(_arg1.FCvTrendLines) != "null"){
                vTrendDATA = String(_arg1.FCvTrendLines);
            };
            hTrendDATA = "";
            if (String(_arg1.FChTrendLines) != "null"){
                hTrendDATA = String(_arg1.FChTrendLines);
            };
            styleDATA = "";
            if (String(_arg1.FCStyles) != "null"){
                styleDATA = String(_arg1.FCStyles);
            };
            if (((!((_arg1.PBarLoadingText == null))) && (!((_arg1.PBarLoadingText == ""))))){
                chartMessage["PBarLoadingText"] = _arg1.PBarLoadingText;
            };
            if (_arg1.XMLLoadingText != null){
                chartMessage["XMLLoadingText"] = _arg1.XMLLoadingText;
            };
            if (_arg1.ParsingDataText != null){
                chartMessage["ParsingDataText"] = _arg1.ParsingDataText;
            };
            if (_arg1.ChartNoDataText != null){
                chartMessage["ChartNoDataText"] = _arg1.ChartNoDataText;
            };
            if (_arg1.RenderingChartText != null){
                chartMessage["RenderingChartText"] = _arg1.RenderingChartText;
            };
            if (_arg1.LoadDataErrorText != null){
                chartMessage["LoadDataErrorText"] = _arg1.LoadDataErrorText;
            };
            if (_arg1.InvalidXMLText != null){
                chartMessage["InvalidXMLText"] = _arg1.InvalidXMLText;
            };
        }
        private function setUniConn():void{
            uniConn = new LocalConnection();
            uniConn.client = this;
            try {
                uniConn.connect((appId + "fusionConn"));
            } catch(err:Error) {
            };
        }
        public function get FCFolder():String{
            return (folder);
        }
        private function appIdTrack(_arg1:Event):void{
            appId = Capabilities.serverString.toString().split("appId=")[1];
            if (((!((appId == null))) && (!((appId == ""))))){
                this.removeEventListener(Event.ENTER_FRAME, appIdTrack);
                setUniConn();
            };
        }
        private function defaultData():void{
            if (((((((useDefaultData) && (!(isXMLprovided)))) && ((xmlDATA == "")))) && (!(isURLprovided)))){
                if ((((((((((((((((((((((chartType == "Column2D")) || ((chartType == "Column3D")))) || ((chartType == "Pie3D")))) || ((chartType == "Pie2D")))) || ((chartType == "Line")))) || ((chartType == "Bar2D")))) || ((chartType == "Area2D")))) || ((chartType == "Doughnut2D")))) || ((chartType == "Doughnut3D")))) || ((chartType == "Spline")))) || ((chartType == "SplineArea")))){
                    xmlDATA = DefaultData.SINGLE_SERIES;
                };
                if ((((chartType == "Funnel")) || ((chartType == "Pyramid")))){
                    xmlDATA = DefaultData.FUNNEL_PYRAMID;
                };
                if ((((((((((((((((((((((((((((((((((chartType == "MSColumn2D")) || ((chartType == "MSColumn3D")))) || ((chartType == "MSLine")))) || ((chartType == "MSArea")))) || ((chartType == "MSBar2D")))) || ((chartType == "MSBar3D")))) || ((chartType == "MSSpline")))) || ((chartType == "MSSplineArea")))) || ((chartType == "ScrollColumn2D")))) || ((chartType == "ScrollLine2D")))) || ((chartType == "ScrollArea2D")))) || ((chartType == "LogMSColumn2D")))) || ((chartType == "LogMSLine")))) || ((chartType == "InverseMSArea")))) || ((chartType == "InverseMSColumn2D")))) || ((chartType == "InverseMSLine")))) || ((chartType == "Radar")))){
                    xmlDATA = DefaultData.MULTI_SERIES;
                };
                if ((((((((((((chartType == "StackedColumn2D")) || ((chartType == "StackedColumn3D")))) || ((chartType == "StackedArea2D")))) || ((chartType == "StackedBar2D")))) || ((chartType == "StackedBar3D")))) || ((chartType == "ScrollStackedColumn2D")))){
                    xmlDATA = DefaultData.STACKED_CHARTS;
                };
                if ((((((((chartType == "MSCombi2D")) || ((chartType == "MSColumnLine3D")))) || ((chartType == "MSCombi3D")))) || ((chartType == "ScrollCombi2D")))){
                    xmlDATA = DefaultData.COMBINATION_CHARTS;
                };
                if ((((((chartType == "MSCombiDY2D")) || ((chartType == "MSColumn3DLineDY")))) || ((chartType == "ScrollCombiDY2D")))){
                    xmlDATA = DefaultData.COMBINATION_DY_CHARTS;
                };
                if (chartType == "StackedColumn3DLineDY"){
                    xmlDATA = DefaultData.STACKEDCOLUMN3DLINEDY;
                };
                if (chartType == "Bubble"){
                    xmlDATA = DefaultData.BUBBLE_CHART;
                };
                if (chartType == "Scatter"){
                    xmlDATA = DefaultData.SCATTER_CHART;
                };
            };
        }
        override public function set width(_arg1:Number):void{
            chartWidth = _arg1;
        }
        public function FCView100Percent():void{
            swc2chart.send(swc2chartConName, "_animateToScale100");
        }
        public function FCvTrendLines(_arg1:Object):void{
            isFlexDataProvided = true;
            isURLprovided = false;
            isXMLprovided = false;
            _FCChartData.FCvTrendLines = _arg1;
            vTrendDATA = String(_FCChartData.FCvTrendLines);
        }
        public function FCExportChart(... _args):void{
            fileName = ((_args.length)>1) ? _args[1] : "FusionCharts";
            fileFormat = ((_args.length)>=1) ? _args[0].toString().toUpperCase() : "JPG";
            export(fileFormat);
        }
        public function get FCUseDefaultData():Boolean{
            return (useDefaultData);
        }
        public function get FCFlexFunctionsObject():Object{
            return (linkHandlerObject);
        }
        private function export(_arg1:String):void{
            var bmp:* = null;
            var matrix:* = null;
            var jpg:* = null;
            var png:* = null;
            var pdf:* = null;
            var jpg2:* = null;
            var saver:* = null;
            var _cases:* = _arg1;
            bmp = new BitmapData(chartWidth, chartHeight, true);
            matrix = new Matrix();
            bmp.draw(this, matrix);
            switch (_cases){
                case "JPG":
                    jpg = new JPEGEncoder(100);
                    imgData = jpg.encode(bmp);
                    fileFormat = "jpg";
                    break;
                case "PNG":
                    png = new PNGEncoder();
                    imgData = png.encode(bmp);
                    fileFormat = "png";
                    break;
                case "PDF":
                    pdf = new PDFEncoder();
                    pdf.setBitmapData(bmp, chartWidth, chartHeight);
                    imgData = pdf.encode();
                    fileFormat = "pdf";
                    break;
                default:
                    jpg2 = new JPEGEncoder(100);
                    imgData = jpg2.encode(bmp);
                    fileFormat = "jpg";
            };
            try {
                saver = new FileReference();
                saver.addEventListener(Event.COMPLETE, exportComplete);
                saver.addEventListener(Event.CANCEL, exportCancel);
                saver.save(imgData, ((fileName + ".") + fileFormat));
            } catch(err:Error) {
                savingError();
            };
        }
        public function linkClickHandler(_arg1:String):void{
            dispatchEvent(new FCEvent(FCEvent.FCClickEvent, _arg1));
        }
        override public function get width():Number{
            return (chartWidth);
        }
        private function preview(_arg1:Number, _arg2:Number):void{
        }
        private function tmrWork(_arg1:TimerEvent):void{
            var _local2:int;
            _local2 = callIndex[this.chartType].indexOf(this, 0);
            if (callIndex[this.chartType][(_local2 - 1)] == null){
                callIndex[this.chartType][_local2].draw();
                tmr.stop();
            };
        }
        public function logoLoaderHandler(_arg1:String, _arg2:String, _arg3:Number, _arg4:String, _arg5:Number, _arg6:Number):void{
            logoProperties = new Object();
            logoProperties.position = _arg2;
            logoProperties.alpha = (_arg3 / 100);
            logoProperties.link = _arg4;
            logoProperties.scale = (_arg5 / 100);
            logoProperties.thickness = _arg6;
            logoLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, logoCompleteHandler);
            if (logoProperties.link != ""){
                logoLoader.addEventListener(MouseEvent.CLICK, logoClickHandler);
            };
            logoLoader.load(new URLRequest(_arg1));
        }
        public function FCPrintChart():void{
            var printJob:* = null;
            printJob = new PrintJob();
            if (printJob.start()){
                try {
                    printJob.addPage(this);
                } catch(error:Error) {
                    LCConnectError();
                };
                printJob.send();
            };
        }
        public function set FCDataURL(_arg1:String):void{
            xmlURL = encodeURIComponent(_arg1);
            paramDATA = "<chart>";
            trendDATA = (vTrendDATA = (hTrendDATA = (styleDATA = (_xmlDATA = (xmlDATA = "")))));
            isFlexDataProvided = false;
            isURLprovided = true;
            isXMLprovided = false;
            if (bgLoader != null){
                bgLoader.unload();
            };
            if (logoLoader != null){
                logoLoader.unload();
            };
        }
        private function loaderErrorHandler(_arg1:Event):void{
            errorData = (chartType + ".swf file could not be found at the specified location. If you have specified custom path for chart SWF files, please make sure it is valid. Else, if you are using the default path (/FusionCharts), please make sure that you've copied the relevant chart SWF files in that folder.");
            dispatchEvent(new FCEvent(FCEvent.FCErrorEvent, errorData));
        }
        public function get FCDataURL():String{
            return (xmlURL);
        }
        private function logoClickHandler(_arg1:Event):void{
            navigateToURL(new URLRequest(logoProperties.link), "_blank");
        }
        public function FCSetDataXML(_arg1:String):void{
            var value:* = _arg1;
            try {
                if (value.length < 20000){
                    swc2chart.send(swc2chartConName, "_setDataXML", value);
                } else {
                    handleLargeData(value);
                };
                if (bgLoader != null){
                    bgLoader.unload();
                };
                if (logoLoader != null){
                    logoLoader.unload();
                };
                removeBGChildren();
            } catch(err:Error) {
                LCConnectError();
            };
        }
        public function dataLoadErrorHandler():void{
            dispatchEvent(new FCEvent(FCEvent.FCDataLoadErrorEvent, this.name));
        }
        public function FCTrendLines(_arg1:Object):void{
            isFlexDataProvided = true;
            isURLprovided = false;
            isXMLprovided = false;
            _FCChartData.FCTrendLines = _arg1;
            trendDATA = String(_FCChartData.FCTrendLines);
        }

    }
}//package com.fusioncharts.components 
﻿package com.settrade.optionswizard.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.optionswizard.enumuration.*;
    import com.settrade.streaming5.message.response.*;

    public class OptionsHistoricalChartResponseMessage extends ResponseMessage {

        protected var _instrumentId:String;
        protected var _period:OptionsWizardHistoricalChartPeriod;
        protected var _high:Number;
        protected var _low:Number;
        protected var _totalValue:Number;
        protected var _totalVolume:Number;
        protected var _close:Array;
        protected var _tradeDate:Array;

        public function OptionsHistoricalChartResponseMessage(requestMessage:RequestMessage, source:Source, instrumentId:String, period:OptionsWizardHistoricalChartPeriod, high:Number, low:Number, totalValue:Number, totalVolume:Number, close:Array, tradeDate:Array){
            super(MessageType.OPTIONS_HISTORICAL_CHART_RESPONSE, System.REALTIME, requestMessage, source);
            this._instrumentId = instrumentId;
            this._period = period;
            this._high = high;
            this._low = low;
            this._totalValue = totalValue;
            this._totalVolume = totalVolume;
            this._close = close;
            this._tradeDate = tradeDate;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get period():OptionsWizardHistoricalChartPeriod{
            return (this._period);
        }
        public function get high():Number{
            return (this._high);
        }
        public function get low():Number{
            return (this._low);
        }
        public function get totalValue():Number{
            return (this._totalValue);
        }
        public function get totalVolume():Number{
            return (this._totalVolume);
        }
        public function get close():Array{
            return (this._close);
        }
        public function get tradeDate():Array{
            return (this._tradeDate);
        }

    }
}//package com.settrade.optionswizard.message.response 
﻿package com.settrade.optionswizard.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.optionswizard.common.*;

    public class OptionsExpireDateResponseMessage extends ResponseMessage {

        protected var _mostActiveSeries:OptionsExpireDate;
        protected var _expireDateList:Array;

        public function OptionsExpireDateResponseMessage(requestMessage:RequestMessage, source:Source){
            super(MessageType.EXPIRE_DATE_RESPONSE, System.REALTIME, requestMessage, source);
            this._mostActiveSeries = null;
            this._expireDateList = new Array();
        }
        public function setMostActiveSeriesByIndex(index:int){
            this._mostActiveSeries = this._expireDateList[index];
        }
        public function addExpireDate(expireDate:OptionsExpireDate){
            this._expireDateList.push(expireDate);
        }
        public function get expireDateList():Array{
            var expireDate:OptionsExpireDate;
            var tmpArray:Array = new Array();
            for each (expireDate in this._expireDateList) {
                tmpArray.push(expireDate);
            };
            return (tmpArray);
        }
        public function get mostActiveSeries():OptionsExpireDate{
            return (this._mostActiveSeries);
        }

    }
}//package com.settrade.optionswizard.message.response 
﻿package com.settrade.optionswizard.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class OptionsCommissionFailResponseMessage extends ResponseMessage implements IFailMessage {

        protected var _message:String;

        public function OptionsCommissionFailResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.OPTIONS_COMMISSION_FAIL_RESPONSE, System.DERIV, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.optionswizard.message.response 
﻿package com.settrade.optionswizard.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.optionswizard.common.*;

    public class OptionsRecommendResponseMessage extends ResponseMessage {

        protected var _optionsRecommnedList:Array;
        protected var _timeAsOf:String;

        public function OptionsRecommendResponseMessage(requestMessage:RequestMessage, source:Source, timeAsOf:String){
            super(MessageType.OPTIONS_RECOMMEND_RESPONSE, System.REALTIME, requestMessage, source);
            this._timeAsOf = timeAsOf;
            this._optionsRecommnedList = new Array();
        }
        public function addOptionsRecommend(optionRecommend:OptionsRecommend){
            this._optionsRecommnedList.push(optionRecommend);
        }
        public function get optionsRecommnedList():Array{
            return (this._optionsRecommnedList);
        }
        public function get timeAsOf():String{
            return (this._timeAsOf);
        }

    }
}//package com.settrade.optionswizard.message.response 
﻿package com.settrade.optionswizard.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class OptionsCommissionResponseMessage extends ResponseMessage {

        protected var _percentCommission:Number;
        protected var _fixedCommission:Number;
        protected var _fee:Number;
        protected var _vatRate:Number;

        public function OptionsCommissionResponseMessage(requestMessage:RequestMessage, source:Source, percentCommission:Number, fixedCommission:Number, fee:Number, vatRate:Number){
            super(MessageType.OPTIONS_COMMISSION_RESPONSE, System.DERIV, requestMessage, source);
            this._percentCommission = percentCommission;
            this._fixedCommission = fixedCommission;
            this._fee = fee;
            this._vatRate = vatRate;
        }
        public function get percentCommission():Number{
            return (this._percentCommission);
        }
        public function get fixedCommission():Number{
            return (this._fixedCommission);
        }
        public function get fee():Number{
            return (this._fee);
        }
        public function get vatRate():Number{
            return (this._vatRate);
        }

    }
}//package com.settrade.optionswizard.message.response 
﻿package com.settrade.optionswizard.message.response.optionsinstrumentlist {
    import com.settrade.streaming5.enumuration.*;

    public class OptionsInstrumentValue {

        protected var _instrumentId:String;
        protected var _type:OptionsType;
        protected var _expireDate:String;

        public function OptionsInstrumentValue(instrumentId:String, type:OptionsType, expireDate:String){
            super();
            this._instrumentId = instrumentId;
            this._type = type;
            this._expireDate = expireDate;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get type():OptionsType{
            return (this._type);
        }
        public function get expireDate():String{
            return (this._expireDate);
        }

    }
}//package com.settrade.optionswizard.message.response.optionsinstrumentlist 
﻿package com.settrade.optionswizard.message.response.optionsinstrumentlist {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class OptionsInstrumentListResponseMessage extends ResponseMessage {

        protected var _optionsInstrumentList:Array;

        public function OptionsInstrumentListResponseMessage(requestMessage:RequestMessage, source:Source, optionsInstrumentList:Array){
            super(MessageType.OPTIONS_INSTRUMENT_LIST_RESPONSE, System.REALTIME, requestMessage, source);
            this._optionsInstrumentList = optionsInstrumentList;
        }
        public function get optionsInstrumentList():Array{
            return (this._optionsInstrumentList);
        }

    }
}//package com.settrade.optionswizard.message.response.optionsinstrumentlist 
﻿package com.settrade.optionswizard.manager {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.optionswizard.message.response.*;
    import com.settrade.optionswizard.common.*;
    import com.settrade.log.logger.*;

    public class OptionsWizardManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:OptionsWizardManager;

        protected var _optionsExpireDateResponseMessage:OptionsExpireDateResponseMessage;
        protected var _optionsCommissionResponseMessage:OptionsCommissionResponseMessage;
        protected var _marketStatus:String;

        public function OptionsWizardManager(){
            super();
            this._optionsExpireDateResponseMessage = null;
            this._optionsCommissionResponseMessage = new OptionsCommissionResponseMessage(null, null, 0, 0, 0, 0);
            this._marketStatus = "";
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():OptionsWizardManager{
            if (instance == null){
                instance = new (OptionsWizardManager)();
            };
            return (instance);
        }

        override public function startService():void{
            addEventListener(MessageReceiveEvent.OPTIONS_EXPIRE_DATE, this.onExpireDateHandler);
            addEventListener(MessageReceiveEvent.OPTIONS_COMMISSION, this.onCommissionHandler);
        }
        override public function stopService():void{
            removeEventListener(MessageReceiveEvent.OPTIONS_EXPIRE_DATE, this.onExpireDateHandler);
            removeEventListener(MessageReceiveEvent.OPTIONS_COMMISSION, this.onCommissionHandler);
        }
        private function onCommissionHandler(e:MessageReceiveEvent):void{
            logger.info("Update Commission Date");
            var message:OptionsCommissionResponseMessage = OptionsCommissionResponseMessage(e.message);
            this._optionsCommissionResponseMessage = message;
        }
        private function onExpireDateHandler(e:MessageReceiveEvent):void{
            logger.info("Update Expire Date");
            var message:OptionsExpireDateResponseMessage = OptionsExpireDateResponseMessage(e.message);
            this._optionsExpireDateResponseMessage = message;
        }
        public function get optionsExpireDateResponseMessage():OptionsExpireDateResponseMessage{
            return (this._optionsExpireDateResponseMessage);
        }
        public function get optionsCommissionResponseMessage():OptionsCommissionResponseMessage{
            return (this._optionsCommissionResponseMessage);
        }
        public function updateOptionsList(optionsList:Array):void{
            var optionsRecommend:OptionsRecommend;
            var i:*;
            for each (optionsRecommend in optionsList) {
                this.updateOptions(optionsRecommend);
            };
            i = 0;
            while (i < optionsList.length) {
                if (!this.isValidOptions(optionsList[i])){
                    optionsList.splice(i, 1);
                    i--;
                };
                i++;
            };
        }
        private function isValidOptions(optionsRecommend:OptionsRecommend){
            return ((((((optionsRecommend.numberOfContract > 0)) && ((optionsRecommend.profit > 0)))) && ((optionsRecommend.targetIndex > 0))));
        }
        private function calculateCostPerContactNoComm(multiplier:Number, premium:Number):Number{
            return ((multiplier * premium));
        }
        private function calculateCommNoVat(costPerContactNoComm:Number):Number{
            return (((this.optionsCommissionResponseMessage.fixedCommission + this.optionsCommissionResponseMessage.fee) + ((costPerContactNoComm * this.optionsCommissionResponseMessage.percentCommission) / 100)));
        }
        private function calculateCommWithVat(commNoVat:Number):Number{
            return ((commNoVat * this.optionsCommissionResponseMessage.vatRate));
        }
        private function calculateCostPerContract(costPerContactNoComm:Number, commWithVat:Number):Number{
            return ((costPerContactNoComm + commWithVat));
        }
        private function calculateNumberOfContract(budget:Number, costPerContact:Number, maxVolPerOrder:Number):int{
            var contractCount:int = int(Math.floor((budget / costPerContact)));
            if (contractCount > maxVolPerOrder){
                return (maxVolPerOrder);
            };
            return (contractCount);
        }
        private function calculateTotalCost(costPerContact:Number, numberOfContact:int):Number{
            return ((costPerContact * numberOfContact));
        }
        private function calculateProfit(targetIndex:Number, strikeprice:Number, multiplier:Number, numberOfContact:int, totalCost:Number, optionsType:OptionsType){
            var amount:Number = (((targetIndex - strikeprice) * multiplier) * numberOfContact);
            if (optionsType.isPut()){
                amount = (amount * -1);
            };
            var profit:Number = (amount - totalCost);
            return (profit);
        }
        private function calculateExpectReturn(profit:Number, totalCost:Number){
            return (((profit * 100) / totalCost));
        }
        public function calculateTotalCostFromData(multiplier:Number, premium:Number, numberOfContact:int):Number{
            var costPerContactNoComm:Number = this.calculateCostPerContactNoComm(multiplier, premium);
            var commNoVat:Number = this.calculateCommNoVat(costPerContactNoComm);
            var commWithVat:Number = this.calculateCommWithVat(commNoVat);
            var costPerContact:Number = this.calculateCostPerContract(costPerContactNoComm, commWithVat);
            var totalCost:Number = this.calculateTotalCost(costPerContact, numberOfContact);
            return (totalCost);
        }
        public function calculateExpectReturnFromData(multiplier:Number, premium:Number, numberOfContact:int, targetIndex:Number, strikeprice:Number, optionsType:OptionsType):Number{
            var costPerContactNoComm:Number = this.calculateCostPerContactNoComm(multiplier, premium);
            var commNoVat:Number = this.calculateCommNoVat(costPerContactNoComm);
            var commWithVat:Number = this.calculateCommWithVat(commNoVat);
            var costPerContact:Number = this.calculateCostPerContract(costPerContactNoComm, commWithVat);
            var totalCost:Number = this.calculateTotalCost(costPerContact, numberOfContact);
            var profit:Number = this.calculateProfit(targetIndex, strikeprice, multiplier, numberOfContact, totalCost, optionsType);
            var expectReturn:Number = this.calculateExpectReturn(profit, totalCost);
            return (expectReturn);
        }
        public function updateOptions(optionsRecommend:OptionsRecommend){
            var costPerContactNoComm:Number = this.calculateCostPerContactNoComm(optionsRecommend.multiplier, optionsRecommend.premium);
            var commNoVat:Number = this.calculateCommNoVat(costPerContactNoComm);
            var commWithVat:Number = this.calculateCommWithVat(commNoVat);
            var costPerContact:Number = this.calculateCostPerContract(costPerContactNoComm, commWithVat);
            var numberOfContact:int = this.calculateNumberOfContract(optionsRecommend.budget, costPerContact, optionsRecommend.maxVolPerOrder);
            var totalCost:Number = this.calculateTotalCost(costPerContact, numberOfContact);
            var profit:Number = this.calculateProfit(optionsRecommend.targetIndex, optionsRecommend.strikeprice, optionsRecommend.multiplier, numberOfContact, totalCost, optionsRecommend.optionsType);
            var expectReturn:Number = this.calculateExpectReturn(profit, totalCost);
            optionsRecommend.expectReturn = expectReturn;
            optionsRecommend.totalCost = totalCost;
            optionsRecommend.profit = profit;
            optionsRecommend.numberOfContract = numberOfContact;
        }
        public function updateMarketStatus(marketStatus:String):void{
            this._marketStatus = marketStatus;
        }
        public function getMarketStatus():String{
            return (this._marketStatus);
        }

    }
}//package com.settrade.optionswizard.manager 
﻿package com.settrade.optionswizard.enumuration {
    import flash.utils.*;

    public class OptionsWizardHistoricalChartPeriod {

        public static const NO_TYPE:OptionsWizardHistoricalChartPeriod = new OptionsWizardHistoricalChartPeriod("No Type", "");
;
        public static const M1:OptionsWizardHistoricalChartPeriod = new OptionsWizardHistoricalChartPeriod("One Month", "1M");
;
        public static const M3:OptionsWizardHistoricalChartPeriod = new OptionsWizardHistoricalChartPeriod("Three Month", "3M");
;
        public static const M6:OptionsWizardHistoricalChartPeriod = new OptionsWizardHistoricalChartPeriod("Six Month", "6M");
;

        public static var ALL:Array = new Array(NO_TYPE, M1, M3, M6);
        private static var feedMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _feedValue:String;

        public function OptionsWizardHistoricalChartPeriod(name:String, feedValue:String){
            super();
            this._name = name;
            this._feedValue = feedValue;
        }
        private static function initMap(){
            var type:OptionsWizardHistoricalChartPeriod;
            for each (type in ALL) {
                feedMap[type._feedValue] = type;
            };
        }
        public static function lookupFromFeed(feedValue:String):OptionsWizardHistoricalChartPeriod{
            var type:OptionsWizardHistoricalChartPeriod = feedMap[feedValue];
            if (type == null){
                return (NO_TYPE);
            };
            return (type);
        }

        public function get name():String{
            return (this._name);
        }
        public function get feedValue():String{
            return (this._feedValue);
        }
        public function toString():String{
            return ((("OptionsWizardHistoricalChartPeriod[" + this._name) + "]"));
        }
        public function isNoType():Boolean{
            return ((this == NO_TYPE));
        }

        initMap();
    }
}//package com.settrade.optionswizard.enumuration 
﻿package com.settrade.optionswizard.common {

    public class OptionsExpireDate {

        protected var _day:int;
        protected var _month:int;
        protected var _year:int;
        protected var _dayToExpired:int;

        public function OptionsExpireDate(day:int, month:int, year:int, dayToExpired:int){
            super();
            this._day = day;
            this._month = month;
            this._year = year;
            this._dayToExpired = dayToExpired;
        }
        public function get day():int{
            return (this._day);
        }
        public function get month():int{
            return (this._month);
        }
        public function get year():int{
            return (this._year);
        }
        public function get dayToExpired():int{
            return (this._dayToExpired);
        }

    }
}//package com.settrade.optionswizard.common 
﻿package com.settrade.optionswizard.common {
    import com.settrade.streaming5.enumuration.*;

    public class OptionsRecommend {

        protected var _targetIndex:Number;
        protected var _indexDiff:Number;
        protected var _expectReturn:Number;
        protected var _totalCost:Number;
        protected var _instrumentId:String;
        protected var _optionsType:OptionsType;
        protected var _expireDate:String;
        protected var _premium:Number;
        protected var _breakEvenPoint:Number;
        protected var _numberOfContract:int;
        protected var _profit:Number;
        protected var _multiplier:Number;
        protected var _strikeprice:Number;
        protected var _budget:Number;
        protected var _maxVolPerOrder:Number;

        public function OptionsRecommend(targetIndex:Number, indexDiff:Number, instrumentId:String, optionsType:OptionsType, expireDate:String, premium:Number, breakEvenPoint:Number, multiplier:Number, strikeprice:Number, budget:Number, maxVolPerOrder:Number, expectReturn:Number=0, totalCost:Number=0, numberOfContract:int=0, profit:Number=0){
            super();
            this._targetIndex = targetIndex;
            this._indexDiff = indexDiff;
            this._expectReturn = expectReturn;
            this._totalCost = totalCost;
            this._instrumentId = instrumentId;
            this._optionsType = optionsType;
            this._expireDate = expireDate;
            this._premium = premium;
            this._breakEvenPoint = breakEvenPoint;
            this._numberOfContract = numberOfContract;
            this._profit = profit;
            this._multiplier = multiplier;
            this._strikeprice = strikeprice;
            this._budget = budget;
            this._maxVolPerOrder = maxVolPerOrder;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get expectReturn():Number{
            return (this._expectReturn);
        }
        public function get targetIndex():Number{
            return (this._targetIndex);
        }
        public function get indexDiff():Number{
            return (this._indexDiff);
        }
        public function get totalCost():Number{
            return (this._totalCost);
        }
        public function get numberOfContract():int{
            return (this._numberOfContract);
        }
        public function get profit():Number{
            return (this._profit);
        }
        public function get optionsType():OptionsType{
            return (this._optionsType);
        }
        public function get expireDate():String{
            return (this._expireDate);
        }
        public function get premium():Number{
            return (this._premium);
        }
        public function get breakEvenPoint():Number{
            return (this._breakEvenPoint);
        }
        public function get multiplier():Number{
            return (this._multiplier);
        }
        public function get strikeprice():Number{
            return (this._strikeprice);
        }
        public function set numberOfContract(value:int):void{
            this._numberOfContract = value;
        }
        public function set profit(value:Number):void{
            this._profit = value;
        }
        public function get budget():Number{
            return (this._budget);
        }
        public function set expectReturn(value:Number):void{
            this._expectReturn = value;
        }
        public function set totalCost(value:Number):void{
            this._totalCost = value;
        }
        public function get maxVolPerOrder():Number{
            return (this._maxVolPerOrder);
        }

    }
}//package com.settrade.optionswizard.common 
﻿package com.settrade.lab.initializer {
    import flash.display.*;
    import flash.events.*;
    import com.settrade.streaming5.manager.*;
    import flash.utils.*;
    import com.settrade.streaming5.page.*;
    import flash.system.*;
    import flash.net.*;
    import com.settrade.log.logger.*;

    public class LabInitializer {

        protected static var instance:LabInitializer;
        private static var logger:Logger = new Logger(prototype.constructor);

        protected var LAB_URL:String = "lab.swf";
        protected var LAB_MAIN:String = "com.settrade.lab.Lab";
        protected var _root:DisplayObjectContainer;

        public function LabInitializer(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        static function getClass(className:String):Class{
            return (Class(getDefinitionByName(className)));
        }
        public static function getInstance():LabInitializer{
            if (instance == null){
                instance = new (LabInitializer)();
            };
            return (instance);
        }

        public function initialize():void{
            this.loadLab();
        }
        private function loadLab():void{
            var appDomain:ApplicationDomain = ApplicationDomain.currentDomain;
            var context:LoaderContext = new LoaderContext(false, appDomain);
            var loader:Loader = new Loader();
            loader.contentLoaderInfo.addEventListener(Event.COMPLETE, this.onLoaderCompleteHandler);
            loader.load(new URLRequest(this.LAB_URL), context);
        }
        private function onLoaderCompleteHandler(e:Event):void{
            var page:String;
            var classRef:Class;
            var lab:StreamingMovieClip;
            var pageList:Array = PageManager.getInstance().getAllCurrentPage();
            for each (page in pageList) {
                PageManager.getInstance().hidePage(page);
            };
            PageManager.getInstance().removeSource(this._root.getChildByName("pageHolder"));
            classRef = getClass(this.LAB_MAIN);
            lab = StreamingMovieClip(new (classRef)());
            PageManager.getInstance().loadInternalPage("LAB", lab, MovieClip(this._root.getChildByName("pageHolder")));
            PageManager.getInstance().showPage("LAB");
        }
        public function get root():DisplayObjectContainer{
            return (this._root);
        }
        public function set root(value:DisplayObjectContainer):void{
            this._root = value;
        }

    }
}//package com.settrade.lab.initializer 
﻿package com.settrade.log.message {
    import com.settrade.log.enumuration.*;
    import flash.globalization.*;

    public class LogMessage {

        protected static var dateFormat:DateTimeFormatter = new DateTimeFormatter(LocaleID.DEFAULT);

        protected var _time:Date;
        protected var _priority:Priority;
        protected var _message:String;
        protected var _source:String;

        public function LogMessage(source:String, priority:Priority, message:String){
            super();
            this._source = source;
            this._priority = priority;
            this._message = message;
            this._time = new Date();
        }
        public function get message():String{
            return (this._message);
        }
        public function get priority():Priority{
            return (this._priority);
        }
        public function get source():String{
            return (this._source);
        }
        public function get time():Date{
            return (this._time);
        }
        public function toString():String{
            return (((((((("[" + dateFormat.format(this.time)) + "][") + this.priority.name) + "][") + this.source) + "]") + this.message));
        }

        dateFormat.setDateTimePattern("yyyyMMdd_HH:mm:ss");
    }
}//package com.settrade.log.message 
﻿package com.settrade.log.enumuration {
    import flash.utils.*;
    import __AS3__.vec.*;

    public class Priority {

        public static const TRACE:Priority = new Priority("Trace", 0);
;
        public static const DEBUG:Priority = new Priority("Debug", 1);
;
        public static const INFO:Priority = new Priority("Info", 2);
;
        public static const WARN:Priority = new Priority("Warn", 3);
;
        public static const ERROR:Priority = new Priority("Error", 4);
;
        public static const FATAL:Priority = new Priority("Fatal", 5);
;

        public static var ALL:Vector.<Priority> = new Vector.<Priority>();
;
        private static var LOOKUP_MAP:Dictionary = new Dictionary();
        private static var _priority:Priority;

        protected var _name:String;
        protected var _level:int;

        public function Priority(name:String, level:int){
            super();
            this._name = name;
            this._level = level;
        }
        public static function lookupByName(name:String):Priority{
            return (LOOKUP_MAP[name]);
        }

        public function getHigherPriorityLog():Vector.<Priority>{
            var priority:Priority;
            var list:Vector.<Priority> = new Vector.<Priority>();
            for each (priority in ALL) {
                if (this.compareTo(priority) <= 0){
                    list.push(priority);
                };
            };
            return (list);
        }
        public function compareTo(priority:Priority):int{
            return ((this.level - priority.level));
        }
        public function equals(priority:Priority):Boolean{
            return ((this.compareTo(priority) == 0));
        }
        public function get name():String{
            return (this._name);
        }
        public function get level():int{
            return (this._level);
        }
        public function toString():String{
            return ((("Priority[" + this.name) + "]"));
        }

        ALL.push(TRACE, DEBUG, INFO, WARN, ERROR, FATAL);
        for each (_priority in ALL) {
            LOOKUP_MAP[_priority.name] = _priority;
        };
    }
}//package com.settrade.log.enumuration 
﻿package com.settrade.log.event {
    import flash.events.*;
    import com.settrade.log.message.*;

    public class LogEvent extends Event {

        public static const TRACE:String = "TRACE_LOG";
        public static const DEBUG:String = "DEBUG_LOG";
        public static const INFO:String = "INFO_LOG";
        public static const WARN:String = "WARN_LOG";
        public static const ERROR:String = "ERROR_LOG";
        public static const FATAL:String = "FATAL_LOG";

        protected var _message:LogMessage;

        public function LogEvent(type:String, message:LogMessage, bubbles:Boolean=false, cancelable:Boolean=false){
            super(type, bubbles, cancelable);
            this._message = message;
        }
        public function get message():LogMessage{
            return (this._message);
        }

    }
}//package com.settrade.log.event 
﻿package com.settrade.log.dispatcher {
    import flash.events.*;
    import com.settrade.log.enumuration.*;
    import __AS3__.vec.*;
    import com.settrade.log.event.*;
    import com.settrade.log.message.*;

    public class LogDispatcher extends EventDispatcher {

        protected static var instance:LogDispatcher = null;

        public function LogDispatcher(){
            super();
        }
        public static function getInstance():LogDispatcher{
            if (instance == null){
                instance = new (LogDispatcher)();
            };
            return (instance);
        }

        public function addLogListener(priority:Priority, listener:Function):void{
            var eventName:String;
            var priorityList:Vector.<Priority> = priority.getHigherPriorityLog();
            for each (priority in priorityList) {
                eventName = LogEventFactory.getLogEventNameByPriority(priority);
                super.addEventListener(eventName, listener);
            };
        }
        public function removeLogListener(priority:Priority, listener:Function):void{
            var eventName:String;
            var priorityList:Vector.<Priority> = priority.getHigherPriorityLog();
            for each (priority in priorityList) {
                eventName = LogEventFactory.getLogEventNameByPriority(priority);
                super.removeEventListener(eventName, listener);
            };
        }
        override public function removeEventListener(type:String, listener:Function, useCapture:Boolean=false):void{
            throw (new Error("Unsupported Function"));
        }
        override public function addEventListener(type:String, listener:Function, useCapture:Boolean=false, priority:int=0, useWeakReference:Boolean=false):void{
            throw (new Error("Unsupported Function"));
        }
        override public function dispatchEvent(event:Event):Boolean{
            if ((!(event) is LogEvent)){
                return (false);
            };
            return (super.dispatchEvent(event));
        }
        public function notifyLogMessage(message:LogMessage):void{
            this.dispatchEvent(LogEventFactory.getLogEvent(message));
        }

    }
}//package com.settrade.log.dispatcher 
﻿package com.settrade.log.dispatcher {
    import flash.utils.*;
    import com.settrade.log.enumuration.*;
    import com.settrade.log.event.*;
    import com.settrade.log.message.*;

    public class LogEventFactory {

        protected static var logeEventMap:Dictionary = new Dictionary();

        public static function getLogEvent(message:LogMessage):LogEvent{
            var eventName:String = getLogEventNameByPriority(message.priority);
            var event:LogEvent = new LogEvent(eventName, message);
            return (event);
        }
        public static function getLogEventNameByPriority(priority:Priority):String{
            return (logeEventMap[priority]);
        }

        logeEventMap[Priority.TRACE] = LogEvent.TRACE;
        logeEventMap[Priority.DEBUG] = LogEvent.DEBUG;
        logeEventMap[Priority.INFO] = LogEvent.INFO;
        logeEventMap[Priority.WARN] = LogEvent.WARN;
        logeEventMap[Priority.ERROR] = LogEvent.ERROR;
        logeEventMap[Priority.FATAL] = LogEvent.FATAL;
    }
}//package com.settrade.log.dispatcher 
﻿package com.settrade.log.receiver {
    import com.settrade.log.enumuration.*;
    import com.settrade.log.dispatcher.*;

    public class LogReceiver {

        protected var _priority:Priority;
        protected var dispatcher:LogDispatcher;
        protected var _listener:Function;

        public function LogReceiver(priority:Priority, listener:Function, startOnInit:Boolean=true){
            super();
            this._priority = priority;
            this._listener = listener;
            this.dispatcher = LogDispatcher.getInstance();
            if (startOnInit){
                this.startService();
            };
        }
        public function get priority():Priority{
            return (this._priority);
        }
        public function set priority(value:Priority):void{
            this.stopService();
            this._priority = value;
            this.startService();
        }
        public function set listener(value:Function):void{
            this.stopService();
            this._listener = value;
            this.startService();
        }
        public function startService():void{
            this.dispatcher.addLogListener(this._priority, this._listener);
        }
        public function stopService():void{
            this.dispatcher.removeLogListener(this._priority, this._listener);
        }

    }
}//package com.settrade.log.receiver 
﻿package com.settrade.log.page {
    import fl.controls.*;
    import flash.events.*;
    import flash.utils.*;
    import com.settrade.log.enumuration.*;
    import __AS3__.vec.*;
    import com.settrade.log.event.*;
    import com.settrade.log.message.*;
    import flash.text.*;
    import com.settrade.streaming5.page.*;
    import fl.data.*;
    import fl.controls.dataGridClasses.*;
    import com.settrade.log.receiver.*;
    import flash.globalization.*;

    public class LogViewer extends StreamingMovieClip {

        private static var dateFormat:DateTimeFormatter = new DateTimeFormatter(LocaleID.DEFAULT);

        protected var _priority:Priority;
        protected var logList:Vector.<LogMessage>;
        protected var sourceDictionary:Dictionary;
        protected var logProvider:DataProvider;
        protected var sourceProvider:DataProvider;
        protected var logDataGrid:DataGrid;
        protected var logDetail:TextArea;
        protected var sourceComboBox:ComboBox;
        protected var priorityCheckBoxList:Vector.<CheckBox>;
        protected var iWidth:Number;
        protected var iHeight:Number;
        protected var filterSource:String;
        protected var filterPriority:Vector.<Priority>;
        protected var logReceiver:LogReceiver;

        public function LogViewer(priority:Priority=null, width:Number=400, height:Number=300){
            super();
            if (priority == null){
                this._priority = Priority.TRACE;
            } else {
                this._priority = priority;
            };
            this.filterSource = "";
            this.filterPriority = new Vector.<Priority>();
            for each (priority in Priority.ALL) {
                this.filterPriority.push(priority);
            };
            this.logList = new Vector.<LogMessage>();
            this.sourceDictionary = new Dictionary();
            this.logProvider = new DataProvider();
            this.sourceProvider = new DataProvider();
            this.logReceiver = new LogReceiver(this._priority, this.receiveLogHandler, false);
            this.initComponent();
            this.resize(width, height);
        }
        private function receiveLogHandler(event:LogEvent):void{
            this.addLog(event.message);
        }
        public function resize(width:Number, height:Number):void{
            this.iWidth = width;
            this.iHeight = height;
            this.adjustPosition();
        }
        private function adjustPosition():void{
            var checkBox:CheckBox;
            var checkBoxPositionX:Number = 0;
            var sourceComboBoxY:Number = 0;
            var logDataGridY:Number = 0;
            var logDataGridHeight:Number = 0;
            var checkBoxWidth:Number = 35;
            for each (checkBox in this.priorityCheckBoxList) {
                checkBox.width = (checkBox.textField.textWidth + checkBoxWidth);
                if ((checkBoxPositionX + checkBox.width) > this.iWidth){
                    checkBox.x = 0;
                } else {
                    checkBox.x = checkBoxPositionX;
                };
                checkBoxPositionX = (checkBoxPositionX + checkBox.width);
                sourceComboBoxY = checkBox.height;
            };
            this.sourceComboBox.y = sourceComboBoxY;
            this.sourceComboBox.width = this.iWidth;
            logDataGridY = ((this.sourceComboBox.y + this.sourceComboBox.height) + 5);
            logDataGridHeight = ((this.iHeight - logDataGridY) / 2);
            this.logDataGrid.y = logDataGridY;
            this.logDataGrid.setSize(this.iWidth, logDataGridHeight);
            this.logDetail.y = (logDataGridY + logDataGridHeight);
            this.logDetail.setSize(this.iWidth, logDataGridHeight);
        }
        private function initComponent():void{
            this.initLogDataGrid();
            this.initLogDetail();
            this.initSourceCombobox();
            this.initPriorityCheckBoxList();
        }
        private function initSourceCombobox():void{
            this.sourceComboBox = new ComboBox();
            this.sourceComboBox.dataProvider = this.sourceProvider;
            this.sourceProvider.addItem({
                label:"--ALL--",
                data:""
            });
            this.sourceComboBox.addEventListener(Event.CHANGE, this.changeSourceComboBoxHandler);
            this.addChild(this.sourceComboBox);
        }
        private function initLogDataGrid():void{
            this.logDataGrid = new DataGrid();
            var timeColumn:DataGridColumn = new DataGridColumn("Time");
            var priorityColumn:DataGridColumn = new DataGridColumn("Priority");
            var sourceColumn:DataGridColumn = new DataGridColumn("Source");
            this.logDataGrid.addColumn(timeColumn);
            this.logDataGrid.addColumn(priorityColumn);
            this.logDataGrid.addColumn(sourceColumn);
            this.logDataGrid.dataProvider = this.logProvider;
            this.logDataGrid.addEventListener(Event.CHANGE, this.changeDatagridHandler);
            this.addChild(this.logDataGrid);
        }
        private function initLogDetail():void{
            this.logDetail = new TextArea();
            this.logDetail.editable = false;
            this.addChild(this.logDetail);
        }
        private function initPriorityCheckBoxList():void{
            var priority:Priority;
            var checkBox:CheckBox;
            this.priorityCheckBoxList = new Vector.<CheckBox>();
            for each (priority in Priority.ALL) {
                checkBox = this.initPriorityCheckBox(priority);
                this.addChild(checkBox);
                this.priorityCheckBoxList.push(checkBox);
            };
        }
        private function initPriorityCheckBox(priority:Priority):CheckBox{
            var checkBox:CheckBox = new CheckBox();
            checkBox.selected = true;
            checkBox.label = priority.name;
            checkBox.addEventListener(Event.CHANGE, this.changeCheckBoxHandler);
            return (checkBox);
        }
        private function changeCheckBoxHandler(e:Event):void{
            var index:int;
            var checkbox:CheckBox = CheckBox(e.target);
            var priority:Priority = Priority.lookupByName(checkbox.label);
            if (checkbox.selected){
                this.filterPriority.push(priority);
            } else {
                index = this.filterPriority.indexOf(priority);
                if (index != -1){
                    this.filterPriority.splice(index, 1);
                };
            };
            this.refresh();
        }
        private function changeSourceComboBoxHandler(e:Event):void{
            this.filterSource = this.sourceComboBox.selectedItem.data;
            this.refresh();
        }
        private function changeDatagridHandler(e:Event):void{
            var log:LogMessage = this.logDataGrid.selectedItem.Data;
            this.showLog(log);
        }
        public function refresh(){
            var log:LogMessage;
            this.clearLogProvider();
            var filterLogList:Vector.<LogMessage> = this.filterLog();
            for each (log in filterLogList) {
                this.addLogProvider(log);
            };
        }
        public function setFontStyle(format:TextFormat):void{
            var checkBox:CheckBox;
            this.sourceComboBox.setStyle("textFormat", format);
            this.sourceComboBox.dropdown.setRendererStyle("textFormat", format);
            for each (checkBox in this.priorityCheckBoxList) {
                checkBox.setStyle("textFormat", format);
            };
            this.logDataGrid.setRendererStyle("textFormat", format);
        }
        protected function addLog(log:LogMessage){
            this.logList.push(log);
            if (!this.haveSource(log.source)){
                this.addNewSource(log.source);
            };
            if (this.isValidLog(log)){
                this.addLogProvider(log);
            };
        }
        protected function haveSource(source:String):Boolean{
            return (!((this.sourceDictionary[source] == null)));
        }
        protected function addNewSource(source:String):void{
            this.sourceDictionary[source] = source;
            this.sourceProvider.addItem({
                label:source,
                data:source
            });
            this.sourceProvider.sortOn("label");
        }
        protected function addLogProvider(log:LogMessage){
            var itemObj:Object = {
                Time:dateFormat.format(log.time),
                Source:log.source,
                Priority:log.priority.name,
                Data:log
            };
            this.logProvider.addItemAt(itemObj, 0);
        }
        protected function filterLog():Vector.<LogMessage>{
            var log:LogMessage;
            var filterList:Vector.<LogMessage> = new Vector.<LogMessage>();
            for each (log in this.logList) {
                if (this.isValidLog(log)){
                    filterList.push(log);
                };
            };
            return (filterList);
        }
        protected function isValidLog(log:LogMessage):Boolean{
            var priority:Priority;
            if (((!((this.filterSource == ""))) && (!((this.filterSource == log.source))))){
                return (false);
            };
            for each (priority in this.filterPriority) {
                if (priority == log.priority){
                    return (true);
                };
            };
            return (false);
        }
        public function clear(){
            this.clearLogList();
            this.clearLogProvider();
            this.clearSourceProvider();
        }
        protected function showLog(log:LogMessage){
            this.logDetail.text = log.message;
        }
        protected function clearLogProvider(){
            this.logProvider.removeAll();
        }
        protected function clearSourceProvider(){
            this.sourceProvider.removeAll();
            this.sourceProvider.addItem({
                label:"--ALL--",
                data:""
            });
        }
        protected function clearLogList(){
            this.logList = new Vector.<LogMessage>();
        }
        public function get priority():Priority{
            return (this._priority);
        }
        public function set priority(value:Priority):void{
            this._priority = value;
            this.logReceiver.priority = value;
        }
        override public function startService():void{
            this.logReceiver.startService();
        }
        override public function stopService():void{
            this.logReceiver.stopService();
            this.clear();
        }
        override public function set width(value:Number):void{
            this.iWidth = value;
            this.adjustPosition();
        }
        override public function set height(value:Number):void{
            this.iHeight = value;
            this.adjustPosition();
        }

        dateFormat.setDateTimePattern("yyyyMMdd_HH:mm:ss");
    }
}//package com.settrade.log.page 
﻿package com.settrade.log.page {
    import fl.controls.*;
    import com.settrade.log.enumuration.*;
    import com.settrade.log.event.*;
    import com.settrade.log.message.*;
    import com.settrade.streaming5.page.*;
    import com.settrade.log.receiver.*;

    public class LogConsole extends StreamingMovieClip {

        protected var consoleTextArea:TextArea;
        protected var _priority:Priority;
        protected var receiver:LogReceiver;
        protected var _size:int;

        public function LogConsole(priority:Priority=null, width:Number=400, height:Number=200, size:int=10000){
            super();
            if (priority == null){
                this._priority = Priority.INFO;
            } else {
                this._priority = priority;
            };
            this._size = size;
            this.receiver = new LogReceiver(this._priority, this.receiveLogHandler);
            this.initComponent();
            this.resize(width, height);
        }
        private function initComponent():void{
            this.initTextArea();
        }
        private function initTextArea():void{
            this.consoleTextArea = new TextArea();
            this.consoleTextArea.editable = true;
            this.addChild(this.consoleTextArea);
        }
        public function get priority():Priority{
            return (this._priority);
        }
        public function set priority(value:Priority):void{
            this._priority = value;
            this.receiver.priority = this._priority;
        }
        public function receiveLogHandler(event:LogEvent):void{
            this.writeLog(event.message);
        }
        public function writeLog(log:LogMessage):void{
            this.consoleTextArea.text = ((log.toString() + "\n") + this.consoleTextArea.text);
            this.clearExceedLogSize();
        }
        public function clearExceedLogSize(){
            if (this.consoleTextArea.text.length > this.size){
                this.consoleTextArea.text = this.consoleTextArea.text.substr(0, this.size);
            };
        }
        override public function startService():void{
            this.receiver.startService();
        }
        override public function stopService():void{
            this.receiver.stopService();
        }
        override public function set height(value:Number):void{
            this.consoleTextArea.height = value;
        }
        override public function set width(value:Number):void{
            this.consoleTextArea.width = value;
        }
        public function get size():int{
            return (this._size);
        }
        public function set size(value:int):void{
            this._size = value;
        }
        public function resize(width:Number, height:Number):void{
            this.width = width;
            this.height = height;
        }

    }
}//package com.settrade.log.page 
﻿package com.settrade.log.logger {
    import flash.utils.*;
    import com.settrade.log.enumuration.*;
    import com.settrade.log.message.*;
    import com.settrade.log.dispatcher.*;

    public class Logger {

        protected var _source:String;
        protected var dispatcher:LogDispatcher;

        public function Logger(source=null){
            var classNameFull:String;
            var index:int;
            super();
            if (source == null){
                this._source = "";
            } else {
                if ((source is String)){
                    this._source = source;
                } else {
                    classNameFull = getQualifiedClassName(source);
                    index = classNameFull.indexOf("::");
                    if (index != -1){
                        this._source = classNameFull.substr((index + 2));
                    } else {
                        this._source = classNameFull;
                    };
                };
            };
            this.dispatcher = LogDispatcher.getInstance();
        }
        public function trace(message:String){
            var log:LogMessage = new LogMessage(this.source, Priority.TRACE, message);
            this.dispatcher.notifyLogMessage(log);
        }
        public function debug(message:String){
            var log:LogMessage = new LogMessage(this.source, Priority.DEBUG, message);
            this.dispatcher.notifyLogMessage(log);
        }
        public function info(message:String){
            var log:LogMessage = new LogMessage(this.source, Priority.INFO, message);
            this.dispatcher.notifyLogMessage(log);
        }
        public function warn(message:String){
            var log:LogMessage = new LogMessage(this.source, Priority.WARN, message);
            this.dispatcher.notifyLogMessage(log);
        }
        public function error(message:String){
            var log:LogMessage = new LogMessage(this.source, Priority.ERROR, message);
            this.dispatcher.notifyLogMessage(log);
        }
        public function fatal(message:String){
            var log:LogMessage = new LogMessage(this.source, Priority.FATAL, message);
            this.dispatcher.notifyLogMessage(log);
        }
        public function get source():String{
            return (this._source);
        }
        public function set source(value:String):void{
            this._source = value;
        }

    }
}//package com.settrade.log.logger 
﻿package com.settrade.streaming5.sound {
    import flash.media.*;

    public dynamic class AlertSound extends Sound {

    }
}//package com.settrade.streaming5.sound 
﻿package com.settrade.streaming5.message {

    public interface IFailMessage {

        function get id():Number;
        function get requestId():Number;
        function get message():String;

    }
}//package com.settrade.streaming5.message 
﻿package com.settrade.streaming5.message {
    import com.settrade.streaming5.enumuration.*;

    public class Message implements IMessage {

        private static var GLOBAL_ID:Number = 0;

        protected var _type:MessageType;
        protected var _side:MessageSide;
        protected var _system:System;
        protected var _id:Number;

        public function Message(type:MessageType, side:MessageSide, system:System){
            super();
            this._type = type;
            this._side = side;
            this._system = system;
            this._id = GLOBAL_ID++;
        }
        public function get type():MessageType{
            return (this._type);
        }
        public function get side():MessageSide{
            return (this._side);
        }
        public function get system():System{
            return (this._system);
        }
        public function get id():Number{
            return (this._id);
        }

    }
}//package com.settrade.streaming5.message 
﻿package com.settrade.streaming5.message {

    public interface IRegisterable {

        function get registList():Array;

    }
}//package com.settrade.streaming5.message 
﻿package com.settrade.streaming5.message.customized.b004.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.connection.common.*;

    public class BullishBearishSpecificTabRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _cid:String;
        protected var _uid:String;
        protected var _pwd:String;
        protected var _event_period:String;
        protected var _trading_horizon:String;
        protected var _etf:String;
        protected var _trading_volume:String;
        protected var _market_id:String;
        protected var _sym:String;
        protected var _typeVar:String;
        protected var _offset:String;
        protected var _limit:String;
        protected var _instrumentType:InstrumentType;

        public function BullishBearishSpecificTabRequestMessage(sym:String, instrumentType:InstrumentType, trading_horizon:String){
            super(MessageType.DBSV_BULLISH_BEARISH_SPECIFIC_TAB_REQUEST, System.EXTERNAL);
            this._cid = "168";
            this._uid = "admin";
            this._pwd = "spotLIGHT";
            this._event_period = "9999";
            this._trading_horizon = trading_horizon;
            this._etf = "0";
            this._trading_volume = "0";
            if (instrumentType.isIndex()){
                this._market_id = "XX";
            } else {
                this._market_id = "1";
            };
            if ((((sym == ".SET")) && ((this._market_id == "XX")))){
                this._sym = ".SETI";
            } else {
                this._sym = sym;
            };
            this._typeVar = "1";
            this._offset = "0";
            this._limit = "1";
            this._instrumentType = instrumentType;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingURLVariables = new StreamingURLVariables();
            urlVars.add("cid", this._cid);
            urlVars.add("uid", this._uid);
            urlVars.add("pwd", this._pwd);
            urlVars.add("event_period", this._event_period);
            urlVars.add("trading_horizon", this._trading_horizon);
            urlVars.add("etf", this._etf);
            urlVars.add("trading_volume", this._trading_volume);
            urlVars.add("market_id", this._market_id);
            urlVars.add("sym", this._sym);
            urlVars.add("type", this._typeVar);
            urlVars.add("offset", this._offset);
            urlVars.add("limit", this._limit);
            return (urlVars);
        }
        public function get instrumentType():InstrumentType{
            return (this._instrumentType);
        }
        public function get trading_horizon():String{
            return (this._trading_horizon);
        }

    }
}//package com.settrade.streaming5.message.customized.b004.request 
﻿package com.settrade.streaming5.message.customized.b004.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class SupportAndResistanceResponseMessage extends ResponseMessage {

        protected var _supportPrice:String;
        protected var _supportWeight:String;
        protected var _supportTouches:String;
        protected var _supportType:String;
        protected var _resistancePrice:String;
        protected var _resistanceWeight:String;
        protected var _resistanceTouches:String;
        protected var _resistanceType:String;

        public function SupportAndResistanceResponseMessage(requestMessage:RequestMessage, source:Source, supportPrice:String, supportWeight:String, supportTouches:String, supportType:String, resistancePrice:String, resistanceWeight:String, resistanceTouches:String, resistanceType:String){
            super(MessageType.DBSV_SUPPORT_AND_RESISTANCE_RESPONSE, System.EXTERNAL, requestMessage, source);
            this._supportPrice = supportPrice;
            this._supportWeight = supportWeight;
            this._supportTouches = supportTouches;
            this._supportType = supportType;
            this._resistancePrice = resistancePrice;
            this._resistanceWeight = resistanceWeight;
            this._resistanceTouches = resistanceTouches;
            this._resistanceType = resistanceType;
        }
        public function get supportPrice():String{
            return (this._supportPrice);
        }
        public function get supportWeight():String{
            return (this._supportWeight);
        }
        public function get supportTouches():String{
            return (this._supportTouches);
        }
        public function get supportType():String{
            return (this._supportType);
        }
        public function get resistancePrice():String{
            return (this._resistancePrice);
        }
        public function get resistanceWeight():String{
            return (this._resistanceWeight);
        }
        public function get resistanceTouches():String{
            return (this._resistanceTouches);
        }
        public function get resistanceType():String{
            return (this._resistanceType);
        }

    }
}//package com.settrade.streaming5.message.customized.b004.response 
﻿package com.settrade.streaming5.message.customized.b004.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class StartDateEndDateResponseMessage extends ResponseMessage {

        protected var _startDate:String;
        protected var _endDate:String;
        protected var _errorMessage:Array;

        public function StartDateEndDateResponseMessage(requestMessage:RequestMessage, source:Source, startDate:String, endDate:String, errorMessage:Array){
            super(MessageType.DBSV_START_DATE_END_DATE_RESPONSE, System.EXTERNAL, requestMessage, source);
            this._startDate = startDate;
            this._endDate = endDate;
            this._errorMessage = errorMessage;
        }
        public function get startDate():String{
            return (this._startDate);
        }
        public function get endDate():String{
            return (this._endDate);
        }
        public function get errorMessage():Array{
            return (this._errorMessage);
        }

    }
}//package com.settrade.streaming5.message.customized.b004.response 
﻿package com.settrade.streaming5.message.customized.b004.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class ValueAnalyzerResponseMessage extends ResponseMessage {

        protected var _currency:String;
        protected var _exchangeName:String;
        protected var _issueType:String;
        protected var _companyName:String;
        protected var _symbol:String;
        protected var _typeTag:String;
        protected var _valueColor:String;
        protected var _valueDescription:String;
        protected var _rorEstimate:String;
        protected var _errorMessage:Array;

        public function ValueAnalyzerResponseMessage(requestMessage:RequestMessage, source:Source, currency:String, exchangeName:String, issueType:String, companyName:String, symbol:String, typeTag:String, valueColor:String, valueDescription:String, rorEstimate:String, errorMessage:Array){
            super(MessageType.DBSV_VALUE_ANALYZER_RESPONSE, System.EXTERNAL, requestMessage, source);
            this._currency = currency;
            this._exchangeName = exchangeName;
            this._issueType = issueType;
            this._companyName = companyName;
            this._symbol = symbol;
            this._typeTag = typeTag;
            this._valueColor = valueColor;
            this._valueDescription = valueDescription;
            this._rorEstimate = rorEstimate;
            this._errorMessage = errorMessage;
        }
        public function get currency():String{
            return (this._currency);
        }
        public function get exchangeName():String{
            return (this._exchangeName);
        }
        public function get issueType():String{
            return (this._issueType);
        }
        public function get companyName():String{
            return (this._companyName);
        }
        public function get symbol():String{
            return (this._symbol);
        }
        public function get typeTag():String{
            return (this._typeTag);
        }
        public function get valueColor():String{
            return (this._valueColor);
        }
        public function get valueDescription():String{
            return (this._valueDescription);
        }
        public function get rorEstimate():String{
            return (this._rorEstimate);
        }
        public function get errorMessage():Array{
            return (this._errorMessage);
        }

    }
}//package com.settrade.streaming5.message.customized.b004.response 
﻿package com.settrade.streaming5.message.customized.b004.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class TechnicalInsightResponseMessage extends ResponseMessage {

        protected var _currency:String;
        protected var _exchangeName:String;
        protected var _issueType:String;
        protected var _companyName:String;
        protected var _symbol:String;
        protected var _typeTag:String;
        protected var _bearishCount:Number;
        protected var _bearishUpperClosestTargetPrice:Number;
        protected var _bearishLowerClosestTargetPrice:Number;
        protected var _bullishCount:Number;
        protected var _bullishUpperClosestTargetPrice:Number;
        protected var _bullishLowerClosestTargetPrice:Number;
        protected var _errorMessage:Array;

        public function TechnicalInsightResponseMessage(requestMessage:RequestMessage, source:Source, currency:String, exchangeName:String, issueType:String, companyName:String, symbol:String, typeTag:String, bearishCount:Number, bearishUpperClosestTargetPrice:Number, bearishLowerClosestTargetPrice:Number, bullishCount:Number, bullishUpperClosestTargetPrice:Number, bullishLowerClosestTargetPrice:Number, errorMessage:Array){
            super(MessageType.DBSV_TECHNICAL_INSIGHT_RESPONSE, System.EXTERNAL, requestMessage, source);
            this._currency = currency;
            this._exchangeName = exchangeName;
            this._issueType = issueType;
            this._companyName = companyName;
            this._symbol = symbol;
            this._typeTag = typeTag;
            this._bearishCount = bearishCount;
            this._bearishUpperClosestTargetPrice = bearishUpperClosestTargetPrice;
            this._bearishLowerClosestTargetPrice = bearishLowerClosestTargetPrice;
            this._bullishCount = bullishCount;
            this._bullishUpperClosestTargetPrice = bullishUpperClosestTargetPrice;
            this._bullishLowerClosestTargetPrice = bullishLowerClosestTargetPrice;
            this._errorMessage = errorMessage;
        }
        public function get currency():String{
            return (this._currency);
        }
        public function get exchangeName():String{
            return (this._exchangeName);
        }
        public function get issueType():String{
            return (this._issueType);
        }
        public function get companyName():String{
            return (this._companyName);
        }
        public function get symbol():String{
            return (this._symbol);
        }
        public function get typeTag():String{
            return (this._typeTag);
        }
        public function get bearishCount():Number{
            return (this._bearishCount);
        }
        public function get bearishUpperClosestTargetPrice():Number{
            return (this._bearishUpperClosestTargetPrice);
        }
        public function get bearishLowerClosestTargetPrice():Number{
            return (this._bearishLowerClosestTargetPrice);
        }
        public function get bullishCount():Number{
            return (this._bullishCount);
        }
        public function get bullishUpperClosestTargetPrice():Number{
            return (this._bullishUpperClosestTargetPrice);
        }
        public function get bullishLowerClosestTargetPrice():Number{
            return (this._bullishLowerClosestTargetPrice);
        }
        public function get errorMessage():Array{
            return (this._errorMessage);
        }

    }
}//package com.settrade.streaming5.message.customized.b004.response 
﻿package com.settrade.streaming5.message.customized.b004.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class BullishBearishSpecificTabResponseMessage extends ResponseMessage {

        protected var _symbol:String;
        protected var _horizon:String;
        protected var _bearishCount:Number;
        protected var _bullishCount:Number;

        public function BullishBearishSpecificTabResponseMessage(requestMessage:RequestMessage, source:Source, symbol:String, horizon:String, bearishCount:Number, bullishCount:Number){
            super(MessageType.DBSV_BULLISH_BEARISH_SPECIFIC_TAB_RESPONSE, System.EXTERNAL, requestMessage, source);
            this._symbol = symbol;
            this._horizon = horizon;
            this._bearishCount = bearishCount;
            this._bullishCount = bullishCount;
        }
        public function get symbol():String{
            return (this._symbol);
        }
        public function get horizon():String{
            return (this._horizon);
        }
        public function get bearishCount():Number{
            return (this._bearishCount);
        }
        public function get bullishCount():Number{
            return (this._bullishCount);
        }

    }
}//package com.settrade.streaming5.message.customized.b004.response 
﻿package com.settrade.streaming5.message.customized.b002.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class SettlementInfoResponseMessage extends ResponseMessage {

        protected var _accountNumber:String;
        protected var _asOfDate:String;
        protected var _tDate:String;
        protected var _tAmount:String;
        protected var _tSide:String;
        protected var _t1Date:String;
        protected var _t1Amount:String;
        protected var _t1Side:String;
        protected var _t2Date:String;
        protected var _t2Amount:String;
        protected var _t2Side:String;
        protected var _creditType:String;

        public function SettlementInfoResponseMessage(requestMessage:RequestMessage, source:Source, accountNumber:String, asOfDate:String, tDate:String, tAmount:String, tSide:String, t1Date:String, t1Amount:String, t1Side:String, t2Date:String, t2Amount:String, t2Side:String, creditType:String){
            super(MessageType.TISCO_SETTLE_INFO_RESPONSE, System.EQUITY, requestMessage, source);
            this._accountNumber = accountNumber;
            this._asOfDate = asOfDate;
            this._tDate = tDate;
            this._tAmount = tAmount;
            this._tSide = tSide;
            this._t1Date = t1Date;
            this._t1Amount = t1Amount;
            this._t1Side = t1Side;
            this._t2Date = t2Date;
            this._t2Amount = t2Amount;
            this._t2Side = t2Side;
            this._creditType = creditType;
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }
        public function get asOfDate():String{
            return (this._asOfDate);
        }
        public function get tDate():String{
            return (this._tDate);
        }
        public function get tAmount():String{
            return (this._tAmount);
        }
        public function get tSide():String{
            return (this._tSide);
        }
        public function get t1Date():String{
            return (this._t1Date);
        }
        public function get t1Amount():String{
            return (this._t1Amount);
        }
        public function get t1Side():String{
            return (this._t1Side);
        }
        public function get t2Date():String{
            return (this._t2Date);
        }
        public function get t2Amount():String{
            return (this._t2Amount);
        }
        public function get t2Side():String{
            return (this._t2Side);
        }
        public function get creditType():String{
            return (this._creditType);
        }

    }
}//package com.settrade.streaming5.message.customized.b002.response 
﻿package com.settrade.streaming5.message.customized.b002.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class StockInfoResponseMessage extends ResponseMessage {

        protected var _stockInfo:StockInfo;

        public function StockInfoResponseMessage(requestMessage:RequestMessage, source:Source, stockInfo:StockInfo){
            super(MessageType.TISCO_STOCK_INFO_RESPONSE, System.REALTIME, requestMessage, source);
            this._stockInfo = stockInfo;
        }
        public function get stockInfo():StockInfo{
            return (this._stockInfo);
        }

    }
}//package com.settrade.streaming5.message.customized.b002.response 
﻿package com.settrade.streaming5.message.customized.b002.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class VolFocusListResponseMessage extends ResponseMessage {

        protected var _stockInfoList:Array;

        public function VolFocusListResponseMessage(requestMessage:RequestMessage, source:Source){
            super(MessageType.TISCO_VOL_FOCUS_LIST_RESPONSE, System.REALTIME, requestMessage, source);
            this._stockInfoList = new Array();
        }
        public function addStockInfo(stockInfo:StockInfo):void{
            this._stockInfoList.push(stockInfo);
        }
        public function get stockInfoList():Array{
            return (this._stockInfoList);
        }

    }
}//package com.settrade.streaming5.message.customized.b002.response 
﻿package com.settrade.streaming5.message.customized.b002.response {

    public class StockInfo {

        protected var _instrumentId:String;
        protected var _divPreXDDate:String;
        protected var _divRecXDDate:String;
        protected var _divPreXDPrice:Number;
        protected var _divRecXDPrice:Number;
        protected var _bv:Number;
        protected var _epsCurr:Number;
        protected var _epsGrowth:Number;
        protected var _targetPrice:Number;
        protected var _perSector:Number;
        protected var _roe:Number;
        protected var _dps:Number;
        protected var _mktCap:Number;
        protected var _fiveDaysAvg:Number;

        public function StockInfo(data:Object){
            super();
            this._instrumentId = data.Stock;
            this._divPreXDDate = data.DivPreXDDate;
            this._divRecXDDate = data.DivRecXDDate;
            this._divPreXDPrice = data.DivPreXDPrice;
            this._divRecXDPrice = data.DivRecXDPrice;
            this._bv = data.BV;
            this._epsCurr = data.EPS_Curr;
            this._epsGrowth = data.EPSGrowth;
            this._targetPrice = data.TargetPrice;
            this._perSector = data.PERSector;
            this._roe = data.ROE;
            this._dps = data.DPS;
            this._mktCap = data.MKTCAP;
            this._fiveDaysAvg = data.FiveDaysAvg;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get divPreXDDate():String{
            return (this._divPreXDDate);
        }
        public function get divRecXDDate():String{
            return (this._divRecXDDate);
        }
        public function get divPreXDPrice():Number{
            return (this._divPreXDPrice);
        }
        public function get divRecXDPrice():Number{
            return (this._divRecXDPrice);
        }
        public function get bv():Number{
            return (this._bv);
        }
        public function get epsCurr():Number{
            return (this._epsCurr);
        }
        public function get epsGrowth():Number{
            return (this._epsGrowth);
        }
        public function get targetPrice():Number{
            return (this._targetPrice);
        }
        public function get perSector():Number{
            return (this._perSector);
        }
        public function get roe():Number{
            return (this._roe);
        }
        public function get dps():Number{
            return (this._dps);
        }
        public function get mktCap():Number{
            return (this._mktCap);
        }
        public function get fiveDaysAvg():Number{
            return (this._fiveDaysAvg);
        }
        public function get isNoData():Boolean{
            return (((((((((((((((((((isNaN(this._divPreXDPrice)) && (isNaN(this._divRecXDPrice)))) && (isNaN(this._bv)))) && (isNaN(this._epsCurr)))) && (isNaN(this._epsGrowth)))) && (isNaN(this._targetPrice)))) && (isNaN(this._perSector)))) && (isNaN(this._roe)))) && (isNaN(this._dps)))) && (isNaN(this._mktCap))));
        }

    }
}//package com.settrade.streaming5.message.customized.b002.response 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class OptionsExpireDateRequestMessage extends RequestMessage implements IUrlSerializable {

        public function OptionsExpireDateRequestMessage(){
            super(MessageType.OPTIONS_EXPIRE_DATE_REQUEST, System.REALTIME);
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingFeedURLVariable = new StreamingFeedURLVariable();
            urlVars.add("service", "OptionsExpireDate");
            return (urlVars);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class StaticDataRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _instrumentId:String;
        protected var _instrumentSystem:System;

        public function StaticDataRequestMessage(instrumentId:String, instrumentSystem:System){
            super(MessageType.STATIC_DATA_REQUEST, System.REALTIME);
            this._instrumentId = instrumentId;
            this._instrumentSystem = instrumentSystem;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingURLVariables = new StreamingURLVariables();
            urlVars.add("market", this.convertSystem());
            urlVars.add("symbol", this._instrumentId);
            return (urlVars);
        }
        private function convertSystem():String{
            switch (this._instrumentSystem){
                case System.EQUITY:
                    return ("E");
                case System.DERIV:
                    return ("D");
                default:
                    return ("");
            };
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get instrumentSystem():System{
            return (this._instrumentSystem);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class MarketSummaryRequestMessage extends RequestMessage implements IUrlSerializable, IBinarySerializable, IRegisterable, IUnregisterable {

        public function MarketSummaryRequestMessage(){
            super(MessageType.MARKET_SUMMARY_REQUEST, System.REALTIME);
        }
        public function toBytes():StreamingByteArray{
            var str:String = "";
            var msgType:String = FeedServiceType.MARKET_SUMMARY.id.toString();
            str = (str + ("REG" + Delimiter.LEVEL1));
            str = (str + msgType);
            var byteArray:StreamingByteArray = new StreamingByteArray();
            byteArray.writeUTFBytes(str);
            return (byteArray);
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingFeedURLVariable = new StreamingFeedURLVariable();
            urlVars.add("service", FeedServiceType.MARKET_SUMMARY.id);
            return (urlVars);
        }
        public function get unregistList():Array{
            return (new Array(""));
        }
        public function get registList():Array{
            return (new Array(""));
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;
    import com.settrade.streaming5.message.response.blocktrade.*;

    public class BlockTradeRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _accountNumberBuyer:String;
        protected var _accountNumberSeller:String;
        protected var _position:DerivativesPosition;
        protected var _instrumentId:String;
        protected var _volume:String;
        protected var _price:String;
        protected var _trType:TrType;
        protected var _cpm:Cpm;
        protected var _brokerCpm:Cpm;

        public function BlockTradeRequestMessage(accountNumberBuyer:String, accountNumberSeller:String, position:DerivativesPosition, instrumentId:String, volume:String, price:String, trType:TrType, cpm:Cpm, brokerCpm:Cpm){
            super(MessageType.BLOCK_TRADE_REQUEST, System.REALTIME);
            this._accountNumberBuyer = accountNumberBuyer;
            this._accountNumberSeller = accountNumberSeller;
            this._position = position;
            this._instrumentId = instrumentId;
            this._volume = volume;
            this._price = price;
            this._trType = trType;
            this._cpm = cpm;
            this._brokerCpm = brokerCpm;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingURLVariables = new StreamingURLVariables();
            urlVars.add("mode", "place");
            urlVars.add("accountNo", this._accountNumberBuyer);
            urlVars.add("accountNoSeller", this._accountNumberSeller);
            urlVars.add("position", this.convertPosition());
            urlVars.add("seriesId", this._instrumentId);
            urlVars.add("volume", this._volume);
            urlVars.add("price", this._price);
            urlVars.add("TRType", this.trType.type);
            urlVars.add("party", this._cpm.brokerId);
            if (this._brokerCpm != null){
                urlVars.add("brokercpm", this._brokerCpm.brokerId);
            };
            urlVars.add("seriesTRClassId", this.trType.className);
            return (urlVars);
        }
        private function convertPosition():String{
            switch (this._position){
                case DerivativesPosition.OPEN:
                    return ("O");
                case DerivativesPosition.CLOSE:
                    return ("C");
            };
            return ("");
        }
        public function get accountNumberBuyer():String{
            return (this._accountNumberBuyer);
        }
        public function get accountNumberSeller():String{
            return (this._accountNumberSeller);
        }
        public function get position():DerivativesPosition{
            return (this._position);
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get volume():String{
            return (this._volume);
        }
        public function get price():String{
            return (this._price);
        }
        public function get trType():TrType{
            return (this._trType);
        }
        public function get cpm():Cpm{
            return (this._cpm);
        }
        public function get brokerCpm():Cpm{
            return (this._brokerCpm);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.response.orderstatus.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.connection.common.*;

    public class OrderStatusByNumberDerivativesRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _orderStatus:OrderStatusDerivatives;

        public function OrderStatusByNumberDerivativesRequestMessage(orderStatus:OrderStatusDerivatives){
            super(MessageType.ORDER_STATUS_BY_NUMBER_DERIVAITVES_REQUEST, System.DERIV);
            this._orderStatus = orderStatus;
        }
        public function toURLVariable():StreamingURLVariables{
            var accountNo:String;
            var urlVariables:StreamingOrderURLVariable = new StreamingOrderURLVariable();
            var OrderMode:String = "OrderByOrderNo";
            var Service:String = ((StreamingAttribute.isMarketRep) ? "MktRepOrderInfo" : "OrderInfo");
            var NewMode:String = "Pull";
            urlVariables.add("OrderMode", OrderMode);
            urlVariables.add("accountNo", this._orderStatus.accountNumber);
            urlVariables.add("txtOrderNo", this._orderStatus.orderNumber);
            urlVariables.add("Service", Service);
            urlVariables.add("NewMode", NewMode);
            return (urlVariables);
        }
        public function get orderStatus():OrderStatusDerivatives{
            return (this._orderStatus);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class BlockTradeInfoRequestMessage extends RequestMessage implements IUrlSerializable {

        public function BlockTradeInfoRequestMessage(){
            super(MessageType.BLOCK_TRADE_INFO_REQUEST, System.DERIV);
        }
        public function toURLVariable():StreamingURLVariables{
            return (new StreamingURLVariables());
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;

    public class RequestMessage extends Message {

        public function RequestMessage(type:MessageType, system:System){
            super(type, MessageSide.REQUEST, system);
        }
    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class SetCalendarRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _day:int;
        protected var _month:int;
        protected var _year:int;

        public function SetCalendarRequestMessage(month:int, year:int, day:int=-1){
            super(MessageType.SET_CALENDAR_REQUEST, System.REALTIME);
            this._month = month;
            this._year = year;
            if (this._day != -1){
                this._day = day;
            };
        }
        public function get day():int{
            return (this._day);
        }
        public function get month():int{
            return (this._month);
        }
        public function get year():int{
            return (this._year);
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingFeedURLVariable = new StreamingFeedURLVariable();
            urlVars.add("service", FeedServiceType.SET_CALENDAR.id);
            urlVars.add("setCalYear", this._year);
            urlVars.add("setCalMonth", this._month);
            if (this._day != -1){
                urlVars.add("setCalDay", this._day);
            };
            return (urlVars);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;
    import flash.net.*;

    public class NewsInformationRequestMessage extends DynamicURLRequestMessage implements IUrlSerializable {

        public function NewsInformationRequestMessage(system:System, path:String){
            super(MessageType.NEWS_INFORMATION_REQUEST, system, url);
            _url = new UrlPath("NewsInformationRequest", system, URLLoaderDataFormat.BINARY, MessageSide.RESPONSE, MessageFormat.NEWS_INFORMATION, false, false, path);
        }
        public function toURLVariable():StreamingURLVariables{
            return (new StreamingURLVariables());
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request.pagestat {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.connection.common.*;

    public class PageStatisticRequestMessage extends RequestMessage implements IUrlSerializable {

        private var _pageStatisticList:Array;

        public function PageStatisticRequestMessage(){
            super(MessageType.PAGE_STAT_REQUEST, System.REALTIME);
            this._pageStatisticList = new Array();
        }
        public function add(pageStatistic:PageStatistic):void{
            this._pageStatisticList.push(pageStatistic);
        }
        public function toURLVariable():StreamingURLVariables{
            var pageStatistic:PageStatistic;
            var urlVars:StreamingURLVariables = new StreamingURLVariables();
            urlVars.add("platform", "streaming5");
            var pageStaisticStrList:Array = new Array();
            for each (pageStatistic in this._pageStatisticList) {
                pageStaisticStrList.push(((((pageStatistic.widgetId + Delimiter.LEVEL1) + pageStatistic.count) + Delimiter.LEVEL1) + pageStatistic.time));
            };
            urlVars.add("pageStat", pageStaisticStrList.join(Delimiter.COMMA));
            return (urlVars);
        }
        public function get pageStatisticList():Array{
            return (this._pageStatisticList);
        }
        public function set pageStatisticList(value:Array):void{
            this._pageStatisticList = value;
        }

    }
}//package com.settrade.streaming5.message.request.pagestat 
﻿package com.settrade.streaming5.message.request.pagestat {

    public class PageStatistic {

        protected var _widgetId:String;
        protected var _count:int;
        protected var _time:int;

        public function PageStatistic(widgetId:String, count:int, time:int){
            super();
            this._widgetId = widgetId;
            this._count = count;
            this._time = time;
        }
        public function get widgetId():String{
            return (this._widgetId);
        }
        public function get count():int{
            return (this._count);
        }
        public function get time():int{
            return (this._time);
        }
        public function set time(value:int):void{
            this._time = value;
        }

    }
}//package com.settrade.streaming5.message.request.pagestat 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.connection.common.*;

    public class ChangeOrderDerivativesRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _accountNumber:String;
        protected var _orderNumber:String;
        protected var _price:String;
        protected var _volume:String;
        protected var _oldPrice:String;
        protected var _oldVolume:String;
        protected var _pin:String;

        public function ChangeOrderDerivativesRequestMessage(accountNumber:String, orderNumber:String, price:String, volume:String, pin:String, oldPrice:String, oldVolume:String){
            super(MessageType.CHANGE_ORDER_DERIVATIVES_REQUEST, System.EQUITY);
            this._accountNumber = accountNumber;
            this._orderNumber = orderNumber;
            this._price = price;
            this._volume = volume;
            this._pin = pin;
            this._oldPrice = oldPrice;
            this._oldVolume = oldVolume;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingURLVariables = new StreamingURLVariables();
            urlVars.add("accountNo", this._accountNumber);
            urlVars.add("orderNo", this._orderNumber);
            if (((!((this._price == null))) && (!((this._price == ""))))){
                urlVars.add("price", this._price);
                urlVars.add("old_price", this._oldPrice);
            };
            if (((!((this._volume == null))) && (!((this._volume == ""))))){
                urlVars.add("volume", this._volume);
                urlVars.add("old_volume", this._oldVolume);
            };
            urlVars.add("txtTerminalType", StreamingAttribute.terminalType);
            if (((!((this._pin == null))) && (!((this._pin == ""))))){
                urlVars.add("txtPIN", this._pin);
            };
            return (urlVars);
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }
        public function get orderNumber():String{
            return (this._orderNumber);
        }
        public function get price():String{
            return (this._price);
        }
        public function get volume():String{
            return (this._volume);
        }
        public function get pin():String{
            return (this._pin);
        }
        public function get oldPrice():String{
            return (this._oldPrice);
        }
        public function get oldVolume():String{
            return (this._oldVolume);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.connection.common.*;

    public class ChangeOrderEquityRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _accountNumber:String;
        protected var _orderNumber:String;
        protected var _price:String;
        protected var _volume:String;
        protected var _pin:String;
        protected var _extOrderNo:String;
        protected var _tradeDate:String;

        public function ChangeOrderEquityRequestMessage(accountNumber:String, orderNumber:String, price:String, volume:String, pin:String, extOrderNo:String="", tradeDate:String=""){
            super(MessageType.CHANGE_ORDER_EQUITY_REQUEST, System.EQUITY);
            this._accountNumber = accountNumber;
            this._orderNumber = orderNumber;
            this._price = price;
            this._volume = volume;
            this._pin = pin;
            this._extOrderNo = extOrderNo;
            this._tradeDate = this._tradeDate;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingURLVariables = new StreamingURLVariables();
            urlVars.add("txtAccountNo", this._accountNumber);
            urlVars.add("orderNo", this._orderNumber);
            if (((!((this._price == null))) && (!((this._price == ""))))){
                urlVars.add("price", this._price);
            };
            if (((!((this._volume == null))) && (!((this._volume == ""))))){
                urlVars.add("volume", this._volume);
            };
            urlVars.add("txtTerminalType", StreamingAttribute.terminalType);
            if (((!((this._pin == null))) && (!((this._pin == ""))))){
                urlVars.add("txtPIN", this._pin);
            };
            if (((!((this._extOrderNo == null))) && (!((this._extOrderNo == ""))))){
                urlVars.add("extOrderNo", this._extOrderNo);
            };
            if (((!((this._tradeDate == null))) && (!((this._tradeDate == ""))))){
                urlVars.add("tradeDate", this._tradeDate);
            };
            return (urlVars);
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }
        public function get orderNumber():String{
            return (this._orderNumber);
        }
        public function get price():String{
            return (this._price);
        }
        public function get volume():String{
            return (this._volume);
        }
        public function get pin():String{
            return (this._pin);
        }
        public function get extOrderNo():String{
            return (this._extOrderNo);
        }
        public function get tradeDate():String{
            return (this._tradeDate);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class AccountListEquityRequestMessage extends RequestMessage implements IUrlSerializable {

        public function AccountListEquityRequestMessage(){
            super(MessageType.ACCOUNT_LIST_EQUITY_REQUEST, System.EQUITY);
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVariables:StreamingURLVariables = new StreamingURLVariables();
            urlVariables.add("json", "true");
            return (urlVariables);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class ChangeOrderDerivativesConfirmRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _requestMessage:ChangeOrderDerivativesRequestMessage;

        public function ChangeOrderDerivativesConfirmRequestMessage(requestMessage:ChangeOrderDerivativesRequestMessage){
            super(MessageType.CHANGE_ORDER_DERIVATIVES_CONFIRM_REQUEST, System.EQUITY);
            this._requestMessage = requestMessage;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingURLVariables = this._requestMessage.toURLVariable();
            urlVars.add("confirmedWarn", "YES");
            return (urlVars);
        }
        public function get requestMessage():ChangeOrderDerivativesRequestMessage{
            return (this._requestMessage);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class NewsRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _language:Language;
        protected var _newsType:NewsType;
        protected var _instrumentId:String;

        public function NewsRequestMessage(language:Language, newsType:NewsType, instrumentId:String){
            super(MessageType.NEWS_REQUEST, System.REALTIME);
            this._language = language;
            this._newsType = newsType;
            this._instrumentId = instrumentId;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingFeedURLVariable = new StreamingFeedURLVariable();
            urlVars.add("service", FeedServiceType.NEWS.id);
            urlVars.add("newsLanguage", this._language.feedValue);
            urlVars.add("newsType", this._newsType.feedValue);
            urlVars.add("newsSymbol", this._instrumentId);
            return (urlVars);
        }
        public function get language():Language{
            return (this._language);
        }
        public function get newsType():NewsType{
            return (this._newsType);
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.connection.common.*;

    public class SnapshotRequestMessage extends RequestMessage implements IUrlSerializable, IBinarySerializable, IRegisterable, IUnregisterable {

        protected var _registList:Vector.<String>;
        protected var _unregistList:Vector.<String>;

        public function SnapshotRequestMessage(registList:Vector.<String>, unregistList:Vector.<String>){
            super(MessageType.SNAPSHOT_REQUEST, System.REALTIME);
            this._registList = registList;
            this._unregistList = unregistList;
        }
        public function get unregistList():Array{
            var val:String;
            var list:Array = new Array();
            for each (val in this._unregistList) {
                list.push(val);
            };
            return (list);
        }
        public function get registList():Array{
            var val:String;
            var list:Array = new Array();
            for each (val in this._registList) {
                list.push(val);
            };
            return (list);
        }
        public function toBytes():StreamingByteArray{
            var strUnregist:String;
            var byteArray:StreamingByteArray;
            var str:String = "";
            var msgType:* = FeedServiceType.SNAPSHOT.id.toString();
            var curVal:String;
            var strRegist:String = "";
            for each (curVal in this._registList) {
                strRegist = (strRegist + (curVal + Delimiter.LEVEL3));
            };
            strRegist = strRegist.slice(0, -1);
            strUnregist = "";
            for each (curVal in this._unregistList) {
                strUnregist = (strUnregist + (curVal + Delimiter.LEVEL3));
            };
            strUnregist = strUnregist.slice(0, -1);
            str = (str + ("REG" + Delimiter.LEVEL1));
            str = (str + (msgType + Delimiter.LEVEL2));
            str = (str + (strRegist + Delimiter.LEVEL2));
            str = (str + strUnregist);
            byteArray = new StreamingByteArray();
            byteArray.writeUTFBytes(str);
            return (byteArray);
        }
        public function toURLVariable():StreamingURLVariables{
            var instrumentId:String;
            var urlVars:StreamingFeedURLVariable = new StreamingFeedURLVariable();
            urlVars.add("service", FeedServiceType.SNAPSHOT.id);
            if (this._registList != null){
                for each (instrumentId in this._registList) {
                    urlVars.add("newInstSs", instrumentId);
                };
            };
            return (urlVars);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.connection.common.*;

    public class GenerateKeyRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _clientType:String;

        public function GenerateKeyRequestMessage(clientType:String){
            super(MessageType.GENERATE_KEY_REQUEST, System.REALTIME);
            this._clientType = clientType;
        }
        public function toURLVariable():StreamingURLVariables{
            var vars:* = new StreamingURLVariables();
            vars.time = new Date().getTime();
            vars.clientType = this._clientType;
            vars.txtSETNET3 = StreamingAttribute.setNetMode;
            return (vars);
        }
        public function get clientType():String{
            return (this._clientType);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.connection.common.*;

    public class AccountInfoLongEquityRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _accountNumber:String;

        public function AccountInfoLongEquityRequestMessage(accountNumber:String){
            super(MessageType.ACCOUNT_INFO_LONG_EQUITY_REQUEST, System.EQUITY);
            this._accountNumber = accountNumber;
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingURLVariables = new StreamingURLVariables();
            urlVars.add("txtAccountNo", this._accountNumber);
            urlVars.add("txtTerminalType", StreamingAttribute.terminalType);
            return (urlVars);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class BlockTradeConfirmRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _requestMessage:BlockTradeRequestMessage;

        public function BlockTradeConfirmRequestMessage(requestMessage:BlockTradeRequestMessage){
            super(MessageType.BLOCK_TRADE_CONFIRM_REQUEST, System.DERIV);
            this._requestMessage = requestMessage;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingURLVariables = this._requestMessage.toURLVariable();
            urlVars.add("confirmedWarn", "YES");
            return (urlVars);
        }
        public function get requestMessage():BlockTradeRequestMessage{
            return (this._requestMessage);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request.intradaychart {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.connection.common.*;

    public class IntradayChartRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _instrumentId:String;
        protected var _chartType:ChartType;

        public function IntradayChartRequestMessage(instrumentId:String, chartType:ChartType){
            super(MessageType.INTRADAY_CHART_REQUEST, System.REALTIME);
            this._instrumentId = instrumentId;
            this._chartType = chartType;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingFeedURLVariable = new StreamingFeedURLVariable();
            urlVars.add("service", FeedServiceType.INTRADAY_CHART.id);
            if (this.chartType != null){
                urlVars.add("chartType", this._chartType.feedValue);
            };
            urlVars.add("instChart1", this._instrumentId);
            return (urlVars);
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get chartType():ChartType{
            return (this._chartType);
        }

    }
}//package com.settrade.streaming5.message.request.intradaychart 
﻿package com.settrade.streaming5.message.request.intradaychart {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;

    public class IntradayChartRegisterToken implements IRegisterable, IUnregisterable {

        protected var _instrumentId:String;
        protected var _chartType:ChartType;

        public function IntradayChartRegisterToken(instrumentId:String, chartType:ChartType){
            super();
            this._instrumentId = instrumentId;
            this._chartType = chartType;
        }
        public function equals(obj:IntradayChartRegisterToken):Boolean{
            return ((((this.instrumentId == obj.instrumentId)) && ((this.chartType == obj.chartType))));
        }
        public function get unregistList():Array{
            return (new Array(this));
        }
        public function get registList():Array{
            return (new Array(this));
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get chartType():ChartType{
            return (this._chartType);
        }

    }
}//package com.settrade.streaming5.message.request.intradaychart 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.config.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.connection.common.*;

    public class UpdateConfigRequestMessage extends RequestMessage implements IUrlSerializable {

        var configList:Array;

        public function UpdateConfigRequestMessage(){
            super(MessageType.UPDATE_CONFIG_REQUEST, System.REALTIME);
            this.configList = new Array();
        }
        public function addConfig(config:IConfig):void{
            this.configList.push(config);
        }
        public function toURLVariable():StreamingURLVariables{
            var config:IConfig;
            var object:Object;
            var urlVars:StreamingJSONURLVariables = new StreamingJSONURLVariables();
            urlVars.add("applicationType", StreamingAttribute.applicationMode.value);
            var jsonArray:* = new Array();
            for each (config in this.configList) {
                object = new Object();
                object.service = config.type.id;
                object.data = config.toJsonObject();
                urlVars.addJSONObject(object);
            };
            return (urlVars);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request.widgettemplate {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.connection.common.*;

    public class WidgetTemplateRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _itpRole:UserRole;
        protected var _derivRole:UserRole;

        public function WidgetTemplateRequestMessage(itpRole:UserRole, derivRole:UserRole){
            super(MessageType.WIDGET_TEMPLATE_REQUEST, System.REALTIME);
            this._itpRole = itpRole;
            this._derivRole = derivRole;
        }
        public function toURLVariable():StreamingURLVariables{
            var itpRoleStr:String = this._itpRole.feed;
            var derivRoleStr:String = this._derivRole.feed;
            var urlVars:StreamingURLVariables = new StreamingURLVariables();
            urlVars.add("txtITPRole", itpRoleStr);
            urlVars.add("txtDerivRole", derivRoleStr);
            return (urlVars);
        }
        public function get itpRole():UserRole{
            return (this._itpRole);
        }
        public function get derivRole():UserRole{
            return (this._derivRole);
        }

    }
}//package com.settrade.streaming5.message.request.widgettemplate 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class PlaceOrderDerivativesConfirmRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _requestMessage:PlaceOrderDerivativesRequestMessage;

        public function PlaceOrderDerivativesConfirmRequestMessage(requestMessage:PlaceOrderDerivativesRequestMessage){
            super(MessageType.PLACE_ORDER_DERIVATIVES_CONFIRM_REQUEST, System.DERIV);
            this._requestMessage = requestMessage;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingURLVariables = this._requestMessage.toURLVariable();
            urlVars.add("confirmedWarn", "Y");
            return (urlVars);
        }
        public function get requestMessage():PlaceOrderDerivativesRequestMessage{
            return (this._requestMessage);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class AccountNameRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _market:System;
        protected var _accountNumber:String;
        protected var _isEnglishName:Boolean;
        protected var _isThaiName:Boolean;
        protected var _isTraderName:Boolean;

        public function AccountNameRequestMessage(market:System, accountNumber:String, isEnglishName:Boolean, isThaiName:Boolean, isTraderName:Boolean){
            super(MessageType.ACCOUNT_NAME_REQUEST, System.REALTIME);
            this._market = market;
            this._accountNumber = accountNumber;
            this._isEnglishName = isEnglishName;
            this._isThaiName = isThaiName;
            this._isTraderName = isTraderName;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingURLVariables = new StreamingURLVariables();
            urlVars.add("market", this.convertMarket());
            urlVars.add("accountNo", this._accountNumber);
            urlVars.add("getNameEN", ((this._isEnglishName) ? "T" : "F"));
            urlVars.add("getNameTH", ((this._isThaiName) ? "T" : "F"));
            urlVars.add("getTrader", ((this._isTraderName) ? "T" : "F"));
            return (urlVars);
        }
        private function convertMarket():String{
            if (this.market.isDeriv()){
                return ("D");
            };
            if (this.market.isEquity()){
                return ("E");
            };
            return ("");
        }
        public function get market():System{
            return (this._market);
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }
        public function get isEnglishName():Boolean{
            return (this._isEnglishName);
        }
        public function get isThaiName():Boolean{
            return (this._isThaiName);
        }
        public function get isTraderName():Boolean{
            return (this._isTraderName);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class UserCheckRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _feedState:FeedState;
        protected var _clientType:String;

        public function UserCheckRequestMessage(system:System, feedState:FeedState, clientType:String){
            super(MessageType.USER_CHECK_REQUEST, system);
            this._feedState = feedState;
            this._clientType = clientType;
        }
        public function get feedState():FeedState{
            return (this._feedState);
        }
        public function get clientType():String{
            return (this._clientType);
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingURLVariables = new StreamingURLVariables();
            urlVars.add("cmd", this.convertFeedState());
            urlVars.add("clientType", this._clientType);
            return (urlVars);
        }
        private function convertFeedState():String{
            switch (this.feedState){
                case FeedState.PUSH:
                    return ("PUSH");
                case FeedState.PULL:
                    return ("PULL");
                case FeedState.FORCED_PULL:
                    return ("FORCEPULL");
                default:
                    return ("");
            };
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class HistoricalChartRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _instrumentId:String;

        public function HistoricalChartRequestMessage(instrumentId:String){
            super(MessageType.HISTORICAL_CHART_REQUEST, System.REALTIME);
            this._instrumentId = instrumentId;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingFeedURLVariable = new StreamingFeedURLVariable();
            urlVars.add("service", FeedServiceType.HISTORICAL_CHART.id);
            urlVars.add("instHistoricalChart", this._instrumentId);
            return (urlVars);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class PlaceOrderEquityConfirmRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _requestMessage:PlaceOrderEquityRequestMessage;

        public function PlaceOrderEquityConfirmRequestMessage(requestMessage:PlaceOrderEquityRequestMessage){
            super(MessageType.PLACE_ORDER_EQUITY_CONFIRM_REQUEST, System.EQUITY);
            this._requestMessage = requestMessage;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingURLVariables = this._requestMessage.toURLVariable();
            urlVars.add("confirmedWarn", "Y");
            return (urlVars);
        }
        public function get requestMessage():PlaceOrderEquityRequestMessage{
            return (this._requestMessage);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.response.orderstatus.*;
    import com.settrade.streaming5.connection.common.*;

    public class CancelOrderDerivativesRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _accountNumber:String;
        protected var _pin:String;
        protected var _orderList:Array;
        protected var _terminalType:TerminalType;

        public function CancelOrderDerivativesRequestMessage(accountNumber:String="", pin:String="", terminalType:TerminalType=null){
            super(MessageType.CANCEL_ORDER_DERIVATIVES_REQUEST, System.DERIV);
            this._accountNumber = accountNumber;
            this._pin = pin;
            this._orderList = new Array();
            this._terminalType = terminalType;
        }
        public function addOrder(order:OrderStatusDerivatives):void{
            this._orderList.push(order);
        }
        public function toURLVariable():StreamingURLVariables{
            var order:OrderStatusDerivatives;
            var streamingURLVariables:StreamingCancelOrderDerivativesURLVariable = new StreamingCancelOrderDerivativesURLVariable();
            var mode:String = "cancel";
            var accno:String = this.accountNumber;
            var pin:String = this._pin;
            streamingURLVariables.add("mode", mode);
            streamingURLVariables.add("accountNo", accno);
            streamingURLVariables.add("pin", pin);
            for each (order in this._orderList) {
                streamingURLVariables.add("orderNo", order.orderNumber);
                streamingURLVariables.add("seriesId", order.instrumentId);
            };
            return (streamingURLVariables);
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }
        public function get pin():String{
            return (this._pin);
        }
        public function get terminalType():TerminalType{
            return (this._terminalType);
        }
        public function get orderList():Array{
            return (this._orderList);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.connection.common.*;

    public class RegisterKeyRequestMessage extends RequestMessage implements IBinarySerializable {

        protected var _userRef:String;
        protected var _brokerId:String;
        protected var _password:String;
        protected var _openTime:Number;
        protected var _clientType:String;

        public function RegisterKeyRequestMessage(userRef:String, brokerId:String, password:String, openTime:Number, clientType:String){
            super(MessageType.REGISTER_KEY_REQUEST, System.REALTIME);
            this._userRef = userRef;
            this._brokerId = brokerId;
            this._password = password;
            this._openTime = openTime;
            this._clientType = clientType;
        }
        public function toBytes():StreamingByteArray{
            var rawString:String = ((((((((((this.userRef + Delimiter.LEVEL1) + this.brokerId) + Delimiter.LEVEL1) + this.password) + Delimiter.LEVEL1) + this.openTime) + Delimiter.LEVEL1) + this.clientType) + Delimiter.LEVEL1) + StreamingCoreAttribute.API_VERSION);
            var byteArray:StreamingByteArray = new StreamingByteArray();
            byteArray.writeUTFBytes(rawString);
            byteArray.position = 0;
            return (byteArray);
        }
        public function get password():String{
            return (this._password);
        }
        public function get userRef():String{
            return (this._userRef);
        }
        public function get openTime():Number{
            return (this._openTime);
        }
        public function get brokerId():String{
            return (this._brokerId);
        }
        public function get clientType():String{
            return (this._clientType);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class ResearchRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _keyword:String;

        public function ResearchRequestMessage(keyword:String=null){
            super(MessageType.RESEARCH_REQUEST, System.RESEARCH);
            this._keyword = keyword;
        }
        public function get keyword():String{
            return (this._keyword);
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingURLVariables = new StreamingURLVariables();
            urlVars.add("service", FeedServiceType.RESEARCH.strId);
            urlVars.add("researchType", "DRN");
            if (this._keyword != null){
                urlVars.add("keyword", this._keyword);
            };
            return (urlVars);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class AccountInfoLongDerivativesRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _accountNumber:String;

        public function AccountInfoLongDerivativesRequestMessage(accountNumber:String){
            super(MessageType.ACCOUNT_INFO_LONG_DERIVATIVES_REQUEST, System.DERIV);
            this._accountNumber = accountNumber;
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingURLVariables = new StreamingURLVariables();
            urlVars.add("txtAccountNo", this._accountNumber);
            return (urlVars);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request.marketticker {
    import com.settrade.streaming5.enumuration.*;

    public class MarketTickerRegisterToken {

        protected var _system:System;
        protected var _isSum:Boolean;

        public function MarketTickerRegisterToken(system:System, isSum:Boolean){
            super();
            this._system = system;
            this._isSum = isSum;
        }
        public function equals(obj2:MarketTickerRegisterToken):Boolean{
            return ((((this.system == obj2.system)) && ((this.isSum == obj2.isSum))));
        }
        public function get system():System{
            return (this._system);
        }
        public function get isSum():Boolean{
            return (this._isSum);
        }
        public function toString():String{
            return (((("system=" + this.system) + " isSum=") + this.isSum));
        }

    }
}//package com.settrade.streaming5.message.request.marketticker 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.connection.common.*;
    import com.settrade.log.logger.*;

    public class FavouriteUpdateRequestMessage extends RequestMessage implements IUrlSerializable {

        private static var logger:Logger = new Logger(prototype.constructor);

        protected var _listName:String;
        protected var _listIndex:int;
        protected var _instrumentList:Array;

        public function FavouriteUpdateRequestMessage(listName:String, listIndex:int, instrumentList:Array){
            super(MessageType.FAVOURITE_UPDATE_REQUEST, System.REALTIME);
            this._listName = listName;
            this._listIndex = listIndex;
            this._instrumentList = instrumentList;
        }
        public function toURLVariable():StreamingURLVariables{
            var favListObj:Object = new Object();
            favListObj.listName = this._listName;
            favListObj.index = this._listIndex;
            favListObj.symbolList = this._instrumentList;
            favListObj.market = this.convertSystem();
            var jsonObj:Object = new Object();
            jsonObj.service = "Favourite";
            jsonObj.data = favListObj;
            var urlVars:StreamingJSONURLVariables = new StreamingJSONURLVariables();
            urlVars.addJSONObject(jsonObj);
            return (urlVars);
        }
        private function convertSystem():String{
            switch (StreamingAttribute.systemMarket){
                case System.ALL_SYSTEM:
                    return ("A");
                case System.EQUITY:
                    return ("E");
                case System.DERIV:
                    return ("D");
            };
            return ("");
        }
        public function get listName():String{
            return (this._listName);
        }
        public function get instrumentList():Array{
            return (this._instrumentList);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request.info {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.connection.common.*;

    public class InfoStatisticRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _instrumentId:String;

        public function InfoStatisticRequestMessage(instrumentId:String){
            super(MessageType.INFO_STATISTIC_REQUEST, System.REALTIME);
            this._instrumentId = instrumentId;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingFeedURLVariable = new StreamingFeedURLVariable();
            urlVars.add("service", FeedServiceType.INFO_STATISTIC.id);
            urlVars.add("instStatInfo", this._instrumentId);
            return (urlVars);
        }

    }
}//package com.settrade.streaming5.message.request.info 
﻿package com.settrade.streaming5.message.request.info {
    import com.settrade.streaming5.enumuration.*;

    public class InfoRegisterToken {

        protected var _instrumentId:String;
        protected var _mode:InstrumentInfoType;

        public function InfoRegisterToken(instrumentId:String, mode:InstrumentInfoType){
            super();
            this._instrumentId = instrumentId;
            this._mode = mode;
        }
        public function equals(object:Object){
            if ((object is InfoRegisterToken)){
                return ((((InfoRegisterToken(object)._instrumentId == this._instrumentId)) && ((InfoRegisterToken(object)._mode == this.mode))));
            };
            return ((object == this));
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get mode():InstrumentInfoType{
            return (this._mode);
        }
        public function toString():String{
            return ((((("{" + this._instrumentId) + ",") + this._mode) + "}"));
        }

    }
}//package com.settrade.streaming5.message.request.info 
﻿package com.settrade.streaming5.message.request.info {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.connection.common.*;

    public class InfoOddLotRequestMessage extends RequestMessage implements IUrlSerializable, IRegisterable, IUnregisterable {

        protected var _registList:Vector.<InfoRegisterToken>;
        protected var _unregistList:Vector.<InfoRegisterToken>;

        public function InfoOddLotRequestMessage(registList:Vector.<InfoRegisterToken>, unregistList:Vector.<InfoRegisterToken>){
            super(MessageType.INFO_ODDLOT_REQUEST, System.REALTIME);
            this._registList = registList;
            this._unregistList = unregistList;
        }
        public function get unregistList():Array{
            var val:InfoRegisterToken;
            var list:Array = new Array();
            for each (val in this._unregistList) {
                list.push(val);
            };
            return (list);
        }
        public function get registList():Array{
            var val:InfoRegisterToken;
            var list:Array = new Array();
            for each (val in this._registList) {
                list.push(val);
            };
            return (list);
        }
        private function convertInstrumentInfoType(mode:InstrumentInfoType):String{
            switch (mode){
                case InstrumentInfoType.MARKET:
                    return ("M");
                case InstrumentInfoType.INTRADAY:
                    return ("I");
                case InstrumentInfoType.STAT:
                    return ("S");
                default:
                    return ("");
            };
        }
        public function toURLVariable():StreamingURLVariables{
            var token:InfoRegisterToken;
            var urlVars:StreamingFeedURLVariable = new StreamingFeedURLVariable();
            urlVars.add("service", FeedServiceType.INFO_ODDLOT.id);
            if (this._registList != null){
                for each (token in this._registList) {
                    urlVars.add("oddlotInfo", token.instrumentId);
                };
            };
            return (urlVars);
        }

    }
}//package com.settrade.streaming5.message.request.info 
﻿package com.settrade.streaming5.message.request.info {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.connection.common.*;

    public class InfoStatisticChartRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _instrumentId:String;
        protected var _chartType:InstrumentInfoStatisticChartType;

        public function InfoStatisticChartRequestMessage(instrumentId:String, chartType:InstrumentInfoStatisticChartType){
            super(MessageType.INFO_STATISTIC_CHART_REQUEST, System.REALTIME);
            this._instrumentId = instrumentId;
            this._chartType = chartType;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingFeedURLVariable = new StreamingFeedURLVariable();
            urlVars.add("service", FeedServiceType.INFO_STATISTIC_CHART.id);
            urlVars.add("instStatChart", this._instrumentId);
            urlVars.add("instStatChartType", this._chartType.value);
            return (urlVars);
        }

    }
}//package com.settrade.streaming5.message.request.info 
﻿package com.settrade.streaming5.message.request.info {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.connection.common.*;

    public class InfoRequestMessage extends RequestMessage implements IUrlSerializable, IBinarySerializable, IRegisterable, IUnregisterable {

        protected var _registList:Vector.<InfoRegisterToken>;
        protected var _unregistList:Vector.<InfoRegisterToken>;

        public function InfoRequestMessage(registList:Vector.<InfoRegisterToken>, unregistList:Vector.<InfoRegisterToken>){
            super(MessageType.INFO_REQUEST, System.REALTIME);
            this._registList = registList;
            this._unregistList = unregistList;
        }
        public function get unregistList():Array{
            var val:InfoRegisterToken;
            var list:Array = new Array();
            for each (val in this._unregistList) {
                list.push(val);
            };
            return (list);
        }
        public function get registList():Array{
            var val:InfoRegisterToken;
            var list:Array = new Array();
            for each (val in this._registList) {
                list.push(val);
            };
            return (list);
        }
        public function toBytes():StreamingByteArray{
            var strUnregist:String;
            var byteArray:StreamingByteArray;
            var str:String = "";
            var msgType:String = FeedServiceType.INFO.id.toString();
            var curVal:InfoRegisterToken;
            var strRegist:String = "";
            var strRegistPriority:String = "";
            for each (curVal in this._registList) {
                strRegist = (strRegist + (curVal.instrumentId + Delimiter.LEVEL3));
                strRegistPriority = (strRegistPriority + (this.convertInstrumentInfoType(curVal.mode) + Delimiter.LEVEL3));
            };
            strRegist = strRegist.slice(0, -1);
            strRegistPriority = strRegistPriority.slice(0, -1);
            strUnregist = "";
            for each (curVal in this._unregistList) {
                strUnregist = (strUnregist + (curVal.instrumentId + Delimiter.LEVEL3));
            };
            strUnregist = strUnregist.slice(0, -1);
            str = (str + ("REG" + Delimiter.LEVEL1));
            str = (str + (msgType + Delimiter.LEVEL2));
            str = (str + (strRegist + Delimiter.LEVEL2));
            str = (str + (strUnregist + Delimiter.LEVEL2));
            str = (str + strRegistPriority);
            byteArray = new StreamingByteArray();
            byteArray.writeUTFBytes(str);
            return (byteArray);
        }
        private function convertInstrumentInfoType(mode:InstrumentInfoType):String{
            switch (mode){
                case InstrumentInfoType.MARKET:
                    return ("M");
                case InstrumentInfoType.INTRADAY:
                    return ("I");
                case InstrumentInfoType.STAT:
                    return ("S");
                default:
                    return ("");
            };
        }
        public function toURLVariable():StreamingURLVariables{
            var token:InfoRegisterToken;
            var urlVars:StreamingFeedURLVariable = new StreamingFeedURLVariable();
            urlVars.add("service", FeedServiceType.INFO.id);
            if (this._registList != null){
                for each (token in this._registList) {
                    urlVars.add("newInstInfo", token.instrumentId);
                    urlVars.add("pageInfo", this.convertInstrumentInfoType(token.mode));
                };
            };
            return (urlVars);
        }

    }
}//package com.settrade.streaming5.message.request.info 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class BlockTradeInitRequestMessage extends RequestMessage implements IUrlSerializable {

        public function BlockTradeInitRequestMessage(){
            super(MessageType.BLOCK_TRADE_INIT_REQUEST, System.REALTIME);
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingURLVariables = new StreamingURLVariables();
            urlVars.add("mode", "init");
            return (urlVars);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class NotificationStartupRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _time:Number;

        public function NotificationStartupRequestMessage(time:Number){
            super(MessageType.NOTIFICATION_STARTUP_REQUEST, System.EQUITY);
            this._time = time;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingURLVariables = new StreamingURLVariables();
            urlVars.add("time", this.time.toFixed(0));
            return (urlVars);
        }
        public function get time():Number{
            return (this._time);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class OptionsGreekDefaultValueRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _expireDate:String;
        protected var _volatilityMode:OptionsGreekValueVolatilityMode;

        public function OptionsGreekDefaultValueRequestMessage(expireDate:String, volatilityMode:OptionsGreekValueVolatilityMode){
            super(MessageType.OPTIONS_GREEK_DEFAULT_VALUE_REQUEST, System.REALTIME);
            this._expireDate = expireDate;
            this._volatilityMode = volatilityMode;
        }
        public function get expireDate():String{
            return (this._expireDate);
        }
        public function get volatilityMode():OptionsGreekValueVolatilityMode{
            return (this._volatilityMode);
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingFeedURLVariable = new StreamingFeedURLVariable();
            urlVars.add("service", FeedServiceType.OPTIONS_GREEK_DEFAULT_VALUE.id);
            urlVars.add("expireDate", this._expireDate);
            urlVars.add("volatilityMode", this._volatilityMode.id);
            return (urlVars);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.response.orderstatus.*;
    import com.settrade.streaming5.connection.common.*;

    public class OrderStatusByNumberEquityRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _orderStatus:OrderStatusEquity;

        public function OrderStatusByNumberEquityRequestMessage(orderStatus:OrderStatusEquity){
            super(MessageType.ORDER_STATUS_BY_NUMBER_EQUITY_REQUEST, System.EQUITY);
            this._orderStatus = orderStatus;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVariables:StreamingOrderURLVariable = new StreamingOrderURLVariable();
            var Service:String = "OrderStatusByOrderNo";
            var txtAccountNo:String = this._orderStatus.accountNumber;
            urlVariables.add("Service", Service);
            urlVariables.add("txtAccountNo", txtAccountNo);
            urlVariables.add("txtOrderNo", this._orderStatus.orderNumber);
            urlVariables.add("txtTradeDate", this._orderStatus.tradeDate);
            if (this._orderStatus.orderNumberFis.length > 0){
                urlVariables.add("txtExtOrderNo", this._orderStatus.orderNumberFis);
            };
            return (urlVariables);
        }
        public function get orderStatus():OrderStatusEquity{
            return (this._orderStatus);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.connection.common.*;

    public class DealSummaryDerivativesByPriceRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _accountNo:String;

        public function DealSummaryDerivativesByPriceRequestMessage(accountNo:String){
            super(MessageType.DEAL_SUMMARY_DERIVATIVES_BY_PRICE_REQUEST, System.DERIV);
            this._accountNo = accountNo;
        }
        public function get accountNo():String{
            return (this._accountNo);
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVariables:StreamingOrderURLVariable = new StreamingOrderURLVariable();
            var OrderMode:String = "DealByPrice";
            var accountNo:String = this.accountNo;
            var Service:String = ((StreamingAttribute.isMarketRep) ? "MktRepOrderInfo" : "OrderInfo");
            var NewMode:String = "Pull";
            urlVariables.add("OrderMode", OrderMode);
            urlVariables.add("accountNo", accountNo);
            urlVariables.add("Service", Service);
            urlVariables.add("NewMode", NewMode);
            return (urlVariables);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class PinCheckRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _market:System;
        protected var _pin:String;

        public function PinCheckRequestMessage(market:System, pin:String){
            super(MessageType.PIN_CHECK_REQUEST, System.REALTIME);
            this._market = market;
            this._pin = pin;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingURLVariables = new StreamingURLVariables();
            urlVars.add("service", FeedServiceType.PIN_CHECK.strId);
            urlVars.add("system", this.convertSystem());
            urlVars.add("pin", this._pin);
            return (urlVars);
        }
        private function convertSystem():String{
            switch (this._market){
                case System.EQUITY:
                    return ("E");
                case System.DERIV:
                    return ("D");
            };
            return ("");
        }
        public function get market():System{
            return (this._market);
        }
        public function get pin():String{
            return (this._pin);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class VolumeByPriceDetailRequestMessage extends RequestMessage implements IUnregisterable, IRegisterable, IUrlSerializable {

        protected var _instrumentId:String;

        public function VolumeByPriceDetailRequestMessage(instrumentId:String){
            super(MessageType.VOLUME_BY_PRICE_DETAIL_REQUEST, System.REALTIME);
            this._instrumentId = instrumentId;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingFeedURLVariable = new StreamingFeedURLVariable();
            urlVars.add("service", FeedServiceType.VOLUME_BY_PRICE_DETAIL.id);
            if (this._instrumentId != null){
                urlVars.add("volDetailsInstrument", this._instrumentId);
            };
            return (urlVars);
        }
        public function get registList():Array{
            return ([this._instrumentId]);
        }
        public function get unregistList():Array{
            return ([this._instrumentId]);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class OptionsGreekValueRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _expireDate:String;
        protected var _underlyingPrice:Number;
        protected var _volatilityMode:OptionsGreekValueVolatilityMode;
        protected var _volatility:Number;
        protected var _remainDay:int;
        protected var _interestRate:Number;
        protected var _dividend:Number;

        public function OptionsGreekValueRequestMessage(expireDate:String, underlyingPrice:Number, volatilityMode:OptionsGreekValueVolatilityMode, volatility:Number, remainDay:int, interestRate:Number, dividend:Number){
            super(MessageType.OPTIONS_GREEK_VALUE_REQUEST, System.REALTIME);
            this._expireDate = expireDate;
            this._underlyingPrice = underlyingPrice;
            this._volatilityMode = volatilityMode;
            this._volatility = volatility;
            this._remainDay = remainDay;
            this._interestRate = interestRate;
            this._dividend = dividend;
        }
        public function get expireDate():String{
            return (this._expireDate);
        }
        public function get underlyingPrice():Number{
            return (this._underlyingPrice);
        }
        public function get volatilityMode():OptionsGreekValueVolatilityMode{
            return (this._volatilityMode);
        }
        public function get volatility():Number{
            return (this._volatility);
        }
        public function get remainDay():int{
            return (this._remainDay);
        }
        public function get interestRate():Number{
            return (this._interestRate);
        }
        public function get dividend():Number{
            return (this._dividend);
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingFeedURLVariable = new StreamingFeedURLVariable();
            urlVars.add("service", FeedServiceType.OPTIONS_GREEK_VALUE.id);
            urlVars.add("greekExpireDate", this._expireDate);
            if (!isNaN(this._underlyingPrice)){
                urlVars.add("greekUnderlyingPrice", this._underlyingPrice);
            };
            urlVars.add("greekVolatilityMode", this._volatilityMode.id);
            if (!isNaN(this._volatility)){
                urlVars.add("greekVolatility", this._volatility);
            };
            if (this._remainDay != int.MIN_VALUE){
                urlVars.add("greekRemainDay", this._remainDay);
            };
            if (!isNaN(this._interestRate)){
                urlVars.add("greekInterestRate", this._interestRate);
            };
            if (!isNaN(this._dividend)){
                urlVars.add("greekDividend", this._dividend);
            };
            return (urlVars);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;

    public class DynamicURLRequestMessage extends RequestMessage {

        protected var _url:UrlPath;

        public function DynamicURLRequestMessage(type:MessageType, system:System, url:UrlPath){
            super(type, system);
            this._url = url;
        }
        public function get url():UrlPath{
            return (this._url);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class DealSummaryEquityRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _accountNumber:String;

        public function DealSummaryEquityRequestMessage(accountNumber:String){
            super(MessageType.DEAL_SUMMARY_EQUITY_REQUEST, System.EQUITY);
            this._accountNumber = accountNumber;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVariables:StreamingOrderURLVariable = new StreamingOrderURLVariable();
            var Service:String = "DealSummary";
            var txtAccountNo:String = this._accountNumber;
            urlVariables.add("Service", Service);
            urlVariables.add("txtAccountNo", txtAccountNo);
            return (urlVariables);
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class OrderStatusEquityRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _accountNumber:String;

        public function OrderStatusEquityRequestMessage(accountNumber:String){
            super(MessageType.ORDER_STATUS_EQUITY_REQUEST, System.EQUITY);
            this._accountNumber = accountNumber;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVariables:StreamingOrderURLVariable = new StreamingOrderURLVariable();
            var Service:String = "OrderStatus";
            var txtAccountNo:String = this._accountNumber;
            urlVariables.add("Service", Service);
            urlVariables.add("txtAccountNo", txtAccountNo);
            return (urlVariables);
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.common.*;

    public class OrderStatusAllDerivativesRequestMessage extends OrderStatusDerivativesRequestMessage {

        public function OrderStatusAllDerivativesRequestMessage(){
            super(Account.ALL_DERIVATIVES.accountNumber);
            this._type = MessageType.ORDER_STATUS_ALL_DERIVATIVES_REQUEST;
        }
    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class OrderStatusSearchEquityRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _accountNumber:String;
        protected var _orderNumber:String;
        protected var _orderSide:OrderSide;
        protected var _instrumentId:String;
        protected var _trusteeId:TrusteeId;
        protected var _status:OrderFilterStatus;

        public function OrderStatusSearchEquityRequestMessage(accountNumber:String, orderNumber:String, side:OrderSide, instrumentId:String, trusteeId:TrusteeId, status:OrderFilterStatus){
            super(MessageType.ORDER_STATUS_SEARCH_EQUITY_REQUEST, System.EQUITY);
            this._accountNumber = accountNumber;
            this._orderNumber = orderNumber;
            this._orderSide = side;
            this._instrumentId = instrumentId;
            this._trusteeId = trusteeId;
            this._status = status;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVariables:StreamingURLVariables = new StreamingURLVariables();
            urlVariables.add("service", "OrderStatus");
            urlVariables.add("txtAccount", this._accountNumber);
            urlVariables.add("txtStock", this._instrumentId);
            urlVariables.add("side", this._orderSide.orderValue);
            urlVariables.add("status", this._status.value);
            urlVariables.add("txtOrderNo", this._orderNumber);
            urlVariables.add("trusteeId", this._trusteeId.value);
            urlVariables.add("sortColumn", "orderNo");
            urlVariables.add("desc", "desc");
            return (urlVariables);
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }
        public function get orderNumber():String{
            return (this._orderNumber);
        }
        public function get orderSide():OrderSide{
            return (this._orderSide);
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get trusteeId():TrusteeId{
            return (this._trusteeId);
        }
        public function get status():OrderFilterStatus{
            return (this._status);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.connection.common.*;

    public class AccountInfoDerivativesRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _accountNo:String;

        public function AccountInfoDerivativesRequestMessage(accountNo:String){
            super(MessageType.ACCOUNT_INFO_DERIVATIVES_REQUEST, System.DERIV);
            this._accountNo = accountNo;
        }
        public function get accountNo():String{
            return (this._accountNo);
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVariables:StreamingOrderURLVariable = new StreamingOrderURLVariable();
            var OrderMode:String = "AccountInfo";
            var accountNo:String = this.accountNo;
            var Service:String = ((StreamingAttribute.isMarketRep) ? "MktRepOrderInfo" : "OrderInfo");
            var NewMode:String = "Pull";
            urlVariables.add("OrderMode", OrderMode);
            urlVariables.add("accountNo", accountNo);
            urlVariables.add("Service", Service);
            urlVariables.add("NewMode", NewMode);
            return (urlVariables);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.message.response.orderstatus.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.connection.common.*;

    public class CancelOrderEquityRequestMessage extends RequestMessage implements IUrlSerializable {

        var _accountNo:String;
        var _pin:String;
        var _orderList:Array;
        var _clientType:String;
        var _terminalType:TerminalType;
        var _isMarketMaker:Boolean;

        public function CancelOrderEquityRequestMessage(){
            super(MessageType.CANCEL_ORDER_EQUITY_REQUEST, System.EQUITY);
            this._accountNo = "";
            this._pin = "";
            this._clientType = "";
            this._terminalType = TerminalType.NO_TYPE;
            this._orderList = new Array();
            this._isMarketMaker = false;
        }
        public function addOrder(orderStatusEquity:OrderStatusEquity){
            this._orderList.push(orderStatusEquity);
        }
        public function toURLVariable():StreamingURLVariables{
            var orderStatusEquity:OrderStatusEquity;
            var orderNumber:String;
            var streamingURLVariables:StreamingOrderURLVariable = new StreamingOrderURLVariable();
            var service:String = "PlaceOrder";
            var type:String = "cancel";
            var txtAccountNo:String = this._accountNo;
            var txtPIN_new:String = this._pin;
            var txtClientType:String = this._clientType;
            var txtTerminalType:String = this.convertTerminalType();
            var account:AccountEquity = AccountEquity(AccountManager.getInstance().getAccountByAccountNumberAndSystem(this._accountNo, System.EQUITY));
            var orderType:OrderType = OrderType.SEOS;
            if (account != null){
                orderType = account.orderType;
            };
            streamingURLVariables.add("txtAccountNo", txtAccountNo);
            streamingURLVariables.add("Service", service);
            streamingURLVariables.add("type", type);
            streamingURLVariables.add("txtPIN_new", txtPIN_new);
            streamingURLVariables.add("txtClientType", txtClientType);
            streamingURLVariables.add("txtTerminalType", txtTerminalType);
            for each (orderStatusEquity in this._orderList) {
                orderNumber = orderStatusEquity.orderNumberSeos;
                if (StreamingAttribute.isMarketRep){
                    orderNumber = orderStatusEquity.orderNumber;
                };
                if (orderType.isDgw()){
                    orderNumber = ((((orderStatusEquity.orderNumber + Delimiter.LEVEL1) + orderStatusEquity.sequenceNumber) + Delimiter.LEVEL1) + orderStatusEquity.tradeDate);
                };
                streamingURLVariables.add("txtOrderNo", orderNumber);
                streamingURLVariables.add("txtCancelSymbol", orderStatusEquity.instrumentId);
                if (orderStatusEquity.orderNumberFis.length > 0){
                    streamingURLVariables.add("extOrderNo", orderStatusEquity.orderNumberFis);
                };
            };
            if (this.isMarketMaker){
                streamingURLVariables.add("txtMarketMaker", this.convertMarketMaker());
            };
            return (streamingURLVariables);
        }
        private function convertMarketMaker():String{
            return (((this.isMarketMaker) ? "Y" : ""));
        }
        private function convertTerminalType():String{
            return (StreamingAttribute.terminalType);
        }
        public function get accountNo():String{
            return (this._accountNo);
        }
        public function set accountNo(value:String):void{
            this._accountNo = value;
        }
        public function get pin():String{
            return (this._pin);
        }
        public function set pin(value:String):void{
            this._pin = value;
        }
        public function get clientType():String{
            return (this._clientType);
        }
        public function set clientType(value:String):void{
            this._clientType = value;
        }
        public function get terminalType():TerminalType{
            return (this._terminalType);
        }
        public function set terminalType(value:TerminalType):void{
            this._terminalType = value;
        }
        public function get isMarketMaker():Boolean{
            return (this._isMarketMaker);
        }
        public function set isMarketMaker(value:Boolean):void{
            this._isMarketMaker = value;
        }
        public function get orderList():Array{
            return (this._orderList);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request.multipleorder {
    import com.settrade.streaming5.enumuration.*;

    public class MultipleOrderDerivatives {

        protected var _orderSide:DerivativesOrderSide;
        protected var _position:DerivativesPosition;
        protected var _instrumentId:String;
        protected var _volume:String;
        protected var _price:String;
        protected var _priceType:DerivativesPriceType;
        protected var _validity:DerivativesValidity;
        protected var _icebergVolume:String;

        public function MultipleOrderDerivatives(orderSide:DerivativesOrderSide, position:DerivativesPosition, instrumentId:String, volume:String, price:String, type:DerivativesPriceType, validity:DerivativesValidity, icebergVolume:String){
            super();
            this._orderSide = orderSide;
            this._position = position;
            this._instrumentId = instrumentId;
            this._volume = volume;
            this._price = price;
            this._priceType = type;
            this._validity = validity;
            this._icebergVolume = icebergVolume;
        }
        public static function getBlank():MultipleOrderDerivatives{
            return (new MultipleOrderDerivatives(DerivativesOrderSide.LONG, DerivativesPosition.OPEN, "", "", "", DerivativesPriceType.LIMIT, DerivativesValidity.DAY, ""));
        }

        public function get orderSide():DerivativesOrderSide{
            return (this._orderSide);
        }
        public function set orderSide(value:DerivativesOrderSide):void{
            this._orderSide = value;
        }
        public function get position():DerivativesPosition{
            return (this._position);
        }
        public function set position(value:DerivativesPosition):void{
            this._position = value;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function set instrumentId(value:String):void{
            this._instrumentId = value;
        }
        public function get volume():String{
            return (this._volume);
        }
        public function set volume(value:String):void{
            this._volume = value;
        }
        public function get price():String{
            return (this._price);
        }
        public function set price(value:String):void{
            this._price = value;
        }
        public function get priceType():DerivativesPriceType{
            return (this._priceType);
        }
        public function set priceType(value:DerivativesPriceType):void{
            this._priceType = value;
        }
        public function get validity():DerivativesValidity{
            return (this._validity);
        }
        public function set validity(value:DerivativesValidity):void{
            this._validity = value;
        }
        public function get icebergVolume():String{
            return (this._icebergVolume);
        }
        public function set icebergVolume(value:String):void{
            this._icebergVolume = value;
        }
        public function clone():MultipleOrderDerivatives{
            return (new MultipleOrderDerivatives(this.orderSide, this.position, this.instrumentId, this.volume, this.price, this.priceType, this.validity, this.icebergVolume));
        }

    }
}//package com.settrade.streaming5.message.request.multipleorder 
﻿package com.settrade.streaming5.message.request.multipleorder {
    import com.settrade.streaming5.enumuration.*;

    public class MultipleOrderEquity {

        protected var _orderSide:OrderSide;
        protected var _instrumentId:String;
        protected var _nvdrFlag:Boolean;
        protected var _volume:Number;
        protected var _price:Number;
        protected var _priceType:PriceType;
        protected var _validity:Validity;
        protected var _icebergVolume:Number;

        public function MultipleOrderEquity(orderSide:OrderSide, instrumentId:String, nvdrFlag:Boolean, volume:Number, price:Number, priceType:PriceType, validity:Validity, icebergVolume:Number){
            super();
            this._orderSide = orderSide;
            this._instrumentId = instrumentId;
            this._nvdrFlag = nvdrFlag;
            this._volume = volume;
            this._price = price;
            this._priceType = priceType;
            this._validity = validity;
            this._icebergVolume = icebergVolume;
        }
        public static function getBlank():MultipleOrderEquity{
            return (new MultipleOrderEquity(OrderSide.NO_SIDE, "", false, NaN, NaN, PriceType.LIMIT, Validity.DAY, NaN));
        }

        public function get amount():Number{
            return ((this._price * this._volume));
        }
        public function get orderSide():OrderSide{
            return (this._orderSide);
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get nvdrFlag():Boolean{
            return (this._nvdrFlag);
        }
        public function get volume():Number{
            return (this._volume);
        }
        public function get price():Number{
            return (this._price);
        }
        public function get priceType():PriceType{
            return (this._priceType);
        }
        public function get validity():Validity{
            return (this._validity);
        }
        public function get icebergVolume():Number{
            return (this._icebergVolume);
        }
        public function set orderSide(value:OrderSide):void{
            this._orderSide = value;
        }
        public function set instrumentId(value:String):void{
            this._instrumentId = value;
        }
        public function set nvdrFlag(value:Boolean):void{
            this._nvdrFlag = value;
        }
        public function set volume(value:Number):void{
            this._volume = value;
        }
        public function set price(value:Number):void{
            this._price = value;
        }
        public function set priceType(value:PriceType):void{
            this._priceType = value;
        }
        public function set validity(value:Validity):void{
            this._validity = value;
        }
        public function set icebergVolume(value:Number):void{
            this._icebergVolume = value;
        }
        public function clone():MultipleOrderEquity{
            return (new MultipleOrderEquity(this._orderSide, this._instrumentId, this._nvdrFlag, this._volume, this._price, this._priceType, this._validity, this._icebergVolume));
        }

    }
}//package com.settrade.streaming5.message.request.multipleorder 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.message.response.orderstatus.*;
    import com.settrade.streaming5.connection.common.*;

    public class CancelOrderDerivativesMultipleAccountRequestMessage extends CancelOrderDerivativesRequestMessage {

        public function CancelOrderDerivativesMultipleAccountRequestMessage(){
            super();
        }
        override public function toURLVariable():StreamingURLVariables{
            var orderStatusDerivatives:OrderStatusDerivatives;
            var streamingURLVariables:StreamingURLVariables = super.toURLVariable();
            streamingURLVariables.remove("accountNo");
            streamingURLVariables.replace("mode", "cancelNotGetOrder");
            for each (orderStatusDerivatives in _orderList) {
                streamingURLVariables.add("accountNo", orderStatusDerivatives.accountNumber);
            };
            return (streamingURLVariables);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class InstrumentListRequestMessage extends RequestMessage implements IUnregisterable, IRegisterable, IUrlSerializable {

        protected var _listName:String;
        protected var _subListName:String;
        protected var _boardType:String;
        protected var _boardSubType:String;
        protected var _isGoldOnlyList:Boolean;
        protected var _isGoldETFList:Boolean;

        public function InstrumentListRequestMessage(listName:String, subListName:String, boardType:String, boardSubType:String, isGoldOnlyList:Boolean, isGoldETFList:Boolean){
            super(MessageType.INSTRUMENT_LIST_REQUEST, System.REALTIME);
            this._listName = listName;
            this._subListName = subListName;
            this._boardType = boardType;
            this._boardSubType = boardSubType;
            this._isGoldOnlyList = isGoldOnlyList;
            this._isGoldETFList = isGoldETFList;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingFeedURLVariable = new StreamingFeedURLVariable();
            urlVars.add("service", FeedServiceType.INSTRUMENT_LIST.id);
            urlVars.add("mainListName", this._listName);
            urlVars.add("subListName", this._subListName);
            urlVars.add("boardType", this._boardType);
            urlVars.add("boardSubType", this._boardSubType);
            if (this._isGoldOnlyList){
                urlVars.add("goldOnlyFlag", "T");
            };
            if (this._isGoldETFList){
                urlVars.add("subBrokerFlag", "T");
            };
            return (urlVars);
        }
        public function get unregistList():Array{
            return ([this]);
        }
        public function get registList():Array{
            return ([this]);
        }
        public function equals(message:InstrumentListRequestMessage):Boolean{
            return ((((((((((((this._listName == this.listName)) && ((this._subListName == this.subListName)))) && ((this._boardType == this.boardType)))) && ((this._boardSubType == this.boardSubType)))) && ((this._isGoldOnlyList == this.isGoldOnlyList)))) && ((this._isGoldETFList == this.isGoldETFList))));
        }
        public function get listName():String{
            return (this._listName);
        }
        public function get boardType():String{
            return (this._boardType);
        }
        public function get boardSubType():String{
            return (this._boardSubType);
        }
        public function get isGoldOnlyList():Boolean{
            return (this._isGoldOnlyList);
        }
        public function get isGoldETFList():Boolean{
            return (this._isGoldETFList);
        }
        public function get subListName():String{
            return (this._subListName);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.connection.common.*;

    public class InstrumentTickerOddLotRequestMessage extends RequestMessage implements IUrlSerializable, IRegisterable, IUnregisterable {

        protected var _registList:Vector.<String>;
        protected var _unregistList:Vector.<String>;
        protected var _sequenceIdList:Vector.<int>;

        public function InstrumentTickerOddLotRequestMessage(registList:Vector.<String>, unregistList:Vector.<String>, sequenceList:Vector.<int>=null){
            var i:int;
            super(MessageType.INSTRUMENT_TICKER_ODDLOT_REQUEST, System.REALTIME);
            this._registList = registList;
            this._unregistList = unregistList;
            if (sequenceList == null){
                this._sequenceIdList = new Vector.<int>();
                i = 0;
                while (i < registList.length) {
                    this._sequenceIdList.push(-1);
                    i++;
                };
            } else {
                this._sequenceIdList = sequenceList;
            };
        }
        public function get unregistList():Array{
            var val:String;
            var list:Array = new Array();
            for each (val in this._unregistList) {
                list.push(val);
            };
            return (list);
        }
        public function get registList():Array{
            var val:String;
            var list:Array = new Array();
            for each (val in this._registList) {
                list.push(val);
            };
            return (list);
        }
        public function get sequenceIdList():Vector.<int>{
            return (this._sequenceIdList);
        }
        public function toURLVariable():StreamingURLVariables{
            var instrumentId:String;
            var sequenceId:Number;
            var urlVars:StreamingFeedURLVariable = new StreamingFeedURLVariable();
            urlVars.add("service", FeedServiceType.INSTRUMENT_TICKER_ODDLOT.id);
            if (this._registList != null){
                for each (instrumentId in this._registList) {
                    urlVars.add("oddlotTicker", instrumentId);
                };
            };
            if (this._sequenceIdList != null){
                for each (sequenceId in this._sequenceIdList) {
                    urlVars.add("oddlotSequenceId", sequenceId);
                };
            };
            return (urlVars);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import __AS3__.vec.*;

    public class MultipleRequestMessage extends RequestMessage implements IMultipleMessage {

        protected var _messageList:Vector.<Message>;

        public function MultipleRequestMessage(overrideId:Number=NaN){
            super(MessageType.MULTIPLE_REQUEST, System.NO_SYSTEM);
            if (!isNaN(overrideId)){
                this._id = overrideId;
            };
            this._messageList = new Vector.<Message>();
        }
        public function add(message:RequestMessage):void{
            if (message != this){
                this._messageList.push(message);
            };
        }
        public function addAll(list:Vector.<RequestMessage>):void{
            var message:RequestMessage;
            for each (message in list) {
                this.add(message);
            };
        }
        public function get messageList():Vector.<Message>{
            return (this._messageList);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.connection.common.*;

    public class PositionClosingDerivativesRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _accountNo:String;

        public function PositionClosingDerivativesRequestMessage(accountNo:String){
            super(MessageType.POSITION_CLOSING_DERIVATIVES_REQUEST, System.DERIV);
            this._accountNo = accountNo;
        }
        public function get accountNo():String{
            return (this._accountNo);
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVariables:StreamingOrderURLVariable = new StreamingOrderURLVariable();
            var OrderMode:String = "PositionClosing";
            var accountNo:String = this.accountNo;
            var Service:String = ((StreamingAttribute.isMarketRep) ? "MktRepOrderInfo" : "OrderInfo");
            var NewMode:String = "Pull";
            urlVariables.add("OrderMode", OrderMode);
            urlVariables.add("accountNo", accountNo);
            urlVariables.add("Service", Service);
            urlVariables.add("NewMode", NewMode);
            return (urlVariables);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class InstrumentIdValidatorRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _instrumentId:String;
        protected var _isSubBroker:Boolean;
        protected var _brokerId:String;
        protected var _systemMarket:System;

        public function InstrumentIdValidatorRequestMessage(instrumentId:String, isSubBroker:Boolean, brokerId:String, system:System){
            super(MessageType.INSTRUMENT_ID_VALIDATOR_REQUEST, System.REALTIME);
            this._instrumentId = instrumentId;
            this._isSubBroker = isSubBroker;
            this._brokerId = brokerId;
            this._systemMarket = system;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingURLVariables = new StreamingURLVariables();
            urlVars.add("stockSymbol", this._instrumentId);
            urlVars.add("isSubBroker", ((this._isSubBroker) ? "Y" : "N"));
            urlVars.add("brokerId", this.brokerId);
            urlVars.add("market", this.convertSystemMarket());
            return (urlVars);
        }
        private function convertSystemMarket():String{
            switch (this._systemMarket){
                case System.ALL_SYSTEM:
                    return ("A");
                case System.EQUITY:
                    return ("E");
                case System.DERIV:
                    return ("D");
                default:
                    return ("");
            };
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get isSubBroker():Boolean{
            return (this._isSubBroker);
        }
        public function get brokerId():String{
            return (this._brokerId);
        }
        public function get systemMarket():System{
            return (this._systemMarket);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.connection.common.*;

    public class PlaceOrderEquityRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _accountNo:String;
        protected var _instrumentId:String;
        protected var _nvdrFlag:Boolean;
        protected var _orderSide:OrderSide;
        protected var _quantity:String;
        protected var _price:String;
        protected var _positionType:PositionType;
        protected var _priceType:PriceType;
        protected var _validity:Validity;
        protected var _icebergVolume:String;
        protected var _clientType:String;
        protected var _terminalType:TerminalType;
        protected var _pin:String;
        protected var _isMarketMaker:Boolean;
        protected var _isDeposit:Boolean;

        public function PlaceOrderEquityRequestMessage(){
            super(MessageType.PLACE_ORDER_EQUITY_REQUEST, System.EQUITY);
            this._accountNo = "";
            this._instrumentId = "";
            this._nvdrFlag = false;
            this._orderSide = OrderSide.NO_SIDE;
            this._quantity = "";
            this._price = "";
            this._positionType = PositionType.NO_TYPE;
            this._priceType = PriceType.NO_TYPE;
            this._validity = Validity.NO_TYPE;
            this._icebergVolume = "";
            this._clientType = "";
            this._terminalType = TerminalType.NO_TYPE;
            this._pin = "";
            this._isMarketMaker = false;
            this._isDeposit = false;
        }
        private function convertOrderSide():String{
            switch (this._orderSide){
                case OrderSide.BUY:
                    return ("B");
                case OrderSide.SELL:
                    return ("S");
                case OrderSide.SHORT:
                    return ("H");
                case OrderSide.COVER:
                    return ("C");
                default:
                    return ("");
            };
        }
        private function convertPriceType():String{
            switch (this._priceType){
                case PriceType.LIMIT:
                    return ("limit");
                case PriceType.ATO:
                    return ("atoatc");
                case PriceType.ATC:
                    return ("atoatc");
                case PriceType.MP:
                    return ("mp");
                case PriceType.MP_MKT:
                    return ("mpmkt");
                case PriceType.MP_MTL:
                    return ("mpmtl");
                default:
                    return ("");
            };
        }
        private function convertValidity():String{
            switch (this._validity){
                case Validity.DAY:
                    return ("DAY");
                case Validity.FOK:
                    return ("FOK");
                case Validity.IOC:
                    return ("IOC");
                default:
                    return ("");
            };
        }
        private function convertTerminalType():String{
            return (StreamingAttribute.terminalType);
        }
        private function convertMarketMaker():String{
            return (((this.isMarketMaker) ? "Y" : ""));
        }
        private function convertIcebergVolume():String{
            return (((isNaN(Number(this._icebergVolume))) ? "0" : this.icebergVolume));
        }
        private function convertPositionType():String{
            switch (this._positionType){
                case PositionType.DEPOSIT:
                    return ("D");
                default:
                    return ("");
            };
        }
        private function convertNvdr():String{
            return (((this._nvdrFlag) ? "2" : ""));
        }
        public function toURLVariable():StreamingURLVariables{
            var streamingURLVariables:StreamingOrderURLVariable = new StreamingOrderURLVariable();
            var service:String = "PlaceOrder";
            var type:String = "place";
            var txtAccountNo:* = this._accountNo;
            var txtBorS:String = this.convertOrderSide();
            var txtSymbol:String = this._instrumentId;
            var txtQty:String = this._quantity;
            var txtPrice:String = this._price;
            var txtPIN_new:String = this._pin;
            var txtPriceType:String = this.convertPriceType();
            var txtCondition:String = this.convertValidity();
            var txtPublishVolume:String = this.convertIcebergVolume();
            var txtClientType:String = this._clientType;
            var txtTerminalType:String = this.convertTerminalType();
            streamingURLVariables.add("txtAccountNo", txtAccountNo);
            streamingURLVariables.add("Service", service);
            streamingURLVariables.add("type", type);
            streamingURLVariables.add("txtBorS", txtBorS);
            streamingURLVariables.add("txtSymbol", txtSymbol);
            streamingURLVariables.add("txtPrice", txtPrice);
            streamingURLVariables.add("txtQty", txtQty);
            streamingURLVariables.add("txtPIN_new", txtPIN_new);
            streamingURLVariables.add("txtPriceType", txtPriceType);
            streamingURLVariables.add("txtCondition", txtCondition);
            streamingURLVariables.add("txtPublishVol", txtPublishVolume);
            streamingURLVariables.add("txtClientType", txtClientType);
            streamingURLVariables.add("txtTerminalType", txtTerminalType);
            if (this.isMarketMaker){
                streamingURLVariables.add("txtMarketMaker", this.convertMarketMaker());
            };
            if (!this.positionType.isNoType()){
                streamingURLVariables.add("positionType", this.convertPositionType());
            };
            if (this.nvdrFlag){
                streamingURLVariables.add("txtNvdr", this.convertNvdr());
            };
            if (this.isDeposit){
                streamingURLVariables.add("positionType", "D");
            };
            streamingURLVariables.add("apiService", "Gen5");
            return (streamingURLVariables);
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function set instrumentId(value:String):void{
            this._instrumentId = value;
        }
        public function get nvdrFlag():Boolean{
            return (this._nvdrFlag);
        }
        public function set nvdrFlag(value:Boolean):void{
            this._nvdrFlag = value;
        }
        public function get orderSide():OrderSide{
            return (this._orderSide);
        }
        public function set orderSide(value:OrderSide):void{
            this._orderSide = value;
        }
        public function get quantity():String{
            return (this._quantity);
        }
        public function set quantity(value:String):void{
            this._quantity = value;
        }
        public function get price():String{
            return (this._price);
        }
        public function set price(value:String):void{
            this._price = value;
        }
        public function get positionType():PositionType{
            return (this._positionType);
        }
        public function set positionType(value:PositionType):void{
            this._positionType = value;
        }
        public function get priceType():PriceType{
            return (this._priceType);
        }
        public function set priceType(value:PriceType):void{
            this._priceType = value;
        }
        public function get validity():Validity{
            return (this._validity);
        }
        public function set validity(value:Validity):void{
            this._validity = value;
        }
        public function get icebergVolume():String{
            return (this._icebergVolume);
        }
        public function set icebergVolume(value:String):void{
            this._icebergVolume = value;
        }
        public function get clientType():String{
            return (this._clientType);
        }
        public function set clientType(value:String):void{
            this._clientType = value;
        }
        public function get terminalType():TerminalType{
            return (this._terminalType);
        }
        public function set terminalType(value:TerminalType):void{
            this._terminalType = value;
        }
        public function get pin():String{
            return (this._pin);
        }
        public function set pin(value:String):void{
            this._pin = value;
        }
        public function get isMarketMaker():Boolean{
            return (this._isMarketMaker);
        }
        public function set isMarketMaker(value:Boolean):void{
            this._isMarketMaker = value;
        }
        public function get accountNo():String{
            return (this._accountNo);
        }
        public function set accountNo(value:String):void{
            this._accountNo = value;
        }
        public function get isDeposit():Boolean{
            return (this._isDeposit);
        }
        public function set isDeposit(value:Boolean):void{
            this._isDeposit = value;
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request.oppday {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.connection.common.*;

    public class OppDayLiveRequestMessage extends RequestMessage implements IUrlSerializable {

        public function OppDayLiveRequestMessage(){
            super(MessageType.OPPDAY_LIVE_REQUEST, System.SET);
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVariables:StreamingURLVariables = new StreamingURLVariables();
            return (urlVariables);
        }

    }
}//package com.settrade.streaming5.message.request.oppday 
﻿package com.settrade.streaming5.message.request.oppday {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.connection.common.*;

    public class OppDayArchiveRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _quarter:int;
        protected var _year:int;

        public function OppDayArchiveRequestMessage(quarter:int, year:int){
            super(MessageType.OPPDAY_ARCHIVE_REQUEST, System.SET);
            this._quarter = quarter;
            this._year = year;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVariables:StreamingURLVariables = new StreamingURLVariables();
            urlVariables.add("quarter", this._quarter);
            urlVariables.add("year", this._year);
            return (urlVariables);
        }
        public function get quarter():int{
            return (this._quarter);
        }
        public function set quarter(value:int):void{
            this._quarter = value;
        }
        public function get year():int{
            return (this._year);
        }
        public function set year(value:int):void{
            this._year = value;
        }
        public function set id(value:Number):void{
            this._id = value;
        }

    }
}//package com.settrade.streaming5.message.request.oppday 
﻿package com.settrade.streaming5.message.request.oppday {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.connection.common.*;

    public class OppDaySearchRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _instrumentId:String;

        public function OppDaySearchRequestMessage(instrumentId:String){
            super(MessageType.OPPDAY_SEARCH_REQUEST, System.SET);
            this._instrumentId = instrumentId;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVariables:StreamingURLVariables = new StreamingURLVariables();
            urlVariables.add("symbol", this._instrumentId);
            return (urlVariables);
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function set instrumentId(value:String):void{
            this._instrumentId = value;
        }

    }
}//package com.settrade.streaming5.message.request.oppday 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.connection.common.*;

    public class OrderPushCheckRequestMessage extends RequestMessage implements IBinarySerializable, IUrlSerializable {

        protected var _account:Account;

        public function OrderPushCheckRequestMessage(account:Account){
            super(MessageType.ORDER_PUSH_CHECK_REQUEST, System.REALTIME);
            this._account = account;
        }
        public function toBytes():StreamingByteArray{
            var str:String = "";
            var msgType:String = FeedServiceType.ORDER_PUSH_CHECK.id.toString();
            str = (str + ("REG" + Delimiter.LEVEL1));
            str = (str + (msgType + Delimiter.LEVEL2));
            str = (str + (StreamingAttribute.brokerId + Delimiter.LEVEL2));
            str = (str + this.convertOrderType());
            var byteArray:StreamingByteArray = new StreamingByteArray();
            byteArray.writeUTFBytes(str);
            return (byteArray);
        }
        private function convertOrderType():String{
            var accountEquity:AccountEquity;
            if (this.account.system.isEquity()){
                accountEquity = AccountEquity(this.account);
                switch (accountEquity.orderType){
                    case OrderType.SEOS:
                        return ("SEOS");
                    case OrderType.FIS:
                        return ("FIS");
                    case OrderType.DGW:
                        return ("DGW");
                };
            } else {
                if (this.account.system.isDeriv()){
                    return ("SEOSD");
                };
            };
            return ("");
        }
        public function toURLVariable():StreamingURLVariables{
            return (new StreamingURLVariables());
        }
        public function get account():Account{
            return (this._account);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.connection.common.*;

    public class OutstandingPositionDerivativesRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _accountNo:String;

        public function OutstandingPositionDerivativesRequestMessage(accountNo:String){
            super(MessageType.OUTSTANDING_POSITION_DERIVATIVES_REQUEST, System.DERIV);
            this._accountNo = accountNo;
        }
        public function get accountNo():String{
            return (this._accountNo);
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVariables:StreamingOrderURLVariable = new StreamingOrderURLVariable();
            var OrderMode:String = "OutstandingPosition";
            var accountNo:String = this.accountNo;
            var Service:String = ((StreamingAttribute.isMarketRep) ? "MktRepOrderInfo" : "OrderInfo");
            var NewMode:String = "Pull";
            urlVariables.add("OrderMode", OrderMode);
            urlVariables.add("accountNo", accountNo);
            urlVariables.add("Service", Service);
            urlVariables.add("NewMode", NewMode);
            return (urlVariables);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.connection.common.*;

    public class InstrumentTickerRequestMessage extends RequestMessage implements IUrlSerializable, IBinarySerializable, IRegisterable, IUnregisterable {

        protected var _registList:Vector.<String>;
        protected var _unregistList:Vector.<String>;
        protected var _sequenceIdList:Vector.<int>;

        public function InstrumentTickerRequestMessage(registList:Vector.<String>, unregistList:Vector.<String>, sequenceList:Vector.<int>=null){
            var i:int;
            super(MessageType.INSTRUMENT_TICKER_REQUEST, System.REALTIME);
            this._registList = registList;
            this._unregistList = unregistList;
            if (sequenceList == null){
                this._sequenceIdList = new Vector.<int>();
                i = 0;
                while (i < registList.length) {
                    this._sequenceIdList.push(-1);
                    i++;
                };
            } else {
                this._sequenceIdList = sequenceList;
            };
        }
        public function get unregistList():Array{
            var val:String;
            var list:Array = new Array();
            for each (val in this._unregistList) {
                list.push(val);
            };
            return (list);
        }
        public function get registList():Array{
            var val:String;
            var list:Array = new Array();
            for each (val in this._registList) {
                list.push(val);
            };
            return (list);
        }
        public function get sequenceIdList():Vector.<int>{
            return (this._sequenceIdList);
        }
        public function toBytes():StreamingByteArray{
            var strUnregist:String;
            var byteArray:StreamingByteArray;
            var str:String = "";
            var msgType:String = FeedServiceType.INSTRUMNET_TICKER.id.toString();
            var curVal:String;
            var strRegist:String = "";
            for each (curVal in this._registList) {
                strRegist = (strRegist + (curVal + Delimiter.LEVEL3));
            };
            strRegist = strRegist.slice(0, -1);
            strUnregist = "";
            for each (curVal in this._unregistList) {
                strUnregist = (strUnregist + (curVal + Delimiter.LEVEL3));
            };
            strUnregist = strUnregist.slice(0, -1);
            str = (str + ("REG" + Delimiter.LEVEL1));
            str = (str + (msgType + Delimiter.LEVEL2));
            str = (str + (strRegist + Delimiter.LEVEL2));
            str = (str + strUnregist);

            byteArray = new StreamingByteArray();
            byteArray.writeUTFBytes(str);
            return (byteArray);
        }
        public function toURLVariable():StreamingURLVariables{
            var instrumentId:String;
            var sequenceId:Number;
            var urlVars:StreamingFeedURLVariable = new StreamingFeedURLVariable();
            urlVars.add("service", FeedServiceType.INSTRUMNET_TICKER.id);
            if (this._registList != null){
                for each (instrumentId in this._registList) {
                    urlVars.add("newInstTicker", instrumentId);
                };
            };
            if (this._sequenceIdList != null){
                for each (sequenceId in this._sequenceIdList) {
                    urlVars.add("sequenceId", sequenceId);
                };
            };
            return (urlVars);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.marketticker.*;
    import com.settrade.streaming5.connection.common.*;

    public class MarketTickerRequestMessage extends RequestMessage implements IUrlSerializable, IBinarySerializable, IRegisterable, IUnregisterable {

        protected var _registList:Vector.<MarketTickerRegisterToken>;
        protected var _unregistList:Vector.<MarketTickerRegisterToken>;
        protected var _sequenceIdList:Vector.<int>;

        public function MarketTickerRequestMessage(registList:Vector.<MarketTickerRegisterToken>, sequenceIdList:Vector.<int>=null, unregistList:Vector.<MarketTickerRegisterToken>=null){
            var i:int;
            super(MessageType.MARKET_TICKER_REQUEST, System.REALTIME);
            this._registList = registList;
            this._unregistList = unregistList;
            if (sequenceIdList != null){
                this._sequenceIdList = sequenceIdList;
            } else {
                this._sequenceIdList = new Vector.<int>();
                i = 0;
                while (i < registList.length) {
                    this._sequenceIdList.push(-1);
                    i++;
                };
            };
        }
        public function get registList():Array{
            var system:MarketTickerRegisterToken;
            var list:Array = new Array();
            for each (system in this._registList) {
                list.push(system);
            };
            return (list);
        }
        public function get unregistList():Array{
            var system:MarketTickerRegisterToken;
            var list:Array = new Array();
            for each (system in this._unregistList) {
                list.push(system);
            };
            return (list);
        }
        public function get sequenceIdList():Vector.<int>{
            return (this._sequenceIdList);
        }
        public function toBytes():StreamingByteArray{
            var str:String = "";
            var msgType:String = FeedServiceType.MARKET_TICKER.id.toString();
            var token:MarketTickerRegisterToken;
            var strRegistSystem:String = "";
            var strRegistIsSum:String = "";
            if (this._registList != null){
                for each (token in this._registList) {
                    strRegistSystem = (strRegistSystem + (token.system.feedName + Delimiter.LEVEL3));
                    strRegistIsSum = (strRegistIsSum + (this.convertIsSum(token) + Delimiter.LEVEL3));
                };
            };
            strRegistSystem = strRegistSystem.slice(0, -1);
            strRegistIsSum = strRegistIsSum.slice(0, -1);
            var strUnregistSystem:String = "";
            var strUnregistIsSum:String = "";
            if (this._unregistList != null){
                for each (token in this._unregistList) {
                    strUnregistSystem = (strUnregistSystem + (token.system.feedName + Delimiter.LEVEL3));
                    strUnregistIsSum = (strUnregistIsSum + (this.convertIsSum(token) + Delimiter.LEVEL3));
                };
            };
            strUnregistSystem = strUnregistSystem.slice(0, -1);
            strUnregistIsSum = strUnregistIsSum.slice(0, -1);
            str = (str + ("REG" + Delimiter.LEVEL1));
            str = (str + (msgType + Delimiter.LEVEL2));
            str = (str + (strUnregistIsSum + Delimiter.LEVEL2));
            str = (str + (strRegistIsSum + Delimiter.LEVEL2));
            str = (str + (strUnregistSystem + Delimiter.LEVEL2));
            str = (str + strRegistSystem);
            var byteArray:StreamingByteArray = new StreamingByteArray();
            byteArray.writeUTFBytes(str);
            return (byteArray);
        }
        private function convertIsSum(token:MarketTickerRegisterToken):String{
            return (((token.isSum) ? "Y" : "N"));
        }
        public function toURLVariable():StreamingURLVariables{
            var token:MarketTickerRegisterToken;
            var sequenceId:Number;
            var urlVars:StreamingFeedURLVariable = new StreamingFeedURLVariable();
            var strRegistSystem:String = "";
            strRegistSystem = strRegistSystem.slice(0, -1);
            urlVars.add("service", FeedServiceType.MARKET_TICKER.id);
            if (this._registList != null){
                for each (token in this._registList) {
                    urlVars.add("newMarket2", token.system.feedName);
                    urlVars.add("newSum2", this.convertIsSum(token));
                };
            };
            if (this._sequenceIdList != null){
                for each (sequenceId in this._sequenceIdList) {
                    urlVars.add("sequenceId2", sequenceId);
                };
            };
            return (urlVars);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class ChangeOrderEquityConfirmRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _requestMessage:ChangeOrderEquityRequestMessage;

        public function ChangeOrderEquityConfirmRequestMessage(requestMessage:ChangeOrderEquityRequestMessage){
            super(MessageType.CHANGE_ORDER_EQUITY_CONFIRM_REQUEST, System.EQUITY);
            this._requestMessage = requestMessage;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingURLVariables = this._requestMessage.toURLVariable();
            urlVars.add("confirmedWarn", "YES");
            return (urlVars);
        }
        public function get requestMessage():ChangeOrderEquityRequestMessage{
            return (this._requestMessage);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.message.response.orderstatus.*;
    import com.settrade.streaming5.connection.common.*;

    public class CancelOrderEquityMultipleAccountRequestMessage extends CancelOrderEquityRequestMessage {

        public function CancelOrderEquityMultipleAccountRequestMessage(){
            super();
        }
        override public function toURLVariable():StreamingURLVariables{
            var orderStatusEquity:OrderStatusEquity;
            var streamingURLVariables:StreamingURLVariables = super.toURLVariable();
            streamingURLVariables.remove("txtAccountNo");
            streamingURLVariables.remove("txtClientType");
            if (_orderList.length > 0){
                streamingURLVariables.add("txtAccountNo", _orderList[0].accountNumber);
            };
            for each (orderStatusEquity in _orderList) {
                streamingURLVariables.add("txtCancelAccount", orderStatusEquity.accountNumber);
            };
            return (streamingURLVariables);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class BlockTradeTrTypeRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _instrumentId:String;

        public function BlockTradeTrTypeRequestMessage(instrumentId:String){
            super(MessageType.BLOCK_TRADE_TRTYPE_REQUEST, System.REALTIME);
            this._instrumentId = instrumentId;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingURLVariables = new StreamingURLVariables();
            urlVars.add("mode", "getTRType");
            urlVars.add("seriesId", this._instrumentId);
            return (urlVars);
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class StubRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _data:String;

        public function StubRequestMessage(system:System, data:String){
            super(MessageType.STUB_REQUEST, system);
            this._data = data;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingFeedURLVariable = new StreamingFeedURLVariable();
            urlVars.add("data", this.data);
            return (urlVars);
        }
        public function get data():String{
            return (this._data);
        }
        public function toString():String{
            return (("StubRequestMessage:" + this.data));
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.connection.common.*;

    public class OrderStatusDerivativesRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _accountNo:String;

        public function OrderStatusDerivativesRequestMessage(accountNo:String){
            super(MessageType.ORDER_STATUS_DERIVATIVES_REQUEST, System.DERIV);
            this._accountNo = accountNo;
        }
        public function get accountNo():String{
            return (this._accountNo);
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVariables:StreamingOrderURLVariable = new StreamingOrderURLVariable();
            var OrderMode:String = "OrderInfo";
            var accountNo:String = this.accountNo;
            var Service:String = ((StreamingAttribute.isMarketRep) ? "MktRepOrderInfo" : "OrderInfo");
            var NewMode:String = "Pull";
            urlVariables.add("OrderMode", OrderMode);
            urlVariables.add("accountNo", accountNo);
            urlVariables.add("Service", Service);
            urlVariables.add("NewMode", NewMode);
            return (urlVariables);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class AccountListHierachyDerivativeRequestMessage extends RequestMessage implements IUrlSerializable {

        public function AccountListHierachyDerivativeRequestMessage(){
            super(MessageType.ACCOUNT_LIST_HIERACHY_DERIVATIVES_REQUEST, System.DERIV);
        }
        public function toURLVariable():StreamingURLVariables{
            return (new StreamingURLVariables());
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.common.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.connection.common.*;

    public class OrderStatusPushRequestMessage extends RequestMessage implements IUnregisterable, IRegisterable, IUrlSerializable {

        protected var _registAccountList:Vector.<Account>;
        protected var _unregistAccountList:Vector.<Account>;
        protected var _clientType:String;

        public function OrderStatusPushRequestMessage(registAccountList:Vector.<Account>, unregistAccountList:Vector.<Account>, clientType:String){
            super(MessageType.ORDER_STATUS_PUSH_REQUEST, System.REALTIME);
            this._registAccountList = registAccountList;
            this._unregistAccountList = unregistAccountList;
            this._clientType = clientType;
        }
        public function toURLVariable():StreamingURLVariables{
            var registAccount:Account;
            var unregistAccount:Account;
            var urlVars:StreamingFeedURLVariable = new StreamingFeedURLVariable();
            for each (registAccount in this._registAccountList) {
                urlVars.add("newMkt", this.convertSystem(registAccount));
                urlVars.add("newAccountNo", this.convertAccountNumber(registAccount));
            };
            for each (unregistAccount in this._unregistAccountList) {
                urlVars.add("oldMkt", this.convertSystem(unregistAccount));
                urlVars.add("oldAccountNo", this.convertAccountNumber(unregistAccount));
            };
            urlVars.add("clientType", this._clientType);
            return (urlVars);
        }
        public function get registList():Array{
            var account:Account;
            var list:Array = new Array();
            for each (account in this._registAccountList) {
                list.push(account);
            };
            return (list);
        }
        public function get unregistList():Array{
            var account:Account;
            var list:Array = new Array();
            for each (account in this._unregistAccountList) {
                list.push(account);
            };
            return (list);
        }
        public function get clientType():String{
            return (this._clientType);
        }
        private function convertSystem(account:Account):String{
            if (account == null){
                return ("");
            };
            if (account.system.isEquity()){
                return ("E");
            };
            if (account.system.isDeriv()){
                return ("D");
            };
            return ("");
        }
        private function convertAccountNumber(account:Account):String{
            if (account == null){
                return ("");
            };
            return (account.accountNumber);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.connection.common.*;

    public class PortfolioDerivativesRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _accountNo:String;

        public function PortfolioDerivativesRequestMessage(accountNo:String){
            super(MessageType.PORTFOLIO_DERIVATIVES_REQUEST, System.DERIV);
            this._accountNo = accountNo;
        }
        public function get accountNo():String{
            return (this._accountNo);
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVariables:StreamingOrderURLVariable = new StreamingOrderURLVariable();
            var OrderMode:String = "PortInfo";
            var accountNo:String = this.accountNo;
            var Service:String = ((StreamingAttribute.isMarketRep) ? "MktRepOrderInfo" : "OrderInfo");
            var NewMode:String = "Pull";
            urlVariables.add("OrderMode", OrderMode);
            urlVariables.add("accountNo", accountNo);
            urlVariables.add("Service", Service);
            urlVariables.add("NewMode", NewMode);
            return (urlVariables);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class SynctimeRequestMessage extends RequestMessage implements IUrlSerializable {

        public function SynctimeRequestMessage(){
            super(MessageType.SYNC_TIME_REQUEST, System.REALTIME);
        }
        public function toURLVariable():StreamingURLVariables{
            return (new StreamingURLVariables());
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class PlaceOrderDerivativesRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _instrumentId:String;
        protected var _orderSide:DerivativesOrderSide;
        protected var _price:String;
        protected var _priceType:DerivativesPriceType;
        protected var _position:DerivativesPosition;
        protected var _pin:String;
        protected var _validityType:DerivativesValidity;
        protected var _publishVolume:String;
        protected var _volume:String;
        protected var _accountNumber:String;
        protected var _stopPrice:String;
        protected var _stopInstrumentId:String;
        protected var _stopCondition:StopCondition;

        public function PlaceOrderDerivativesRequestMessage(){
            super(MessageType.PLACE_ORDER_DERIVATIVES_REQUEST, System.DERIV);
            this._instrumentId = "";
            this._orderSide = DerivativesOrderSide.NO_SIDE;
            this._price = "";
            this._priceType = DerivativesPriceType.NO_TYPE;
            this._position = DerivativesPosition.NO_TYPE;
            this._pin = "";
            this._validityType = DerivativesValidity.NO_TYPE;
            this._publishVolume = "";
            this._volume = "";
            this._accountNumber = "";
            this._stopPrice = "";
            this._stopInstrumentId = "";
            this._stopCondition = StopCondition.NO_TYPE;
        }
        public function toURLVariable():StreamingURLVariables{
            var stopPrice:String;
            var stopSeriesId:String;
            var stopCondition:String;
            var urlVariables:StreamingOrderURLVariable = new StreamingOrderURLVariable();
            var mode:String = "placePro";
            var seriesId:String = this.instrumentId;
            var side:String = this.convertSide();
            var position:String = this.convertPosition();
            var price:String = this.price;
            var priceType:String = this.convertPriceType();
            var pin:String = this.pin;
            var validityType:String = this.convertValidity();
            var publishVolume:String = this.publishVolume;
            var volume:String = this.volume;
            var accno:String = this.accountNumber;
            urlVariables.add("mode", mode);
            urlVariables.add("seriesId", seriesId);
            urlVariables.add("side", side);
            urlVariables.add("position", position);
            urlVariables.add("price", price);
            urlVariables.add("priceType", priceType);
            urlVariables.add("pin", pin);
            urlVariables.add("validityType", validityType);
            urlVariables.add("publishVolume", publishVolume);
            urlVariables.add("volume", volume);
            urlVariables.add("accountNo", accno);
            if (!this.stopCondition.isNoType()){
                stopPrice = this.stopPrice;
                stopSeriesId = this.stopInstrumentId;
                stopCondition = this.convertStopCondition();
                urlVariables.add("stopPrice", stopPrice);
                urlVariables.add("stopSeriesId", stopSeriesId);
                urlVariables.add("stopCondition", stopCondition);
            };
            urlVariables.add("apiService", "Gen5");
            return (urlVariables);
        }
        private function convertStopCondition():String{
            switch (this._stopCondition){
                case StopCondition.BID_GREATER_STOP:
                    return ("1");
                case StopCondition.BID_LESSER_STOP:
                    return ("2");
                case StopCondition.ASK_GREATER_STOP:
                    return ("3");
                case StopCondition.ASK_LESSER_STOP:
                    return ("4");
                case StopCondition.LAST_GREATER_STOP:
                    return ("5");
                case StopCondition.LAST_LESSER_STOP:
                    return ("6");
                default:
                    return ("0");
            };
        }
        private function convertValidity():String{
            switch (this._validityType){
                case DerivativesValidity.DAY:
                    return ("2");
                case DerivativesValidity.FAK:
                    return ("1");
                case DerivativesValidity.FOK:
                    return ("0");
                default:
                    return ("");
            };
        }
        private function convertPriceType():String{
            switch (this._priceType){
                case DerivativesPriceType.LIMIT:
                    return ("L");
                case DerivativesPriceType.MP:
                    return ("M");
                default:
                    return ("");
            };
        }
        private function convertPosition():String{
            switch (this._position){
                case DerivativesPosition.OPEN:
                    return ("O");
                case DerivativesPosition.CLOSE:
                    return ("C");
                default:
                    return ("");
            };
        }
        private function convertSide():String{
            switch (this._orderSide){
                case DerivativesOrderSide.LONG:
                    return ("B");
                case DerivativesOrderSide.SHORT:
                    return ("S");
                default:
                    return ("");
            };
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function set instrumentId(value:String):void{
            this._instrumentId = value;
        }
        public function get orderSide():DerivativesOrderSide{
            return (this._orderSide);
        }
        public function set orderSide(value:DerivativesOrderSide):void{
            this._orderSide = value;
        }
        public function get price():String{
            return (this._price);
        }
        public function set price(value:String):void{
            this._price = value;
        }
        public function get priceType():DerivativesPriceType{
            return (this._priceType);
        }
        public function set priceType(value:DerivativesPriceType):void{
            this._priceType = value;
        }
        public function get position():DerivativesPosition{
            return (this._position);
        }
        public function set position(value:DerivativesPosition):void{
            this._position = value;
        }
        public function get pin():String{
            return (this._pin);
        }
        public function set pin(value:String):void{
            this._pin = value;
        }
        public function get validityType():DerivativesValidity{
            return (this._validityType);
        }
        public function set validityType(value:DerivativesValidity):void{
            this._validityType = value;
        }
        public function get publishVolume():String{
            return (this._publishVolume);
        }
        public function set publishVolume(value:String):void{
            this._publishVolume = value;
        }
        public function get volume():String{
            return (this._volume);
        }
        public function set volume(value:String):void{
            this._volume = value;
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }
        public function set accountNumber(value:String):void{
            this._accountNumber = value;
        }
        public function get stopPrice():String{
            return (this._stopPrice);
        }
        public function set stopPrice(value:String):void{
            this._stopPrice = value;
        }
        public function get stopInstrumentId():String{
            return (this._stopInstrumentId);
        }
        public function set stopInstrumentId(value:String):void{
            this._stopInstrumentId = value;
        }
        public function get stopCondition():StopCondition{
            return (this._stopCondition);
        }
        public function set stopCondition(value:StopCondition):void{
            this._stopCondition = value;
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class OrderStatusSearchDerivativesRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _accountNumber:String;
        protected var _orderNumber:String;
        protected var _status:OrderFilterStatus;
        protected var _tfexOrderNumber:String;
        protected var _instrumentId:String;
        protected var _orderSide:DerivativesOrderSide;
        protected var _enterId:String;
        protected var _priceType:DerivativesPriceType;
        protected var _validity:DerivativesValidity;
        protected var _validityDate:Date;
        protected var _stopId:String;

        public function OrderStatusSearchDerivativesRequestMessage(accountNumber:String, orderNumber:String, status:OrderFilterStatus, tfexOrderNumber:String, instrumentId:String, orderSide:DerivativesOrderSide, enterId:String, priceType:DerivativesPriceType, validity:DerivativesValidity, stopId:String, validityDate:Date=null){
            super(MessageType.ORDER_STATUS_SEARCH_DERIVATIVES_REQUEST, System.DERIV);
            this._accountNumber = accountNumber;
            this._orderNumber = orderNumber;
            this._status = status;
            this._tfexOrderNumber = tfexOrderNumber;
            this._instrumentId = instrumentId;
            this._orderSide = orderSide;
            this._enterId = enterId;
            this._priceType = priceType;
            this._validity = validity;
            this._validityDate = validityDate;
            this._stopId = stopId;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingURLVariables = new StreamingURLVariables();
            urlVars.add("accountNo", this._accountNumber);
            urlVars.add("txtOrderNo", this._orderNumber);
            urlVars.add("status", this._status.derivativesValue);
            urlVars.add("txtTFEXOrderNo", this._tfexOrderNumber);
            urlVars.add("txtSeriesId", this._instrumentId);
            urlVars.add("txtSide", this.convertSide());
            urlVars.add("txtEnterId", this._enterId);
            urlVars.add("txtType", this.convertPriceType());
            urlVars.add("txtValidity", this.convertValidity());
            urlVars.add("txtValidUntilDate", this.convertValidityDate());
            urlVars.add("txtStopId", this._stopId);
            return (urlVars);
        }
        private function convertSide():String{
            switch (this._orderSide){
                case DerivativesOrderSide.LONG:
                    return ("B");
                case DerivativesOrderSide.SHORT:
                    return ("S");
                default:
                    return ("A");
            };
        }
        private function convertValidityDate():String{
            if (((!((this._validityDate == null))) && (this._validity.isDate()))){
                return (StreamingTimeFormatter.DATE_SLASH_FORMAT.format(this._validityDate));
            };
            return ("");
        }
        private function convertValidity():String{
            switch (this._validity){
                case DerivativesValidity.ALL_TYPE:
                    return ("A");
                case DerivativesValidity.FOK:
                    return ("FOK");
                case DerivativesValidity.FAK:
                    return ("FAK");
                case DerivativesValidity.DAY:
                    return ("DAY");
                case DerivativesValidity.DATE:
                    return ("DATE");
                case DerivativesValidity.EXPIRE:
                    return ("EXPIRE");
                default:
                    return ("");
            };
        }
        private function convertPriceType():String{
            switch (this._priceType){
                case DerivativesPriceType.ALL_TYPE:
                    return ("A");
                case DerivativesPriceType.MP:
                    return ("M");
                case DerivativesPriceType.LIMIT:
                    return ("L");
                default:
                    return ("");
            };
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }
        public function get orderNumber():String{
            return (this._orderNumber);
        }
        public function get status():OrderFilterStatus{
            return (this._status);
        }
        public function get tfexOrderNumber():String{
            return (this._tfexOrderNumber);
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get orderSide():DerivativesOrderSide{
            return (this._orderSide);
        }
        public function get enterId():String{
            return (this._enterId);
        }
        public function get priceType():DerivativesPriceType{
            return (this._priceType);
        }
        public function get validity():DerivativesValidity{
            return (this._validity);
        }
        public function get stopId():String{
            return (this._stopId);
        }
        public function get validityDate():Date{
            return (this._validityDate);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class OptionsStrikePriceListRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _listName:String;

        public function OptionsStrikePriceListRequestMessage(listName){
            super(MessageType.OPTIONS_STRIKE_PRICE_LIST_REQUEST, System.REALTIME);
            this._listName = listName;
        }
        public function get listName():String{
            return (this._listName);
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingFeedURLVariable = new StreamingFeedURLVariable();
            urlVars.add("service", FeedServiceType.OPTIONS_STRIKE_PRICE_LIST.id);
            if (this._listName != null){
                urlVars.add("optStrikeListName", this._listName);
            };
            return (urlVars);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class PortfolioEquityRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _accountNumber:String;
        protected var _accountType:String;

        public function PortfolioEquityRequestMessage(accountNumber:String, accountType:String){
            super(MessageType.PORTFOLIO_EQUITY_REQUEST, System.EQUITY);
            this._accountNumber = accountNumber;
            this._accountType = accountType;
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVariables:StreamingOrderURLVariable = new StreamingOrderURLVariable();
            var Service:String = "Portfolio";
            var txtAccountNo:String = this._accountNumber;
            var txtAccountType:String = this._accountType;
            urlVariables.add("Service", Service);
            urlVariables.add("txtAccountNo", txtAccountNo);
            urlVariables.add("txtAccountType", txtAccountType);
            return (urlVariables);
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }
        public function get accountType():String{
            return (this._accountType);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class AccountInfoEquityRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _accountNumber:String;
        protected var _accountType:String;

        public function AccountInfoEquityRequestMessage(accountNumber:String, accountType:String){
            super(MessageType.ACCOUNT_INFO_EQUITY_REQUEST, System.EQUITY);
            this._accountNumber = accountNumber;
            this._accountType = accountType;
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }
        public function get accountType():String{
            return (this._accountType);
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVariables:StreamingOrderURLVariable = new StreamingOrderURLVariable();
            var Service:String = "AccountInfo";
            var txtAccountNo:String = this._accountNumber;
            var txtAccountType:String = this._accountType;
            urlVariables.add("Service", Service);
            urlVariables.add("txtAccountNo", txtAccountNo);
            return (urlVariables);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class MarginStockRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _instrumentId:String;
        protected var _accountNumber:String;

        public function MarginStockRequestMessage(instrumentId:String, accountNumber:String){
            super(MessageType.MARGIN_STOCK_REQUEST, System.EQUITY);
            this._instrumentId = instrumentId;
            this._accountNumber = accountNumber;
        }
        public function toURLVariable():StreamingURLVariables{
            var instrumentId:String = this._instrumentId;
            var accountNumber:String = this._accountNumber;
            var urlVars:StreamingURLVariables = new StreamingURLVariables();
            urlVars.add("symbol", instrumentId);
            urlVars.add("accNo", accountNumber);
            return (urlVars);
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.common.*;

    public class VolumeByPriceRequest extends RequestMessage implements IUrlSerializable {

        protected var _instrumentId:String;

        public function VolumeByPriceRequest(instrumentId:String){
            super(MessageType.VOLUME_BY_PRICE_REQUEST, System.REALTIME);
            this._instrumentId = instrumentId;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingFeedURLVariable = new StreamingFeedURLVariable();
            urlVars.add("service", FeedServiceType.VOLUME_BY_PRICE.id);
            if (this._instrumentId != null){
                urlVars.add("volInstrument", this._instrumentId);
            };
            return (urlVars);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.connection.common.*;

    public class DealSummaryDerivativesByInstrumentIdRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _accountNo:String;

        public function DealSummaryDerivativesByInstrumentIdRequestMessage(accountNo:String){
            super(MessageType.DEAL_SUMMARY_DERIVATIVES_BY_INSTRUMENT_ID_REQUEST, System.DERIV);
            this._accountNo = accountNo;
        }
        public function get accountNo():String{
            return (this._accountNo);
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVariables:StreamingOrderURLVariable = new StreamingOrderURLVariable();
            var OrderMode:String = "DealBySeries";
            var accountNo:String = this.accountNo;
            var Service:String = ((StreamingAttribute.isMarketRep) ? "MktRepOrderInfo" : "OrderInfo");
            var NewMode:String = "Pull";
            urlVariables.add("OrderMode", OrderMode);
            urlVariables.add("accountNo", accountNo);
            urlVariables.add("Service", Service);
            urlVariables.add("NewMode", NewMode);
            return (urlVariables);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.connection.common.*;

    public class DealSummaryDerivativesRequestMessage extends RequestMessage implements IUrlSerializable {

        protected var _accountNo:String;

        public function DealSummaryDerivativesRequestMessage(accountNo:String){
            super(MessageType.DEAL_SUMMARY_DERIVATIVES_REQUEST, System.DERIV);
            this._accountNo = accountNo;
        }
        public function get accountNo():String{
            return (this._accountNo);
        }
        public function toURLVariable():StreamingURLVariables{
            var urlVariables:StreamingOrderURLVariable = new StreamingOrderURLVariable();
            var OrderMode:String = "DealSummary";
            var accountNo:String = this.accountNo;
            var Service:String = ((StreamingAttribute.isMarketRep) ? "MktRepOrderInfo" : "OrderInfo");
            var NewMode:String = "Pull";
            urlVariables.add("OrderMode", OrderMode);
            urlVariables.add("accountNo", accountNo);
            urlVariables.add("Service", Service);
            urlVariables.add("NewMode", NewMode);
            return (urlVariables);
        }

    }
}//package com.settrade.streaming5.message.request 
﻿package com.settrade.streaming5.message {
    import com.settrade.streaming5.enumuration.*;

    public interface IMessage {

        function get id():Number;
        function get type():MessageType;
        function get side():MessageSide;
        function get system():System;

    }
}//package com.settrade.streaming5.message 
﻿package com.settrade.streaming5.message {

    public interface IUnregisterable {

        function get unregistList():Array;

    }
}//package com.settrade.streaming5.message 
﻿package com.settrade.streaming5.message {
    import com.settrade.streaming5.connection.common.*;

    public interface IBinarySerializable {

        function toBytes():StreamingByteArray;

    }
}//package com.settrade.streaming5.message 
﻿package com.settrade.streaming5.message {
    import __AS3__.vec.*;

    public interface IMultipleMessage extends IMessage {

        function get messageList():Vector.<Message>;

    }
}//package com.settrade.streaming5.message 
﻿package com.settrade.streaming5.message.feed.announcement {

    public class MarketStatusChangeMessage {

        protected var _market:String;
        protected var _marketId:String;
        protected var _marketStatus:String;

        public function MarketStatusChangeMessage(){
            super();
            this._market = "";
            this._marketId = "";
            this._marketStatus = "";
        }
        public function get market():String{
            return (this._market);
        }
        public function set market(value:String):void{
            this._market = value;
        }
        public function get marketId():String{
            return (this._marketId);
        }
        public function set marketId(value:String):void{
            this._marketId = value;
        }
        public function get marketStatus():String{
            return (this._marketStatus);
        }
        public function set marketStatus(value:String):void{
            this._marketStatus = value;
        }

    }
}//package com.settrade.streaming5.message.feed.announcement 
﻿package com.settrade.streaming5.message.feed.announcement {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.feed.*;

    public class AnnouncementFeedMessage extends FeedMessage {

        var _hasMarketStatusChange:Boolean;
        var _hasBigLot:Boolean;
        var _instrumentType:InstrumentType;
        var _time:String;
        var _marketStatusMessage:MarketStatusChangeMessage;
        var _bigLotMessage:BigLotMessage;

        public function AnnouncementFeedMessage(source:Source){
            super(MessageType.ANNOUNCEMENT_FEED, System.REALTIME, source);
            this._hasMarketStatusChange = false;
            this._hasBigLot = false;
            this._instrumentType = InstrumentType.NO_TYPE;
            this._time = "";
            this._marketStatusMessage = null;
            this._bigLotMessage = null;
        }
        public function get instrumentType():InstrumentType{
            return (this._instrumentType);
        }
        public function set instrumentType(value:InstrumentType):void{
            this._instrumentType = value;
        }
        public function get time():String{
            return (this._time);
        }
        public function set time(value:String):void{
            this._time = value;
        }
        public function get marketStatusMessage():MarketStatusChangeMessage{
            return (this._marketStatusMessage);
        }
        public function set marketStatusMessage(value:MarketStatusChangeMessage):void{
            this._marketStatusMessage = value;
        }
        public function get bigLotMessage():BigLotMessage{
            return (this._bigLotMessage);
        }
        public function set bigLotMessage(value:BigLotMessage):void{
            this._bigLotMessage = value;
        }
        public function get hasMarketStatusChange():Boolean{
            return (this._hasMarketStatusChange);
        }
        public function set hasMarketStatusChange(value:Boolean):void{
            this._hasMarketStatusChange = value;
        }
        public function get hasBigLot():Boolean{
            return (this._hasBigLot);
        }
        public function set hasBigLot(value:Boolean):void{
            this._hasBigLot = value;
        }

    }
}//package com.settrade.streaming5.message.feed.announcement 
﻿package com.settrade.streaming5.message.feed.announcement {

    public class BigLotMessage {

        protected var _instrumentId:String;
        protected var _volume:Number;
        protected var _price:Number;
        protected var _priceDigit:int;

        public function BigLotMessage(){
            super();
            this._instrumentId = "";
            this._volume = NaN;
            this._price = NaN;
            this._priceDigit = 0;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function set instrumentId(value:String):void{
            this._instrumentId = value;
        }
        public function get volume():Number{
            return (this._volume);
        }
        public function set volume(value:Number):void{
            this._volume = value;
        }
        public function get price():Number{
            return (this._price);
        }
        public function set price(value:Number):void{
            this._price = value;
        }
        public function get priceDigit():int{
            return (this._priceDigit);
        }
        public function set priceDigit(value:int):void{
            this._priceDigit = value;
        }

    }
}//package com.settrade.streaming5.message.feed.announcement 
﻿package com.settrade.streaming5.message.feed {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;

    public class FeedMessage extends Message {

        protected var _source:Source;

        public function FeedMessage(type:MessageType, system:System, source:Source){
            super(type, MessageSide.FEED, system);
            this._source = source;
        }
        public function get source():Source{
            return (this._source);
        }

    }
}//package com.settrade.streaming5.message.feed 
﻿package com.settrade.streaming5.message.feed {
    import com.settrade.streaming5.enumuration.*;

    public class OrderStatusDerivativesAllFeedMessage extends OrderStatusDerivativesFeedMessage {

        public function OrderStatusDerivativesAllFeedMessage(source:Source){
            super(source);
            this._type = MessageType.ORDER_STATUS_DERIVATIVES_ALL_FEED;
        }
    }
}//package com.settrade.streaming5.message.feed 
﻿package com.settrade.streaming5.message.feed {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;

    public class OrderStatusEquityFeedMessage extends FeedMessage {

        protected var _orderNumber:String;
        protected var _accountNumber:String;
        protected var _tradeDate:String;
        protected var _orderTime:String;
        protected var _orderTimeHour:int;
        protected var _orderTimeMinute:int;
        protected var _orderTimeSecond:int;
        protected var _instrumentId:String;
        protected var _nvdrFlag:String;
        protected var _price:Number;
        protected var _priceType:PriceType;
        protected var _orderSide:OrderSide;
        protected var _volume:int;
        protected var _matchVolume:int;
        protected var _balanceVolume:int;
        protected var _cancelVolume:int;
        protected var _canCancel:Boolean;
        protected var _canChange:Boolean;
        protected var _isMatchOrder:Boolean;
        protected var _status:String;
        protected var _canChangePriceVolume:Boolean;
        protected var _orderNumberSeos:String;
        protected var _externalOrderNumber:String;

        public function OrderStatusEquityFeedMessage(source:Source){
            super(MessageType.ORDER_STATUS_EQUITY_FEED, System.REALTIME, source);
            this._orderNumber = "";
            this._accountNumber = "";
            this._tradeDate = "";
            this._orderTimeHour = 0;
            this._orderTimeMinute = 0;
            this._orderTimeSecond = 0;
            this._instrumentId = "";
            this._nvdrFlag = "";
            this._price = NaN;
            this._priceType = PriceType.NO_TYPE;
            this._orderSide = OrderSide.NO_SIDE;
            this._volume = int.MIN_VALUE;
            this._matchVolume = int.MIN_VALUE;
            this._balanceVolume = int.MIN_VALUE;
            this._cancelVolume = int.MIN_VALUE;
            this._canCancel = false;
            this._canChange = false;
            this._isMatchOrder = false;
            this._status = "";
            this._canChangePriceVolume = false;
            this._orderNumberSeos = "";
            this._externalOrderNumber = "";
        }
        public function get orderNumber():String{
            return (this._orderNumber);
        }
        public function set orderNumber(value:String):void{
            this._orderNumber = value;
        }
        public function get orderTimeString():String{
            return (((((StreamingNumberFormatter.formatIntWithLeadingZero(this.orderTimeHour, 2) + ":") + StreamingNumberFormatter.formatIntWithLeadingZero(this.orderTimeMinute, 2)) + ":") + StreamingNumberFormatter.formatIntWithLeadingZero(this.orderTimeSecond, 2)));
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }
        public function set accountNumber(value:String):void{
            this._accountNumber = value;
        }
        public function get tradeDate():String{
            return (this._tradeDate);
        }
        public function set tradeDate(value:String):void{
            this._tradeDate = value;
        }
        public function get orderTime():String{
            return (((((StreamingNumberFormatter.formatIntWithLeadingZero(this.orderTimeHour, 2) + ":") + StreamingNumberFormatter.formatIntWithLeadingZero(this.orderTimeMinute, 2)) + ":") + StreamingNumberFormatter.formatIntWithLeadingZero(this.orderTimeSecond, 2)));
        }
        public function get orderTimeHour():int{
            return (this._orderTimeHour);
        }
        public function set orderTimeHour(value:int):void{
            this._orderTimeHour = value;
        }
        public function get orderTimeMinute():int{
            return (this._orderTimeMinute);
        }
        public function set orderTimeMinute(value:int):void{
            this._orderTimeMinute = value;
        }
        public function get orderTimeSecond():int{
            return (this._orderTimeSecond);
        }
        public function set orderTimeSecond(value:int):void{
            this._orderTimeSecond = value;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function set instrumentId(value:String):void{
            this._instrumentId = value;
        }
        public function get nvdrFlag():String{
            return (this._nvdrFlag);
        }
        public function set nvdrFlag(value:String):void{
            this._nvdrFlag = value;
        }
        public function get price():Number{
            return (this._price);
        }
        public function set price(value:Number):void{
            this._price = value;
        }
        public function get priceType():PriceType{
            return (this._priceType);
        }
        public function set priceType(value:PriceType):void{
            this._priceType = value;
        }
        public function get orderSide():OrderSide{
            return (this._orderSide);
        }
        public function set orderSide(value:OrderSide):void{
            this._orderSide = value;
        }
        public function get volume():int{
            return (this._volume);
        }
        public function set volume(value:int):void{
            this._volume = value;
        }
        public function get matchVolume():int{
            return (this._matchVolume);
        }
        public function set matchVolume(value:int):void{
            this._matchVolume = value;
        }
        public function get balanceVolume():int{
            return (this._balanceVolume);
        }
        public function set balanceVolume(value:int):void{
            this._balanceVolume = value;
        }
        public function get cancelVolume():int{
            return (this._cancelVolume);
        }
        public function set cancelVolume(value:int):void{
            this._cancelVolume = value;
        }
        public function get canCancel():Boolean{
            return (this._canCancel);
        }
        public function set canCancel(value:Boolean):void{
            this._canCancel = value;
        }
        public function get canChange():Boolean{
            return (this._canChange);
        }
        public function set canChange(value:Boolean):void{
            this._canChange = value;
        }
        public function get isMatchOrder():Boolean{
            return (this._isMatchOrder);
        }
        public function set isMatchOrder(value:Boolean):void{
            this._isMatchOrder = value;
        }
        public function get status():String{
            return (this._status);
        }
        public function set status(value:String):void{
            this._status = value;
        }
        public function get canChangePriceVolume():Boolean{
            return (this._canChangePriceVolume);
        }
        public function set canChangePriceVolume(value:Boolean):void{
            this._canChangePriceVolume = value;
        }
        public function get orderNumberSeos():String{
            return (this._orderNumberSeos);
        }
        public function set orderNumberSeos(value:String):void{
            this._orderNumberSeos = value;
        }
        public function get externalOrderNumber():String{
            return (this._externalOrderNumber);
        }
        public function set externalOrderNumber(value:String):void{
            this._externalOrderNumber = value;
        }

    }
}//package com.settrade.streaming5.message.feed 
﻿package com.settrade.streaming5.message.feed.info {
    import com.settrade.streaming5.enumuration.*;

    public class InfoEquityFeedMessage extends InfoFeedMessage {

        protected var _instrumentSubType:InstrumentSubType;

        public function InfoEquityFeedMessage(source:Source){
            super(source);
            this._instrumentSubType = InstrumentSubType.NO_TYPE;
        }
        public function get instrumentSubType():InstrumentSubType{
            return (this._instrumentSubType);
        }
        public function set instrumentSubType(value:InstrumentSubType):void{
            this._instrumentSubType = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {

    public class InfoSummaryETF extends InfoSummaryEquity {

        protected var _iNav:Number;

        public function InfoSummaryETF(){
            super();
            this._iNav = NaN;
        }
        public function get iNav():Number{
            return (this._iNav);
        }
        public function set iNav(value:Number):void{
            this._iNav = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.feed.*;

    public class InfoOddLotFeedMessage extends FeedMessage {

        protected var _instrumentId:String;
        protected var _instrumentType:InstrumentType;
        protected var _instrumentSubType:InstrumentSubType;
        protected var _priceDigit:int;
        protected var _previousClose:Number;
        protected var _high:Number;
        protected var _low:Number;
        protected var _ceiling:Number;
        protected var _floor:Number;
        protected var _last:Number;
        protected var _change:Number;
        protected var _percentChange:Number;
        protected var _totalVolume:Number;
        protected var _totalValue:Number;
        protected var _average:Number;
        protected var _status:String;
        protected var _percentBuy:int;
        protected var _percentSell:int;
        protected var _averageBuy:Number;
        protected var _averageSell:Number;
        protected var _bidFlag:PriceType;
        protected var _askFlag:PriceType;
        protected var _bidPrice1:Number;
        protected var _bidPrice2:Number;
        protected var _bidPrice3:Number;
        protected var _bidPrice4:Number;
        protected var _bidPrice5:Number;
        protected var _askPrice1:Number;
        protected var _askPrice2:Number;
        protected var _askPrice3:Number;
        protected var _askPrice4:Number;
        protected var _askPrice5:Number;
        protected var _bidVolume1:Number;
        protected var _bidVolume2:Number;
        protected var _bidVolume3:Number;
        protected var _bidVolume4:Number;
        protected var _bidVolume5:Number;
        protected var _askVolume1:Number;
        protected var _askVolume2:Number;
        protected var _askVolume3:Number;
        protected var _askVolume4:Number;
        protected var _askVolume5:Number;
        protected var _currentState:InstrumentInfoCurrentState;
        protected var _projectedPrice:Number;
        protected var _openPrice1:Number;
        protected var _openPrice2:Number;
        protected var _projectedVolume:Number;

        public function InfoOddLotFeedMessage(source:Source){
            super(MessageType.INFO_ODDLOT_FEED, System.REALTIME, source);
            this._instrumentId = "";
            this._instrumentType = InstrumentType.NO_TYPE;
            this._instrumentSubType = InstrumentSubType.NO_TYPE;
            this._priceDigit = 2;
            this._previousClose = NaN;
            this._high = NaN;
            this._low = NaN;
            this._ceiling = NaN;
            this._floor = NaN;
            this._last = NaN;
            this._change = NaN;
            this._percentChange = NaN;
            this._totalVolume = NaN;
            this._totalValue = NaN;
            this._average = NaN;
            this._status = "";
            this._percentBuy = int.MIN_VALUE;
            this._percentSell = int.MIN_VALUE;
            this._averageBuy = NaN;
            this._averageSell = NaN;
            this._bidFlag = PriceType.NO_TYPE;
            this._askFlag = PriceType.NO_TYPE;
            this._bidPrice1 = NaN;
            this._bidPrice2 = NaN;
            this._bidPrice3 = NaN;
            this._bidPrice4 = NaN;
            this._bidPrice5 = NaN;
            this._askPrice1 = NaN;
            this._askPrice2 = NaN;
            this._askPrice3 = NaN;
            this._askPrice4 = NaN;
            this._askPrice5 = NaN;
            this._bidVolume1 = NaN;
            this._bidVolume2 = NaN;
            this._bidVolume3 = NaN;
            this._bidVolume4 = NaN;
            this._bidVolume5 = NaN;
            this._askVolume1 = NaN;
            this._askVolume2 = NaN;
            this._askVolume3 = NaN;
            this._askVolume4 = NaN;
            this._askVolume5 = NaN;
            this._currentState = InstrumentInfoCurrentState.NO_STATE;
            this._projectedPrice = NaN;
            this._openPrice1 = NaN;
            this._openPrice2 = NaN;
            this._projectedVolume = NaN;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function set instrumentId(value:String):void{
            this._instrumentId = value;
        }
        public function get instrumentType():InstrumentType{
            return (this._instrumentType);
        }
        public function set instrumentType(value:InstrumentType):void{
            this._instrumentType = value;
        }
        public function get priceDigit():int{
            return (this._priceDigit);
        }
        public function set priceDigit(value:int):void{
            this._priceDigit = value;
        }
        public function get instrumentSubType():InstrumentSubType{
            return (this._instrumentSubType);
        }
        public function set instrumentSubType(value:InstrumentSubType):void{
            this._instrumentSubType = value;
        }
        public function get previousClose():Number{
            return (this._previousClose);
        }
        public function set previousClose(value:Number):void{
            this._previousClose = value;
        }
        public function get high():Number{
            return (this._high);
        }
        public function set high(value:Number):void{
            this._high = value;
        }
        public function get low():Number{
            return (this._low);
        }
        public function set low(value:Number):void{
            this._low = value;
        }
        public function get ceiling():Number{
            return (this._ceiling);
        }
        public function set ceiling(value:Number):void{
            this._ceiling = value;
        }
        public function get floor():Number{
            return (this._floor);
        }
        public function set floor(value:Number):void{
            this._floor = value;
        }
        public function get last():Number{
            return (this._last);
        }
        public function set last(value:Number):void{
            this._last = value;
        }
        public function get change():Number{
            return (this._change);
        }
        public function set change(value:Number):void{
            this._change = value;
        }
        public function get percentChange():Number{
            return (this._percentChange);
        }
        public function set percentChange(value:Number):void{
            this._percentChange = value;
        }
        public function get totalVolume():Number{
            return (this._totalVolume);
        }
        public function set totalVolume(value:Number):void{
            this._totalVolume = value;
        }
        public function get totalValue():Number{
            return (this._totalValue);
        }
        public function set totalValue(value:Number):void{
            this._totalValue = value;
        }
        public function get average():Number{
            return (this._average);
        }
        public function set average(value:Number):void{
            this._average = value;
        }
        public function get status():String{
            return (this._status);
        }
        public function set status(value:String):void{
            this._status = value;
        }
        public function get percentBuy():int{
            return (this._percentBuy);
        }
        public function set percentBuy(value:int):void{
            this._percentBuy = value;
        }
        public function get percentSell():int{
            return (this._percentSell);
        }
        public function set percentSell(value:int):void{
            this._percentSell = value;
        }
        public function get averageBuy():Number{
            return (this._averageBuy);
        }
        public function set averageBuy(value:Number):void{
            this._averageBuy = value;
        }
        public function get averageSell():Number{
            return (this._averageSell);
        }
        public function set averageSell(value:Number):void{
            this._averageSell = value;
        }
        public function get bidFlag():PriceType{
            return (this._bidFlag);
        }
        public function set bidFlag(value:PriceType):void{
            this._bidFlag = value;
        }
        public function get askFlag():PriceType{
            return (this._askFlag);
        }
        public function set askFlag(value:PriceType):void{
            this._askFlag = value;
        }
        public function get bidPrice1():Number{
            return (this._bidPrice1);
        }
        public function set bidPrice1(value:Number):void{
            this._bidPrice1 = value;
        }
        public function get bidPrice2():Number{
            return (this._bidPrice2);
        }
        public function set bidPrice2(value:Number):void{
            this._bidPrice2 = value;
        }
        public function get bidPrice3():Number{
            return (this._bidPrice3);
        }
        public function set bidPrice3(value:Number):void{
            this._bidPrice3 = value;
        }
        public function get bidPrice4():Number{
            return (this._bidPrice4);
        }
        public function set bidPrice4(value:Number):void{
            this._bidPrice4 = value;
        }
        public function get bidPrice5():Number{
            return (this._bidPrice5);
        }
        public function set bidPrice5(value:Number):void{
            this._bidPrice5 = value;
        }
        public function get askPrice1():Number{
            return (this._askPrice1);
        }
        public function set askPrice1(value:Number):void{
            this._askPrice1 = value;
        }
        public function get askPrice2():Number{
            return (this._askPrice2);
        }
        public function set askPrice2(value:Number):void{
            this._askPrice2 = value;
        }
        public function get askPrice3():Number{
            return (this._askPrice3);
        }
        public function set askPrice3(value:Number):void{
            this._askPrice3 = value;
        }
        public function get askPrice4():Number{
            return (this._askPrice4);
        }
        public function set askPrice4(value:Number):void{
            this._askPrice4 = value;
        }
        public function get askPrice5():Number{
            return (this._askPrice5);
        }
        public function set askPrice5(value:Number):void{
            this._askPrice5 = value;
        }
        public function get bidVolume1():Number{
            return (this._bidVolume1);
        }
        public function set bidVolume1(value:Number):void{
            this._bidVolume1 = value;
        }
        public function get bidVolume2():Number{
            return (this._bidVolume2);
        }
        public function set bidVolume2(value:Number):void{
            this._bidVolume2 = value;
        }
        public function get bidVolume3():Number{
            return (this._bidVolume3);
        }
        public function set bidVolume3(value:Number):void{
            this._bidVolume3 = value;
        }
        public function get bidVolume4():Number{
            return (this._bidVolume4);
        }
        public function set bidVolume4(value:Number):void{
            this._bidVolume4 = value;
        }
        public function get bidVolume5():Number{
            return (this._bidVolume5);
        }
        public function set bidVolume5(value:Number):void{
            this._bidVolume5 = value;
        }
        public function get askVolume1():Number{
            return (this._askVolume1);
        }
        public function set askVolume1(value:Number):void{
            this._askVolume1 = value;
        }
        public function get askVolume2():Number{
            return (this._askVolume2);
        }
        public function set askVolume2(value:Number):void{
            this._askVolume2 = value;
        }
        public function get askVolume3():Number{
            return (this._askVolume3);
        }
        public function set askVolume3(value:Number):void{
            this._askVolume3 = value;
        }
        public function get askVolume4():Number{
            return (this._askVolume4);
        }
        public function set askVolume4(value:Number):void{
            this._askVolume4 = value;
        }
        public function get askVolume5():Number{
            return (this._askVolume5);
        }
        public function set askVolume5(value:Number):void{
            this._askVolume5 = value;
        }
        public function get currentState():InstrumentInfoCurrentState{
            return (this._currentState);
        }
        public function set currentState(value:InstrumentInfoCurrentState):void{
            this._currentState = value;
        }
        public function get projectedPrice():Number{
            return (this._projectedPrice);
        }
        public function set projectedPrice(value:Number):void{
            this._projectedPrice = value;
        }
        public function get openPrice1():Number{
            return (this._openPrice1);
        }
        public function set openPrice1(value:Number):void{
            this._openPrice1 = value;
        }
        public function get openPrice2():Number{
            return (this._openPrice2);
        }
        public function set openPrice2(value:Number):void{
            this._openPrice2 = value;
        }
        public function get projectedVolume():Number{
            return (this._projectedVolume);
        }
        public function set projectedVolume(value:Number):void{
            this._projectedVolume = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {

    public class InfoSummaryOptions extends InfoSummaryDerivatives {

        protected var _impliedVolatility:Number;
        protected var _inout:Number;
        protected var _delta:Number;
        protected var _theta:Number;
        protected var _effectiveGearing:Number;
        protected var _intrinsicValue:Number;
        protected var _breakEvenPrice:Number;
        protected var _allInPremium:Number;
        protected var _gearingRatio:Number;

        public function InfoSummaryOptions(){
            super();
            this._impliedVolatility = NaN;
            this._inout = NaN;
            this._delta = NaN;
            this._theta = NaN;
            this._effectiveGearing = NaN;
            this._intrinsicValue = NaN;
            this._breakEvenPrice = NaN;
            this._allInPremium = NaN;
            this._gearingRatio = NaN;
        }
        public function get impliedVolatility():Number{
            return (this._impliedVolatility);
        }
        public function set impliedVolatility(value:Number):void{
            this._impliedVolatility = value;
        }
        public function get inout():Number{
            return (this._inout);
        }
        public function set inout(value:Number):void{
            this._inout = value;
        }
        public function get delta():Number{
            return (this._delta);
        }
        public function set delta(value:Number):void{
            this._delta = value;
        }
        public function get theta():Number{
            return (this._theta);
        }
        public function set theta(value:Number):void{
            this._theta = value;
        }
        public function get effectiveGearing():Number{
            return (this._effectiveGearing);
        }
        public function set effectiveGearing(value:Number):void{
            this._effectiveGearing = value;
        }
        public function get intrinsicValue():Number{
            return (this._intrinsicValue);
        }
        public function set intrinsicValue(value:Number):void{
            this._intrinsicValue = value;
        }
        public function get breakEvenPrice():Number{
            return (this._breakEvenPrice);
        }
        public function set breakEvenPrice(value:Number):void{
            this._breakEvenPrice = value;
        }
        public function get allInPremium():Number{
            return (this._allInPremium);
        }
        public function set allInPremium(value:Number):void{
            this._allInPremium = value;
        }
        public function get gearingRatio():Number{
            return (this._gearingRatio);
        }
        public function set gearingRatio(value:Number):void{
            this._gearingRatio = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {
    import com.settrade.streaming5.enumuration.*;

    public class InfoBidOfferInstrument extends InfoBidOffer {

        protected var _bidFlag:PriceType;
        protected var _askFlag:PriceType;
        protected var _bidPrice1:Number;
        protected var _bidPrice2:Number;
        protected var _bidPrice3:Number;
        protected var _bidPrice4:Number;
        protected var _bidPrice5:Number;
        protected var _askPrice1:Number;
        protected var _askPrice2:Number;
        protected var _askPrice3:Number;
        protected var _askPrice4:Number;
        protected var _askPrice5:Number;
        protected var _bidVolume1:Number;
        protected var _bidVolume2:Number;
        protected var _bidVolume3:Number;
        protected var _bidVolume4:Number;
        protected var _bidVolume5:Number;
        protected var _askVolume1:Number;
        protected var _askVolume2:Number;
        protected var _askVolume3:Number;
        protected var _askVolume4:Number;
        protected var _askVolume5:Number;

        public function InfoBidOfferInstrument(){
            super();
            this._bidFlag = PriceType.NO_TYPE;
            this._askFlag = PriceType.NO_TYPE;
            this._bidPrice1 = NaN;
            this._bidPrice2 = NaN;
            this._bidPrice3 = NaN;
            this._bidPrice4 = NaN;
            this._bidPrice5 = NaN;
            this._askPrice1 = NaN;
            this._askPrice2 = NaN;
            this._askPrice3 = NaN;
            this._askPrice4 = NaN;
            this._askPrice5 = NaN;
            this._bidVolume1 = NaN;
            this._bidVolume2 = NaN;
            this._bidVolume3 = NaN;
            this._bidVolume4 = NaN;
            this._bidVolume5 = NaN;
            this._askVolume1 = NaN;
            this._askVolume2 = NaN;
            this._askVolume3 = NaN;
            this._askVolume4 = NaN;
            this._askVolume5 = NaN;
        }
        public function get bidFlag():PriceType{
            return (this._bidFlag);
        }
        public function set bidFlag(value:PriceType):void{
            this._bidFlag = value;
        }
        public function get askFlag():PriceType{
            return (this._askFlag);
        }
        public function set askFlag(value:PriceType):void{
            this._askFlag = value;
        }
        public function get bidPrice1():Number{
            return (this._bidPrice1);
        }
        public function set bidPrice1(value:Number):void{
            this._bidPrice1 = value;
        }
        public function get bidPrice2():Number{
            return (this._bidPrice2);
        }
        public function set bidPrice2(value:Number):void{
            this._bidPrice2 = value;
        }
        public function get bidPrice3():Number{
            return (this._bidPrice3);
        }
        public function set bidPrice3(value:Number):void{
            this._bidPrice3 = value;
        }
        public function get bidPrice4():Number{
            return (this._bidPrice4);
        }
        public function set bidPrice4(value:Number):void{
            this._bidPrice4 = value;
        }
        public function get bidPrice5():Number{
            return (this._bidPrice5);
        }
        public function set bidPrice5(value:Number):void{
            this._bidPrice5 = value;
        }
        public function get askPrice1():Number{
            return (this._askPrice1);
        }
        public function set askPrice1(value:Number):void{
            this._askPrice1 = value;
        }
        public function get askPrice2():Number{
            return (this._askPrice2);
        }
        public function set askPrice2(value:Number):void{
            this._askPrice2 = value;
        }
        public function get askPrice3():Number{
            return (this._askPrice3);
        }
        public function set askPrice3(value:Number):void{
            this._askPrice3 = value;
        }
        public function get askPrice4():Number{
            return (this._askPrice4);
        }
        public function set askPrice4(value:Number):void{
            this._askPrice4 = value;
        }
        public function get askPrice5():Number{
            return (this._askPrice5);
        }
        public function set askPrice5(value:Number):void{
            this._askPrice5 = value;
        }
        public function get bidVolume1():Number{
            return (this._bidVolume1);
        }
        public function set bidVolume1(value:Number):void{
            this._bidVolume1 = value;
        }
        public function get bidVolume2():Number{
            return (this._bidVolume2);
        }
        public function set bidVolume2(value:Number):void{
            this._bidVolume2 = value;
        }
        public function get bidVolume4():Number{
            return (this._bidVolume4);
        }
        public function set bidVolume4(value:Number):void{
            this._bidVolume4 = value;
        }
        public function get bidVolume5():Number{
            return (this._bidVolume5);
        }
        public function set bidVolume5(value:Number):void{
            this._bidVolume5 = value;
        }
        public function get bidVolume3():Number{
            return (this._bidVolume3);
        }
        public function set bidVolume3(value:Number):void{
            this._bidVolume3 = value;
        }
        public function get askVolume1():Number{
            return (this._askVolume1);
        }
        public function set askVolume1(value:Number):void{
            this._askVolume1 = value;
        }
        public function get askVolume2():Number{
            return (this._askVolume2);
        }
        public function set askVolume2(value:Number):void{
            this._askVolume2 = value;
        }
        public function get askVolume3():Number{
            return (this._askVolume3);
        }
        public function set askVolume3(value:Number):void{
            this._askVolume3 = value;
        }
        public function get askVolume4():Number{
            return (this._askVolume4);
        }
        public function set askVolume4(value:Number):void{
            this._askVolume4 = value;
        }
        public function get askVolume5():Number{
            return (this._askVolume5);
        }
        public function set askVolume5(value:Number):void{
            this._askVolume5 = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {

    public class InfoInitialStat {

        public function InfoInitialStat(){
            super();
        }
    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {

    public class InfoProjected {

        public function InfoProjected(){
            super();
        }
    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {

    public class InfoInitialMarketInstrument extends InfoInitialMarket {

        protected var _ceiling:Number;
        protected var _floor:Number;

        public function InfoInitialMarketInstrument(){
            super();
            this._ceiling = NaN;
            this._floor = NaN;
        }
        public function get ceiling():Number{
            return (this._ceiling);
        }
        public function set ceiling(value:Number):void{
            this._ceiling = value;
        }
        public function get floor():Number{
            return (this._floor);
        }
        public function set floor(value:Number):void{
            this._floor = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {

    public class InfoInitialIntradayIndex extends InfoInitialIntraday {

        protected var _marketCap:Number;
        protected var _pe:Number;
        protected var _pbv:Number;
        protected var _yield:Number;

        public function InfoInitialIntradayIndex(){
            super();
            this._marketCap = NaN;
            this._pe = NaN;
            this._pbv = NaN;
            this._yield = NaN;
        }
        public function get marketCap():Number{
            return (this._marketCap);
        }
        public function set marketCap(value:Number):void{
            this._marketCap = value;
        }
        public function get pe():Number{
            return (this._pe);
        }
        public function set pe(value:Number):void{
            this._pe = value;
        }
        public function get pbv():Number{
            return (this._pbv);
        }
        public function set pbv(value:Number):void{
            this._pbv = value;
        }
        public function get yield():Number{
            return (this._yield);
        }
        public function set yield(value:Number):void{
            this._yield = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {

    public class InfoSummary {

        protected var _lastDone:Number;
        protected var _change:Number;
        protected var _percentChange:Number;
        protected var _totalVolume:Number;

        public function InfoSummary(){
            super();
            this._lastDone = NaN;
            this._change = NaN;
            this._percentChange = NaN;
            this._totalVolume = NaN;
        }
        public function get lastDone():Number{
            return (this._lastDone);
        }
        public function set lastDone(value:Number):void{
            this._lastDone = value;
        }
        public function get change():Number{
            return (this._change);
        }
        public function set change(value:Number):void{
            this._change = value;
        }
        public function get percentChange():Number{
            return (this._percentChange);
        }
        public function set percentChange(value:Number):void{
            this._percentChange = value;
        }
        public function get totalVolume():Number{
            return (this._totalVolume);
        }
        public function set totalVolume(value:Number):void{
            this._totalVolume = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {
    import com.settrade.streaming5.enumuration.*;

    public class InfoInitialIntradayDerivatives extends InfoInitialIntradayInstrument {

        protected var _remainingDays:int;
        protected var _lastTradingDate:String;
        protected var _underlying:String;
        protected var _marketType:MarketType;
        protected var _initialMargin:Number;
        protected var _lifeHigh:Number;
        protected var _lifeLow:Number;
        protected var _lifeHighDate:String;
        protected var _lifeLowDate:String;

        public function InfoInitialIntradayDerivatives(){
            super();
            this._remainingDays = int.MIN_VALUE;
            this._lastTradingDate = "";
            this._underlying = "";
            this._marketType = MarketType.NO_TYPE;
            this._initialMargin = NaN;
            this._lifeHigh = NaN;
            this._lifeLow = NaN;
            this._lifeHighDate = "";
            this._lifeLowDate = "";
        }
        public function get remainingDays():int{
            return (this._remainingDays);
        }
        public function set remainingDays(value:int):void{
            this._remainingDays = value;
        }
        public function get lastTradingDate():String{
            return (this._lastTradingDate);
        }
        public function set lastTradingDate(value:String):void{
            this._lastTradingDate = value;
        }
        public function get underlying():String{
            return (this._underlying);
        }
        public function set underlying(value:String):void{
            this._underlying = value;
        }
        public function get marketType():MarketType{
            return (this._marketType);
        }
        public function set marketType(value:MarketType):void{
            this._marketType = value;
        }
        public function get initialMargin():Number{
            return (this._initialMargin);
        }
        public function set initialMargin(value:Number):void{
            this._initialMargin = value;
        }
        public function get lifeHigh():Number{
            return (this._lifeHigh);
        }
        public function set lifeHigh(value:Number):void{
            this._lifeHigh = value;
        }
        public function get lifeLow():Number{
            return (this._lifeLow);
        }
        public function set lifeLow(value:Number):void{
            this._lifeLow = value;
        }
        public function get lifeHighDate():String{
            return (this._lifeHighDate);
        }
        public function set lifeHighDate(value:String):void{
            this._lifeHighDate = value;
        }
        public function get lifeLowDate():String{
            return (this._lifeLowDate);
        }
        public function set lifeLowDate(value:String):void{
            this._lifeLowDate = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {

    public class InfoStatisticEPS {

        protected var _dateString:String;
        protected var _eps:Number;

        public function InfoStatisticEPS(dateString:String, eps:Number){
            super();
            this._dateString = dateString;
            this._eps = eps;
        }
        public function get dateString():String{
            return (this._dateString);
        }
        public function get eps():Number{
            return (this._eps);
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.feed.*;

    public class InfoStatisticChartFeedMessage extends FeedMessage {

        protected var _instrumentId:String;
        protected var _chartType:InstrumentInfoStatisticChartType;
        protected var _chartDataArray:Array;

        public function InfoStatisticChartFeedMessage(source:Source){
            super(MessageType.INFO_STATISTIC_CHART_FEED, System.REALTIME, source);
            this._instrumentId = "";
            this._chartType = InstrumentInfoStatisticChartType.NO_TYPE;
            this._chartDataArray = new Array();
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function set instrumentId(value:String):void{
            this._instrumentId = value;
        }
        public function get chartType():InstrumentInfoStatisticChartType{
            return (this._chartType);
        }
        public function set chartType(value:InstrumentInfoStatisticChartType):void{
            this._chartType = value;
        }
        public function get chartDataArray():Array{
            return (this._chartDataArray);
        }
        public function set chartDataArray(value:Array):void{
            this._chartDataArray = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {

    public class InfoBidOffer {

        public function InfoBidOffer(){
            super();
        }
    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {

    public class InfoSummaryEquity extends InfoSummaryInstrument {

        protected var _averageBuy:Number;
        protected var _averageSell:Number;
        protected var _totalValue:Number;

        public function InfoSummaryEquity(){
            super();
            this._averageBuy = NaN;
            this._averageSell = NaN;
            this._totalValue = NaN;
        }
        public function get averageBuy():Number{
            return (this._averageBuy);
        }
        public function set averageBuy(value:Number):void{
            this._averageBuy = value;
        }
        public function get averageSell():Number{
            return (this._averageSell);
        }
        public function set averageSell(value:Number):void{
            this._averageSell = value;
        }
        public function get totalValue():Number{
            return (this._totalValue);
        }
        public function set totalValue(value:Number):void{
            this._totalValue = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {

    public class InfoInitialIntradayEquity extends InfoInitialIntradayInstrument {

        protected var _pe:Number;
        protected var _pbv:Number;
        protected var _yield:Number;
        protected var _eps:Number;
        protected var _w52High:Number;
        protected var _w52Low:Number;
        protected var _w52HighDate:String;
        protected var _w52LowDate:String;
        protected var _percentChg1W:Number;
        protected var _percentCgh1M:Number;
        protected var _percentChg3M:Number;
        protected var _currency:String;

        public function InfoInitialIntradayEquity(){
            super();
            this._pe = NaN;
            this._pbv = NaN;
            this._yield = NaN;
            this._eps = NaN;
            this._w52High = NaN;
            this._w52Low = NaN;
            this._w52HighDate = "";
            this._w52LowDate = "";
            this._percentChg1W = NaN;
            this._percentCgh1M = NaN;
            this._percentChg3M = NaN;
            this._currency = "";
        }
        public function get pe():Number{
            return (this._pe);
        }
        public function set pe(value:Number):void{
            this._pe = value;
        }
        public function get pbv():Number{
            return (this._pbv);
        }
        public function set pbv(value:Number):void{
            this._pbv = value;
        }
        public function get yield():Number{
            return (this._yield);
        }
        public function set yield(value:Number):void{
            this._yield = value;
        }
        public function get eps():Number{
            return (this._eps);
        }
        public function set eps(value:Number):void{
            this._eps = value;
        }
        public function get w52High():Number{
            return (this._w52High);
        }
        public function set w52High(value:Number):void{
            this._w52High = value;
        }
        public function get w52Low():Number{
            return (this._w52Low);
        }
        public function set w52Low(value:Number):void{
            this._w52Low = value;
        }
        public function get currency():String{
            return (this._currency);
        }
        public function set currency(value:String):void{
            this._currency = value;
        }
        public function get w52HighDate():String{
            return (this._w52HighDate);
        }
        public function set w52HighDate(value:String):void{
            this._w52HighDate = value;
        }
        public function get w52LowDate():String{
            return (this._w52LowDate);
        }
        public function set w52LowDate(value:String):void{
            this._w52LowDate = value;
        }
        public function get percentChg1W():Number{
            return (this._percentChg1W);
        }
        public function set percentChg1W(value:Number):void{
            this._percentChg1W = value;
        }
        public function get percentCgh1M():Number{
            return (this._percentCgh1M);
        }
        public function set percentCgh1M(value:Number):void{
            this._percentCgh1M = value;
        }
        public function get percentChg3M():Number{
            return (this._percentChg3M);
        }
        public function set percentChg3M(value:Number):void{
            this._percentChg3M = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {

    public class InfoInitialIntradayInstrument extends InfoInitialIntraday {

        protected var _instrumentLongName:String;

        public function InfoInitialIntradayInstrument(){
            super();
            this._instrumentLongName = "";
        }
        public function get instrumentLongName():String{
            return (this._instrumentLongName);
        }
        public function set instrumentLongName(value:String):void{
            this._instrumentLongName = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.feed.*;

    public class InfoStatisticFeedMessage extends FeedMessage {

        protected var _instrumentId:String;
        protected var _instrumentType:InstrumentType;
        protected var _instrumentSubType:InstrumentSubType;
        protected var _informationAsOf:String;
        protected var _pe:Number;
        protected var _pbv:Number;
        protected var _yield:Number;
        protected var _grossProfitMargin:Number;
        protected var _netProfitMargin:Number;
        protected var _roa:Number;
        protected var _roe:Number;
        protected var _deRatio:Number;
        protected var _marketCap:Number;
        protected var _shares:Number;
        protected var _cash:Number;
        protected var _totalAsset:Number;
        protected var _currentLiabilities:Number;
        protected var _totalLiabilities:Number;
        protected var _paidupCap:Number;
        protected var _equities:Number;
        protected var _sale:Number;
        protected var _revenue:Number;
        protected var _costOfSales:Number;
        protected var _ebit:Number;
        protected var _intExpenses:Number;
        protected var _netProfit:Number;
        protected var _epsArray:Array;

        public function InfoStatisticFeedMessage(source:Source){
            super(MessageType.INFO_STATISTIC_FEED, System.REALTIME, source);
            this._instrumentId = "";
            this._instrumentType = InstrumentType.NO_TYPE;
            this._instrumentSubType = InstrumentSubType.NO_TYPE;
            this._informationAsOf = "";
            this._pe = NaN;
            this._pbv = NaN;
            this._yield = NaN;
            this._grossProfitMargin = NaN;
            this._netProfitMargin = NaN;
            this._roa = NaN;
            this._roe = NaN;
            this._deRatio = NaN;
            this._marketCap = NaN;
            this._shares = NaN;
            this._cash = NaN;
            this._totalAsset = NaN;
            this._currentLiabilities = NaN;
            this._totalLiabilities = NaN;
            this._paidupCap = NaN;
            this._equities = NaN;
            this._sale = NaN;
            this._revenue = NaN;
            this._costOfSales = NaN;
            this._ebit = NaN;
            this._intExpenses = NaN;
            this._netProfit = NaN;
            this._epsArray = new Array();
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function set instrumentId(value:String):void{
            this._instrumentId = value;
        }
        public function get instrumentType():InstrumentType{
            return (this._instrumentType);
        }
        public function set instrumentType(value:InstrumentType):void{
            this._instrumentType = value;
        }
        public function get instrumentSubType():InstrumentSubType{
            return (this._instrumentSubType);
        }
        public function set instrumentSubType(value:InstrumentSubType):void{
            this._instrumentSubType = value;
        }
        public function get informationAsOf():String{
            return (this._informationAsOf);
        }
        public function set informationAsOf(value:String):void{
            this._informationAsOf = value;
        }
        public function get pe():Number{
            return (this._pe);
        }
        public function set pe(value:Number):void{
            this._pe = value;
        }
        public function get pbv():Number{
            return (this._pbv);
        }
        public function set pbv(value:Number):void{
            this._pbv = value;
        }
        public function get yield():Number{
            return (this._yield);
        }
        public function set yield(value:Number):void{
            this._yield = value;
        }
        public function get grossProfitMargin():Number{
            return (this._grossProfitMargin);
        }
        public function set grossProfitMargin(value:Number):void{
            this._grossProfitMargin = value;
        }
        public function get netProfitMargin():Number{
            return (this._netProfitMargin);
        }
        public function set netProfitMargin(value:Number):void{
            this._netProfitMargin = value;
        }
        public function get roa():Number{
            return (this._roa);
        }
        public function set roa(value:Number):void{
            this._roa = value;
        }
        public function get roe():Number{
            return (this._roe);
        }
        public function set roe(value:Number):void{
            this._roe = value;
        }
        public function get deRatio():Number{
            return (this._deRatio);
        }
        public function set deRatio(value:Number):void{
            this._deRatio = value;
        }
        public function get marketCap():Number{
            return (this._marketCap);
        }
        public function set marketCap(value:Number):void{
            this._marketCap = value;
        }
        public function get shares():Number{
            return (this._shares);
        }
        public function set shares(value:Number):void{
            this._shares = value;
        }
        public function get cash():Number{
            return (this._cash);
        }
        public function set cash(value:Number):void{
            this._cash = value;
        }
        public function get totalAsset():Number{
            return (this._totalAsset);
        }
        public function set totalAsset(value:Number):void{
            this._totalAsset = value;
        }
        public function get currentLiabilities():Number{
            return (this._currentLiabilities);
        }
        public function set currentLiabilities(value:Number):void{
            this._currentLiabilities = value;
        }
        public function get totalLiabilities():Number{
            return (this._totalLiabilities);
        }
        public function set totalLiabilities(value:Number):void{
            this._totalLiabilities = value;
        }
        public function get paidupCap():Number{
            return (this._paidupCap);
        }
        public function set paidupCap(value:Number):void{
            this._paidupCap = value;
        }
        public function get equities():Number{
            return (this._equities);
        }
        public function set equities(value:Number):void{
            this._equities = value;
        }
        public function get sale():Number{
            return (this._sale);
        }
        public function set sale(value:Number):void{
            this._sale = value;
        }
        public function get revenue():Number{
            return (this._revenue);
        }
        public function set revenue(value:Number):void{
            this._revenue = value;
        }
        public function get costOfSales():Number{
            return (this._costOfSales);
        }
        public function set costOfSales(value:Number):void{
            this._costOfSales = value;
        }
        public function get ebit():Number{
            return (this._ebit);
        }
        public function set ebit(value:Number):void{
            this._ebit = value;
        }
        public function get intExpenses():Number{
            return (this._intExpenses);
        }
        public function set intExpenses(value:Number):void{
            this._intExpenses = value;
        }
        public function get netProfit():Number{
            return (this._netProfit);
        }
        public function set netProfit(value:Number):void{
            this._netProfit = value;
        }
        public function get epsArray():Array{
            return (this._epsArray);
        }
        public function set epsArray(value:Array):void{
            this._epsArray = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {

    public class InfoProjectedDerivatives extends InfoProjectedInstrument {

        protected var _projected2:Number;
        protected var _projected0:Number;
        protected var _openPrice0:Number;

        public function InfoProjectedDerivatives(){
            super();
            this._projected2 = NaN;
            this._projected0 = NaN;
            this._openPrice0 = NaN;
        }
        public function get projected2():Number{
            return (this._projected2);
        }
        public function set projected2(value:Number):void{
            this._projected2 = value;
        }
        public function get projected0():Number{
            return (this._projected0);
        }
        public function set projected0(value:Number):void{
            this._projected0 = value;
        }
        public function get openPrice0():Number{
            return (this._openPrice0);
        }
        public function set openPrice0(value:Number):void{
            this._openPrice0 = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {
    import com.settrade.streaming5.enumuration.*;

    public class InfoInitialIntradayDerivativesWarrant extends InfoInitialIntradayAllWarrant {

        var _derivatviesWarrantType:DerivativesWarrantType;
        var _remainingDays:int;
        var _lastTradingDate:String;
        var _multiplier:Number;

        public function InfoInitialIntradayDerivativesWarrant(){
            super();
            this._derivatviesWarrantType = DerivativesWarrantType.NO_TYPE;
            this._remainingDays = int.MIN_VALUE;
            this._lastTradingDate = "";
            this._multiplier = NaN;
        }
        public function get derivatviesWarrantType():DerivativesWarrantType{
            return (this._derivatviesWarrantType);
        }
        public function set derivatviesWarrantType(value:DerivativesWarrantType):void{
            this._derivatviesWarrantType = value;
        }
        public function get remainingDays():int{
            return (this._remainingDays);
        }
        public function set remainingDays(value:int):void{
            this._remainingDays = value;
        }
        public function get lastTradingDate():String{
            return (this._lastTradingDate);
        }
        public function set lastTradingDate(value:String):void{
            this._lastTradingDate = value;
        }
        public function get multiplier():Number{
            return (this._multiplier);
        }
        public function set multiplier(value:Number):void{
            this._multiplier = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {
    import com.settrade.streaming5.enumuration.*;

    public class InfoProjectedInstrument extends InfoProjected {

        protected var _projectedPrice:Number;
        protected var _openPrice1:Number;
        protected var _openPrice2:Number;
        protected var _currentState:InstrumentInfoCurrentState;

        public function InfoProjectedInstrument(){
            super();
            this._projectedPrice = NaN;
            this._openPrice1 = NaN;
            this._openPrice2 = NaN;
            this._currentState = InstrumentInfoCurrentState.NO_STATE;
        }
        public function get projectedPrice():Number{
            return (this._projectedPrice);
        }
        public function set projectedPrice(value:Number):void{
            this._projectedPrice = value;
        }
        public function get openPrice1():Number{
            return (this._openPrice1);
        }
        public function set openPrice1(value:Number):void{
            this._openPrice1 = value;
        }
        public function get openPrice2():Number{
            return (this._openPrice2);
        }
        public function set openPrice2(value:Number):void{
            this._openPrice2 = value;
        }
        public function get currentState():InstrumentInfoCurrentState{
            return (this._currentState);
        }
        public function set currentState(value:InstrumentInfoCurrentState):void{
            this._currentState = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {
    import com.settrade.streaming5.enumuration.*;

    public class InfoInitialIntradayOptions extends InfoInitialIntradayDerivatives {

        protected var _optionsType:OptionsType;
        protected var _strikePrice:int;

        public function InfoInitialIntradayOptions(){
            super();
            this._optionsType = OptionsType.NO_TYPE;
            this._strikePrice = int.MIN_VALUE;
        }
        public function get optionsType():OptionsType{
            return (this._optionsType);
        }
        public function set optionsType(value:OptionsType):void{
            this._optionsType = value;
        }
        public function get strikePrice():int{
            return (this._strikePrice);
        }
        public function set strikePrice(value:int):void{
            this._strikePrice = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {

    public class InfoInitialIntradayETF extends InfoInitialIntradayEquity {

        protected var _aumSize:Number;

        public function InfoInitialIntradayETF(){
            super();
            this._aumSize = NaN;
        }
        public function get aumSize():Number{
            return (this._aumSize);
        }
        public function set aumSize(value:Number):void{
            this._aumSize = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {

    public class InfoInitialStatEquity extends InfoInitialStat {

        protected var _dividendYield:int;

        public function InfoInitialStatEquity(){
            super();
            this._dividendYield = int.MIN_VALUE;
        }
        public function get dividendYield():int{
            return (this._dividendYield);
        }
        public function set dividendYield(value:int):void{
            this._dividendYield = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {

    public class InfoInitialMarketDerivatives extends InfoInitialMarketInstrument {

        protected var _spread:Number;
        protected var _previousSettle:Number;

        public function InfoInitialMarketDerivatives(){
            super();
            this._spread = NaN;
            this._previousSettle = NaN;
        }
        public function get spread():Number{
            return (this._spread);
        }
        public function set spread(value:Number):void{
            this._spread = value;
        }
        public function get previousSettle():Number{
            return (this._previousSettle);
        }
        public function set previousSettle(value:Number):void{
            this._previousSettle = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {

    public class InfoSummaryIndex extends InfoSummary {

        protected var _totalValue:Number;

        public function InfoSummaryIndex(){
            super();
            this._totalValue = NaN;
        }
        public function get totalValue():Number{
            return (this._totalValue);
        }
        public function set totalValue(value:Number):void{
            this._totalValue = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {

    public class InfoSummaryAllWarrant extends InfoSummaryEquity {

        protected var _underlyingPrice:Number;
        protected var _theoricalPrice:Number;
        protected var _impliedVolatility:Number;
        protected var _delta:Number;
        protected var _theta:Number;
        protected var _effectiveGearing:Number;
        protected var _intrinsicValue:Number;
        protected var _breakEvenPrice:Number;
        protected var _warrantStatus:String;
        protected var _allInPremium:Number;
        protected var _gearingRatio:Number;

        public function InfoSummaryAllWarrant(){
            super();
            this._underlyingPrice = NaN;
            this._theoricalPrice = NaN;
            this._impliedVolatility = NaN;
            this._delta = NaN;
            this._theta = NaN;
            this._effectiveGearing = NaN;
            this._intrinsicValue = NaN;
            this._breakEvenPrice = NaN;
            this._warrantStatus = "";
            this._allInPremium = NaN;
            this._gearingRatio = NaN;
        }
        public function get underlyingPrice():Number{
            return (this._underlyingPrice);
        }
        public function set underlyingPrice(value:Number):void{
            this._underlyingPrice = value;
        }
        public function get theoricalPrice():Number{
            return (this._theoricalPrice);
        }
        public function set theoricalPrice(value:Number):void{
            this._theoricalPrice = value;
        }
        public function get impliedVolatility():Number{
            return (this._impliedVolatility);
        }
        public function set impliedVolatility(value:Number):void{
            this._impliedVolatility = value;
        }
        public function get delta():Number{
            return (this._delta);
        }
        public function set delta(value:Number):void{
            this._delta = value;
        }
        public function get theta():Number{
            return (this._theta);
        }
        public function set theta(value:Number):void{
            this._theta = value;
        }
        public function get effectiveGearing():Number{
            return (this._effectiveGearing);
        }
        public function set effectiveGearing(value:Number):void{
            this._effectiveGearing = value;
        }
        public function get intrinsicValue():Number{
            return (this._intrinsicValue);
        }
        public function set intrinsicValue(value:Number):void{
            this._intrinsicValue = value;
        }
        public function get breakEvenPrice():Number{
            return (this._breakEvenPrice);
        }
        public function set breakEvenPrice(value:Number):void{
            this._breakEvenPrice = value;
        }
        public function get warrantStatus():String{
            return (this._warrantStatus);
        }
        public function set warrantStatus(value:String):void{
            this._warrantStatus = value;
        }
        public function get allInPremium():Number{
            return (this._allInPremium);
        }
        public function set allInPremium(value:Number):void{
            this._allInPremium = value;
        }
        public function get gearingRatio():Number{
            return (this._gearingRatio);
        }
        public function set gearingRatio(value:Number):void{
            this._gearingRatio = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.feed.*;

    public class InfoFeedMessage extends FeedMessage {

        protected var _instrumentId:String;
        protected var _instrumentType:InstrumentType;
        protected var _priceDigit:int;
        protected var _settleDigit:int;
        protected var _hasInitMarket:Boolean;
        protected var _hasInitIntraday:Boolean;
        protected var _hasInitStat:Boolean;
        protected var _hasSummary:Boolean;
        protected var _hasBidOffer:Boolean;
        protected var _hasProjected:Boolean;
        protected var _initialMarket:InfoInitialMarket;
        protected var _initialIntraday:InfoInitialIntraday;
        protected var _initialStat:InfoInitialStat;
        protected var _summary:InfoSummary;
        protected var _bidOffer:InfoBidOffer;
        protected var _projected:InfoProjected;

        public function InfoFeedMessage(source:Source){
            super(MessageType.INFO_FEED, System.REALTIME, source);
            this._instrumentId = "";
            this._instrumentType = InstrumentType.NO_TYPE;
            this._priceDigit = 2;
            this._settleDigit = 2;
            this._hasInitMarket = false;
            this._hasInitIntraday = false;
            this._hasInitStat = false;
            this._hasSummary = false;
            this._hasBidOffer = false;
            this._hasProjected = false;
            this._initialMarket = null;
            this._initialIntraday = null;
            this._initialStat = null;
            this._summary = null;
            this._bidOffer = null;
            this._projected = null;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function set instrumentId(value:String):void{
            this._instrumentId = value;
        }
        public function get instrumentType():InstrumentType{
            return (this._instrumentType);
        }
        public function set instrumentType(value:InstrumentType):void{
            this._instrumentType = value;
        }
        public function get priceDigit():int{
            return (this._priceDigit);
        }
        public function set priceDigit(value:int):void{
            this._priceDigit = value;
        }
        public function get settleDigit():int{
            return (this._settleDigit);
        }
        public function set settleDigit(value:int):void{
            this._settleDigit = value;
        }
        public function get hasInitMarket():Boolean{
            return (this._hasInitMarket);
        }
        public function set hasInitMarket(value:Boolean):void{
            this._hasInitMarket = value;
        }
        public function get hasInitIntraday():Boolean{
            return (this._hasInitIntraday);
        }
        public function set hasInitIntraday(value:Boolean):void{
            this._hasInitIntraday = value;
        }
        public function get hasInitStat():Boolean{
            return (this._hasInitStat);
        }
        public function set hasInitStat(value:Boolean):void{
            this._hasInitStat = value;
        }
        public function get hasSummary():Boolean{
            return (this._hasSummary);
        }
        public function set hasSummary(value:Boolean):void{
            this._hasSummary = value;
        }
        public function get hasBidOffer():Boolean{
            return (this._hasBidOffer);
        }
        public function set hasBidOffer(value:Boolean):void{
            this._hasBidOffer = value;
        }
        public function get hasProjected():Boolean{
            return (this._hasProjected);
        }
        public function set hasProjected(value:Boolean):void{
            this._hasProjected = value;
        }
        public function get initialMarket():InfoInitialMarket{
            return (this._initialMarket);
        }
        public function set initialMarket(value:InfoInitialMarket):void{
            this._initialMarket = value;
        }
        public function get initialIntraday():InfoInitialIntraday{
            return (this._initialIntraday);
        }
        public function set initialIntraday(value:InfoInitialIntraday):void{
            this._initialIntraday = value;
        }
        public function get initialStat():InfoInitialStat{
            return (this._initialStat);
        }
        public function set initialStat(value:InfoInitialStat):void{
            this._initialStat = value;
        }
        public function get summary():InfoSummary{
            return (this._summary);
        }
        public function set summary(value:InfoSummary):void{
            this._summary = value;
        }
        public function get bidOffer():InfoBidOffer{
            return (this._bidOffer);
        }
        public function set bidOffer(value:InfoBidOffer):void{
            this._bidOffer = value;
        }
        public function get projected():InfoProjected{
            return (this._projected);
        }
        public function set projected(value:InfoProjected):void{
            this._projected = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {

    public class InfoProjectedEquity extends InfoProjectedInstrument {

        protected var _projectedVolume:Number;

        public function InfoProjectedEquity(){
            super();
            this._projectedVolume = NaN;
        }
        public function get projectedVolume():Number{
            return (this._projectedVolume);
        }
        public function set projectedVolume(value:Number):void{
            this._projectedVolume = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {

    public class InfoStatisticChartData {

        protected var _dateString:String;
        protected var _revenue:Number;
        protected var _netIncome:Number;
        protected var _profitMargin:Number;

        public function InfoStatisticChartData(dateString:String, revenue:Number, netIncome:Number, profitMargin:Number){
            super();
            this._dateString = dateString;
            this._revenue = revenue;
            this._netIncome = netIncome;
            this._profitMargin = profitMargin;
        }
        public function get dateString():String{
            return (this._dateString);
        }
        public function get revenue():Number{
            return (this._revenue);
        }
        public function get netIncome():Number{
            return (this._netIncome);
        }
        public function get profitMargin():Number{
            return (this._profitMargin);
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {

    public class InfoInitialIntraday {

        public function InfoInitialIntraday(){
            super();
        }
    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {

    public class InfoInitialMarket {

        protected var _previousClose:Number;
        protected var _high:Number;
        protected var _low:Number;

        public function InfoInitialMarket(){
            super();
            this._previousClose = NaN;
            this._high = NaN;
            this._low = NaN;
        }
        public function get previousClose():Number{
            return (this._previousClose);
        }
        public function set previousClose(value:Number):void{
            this._previousClose = value;
        }
        public function get high():Number{
            return (this._high);
        }
        public function set high(value:Number):void{
            this._high = value;
        }
        public function get low():Number{
            return (this._low);
        }
        public function set low(value:Number):void{
            this._low = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {
    import com.settrade.streaming5.enumuration.*;

    public class InfoInitialIntradayAllWarrant extends InfoInitialIntradayEquity {

        protected var _exercisePrice:Number;
        protected var _exerciseRatio:String;
        protected var _exerciseDate:String;
        protected var _optionsType:OptionsType;

        public function InfoInitialIntradayAllWarrant(){
            super();
            this._exercisePrice = NaN;
            this._exerciseRatio = "";
            this._exerciseDate = "";
            this._optionsType = OptionsType.NO_TYPE;
        }
        public function get exercisePrice():Number{
            return (this._exercisePrice);
        }
        public function set exercisePrice(value:Number):void{
            this._exercisePrice = value;
        }
        public function get exerciseRatio():String{
            return (this._exerciseRatio);
        }
        public function get numberExerciseRatio():Number{
            var ratioToken:Array;
            if (this.exerciseRatio != ""){
                ratioToken = this.exerciseRatio.split(":");
                if (ratioToken.length >= 2){
                    return ((Number(ratioToken[1]) / Number(ratioToken[0])));
                };
            };
            return (NaN);
        }
        public function set exerciseRatio(value:String):void{
            this._exerciseRatio = value;
        }
        public function get exerciseDate():String{
            return (this._exerciseDate);
        }
        public function set exerciseDate(value:String):void{
            this._exerciseDate = value;
        }
        public function get optionsType():OptionsType{
            return (this._optionsType);
        }
        public function set optionsType(value:OptionsType):void{
            this._optionsType = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {

    public class InfoSummaryDerivatives extends InfoSummaryInstrument {

        protected var _openInterest:int;
        protected var _settlePrice:Number;
        protected var _underlyingPrice:Number;
        protected var _basis:Number;
        protected var _theoricalPrice:Number;

        public function InfoSummaryDerivatives(){
            super();
            this._openInterest = int.MIN_VALUE;
            this._settlePrice = NaN;
            this._underlyingPrice = NaN;
            this._basis = NaN;
            this._theoricalPrice = NaN;
        }
        public function get openInterest():int{
            return (this._openInterest);
        }
        public function set openInterest(value:int):void{
            this._openInterest = value;
        }
        public function get settlePrice():Number{
            return (this._settlePrice);
        }
        public function set settlePrice(value:Number):void{
            this._settlePrice = value;
        }
        public function get underlyingPrice():Number{
            return (this._underlyingPrice);
        }
        public function set underlyingPrice(value:Number):void{
            this._underlyingPrice = value;
        }
        public function get basis():Number{
            return (this._basis);
        }
        public function set basis(value:Number):void{
            this._basis = value;
        }
        public function get theoricalPrice():Number{
            return (this._theoricalPrice);
        }
        public function set theoricalPrice(value:Number):void{
            this._theoricalPrice = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed.info {

    public class InfoSummaryInstrument extends InfoSummary {

        protected var _average:Number;
        protected var _status:String;
        protected var _percentBuy:int;
        protected var _percentSell:int;

        public function InfoSummaryInstrument(){
            super();
            this._average = NaN;
            this._status = "";
            this._percentBuy = int.MIN_VALUE;
            this._percentSell = int.MIN_VALUE;
        }
        public function get average():Number{
            return (this._average);
        }
        public function set average(value:Number):void{
            this._average = value;
        }
        public function get status():String{
            return (this._status);
        }
        public function set status(value:String):void{
            this._status = value;
        }
        public function get percentBuy():int{
            return (this._percentBuy);
        }
        public function set percentBuy(value:int):void{
            this._percentBuy = value;
        }
        public function get percentSell():int{
            return (this._percentSell);
        }
        public function set percentSell(value:int):void{
            this._percentSell = value;
        }

    }
}//package com.settrade.streaming5.message.feed.info 
﻿package com.settrade.streaming5.message.feed {
    import com.settrade.streaming5.enumuration.*;

    public class MarketStatusFeedMessage extends FeedMessage {

        protected var _hasEquityInfo:Boolean;
        protected var _setIndex:Number;
        protected var _setChange:Number;
        protected var _setHigh:Number;
        protected var _setHighChange:Number;
        protected var _setLow:Number;
        protected var _setLowChange:Number;
        protected var _setTotalValue:Number;
        protected var _setTotalVolume:Number;
        protected var _setGainers:int;
        protected var _setLosers:int;
        protected var _setUnchanged:int;
        protected var _set50Index:Number;
        protected var _set50Change:Number;
        protected var _set50High:Number;
        protected var _set50HighChange:Number;
        protected var _set50Low:Number;
        protected var _set50LowChange:Number;
        protected var _set50TotalValue:Number;
        protected var _set100Index:Number;
        protected var _set100Change:Number;
        protected var _set100High:Number;
        protected var _set100HighChange:Number;
        protected var _set100Low:Number;
        protected var _set100LowChange:Number;
        protected var _set100TotalValue:Number;
        protected var _setHDIndex:Number;
        protected var _setHDChange:Number;
        protected var _setHDHigh:Number;
        protected var _setHDHighChange:Number;
        protected var _setHDLow:Number;
        protected var _setHDLowChange:Number;
        protected var _setHDTotalValue:Number;
        protected var _maiIndex:Number;
        protected var _maiChange:Number;
        protected var _maiHigh:Number;
        protected var _maiHighChange:Number;
        protected var _maiLow:Number;
        protected var _maiLowChange:Number;
        protected var _maiTotalValue:Number;
        protected var _ftseIndex:Number;
        protected var _ftseChange:Number;
        protected var _ftseHigh:Number;
        protected var _ftseHighChange:Number;
        protected var _ftseLow:Number;
        protected var _ftseLowChange:Number;
        protected var _ftseTotalValue:Number;
        protected var _hasDerivativesInfo:Boolean;
        protected var _tfexTotalVolume:int;
        protected var _tfexTotalDeal:int;
        protected var _tfexTotalOI:int;
        protected var _totalFuturesVolume:int;
        protected var _totalFuturesDeal:int;
        protected var _totalFuturesOI:int;
        protected var _totalOptionsVolume:int;
        protected var _totalOptionsDeal:int;
        protected var _totalOptionsOI:int;
        protected var _dateAsOf:Date;
        protected var _dateAsOfYear:int;
        protected var _dateAsOfMonth:int;
        protected var _dateAsOfDay:int;
        private var dateAsOfDayString:String;
        private var dateAsOfMonthString:String;
        private var dateAsOfYearString:String;
        protected var _setStatus:String;
        protected var _tfexStatus:String;
        protected var _tfexMetalStatus:String;
        protected var _tfexStockStatus:String;
        protected var _tfexInterestStatus:String;
        protected var _tfexEnergyStatus:String;
        protected var _tfexCurrencyStatus:String;

        public function MarketStatusFeedMessage(source:Source){
            super(MessageType.MARKET_SUMMARY_FEED, System.REALTIME, source);
            this._hasEquityInfo = false;
            this._setIndex = NaN;
            this._setChange = NaN;
            this._setHigh = NaN;
            this._setHighChange = NaN;
            this._setLow = NaN;
            this._setLowChange = NaN;
            this._setTotalValue = NaN;
            this._setTotalVolume = NaN;
            this._setGainers = int.MIN_VALUE;
            this._setLosers = int.MIN_VALUE;
            this._setUnchanged = int.MIN_VALUE;
            this._set50Index = NaN;
            this._set50Change = NaN;
            this._set50High = NaN;
            this._set50HighChange = NaN;
            this._set50Low = NaN;
            this._set50LowChange = NaN;
            this._set50TotalValue = NaN;
            this._set100Index = NaN;
            this._set100Change = NaN;
            this._set100High = NaN;
            this._set100HighChange = NaN;
            this._set100Low = NaN;
            this._set100LowChange = NaN;
            this._set100TotalValue = NaN;
            this._setHDIndex = NaN;
            this._setHDChange = NaN;
            this._setHDHigh = NaN;
            this._setHDHighChange = NaN;
            this._setHDLow = NaN;
            this._setHDLowChange = NaN;
            this._setHDTotalValue = NaN;
            this._maiIndex = NaN;
            this._maiChange = NaN;
            this._maiHigh = NaN;
            this._maiHighChange = NaN;
            this._maiLow = NaN;
            this._maiLowChange = NaN;
            this._maiTotalValue = NaN;
            this._ftseIndex = NaN;
            this._ftseChange = NaN;
            this._ftseHigh = NaN;
            this._ftseHighChange = NaN;
            this._ftseLow = NaN;
            this._ftseLowChange = NaN;
            this._ftseTotalValue = NaN;
            this._hasDerivativesInfo = false;
            this._tfexTotalVolume = int.MIN_VALUE;
            this._tfexTotalDeal = int.MIN_VALUE;
            this._tfexTotalOI = int.MIN_VALUE;
            this._totalFuturesVolume = int.MIN_VALUE;
            this._totalFuturesDeal = int.MIN_VALUE;
            this._totalFuturesOI = int.MIN_VALUE;
            this._totalOptionsVolume = int.MIN_VALUE;
            this._totalOptionsDeal = int.MIN_VALUE;
            this._totalOptionsOI = int.MIN_VALUE;
            this._dateAsOf = new Date();
            this._dateAsOf.setTime(0);
            this._setStatus = "";
            this._tfexStatus = "";
            this._tfexMetalStatus = "";
            this._tfexStockStatus = "";
            this._tfexInterestStatus = "";
            this._tfexEnergyStatus = "";
            this._tfexCurrencyStatus = "";
            this.dateAsOfDayString = "";
            this.dateAsOfMonthString = "";
            this.dateAsOfYearString = "";
        }
        public function get setIndex():Number{
            return (this._setIndex);
        }
        public function get setChange():Number{
            return (this._setChange);
        }
        public function get setHigh():Number{
            return (this._setHigh);
        }
        public function get setHighChange():Number{
            return (this._setHighChange);
        }
        public function get setLow():Number{
            return (this._setLow);
        }
        public function get setLowChange():Number{
            return (this._setLowChange);
        }
        public function get setTotalValue():Number{
            return (this._setTotalValue);
        }
        public function get setTotalVolume():Number{
            return (this._setTotalVolume);
        }
        public function get setGainers():int{
            return (this._setGainers);
        }
        public function get setLosers():int{
            return (this._setLosers);
        }
        public function get setUnchanged():int{
            return (this._setUnchanged);
        }
        public function get set50Index():Number{
            return (this._set50Index);
        }
        public function get set50Change():Number{
            return (this._set50Change);
        }
        public function get set50High():Number{
            return (this._set50High);
        }
        public function get set50HighChange():Number{
            return (this._set50HighChange);
        }
        public function get set50Low():Number{
            return (this._set50Low);
        }
        public function get set50LowChange():Number{
            return (this._set50LowChange);
        }
        public function get set50TotalValue():Number{
            return (this._set50TotalValue);
        }
        public function get set100Index():Number{
            return (this._set100Index);
        }
        public function get set100Change():Number{
            return (this._set100Change);
        }
        public function get set100High():Number{
            return (this._set100High);
        }
        public function get set100HighChange():Number{
            return (this._set100HighChange);
        }
        public function get set100Low():Number{
            return (this._set100Low);
        }
        public function get set100LowChange():Number{
            return (this._set100LowChange);
        }
        public function get set100TotalValue():Number{
            return (this._set100TotalValue);
        }
        public function get setHDIndex():Number{
            return (this._setHDIndex);
        }
        public function get setHDChange():Number{
            return (this._setHDChange);
        }
        public function get setHDHigh():Number{
            return (this._setHDHigh);
        }
        public function get setHDHighChange():Number{
            return (this._setHDHighChange);
        }
        public function get setHDLow():Number{
            return (this._setHDLow);
        }
        public function get setHDLowChange():Number{
            return (this._setHDLowChange);
        }
        public function get setHDTotalValue():Number{
            return (this._setHDTotalValue);
        }
        public function get maiIndex():Number{
            return (this._maiIndex);
        }
        public function get maiChange():Number{
            return (this._maiChange);
        }
        public function get maiHigh():Number{
            return (this._maiHigh);
        }
        public function get maiHighChange():Number{
            return (this._maiHighChange);
        }
        public function get maiLow():Number{
            return (this._maiLow);
        }
        public function get maiLowChange():Number{
            return (this._maiLowChange);
        }
        public function get maiTotalValue():Number{
            return (this._maiTotalValue);
        }
        public function get ftseIndex():Number{
            return (this._ftseIndex);
        }
        public function get ftseChange():Number{
            return (this._ftseChange);
        }
        public function get ftseHigh():Number{
            return (this._ftseHigh);
        }
        public function get ftseHighChange():Number{
            return (this._ftseHighChange);
        }
        public function get ftseLow():Number{
            return (this._ftseLow);
        }
        public function get ftseLowChange():Number{
            return (this._ftseLowChange);
        }
        public function get tfexTotalVolume():int{
            return (this._tfexTotalVolume);
        }
        public function get tfexTotalDeal():int{
            return (this._tfexTotalDeal);
        }
        public function get tfexTotalOI():int{
            return (this._tfexTotalOI);
        }
        public function get totalFuturesVolume():int{
            return (this._totalFuturesVolume);
        }
        public function get totalFuturesDeal():int{
            return (this._totalFuturesDeal);
        }
        public function get totalFuturesOI():int{
            return (this._totalFuturesOI);
        }
        public function get totalOptionsVolume():int{
            return (this._totalOptionsVolume);
        }
        public function get totalOptionsDeal():int{
            return (this._totalOptionsDeal);
        }
        public function get totalOptionsOI():int{
            return (this._totalOptionsOI);
        }
        public function get dateAsOf():Date{
            return (this._dateAsOf);
        }
        public function get dateAsOfString():String{
            if (this.dateAsOfDayString.length == 0){
                if (this.dateAsOfDay < 10){
                    this.dateAsOfDayString = ("0" + this.dateAsOfDay.toString());
                } else {
                    this.dateAsOfDayString = this.dateAsOfDay.toString();
                };
            };
            if (this.dateAsOfDayString.length == 0){
                if (this.dateAsOfMonth < 10){
                    this.dateAsOfMonthString = ("0" + this.dateAsOfMonth.toString());
                } else {
                    this.dateAsOfMonthString = this.dateAsOfMonth.toString();
                };
            };
            if (this.dateAsOfDayString.length == 0){
                if (this.dateAsOfYear < 10){
                    this.dateAsOfYearString = ("0" + this.dateAsOfYear.toString());
                } else {
                    this.dateAsOfYearString = this.dateAsOfYear.toString();
                };
            };
            return (((((this.dateAsOfDayString + "/") + this.dateAsOfMonthString) + "/") + this.dateAsOfYearString));
        }
        public function get setStatus():String{
            return (this._setStatus);
        }
        public function get tfexStatus():String{
            return (this._tfexStatus);
        }
        public function get tfexMetalStatus():String{
            return (this._tfexMetalStatus);
        }
        public function get tfexStockStatus():String{
            return (this._tfexStockStatus);
        }
        public function get tfexInterestStatus():String{
            return (this._tfexInterestStatus);
        }
        public function get tfexEnergyStatus():String{
            return (this._tfexEnergyStatus);
        }
        public function get tfexCurrencyStatus():String{
            return (this._tfexCurrencyStatus);
        }
        public function set setIndex(value:Number):void{
            this._setIndex = value;
        }
        public function set setChange(value:Number):void{
            this._setChange = value;
        }
        public function set setHigh(value:Number):void{
            this._setHigh = value;
        }
        public function set setHighChange(value:Number):void{
            this._setHighChange = value;
        }
        public function set setLow(value:Number):void{
            this._setLow = value;
        }
        public function set setLowChange(value:Number):void{
            this._setLowChange = value;
        }
        public function set setTotalValue(value:Number):void{
            this._setTotalValue = value;
        }
        public function set setTotalVolume(value:Number):void{
            this._setTotalVolume = value;
        }
        public function set setGainers(value:int):void{
            this._setGainers = value;
        }
        public function set setLosers(value:int):void{
            this._setLosers = value;
        }
        public function set setUnchanged(value:int):void{
            this._setUnchanged = value;
        }
        public function set set50Index(value:Number):void{
            this._set50Index = value;
        }
        public function set set50Change(value:Number):void{
            this._set50Change = value;
        }
        public function set set50High(value:Number):void{
            this._set50High = value;
        }
        public function set set50HighChange(value:Number):void{
            this._set50HighChange = value;
        }
        public function set set50Low(value:Number):void{
            this._set50Low = value;
        }
        public function set set50LowChange(value:Number):void{
            this._set50LowChange = value;
        }
        public function set set50TotalValue(value:Number):void{
            this._set50TotalValue = value;
        }
        public function set set100Index(value:Number):void{
            this._set100Index = value;
        }
        public function set set100Change(value:Number):void{
            this._set100Change = value;
        }
        public function set set100High(value:Number):void{
            this._set100High = value;
        }
        public function set set100HighChange(value:Number):void{
            this._set100HighChange = value;
        }
        public function set set100Low(value:Number):void{
            this._set100Low = value;
        }
        public function set set100LowChange(value:Number):void{
            this._set100LowChange = value;
        }
        public function set set100TotalValue(value:Number):void{
            this._set100TotalValue = value;
        }
        public function set setHDIndex(value:Number):void{
            this._setHDIndex = value;
        }
        public function set setHDChange(value:Number):void{
            this._setHDChange = value;
        }
        public function set setHDHigh(value:Number):void{
            this._setHDHigh = value;
        }
        public function set setHDHighChange(value:Number):void{
            this._setHDHighChange = value;
        }
        public function set setHDLow(value:Number):void{
            this._setHDLow = value;
        }
        public function set setHDLowChange(value:Number):void{
            this._setHDLowChange = value;
        }
        public function set setHDTotalValue(value:Number):void{
            this._setHDTotalValue = value;
        }
        public function set maiIndex(value:Number):void{
            this._maiIndex = value;
        }
        public function set maiChange(value:Number):void{
            this._maiChange = value;
        }
        public function set maiHigh(value:Number):void{
            this._maiHigh = value;
        }
        public function set maiHighChange(value:Number):void{
            this._maiHighChange = value;
        }
        public function set maiLow(value:Number):void{
            this._maiLow = value;
        }
        public function set maiLowChange(value:Number):void{
            this._maiLowChange = value;
        }
        public function set maiTotalValue(value:Number):void{
            this._maiTotalValue = value;
        }
        public function set ftseIndex(value:Number):void{
            this._ftseIndex = value;
        }
        public function set ftseChange(value:Number):void{
            this._ftseChange = value;
        }
        public function set ftseHigh(value:Number):void{
            this._ftseHigh = value;
        }
        public function set ftseHighChange(value:Number):void{
            this._ftseHighChange = value;
        }
        public function set ftseLow(value:Number):void{
            this._ftseLow = value;
        }
        public function set ftseLowChange(value:Number):void{
            this._ftseLowChange = value;
        }
        public function set tfexTotalVolume(value:int):void{
            this._tfexTotalVolume = value;
        }
        public function set tfexTotalDeal(value:int):void{
            this._tfexTotalDeal = value;
        }
        public function set tfexTotalOI(value:int):void{
            this._tfexTotalOI = value;
        }
        public function set totalFuturesVolume(value:int):void{
            this._totalFuturesVolume = value;
        }
        public function set totalFuturesDeal(value:int):void{
            this._totalFuturesDeal = value;
        }
        public function set totalFuturesOI(value:int):void{
            this._totalFuturesOI = value;
        }
        public function set totalOptionsVolume(value:int):void{
            this._totalOptionsVolume = value;
        }
        public function set totalOptionsDeal(value:int):void{
            this._totalOptionsDeal = value;
        }
        public function set totalOptionsOI(value:int):void{
            this._totalOptionsOI = value;
        }
        public function set dateAsOf(value:Date):void{
            this._dateAsOf = value;
        }
        public function set setStatus(value:String):void{
            this._setStatus = value;
        }
        public function set tfexStatus(value:String):void{
            this._tfexStatus = value;
        }
        public function set tfexMetalStatus(value:String):void{
            this._tfexMetalStatus = value;
        }
        public function set tfexStockStatus(value:String):void{
            this._tfexStockStatus = value;
        }
        public function set tfexInterestStatus(value:String):void{
            this._tfexInterestStatus = value;
        }
        public function set tfexEnergyStatus(value:String):void{
            this._tfexEnergyStatus = value;
        }
        public function set tfexCurrencyStatus(value:String):void{
            this._tfexCurrencyStatus = value;
        }
        public function get dateAsOfYear():int{
            return (this._dateAsOfYear);
        }
        public function set dateAsOfYear(value:int):void{
            this._dateAsOfYear = value;
            this.dateAsOfYearString = "";
        }
        public function get dateAsOfMonth():int{
            return (this._dateAsOfMonth);
        }
        public function set dateAsOfMonth(value:int):void{
            this._dateAsOfMonth = value;
            this.dateAsOfMonthString = "";
        }
        public function get dateAsOfDay():int{
            return (this._dateAsOfDay);
        }
        public function set dateAsOfDay(value:int):void{
            this._dateAsOfDay = value;
            this.dateAsOfDayString = "";
        }
        public function get hasDerivativesInfo():Boolean{
            return (this._hasDerivativesInfo);
        }
        public function set hasDerivativesInfo(value:Boolean):void{
            this._hasDerivativesInfo = value;
        }
        public function get hasEquityInfo():Boolean{
            return (this._hasEquityInfo);
        }
        public function set hasEquityInfo(value:Boolean):void{
            this._hasEquityInfo = value;
        }
        public function get ftseTotalValue():Number{
            return (this._ftseTotalValue);
        }
        public function set ftseTotalValue(value:Number):void{
            this._ftseTotalValue = value;
        }

    }
}//package com.settrade.streaming5.message.feed 
﻿package com.settrade.streaming5.message.feed.snapshot {

    public class SnapshotSummaryEquity extends SnapshotSummaryInstrument {

        protected var _totalValue:Number;

        public function SnapshotSummaryEquity(){
            super();
            this._totalValue = NaN;
            _percentSwing = NaN;
        }
        public function get totalValue():Number{
            return (this._totalValue);
        }
        public function set totalValue(value:Number):void{
            this._totalValue = value;
        }

    }
}//package com.settrade.streaming5.message.feed.snapshot 
﻿package com.settrade.streaming5.message.feed.snapshot {

    public class SnapshotSummary {

        protected var _lastDone:Number;
        protected var _change:Number;
        protected var _percentChange:Number;
        protected var _totalVolume:Number;
        protected var _percentSwing:Number;

        public function SnapshotSummary(){
            super();
            this._lastDone = NaN;
            this._change = NaN;
            this._percentChange = NaN;
            this._totalVolume = NaN;
            this._percentSwing = NaN;
        }
        public function get lastDone():Number{
            return (this._lastDone);
        }
        public function set lastDone(value:Number):void{
            this._lastDone = value;
        }
        public function get change():Number{
            return (this._change);
        }
        public function set change(value:Number):void{
            this._change = value;
        }
        public function get percentChange():Number{
            return (this._percentChange);
        }
        public function set percentChange(value:Number):void{
            this._percentChange = value;
        }
        public function get totalVolume():Number{
            return (this._totalVolume);
        }
        public function set totalVolume(value:Number):void{
            this._totalVolume = value;
        }
        public function get percentSwing():Number{
            return (this._percentSwing);
        }
        public function set percentSwing(value:Number):void{
            this._percentSwing = value;
        }

    }
}//package com.settrade.streaming5.message.feed.snapshot 
﻿package com.settrade.streaming5.message.feed.snapshot {
    import com.settrade.streaming5.enumuration.*;

    public class SnapshotEquityFeedMessage extends SnapshotFeedMessage {

        protected var _instrumentSubType:InstrumentSubType;

        public function SnapshotEquityFeedMessage(source:Source){
            super(source);
            this._instrumentSubType = InstrumentSubType.NO_TYPE;
        }
        public function get instrumentSubType():InstrumentSubType{
            return (this._instrumentSubType);
        }
        public function set instrumentSubType(value:InstrumentSubType):void{
            this._instrumentSubType = value;
        }

    }
}//package com.settrade.streaming5.message.feed.snapshot 
﻿package com.settrade.streaming5.message.feed.snapshot {

    public class SnapshotInit {

        protected var _high:Number;
        protected var _low:Number;

        public function SnapshotInit(){
            super();
            this._high = NaN;
            this._low = NaN;
        }
        public function get high():Number{
            return (this._high);
        }
        public function set high(value:Number):void{
            this._high = value;
        }
        public function get low():Number{
            return (this._low);
        }
        public function set low(value:Number):void{
            this._low = value;
        }

    }
}//package com.settrade.streaming5.message.feed.snapshot 
﻿package com.settrade.streaming5.message.feed.snapshot {

    public class SnapshotProjectedDerivatives extends SnapshotProjected {

        protected var _openPrice0:Number;

        public function SnapshotProjectedDerivatives(){
            super();
            this._openPrice0 = NaN;
        }
        public function get openPrice0():Number{
            return (this._openPrice0);
        }
        public function set openPrice0(value:Number):void{
            this._openPrice0 = value;
        }

    }
}//package com.settrade.streaming5.message.feed.snapshot 
﻿package com.settrade.streaming5.message.feed.snapshot {

    public class SnapshotInitInstrument extends SnapshotInit {

        protected var _isTurnOver:Boolean;
        protected var _turnOverListLevel:String;
        protected var _caFlagList:Array;

        public function SnapshotInitInstrument(){
            super();
            this._isTurnOver = false;
            this._turnOverListLevel = "";
            this._caFlagList = null;
        }
        public function get caFlagList():Array{
            return (this._caFlagList);
        }
        public function set caFlagList(value:Array):void{
            this._caFlagList = value;
        }
        public function get isTurnOver():Boolean{
            return (this._isTurnOver);
        }
        public function set isTurnOver(value:Boolean):void{
            this._isTurnOver = value;
        }
        public function get turnOverListLevel():String{
            return (this._turnOverListLevel);
        }
        public function set turnOverListLevel(value:String):void{
            this._turnOverListLevel = value;
        }

    }
}//package com.settrade.streaming5.message.feed.snapshot 
﻿package com.settrade.streaming5.message.feed.snapshot {
    import com.settrade.streaming5.enumuration.*;

    public class SnapshotBidOffer {

        protected var _bidFlag:PriceType;
        protected var _askFlagh:PriceType;
        protected var _bidPrice:Number;
        protected var _askPrice:Number;
        protected var _bidVolume:Number;
        protected var _askVolume:Number;

        public function SnapshotBidOffer(){
            super();
            this._bidFlag = PriceType.NO_TYPE;
            this._askFlagh = PriceType.NO_TYPE;
            this._bidPrice = NaN;
            this._askPrice = NaN;
            this._bidVolume = NaN;
            this._askVolume = NaN;
        }
        public function get bidFlag():PriceType{
            return (this._bidFlag);
        }
        public function set bidFlag(value:PriceType):void{
            this._bidFlag = value;
        }
        public function get askFlagh():PriceType{
            return (this._askFlagh);
        }
        public function set askFlagh(value:PriceType):void{
            this._askFlagh = value;
        }
        public function get bidPrice():Number{
            return (this._bidPrice);
        }
        public function set bidPrice(value:Number):void{
            this._bidPrice = value;
        }
        public function get askPrice():Number{
            return (this._askPrice);
        }
        public function set askPrice(value:Number):void{
            this._askPrice = value;
        }
        public function get bidVolume():Number{
            return (this._bidVolume);
        }
        public function set bidVolume(value:Number):void{
            this._bidVolume = value;
        }
        public function get askVolume():Number{
            return (this._askVolume);
        }
        public function set askVolume(value:Number):void{
            this._askVolume = value;
        }

    }
}//package com.settrade.streaming5.message.feed.snapshot 
﻿package com.settrade.streaming5.message.feed.snapshot {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.feed.*;

    public class SnapshotFeedMessage extends FeedMessage {

        protected var _instrumentId:String;
        protected var _instrumentType:InstrumentType;
        protected var _priceDigit:Number;
        protected var _settleDigit:Number;
        protected var _hasInitData:Boolean;
        protected var _hasSummaryData:Boolean;
        protected var _hasBidOfferData:Boolean;
        protected var _hasProjectedData:Boolean;
        protected var _snapshotInit:SnapshotInit;
        protected var _snapshotSummary:SnapshotSummary;
        protected var _snapshotBidOffer:SnapshotBidOffer;
        protected var _snapshotProjected:SnapshotProjected;

        public function SnapshotFeedMessage(source:Source){
            super(MessageType.SNAPSHOT_FEED, System.REALTIME, source);
            this._instrumentId = "";
            this._instrumentType = InstrumentType.NO_TYPE;
            this._hasInitData = false;
            this._hasSummaryData = false;
            this._hasBidOfferData = false;
            this._hasProjectedData = false;
            this._snapshotInit = null;
            this._snapshotSummary = null;
            this._snapshotBidOffer = null;
            this._snapshotProjected = null;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function set instrumentId(value:String):void{
            this._instrumentId = value;
        }
        public function get instrumentType():InstrumentType{
            return (this._instrumentType);
        }
        public function set instrumentType(value:InstrumentType):void{
            this._instrumentType = value;
        }
        public function get hasInitData():Boolean{
            return (this._hasInitData);
        }
        public function set hasInitData(value:Boolean):void{
            this._hasInitData = value;
        }
        public function get hasSummaryData():Boolean{
            return (this._hasSummaryData);
        }
        public function set hasSummaryData(value:Boolean):void{
            this._hasSummaryData = value;
        }
        public function get hasBidOfferData():Boolean{
            return (this._hasBidOfferData);
        }
        public function set hasBidOfferData(value:Boolean):void{
            this._hasBidOfferData = value;
        }
        public function get hasProjectedData():Boolean{
            return (this._hasProjectedData);
        }
        public function set hasProjectedData(value:Boolean):void{
            this._hasProjectedData = value;
        }
        public function get snapshotInit():SnapshotInit{
            return (this._snapshotInit);
        }
        public function set snapshotInit(value:SnapshotInit):void{
            this._snapshotInit = value;
        }
        public function get snapshotSummary():SnapshotSummary{
            return (this._snapshotSummary);
        }
        public function set snapshotSummary(value:SnapshotSummary):void{
            this._snapshotSummary = value;
        }
        public function get snapshotBidOffer():SnapshotBidOffer{
            return (this._snapshotBidOffer);
        }
        public function set snapshotBidOffer(value:SnapshotBidOffer):void{
            this._snapshotBidOffer = value;
        }
        public function get snapshotProjected():SnapshotProjected{
            return (this._snapshotProjected);
        }
        public function set snapshotProjected(value:SnapshotProjected):void{
            this._snapshotProjected = value;
        }
        public function get priceDigit():Number{
            return (this._priceDigit);
        }
        public function set priceDigit(value:Number):void{
            this._priceDigit = value;
        }
        public function get settleDigit():Number{
            return (this._settleDigit);
        }
        public function set settleDigit(value:Number):void{
            this._settleDigit = value;
        }

    }
}//package com.settrade.streaming5.message.feed.snapshot 
﻿package com.settrade.streaming5.message.feed.snapshot {

    public class SnapshotInitEquity extends SnapshotInitInstrument {

        protected var _previousClose:Number;

        public function SnapshotInitEquity(){
            super();
            this._previousClose = NaN;
        }
        public function get previousClose():Number{
            return (this._previousClose);
        }
        public function set previousClose(value:Number):void{
            this._previousClose = value;
        }

    }
}//package com.settrade.streaming5.message.feed.snapshot 
﻿package com.settrade.streaming5.message.feed.snapshot {

    public class SnapshotSummaryInstrument extends SnapshotSummary {

        protected var _status:String;

        public function SnapshotSummaryInstrument(){
            super();
            this._status = "";
        }
        public function get status():String{
            return (this._status);
        }
        public function set status(value:String):void{
            this._status = value;
        }

    }
}//package com.settrade.streaming5.message.feed.snapshot 
﻿package com.settrade.streaming5.message.feed.snapshot {

    public class SnapshotSummaryDerivatives extends SnapshotSummaryInstrument {

        protected var _settlePrice:Number;
        protected var _theoricalPrice:Number;
        protected var _underlyingPrice:Number;
        protected var _basis:Number;
        protected var _diff:Number;
        protected var _percentGap:Number;

        public function SnapshotSummaryDerivatives(){
            super();
            this._settlePrice = NaN;
            this._basis = NaN;
            this._diff = NaN;
            this._theoricalPrice = NaN;
            this._underlyingPrice = NaN;
            this._percentGap = NaN;
        }
        public function get settlePrice():Number{
            return (this._settlePrice);
        }
        public function set settlePrice(value:Number):void{
            this._settlePrice = value;
        }
        public function get basis():Number{
            return (this._basis);
        }
        public function set basis(value:Number):void{
            this._basis = value;
        }
        public function get diff():Number{
            return (this._diff);
        }
        public function set diff(value:Number):void{
            this._diff = value;
        }
        public function get theoricalPrice():Number{
            return (this._theoricalPrice);
        }
        public function set theoricalPrice(value:Number):void{
            this._theoricalPrice = value;
        }
        public function get underlyingPrice():Number{
            return (this._underlyingPrice);
        }
        public function set underlyingPrice(value:Number):void{
            this._underlyingPrice = value;
        }
        public function get percentGap():Number{
            return (this._percentGap);
        }
        public function set percentGap(value:Number):void{
            this._percentGap = value;
        }

    }
}//package com.settrade.streaming5.message.feed.snapshot 
﻿package com.settrade.streaming5.message.feed.snapshot {

    public class SnapshotSummaryOption extends SnapshotSummaryDerivatives {

        protected var _inOut:Number;

        public function SnapshotSummaryOption(){
            super();
            this._inOut = NaN;
        }
        public function get inOut():Number{
            return (this._inOut);
        }
        public function set inOut(value:Number):void{
            this._inOut = value;
        }

    }
}//package com.settrade.streaming5.message.feed.snapshot 
﻿package com.settrade.streaming5.message.feed.snapshot {

    public class SnapshotCaFlag {

        protected var _sign:String;
        protected var _date:String;

        public function SnapshotCaFlag(sign:String, date:String){
            super();
            this._sign = sign;
            this._date = date;
        }
        public function get sign():String{
            return (this._sign);
        }
        public function get date():String{
            return (this._date);
        }

    }
}//package com.settrade.streaming5.message.feed.snapshot 
﻿package com.settrade.streaming5.message.feed.snapshot {
    import com.settrade.streaming5.enumuration.*;

    public class SnapshotInitDerivatives extends SnapshotInitInstrument {

        protected var _previousSettle:Number;
        protected var _previousOI:Number;
        protected var _lastTradingDate:String;
        protected var _expiryFlag:DerivativesExpireFlag;
        protected var _expiryTime:String;
        protected var _expiryDate:String;

        public function SnapshotInitDerivatives(){
            super();
            this._previousSettle = NaN;
            this._previousOI = NaN;
            this._lastTradingDate = "";
            this._expiryFlag = DerivativesExpireFlag.NO_FLAG;
            this._expiryTime = "";
            this._expiryDate = "";
        }
        public function get previousSettle():Number{
            return (this._previousSettle);
        }
        public function set previousSettle(value:Number):void{
            this._previousSettle = value;
        }
        public function get previousOI():Number{
            return (this._previousOI);
        }
        public function set previousOI(value:Number):void{
            this._previousOI = value;
        }
        public function get lastTradingDate():String{
            return (this._lastTradingDate);
        }
        public function set lastTradingDate(value:String):void{
            this._lastTradingDate = value;
        }
        public function get expiryFlag():DerivativesExpireFlag{
            return (this._expiryFlag);
        }
        public function set expiryFlag(value:DerivativesExpireFlag):void{
            this._expiryFlag = value;
        }
        public function get expiryTime():String{
            return (this._expiryTime);
        }
        public function set expiryTime(value:String):void{
            this._expiryTime = value;
        }
        public function get expiryDate():String{
            return (this._expiryDate);
        }
        public function set expiryDate(value:String):void{
            this._expiryDate = value;
        }

    }
}//package com.settrade.streaming5.message.feed.snapshot 
﻿package com.settrade.streaming5.message.feed.snapshot {

    public class SnapshotInitIndex extends SnapshotInit {

        protected var _previousClose:Number;

        public function SnapshotInitIndex(){
            super();
            this._previousClose = NaN;
        }
        public function get previousClose():Number{
            return (this._previousClose);
        }
        public function set previousClose(value:Number):void{
            this._previousClose = value;
        }

    }
}//package com.settrade.streaming5.message.feed.snapshot 
﻿package com.settrade.streaming5.message.feed.snapshot {

    public class SnapshotSummaryIndex extends SnapshotSummary {

        protected var _totalValue:Number;

        public function SnapshotSummaryIndex(){
            super();
            this._totalValue = NaN;
        }
        public function get totalValue():Number{
            return (this._totalValue);
        }
        public function set totalValue(value:Number):void{
            this._totalValue = value;
        }

    }
}//package com.settrade.streaming5.message.feed.snapshot 
﻿package com.settrade.streaming5.message.feed.snapshot {
    import com.settrade.streaming5.enumuration.*;

    public class SnapshotInitOptions extends SnapshotInitDerivatives {

        protected var _optionsType:OptionsType;
        protected var _strikePrice:int;

        public function SnapshotInitOptions(){
            super();
            this._optionsType = OptionsType.NO_TYPE;
            this._strikePrice = int.MIN_VALUE;
        }
        public function get optionsType():OptionsType{
            return (this._optionsType);
        }
        public function set optionsType(value:OptionsType):void{
            this._optionsType = value;
        }
        public function get strikePrice():int{
            return (this._strikePrice);
        }
        public function set strikePrice(value:int):void{
            this._strikePrice = value;
        }

    }
}//package com.settrade.streaming5.message.feed.snapshot 
﻿package com.settrade.streaming5.message.feed.snapshot {

    public class SnapshotProjected {

        protected var _openPrice1:Number;
        protected var _openPrice2:Number;
        protected var _projectedPrice:Number;
        protected var _percentProjectedChange:Number;

        public function SnapshotProjected(){
            super();
            this._openPrice1 = NaN;
            this._openPrice2 = NaN;
            this._projectedPrice = NaN;
            this._percentProjectedChange = NaN;
        }
        public function get openPrice1():Number{
            return (this._openPrice1);
        }
        public function set openPrice1(value:Number):void{
            this._openPrice1 = value;
        }
        public function get openPrice2():Number{
            return (this._openPrice2);
        }
        public function set openPrice2(value:Number):void{
            this._openPrice2 = value;
        }
        public function get projectedPrice():Number{
            return (this._projectedPrice);
        }
        public function set projectedPrice(value:Number):void{
            this._projectedPrice = value;
        }
        public function get percentProjectedChange():Number{
            return (this._percentProjectedChange);
        }
        public function set percentProjectedChange(value:Number):void{
            this._percentProjectedChange = value;
        }

    }
}//package com.settrade.streaming5.message.feed.snapshot 
﻿package com.settrade.streaming5.message.feed {
    import com.settrade.streaming5.enumuration.*;

    public class OrderStatusEquityFakeFeedMessage extends OrderStatusEquityFeedMessage {

        public function OrderStatusEquityFakeFeedMessage(source:Source){
            super(source);
        }
    }
}//package com.settrade.streaming5.message.feed 
﻿package com.settrade.streaming5.message.feed {
    import com.settrade.streaming5.enumuration.*;

    public class InstrumentTickerFeedMessage extends FeedMessage {

        protected var _instrumentType:InstrumentType;
        protected var _tickerSubType:TickerSubType;
        protected var _instrumentId:String;
        protected var _time:Date;
        protected var _orderSide:OrderSide;
        protected var _price:Number;
        protected var _change:Number;
        protected var _percentChange:Number;
        protected var _trend:Trend;
        protected var _sequenceId:int;
        protected var _volume:int;
        protected var _priceDigit:int;

        public function InstrumentTickerFeedMessage(source:Source){
            super(MessageType.INSTRUMENT_TICKER_FEED, System.REALTIME, source);
            this._instrumentType = InstrumentType.NO_TYPE;
            this._tickerSubType = TickerSubType.NO_TYPE;
            this._instrumentId = "";
            this._time = new Date();
            this._orderSide = OrderSide.NO_SIDE;
            this._price = NaN;
            this._change = NaN;
            this._percentChange = NaN;
            this._sequenceId = int.MIN_VALUE;
            this._volume = int.MIN_VALUE;
            this._trend = Trend.NO_DATA;
            this._priceDigit = 2;
        }
        public function get instrumentType():InstrumentType{
            return (this._instrumentType);
        }
        public function set instrumentType(value:InstrumentType):void{
            this._instrumentType = value;
        }
        public function get tickerSubType():TickerSubType{
            return (this._tickerSubType);
        }
        public function set tickerSubType(value:TickerSubType):void{
            this._tickerSubType = value;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function set instrumentId(value:String):void{
            this._instrumentId = value;
        }
        public function get price():Number{
            return (this._price);
        }
        public function set price(value:Number):void{
            this._price = value;
        }
        public function get change():Number{
            return (this._change);
        }
        public function set change(value:Number):void{
            this._change = value;
        }
        public function get percentChange():Number{
            return (this._percentChange);
        }
        public function set percentChange(value:Number):void{
            this._percentChange = value;
        }
        public function get sequenceId():int{
            return (this._sequenceId);
        }
        public function set sequenceId(value:int):void{
            this._sequenceId = value;
        }
        public function get volume():int{
            return (this._volume);
        }
        public function set volume(value:int):void{
            this._volume = value;
        }
        public function get orderSide():OrderSide{
            return (this._orderSide);
        }
        public function set orderSide(value:OrderSide):void{
            this._orderSide = value;
        }
        public function get trend():Trend{
            return (this._trend);
        }
        public function set trend(value:Trend):void{
            this._trend = value;
        }
        public function get time():Date{
            return (this._time);
        }
        public function set time(value:Date):void{
            this._time = value;
        }
        public function get priceDigit():int{
            return (this._priceDigit);
        }
        public function set priceDigit(value:int):void{
            this._priceDigit = value;
        }

    }
}//package com.settrade.streaming5.message.feed 
﻿package com.settrade.streaming5.message.feed {
    import com.settrade.streaming5.enumuration.*;

    public class MarketTickerFeedMessage extends FeedMessage {

        protected var _instrumentType:InstrumentType;
        protected var _tickerSubType:TickerSubType;
        protected var _instrumentId:String;
        protected var _orderSide:OrderSide;
        protected var _price:Number;
        protected var _change:Number;
        protected var _trend:Trend;
        protected var _sequenceId:int;
        protected var _volume:int;
        protected var _isSum:Boolean;
        protected var _firstMessageId:Number;
        protected var _priceDigit:int;

        public function MarketTickerFeedMessage(source:Source){
            super(MessageType.MARKET_TICKER_FEED, System.REALTIME, source);
            this._instrumentType = InstrumentType.NO_TYPE;
            this._tickerSubType = TickerSubType.NO_TYPE;
            this._instrumentId = "";
            this._orderSide = OrderSide.NO_SIDE;
            this._price = NaN;
            this._change = NaN;
            this._sequenceId = int.MIN_VALUE;
            this._volume = int.MIN_VALUE;
            this._trend = Trend.NO_DATA;
            this._isSum = false;
            this._firstMessageId = NaN;
            this._priceDigit = 2;
        }
        public function get instrumentType():InstrumentType{
            return (this._instrumentType);
        }
        public function set instrumentType(value:InstrumentType):void{
            this._instrumentType = value;
        }
        public function get tickerSubType():TickerSubType{
            return (this._tickerSubType);
        }
        public function set tickerSubType(value:TickerSubType):void{
            this._tickerSubType = value;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function set instrumentId(value:String):void{
            this._instrumentId = value;
        }
        public function get price():Number{
            return (this._price);
        }
        public function set price(value:Number):void{
            this._price = value;
        }
        public function get sequenceId():int{
            return (this._sequenceId);
        }
        public function set sequenceId(value:int):void{
            this._sequenceId = value;
        }
        public function get volume():int{
            return (this._volume);
        }
        public function set volume(value:int):void{
            this._volume = value;
        }
        public function get orderSide():OrderSide{
            return (this._orderSide);
        }
        public function set orderSide(value:OrderSide):void{
            this._orderSide = value;
        }
        public function get trend():Trend{
            return (this._trend);
        }
        public function set trend(value:Trend):void{
            this._trend = value;
        }
        public function get change():Number{
            return (this._change);
        }
        public function set change(value:Number):void{
            this._change = value;
        }
        public function get isSum():Boolean{
            return (this._isSum);
        }
        public function set isSum(value:Boolean):void{
            this._isSum = value;
        }
        public function get firstMessageId():Number{
            return (this._firstMessageId);
        }
        public function set firstMessageId(value:Number):void{
            this._firstMessageId = value;
        }
        public function get priceDigit():int{
            return (this._priceDigit);
        }
        public function set priceDigit(value:int):void{
            this._priceDigit = value;
        }

    }
}//package com.settrade.streaming5.message.feed 
﻿package com.settrade.streaming5.message.feed {
    import com.settrade.streaming5.enumuration.*;

    public class OrderStatusDerivativesFakeFeedMessage extends OrderStatusDerivativesFeedMessage {

        public function OrderStatusDerivativesFakeFeedMessage(source:Source){
            super(source);
        }
    }
}//package com.settrade.streaming5.message.feed 
﻿package com.settrade.streaming5.message.feed {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import __AS3__.vec.*;

    public class MultipleFeedMessage extends FeedMessage implements IMultipleMessage {

        protected var _messageList:Vector.<Message>;

        public function MultipleFeedMessage(){
            super(MessageType.MULTIPLE_FEED, System.NO_SYSTEM, Source.NO_SOURCE);
            this._messageList = new Vector.<Message>();
        }
        public function add(message:FeedMessage):void{
            if (message != this){
                this._messageList.push(message);
            };
        }
        public function addAll(list:Vector.<FeedMessage>):void{
            var message:FeedMessage;
            for each (message in list) {
                this.add(message);
            };
        }
        public function get messageList():Vector.<Message>{
            return (this._messageList);
        }

    }
}//package com.settrade.streaming5.message.feed 
﻿package com.settrade.streaming5.message.feed {
    import com.settrade.streaming5.enumuration.*;

    public class InstrumentTickerOddLotFeedMessage extends FeedMessage {

        protected var _instrumentType:InstrumentType;
        protected var _tickerSubType:TickerSubType;
        protected var _instrumentId:String;
        protected var _time:Date;
        protected var _orderSide:OrderSide;
        protected var _price:Number;
        protected var _change:Number;
        protected var _percentChange:Number;
        protected var _trend:Trend;
        protected var _sequenceId:int;
        protected var _volume:int;
        protected var _priceDigit:int;

        public function InstrumentTickerOddLotFeedMessage(source:Source){
            super(MessageType.INSTRUMENT_TICKER_ODDLOT_FEED, System.REALTIME, source);
            this._instrumentType = InstrumentType.NO_TYPE;
            this._tickerSubType = TickerSubType.NO_TYPE;
            this._instrumentId = "";
            this._time = new Date();
            this._orderSide = OrderSide.NO_SIDE;
            this._price = NaN;
            this._change = NaN;
            this._percentChange = NaN;
            this._sequenceId = int.MIN_VALUE;
            this._volume = int.MIN_VALUE;
            this._trend = Trend.NO_DATA;
            this._priceDigit = 2;
        }
        public function get instrumentType():InstrumentType{
            return (this._instrumentType);
        }
        public function set instrumentType(value:InstrumentType):void{
            this._instrumentType = value;
        }
        public function get tickerSubType():TickerSubType{
            return (this._tickerSubType);
        }
        public function set tickerSubType(value:TickerSubType):void{
            this._tickerSubType = value;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function set instrumentId(value:String):void{
            this._instrumentId = value;
        }
        public function get price():Number{
            return (this._price);
        }
        public function set price(value:Number):void{
            this._price = value;
        }
        public function get change():Number{
            return (this._change);
        }
        public function set change(value:Number):void{
            this._change = value;
        }
        public function get percentChange():Number{
            return (this._percentChange);
        }
        public function set percentChange(value:Number):void{
            this._percentChange = value;
        }
        public function get sequenceId():int{
            return (this._sequenceId);
        }
        public function set sequenceId(value:int):void{
            this._sequenceId = value;
        }
        public function get volume():int{
            return (this._volume);
        }
        public function set volume(value:int):void{
            this._volume = value;
        }
        public function get orderSide():OrderSide{
            return (this._orderSide);
        }
        public function set orderSide(value:OrderSide):void{
            this._orderSide = value;
        }
        public function get trend():Trend{
            return (this._trend);
        }
        public function set trend(value:Trend):void{
            this._trend = value;
        }
        public function get time():Date{
            return (this._time);
        }
        public function set time(value:Date):void{
            this._time = value;
        }
        public function get priceDigit():int{
            return (this._priceDigit);
        }
        public function set priceDigit(value:int):void{
            this._priceDigit = value;
        }

    }
}//package com.settrade.streaming5.message.feed 
﻿package com.settrade.streaming5.message.feed {
    import com.settrade.streaming5.enumuration.*;

    public class StubFeedMessage extends FeedMessage {

        protected var _data:String;

        public function StubFeedMessage(system:System, source:Source, data:String){
            super(MessageType.STUB_FEED, system, source);
            this._data = data;
        }
        public function get data():String{
            return (this._data);
        }

    }
}//package com.settrade.streaming5.message.feed 
﻿package com.settrade.streaming5.message.feed {
    import com.settrade.streaming5.enumuration.*;

    public class OrderPushCheckFeedMessage extends FeedMessage {

        protected var _brokerId:String;
        protected var _accountSystem:System;
        protected var _orderType:OrderType;
        protected var _orderPushStatus:FeedState;

        public function OrderPushCheckFeedMessage(source:Source){
            super(MessageType.ORDER_PUSH_CHECK_FEED, System.REALTIME, source);
            this._brokerId = "";
            this._accountSystem = System.NO_SYSTEM;
            this._orderType = OrderType.NO_TYPE;
            this._orderPushStatus = FeedState.NO_STATE;
        }
        public function get brokerId():String{
            return (this._brokerId);
        }
        public function set brokerId(value:String):void{
            this._brokerId = value;
        }
        public function get accountSystem():System{
            return (this._accountSystem);
        }
        public function set accountSystem(value:System):void{
            this._accountSystem = value;
        }
        public function get orderType():OrderType{
            return (this._orderType);
        }
        public function set orderType(value:OrderType):void{
            this._orderType = value;
        }
        public function get orderPushStatus():FeedState{
            return (this._orderPushStatus);
        }
        public function set orderPushStatus(value:FeedState):void{
            this._orderPushStatus = value;
        }

    }
}//package com.settrade.streaming5.message.feed 
﻿package com.settrade.streaming5.message.feed {
    import com.settrade.streaming5.enumuration.*;

    public class AdminFeedMessage extends FeedMessage {

        var _time:String;
        var _detail:String;

        public function AdminFeedMessage(source:Source){
            super(MessageType.ADMIN_FEED, System.REALTIME, source);
            this._time = "";
            this._detail = "";
        }
        public function get time():String{
            return (this._time);
        }
        public function set time(value:String):void{
            this._time = value;
        }
        public function get detail():String{
            return (this._detail);
        }
        public function set detail(value:String):void{
            this._detail = value;
        }

    }
}//package com.settrade.streaming5.message.feed 
﻿package com.settrade.streaming5.message.feed {
    import com.settrade.streaming5.enumuration.*;

    public class OrderStatusDerivativesFeedMessage extends FeedMessage {

        protected var _orderNumber:String;
        protected var _instrumentId:String;
        protected var _time:String;
        protected var _orderSide:DerivativesOrderSide;
        protected var _price:Number;
        protected var _volume:Number;
        protected var _matchVolume:Number;
        protected var _cancelVolume:Number;
        protected var _balanceVolume:Number;
        protected var _validity:DerivativesValidity;
        protected var _until:String;
        protected var _status:String;
        protected var _enterId:String;
        protected var _date:String;
        protected var _canCancel:Boolean;
        protected var _canChange:Boolean;
        protected var _position:DerivativesPosition;
        protected var _accountNumber:String;
        protected var _canApprove:Boolean;
        protected var _deleteFlag:Boolean;
        protected var _priceDigit:int;
        protected var _priceType:DerivativesPriceType;
        protected var _isMatch:Boolean;
        protected var _isTradeReport:Boolean;
        protected var _isStopOrderNotActivate:Boolean;
        protected var _version:Number;
        protected var _canChangePriceVolume:Boolean;

        public function OrderStatusDerivativesFeedMessage(source:Source){
            super(MessageType.ORDER_STATUS_DERIVATIVES_FEED, System.DERIV, source);
            this._orderNumber = "";
            this._instrumentId = "";
            this._time = "";
            this._orderSide = DerivativesOrderSide.NO_SIDE;
            this._price = NaN;
            this._volume = NaN;
            this._matchVolume = NaN;
            this._cancelVolume = NaN;
            this._balanceVolume = NaN;
            this._validity = DerivativesValidity.NO_TYPE;
            this._until = "";
            this._status = "";
            this._enterId = "";
            this._date = "";
            this._canCancel = false;
            this._canChange = false;
            this._position = DerivativesPosition.NO_TYPE;
            this._accountNumber = "";
            this._canApprove = false;
            this._deleteFlag = false;
            this._priceDigit = 0;
            this._priceType = DerivativesPriceType.NO_TYPE;
            this._isMatch = false;
            this._isTradeReport = false;
            this._isStopOrderNotActivate = false;
            this._version = -1;
            this._canChangePriceVolume = false;
        }
        public function get orderNumber():String{
            return (this._orderNumber);
        }
        public function set orderNumber(value:String):void{
            this._orderNumber = value;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function set instrumentId(value:String):void{
            this._instrumentId = value;
        }
        public function get time():String{
            return (this._time);
        }
        public function set time(value:String):void{
            this._time = value;
        }
        public function get orderSide():DerivativesOrderSide{
            return (this._orderSide);
        }
        public function set orderSide(value:DerivativesOrderSide):void{
            this._orderSide = value;
        }
        public function get price():Number{
            return (this._price);
        }
        public function set price(value:Number):void{
            this._price = value;
        }
        public function get volume():Number{
            return (this._volume);
        }
        public function set volume(value:Number):void{
            this._volume = value;
        }
        public function get matchVolume():Number{
            return (this._matchVolume);
        }
        public function set matchVolume(value:Number):void{
            this._matchVolume = value;
        }
        public function get cancelVolume():Number{
            return (this._cancelVolume);
        }
        public function set cancelVolume(value:Number):void{
            this._cancelVolume = value;
        }
        public function get balanceVolume():Number{
            return (this._balanceVolume);
        }
        public function set balanceVolume(value:Number):void{
            this._balanceVolume = value;
        }
        public function get validity():DerivativesValidity{
            return (this._validity);
        }
        public function set validity(value:DerivativesValidity):void{
            this._validity = value;
        }
        public function get until():String{
            return (this._until);
        }
        public function set until(value:String):void{
            this._until = value;
        }
        public function get status():String{
            return (this._status);
        }
        public function set status(value:String):void{
            this._status = value;
        }
        public function get enterId():String{
            return (this._enterId);
        }
        public function set enterId(value:String):void{
            this._enterId = value;
        }
        public function get date():String{
            return (this._date);
        }
        public function set date(value:String):void{
            this._date = value;
        }
        public function get canCancel():Boolean{
            return (this._canCancel);
        }
        public function set canCancel(value:Boolean):void{
            this._canCancel = value;
        }
        public function get canChange():Boolean{
            return (this._canChange);
        }
        public function set canChange(value:Boolean):void{
            this._canChange = value;
        }
        public function get position():DerivativesPosition{
            return (this._position);
        }
        public function set position(value:DerivativesPosition):void{
            this._position = value;
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }
        public function set accountNumber(value:String):void{
            this._accountNumber = value;
        }
        public function get canApprove():Boolean{
            return (this._canApprove);
        }
        public function set canApprove(value:Boolean):void{
            this._canApprove = value;
        }
        public function get deleteFlag():Boolean{
            return (this._deleteFlag);
        }
        public function set deleteFlag(value:Boolean):void{
            this._deleteFlag = value;
        }
        public function get priceDigit():int{
            return (this._priceDigit);
        }
        public function set priceDigit(value:int):void{
            this._priceDigit = value;
        }
        public function get priceType():DerivativesPriceType{
            return (this._priceType);
        }
        public function set priceType(value:DerivativesPriceType):void{
            this._priceType = value;
        }
        public function get isMatch():Boolean{
            return (this._isMatch);
        }
        public function set isMatch(value:Boolean):void{
            this._isMatch = value;
        }
        public function get isTradeReport():Boolean{
            return (this._isTradeReport);
        }
        public function set isTradeReport(value:Boolean):void{
            this._isTradeReport = value;
        }
        public function get isStopOrderNotActivate():Boolean{
            return (this._isStopOrderNotActivate);
        }
        public function set isStopOrderNotActivate(value:Boolean):void{
            this._isStopOrderNotActivate = value;
        }
        public function get version():Number{
            return (this._version);
        }
        public function set version(value:Number):void{
            this._version = value;
        }
        public function get canChangePriceVolume():Boolean{
            return (this._canChangePriceVolume);
        }
        public function set canChangePriceVolume(value:Boolean):void{
            this._canChangePriceVolume = value;
        }

    }
}//package com.settrade.streaming5.message.feed 
﻿package com.settrade.streaming5.message.feed {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import __AS3__.vec.*;

    public class MultipleMarketTickerFeedMessage extends FeedMessage implements IMultipleMessage {

        protected var _messageList:Vector.<Message>;

        public function MultipleMarketTickerFeedMessage(){
            super(MessageType.MULTIPLE_MARKET_TICKER_FEED, System.REALTIME, Source.HTTP_RESPONSE);
            this._messageList = new Vector.<Message>();
        }
        public function add(message:MarketTickerFeedMessage):void{
            this._messageList.push(message);
        }
        public function addAll(list:Vector.<MarketTickerFeedMessage>):void{
            var message:MarketTickerFeedMessage;
            for each (message in list) {
                this.add(message);
            };
        }
        public function get messageList():Vector.<Message>{
            return (this._messageList);
        }

    }
}//package com.settrade.streaming5.message.feed 
﻿package com.settrade.streaming5.message.feed {
    import com.settrade.streaming5.enumuration.*;

    public class DisconnectFeedMessage extends FeedMessage {

        public function DisconnectFeedMessage(source:Source){
            super(MessageType.DISCONNECT_FEED, System.REALTIME, source);
        }
    }
}//package com.settrade.streaming5.message.feed 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class MarginStockResponseMessage extends ResponseMessage {

        protected var _marginRateBroker:String;
        protected var _marginRateTSFC:String;
        protected var _stockGradeBroker:String;
        protected var _stockGradeTSFC:String;

        public function MarginStockResponseMessage(requestMessage:RequestMessage, source:Source, marginRateBroker:String, marginRateTSFC:String, stockGradeBroker:String, stockGradeTSFC:String){
            super(MessageType.MARGIN_STOCK_RESPONSE, System.EQUITY, requestMessage, source);
            this._marginRateBroker = marginRateBroker;
            this._marginRateTSFC = marginRateTSFC;
            this._stockGradeBroker = stockGradeBroker;
            this._stockGradeTSFC = stockGradeTSFC;
        }
        public function get marginRateBroker():String{
            return (this._marginRateBroker);
        }
        public function get marginRateTSFC():String{
            return (this._marginRateTSFC);
        }
        public function get stockGradeBroker():String{
            return (this._stockGradeBroker);
        }
        public function get stockGradeTSFC():String{
            return (this._stockGradeTSFC);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class ChangeOrderEquityWarnResponseMessage extends ResponseMessage {

        protected var _message:String;

        public function ChangeOrderEquityWarnResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.CHANGE_ORDER_EQUITY_WARN_RESPONSE, System.EQUITY, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class PlaceOrderEquityResponseMessage extends ResponseMessage {

        protected var _orderNo:String;
        protected var _message:String;

        public function PlaceOrderEquityResponseMessage(requestMessage:RequestMessage, source:Source, message:String, orderNo:String){
            super(MessageType.PLACE_ORDER_EQUITY_RESPONSE, System.EQUITY, requestMessage, source);
            this._orderNo = orderNo;
            this._message = message;
        }
        public function get orderNo():String{
            return (this._orderNo);
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response.updateconfig {
    import com.settrade.streaming5.enumuration.*;

    public class UpdateConfigResult {

        protected var _result:OrderResponseStatus;
        protected var _type:ConfigType;
        protected var _message:String;

        public function UpdateConfigResult(result:OrderResponseStatus, type:ConfigType, message:String){
            super();
            this._result = result;
            this._type = type;
            this._message = message;
        }
        public function get result():OrderResponseStatus{
            return (this._result);
        }
        public function get type():ConfigType{
            return (this._type);
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response.updateconfig 
﻿package com.settrade.streaming5.message.response.updateconfig {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class UpdateConfigResponseMessage extends ResponseMessage {

        protected var _resultList:Array;

        public function UpdateConfigResponseMessage(requestMessage:RequestMessage, source:Source){
            super(MessageType.UPDATE_CONFIG_RESPONSE, System.REALTIME, requestMessage, source);
            this._resultList = new Array();
        }
        public function addResult(result:UpdateConfigResult):void{
            this._resultList.push(result);
        }
        public function get resultList():Array{
            return (this._resultList.slice(0));
        }

    }
}//package com.settrade.streaming5.message.response.updateconfig 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class PlaceOrderDerivativesWarnResponseMessage extends ResponseMessage {

        protected var _message:String;

        public function PlaceOrderDerivativesWarnResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.PLACE_ORDER_DERIVATIVES_WARN_RESPONSE, System.DERIV, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;

    public class CancelOrderDerivativesFailResponseMessage extends ResponseMessage implements IFailMessage {

        protected var _message:String;

        public function CancelOrderDerivativesFailResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.CANCEL_ORDER_DERIVATIVES_FAIL_RESPONSE, System.DERIV, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response.orderstatus {

    public interface IOrderStatusClick {

        function get price():Number;
        function get orderList():Array;

    }
}//package com.settrade.streaming5.message.response.orderstatus 
﻿package com.settrade.streaming5.message.response.orderstatus {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.feed.*;

    public class OrderStatusDerivatives implements IOrderStatus {

        protected var _orderNumber:String;
        protected var _instrumentId:String;
        protected var _time:String;
        protected var _side:DerivativesOrderSide;
        protected var _price:Number;
        protected var _volume:Number;
        protected var _matchVolume:Number;
        protected var _balanceVolume:Number;
        protected var _cancelVolume:Number;
        protected var _validity:DerivativesValidity;
        protected var _until:String;
        protected var _status:String;
        protected var _canCancel:Boolean;
        protected var _canChange:Boolean;
        protected var _position:DerivativesPosition;
        protected var _enterId:String;
        protected var _accountNumber:String;
        protected var _canApprove:Boolean;
        protected var _deleteFlag:Boolean;
        protected var _priceDigit:int;
        protected var _tfexOrderNumber:String;
        protected var _isStopOrder:Boolean;
        protected var _isFakeOrder:Boolean;
        protected var _date:String;
        protected var _priceType:DerivativesPriceType;
        protected var _canChangePriceVolume:Boolean;
        protected var _isStopOrderNotActivate:Boolean;
        protected var _version:Number;

        public function OrderStatusDerivatives(orderNumber:String, instrumentId:String, time:String, side:DerivativesOrderSide, price:Number, volume:Number, matchVolume:Number, balanceVolume:Number, cancelVolume:Number, validity:DerivativesValidity, until:String, status:String, canCancel:Boolean, canChange:Boolean, position:DerivativesPosition, enterId:String, accountNumber:String, canApprove:Boolean, deleteFlag:Boolean, priceDigit:int, tfexOrderNumber:String, isStopOrder:Boolean, date:String, isFakeOrder:Boolean=false, priceType:DerivativesPriceType=null, canChangePriceVolume:Boolean=false, isStopOrderNotActivate:Boolean=false, version:Number=-1){
            super();
            this._orderNumber = orderNumber;
            this._instrumentId = instrumentId;
            this._time = time;
            this._side = side;
            this._price = price;
            this._volume = volume;
            this._matchVolume = matchVolume;
            this._balanceVolume = balanceVolume;
            this._cancelVolume = cancelVolume;
            this._validity = validity;
            this._until = until;
            this._status = status;
            this._canCancel = canCancel;
            this._canChange = canChange;
            this._position = position;
            this._enterId = enterId;
            this._accountNumber = accountNumber;
            this._canApprove = canApprove;
            this._deleteFlag = deleteFlag;
            this._priceDigit = priceDigit;
            this._tfexOrderNumber = tfexOrderNumber;
            this._isStopOrder = isStopOrder;
            this._date = date;
            this._isFakeOrder = isFakeOrder;
            this._priceType = (((priceType == null)) ? DerivativesPriceType.LIMIT : priceType);
            this._isStopOrderNotActivate = isStopOrderNotActivate;
            this._version = version;
            this._canChangePriceVolume = canChangePriceVolume;
        }
        public static function createFromFeed(message:OrderStatusDerivativesFeedMessage):OrderStatusDerivatives{
            var orderStatusDerivatives:OrderStatusDerivatives = new OrderStatusDerivatives(message.orderNumber, message.instrumentId, message.time, message.orderSide, message.price, message.volume, message.matchVolume, message.balanceVolume, message.cancelVolume, message.validity, message.until, message.status, message.canCancel, message.canChange, message.position, message.enterId, message.accountNumber, message.canApprove, message.deleteFlag, message.priceDigit, "", false, message.date, false, message.priceType, message.canChangePriceVolume, message.isStopOrderNotActivate, message.version);
            if ((message is OrderStatusDerivativesFakeFeedMessage)){
                orderStatusDerivatives._isFakeOrder = true;
            };
            return (orderStatusDerivatives);
        }

        public function updateFromFeed(message:OrderStatusDerivativesFeedMessage):void{
            if (this._orderNumber == message.orderNumber){
                this._price = message.price;
                this._volume = message.volume;
                this._matchVolume = message.matchVolume;
                this._balanceVolume = message.balanceVolume;
                this._cancelVolume = message.cancelVolume;
                this._status = message.status;
                this._canCancel = message.canCancel;
                this._canChange = message.canChange;
                this._canChangePriceVolume = message.canChangePriceVolume;
                this._isStopOrderNotActivate = message.isStopOrderNotActivate;
                this._isFakeOrder = false;
            };
        }
        public function get system():System{
            return (System.DERIV);
        }
        public function get orderNumber():String{
            return (this._orderNumber);
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get time():String{
            return (this._time);
        }
        public function get orderSide():DerivativesOrderSide{
            return (this._side);
        }
        public function get price():Number{
            return (this._price);
        }
        public function get volume():Number{
            return (this._volume);
        }
        public function get matchVolume():Number{
            return (this._matchVolume);
        }
        public function get balanceVolume():Number{
            return (this._balanceVolume);
        }
        public function get cancelVolume():Number{
            return (this._cancelVolume);
        }
        public function get validity():DerivativesValidity{
            return (this._validity);
        }
        public function get until():String{
            return (this._until);
        }
        public function get status():String{
            return (this._status);
        }
        public function get canCancel():Boolean{
            return (this._canCancel);
        }
        public function get canChange():Boolean{
            return (this._canChange);
        }
        public function get position():DerivativesPosition{
            return (this._position);
        }
        public function get enterId():String{
            return (this._enterId);
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }
        public function get canApprove():Boolean{
            return (this._canApprove);
        }
        public function get deleteFlag():Boolean{
            return (this._deleteFlag);
        }
        public function get priceDigit():int{
            return (this._priceDigit);
        }
        public function get tfexOrderNumber():String{
            return (this._tfexOrderNumber);
        }
        public function get isStopOrder():Boolean{
            return (this._isStopOrder);
        }
        public function get date():String{
            return (this._date);
        }
        public function get isFakeOrder():Boolean{
            return (this._isFakeOrder);
        }
        public function clone():IOrderStatus{
            return (new OrderStatusDerivatives(this.orderNumber, this.instrumentId, this.time, this.orderSide, this.price, this.volume, this.matchVolume, this.balanceVolume, this.cancelVolume, this.validity, this.until, this.status, this.canCancel, this.canChange, this.position, this.enterId, this.accountNumber, this.canApprove, this.deleteFlag, this.priceDigit, this.tfexOrderNumber, this.isStopOrder, this.date, this._isFakeOrder, this.priceType, this.canChangePriceVolume, this.isStopOrderNotActivate, this.version));
        }
        public function toString():String{
            return ((((((((((((((((((((((((((((((((((((((((((((((((("[OrderStatusDerivatives system=" + this.system) + " orderNumber=") + this.orderNumber) + " instrumentId=") + this.instrumentId) + " time=") + this.time) + " orderSide=") + this.orderSide) + " price=") + this.price) + " volume=") + this.volume) + " matchVolume=") + this.matchVolume) + " balanceVolume=") + this.balanceVolume) + " cancelVolume=") + this.cancelVolume) + " validity=") + this.validity) + " until=") + this.until) + " status=") + this.status) + " canCancel=") + this.canCancel) + " canChange=") + this.canChange) + " position=") + this.position) + " enterId=") + this.enterId) + " accountNumber=") + this.accountNumber) + " canApprove=") + this.canApprove) + " deleteFlag=") + this.deleteFlag) + " priceDigit=") + this.priceDigit) + " tfexOrderNumber=") + this.tfexOrderNumber) + " isStopOrder=") + this.isStopOrder) + " date=") + this.date) + "]"));
        }
        public function get canChangePriceVolume():Boolean{
            return (this._canChangePriceVolume);
        }
        public function get priceType():DerivativesPriceType{
            return (this._priceType);
        }
        public function get isStopOrderNotActivate():Boolean{
            return (this._isStopOrderNotActivate);
        }
        public function get version():Number{
            return (this._version);
        }

    }
}//package com.settrade.streaming5.message.response.orderstatus 
﻿package com.settrade.streaming5.message.response.orderstatus {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class OrderStatusSearchDerivativesResponseMessage extends ResponseMessage {

        protected var _orderList:Array;

        public function OrderStatusSearchDerivativesResponseMessage(requestMessage:RequestMessage, source:Source){
            super(MessageType.ORDER_STATUS_SEARCH_DERIVATIVES_RESPONSE, System.DERIV, requestMessage, source);
            this._orderList = new Array();
        }
        public function addOrder(orderStatusDerivatives:OrderStatusDerivatives):void{
            this._orderList.push(orderStatusDerivatives);
        }
        public function get orderList():Array{
            return (this._orderList);
        }

    }
}//package com.settrade.streaming5.message.response.orderstatus 
﻿package com.settrade.streaming5.message.response.orderstatus {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class OrderStatusClickResponseMessage extends ResponseMessage {

        protected var _instrumentId:String;
        protected var _accountNumber:String;
        protected var _orderClickList:Array;

        public function OrderStatusClickResponseMessage(system:System, requestMessage:RequestMessage, source:Source, instrumentId:String, accountNumber:String){
            super(MessageType.ORDER_STATUS_CLICK_RESPONSE, system, requestMessage, source);
            this._instrumentId = instrumentId;
            this._accountNumber = accountNumber;
            this._orderClickList = new Array();
        }
        public function addOrderStatusClick(order:IOrderStatusClick):void{
            this._orderClickList.push(order);
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }
        public function get orderClickList():Array{
            return (this._orderClickList);
        }

    }
}//package com.settrade.streaming5.message.response.orderstatus 
﻿package com.settrade.streaming5.message.response.orderstatus {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.feed.*;

    public class OrderStatusEquity implements IOrderStatus {

        protected var _orderNumber:String;
        protected var _nvdrFlag:String;
        protected var _instrumentId:String;
        protected var _orderTime:String;
        protected var _orderSide:OrderSide;
        protected var _price:Number;
        protected var _volume:int;
        protected var _matchVolume:int;
        protected var _balanceVolume:int;
        protected var _cancelVolume:int;
        protected var _status:String;
        protected var _priceType:PriceType;
        protected var _canCancel:Boolean;
        protected var _canChange:Boolean;
        protected var _canChangePriceVolume:Boolean;
        protected var _tradeDate:String;
        protected var _sequenceNumber:int;
        protected var _accountNumber:String;
        protected var _orderNumberSeos:String;
        protected var _orderNumberFis:String;
        protected var _validity:Validity;
        protected var _enterId:String;
        protected var _icebergVolume:int;
        protected var _isFakeOrder:Boolean;

        public function OrderStatusEquity(orderNumber:String, nvdrFlag:String, instrumentId:String, orderTime:String, orderSide:OrderSide, price:Number, volume:int, matchVolume:int, balanceVolume:int, cancelVolume:int, status:String, priceType:PriceType, canCancel:Boolean, canChange:Boolean, tradeDate:String, sequenceNumber:int, accountNumber:String, orderNumberSeos:String, orderNumberFis:String, validity:Validity, canChangePriceVolume:Boolean, enterId:String="", icebergVolume:int=0, BooleanisFakeOrder:Boolean=false){
            super();
            this._orderNumber = orderNumber;
            this._nvdrFlag = nvdrFlag;
            this._instrumentId = instrumentId;
            this._orderTime = orderTime;
            this._orderSide = orderSide;
            this._price = price;
            this._volume = volume;
            this._matchVolume = matchVolume;
            this._balanceVolume = balanceVolume;
            this._cancelVolume = cancelVolume;
            this._status = status;
            this._priceType = priceType;
            this._canCancel = canCancel;
            this._canChange = canChange;
            this._tradeDate = tradeDate;
            this._sequenceNumber = sequenceNumber;
            this._accountNumber = accountNumber;
            this._orderNumberSeos = orderNumberSeos;
            this._orderNumberFis = orderNumberFis;
            this._validity = validity;
            this._isFakeOrder = this.isFakeOrder;
            this._enterId = enterId;
            this._icebergVolume = icebergVolume;
            this._canChangePriceVolume = canChangePriceVolume;
        }
        public static function createFromFeed(message:OrderStatusEquityFeedMessage):OrderStatusEquity{
            var orderStatusEquity:OrderStatusEquity = new OrderStatusEquity(message.orderNumber, message.nvdrFlag, message.instrumentId, message.orderTimeString, message.orderSide, message.price, message.volume, message.matchVolume, message.balanceVolume, message.cancelVolume, message.status, message.priceType, message.canCancel, message.canChange, message.tradeDate, 0, message.accountNumber, message.orderNumberSeos, message.externalOrderNumber, Validity.NO_TYPE, message.canChangePriceVolume);
            if ((message is OrderStatusEquityFakeFeedMessage)){
                orderStatusEquity._isFakeOrder = true;
            };
            return (orderStatusEquity);
        }

        public function updateFromFeed(message:OrderStatusEquityFeedMessage):void{
            if (this._orderNumber == message.orderNumber){
                this._nvdrFlag = message.nvdrFlag;
                this._price = message.price;
                this._volume = message.volume;
                this._matchVolume = message.matchVolume;
                this._balanceVolume = message.balanceVolume;
                this._cancelVolume = message.cancelVolume;
                this._status = message.status;
                this._canCancel = message.canCancel;
                this._canChange = message.canChange;
                this._isFakeOrder = false;
            };
        }
        public function clone():IOrderStatus{
            return (new OrderStatusEquity(this.orderNumber, this.nvdrFlag, this.instrumentId, this.orderTime, this.orderSide, this.price, this.volume, this.matchVolume, this.balanceVolume, this.cancelVolume, this.status, this.priceType, this.canCancel, this.canChange, this.tradeDate, this.sequenceNumber, this.accountNumber, this.orderNumberSeos, this.orderNumberFis, this.validity, this.canChangePriceVolume));
        }
        public function get orderNumber():String{
            return (this._orderNumber);
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get status():String{
            return (this._status);
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }
        public function get system():System{
            return (System.EQUITY);
        }
        public function get orderTime():String{
            return (this._orderTime);
        }
        public function get time():String{
            return (this._orderTime);
        }
        public function get orderSide():OrderSide{
            return (this._orderSide);
        }
        public function get price():Number{
            return (this._price);
        }
        public function get volume():int{
            return (this._volume);
        }
        public function get matchVolume():int{
            return (this._matchVolume);
        }
        public function get balanceVolume():int{
            return (this._balanceVolume);
        }
        public function get cancelVolume():int{
            return (this._cancelVolume);
        }
        public function get priceType():PriceType{
            return (this._priceType);
        }
        public function get canCancel():Boolean{
            return (this._canCancel);
        }
        public function get canChange():Boolean{
            return (this._canChange);
        }
        public function get tradeDate():String{
            return (this._tradeDate);
        }
        public function get sequenceNumber():int{
            return (this._sequenceNumber);
        }
        public function get orderNumberSeos():String{
            return (this._orderNumberSeos);
        }
        public function get orderNumberFis():String{
            return (this._orderNumberFis);
        }
        public function get validity():Validity{
            return (this._validity);
        }
        public function get nvdrFlag():String{
            return (this._nvdrFlag);
        }
        public function get isFakeOrder():Boolean{
            return (this._isFakeOrder);
        }
        public function get canChangePriceVolume():Boolean{
            return (this._canChangePriceVolume);
        }
        public function get enterId():String{
            return (this._enterId);
        }
        public function get icebergVolume():int{
            return (this._icebergVolume);
        }
        public function toString():String{
            return ((((((((((((((((((((((((((((((((((((((((((((((("[OrderStatusEquity orderNumber=" + this.orderNumber) + " instrumentId=") + this.instrumentId) + " status=") + this.status) + " accountNumber=") + this.accountNumber) + " system=") + this.system) + " orderTime=") + this.orderTime) + " orderSide=") + this.orderSide) + " price=") + this.price) + " volume=") + this.volume) + " matchVolume=") + this.matchVolume) + " balanceVolume=") + this.balanceVolume) + " cancelVolume=") + this.cancelVolume) + " priceType=") + this.priceType) + " canCancel=") + this.canCancel) + " canChange=") + this.canChange) + " tradeDate=") + this.tradeDate) + " sequenceNumber=") + this.sequenceNumber) + " orderNumberSeos=") + this.orderNumberSeos) + " orderNumberFis=") + this.orderNumberFis) + " validity=") + this.validity) + " nvdrFlag=") + this.nvdrFlag) + " isFakeOrder=") + this.isFakeOrder) + " canChangePriceVolume=") + this.canChangePriceVolume) + "]"));
        }

    }
}//package com.settrade.streaming5.message.response.orderstatus 
﻿package com.settrade.streaming5.message.response.orderstatus {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class OrderStatusEquityFailResponseMessage extends ResponseMessage implements IFailMessage {

        protected var _message:String;

        public function OrderStatusEquityFailResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.ORDER_STATUS_EQUITY_FAIL_RESPONSE, System.EQUITY, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response.orderstatus 
﻿package com.settrade.streaming5.message.response.orderstatus {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class OrderStatusByNumberEquityResponseMessage extends ResponseMessage {

        private var _accountNumber:String;
        private var _orderStatus:OrderStatusEquity;

        public function OrderStatusByNumberEquityResponseMessage(requestMessage:RequestMessage, source:Source, accountNumber:String, orderStatus:OrderStatusEquity){
            super(MessageType.ORDER_STATUS_BY_NUMBER_EQUITY_RESPONSE, System.EQUITY, requestMessage, source);
            this._accountNumber = accountNumber;
            this._orderStatus = orderStatus;
        }
        public function get orderStatus():OrderStatusEquity{
            return (this._orderStatus);
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }

    }
}//package com.settrade.streaming5.message.response.orderstatus 
﻿package com.settrade.streaming5.message.response.orderstatus {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.common.*;

    public class OrderStatusClickRegisterToken implements IRegisterable, IUnregisterable {

        protected var _instrumentId:String;
        protected var _account:Account;

        public function OrderStatusClickRegisterToken(instrumentId:String, account:Account){
            super();
            this._instrumentId = instrumentId;
            this._account = account;
        }
        public function equals(obj:OrderStatusClickRegisterToken):Boolean{
            return ((((this.account == obj.account)) && ((this.instrumentId == obj.instrumentId))));
        }
        public function get unregistList():Array{
            return (new Array(this));
        }
        public function get registList():Array{
            return (new Array(this));
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get account():Account{
            return (this._account);
        }

    }
}//package com.settrade.streaming5.message.response.orderstatus 
﻿package com.settrade.streaming5.message.response.orderstatus {
    import com.settrade.streaming5.enumuration.*;

    public class OrderStatusClickEquity implements IOrderStatusClick {

        protected var _priceType:PriceType;
        protected var _price:Number;
        protected var _orderSide:OrderSide;
        protected var _orderList:Array;

        public function OrderStatusClickEquity(price:Number, orderSide:OrderSide, priceType:PriceType=null){
            super();
            this._price = price;
            this._orderSide = orderSide;
            this._orderList = new Array();
            if (priceType == null){
                this._priceType = PriceType.LIMIT;
            } else {
                this._priceType = priceType;
            };
        }
        public function addOrder(orderStatus:OrderStatusEquity):void{
            this._orderList.push(orderStatus);
        }
        public function get price():Number{
            return (this._price);
        }
        public function get orderSide():OrderSide{
            return (this._orderSide);
        }
        public function get orderList():Array{
            return (this._orderList);
        }
        public function get priceType():PriceType{
            return (this._priceType);
        }

    }
}//package com.settrade.streaming5.message.response.orderstatus 
﻿package com.settrade.streaming5.message.response.orderstatus {
    import com.settrade.streaming5.enumuration.*;

    public interface IOrderStatus {

        function get orderNumber():String;
        function get instrumentId():String;
        function get status():String;
        function get system():System;
        function get accountNumber():String;
        function get canCancel():Boolean;
        function get canChangePriceVolume():Boolean;
        function get isFakeOrder():Boolean;
        function get time():String;
        function clone():IOrderStatus;
        function toString():String;

    }
}//package com.settrade.streaming5.message.response.orderstatus 
﻿package com.settrade.streaming5.message.response.orderstatus {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class OrderStatusEquityResponseMessage extends ResponseMessage {

        protected var _orderStatusList:Array;
        protected var _accountNumber:String;

        public function OrderStatusEquityResponseMessage(requestMessage:RequestMessage, source:Source, accountNumber:String){
            super(MessageType.ORDER_STATUS_EQUITY_RESPONSE, System.EQUITY, requestMessage, source);
            this._orderStatusList = new Array();
            this._accountNumber = accountNumber;
        }
        public function addOrderStatus(orderStatus:OrderStatusEquity){
            this._orderStatusList.push(orderStatus);
        }
        public function get orderStatusList():Array{
            var obj:OrderStatusEquity;
            var tmpArray:Array = new Array();
            for each (obj in this._orderStatusList) {
                tmpArray.push(obj);
            };
            return (tmpArray);
        }
        public function set orderStatusList(value:Array):void{
            this._orderStatusList = value;
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }

    }
}//package com.settrade.streaming5.message.response.orderstatus 
﻿package com.settrade.streaming5.message.response.orderstatus {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class OrderStatusByNumberDerivativesResponseMessage extends ResponseMessage {

        private var _accountNumber:String;
        private var _orderStatus:OrderStatusDerivatives;

        public function OrderStatusByNumberDerivativesResponseMessage(requestMessage:RequestMessage, source:Source, accountNumber:String, orderStatus:OrderStatusDerivatives){
            super(MessageType.ORDER_STATUS_BY_NUMBER_DERIVAITVES_RESPONSE, System.DERIV, requestMessage, source);
            this._accountNumber = accountNumber;
            this._orderStatus = orderStatus;
        }
        public function get orderStatus():OrderStatusDerivatives{
            return (this._orderStatus);
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }

    }
}//package com.settrade.streaming5.message.response.orderstatus 
﻿package com.settrade.streaming5.message.response.orderstatus {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class OrderStatusAllDerivativesResponseMessage extends OrderStatusDerivativesResponseMessage {

        public function OrderStatusAllDerivativesResponseMessage(requestMessage:RequestMessage, source:Source, accountNumber:String){
            super(requestMessage, source, accountNumber);
            _type = MessageType.ORDER_STATUS_ALL_DERIVATIVES_RESPONSE;
        }
    }
}//package com.settrade.streaming5.message.response.orderstatus 
﻿package com.settrade.streaming5.message.response.orderstatus {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class OrderStatusByNumberEquityFailResponseMessage extends ResponseMessage implements IFailMessage {

        protected var _message:String;

        public function OrderStatusByNumberEquityFailResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.ORDER_STATUS_EQUITY_FAIL_RESPONSE, System.EQUITY, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response.orderstatus 
﻿package com.settrade.streaming5.message.response.orderstatus {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class OrderStatusDerivativesResponseMessage extends ResponseMessage {

        protected var _orderStatusList:Array;
        protected var _accountNumber:String;

        public function OrderStatusDerivativesResponseMessage(requestMessage:RequestMessage, source:Source, accountNumber:String){
            super(MessageType.ORDER_STATUS_DERIVATIVES_RESPONSE, System.DERIV, requestMessage, source);
            this._accountNumber = accountNumber;
            this._orderStatusList = new Array();
        }
        public function addOrderStatus(orderStatus:OrderStatusDerivatives){
            this._orderStatusList.push(orderStatus);
        }
        public function get orderStatusList():Array{
            var obj:OrderStatusDerivatives;
            var tmpArray:Array = new Array();
            for each (obj in this._orderStatusList) {
                tmpArray.push(obj);
            };
            return (tmpArray);
        }
        public function set orderStatusList(value:Array):void{
            this._orderStatusList = value;
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }

    }
}//package com.settrade.streaming5.message.response.orderstatus 
﻿package com.settrade.streaming5.message.response.orderstatus {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class OrderStatusSearchEquityResponseMessage extends ResponseMessage {

        protected var _orderList:Array;

        public function OrderStatusSearchEquityResponseMessage(requestMessage:RequestMessage, source:Source){
            super(MessageType.ORDER_STATUS_SEARCH_EQUITY_RESPONSE, System.EQUITY, requestMessage, source);
            this._orderList = new Array();
        }
        public function addOrder(orderStatusEquity:OrderStatusEquity):void{
            this._orderList.push(orderStatusEquity);
        }
        public function get orderList():Array{
            return (this._orderList);
        }

    }
}//package com.settrade.streaming5.message.response.orderstatus 
﻿package com.settrade.streaming5.message.response.orderstatus {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class OrderStatusDerivativesFailResponseMessage extends ResponseMessage implements IFailMessage {

        protected var _message:String;

        public function OrderStatusDerivativesFailResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.ORDER_STATUS_DERIVATIVES_FAIL_RESPONSE, System.DERIV, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response.orderstatus 
﻿package com.settrade.streaming5.message.response.orderstatus {
    import com.settrade.streaming5.enumuration.*;

    public class OrderStatusClickDerivatives implements IOrderStatusClick {

        protected var _priceType:DerivativesPriceType;
        protected var _price:Number;
        protected var _orderSide:DerivativesOrderSide;
        protected var _orderList:Array;

        public function OrderStatusClickDerivatives(price:Number, orderSide:DerivativesOrderSide, priceType:DerivativesPriceType=null){
            super();
            this._price = price;
            this._orderSide = orderSide;
            this._orderList = new Array();
            this._priceType = (((priceType == null)) ? DerivativesPriceType.LIMIT : priceType);
        }
        public function addOrder(orderStatus:OrderStatusDerivatives):void{
            this._orderList.push(orderStatus);
        }
        public function get price():Number{
            return (this._price);
        }
        public function get orderSide():DerivativesOrderSide{
            return (this._orderSide);
        }
        public function get orderList():Array{
            return (this._orderList);
        }
        public function get priceType():DerivativesPriceType{
            return (this._priceType);
        }

    }
}//package com.settrade.streaming5.message.response.orderstatus 
﻿package com.settrade.streaming5.message.response.orderstatus {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class OrderStatusByNumberDerivativesFailResponseMessage extends ResponseMessage implements IFailMessage {

        protected var _message:String;

        public function OrderStatusByNumberDerivativesFailResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.ORDER_STATUS_BY_NUMBER_DERIVAITVES_FAIL_RESPONSE, System.DERIV, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response.orderstatus 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class FavouriteResponseMessage extends ResponseMessage {

        protected var _command:String;
        protected var _listName:String;
        protected var _message:String;

        public function FavouriteResponseMessage(requestMessage:RequestMessage, source:Source, command:String, listName:String, message:String){
            super(MessageType.FAVOURITE_RESPONSE, System.REALTIME, requestMessage, source);
            this._command = command;
            this._listName = listName;
            this._message = message;
        }
        public function get command():String{
            return (this._command);
        }
        public function get listName():String{
            return (this._listName);
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class CancelOrderEquityResponseMessage extends ResponseMessage {

        protected var _message:String;

        public function CancelOrderEquityResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.CANCEL_ORDER_EQUITY_RESPONSE, System.EQUITY, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class AccountListMarketRepEquityResponseMessage extends ResponseMessage {

        protected var _isMarketMaker:Boolean;
        protected var _turnoverList:Array;

        public function AccountListMarketRepEquityResponseMessage(requestMessage:RequestMessage, source:Source, isMarketMaker:Boolean){
            super(MessageType.ACCOUNT_LIST_MARKETREP_EQUITY_RESPONSE, System.EQUITY, requestMessage, source);
            this._isMarketMaker = isMarketMaker;
            this._turnoverList = new Array();
        }
        public function addTurnOverList(instrumentList:Array, level:String){
            var turnOverListObject:Object = new Object();
            turnOverListObject.level = level;
            turnOverListObject.list = instrumentList.slice(0);
            this._turnoverList.push(turnOverListObject);
        }
        public function get isMarketMaker():Boolean{
            return (this._isMarketMaker);
        }
        public function get turnoverList():Array{
            return (this._turnoverList);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class BlockTradeWarnResponseMessage extends ResponseMessage {

        protected var _message:String;

        public function BlockTradeWarnResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.BLOCK_TRADE_WARN_RESPONSE, System.DERIV, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;

    public class FeedStringFailedResponseMessage extends ResponseMessage implements IFailMessage {

        protected var _message:String;

        public function FeedStringFailedResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.FEED_STING_FAIL_RESPONSE, System.REALTIME, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response.research {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class ResearchResponseMessage extends ResponseMessage {

        var _researchList:Array;

        public function ResearchResponseMessage(requestMessage:RequestMessage, source:Source, researchList:Array){
            super(MessageType.RESEARCH_RESPONSE, System.RESEARCH, requestMessage, source);
            this._researchList = researchList;
        }
        public function addResearch(research:Research){
            this._researchList.push(research);
        }
        public function get researchList():Array{
            return (this._researchList);
        }

    }
}//package com.settrade.streaming5.message.response.research 
﻿package com.settrade.streaming5.message.response.research {

    public class Research {

        protected var _postDate:String;
        protected var _url:String;
        protected var _title:String;
        protected var _expireDate:String;
        protected var _market:String;
        protected var _category:String;

        public function Research(postDate:String, url:String, title:String, expireDate:String, market:String, category:String){
            super();
            this._postDate = postDate;
            this._url = url;
            this._title = title;
            this._expireDate = expireDate;
            this._market = market;
            this._category = category;
        }
        public function get postDate():String{
            return (this._postDate);
        }
        public function get url():String{
            return (this._url);
        }
        public function get title():String{
            return (this._title);
        }
        public function get expireDate():String{
            return (this._expireDate);
        }
        public function get market():String{
            return (this._market);
        }
        public function get category():String{
            return (this._category);
        }

    }
}//package com.settrade.streaming5.message.response.research 
﻿package com.settrade.streaming5.message.response.fastquote {

    public class StateType {

        protected var _label:String;
        protected var _value:String;

        public function StateType(label:String, value:String){
            super();
            this._label = label;
            this._value = value;
        }
        public function get label():String{
            return (this._label);
        }
        public function set label(value:String):void{
            this._label = value;
        }
        public function get value():String{
            return (this._value);
        }
        public function set value(value:String):void{
            this._value = value;
        }

    }
}//package com.settrade.streaming5.message.response.fastquote 
﻿package com.settrade.streaming5.message.response.fastquote {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class FastQuoteDerivativesResponseMessage extends ResponseMessage {

        protected var _instrumentId:String;
        protected var _stateTypeList:Array;

        public function FastQuoteDerivativesResponseMessage(requestMessage:RequestMessage, source:Source, instrumentId:String){
            super(MessageType.FAST_QUOTE_DERIVATIVES_RESPONSE, System.DERIV, requestMessage, source);
            this._instrumentId = instrumentId;
            this._stateTypeList = new Array();
        }
        public function addStateType(stateType:StateType):void{
            this._stateTypeList.push(stateType);
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get stateTypeList():Array{
            return (this._stateTypeList.slice(0));
        }

    }
}//package com.settrade.streaming5.message.response.fastquote 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.message.request.*;

    public class AccountListEquityResponseMessage extends ResponseMessage {

        protected var _traderNumber:String;
        protected var _accountList:Array;
        protected var _turnoverList:Array;

        public function AccountListEquityResponseMessage(requestMessage:RequestMessage, source:Source, traderNumber:String){
            super(MessageType.ACCOUNT_LIST_EQUITY_RESPONSE, System.EQUITY, requestMessage, source);
            this._accountList = new Array();
            this._traderNumber = traderNumber;
            this._turnoverList = new Array();
        }
        public function addAccount(account:Account){
            this.accountList.push(account);
        }
        public function addTurnOverList(instrumentList:Array, level:String){
            var turnOverListObject:Object = new Object();
            turnOverListObject.level = level;
            turnOverListObject.list = instrumentList.slice(0);
            this._turnoverList.push(turnOverListObject);
        }
        public function get accountList():Array{
            return (this._accountList);
        }
        public function get traderNumber():String{
            return (this._traderNumber);
        }
        public function get turnoverList():Array{
            return (this._turnoverList);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class InstrumentIdValidatorResponseMessage extends ResponseMessage {

        private var _result:Boolean;
        private var _alertMessage:String;

        public function InstrumentIdValidatorResponseMessage(requestMessage:RequestMessage, source:Source, result:Boolean, alertMessage:String){
            super(MessageType.INSTRUMENT_ID_VALIDATOR_RESPONSE, System.REALTIME, requestMessage, source);
            this._result = result;
            this._alertMessage = alertMessage;
        }
        public function get result():Boolean{
            return (this._result);
        }
        public function get alertMessage():String{
            return (this._alertMessage);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response.intradaychart {

    public class PriceValueIntradayChartData {

        protected var _value:Number;
        protected var _volume:Number;

        public function PriceValueIntradayChartData(value:Number, volume:Number){
            super();
            this._value = value;
            this._volume = volume;
        }
        public function get value():Number{
            return (this._value);
        }
        public function get volume():Number{
            return (this._volume);
        }

    }
}//package com.settrade.streaming5.message.response.intradaychart 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;

    public class FailResponseMessage extends ResponseMessage implements IFailMessage {

        protected var _message:String;

        public function FailResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.FAIL_RESPONSE, requestMessage.system, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class AccountNameResponseMessage extends ResponseMessage {

        protected var _accountNumber:String;
        protected var _market:System;
        protected var _englishName:String;
        protected var _thaiName:String;
        protected var _traderName:String;

        public function AccountNameResponseMessage(requestMessage:RequestMessage, source:Source, accountNumber:String, market:System, englishName:String, thaiName:String, traderName:String){
            super(MessageType.ACCOUNT_NAME_RESPONSE, System.REALTIME, requestMessage, source);
            this._accountNumber = accountNumber;
            this._market = market;
            this._englishName = englishName;
            this._thaiName = thaiName;
            this._traderName = traderName;
        }
        public function get thaiName():String{
            return (this._thaiName);
        }
        public function get englishName():String{
            return (this._englishName);
        }
        public function get market():System{
            return (this._market);
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }
        public function get traderName():String{
            return (this._traderName);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response.widgettemplate {
    import com.settrade.streaming5.widget.config.*;

    public class WidgetTemplateObject {

        protected var _id:String;
        protected var _displayName:String;
        protected var _thumbnailPath:String;
        protected var _roleEquity:Array;
        protected var _roleDerivatives:Array;
        protected var _widgetPageConfig:WidgetPageConfig;

        public function WidgetTemplateObject(id:String, displayName:String, thumbnailPath:String, roleEquity:Array, roleDerivatives:Array, widgetPageconfig:WidgetPageConfig){
            super();
            this._id = id;
            this._displayName = displayName;
            this._thumbnailPath = thumbnailPath;
            this._roleEquity = roleEquity;
            this._roleDerivatives = roleDerivatives;
            this._widgetPageConfig = widgetPageconfig;
        }
        public function get id():String{
            return (this._id);
        }
        public function get displayName():String{
            return (this._displayName);
        }
        public function get thumbnailPath():String{
            return (this._thumbnailPath);
        }
        public function get roleEquity():Array{
            return (this._roleEquity);
        }
        public function get roleDerivatives():Array{
            return (this._roleDerivatives);
        }
        public function get widgetPageConfig():WidgetPageConfig{
            return (this._widgetPageConfig);
        }

    }
}//package com.settrade.streaming5.message.response.widgettemplate 
﻿package com.settrade.streaming5.message.response.widgettemplate {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class WidgetTemplateResponseMessage extends ResponseMessage {

        protected var _standardTemplateList:Array;
        protected var _brokerTemplateList:Array;
        protected var _widgetInfoObject:Object;

        public function WidgetTemplateResponseMessage(requestMessage:RequestMessage, source:Source, standardTemplateList:Array, brokerTemplateList:Array, widgetInfoObject:Object){
            super(MessageType.WIDGET_TEMPLATE_RESPONSE, System.REALTIME, requestMessage, source);
            this._standardTemplateList = standardTemplateList;
            this._brokerTemplateList = brokerTemplateList;
            this._widgetInfoObject = widgetInfoObject;
        }
        public function get standardTemplateList():Array{
            return (this._standardTemplateList);
        }
        public function get brokerTemplateList():Array{
            return (this._brokerTemplateList);
        }
        public function get widgetInfoObject():Object{
            return (this._widgetInfoObject);
        }

    }
}//package com.settrade.streaming5.message.response.widgettemplate 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class ChangeOrderEquityResponseMessage extends ResponseMessage {

        protected var _message:String;

        public function ChangeOrderEquityResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.CHANGE_ORDER_EQUITY_RESPONSE, System.EQUITY, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response.portfolio {
    import com.settrade.streaming5.enumuration.*;

    public class PortfolioDerivatives {

        protected var _instrumentId:String;
        protected var _side:DerivativesOrderSide;
        protected var _startVolume:Number;
        protected var _availableVolume:Number;
        protected var _actualVolume:Number;
        protected var _averagePrice:Number;
        protected var _marketPrice:Number;
        protected var _amount:Number;
        protected var _marketValue:Number;
        protected var _unrealizedProfit:Number;
        protected var _percentUnrealizedProfit:Number;
        protected var _realizeProfit:Number;
        protected var _multiplier:Number;
        protected var _optionsValue:Number;
        protected var _unrealizedProfitByAverageCost:Number;
        protected var _percentUnrealizedProfitByAverageCost:Number;
        protected var _realizeProfitByAverageCost:Number;
        protected var _averageCost:Number;
        protected var _amountByAverageCost:Number;
        protected var _priceDigit:int;

        public function PortfolioDerivatives(instrumentId:String, side:DerivativesOrderSide, startVolume:Number, availableVolume:Number, actualVolume:Number, averagePrice:Number, marketPrice:Number, amount:Number, marketValue:Number, unrealizedProfit:Number, percentUnrealizedProfit:Number, realizeProfit:Number, multiplier:Number, optionsValue:Number, unrealizedProfitByAverageCost:Number, percentUnrealizedPrifitByAverageCost:Number, realizeProfitByAverageCost:Number, averageCost:Number, amountByAverageCost:Number, priceDigit:int){
            super();
            this._instrumentId = instrumentId;
            this._side = side;
            this._startVolume = startVolume;
            this._availableVolume = availableVolume;
            this._actualVolume = actualVolume;
            this._averagePrice = averagePrice;
            this._marketPrice = marketPrice;
            this._amount = amount;
            this._marketValue = marketValue;
            this._unrealizedProfit = unrealizedProfit;
            this._percentUnrealizedProfit = percentUnrealizedProfit;
            this._realizeProfit = realizeProfit;
            this._multiplier = multiplier;
            this._optionsValue = optionsValue;
            this._unrealizedProfitByAverageCost = unrealizedProfitByAverageCost;
            this._percentUnrealizedProfitByAverageCost = this.percentUnrealizedProfitByAverageCost;
            this._realizeProfitByAverageCost = realizeProfitByAverageCost;
            this._averageCost = averageCost;
            this._amountByAverageCost = amountByAverageCost;
            this._priceDigit = priceDigit;
        }
        public function clone():PortfolioDerivatives{
            return (new PortfolioDerivatives(this._instrumentId, this._side, this._startVolume, this._availableVolume, this._actualVolume, this._averagePrice, this._marketPrice, this._amount, this._marketValue, this._unrealizedProfit, this._percentUnrealizedProfit, this._realizeProfit, this._multiplier, this._optionsValue, this._unrealizedProfitByAverageCost, this._percentUnrealizedProfitByAverageCost, this._realizeProfitByAverageCost, this._averageCost, this._amountByAverageCost, this._priceDigit));
        }
        public function set instrumentId(instrumentId:String):void{
            this._instrumentId = instrumentId;
        }
        public function set availableVolume(availableVolume:Number):void{
            this._availableVolume = availableVolume;
        }
        public function set marketPrice(marketPrice:Number):void{
            this._marketPrice = marketPrice;
        }
        public function set marketValue(marketValue:Number):void{
            this._marketValue = marketValue;
        }
        public function set amount(amount:Number):void{
            this._amount = amount;
        }
        public function set unrealizedProfit(unrealizedProfit:Number):void{
            this._unrealizedProfit = unrealizedProfit;
        }
        public function set unrealizedProfitByAverageCost(unrealizedProfitByAverageCost:Number):void{
            this._unrealizedProfitByAverageCost = unrealizedProfitByAverageCost;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get orderSide():DerivativesOrderSide{
            return (this._side);
        }
        public function get startVolume():Number{
            return (this._startVolume);
        }
        public function get availableVolume():Number{
            return (this._availableVolume);
        }
        public function get actualVolume():Number{
            return (this._actualVolume);
        }
        public function get marketPrice():Number{
            return (this._marketPrice);
        }
        public function get amount():Number{
            return (this._amount);
        }
        public function get marketValue():Number{
            return (this._marketValue);
        }
        public function get unrealizedProfit():Number{
            return (this._unrealizedProfit);
        }
        public function get percentUnrealizedProfit():Number{
            return (this._percentUnrealizedProfit);
        }
        public function get realizeProfit():Number{
            return (this._realizeProfit);
        }
        public function get multiplier():Number{
            return (this._multiplier);
        }
        public function get optionsValue():Number{
            return (this._optionsValue);
        }
        public function get unrealizedProfitByAverageCost():Number{
            return (this._unrealizedProfitByAverageCost);
        }
        public function get percentUnrealizedProfitByAverageCost():Number{
            return (this._percentUnrealizedProfitByAverageCost);
        }
        public function get realizeProfitByAverageCost():Number{
            return (this._realizeProfitByAverageCost);
        }
        public function get averageCost():Number{
            return (this._averageCost);
        }
        public function get amountByAverageCost():Number{
            return (this._amountByAverageCost);
        }
        public function get priceDigit():int{
            return (this._priceDigit);
        }
        public function get averagePrice():Number{
            return (this._averagePrice);
        }
        public function isTotal():Boolean{
            return ((this._instrumentId == "_TOTAL"));
        }

    }
}//package com.settrade.streaming5.message.response.portfolio 
﻿package com.settrade.streaming5.message.response.portfolio {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class PortfolioDerivativesResponseMessage extends ResponseMessage {

        protected var _portfolioList:Array;
        protected var _accountNumber:String;

        public function PortfolioDerivativesResponseMessage(requestMessage:RequestMessage, source:Source, accountNumber:String){
            super(MessageType.PORTFOLIO_DERIVATIVES_RESPONSE, System.DERIV, requestMessage, source);
            this._portfolioList = new Array();
            this._accountNumber = accountNumber;
        }
        public function addPortfolio(portfolio:PortfolioDerivatives){
            this._portfolioList.push(portfolio);
        }
        public function get portfolioList():Array{
            var obj:PortfolioDerivatives;
            var tmpArray:Array = new Array();
            for each (obj in this._portfolioList) {
                tmpArray.push(obj);
            };
            return (tmpArray);
        }
        public function set portfolioList(value:Array):void{
            this._portfolioList = value;
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }

    }
}//package com.settrade.streaming5.message.response.portfolio 
﻿package com.settrade.streaming5.message.response.portfolio {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class PortfolioByAccountResponseMessage extends ResponseMessage {

        protected var _portfolioList:Array;

        public function PortfolioByAccountResponseMessage(requestMessage:RequestMessage, source:Source){
            super(MessageType.PORTFOLIO_BY_ACCOUNT_RESPONSE, System.ALL_SYSTEM, requestMessage, source);
            this._portfolioList = new Array();
        }
        public function addPortfolio(portfolio:PortfolioByAccount){
            this._portfolioList.push(portfolio);
        }
        public function get portfolioList():Array{
            var obj:PortfolioByAccount;
            var tmpArray:Array = new Array();
            for each (obj in this._portfolioList) {
                tmpArray.push(obj);
            };
            return (tmpArray);
        }

    }
}//package com.settrade.streaming5.message.response.portfolio 
﻿package com.settrade.streaming5.message.response.portfolio {

    public class PortfolioEquity {

        protected var _instrumentId:String;
        protected var _nvdrFlag:String;
        protected var _marketPrice:Number;
        protected var _amount:Number;
        protected var _marketValue:Number;
        protected var _profit:Number;
        protected var _percentProfit:Number;
        protected var _realizeProfit:Number;
        protected var _startVolume:Number;
        protected var _currentVolume:Number;
        protected var _actualVolume:Number;
        protected var _averagePrice:Number;
        protected var _flag:String;
        protected var _portFlag:String;
        protected var _marginRate:Number;
        protected var _liabilities:Number;
        protected var _commissionRate:Number;
        protected var _vatRate:Number;

        public function PortfolioEquity(instrumentId:String, nvdrFlag:String, marketPrice:Number, amount:Number, marketValue:Number, profit:Number, percentProfit:Number, realizeProfit:Number, startVolume:Number, currentVolume:Number, actualVolume:Number, averagePrice:Number, flag:String, portFlag:String, marginRate:Number, liabilities:Number, commissionRate:Number, vatRate:Number){
            super();
            this._instrumentId = instrumentId;
            this._nvdrFlag = nvdrFlag;
            this._marketPrice = marketPrice;
            this._amount = amount;
            this._marketValue = marketValue;
            this._profit = profit;
            this._percentProfit = percentProfit;
            this._realizeProfit = realizeProfit;
            this._startVolume = startVolume;
            this._currentVolume = currentVolume;
            this._actualVolume = actualVolume;
            this._averagePrice = averagePrice;
            this._flag = flag;
            this._portFlag = portFlag;
            this._marginRate = marginRate;
            this._liabilities = liabilities;
            this._commissionRate = commissionRate;
            this._vatRate = vatRate;
        }
        public function clone():PortfolioEquity{
            return (new PortfolioEquity(this._instrumentId, this._nvdrFlag, this._marketPrice, this._amount, this._marketValue, this._profit, this._percentProfit, this._realizeProfit, this._startVolume, this._currentVolume, this._actualVolume, this._averagePrice, this._flag, this._portFlag, this._marginRate, this._liabilities, this._commissionRate, this._vatRate));
        }
        public function set instrumentId(instrumentId:String):void{
            this._instrumentId = instrumentId;
        }
        public function set currentVolume(currentVolume:Number):void{
            this._currentVolume = currentVolume;
        }
        public function set marketPrice(marketPrice:Number):void{
            this._marketPrice = marketPrice;
        }
        public function set marketValue(marketValue:Number):void{
            this._marketValue = marketValue;
        }
        public function set amount(amount:Number):void{
            this._amount = amount;
        }
        public function set profit(profit:Number):void{
            this._profit = profit;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get nvdrFlag():String{
            return (this._nvdrFlag);
        }
        public function get marketPrice():Number{
            return (this._marketPrice);
        }
        public function get amount():Number{
            return (this._amount);
        }
        public function get marketValue():Number{
            return (this._marketValue);
        }
        public function get unrealizedProfit():Number{
            return (this._profit);
        }
        public function get percentUnrealizedProfit():Number{
            return (this._percentProfit);
        }
        public function get realizeProfit():Number{
            return (this._realizeProfit);
        }
        public function get startVolume():Number{
            return (this._startVolume);
        }
        public function get currentVolume():Number{
            return (this._currentVolume);
        }
        public function get actualVolume():Number{
            return (this._actualVolume);
        }
        public function get averagePrice():Number{
            return (this._averagePrice);
        }
        public function get marginRate():Number{
            return (this._marginRate);
        }
        public function get liabilities():Number{
            return (this._liabilities);
        }
        public function get flag():String{
            return (this._flag);
        }
        public function get portFlag():String{
            return (this._portFlag);
        }
        public function get commissionRate():Number{
            return (this._commissionRate);
        }
        public function set commissionRate(value:Number):void{
            this._commissionRate = value;
        }
        public function get vatRate():Number{
            return (this._vatRate);
        }
        public function set vatRate(value:Number):void{
            this._vatRate = value;
        }
        public function isTotal():Boolean{
            return ((this._instrumentId == "_TOTAL"));
        }

    }
}//package com.settrade.streaming5.message.response.portfolio 
﻿package com.settrade.streaming5.message.response.portfolio {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class PortfolioEquityResponseMessage extends ResponseMessage {

        protected var _accountNumber:String;
        protected var _portfolioList:Array;

        public function PortfolioEquityResponseMessage(requestMessage:RequestMessage, source:Source, accountNumber:String){
            super(MessageType.PORTFOLIO_EQUITY_RESPONSE, System.EQUITY, requestMessage, source);
            this._accountNumber = accountNumber;
            this._portfolioList = new Array();
        }
        public function addPortfolio(portfolio:PortfolioEquity){
            this._portfolioList.push(portfolio);
        }
        public function get portfolioList():Array{
            var obj:PortfolioEquity;
            var tmpArray:Array = new Array();
            for each (obj in this._portfolioList) {
                tmpArray.push(obj);
            };
            return (tmpArray);
        }
        public function set portfolioList(value:Array):void{
            this._portfolioList = value;
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }

    }
}//package com.settrade.streaming5.message.response.portfolio 
﻿package com.settrade.streaming5.message.response.portfolio {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class PortfolioEquityFailResponseMessage extends ResponseMessage implements IFailMessage {

        protected var _message:String;

        public function PortfolioEquityFailResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.PORTFOLIO_EQUITY_FAIL_RESPONSE, System.EQUITY, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response.portfolio 
﻿package com.settrade.streaming5.message.response.portfolio {
    import com.settrade.streaming5.common.*;

    public class PortfolioByAccount {

        protected var _account:Account;
        protected var _availlableVolume:Number;
        protected var _amount:Number;
        protected var _marketValue:Number;
        protected var _unrealizedProfit:Number;
        protected var _percentUnrealizedProfit:Number;
        protected var _realizeProfit:Number;

        public function PortfolioByAccount(account:Account, availlableVolume:Number, amount:Number, marketValue:Number, unrealizedProfit:Number, percentUnrealizedProfit:Number, realizeProfit:Number){
            super();
            this._account = account;
            this._availlableVolume = availlableVolume;
            this._amount = amount;
            this._marketValue = marketValue;
            this._unrealizedProfit = unrealizedProfit;
            this._percentUnrealizedProfit = percentUnrealizedProfit;
            this._realizeProfit = realizeProfit;
        }
        public function get account():Account{
            return (this._account);
        }
        public function get availlableVolume():Number{
            return (this._availlableVolume);
        }
        public function get amount():Number{
            return (this._amount);
        }
        public function get marketValue():Number{
            return (this._marketValue);
        }
        public function get unrealizedProfit():Number{
            return (this._unrealizedProfit);
        }
        public function get percentUnrealizedProfit():Number{
            return (this._percentUnrealizedProfit);
        }
        public function get realizeProfit():Number{
            return (this._realizeProfit);
        }

    }
}//package com.settrade.streaming5.message.response.portfolio 
﻿package com.settrade.streaming5.message.response.portfolio {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class PortfolioDerivativesFailResponseMessage extends ResponseMessage implements IFailMessage {

        protected var _message:String;

        public function PortfolioDerivativesFailResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.PORTFOLIO_DERIVATIVES_FAIL_RESPONSE, System.DERIV, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response.portfolio 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;

    public class ResponseMessage extends Message {

        protected var _requestMessage:RequestMessage;
        protected var _source:Source;

        public function ResponseMessage(type:MessageType, system:System, requestMessage:RequestMessage, source:Source){
            super(type, MessageSide.RESPONSE, system);
            this._requestMessage = requestMessage;
            this._source = source;
        }
        public function get requestMessage():RequestMessage{
            return (this._requestMessage);
        }
        public function get requestId():Number{
            if (this.requestMessage != null){
                return (this.requestMessage.id);
            };
            return (NaN);
        }
        public function get source():Source{
            return (this._source);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class DataProviderJsonResponseMessage extends ResponseMessage {

        var _alertMessage:String;

        public function DataProviderJsonResponseMessage(type:MessageType, system:System, requestMessage:RequestMessage, source:Source){
            super(type, system, requestMessage, source);
            this._alertMessage = "";
        }
        public function get alertMessage():String{
            return (this._alertMessage);
        }
        public function set alertMessage(value:String):void{
            this._alertMessage = value;
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;

    public class PlaceOrderEquityFailResponseMessage extends ResponseMessage implements IFailMessage {

        protected var _message:String;

        public function PlaceOrderEquityFailResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.PLACE_ORDER_EQUITY_FAIL_RESPONSE, System.EQUITY, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class ChangeOrderDerivativesResponseMessage extends ResponseMessage {

        protected var _message:String;

        public function ChangeOrderDerivativesResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.CHANGE_ORDER_DERIVATIVES_RESPONSE, System.DERIV, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class GenerateKeyResponse extends ResponseMessage {

        protected var _password:String;
        protected var _host:String;
        protected var _port:int;

        public function GenerateKeyResponse(requestMessage:RequestMessage, password:String, host:String, port:int){
            super(MessageType.GENERATE_KEY_RESPONSE, System.REALTIME, requestMessage, Source.HTTP_RESPONSE);
            this._password = password;
            this._host = host;
            this._port = port;
        }
        public function get password():String{
            return (this._password);
        }
        public function get host():String{
            return (this._host);
        }
        public function get port():int{
            return (this._port);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response.accountInfo {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class AccountInfoLongEquityResponseMessage extends ResponseMessage {

        protected var _accountNumber:String;
        protected var _customerName:String;
        protected var _traderName:String;
        protected var _orderType:OrderType;
        protected var _isCreditBalance:Boolean;

        public function AccountInfoLongEquityResponseMessage(requestMessage:RequestMessage, source:Source, accountNumber:String, isCreditBalance:Boolean, customerName:String, traderName:String){
            super(MessageType.ACCOUNT_INFO_LONG_EQUITY_RESPONSE, System.EQUITY, requestMessage, source);
            this._accountNumber = accountNumber;
            this._orderType = OrderType.SEOS;
            this._customerName = customerName;
            this._traderName = traderName;
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }
        public function get orderType():OrderType{
            return (this._orderType);
        }
        public function get customerName():String{
            return (this._customerName);
        }
        public function get traderName():String{
            return (this._traderName);
        }

    }
}//package com.settrade.streaming5.message.response.accountInfo 
﻿package com.settrade.streaming5.message.response.accountInfo {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class AccountInfoLongEquityCashResponseMessage extends AccountInfoLongEquityResponseMessage {

        var _creditLimit:String;
        var _initialCreditLimit:String;
        var _lineAvaliable:String;
        var _initialLineAvailable:String;
        var _cashBalance:String;
        var _initialCashBalance:String;
        var _pendingLine:String;

        public function AccountInfoLongEquityCashResponseMessage(requestMessage:RequestMessage, source:Source, accountNumber:String, customerName:String, traderName:String, creditLimit:String, initialCreditLimit:String, lineAvaliable:String, initialLineAvailable:String, cashBalance:String, initialCashBalance:String, pendingLine:String="N/A"){
            super(requestMessage, source, accountNumber, true, customerName, traderName);
            this._creditLimit = creditLimit;
            this._initialCreditLimit = initialCreditLimit;
            this._lineAvaliable = lineAvaliable;
            this._initialLineAvailable = initialLineAvailable;
            this._cashBalance = cashBalance;
            this._initialCashBalance = initialCashBalance;
            this._pendingLine = pendingLine;
        }
        public function get creditLimit():String{
            return (this._creditLimit);
        }
        public function get initialCreditLimit():String{
            return (this._initialCreditLimit);
        }
        public function get lineAvaliable():String{
            return (this._lineAvaliable);
        }
        public function get initialLineAvailable():String{
            return (this._initialLineAvailable);
        }
        public function get cashBalance():String{
            return (this._cashBalance);
        }
        public function get initialCashBalance():String{
            return (this._initialCashBalance);
        }
        public function get pendingLine():String{
            return (this._pendingLine);
        }

    }
}//package com.settrade.streaming5.message.response.accountInfo 
﻿package com.settrade.streaming5.message.response.accountInfo {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class AccountInfoLongEquityCreditResponseMessage extends AccountInfoLongEquityResponseMessage {

        var _lineAvailable:String;
        var _excessEquity:String;
        var _equityBalance:String;
        var _creditLimit:String;
        var _cashBalance:String;
        var _asset:String;
        var _availableCashBalance:String;
        var _actualCashBalance:String;
        var _liabilities:String;
        var _availableMarginLoan:String;
        var _actualMarginLoan:String;
        var _collateral:String;
        var _marginIM:String;
        var _marginCM:String;
        var _marginFM:String;
        var _imAdjust:String;
        var _cmAdjust:String;
        var _fmAdjust:String;
        var _mtmRealtime:String;
        var _mr:String;
        var _buyMr:String;
        var _lineAvail50:String;
        var _lineAvail60:String;
        var _lineAvail70:String;
        var _lineAvail80:String;
        var _callMargin:String;
        var _callAmount:String;
        var _valueForceSale:String;
        var _forceMargin:String;
        var _forceAmount:String;
        var _percentMM:String;

        public function AccountInfoLongEquityCreditResponseMessage(requestMessage:RequestMessage, source:Source, accountNumber:String, customerName:String, traderName:String, lineAvailable:String, excessEquity:String, equityBalance:String, creditLimit:String, cashBalance:String, asset:String, availableCashBalance:String, actualCashBalance:String, liabilities:String, availableMarginLoan:String, actualMarginLoan:String, collateral:String, marginIM:String, marginCM:String, marginFM:String, imAdjust:String, cmAdjust:String, fmAdjust:String, mtmRealtime:String, mr:String, buyMr:String, lineAvail50:String, lineAvail60:String, lineAvail70:String, lineAvail80:String, callMargin:String, callAmount:String, valueForceSale:String, forceMargin:String, forceAmount:String, percentMM:String){
            super(requestMessage, source, accountNumber, true, customerName, traderName);
            this._lineAvailable = lineAvailable;
            this._excessEquity = excessEquity;
            this._equityBalance = equityBalance;
            this._creditLimit = creditLimit;
            this._cashBalance = cashBalance;
            this._asset = asset;
            this._availableCashBalance = availableCashBalance;
            this._actualCashBalance = actualCashBalance;
            this._liabilities = liabilities;
            this._availableMarginLoan = availableMarginLoan;
            this._actualMarginLoan = actualMarginLoan;
            this._collateral = collateral;
            this._marginIM = marginIM;
            this._marginCM = marginCM;
            this._marginFM = marginFM;
            this._imAdjust = imAdjust;
            this._cmAdjust = cmAdjust;
            this._fmAdjust = fmAdjust;
            this._mtmRealtime = mtmRealtime;
            this._mr = mr;
            this._buyMr = buyMr;
            this._lineAvail50 = lineAvail50;
            this._lineAvail60 = lineAvail60;
            this._lineAvail70 = lineAvail70;
            this._lineAvail80 = lineAvail80;
            this._callMargin = callMargin;
            this._callAmount = callAmount;
            this._valueForceSale = valueForceSale;
            this._forceMargin = forceMargin;
            this._forceAmount = forceAmount;
            this._percentMM = percentMM;
        }
        public function get lineAvailable():String{
            return (this._lineAvailable);
        }
        public function get excessEquity():String{
            return (this._excessEquity);
        }
        public function get equityBalance():String{
            return (this._equityBalance);
        }
        public function get creditLimit():String{
            return (this._creditLimit);
        }
        public function get cashBalance():String{
            return (this._cashBalance);
        }
        public function get asset():String{
            return (this._asset);
        }
        public function get availableCashBalance():String{
            return (this._availableCashBalance);
        }
        public function get actualCashBalance():String{
            return (this._actualCashBalance);
        }
        public function get liabilities():String{
            return (this._liabilities);
        }
        public function get availableMarginLoan():String{
            return (this._availableMarginLoan);
        }
        public function get actualMarginLoan():String{
            return (this._actualMarginLoan);
        }
        public function get collateral():String{
            return (this._collateral);
        }
        public function get marginIM():String{
            return (this._marginIM);
        }
        public function get marginCM():String{
            return (this._marginCM);
        }
        public function get marginFM():String{
            return (this._marginFM);
        }
        public function get imAdjust():String{
            return (this._imAdjust);
        }
        public function get cmAdjust():String{
            return (this._cmAdjust);
        }
        public function get fmAdjust():String{
            return (this._fmAdjust);
        }
        public function get mtmRealtime():String{
            return (this._mtmRealtime);
        }
        public function get mr():String{
            return (this._mr);
        }
        public function get buyMr():String{
            return (this._buyMr);
        }
        public function get lineAvail50():String{
            return (this._lineAvail50);
        }
        public function get lineAvail60():String{
            return (this._lineAvail60);
        }
        public function get lineAvail70():String{
            return (this._lineAvail70);
        }
        public function get lineAvail80():String{
            return (this._lineAvail80);
        }
        public function get callMargin():String{
            return (this._callMargin);
        }
        public function get callAmount():String{
            return (this._callAmount);
        }
        public function get valueForceSale():String{
            return (this._valueForceSale);
        }
        public function get forceMargin():String{
            return (this._forceMargin);
        }
        public function get forceAmount():String{
            return (this._forceAmount);
        }
        public function get percentMM():String{
            return (this._percentMM);
        }

    }
}//package com.settrade.streaming5.message.response.accountInfo 
﻿package com.settrade.streaming5.message.response.accountInfo {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class AccountInfoDerivativesFailResponseMessage extends ResponseMessage implements IFailMessage {

        protected var _message:String;

        public function AccountInfoDerivativesFailResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.ACCOUNT_INFO_DERIVATIVES_FAIL_RESPONSE, System.DERIV, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response.accountInfo 
﻿package com.settrade.streaming5.message.response.accountInfo {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class AccountInfoEquityCashResponseMessage extends AccountInfoEquityResponseMessage {

        protected var _credit:Number;
        protected var _line:Number;
        protected var _cash:Number;
        protected var _pendingLine:Number;

        public function AccountInfoEquityCashResponseMessage(requestMessage:RequestMessage, source:Source, accountNumber:String, orderType:OrderType, credit:Number, line:Number, cash:Number, pendingLine:Number=NaN){
            super(requestMessage, source, accountNumber, orderType);
            this._credit = credit;
            this._line = line;
            this._cash = cash;
            this._pendingLine = pendingLine;
        }
        public function get credit():Number{
            return (this._credit);
        }
        public function get line():Number{
            return (this._line);
        }
        public function get cash():Number{
            return (this._cash);
        }
        public function get pendingLine():Number{
            return (this._pendingLine);
        }

    }
}//package com.settrade.streaming5.message.response.accountInfo 
﻿package com.settrade.streaming5.message.response.accountInfo {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class AccountInfoEquityCreditDgwResponseMessage extends AccountInfoEquityResponseMessage {

        protected var _credit:Number;
        protected var _ee:Number;

        public function AccountInfoEquityCreditDgwResponseMessage(requestMessage:RequestMessage, source:Source, accountNumber:String, orderType:OrderType, credit:Number, ee:Number){
            super(requestMessage, source, accountNumber, orderType);
            this._credit = credit;
            this._ee = ee;
        }
        public function get credit():Number{
            return (this._credit);
        }
        public function get ee():Number{
            return (this._ee);
        }

    }
}//package com.settrade.streaming5.message.response.accountInfo 
﻿package com.settrade.streaming5.message.response.accountInfo {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class AccountInfoEquityCreditResponseMessage extends AccountInfoEquityResponseMessage {

        protected var _credit:Number;
        protected var _line:Number;
        protected var _ee:Number;
        protected var _percentMM:Number;

        public function AccountInfoEquityCreditResponseMessage(requestMessage:RequestMessage, source:Source, accountNumber:String, orderType:OrderType, credit:Number, line:Number, ee:Number, percentMM:Number){
            super(requestMessage, source, accountNumber, orderType);
            this._credit = credit;
            this._line = line;
            this._ee = ee;
            this._percentMM = percentMM;
        }
        public function get credit():Number{
            return (this._credit);
        }
        public function get line():Number{
            return (this._line);
        }
        public function get ee():Number{
            return (this._ee);
        }
        public function get percentMM():Number{
            return (this._percentMM);
        }

    }
}//package com.settrade.streaming5.message.response.accountInfo 
﻿package com.settrade.streaming5.message.response.accountInfo {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class AccountInfoDerivativesResponseMessage extends ResponseMessage {

        protected var _accountNumber:String;
        protected var _creditLine:Number;
        protected var _excessEquity:Number;
        protected var _cashBalance:Number;
        protected var _englishName:String;
        protected var _totalMR:Number;
        protected var _totalMM:Number;
        protected var _callForceFlag:String;
        protected var _callForceMargin:Number;

        public function AccountInfoDerivativesResponseMessage(requestMessage:RequestMessage, source:Source, accountNumber:String, creditLine:Number, excessEquity:Number, cashBalance:Number, englishName:String, totalMR:Number, totalMM:Number, callForceFlag:String, callForceMargin:Number){
            super(MessageType.ACCOUNT_INFO_DERIVATIVES_RESPONSE, System.DERIV, requestMessage, source);
            this._accountNumber = accountNumber;
            this._creditLine = creditLine;
            this._excessEquity = excessEquity;
            this._cashBalance = cashBalance;
            this._englishName = englishName;
            this._totalMR = totalMR;
            this._totalMM = totalMM;
            this._callForceFlag = callForceFlag;
            this._callForceMargin = callForceMargin;
        }
        public function get creditLine():Number{
            return (this._creditLine);
        }
        public function get excessEquity():Number{
            return (this._excessEquity);
        }
        public function get cashBalance():Number{
            return (this._cashBalance);
        }
        public function get englishName():String{
            return (this._englishName);
        }
        public function get totalMR():Number{
            return (this._totalMR);
        }
        public function get callForceFlag():String{
            return (this._callForceFlag);
        }
        public function get callForceMargin():Number{
            return (this._callForceMargin);
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }
        public function get totalMM():Number{
            return (this._totalMM);
        }

    }
}//package com.settrade.streaming5.message.response.accountInfo 
﻿package com.settrade.streaming5.message.response.accountInfo {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class AccountInfoEquityResponseMessage extends ResponseMessage {

        protected var _accountNumber:String;
        protected var _orderType:OrderType;

        public function AccountInfoEquityResponseMessage(requestMessage:RequestMessage, source:Source, accountNumber:String, orderType:OrderType){
            super(MessageType.ACCOUNT_INFO_EQUITY_RESPONSE, System.EQUITY, requestMessage, source);
            this._accountNumber = accountNumber;
            this._orderType = orderType;
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }
        public function get orderType():OrderType{
            return (this._orderType);
        }

    }
}//package com.settrade.streaming5.message.response.accountInfo 
﻿package com.settrade.streaming5.message.response.accountInfo {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class AccountInfoEquityCashDgwResponseMessage extends AccountInfoEquityResponseMessage {

        protected var _credit:Number;
        protected var _purchasingPower:Number;
        protected var _cash:Number;
        protected var _hasCash:Boolean;
        protected var _pendingLine:Number;

        public function AccountInfoEquityCashDgwResponseMessage(requestMessage:RequestMessage, source:Source, accountNumber:String, orderType:OrderType, credit:Number, purchasingPower:Number, cash:Number, hasCash:Boolean, pendingLine:Number=NaN){
            super(requestMessage, source, accountNumber, orderType);
            this._credit = credit;
            this._purchasingPower = purchasingPower;
            this._cash = cash;
            this._hasCash = hasCash;
            this._pendingLine = pendingLine;
        }
        public function get credit():Number{
            return (this._credit);
        }
        public function get purchasingPower():Number{
            return (this._purchasingPower);
        }
        public function get cash():Number{
            return (this._cash);
        }
        public function get hasCash():Boolean{
            return (this._hasCash);
        }
        public function get pendingLine():Number{
            return (this._pendingLine);
        }

    }
}//package com.settrade.streaming5.message.response.accountInfo 
﻿package com.settrade.streaming5.message.response.accountInfo {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class AccountInfoLongDerivativesResponseMessage extends ResponseMessage {

        var _accountNo:String;
        var _customerName:String;
        var _traderName:String;
        var _lineAvailable:String;
        var _excessEquity:String;
        var _equityBalance:String;
        var _creditLimit:String;
        var _cashBalance:String;
        var _liquidationValue:String;
        var _foreignCollateral:String;
        var _nonCashBalance:String;
        var _initialMR:String;
        var _initialCashBalance:String;
        var _initialEquity:String;
        var _commissionConfirmOrder:String;
        var _commissionPendingOrder:String;
        var _commissionTotalOrder:String;
        var _canOpen:String;
        var _canClose:String;
        var _closingMethod:String;
        var _calMTM:String;
        var _futuresMTM:String;
        var _optionsMTM:String;
        var _receivePayment:String;
        var _receivePaymentAfterComm:String;
        var _callForceFlag:String;
        var _initCallForceFlag:String;
        var _totalUnrealizedPL:String;
        var _depositWithdrawal:String;
        var _callForceMargin:String;
        var _initCallForceMargin:String;
        var _marginMethod:String;
        var _virtualPortOutrightMR:String;
        var _virtualPortOutrightMM:String;
        var _virtualPortOutrightFM:String;
        var _virtualPortSpreadMR:String;
        var _virtualPortSpreadMM:String;
        var _virtualPortSpreadFM:String;
        var _pendingOrderOutrightMR:String;
        var _pendingOrderOutrightMM:String;
        var _pendingOrderOutrightFM:String;
        var _pendingSpreadMR:String;
        var _pendingSpreadMM:String;
        var _pendingSpreadFM:String;
        var _totalMR:String;
        var _totalMM:String;
        var _totalFM:String;

        public function AccountInfoLongDerivativesResponseMessage(requestMessage:RequestMessage, source:Source, accountNo:String, customerName:String, traderName:String, lineAvailable:String, excessEquity:String, equityBalance:String, creditLimit:String, cashBalance:String, liquidationValue:String, foreignCollateral:String, nonCashBalance:String, initialMR:String, initialCashBalance:String, initialEquity:String, commissionConfirmOrder:String, commissionPendingOrder:String, commissionTotalOrder:String, canOpen:String, canClose:String, closingMethod:String, calMTM:String, futuresMTM:String, optionsMTM:String, receivePayment:String, receivePaymentAfterComm:String, callForceFlag:String, initCallForceFlag:String, totalUnrealizedPL:String, depositWithdrawal:String, callForceMargin:String, initCallForceMargin:String, marginMethod:String, virtualPortOutrightMR:String, virtualPortOutrightMM:String, virtualPortOutrightFM:String, virtualPortSpreadMR:String, virtualPortSpreadMM:String, virtualPortSpreadFM:String, pendingOrderOutrightMR:String, pendingOrderOutrightMM:String, pendingOrderOutrightFM:String, pendingSpreadMR:String, pendingSpreadMM:String, pendingSpreadFM:String, totalMR:String, totalMM:String, totalFM:String){
            super(MessageType.ACCOUNT_INFO_LONG_DERIVATIVES_RESPONSE, System.DERIV, requestMessage, source);
            this._accountNo = accountNo;
            this._customerName = customerName;
            this._traderName = traderName;
            this._lineAvailable = lineAvailable;
            this._excessEquity = excessEquity;
            this._equityBalance = equityBalance;
            this._creditLimit = creditLimit;
            this._cashBalance = cashBalance;
            this._liquidationValue = liquidationValue;
            this._foreignCollateral = foreignCollateral;
            this._nonCashBalance = nonCashBalance;
            this._initialMR = initialMR;
            this._initialCashBalance = initialCashBalance;
            this._initialEquity = initialEquity;
            this._commissionConfirmOrder = commissionConfirmOrder;
            this._commissionPendingOrder = commissionPendingOrder;
            this._commissionTotalOrder = commissionTotalOrder;
            this._canOpen = canOpen;
            this._canClose = canClose;
            this._closingMethod = closingMethod;
            this._calMTM = calMTM;
            this._futuresMTM = futuresMTM;
            this._optionsMTM = optionsMTM;
            this._receivePayment = receivePayment;
            this._receivePaymentAfterComm = receivePaymentAfterComm;
            this._callForceFlag = callForceFlag;
            this._initCallForceFlag = initCallForceFlag;
            this._totalUnrealizedPL = totalUnrealizedPL;
            this._depositWithdrawal = depositWithdrawal;
            this._callForceMargin = callForceMargin;
            this._initCallForceMargin = initCallForceMargin;
            this._marginMethod = marginMethod;
            this._virtualPortOutrightMR = virtualPortOutrightMR;
            this._virtualPortOutrightMM = virtualPortOutrightMM;
            this._virtualPortOutrightFM = virtualPortOutrightFM;
            this._virtualPortSpreadMR = virtualPortSpreadMR;
            this._virtualPortSpreadMM = virtualPortSpreadMM;
            this._virtualPortSpreadFM = virtualPortSpreadFM;
            this._pendingOrderOutrightMR = pendingOrderOutrightMR;
            this._pendingOrderOutrightMM = pendingOrderOutrightMM;
            this._pendingOrderOutrightFM = pendingOrderOutrightFM;
            this._pendingSpreadMR = pendingSpreadMR;
            this._pendingSpreadMM = pendingSpreadMM;
            this._pendingSpreadFM = pendingSpreadFM;
            this._totalMR = totalMR;
            this._totalMM = totalMM;
            this._totalFM = totalFM;
        }
        public function get accountNo():String{
            return (this._accountNo);
        }
        public function get customerName():String{
            return (this._customerName);
        }
        public function get traderName():String{
            return (this._traderName);
        }
        public function get lineAvailable():String{
            return (this._lineAvailable);
        }
        public function get excessEquity():String{
            return (this._excessEquity);
        }
        public function get equityBalance():String{
            return (this._equityBalance);
        }
        public function get creditLimit():String{
            return (this._creditLimit);
        }
        public function get cashBalance():String{
            return (this._cashBalance);
        }
        public function get liquidationValue():String{
            return (this._liquidationValue);
        }
        public function get foreignCollateral():String{
            return (this._foreignCollateral);
        }
        public function get nonCashBalance():String{
            return (this._nonCashBalance);
        }
        public function get initialMR():String{
            return (this._initialMR);
        }
        public function get initialCashBalance():String{
            return (this._initialCashBalance);
        }
        public function get initialEquity():String{
            return (this._initialEquity);
        }
        public function get commissionConfirmOrder():String{
            return (this._commissionConfirmOrder);
        }
        public function get commissionPendingOrder():String{
            return (this._commissionPendingOrder);
        }
        public function get commissionTotalOrder():String{
            return (this._commissionTotalOrder);
        }
        public function get canOpen():String{
            return (this._canOpen);
        }
        public function get canClose():String{
            return (this._canClose);
        }
        public function get closingMethod():String{
            return (this._closingMethod);
        }
        public function get calMTM():String{
            return (this._calMTM);
        }
        public function get futuresMTM():String{
            return (this._futuresMTM);
        }
        public function get optionsMTM():String{
            return (this._optionsMTM);
        }
        public function get receivePayment():String{
            return (this._receivePayment);
        }
        public function get receivePaymentAfterComm():String{
            return (this._receivePaymentAfterComm);
        }
        public function get callForceFlag():String{
            return (this._callForceFlag);
        }
        public function get initCallForceFlag():String{
            return (this._initCallForceFlag);
        }
        public function get totalUnrealizedPL():String{
            return (this._totalUnrealizedPL);
        }
        public function get depositWithdrawal():String{
            return (this._depositWithdrawal);
        }
        public function get callForceMargin():String{
            return (this._callForceMargin);
        }
        public function get initCallForceMargin():String{
            return (this._initCallForceMargin);
        }
        public function get marginMethod():String{
            return (this._marginMethod);
        }
        public function get virtualPortOutrightMR():String{
            return (this._virtualPortOutrightMR);
        }
        public function get virtualPortOutrightMM():String{
            return (this._virtualPortOutrightMM);
        }
        public function get virtualPortOutrightFM():String{
            return (this._virtualPortOutrightFM);
        }
        public function get virtualPortSpreadMR():String{
            return (this._virtualPortSpreadMR);
        }
        public function get virtualPortSpreadMM():String{
            return (this._virtualPortSpreadMM);
        }
        public function get virtualPortSpreadFM():String{
            return (this._virtualPortSpreadFM);
        }
        public function get pendingOrderOutrightMR():String{
            return (this._pendingOrderOutrightMR);
        }
        public function get pendingOrderOutrightMM():String{
            return (this._pendingOrderOutrightMM);
        }
        public function get pendingOrderOutrightFM():String{
            return (this._pendingOrderOutrightFM);
        }
        public function get pendingSpreadMR():String{
            return (this._pendingSpreadMR);
        }
        public function get pendingSpreadMM():String{
            return (this._pendingSpreadMM);
        }
        public function get pendingSpreadFM():String{
            return (this._pendingSpreadFM);
        }
        public function get totalMR():String{
            return (this._totalMR);
        }
        public function get totalMM():String{
            return (this._totalMM);
        }
        public function get totalFM():String{
            return (this._totalFM);
        }

    }
}//package com.settrade.streaming5.message.response.accountInfo 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class CancelOrderDerivativesResponseMessage extends ResponseMessage {

        protected var _message:String;

        public function CancelOrderDerivativesResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.CANCEL_ORDER_DERIVATIVES_RESPONSE, System.EQUITY, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class AccountListHierachyDerivativeResponseMessage extends ResponseMessage {

        protected var _isEnableHierarchy:Boolean;
        protected var _accountNumberList:Array;

        public function AccountListHierachyDerivativeResponseMessage(requestMessage:RequestMessage, source:Source, isEnableHierarchy:Boolean, accountNumberList:Array){
            super(MessageType.ACCOUNT_LIST_HIERACHY_DERIVATIVES_RESPONSE, System.DERIV, requestMessage, source);
            this._isEnableHierarchy = isEnableHierarchy;
            this._accountNumberList = accountNumberList;
        }
        public function get isEnableHierarchy():Boolean{
            return (this._isEnableHierarchy);
        }
        public function get accountNumberList():Array{
            return (this._accountNumberList.slice(0));
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class StubResponseMessage extends ResponseMessage {

        protected var _data:String;

        public function StubResponseMessage(system:System, requestMessage:RequestMessage, source:Source, data:String){
            super(MessageType.STUB_RESPONSE, system, requestMessage, source);
            this._data = data;
        }
        public function get data():String{
            return (this._data);
        }
        public function set data(value:String):void{
            this._data = value;
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class PlaceOrderDerivativesResponseMessage extends ResponseMessage {

        protected var _orderNo:String;
        protected var _message:String;

        public function PlaceOrderDerivativesResponseMessage(requestMessage:RequestMessage, source:Source, message:String, orderNo:String){
            super(MessageType.PLACE_ORDER_DERIVATIVES_RESPONSE, System.DERIV, requestMessage, source);
            this._orderNo = orderNo;
            this._message = message;
        }
        public function get orderNo():String{
            return (this._orderNo);
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;

    public class ChangeOrderDerivativesFailResponseMessage extends ResponseMessage implements IFailMessage {

        protected var _message:String;

        public function ChangeOrderDerivativesFailResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.CHANGE_ORDER_DERIVATIVES_FAIL_RESPONSE, System.DERIV, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class DispatcherDownResponseMessage extends ResponseMessage {

        public function DispatcherDownResponseMessage(system:System, requestMessage:RequestMessage, source:Source){
            super(MessageType.DISPATHCER_DOWN_RESPONSE, system, requestMessage, source);
        }
    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class UnauthorizeResponseMessage extends ResponseMessage {

        public function UnauthorizeResponseMessage(system:System, requestMessage:RequestMessage, source:Source){
            super(MessageType.UNAUTHORIZE_RESPONSE, system, requestMessage, source);
        }
    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class BlockTradeResponseMessage extends ResponseMessage {

        protected var _message:String;

        public function BlockTradeResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.BLOCK_TRADE_RESPONSE, System.DERIV, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class VolumeByPriceEquityResponseMessage extends VolumeByPriceResponseMessage {

        protected var _averageBuy:Number;
        protected var _averageSell:Number;

        public function VolumeByPriceEquityResponseMessage(requestMessage:RequestMessage, source:Source){
            super(requestMessage, source);
            this._averageBuy = NaN;
            this._averageSell = NaN;
        }
        public function get averageBuy():Number{
            return (this._averageBuy);
        }
        public function set averageBuy(value:Number):void{
            this._averageBuy = value;
        }
        public function get averageSell():Number{
            return (this._averageSell);
        }
        public function set averageSell(value:Number):void{
            this._averageSell = value;
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response.news {

    public class NewsAttachment {

        protected var _fileName:String;
        protected var _linkPath:String;

        public function NewsAttachment(){
            super();
            this._fileName = "";
            this._linkPath = "";
        }
        public function get fileName():String{
            return (this._fileName);
        }
        public function set fileName(value:String):void{
            this._fileName = value;
        }
        public function get linkPath():String{
            return (this._linkPath);
        }
        public function set linkPath(value:String):void{
            this._linkPath = value;
        }

    }
}//package com.settrade.streaming5.message.response.news 
﻿package com.settrade.streaming5.message.response.news {
    import com.settrade.streaming5.enumuration.*;

    public class News {

        protected var _type:NewsType;
        protected var _language:Language;
        protected var _date:String;
        protected var _time:String;
        protected var _source:String;
        protected var _instrumentId:String;
        protected var _title:String;
        protected var _id:int;
        protected var _filePath:String;
        protected var _link:String;
        protected var _hasAttach:Boolean;

        public function News(){
            super();
            this._type = NewsType.NO_TYPE;
            this._language = Language.NO_TYPE;
            this._date = "";
            this._time = "";
            this._source = "";
            this._instrumentId = "";
            this._title = "";
            this._id = 0;
            this._filePath = "";
            this._link = "";
            this._hasAttach = false;
        }
        public function get type():NewsType{
            return (this._type);
        }
        public function set type(value:NewsType):void{
            this._type = value;
        }
        public function get language():Language{
            return (this._language);
        }
        public function set language(value:Language):void{
            this._language = value;
        }
        public function get date():String{
            return (this._date);
        }
        public function set date(value:String):void{
            this._date = value;
        }
        public function get time():String{
            return (this._time);
        }
        public function set time(value:String):void{
            this._time = value;
        }
        public function get source():String{
            return (this._source);
        }
        public function set source(value:String):void{
            this._source = value;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function set instrumentId(value:String):void{
            this._instrumentId = value;
        }
        public function get title():String{
            return (this._title);
        }
        public function set title(value:String):void{
            this._title = value;
        }
        public function get id():int{
            return (this._id);
        }
        public function set id(value:int):void{
            this._id = value;
        }
        public function get filePath():String{
            return (this._filePath);
        }
        public function set filePath(value:String):void{
            this._filePath = value;
        }
        public function get link():String{
            return (this._link);
        }
        public function set link(value:String):void{
            this._link = value;
        }
        public function get hasAttach():Boolean{
            return (this._hasAttach);
        }
        public function set hasAttach(value:Boolean):void{
            this._hasAttach = value;
        }

    }
}//package com.settrade.streaming5.message.response.news 
﻿package com.settrade.streaming5.message.response.news {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class NewsResponseMessage extends ResponseMessage {

        protected var _newsList:Array;

        public function NewsResponseMessage(requestMessage:RequestMessage, source:Source){
            super(MessageType.NEWS_RESPONSE, System.REALTIME, requestMessage, source);
            this._newsList = new Array();
        }
        public function addNews(news:News){
            this._newsList.push(news);
        }
        public function get newsList():Array{
            return (this._newsList);
        }

    }
}//package com.settrade.streaming5.message.response.news 
﻿package com.settrade.streaming5.message.response.news {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class NewsInformationResponseMessage extends ResponseMessage {

        protected var _newsId:String;
        protected var _sourceId:String;
        protected var _language:Language;
        protected var _newsDate:Date;
        protected var _headline:String;
        protected var _story:String;
        protected var _attachmentList:Array;
        protected var _symbol:String;
        protected var _newsType:String;
        protected var _link:String;

        public function NewsInformationResponseMessage(requestMessage:RequestMessage, source:Source){
            super(MessageType.NEWS_INFORMATION_RESPONSE, NewsInformationRequestMessage(requestMessage).system, requestMessage, source);
        }
        public function get newsId():String{
            return (this._newsId);
        }
        public function set newsId(value:String):void{
            this._newsId = value;
        }
        public function get sourceId():String{
            return (this._sourceId);
        }
        public function set sourceId(value:String):void{
            this._sourceId = value;
        }
        public function get language():Language{
            return (this._language);
        }
        public function set language(value:Language):void{
            this._language = value;
        }
        public function get newsDate():Date{
            return (this._newsDate);
        }
        public function set newsDate(value:Date):void{
            this._newsDate = value;
        }
        public function get headline():String{
            return (this._headline);
        }
        public function set headline(value:String):void{
            this._headline = value;
        }
        public function get story():String{
            return (this._story);
        }
        public function set story(value:String):void{
            this._story = value;
        }
        public function get attachmentList():Array{
            return (this._attachmentList);
        }
        public function set attachmentList(value:Array):void{
            this._attachmentList = value;
        }
        public function get symbol():String{
            return (this._symbol);
        }
        public function set symbol(value:String):void{
            this._symbol = value;
        }
        public function get newsType():String{
            return (this._newsType);
        }
        public function set newsType(value:String):void{
            this._newsType = value;
        }
        public function get link():String{
            return (this._link);
        }
        public function set link(value:String):void{
            this._link = value;
        }

    }
}//package com.settrade.streaming5.message.response.news 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;

    public class ChangeOrderEquityFailResponseMessage extends ResponseMessage implements IFailMessage {

        protected var _message:String;

        public function ChangeOrderEquityFailResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.CHANGE_ORDER_EQUITY_FAIL_RESPONSE, System.EQUITY, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response.positionclosing {

    public class PositionClosingDerivatives {

        protected var _instrumentId:String;
        protected var _closeLong:int;
        protected var _closeShort:int;
        protected var _closeContract:int;
        protected var _realizeProfitLoss:Number;
        protected var _realizeProfitLossByCost:Number;

        public function PositionClosingDerivatives(instrumentId:String, closeLong:int, closeShort:int, closeContract:int, realizeProfitLoss:Number, realizeProfitLossByCost:Number){
            super();
            this._instrumentId = instrumentId;
            this._closeLong = closeLong;
            this._closeShort = closeShort;
            this._closeContract = closeContract;
            this._realizeProfitLoss = realizeProfitLoss;
            this._realizeProfitLossByCost = realizeProfitLossByCost;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get closeLong():int{
            return (this._closeLong);
        }
        public function get closeShort():int{
            return (this._closeShort);
        }
        public function get closeContract():int{
            return (this._closeContract);
        }
        public function get realizeProfitLoss():Number{
            return (this._realizeProfitLoss);
        }
        public function get realizeProfitLossByCost():Number{
            return (this._realizeProfitLossByCost);
        }

    }
}//package com.settrade.streaming5.message.response.positionclosing 
﻿package com.settrade.streaming5.message.response.positionclosing {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class PositionClosingDerivativesResponseMessage extends ResponseMessage {

        protected var _accountNumber:String;
        protected var _positionClosingList:Array;

        public function PositionClosingDerivativesResponseMessage(requestMessage:RequestMessage, source:Source, accountNumber:String){
            super(MessageType.POSITION_CLOSING_DERIVATIVES_RESPONSE, System.DERIV, requestMessage, source);
            this._positionClosingList = new Array();
            this._accountNumber = accountNumber;
        }
        public function addPositionClosing(positionClosing:PositionClosingDerivatives){
            this._positionClosingList.push(positionClosing);
        }
        public function get positionClosingList():Array{
            var obj:Object;
            var tmpArray:Array = new Array();
            for each (obj in this._positionClosingList) {
                tmpArray.push(obj);
            };
            return (tmpArray);
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }

    }
}//package com.settrade.streaming5.message.response.positionclosing 
﻿package com.settrade.streaming5.message.response.positionclosing {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class PositionClosingDerivativesFailResponseMessage extends ResponseMessage implements IFailMessage {

        protected var _message:String;

        public function PositionClosingDerivativesFailResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.POSITION_CLOSING_DERIVATIVES_FAIL_RESPONSE, System.DERIV, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response.positionclosing 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class ChangeOrderDerivativesWarnResponseMessage extends ResponseMessage {

        protected var _message:String;

        public function ChangeOrderDerivativesWarnResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.CHANGE_ORDER_DERIVATIVES_WARN_RESPONSE, System.DERIV, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response.instrumentlist {
    import com.settrade.streaming5.enumuration.*;

    public class InstrumentList {

        protected var _type:InstrumentListType;
        protected var _instrumentList:Array;

        public function InstrumentList(type:InstrumentListType, instrumentList:Array){
            super();
            this._type = type;
            this._instrumentList = instrumentList;
        }
        public function get type():InstrumentListType{
            return (this._type);
        }
        public function get instrumentList():Array{
            return (this._instrumentList);
        }
        public function get instrumentIdList():Array{
            var token:InstrumentToken;
            var nameList:Array = new Array();
            for each (token in this._instrumentList) {
                nameList.push(token.instrumentId);
            };
            return (nameList);
        }

    }
}//package com.settrade.streaming5.message.response.instrumentlist 
﻿package com.settrade.streaming5.message.response.instrumentlist {

    public class InstrumentTokenWithUnderlying extends InstrumentToken {

        protected var _underlying:String;

        public function InstrumentTokenWithUnderlying(instrumentId:String, underlying:String){
            super(instrumentId);
            this._underlying = underlying;
        }
        public function get underlying():String{
            return (this._underlying);
        }

    }
}//package com.settrade.streaming5.message.response.instrumentlist 
﻿package com.settrade.streaming5.message.response.instrumentlist {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class InstrumentListResponseMessage extends ResponseMessage {

        protected var _listName:String;
        protected var _subListName:String;
        protected var _boardType:String;
        protected var _boardSubType:String;
        protected var _instrumentList:Array;

        public function InstrumentListResponseMessage(requestMessage:RequestMessage, source:Source, listName:String, subListName:String, boardType:String, boardSubType:String, instrumentList:Array){
            super(MessageType.INSTRUMENT_LIST_RESPONSE, System.REALTIME, requestMessage, source);
            this._listName = listName;
            this._subListName = subListName;
            this._boardType = boardType;
            this._boardSubType = boardSubType;
            this._instrumentList = instrumentList;
        }
        public function get listName():String{
            return (this._listName);
        }
        public function get boardType():String{
            return (this._boardType);
        }
        public function get instrumentList():Array{
            return (this._instrumentList);
        }
        public function get instrumentIdList():Array{
            var list:InstrumentList;
            var idList:Array;
            var id:String;
            var allIdList:Array = new Array();
            for each (list in this._instrumentList) {
                idList = list.instrumentIdList;
                for each (id in idList) {
                    allIdList.push(id);
                };
            };
            return (allIdList);
        }
        public function get subListName():String{
            return (this._subListName);
        }
        public function get boardSubType():String{
            return (this._boardSubType);
        }

    }
}//package com.settrade.streaming5.message.response.instrumentlist 
﻿package com.settrade.streaming5.message.response.instrumentlist {

    public class InstrumentToken {

        protected var _instrumentId:String;

        public function InstrumentToken(instrumentId:String){
            super();
            this._instrumentId = instrumentId;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }

    }
}//package com.settrade.streaming5.message.response.instrumentlist 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;

    public class GenerateKeyFailResponse extends ResponseMessage implements IFailMessage {

        protected var _reason:String;

        public function GenerateKeyFailResponse(requestMessage:RequestMessage, reason:String){
            super(MessageType.GENERATE_KEY_FAIL_RESPONSE, System.REALTIME, requestMessage, Source.HTTP_RESPONSE);
            this._reason = reason;
        }
        public function get message():String{
            return (this._reason);
        }
        public function get reason():String{
            return (this._reason);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response.multipleorder {
    import com.settrade.streaming5.enumuration.*;

    public class PlaceMultipleOrderEquityResult {

        protected var _result:OrderResponseStatus;
        protected var _message:String;

        public function PlaceMultipleOrderEquityResult(result:OrderResponseStatus, message:String){
            super();
            this._result = result;
            this._message = message;
        }
        public function get result():OrderResponseStatus{
            return (this._result);
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response.multipleorder 
﻿package com.settrade.streaming5.message.response.multipleorder {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class PlaceMultipleOrderDerivativesResponseMessage extends ResponseMessage {

        protected var _resultList:Array;

        public function PlaceMultipleOrderDerivativesResponseMessage(requestMessage:RequestMessage, source:Source){
            super(MessageType.PLACE_MULTIPLE_ORDER_DERIVATIVES_RESPONSE, System.DERIV, requestMessage, source);
            this._resultList = new Array();
        }
        public function addResult(result:PlaceMultipleOrderDerivativesResult):void{
            this._resultList.push(result);
        }
        public function get resultList():Array{
            return (this._resultList.slice(0));
        }

    }
}//package com.settrade.streaming5.message.response.multipleorder 
﻿package com.settrade.streaming5.message.response.multipleorder {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class PlaceMultipleOrderEquityResponseMessage extends ResponseMessage {

        protected var _resultList:Array;

        public function PlaceMultipleOrderEquityResponseMessage(requestMessage:RequestMessage, source:Source){
            super(MessageType.PLACE_MULTIPLE_ORDER_EQUITY_RESPONSE, System.EQUITY, requestMessage, source);
            this._resultList = new Array();
        }
        public function addResult(result:PlaceMultipleOrderEquityResult):void{
            this._resultList.push(result);
        }
        public function get resultList():Array{
            return (this._resultList.slice(0));
        }

    }
}//package com.settrade.streaming5.message.response.multipleorder 
﻿package com.settrade.streaming5.message.response.multipleorder {

    public class MultipleOrderGetLastDerivatives {

        protected var _instrumentId:String;
        protected var _price:String;

        public function MultipleOrderGetLastDerivatives(instrumentId:String, price:String){
            super();
            this._instrumentId = instrumentId;
            this._price = price;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get price():String{
            return (this._price);
        }

    }
}//package com.settrade.streaming5.message.response.multipleorder 
﻿package com.settrade.streaming5.message.response.multipleorder {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class MultipleOrderDerivativesWarnResponseMessage extends ResponseMessage {

        protected var _message:String;

        public function MultipleOrderDerivativesWarnResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.MULTIPLE_ORDER_DERIVATIVES_WARN_RESPONSE, System.EQUITY, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response.multipleorder 
﻿package com.settrade.streaming5.message.response.multipleorder {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class MultipleOrderGetLastDerivativesResponseMessage extends ResponseMessage {

        protected var _lastPriceList:Array;

        public function MultipleOrderGetLastDerivativesResponseMessage(requestMessage:RequestMessage, source:Source){
            super(MessageType.MULTIPLE_ORDER_GET_LAST_DERIVATIVES_RESPONSE, System.DERIV, requestMessage, source);
            this._lastPriceList = new Array();
        }
        public function add(price:MultipleOrderGetLastDerivatives):void{
            this._lastPriceList.push(price);
        }
        public function get lastPriceList():Array{
            return (this._lastPriceList.slice(0));
        }

    }
}//package com.settrade.streaming5.message.response.multipleorder 
﻿package com.settrade.streaming5.message.response.multipleorder {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.request.multipleorder.*;
    import com.settrade.streaming5.message.response.*;

    public class MultipleOrderExtractDerivativesResponseMessage extends ResponseMessage {

        protected var _multipleOrderList:Array;

        public function MultipleOrderExtractDerivativesResponseMessage(requestMessage:RequestMessage, source:Source){
            super(MessageType.MULTIPLE_ORDER_EXTRACT_DERIVATIVES_RESPONSE, System.DERIV, requestMessage, source);
            this._multipleOrderList = new Array();
        }
        public function add(order:MultipleOrderDerivatives):void{
            this._multipleOrderList.push(order);
        }
        public function get multipleOrderList():Array{
            return (this._multipleOrderList.slice(0));
        }

    }
}//package com.settrade.streaming5.message.response.multipleorder 
﻿package com.settrade.streaming5.message.response.multipleorder {
    import com.settrade.streaming5.enumuration.*;

    public class PlaceMultipleOrderDerivativesResult {

        protected var _result:OrderResponseStatus;
        protected var _message:String;

        public function PlaceMultipleOrderDerivativesResult(result:OrderResponseStatus, message:String){
            super();
            this._result = result;
            this._message = message;
        }
        public function get result():OrderResponseStatus{
            return (this._result);
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response.multipleorder 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class PinCheckResponseMessage extends ResponseMessage {

        protected var _isCorrectPin:Boolean;

        public function PinCheckResponseMessage(requestMessage:RequestMessage, source:Source, isCorrectPin:Boolean){
            super(MessageType.PIN_CHECK_RESPONSE, System.REALTIME, requestMessage, source);
            this._isCorrectPin = isCorrectPin;
        }
        public function get isCorrectPin():Boolean{
            return (this._isCorrectPin);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response.volumebypricedetail {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class VolumeByPriceDetailOptionsResponseMessage extends VolumeByPriceDetailResponseMessage {

        protected var _optionsType:OptionsType;

        public function VolumeByPriceDetailOptionsResponseMessage(requestMessage:RequestMessage, source:Source){
            super(requestMessage, source);
        }
        public function get optionsType():OptionsType{
            return (this._optionsType);
        }
        public function set optionsType(value:OptionsType):void{
            this._optionsType = value;
        }

    }
}//package com.settrade.streaming5.message.response.volumebypricedetail 
﻿package com.settrade.streaming5.message.response.volumebypricedetail {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class VolumeByPriceDetailResponseMessage extends ResponseMessage {

        protected var _instrumentId:String;
        protected var _instrumentType:InstrumentType;
        protected var _priceDigit:int;
        protected var _buyVolume:Number;
        protected var _sellVolume:Number;
        protected var _percentBuyVolume:Number;
        protected var _percentSellVolume:Number;
        protected var _previousClose:Number;
        protected var _buySellList:Array;

        public function VolumeByPriceDetailResponseMessage(requestMessage:RequestMessage, source:Source){
            super(MessageType.VOLUME_BY_PRICE_DETAIL_RESPONSE, System.REALTIME, requestMessage, source);
            this._instrumentId = "";
            this._instrumentType = InstrumentType.NO_TYPE;
            this._priceDigit = 2;
            this._buyVolume = NaN;
            this._sellVolume = NaN;
            this._percentBuyVolume = NaN;
            this._percentSellVolume = NaN;
            this._previousClose = NaN;
            this._buySellList = new Array();
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function set instrumentId(value:String):void{
            this._instrumentId = value;
        }
        public function get instrumentType():InstrumentType{
            return (this._instrumentType);
        }
        public function set instrumentType(value:InstrumentType):void{
            this._instrumentType = value;
        }
        public function get priceDigit():int{
            return (this._priceDigit);
        }
        public function set priceDigit(value:int):void{
            this._priceDigit = value;
        }
        public function get buyVolume():Number{
            return (this._buyVolume);
        }
        public function set buyVolume(value:Number):void{
            this._buyVolume = value;
        }
        public function get sellVolume():Number{
            return (this._sellVolume);
        }
        public function set sellVolume(value:Number):void{
            this._sellVolume = value;
        }
        public function get percentBuyVolume():Number{
            return (this._percentBuyVolume);
        }
        public function set percentBuyVolume(value:Number):void{
            this._percentBuyVolume = value;
        }
        public function get percentSellVolume():Number{
            return (this._percentSellVolume);
        }
        public function set percentSellVolume(value:Number):void{
            this._percentSellVolume = value;
        }
        public function get previousClose():Number{
            return (this._previousClose);
        }
        public function set previousClose(value:Number):void{
            this._previousClose = value;
        }
        public function get buySellList():Array{
            return (this._buySellList);
        }
        public function set buySellList(value:Array):void{
            this._buySellList = value;
        }

    }
}//package com.settrade.streaming5.message.response.volumebypricedetail 
﻿package com.settrade.streaming5.message.response.volumebypricedetail {

    public class VolumeByPriceDetail {

        protected var _price:Number;
        protected var _buyVolume:Number;
        protected var _sellVolume:Number;
        protected var _totalVolume:Number;
        protected var _percentTotalVolume:Number;
        protected var _buyDeal:Number;
        protected var _sellDeal:Number;

        public function VolumeByPriceDetail(){
            super();
            this._price = NaN;
            this._buyVolume = NaN;
            this._sellVolume = NaN;
            this._totalVolume = NaN;
            this._percentTotalVolume = NaN;
            this._buyDeal = NaN;
            this._sellDeal = NaN;
        }
        public function get price():Number{
            return (this._price);
        }
        public function set price(value:Number):void{
            this._price = value;
        }
        public function get buyVolume():Number{
            return (this._buyVolume);
        }
        public function set buyVolume(value:Number):void{
            this._buyVolume = value;
        }
        public function get sellVolume():Number{
            return (this._sellVolume);
        }
        public function set sellVolume(value:Number):void{
            this._sellVolume = value;
        }
        public function get totalVolume():Number{
            return (this._totalVolume);
        }
        public function set totalVolume(value:Number):void{
            this._totalVolume = value;
        }
        public function get percentTotalVolume():Number{
            return (this._percentTotalVolume);
        }
        public function set percentTotalVolume(value:Number):void{
            this._percentTotalVolume = value;
        }
        public function get buyDeal():Number{
            return (this._buyDeal);
        }
        public function set buyDeal(value:Number):void{
            this._buyDeal = value;
        }
        public function get sellDeal():Number{
            return (this._sellDeal);
        }
        public function set sellDeal(value:Number):void{
            this._sellDeal = value;
        }

    }
}//package com.settrade.streaming5.message.response.volumebypricedetail 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;

    public class CancelOrderEquityFailResponseMessage extends ResponseMessage implements IFailMessage {

        protected var _message:String;

        public function CancelOrderEquityFailResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.CANCEL_ORDER_EQUITY_FAIL_RESPONSE, System.EQUITY, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response.outstandingposition {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class OutstandingPositionDerivativesFailResponseMessage extends ResponseMessage implements IFailMessage {

        protected var _message:String;

        public function OutstandingPositionDerivativesFailResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.OUTSTANDING_POSITION_DERIVATIVES_FAIL_RESPONSE, System.DERIV, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response.outstandingposition 
﻿package com.settrade.streaming5.message.response.outstandingposition {

    public class OutstandingPositionDerivatives {

        protected var _instrumentId:String;
        protected var _longPosition:int;
        protected var _shortPosition:int;
        protected var _averagePrice:Number;
        protected var _settlementPrice:Number;
        protected var _unrealizeProfitLoss:Number;
        protected var _unrealizeProfitLossByCost:Number;
        protected var _priceDigit:int;
        protected var _settlementDigit:int;

        public function OutstandingPositionDerivatives(instrumentId:String, longPosition:int, shortPosition:int, averagePrice:Number, settlementPrice:Number, unrealizeProfitLoss:Number, unrealizeProfitLossByCost:Number, priceDigit:int, settlementDigit:int){
            super();
            this._instrumentId = instrumentId;
            this._longPosition = longPosition;
            this._shortPosition = shortPosition;
            this._averagePrice = averagePrice;
            this._settlementPrice = settlementPrice;
            this._unrealizeProfitLoss = unrealizeProfitLoss;
            this._unrealizeProfitLossByCost = unrealizeProfitLossByCost;
            this._priceDigit = priceDigit;
            this._settlementDigit = settlementDigit;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get longPosition():int{
            return (this._longPosition);
        }
        public function get shortPosition():int{
            return (this._shortPosition);
        }
        public function get settlementPrice():Number{
            return (this._settlementPrice);
        }
        public function get unrealizeProfitLoss():Number{
            return (this._unrealizeProfitLoss);
        }
        public function get unrealizeProfitLossByCost():Number{
            return (this._unrealizeProfitLossByCost);
        }
        public function get priceDigit():int{
            return (this._priceDigit);
        }
        public function get settlementDigit():int{
            return (this._settlementDigit);
        }
        public function get averagePrice():Number{
            return (this._averagePrice);
        }

    }
}//package com.settrade.streaming5.message.response.outstandingposition 
﻿package com.settrade.streaming5.message.response.outstandingposition {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class OutstandingPositionDerivativesResponseMessage extends ResponseMessage {

        protected var _accountNumber:String;
        protected var _outstandingPositionList:Array;

        public function OutstandingPositionDerivativesResponseMessage(requestMessage:RequestMessage, source:Source, accountNumber:String){
            super(MessageType.OUTSTANDING_POSITION_DERIVATIVES_RESPONSE, System.DERIV, requestMessage, source);
            this._outstandingPositionList = new Array();
            this._accountNumber = accountNumber;
        }
        public function addOutstandingPosition(outstandingPosition:OutstandingPositionDerivatives){
            this._outstandingPositionList.push(outstandingPosition);
        }
        public function get outstandingPositionList():Array{
            var obj:Object;
            var tmpArray:Array = new Array();
            for each (obj in this._outstandingPositionList) {
                tmpArray.push(obj);
            };
            return (tmpArray);
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }

    }
}//package com.settrade.streaming5.message.response.outstandingposition 
﻿package com.settrade.streaming5.message.response.oppday {

    public class Oppday {

        protected var _year:String;
        protected var _quarter:String;
        protected var _companyId:String;
        protected var _instrumentId:String;
        protected var _name:String;
        protected var _vdo:String;
        protected var _presentation:String;
        protected var _industry:String;
        protected var _sector:String;
        protected var _date:Date;
        protected var _time:String;
        protected var _logo:String;

        public function Oppday(year:String, quarter:String, companyId:String, instrumentId:String, name:String, vdo:String, presentation:String, industry:String, sector:String, date:Date, time:String, logo:String){
            super();
            this._year = year;
            this._quarter = quarter;
            this._companyId = companyId;
            this._instrumentId = instrumentId;
            this._name = name;
            this._vdo = vdo;
            this._presentation = presentation;
            this._industry = industry;
            this._sector = sector;
            this._date = date;
            this._time = time;
            this._logo = logo;
        }
        public function get year():String{
            return (this._year);
        }
        public function get quarter():String{
            return (this._quarter);
        }
        public function get companyId():String{
            return (this._companyId);
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get name():String{
            return (this._name);
        }
        public function get vdo():String{
            return (this._vdo);
        }
        public function get presentation():String{
            return (this._presentation);
        }
        public function get industry():String{
            return (this._industry);
        }
        public function get sector():String{
            return (this._sector);
        }
        public function get date():Date{
            return (this._date);
        }
        public function get time():String{
            return (this._time);
        }
        public function get logo():String{
            return (this._logo);
        }

    }
}//package com.settrade.streaming5.message.response.oppday 
﻿package com.settrade.streaming5.message.response.oppday {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class OppDayArchiveResponseMessage extends OppDayResponseMessage {

        public function OppDayArchiveResponseMessage(requestMessage:RequestMessage, source:Source){
            super(MessageType.OPPDAY_ARCHIVE_RESPONSE, requestMessage, source);
        }
    }
}//package com.settrade.streaming5.message.response.oppday 
﻿package com.settrade.streaming5.message.response.oppday {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class OppDayResponseMessage extends ResponseMessage {

        protected var _oppDayList:Array;

        public function OppDayResponseMessage(type:MessageType, requestMessage:RequestMessage, source:Source){
            super(type, System.SET, requestMessage, source);
            this._oppDayList = new Array();
        }
        public function add(oppday:Oppday):void{
            this._oppDayList.push(oppday);
        }
        public function get oppDayList():Array{
            return (this._oppDayList.slice());
        }

    }
}//package com.settrade.streaming5.message.response.oppday 
﻿package com.settrade.streaming5.message.response.oppday {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class OppDayLiveResponseMessage extends OppDayResponseMessage {

        public function OppDayLiveResponseMessage(requestMessage:RequestMessage, source:Source){
            super(MessageType.OPPDAY_LIVE_RESPONSE, requestMessage, source);
        }
    }
}//package com.settrade.streaming5.message.response.oppday 
﻿package com.settrade.streaming5.message.response.oppday {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class OppDaySearchResponseMessage extends OppDayResponseMessage {

        public function OppDaySearchResponseMessage(requestMessage:RequestMessage, source:Source){
            super(MessageType.OPPDAY_SEARCH_RESPONSE, requestMessage, source);
        }
    }
}//package com.settrade.streaming5.message.response.oppday 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class VolumeByPriceOptionsResponseMessage extends VolumeByPriceResponseMessage {

        protected var _optionsType:OptionsType;
        protected var _buyVolumeOpposite:Number;
        protected var _sellVolumeOpposite:Number;
        protected var _percentBuyVolumeOpposite:Number;
        protected var _percentSellVolumeOpposite:Number;
        protected var _sectorBuyVolumeOpposite:Number;
        protected var _sectorSellVolumeOpposite:Number;
        protected var _sectorPercentBuyVolumeOpposite:Number;
        protected var _sectorPercentSellVolumeOpposite:Number;

        public function VolumeByPriceOptionsResponseMessage(requestMessage:RequestMessage, source:Source){
            super(requestMessage, source);
            this._optionsType = null;
            this._buyVolumeOpposite = NaN;
            this._sellVolumeOpposite = NaN;
            this._percentBuyVolumeOpposite = NaN;
            this._percentSellVolumeOpposite = NaN;
            this._sectorBuyVolumeOpposite = NaN;
            this._sectorSellVolumeOpposite = NaN;
            this._sectorPercentBuyVolumeOpposite = NaN;
            this._sectorPercentSellVolumeOpposite = NaN;
        }
        public function get buyVolumeOpposite():Number{
            return (this._buyVolumeOpposite);
        }
        public function set buyVolumeOpposite(value:Number):void{
            this._buyVolumeOpposite = value;
        }
        public function get sellVolumeOpposite():Number{
            return (this._sellVolumeOpposite);
        }
        public function set sellVolumeOpposite(value:Number):void{
            this._sellVolumeOpposite = value;
        }
        public function get percentBuyVolumeOpposite():Number{
            return (this._percentBuyVolumeOpposite);
        }
        public function set percentBuyVolumeOpposite(value:Number):void{
            this._percentBuyVolumeOpposite = value;
        }
        public function get percentSellVolumeOpposite():Number{
            return (this._percentSellVolumeOpposite);
        }
        public function set percentSellVolumeOpposite(value:Number):void{
            this._percentSellVolumeOpposite = value;
        }
        public function get sectorBuyVolumeOpposite():Number{
            return (this._sectorBuyVolumeOpposite);
        }
        public function set sectorBuyVolumeOpposite(value:Number):void{
            this._sectorBuyVolumeOpposite = value;
        }
        public function get sectorSellVolumeOpposite():Number{
            return (this._sectorSellVolumeOpposite);
        }
        public function set sectorSellVolumeOpposite(value:Number):void{
            this._sectorSellVolumeOpposite = value;
        }
        public function get sectorPercentBuyVolumeOpposite():Number{
            return (this._sectorPercentBuyVolumeOpposite);
        }
        public function set sectorPercentBuyVolumeOpposite(value:Number):void{
            this._sectorPercentBuyVolumeOpposite = value;
        }
        public function get sectorPercentSellVolumeOpposite():Number{
            return (this._sectorPercentSellVolumeOpposite);
        }
        public function set sectorPercentSellVolumeOpposite(value:Number):void{
            this._sectorPercentSellVolumeOpposite = value;
        }
        public function get optionsType():OptionsType{
            return (this._optionsType);
        }
        public function set optionsType(value:OptionsType):void{
            this._optionsType = value;
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class SyncTimeResponseMessage extends ResponseMessage {

        protected var _serverReceiveTime:Number;
        protected var _serverSendTime:Number;

        public function SyncTimeResponseMessage(requestMessage:RequestMessage, source:Source, serverReceiveTime:Number, serverSendTime:Number){
            super(MessageType.SYNC_TIME_RESPONSE, System.REALTIME, requestMessage, source);
            this._serverReceiveTime = serverReceiveTime;
            this._serverSendTime = serverSendTime;
        }
        public function get serverReceiveTime():Number{
            return (this._serverReceiveTime);
        }
        public function get serverSendTime():Number{
            return (this._serverSendTime);
        }
        public function set serverSendTime(value:Number):void{
            this._serverSendTime = value;
        }
        public function set serverReceiveTime(value:Number):void{
            this._serverReceiveTime = value;
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class MultipleOrderEquityWarnResponseMessage extends ResponseMessage {

        protected var _message:String;

        public function MultipleOrderEquityWarnResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.MULTIPLE_ORDER_EQUITY_WARN_RESPONSE, System.EQUITY, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class UserCheckResponseMessage extends ResponseMessage {

        protected var _clientFeedStateFromSever:FeedState;
        protected var _isFeedEquityAlive:Boolean;
        protected var _isFeedDerivativesAlive:Boolean;

        public function UserCheckResponseMessage(system:System, requestMessage:RequestMessage, source:Source, clientFeedStateFromSever:FeedState, isFeedEquityAlive:Boolean, isFeedDerivativesAlive:Boolean){
            super(MessageType.USER_CHECK_RESPONSE, system, requestMessage, source);
            this._clientFeedStateFromSever = clientFeedStateFromSever;
            this._isFeedEquityAlive = isFeedEquityAlive;
            this._isFeedDerivativesAlive = isFeedDerivativesAlive;
        }
        public function get clientFeedStateFromSever():FeedState{
            return (this._clientFeedStateFromSever);
        }
        public function get isFeedEquityAlive():Boolean{
            return (this._isFeedEquityAlive);
        }
        public function get isFeedDerivativesAlive():Boolean{
            return (this._isFeedDerivativesAlive);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {

    public class OptionsStrikePrice {

        protected var _strikePrice:Number;
        protected var _callSymbol:String;
        protected var _putSymbol:String;
        protected var _callInTheMoney:Boolean;
        protected var _putInTheMoney:Boolean;

        public function OptionsStrikePrice(strikePrice:Number, callSymbol:String, putSymbol:String, callInTheMoney:Boolean, putInTheMoney:Boolean){
            super();
            this._strikePrice = strikePrice;
            this._callSymbol = callSymbol;
            this._putSymbol = putSymbol;
            this._callInTheMoney = callInTheMoney;
            this._putInTheMoney = putInTheMoney;
        }
        public function get strikePrice():Number{
            return (this._strikePrice);
        }
        public function get callSymbol():String{
            return (this._callSymbol);
        }
        public function get putSymbol():String{
            return (this._putSymbol);
        }
        public function get callInTheMoney():Boolean{
            return (this._callInTheMoney);
        }
        public function get putInTheMoney():Boolean{
            return (this._putInTheMoney);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response.historicalbydate {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class HistoricalByDateResponseMessage extends ResponseMessage {

        protected var _instrumentId:String;
        protected var _data:Array;

        public function HistoricalByDateResponseMessage(requestMessage:RequestMessage, source:Source){
            super(MessageType.HISTORICAL_BY_DATE_RESPONSE, System.REALTIME, requestMessage, source);
            this._instrumentId = "";
            this._data = new Array();
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function set instrumentId(value:String):void{
            this._instrumentId = value;
        }
        public function addData(historicalData:HistoricalByDateData):void{
            this._data.push(historicalData);
        }
        public function get data():Array{
            var obj:Object;
            var tmp:Array = new Array();
            for each (obj in this._data) {
                tmp.push(obj);
            };
            return (tmp);
        }
        public function set data(value:Array):void{
            this._data = value;
        }

    }
}//package com.settrade.streaming5.message.response.historicalbydate 
﻿package com.settrade.streaming5.message.response.historicalbydate {

    public class HistoricalByDateData {

        protected var _day:int;
        protected var _month:int;
        protected var _year:int;
        protected var _open:Number;
        protected var _close:Number;
        protected var _change:Number;
        protected var _percentChange:Number;
        protected var _high:Number;
        protected var _low:Number;
        protected var _averagePrice:Number;
        protected var _volume:Number;
        protected var _hasExtraDetail:Boolean;
        protected var _value:Number;
        protected var _marketCap:Number;
        protected var _pe:Number;
        protected var _dividend:Number;
        protected var _prevSettlementPrice:Number;
        protected var _settlementPrice:Number;
        protected var _transaction:Number;
        protected var _oi:int;

        public function HistoricalByDateData(){
            super();
            this._day = 1;
            this._month = 1;
            this._year = 1980;
            this._open = NaN;
            this._close = NaN;
            this._change = NaN;
            this._percentChange = NaN;
            this._high = NaN;
            this._low = NaN;
            this._averagePrice = NaN;
            this._volume = NaN;
            this._hasExtraDetail = false;
            this._value = NaN;
            this._marketCap = NaN;
            this._pe = NaN;
            this._dividend = NaN;
            this._prevSettlementPrice = NaN;
            this._settlementPrice = NaN;
            this._transaction = NaN;
            this._oi = 0;
        }
        public function get date():Date{
            var date:Date = new Date();
            date.setFullYear(this._year, (this._month - 1), this._day);
            date.setHours(0, 0, 0, 0);
            return (date);
        }
        public function get day():int{
            return (this._day);
        }
        public function set day(value:int):void{
            this._day = value;
        }
        public function get month():int{
            return (this._month);
        }
        public function set month(value:int):void{
            this._month = value;
        }
        public function get year():int{
            return (this._year);
        }
        public function set year(value:int):void{
            this._year = value;
        }
        public function get volume():Number{
            return (this._volume);
        }
        public function set volume(value:Number):void{
            this._volume = value;
        }
        public function get close():Number{
            return (this._close);
        }
        public function set close(value:Number):void{
            this._close = value;
        }
        public function get change():Number{
            return (this._change);
        }
        public function set change(value:Number):void{
            this._change = value;
        }
        public function get high():Number{
            return (this._high);
        }
        public function set high(value:Number):void{
            this._high = value;
        }
        public function get low():Number{
            return (this._low);
        }
        public function set low(value:Number):void{
            this._low = value;
        }
        public function get value():Number{
            return (this._value);
        }
        public function set value(value:Number):void{
            this._value = value;
        }
        public function get marketCap():Number{
            return (this._marketCap);
        }
        public function set marketCap(value:Number):void{
            this._marketCap = value;
        }
        public function get pe():Number{
            return (this._pe);
        }
        public function set pe(value:Number):void{
            this._pe = value;
        }
        public function get dividend():Number{
            return (this._dividend);
        }
        public function set dividend(value:Number):void{
            this._dividend = value;
        }
        public function get prevSettlementPrice():Number{
            return (this._prevSettlementPrice);
        }
        public function set prevSettlementPrice(value:Number):void{
            this._prevSettlementPrice = value;
        }
        public function get settlementPrice():Number{
            return (this._settlementPrice);
        }
        public function set settlementPrice(value:Number):void{
            this._settlementPrice = value;
        }
        public function get transaction():Number{
            return (this._transaction);
        }
        public function set transaction(value:Number):void{
            this._transaction = value;
        }
        public function get oi():int{
            return (this._oi);
        }
        public function set oi(value:int):void{
            this._oi = value;
        }
        public function get hasExtraDetail():Boolean{
            return (this._hasExtraDetail);
        }
        public function set hasExtraDetail(value:Boolean):void{
            this._hasExtraDetail = value;
        }
        public function get percentChange():Number{
            return (this._percentChange);
        }
        public function set percentChange(value:Number):void{
            this._percentChange = value;
        }
        public function get open():Number{
            return (this._open);
        }
        public function set open(value:Number):void{
            this._open = value;
        }
        public function get averagePrice():Number{
            return (this._averagePrice);
        }
        public function set averagePrice(value:Number):void{
            this._averagePrice = value;
        }

    }
}//package com.settrade.streaming5.message.response.historicalbydate 
﻿package com.settrade.streaming5.message.response.symbolselector {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class SymbolSelectorOptionsResponseMessage extends DataProviderJsonResponseMessage {

        protected var _strikPriceList:Array;
        protected var _putMatrix:SymbolSelectorOptionsMatrix;
        protected var _callMatrix:SymbolSelectorOptionsMatrix;

        public function SymbolSelectorOptionsResponseMessage(requestMessage:RequestMessage, source:Source, strikePriceList:Array, putMatrix:SymbolSelectorOptionsMatrix, callMatrix:SymbolSelectorOptionsMatrix){
            super(MessageType.SYMBOL_SELECTOR_OPTIONS_RESPONSE, System.REALTIME, requestMessage, source);
            this._strikPriceList = strikePriceList;
            this._putMatrix = putMatrix;
            this._callMatrix = callMatrix;
        }
        public function get callMatrix():SymbolSelectorOptionsMatrix{
            return (this._callMatrix);
        }
        public function get putMatrix():SymbolSelectorOptionsMatrix{
            return (this._putMatrix);
        }
        public function get strikPriceList():Array{
            return (this._strikPriceList);
        }

    }
}//package com.settrade.streaming5.message.response.symbolselector 
﻿package com.settrade.streaming5.message.response.symbolselector {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class SymbolSelectorTreeResponseMessage extends DataProviderJsonResponseMessage {

        protected var _equityTree:SymbolSelectorTreeNode;
        protected var _derivativesTree:SymbolSelectorTreeNode;
        protected var _indexTree:SymbolSelectorTreeNode;

        public function SymbolSelectorTreeResponseMessage(requestMessage:RequestMessage, source:Source, equityTree:SymbolSelectorTreeNode, derivativesTree:SymbolSelectorTreeNode, indexTree:SymbolSelectorTreeNode){
            super(MessageType.SYMBOL_SELECTOR_TREE_RESPONSE, System.REALTIME, requestMessage, source);
            this._equityTree = equityTree;
            this._derivativesTree = derivativesTree;
            this._indexTree = indexTree;
        }
        public function get equityTree():SymbolSelectorTreeNode{
            return (this._equityTree);
        }
        public function get derivativesTree():SymbolSelectorTreeNode{
            return (this._derivativesTree);
        }
        public function get indexTree():SymbolSelectorTreeNode{
            return (this._indexTree);
        }

    }
}//package com.settrade.streaming5.message.response.symbolselector 
﻿package com.settrade.streaming5.message.response.symbolselector {

    public class SymbolSelectorTreeLeaf {

        protected var _displayName:String;
        protected var _listName:String;
        protected var _subListName:String;
        protected var _boardType:String;
        protected var _boardSubType:String;

        public function SymbolSelectorTreeLeaf(displayName:String, listName:String, subListName:String, boardType:String, boardSubType:String){
            super();
            this._displayName = displayName;
            this._listName = listName;
            this._subListName = subListName;
            this._boardType = boardType;
            this._boardSubType = boardSubType;
        }
        public function get listName():String{
            return (this._listName);
        }
        public function get displayName():String{
            return (this._displayName);
        }
        public function get subListName():String{
            return (this._subListName);
        }
        public function get boardSubType():String{
            return (this._boardSubType);
        }
        public function get boardType():String{
            return (this._boardType);
        }

    }
}//package com.settrade.streaming5.message.response.symbolselector 
﻿package com.settrade.streaming5.message.response.symbolselector {

    public class SymbolSelectorOptionsMatrix {

        protected var _strikePriceList:Array;
        protected var _expireDateList:Array;
        protected var _symbolSelectorOptionsMatrix:Array;

        public function SymbolSelectorOptionsMatrix(strikePriceList:Array, expireDateList:Array, symbolSelectorOptionsMatrix:Array){
            super();
            this._strikePriceList = strikePriceList;
            this._expireDateList = expireDateList;
            this._symbolSelectorOptionsMatrix = symbolSelectorOptionsMatrix;
        }
        public function get strikePriceList():Array{
            return (this._strikePriceList);
        }
        public function get expireDateList():Array{
            return (this._expireDateList.slice());
        }
        public function get symbolSelectorOptionsMatrix():Array{
            return (this._symbolSelectorOptionsMatrix);
        }

    }
}//package com.settrade.streaming5.message.response.symbolselector 
﻿package com.settrade.streaming5.message.response.symbolselector {
    import com.settrade.streaming5.enumuration.*;

    public class SymbolSelectorOptions {

        protected var _instrumentId:String;
        protected var _date:Date;
        protected var _strikePrice:Number;
        protected var _optionsType:OptionsType;

        public function SymbolSelectorOptions(instrumentId:String, date:Date, strikePrice:Number, optionsType:OptionsType){
            super();
            this._instrumentId = instrumentId;
            this._date = date;
            this._strikePrice = strikePrice;
            this._optionsType = optionsType;
        }
        public function get strikePrice():Number{
            return (this._strikePrice);
        }
        public function get optionsType():OptionsType{
            return (this._optionsType);
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get date():Date{
            return (this._date);
        }

    }
}//package com.settrade.streaming5.message.response.symbolselector 
﻿package com.settrade.streaming5.message.response.symbolselector {

    public class SymbolSelectorTreeNode {

        protected var _displayName:String;
        protected var _child:Array;

        public function SymbolSelectorTreeNode(displayName:String){
            super();
            this._displayName = displayName;
            this._child = new Array();
        }
        public function add(object:Object):void{
            if ((object is SymbolSelectorTreeNode)){
                this.addNode(SymbolSelectorTreeNode(object));
            } else {
                if ((object is SymbolSelectorTreeLeaf)){
                    this.addLeaf(SymbolSelectorTreeLeaf(object));
                };
            };
        }
        public function addNode(symbolSelectorNode:SymbolSelectorTreeNode):void{
            this._child.push(symbolSelectorNode);
        }
        public function addLeaf(symbolSelectorLeaf:SymbolSelectorTreeLeaf):void{
            this._child.push(symbolSelectorLeaf);
        }
        public function get displayName():String{
            return (this._displayName);
        }
        public function get child():Array{
            return (this._child);
        }
        public function toXML():XML{
            var xml:XML = <node></node>
            ;
            xml.@label = this._displayName;
            var i:int;
            while (i < this._child.length) {
                xml.appendChild(this.transverse(this._child[i]));
                i++;
            };
            var root:XML = <root></root>
            ;
            root.appendChild(xml);
            return (xml);
        }
        public function transverse(node):XML{
            var i:int;
            var xml:XML = <node></node>
            ;
            xml.@label = node.displayName;
            if ((node is SymbolSelectorTreeNode)){
                i = 0;
                while (i < node.child.length) {
                    xml.appendChild(this.transverse(node.child[i]));
                    i++;
                };
            } else {
                if ((node is SymbolSelectorTreeLeaf)){
                    xml.@listName = node.listName;
                    xml.@subListName = node.subListName;
                    xml.@boardType = node.boardType;
                    xml.@boardSubType = node.boardSubType;
                };
            };
            return (xml);
        }

    }
}//package com.settrade.streaming5.message.response.symbolselector 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class IntradayChartResponseMessage extends ResponseMessage {

        protected var _instrumentId:String;
        protected var _chartType:ChartType;
        protected var _isNight:Boolean;
        protected var _prevClose:Number;
        protected var _last:Number;
        protected var _high:Number;
        protected var _low:Number;
        protected var _hour:int;
        protected var _minute:int;
        protected var _second:int;
        protected var _value:Array;
        protected var _spread:Number;

        public function IntradayChartResponseMessage(requestMessage:RequestMessage, source:Source, instrumentId:String, chartType:ChartType, isNight:Boolean, prevClose:Number, last:Number, high:Number, low:Number, spread:Number, hour:int, minute:int, second:int, value:Array){
            super(MessageType.INTRADAY_CHART_RESPONSE, System.REALTIME, requestMessage, source);
            this._instrumentId = instrumentId;
            this._chartType = chartType;
            this._isNight = isNight;
            this._prevClose = prevClose;
            this._last = last;
            this._high = high;
            this._low = low;
            this._hour = hour;
            this._minute = minute;
            this._second = second;
            this._value = value;
            this._spread = spread;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get chartType():ChartType{
            return (this._chartType);
        }
        public function get isNight():Boolean{
            return (this._isNight);
        }
        public function get prevClose():Number{
            return (this._prevClose);
        }
        public function get last():Number{
            return (this._last);
        }
        public function get high():Number{
            return (this._high);
        }
        public function get low():Number{
            return (this._low);
        }
        public function get value():Array{
            return (this._value);
        }
        public function get spread():Number{
            return (this._spread);
        }
        public function get hour():int{
            return (this._hour);
        }
        public function get minute():int{
            return (this._minute);
        }
        public function get second():int{
            return (this._second);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class VolumeByPriceResponseMessage extends ResponseMessage {

        protected var _instrumentId:String;
        protected var _instrumentType:InstrumentType;
        protected var _status:String;
        protected var _sectorName:String;
        protected var _previousClose:Number;
        protected var _buyVolume:Number;
        protected var _sellVolume:Number;
        protected var _percentBuyVolume:int;
        protected var _percentSellVolume:int;
        protected var _sectorBuyVolume:Number;
        protected var _sectorSellVolume:Number;
        protected var _sectorPercentBuyVolume:int;
        protected var _sectorPercentSellVolume:int;
        protected var _marketBuyVolume:Number;
        protected var _marketSellVolume:Number;
        protected var _marketPercentBuyVolume:int;
        protected var _marketPercentSellVolume:int;

        public function VolumeByPriceResponseMessage(requestMessage:RequestMessage, source:Source){
            super(MessageType.VOLUME_BY_PRICE_RESPONSE, System.REALTIME, requestMessage, source);
            this._instrumentId = "";
            this._instrumentType = InstrumentType.NO_TYPE;
            this._status = "";
            this._sectorName = "";
            this._previousClose = NaN;
            this._buyVolume = NaN;
            this._sellVolume = NaN;
            this._percentBuyVolume = int.MIN_VALUE;
            this._percentSellVolume = int.MIN_VALUE;
            this._sectorBuyVolume = NaN;
            this._sectorSellVolume = NaN;
            this._sectorPercentBuyVolume = int.MIN_VALUE;
            this._sectorPercentSellVolume = int.MIN_VALUE;
            this._marketBuyVolume = NaN;
            this._marketSellVolume = NaN;
            this._marketPercentBuyVolume = int.MIN_VALUE;
            this._marketPercentSellVolume = int.MIN_VALUE;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function set instrumentId(value:String):void{
            this._instrumentId = value;
        }
        public function get instrumentType():InstrumentType{
            return (this._instrumentType);
        }
        public function set instrumentType(value:InstrumentType):void{
            this._instrumentType = value;
        }
        public function get status():String{
            return (this._status);
        }
        public function set status(value:String):void{
            this._status = value;
        }
        public function get sectorName():String{
            return (this._sectorName);
        }
        public function set sectorName(value:String):void{
            this._sectorName = value;
        }
        public function get previousClose():Number{
            return (this._previousClose);
        }
        public function set previousClose(value:Number):void{
            this._previousClose = value;
        }
        public function get buyVolume():Number{
            return (this._buyVolume);
        }
        public function set buyVolume(value:Number):void{
            this._buyVolume = value;
        }
        public function get sellVolume():Number{
            return (this._sellVolume);
        }
        public function set sellVolume(value:Number):void{
            this._sellVolume = value;
        }
        public function get marketBuyVolume():Number{
            return (this._marketBuyVolume);
        }
        public function set marketBuyVolume(value:Number):void{
            this._marketBuyVolume = value;
        }
        public function get marketSellVolume():Number{
            return (this._marketSellVolume);
        }
        public function set marketSellVolume(value:Number):void{
            this._marketSellVolume = value;
        }
        public function set source(value:Source):void{
            _source = value;
        }
        public function get sectorBuyVolume():Number{
            return (this._sectorBuyVolume);
        }
        public function set sectorBuyVolume(value:Number):void{
            this._sectorBuyVolume = value;
        }
        public function get sectorSellVolume():Number{
            return (this._sectorSellVolume);
        }
        public function set sectorSellVolume(value:Number):void{
            this._sectorSellVolume = value;
        }
        public function get marketPercentSellVolume():int{
            return (this._marketPercentSellVolume);
        }
        public function set marketPercentSellVolume(value:int):void{
            this._marketPercentSellVolume = value;
        }
        public function get percentBuyVolume():int{
            return (this._percentBuyVolume);
        }
        public function set percentBuyVolume(value:int):void{
            this._percentBuyVolume = value;
        }
        public function get percentSellVolume():int{
            return (this._percentSellVolume);
        }
        public function set percentSellVolume(value:int):void{
            this._percentSellVolume = value;
        }
        public function get sectorPercentBuyVolume():int{
            return (this._sectorPercentBuyVolume);
        }
        public function set sectorPercentBuyVolume(value:int):void{
            this._sectorPercentBuyVolume = value;
        }
        public function get sectorPercentSellVolume():int{
            return (this._sectorPercentSellVolume);
        }
        public function set sectorPercentSellVolume(value:int):void{
            this._sectorPercentSellVolume = value;
        }
        public function get marketPercentBuyVolume():int{
            return (this._marketPercentBuyVolume);
        }
        public function set marketPercentBuyVolume(value:int):void{
            this._marketPercentBuyVolume = value;
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response.dealsummary {
    import com.settrade.streaming5.common.*;

    public class DealSummaryByAccountDerivatives extends DealSummaryByAccount {

        protected var _settlementDate:String;

        public function DealSummaryByAccountDerivatives(account:Account, feeVat:Number, net:Number, settlementDate:String){
            super(account, feeVat, net);
            this._settlementDate = settlementDate;
        }
        public function get settlementDate():String{
            return (this._settlementDate);
        }

    }
}//package com.settrade.streaming5.message.response.dealsummary 
﻿package com.settrade.streaming5.message.response.dealsummary {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class DealSummaryDerivativesByInstrumentIdResponseMessage extends DealSummaryDerivativesResponseMessage {

        public function DealSummaryDerivativesByInstrumentIdResponseMessage(requestMessage:RequestMessage, source:Source, accountNumber:String, settlementDateCount:int){
            super(requestMessage, source, accountNumber, settlementDateCount);
            _type = MessageType.DEAL_SUMMARY_DERIVATIVES_BY_INSTRUMENT_ID_RESPONSE;
        }
    }
}//package com.settrade.streaming5.message.response.dealsummary 
﻿package com.settrade.streaming5.message.response.dealsummary {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class DealSummaryDerivativesFailResponseMessage extends ResponseMessage implements IFailMessage {

        protected var _message:String;

        public function DealSummaryDerivativesFailResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.DEAL_SUMMARY_DERIVATIVES_FAIL_RESPONSE, System.DERIV, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response.dealsummary 
﻿package com.settrade.streaming5.message.response.dealsummary {

    public class DealSummaryDerivativesDetail {

        protected var _price:Number;
        protected var _volume:Number;

        public function DealSummaryDerivativesDetail(price:Number, volume:Number){
            super();
            this._price = price;
            this._volume = volume;
        }
        public function get price():Number{
            return (this._price);
        }
        public function get volume():Number{
            return (this._volume);
        }

    }
}//package com.settrade.streaming5.message.response.dealsummary 
﻿package com.settrade.streaming5.message.response.dealsummary {

    public class DealSummaryTotalEquity {

        protected var _instrumentId:String;
        protected var _volume:int;
        protected var _totalFee:Number;
        protected var _vat:Number;
        protected var _netBuy:Number;
        protected var _netSell:Number;
        protected var _net:Number;

        public function DealSummaryTotalEquity(instrumentId:String, volume:Number, totalFee:Number, vat:Number, netBuy:Number, netSell:Number, net:Number){
            super();
            this._instrumentId = instrumentId;
            this._volume = volume;
            this._totalFee = totalFee;
            this._vat = vat;
            this._netBuy = netBuy;
            this._netSell = netSell;
            this._net = net;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get volume():int{
            return (this._volume);
        }
        public function get totalFee():Number{
            return (this._totalFee);
        }
        public function get vat():Number{
            return (this._vat);
        }
        public function get netBuy():Number{
            return (this._netBuy);
        }
        public function get netSell():Number{
            return (this._netSell);
        }
        public function get net():Number{
            return (this._net);
        }

    }
}//package com.settrade.streaming5.message.response.dealsummary 
﻿package com.settrade.streaming5.message.response.dealsummary {
    import com.settrade.streaming5.enumuration.*;

    public class DealSummaryDerivatives {

        protected var _orderNumber:String;
        protected var _instrumentId:String;
        protected var _side:DerivativesOrderSide;
        protected var _position:DerivativesPosition;
        protected var _volume:Number;
        protected var _costPrice:Number;
        protected var _commission:Number;
        protected var _vat:Number;
        protected var _withHoldingTax:Number;
        protected var _amount:Number;
        protected var _priceDigit:int;
        protected var _dealDate:String;
        protected var _settlementDate:String;
        protected var _detailList:Array;

        public function DealSummaryDerivatives(orderNumber:String, instrumentId:String, side:DerivativesOrderSide, position:DerivativesPosition, volume:Number, costPrice:Number, commission:Number, vat:Number, withHoldingTax:Number, amount:Number, priceDigit:int, dealDate:String, settlementDate:String, detailList:Array){
            super();
            this._orderNumber = orderNumber;
            this._instrumentId = instrumentId;
            this._side = side;
            this._position = position;
            this._volume = volume;
            this._costPrice = costPrice;
            this._commission = commission;
            this._vat = vat;
            this._withHoldingTax = withHoldingTax;
            this._amount = amount;
            this._priceDigit = priceDigit;
            this._dealDate = dealDate;
            this._settlementDate = settlementDate;
            this._detailList = detailList;
        }
        public function get orderNumber():String{
            return (this._orderNumber);
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get orderSide():DerivativesOrderSide{
            return (this._side);
        }
        public function get position():DerivativesPosition{
            return (this._position);
        }
        public function get volume():Number{
            return (this._volume);
        }
        public function get costPrice():Number{
            return (this._costPrice);
        }
        public function get commission():Number{
            return (this._commission);
        }
        public function get vat():Number{
            return (this._vat);
        }
        public function get withHoldingTax():Number{
            return (this._withHoldingTax);
        }
        public function get amount():Number{
            return (this._amount);
        }
        public function get priceDigit():int{
            return (this._priceDigit);
        }
        public function get dealDate():String{
            return (this._dealDate);
        }
        public function get settlementDate():String{
            return (this._settlementDate);
        }
        public function get detailList():Array{
            return (this._detailList);
        }

    }
}//package com.settrade.streaming5.message.response.dealsummary 
﻿package com.settrade.streaming5.message.response.dealsummary {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class DealSummaryDerivativesByPriceResponseMessage extends DealSummaryDerivativesResponseMessage {

        public function DealSummaryDerivativesByPriceResponseMessage(requestMessage:RequestMessage, source:Source, accountNumber:String, settlementDateCount:int){
            super(requestMessage, source, accountNumber, settlementDateCount);
            _type = MessageType.DEAL_SUMMARY_DERIVATIVES_BY_PRICE_RESPONSE;
        }
    }
}//package com.settrade.streaming5.message.response.dealsummary 
﻿package com.settrade.streaming5.message.response.dealsummary {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class DealSummaryEquityResponseMessage extends ResponseMessage {

        protected var _accountNumber:String;
        protected var _settlementFee:Number;
        protected var _dealSummaryList:Array;
        protected var _dealSummaryTotal:DealSummaryTotalEquity;

        public function DealSummaryEquityResponseMessage(requestMessage:RequestMessage, source:Source, accountNumber:String, settlementFee:Number){
            super(MessageType.DEAL_SUMMARY_EQUITY_RESPONSE, System.EQUITY, requestMessage, source);
            this._settlementFee = settlementFee;
            this._dealSummaryList = new Array();
            this._dealSummaryTotal = null;
            this._accountNumber = accountNumber;
        }
        public function addDealSummary(dealSummary:DealSummaryEquity){
            this._dealSummaryList.push(dealSummary);
        }
        public function get dealSummaryList():Array{
            var obj:DealSummaryEquity;
            var tmpArray:Array = new Array();
            for each (obj in this._dealSummaryList) {
                tmpArray.push(obj);
            };
            return (tmpArray);
        }
        public function get dealSummaryTotal():DealSummaryTotalEquity{
            return (this._dealSummaryTotal);
        }
        public function set dealSummaryTotal(value:DealSummaryTotalEquity):void{
            this._dealSummaryTotal = value;
        }
        public function get settlementFee():Number{
            return (this._settlementFee);
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }

    }
}//package com.settrade.streaming5.message.response.dealsummary 
﻿package com.settrade.streaming5.message.response.dealsummary {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class DealSummaryDerivativesResponseMessage extends ResponseMessage {

        protected var _accountNumber:String;
        protected var _settlementDateCount:int;
        protected var _dealSummaryList:Array;

        public function DealSummaryDerivativesResponseMessage(requestMessage:RequestMessage, source:Source, accountNumber:String, settlementDateCount:int){
            super(MessageType.DEAL_SUMMARY_DERIVATIVES_RESPONSE, System.DERIV, requestMessage, source);
            this._settlementDateCount = settlementDateCount;
            this._dealSummaryList = new Array();
            this._accountNumber = accountNumber;
        }
        public function addDealSummary(dealSummary:DealSummaryDerivatives){
            this._dealSummaryList.push(dealSummary);
        }
        public function get dealSummaryList():Array{
            var obj:DealSummaryDerivatives;
            var tmpArray:Array = new Array();
            for each (obj in this._dealSummaryList) {
                tmpArray.push(obj);
            };
            return (tmpArray);
        }
        public function get settlementDateCount():int{
            return (this._settlementDateCount);
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }

    }
}//package com.settrade.streaming5.message.response.dealsummary 
﻿package com.settrade.streaming5.message.response.dealsummary {
    import com.settrade.streaming5.enumuration.*;

    public class DealSummaryEquity {

        protected var _instrumentId:String;
        protected var _orderSide:OrderSide;
        protected var _volume:int;
        protected var _averagePrice:Number;
        protected var _gross:Number;
        protected var _totalFee:Number;
        protected var _vat:Number;
        protected var _net:Number;

        public function DealSummaryEquity(instrumentId:String, orderSide:OrderSide, volume:Number, averagePrice:Number, gross:Number, totalFee:Number, vat:Number, net:Number){
            super();
            this._instrumentId = instrumentId;
            this._orderSide = orderSide;
            this._volume = volume;
            this._averagePrice = averagePrice;
            this._gross = gross;
            this._totalFee = totalFee;
            this._vat = vat;
            this._net = net;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get orderSide():OrderSide{
            return (this._orderSide);
        }
        public function get volume():int{
            return (this._volume);
        }
        public function get averagePrice():Number{
            return (this._averagePrice);
        }
        public function get gross():Number{
            return (this._gross);
        }
        public function get totalFee():Number{
            return (this._totalFee);
        }
        public function get vat():Number{
            return (this._vat);
        }
        public function get net():Number{
            return (this._net);
        }

    }
}//package com.settrade.streaming5.message.response.dealsummary 
﻿package com.settrade.streaming5.message.response.dealsummary {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class DealSummaryByAccountResponseMessage extends ResponseMessage {

        protected var _dealSummaryList:Array;

        public function DealSummaryByAccountResponseMessage(requestMessage:RequestMessage, source:Source){
            super(MessageType.DEAL_SUMMARY_BY_ACCOUNT_RESPONSE, System.NO_SYSTEM, requestMessage, source);
            this._dealSummaryList = new Array();
        }
        public function addDealSummary(dealSummary:DealSummaryByAccount){
            this._dealSummaryList.push(dealSummary);
        }
        public function get dealSummaryList():Array{
            var obj:DealSummaryByAccount;
            var tmpArray:Array = new Array();
            for each (obj in this._dealSummaryList) {
                tmpArray.push(obj);
            };
            return (tmpArray);
        }

    }
}//package com.settrade.streaming5.message.response.dealsummary 
﻿package com.settrade.streaming5.message.response.dealsummary {
    import com.settrade.streaming5.common.*;

    public class DealSummaryByAccount {

        protected var _account:Account;
        protected var _feeVat:Number;
        protected var _net:Number;

        public function DealSummaryByAccount(account:Account, feeVat:Number, net:Number){
            super();
            this._account = account;
            this._feeVat = feeVat;
            this._net = net;
        }
        public function get net():Number{
            return (this._net);
        }
        public function get feeVat():Number{
            return (this._feeVat);
        }
        public function get account():Account{
            return (this._account);
        }

    }
}//package com.settrade.streaming5.message.response.dealsummary 
﻿package com.settrade.streaming5.message.response.optionsgreekvalue {
    import com.settrade.streaming5.enumuration.*;

    public class OptionsGreekValue {

        protected var _instrumentId:String;
        protected var _optionsType:OptionsType;
        protected var _strikePrice:Number;
        protected var _prevSettle:Number;
        protected var _last:Number;
        protected var _change:Number;
        protected var _bidFlag:PriceType;
        protected var _askFlag:PriceType;
        protected var _bidPrice:Number;
        protected var _askPrice:Number;
        protected var _bidVolume:Number;
        protected var _askVolume:Number;
        protected var _totalVolume:Number;
        protected var _theoPrice:Number;
        protected var _diff:Number;
        protected var _implied:Number;
        protected var _delta:Number;
        protected var _gamma:Number;
        protected var _theta:Number;
        protected var _vega:Number;
        protected var _rho:Number;

        public function OptionsGreekValue(){
            super();
            this._instrumentId = "";
            this._optionsType = OptionsType.NO_TYPE;
            this._strikePrice = NaN;
            this._prevSettle = NaN;
            this._last = NaN;
            this._change = NaN;
            this._bidFlag = PriceType.NO_TYPE;
            this._askFlag = PriceType.NO_TYPE;
            this._bidPrice = NaN;
            this._askPrice = NaN;
            this._bidVolume = NaN;
            this._askVolume = NaN;
            this._totalVolume = NaN;
            this._theoPrice = NaN;
            this._diff = NaN;
            this._implied = NaN;
            this._delta = NaN;
            this._gamma = NaN;
            this._theta = NaN;
            this._vega = NaN;
            this._rho = NaN;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function set instrumentId(value:String):void{
            this._instrumentId = value;
        }
        public function get optionsType():OptionsType{
            return (this._optionsType);
        }
        public function set optionsType(value:OptionsType):void{
            this._optionsType = value;
        }
        public function get strikePrice():Number{
            return (this._strikePrice);
        }
        public function set strikePrice(value:Number):void{
            this._strikePrice = value;
        }
        public function get last():Number{
            return (this._last);
        }
        public function set last(value:Number):void{
            this._last = value;
        }
        public function get theoPrice():Number{
            return (this._theoPrice);
        }
        public function set theoPrice(value:Number):void{
            this._theoPrice = value;
        }
        public function get diff():Number{
            return (this._diff);
        }
        public function set diff(value:Number):void{
            this._diff = value;
        }
        public function get implied():Number{
            return (this._implied);
        }
        public function set implied(value:Number):void{
            this._implied = value;
        }
        public function get delta():Number{
            return (this._delta);
        }
        public function set delta(value:Number):void{
            this._delta = value;
        }
        public function get gamma():Number{
            return (this._gamma);
        }
        public function set gamma(value:Number):void{
            this._gamma = value;
        }
        public function get theta():Number{
            return (this._theta);
        }
        public function set theta(value:Number):void{
            this._theta = value;
        }
        public function get vega():Number{
            return (this._vega);
        }
        public function set vega(value:Number):void{
            this._vega = value;
        }
        public function get rho():Number{
            return (this._rho);
        }
        public function set rho(value:Number):void{
            this._rho = value;
        }
        public function get change():Number{
            return (this._change);
        }
        public function set change(value:Number):void{
            this._change = value;
        }
        public function get bidFlag():PriceType{
            return (this._bidFlag);
        }
        public function set bidFlag(value:PriceType):void{
            this._bidFlag = value;
        }
        public function get askFlag():PriceType{
            return (this._askFlag);
        }
        public function set askFlag(value:PriceType):void{
            this._askFlag = value;
        }
        public function get bidPrice():Number{
            return (this._bidPrice);
        }
        public function set bidPrice(value:Number):void{
            this._bidPrice = value;
        }
        public function get askPrice():Number{
            return (this._askPrice);
        }
        public function set askPrice(value:Number):void{
            this._askPrice = value;
        }
        public function get bidVolume():Number{
            return (this._bidVolume);
        }
        public function set bidVolume(value:Number):void{
            this._bidVolume = value;
        }
        public function get askVolume():Number{
            return (this._askVolume);
        }
        public function set askVolume(value:Number):void{
            this._askVolume = value;
        }
        public function get totalVolume():Number{
            return (this._totalVolume);
        }
        public function set totalVolume(value:Number):void{
            this._totalVolume = value;
        }
        public function get prevSettle():Number{
            return (this._prevSettle);
        }
        public function set prevSettle(value:Number):void{
            this._prevSettle = value;
        }
        public function toJsonObject():Object{
            var obj:Object = new Object();
            obj.instrumentId = this.instrumentId;
            obj.optionsType = this.optionsType.id;
            obj.strikePrice = this.strikePrice;
            obj.prevSettle = this.prevSettle;
            obj.last = this.last;
            obj.change = this.change;
            obj.bidFlag = this.bidFlag;
            obj.askFlag = this.askFlag;
            obj.bidPrice = this.bidPrice;
            obj.askPrice = this.askPrice;
            obj.bidVolume = this.bidVolume;
            obj.askVolume = this.askVolume;
            obj.totalVolume = this.totalVolume;
            obj.theoPrice = this.theoPrice;
            obj.diff = this.diff;
            obj.implied = this.implied;
            obj.delta = this.delta;
            obj.gamma = this.gamma;
            obj.theta = this.theta;
            obj.vega = this.vega;
            obj.rho = this.rho;
            return (obj);
        }
        public function toJsonString():String{
            return (JSON.stringify(this.toJsonObject()));
        }

    }
}//package com.settrade.streaming5.message.response.optionsgreekvalue 
﻿package com.settrade.streaming5.message.response.optionsgreekvalue {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class OptionsExpireDateResponseMessage extends DataProviderJsonResponseMessage {

        protected var _expireDateList:Array;

        public function OptionsExpireDateResponseMessage(requestMessage:RequestMessage, source:Source, expireDateList:Array){
            super(MessageType.OPTIONS_EXPIRE_DATE_RESPONSE, System.REALTIME, requestMessage, source);
            this._expireDateList = expireDateList;
        }
        public function get expireDateList():Array{
            return (this._expireDateList);
        }

    }
}//package com.settrade.streaming5.message.response.optionsgreekvalue 
﻿package com.settrade.streaming5.message.response.optionsgreekvalue {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class OptionsGreekDefaultValueResponseMessage extends ResponseMessage {

        protected var _underlyingPrice:Number;
        protected var _volatility:Number;
        protected var _remainDay:int;
        protected var _interestRate:Number;
        protected var _dividend:Number;

        public function OptionsGreekDefaultValueResponseMessage(requestMessage:RequestMessage, source:Source, underlyingPrice:Number, volatility:Number, remainDay:int, interestRate:Number, dividend:Number){
            super(MessageType.OPTIONS_GREEK_DEFAULT_VALUE_RESPONSE, System.REALTIME, requestMessage, source);
            this._underlyingPrice = underlyingPrice;
            this._volatility = volatility;
            this._remainDay = remainDay;
            this._interestRate = interestRate;
            this._dividend = dividend;
        }
        public function get underlyingPrice():Number{
            return (this._underlyingPrice);
        }
        public function get volatility():Number{
            return (this._volatility);
        }
        public function get remainDay():int{
            return (this._remainDay);
        }
        public function get interestRate():Number{
            return (this._interestRate);
        }
        public function get dividend():Number{
            return (this._dividend);
        }

    }
}//package com.settrade.streaming5.message.response.optionsgreekvalue 
﻿package com.settrade.streaming5.message.response.optionsgreekvalue {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class OptionsGreekValueResponseMessage extends ResponseMessage {

        protected var _expireDate:String;
        protected var _underlyingPrice:Number;
        protected var _volatility:Number;
        protected var _remainDay:int;
        protected var _interestRate:Number;
        protected var _dividend:Number;
        protected var _instrumentList:Array;

        public function OptionsGreekValueResponseMessage(requestMessage:RequestMessage, source:Source, expireDate:String, underlyingPrice:Number, volatility:Number, remainDay:int, interestRate:Number, divident:Number, instrumentList:Array){
            super(MessageType.OPTIONS_GREEK_VALUE_RESPONSE, System.REALTIME, requestMessage, source);
            this._expireDate = expireDate;
            this._underlyingPrice = underlyingPrice;
            this._volatility = volatility;
            this._remainDay = remainDay;
            this._interestRate = interestRate;
            this._dividend = this.dividend;
            this._instrumentList = instrumentList;
        }
        public function get expireDate():String{
            return (this._expireDate);
        }
        public function get underlyingPrice():Number{
            return (this._underlyingPrice);
        }
        public function get volatility():Number{
            return (this._volatility);
        }
        public function get remainDay():int{
            return (this._remainDay);
        }
        public function get interestRate():Number{
            return (this._interestRate);
        }
        public function get dividend():Number{
            return (this._dividend);
        }
        public function get instrumentList():Array{
            return (this._instrumentList);
        }

    }
}//package com.settrade.streaming5.message.response.optionsgreekvalue 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class StaticDataResponseMessage extends ResponseMessage {

        protected var _ceiling:Number;
        protected var _floor:Number;
        protected var _spread:Number;
        protected var _last:Number;
        protected var _close:Number;
        protected var _firstBid:Number;
        protected var _firstAsk:Number;
        protected var _priceDigit:int;

        public function StaticDataResponseMessage(requestMessage:RequestMessage, source:Source, ceiling:Number, floor:Number, spread:Number, last:Number, close:Number, firstBid:Number, firstAsk:Number, priceDigit:int){
            super(MessageType.STATIC_DATA_RESPONSE, System.REALTIME, requestMessage, source);
            this._ceiling = ceiling;
            this._floor = floor;
            this._spread = spread;
            this._last = last;
            this._close = close;
            this._firstBid = firstBid;
            this._firstAsk = firstAsk;
            this._priceDigit = priceDigit;
        }
        public function get ceiling():Number{
            return (this._ceiling);
        }
        public function get floor():Number{
            return (this._floor);
        }
        public function get spread():Number{
            return (this._spread);
        }
        public function get last():Number{
            return (this._last);
        }
        public function get close():Number{
            return (this._close);
        }
        public function get firstBid():Number{
            return (this._firstBid);
        }
        public function get firstAsk():Number{
            return (this._firstAsk);
        }
        public function get priceDigit():int{
            return (this._priceDigit);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;

    public class PlaceOrderDerivativesFailResponseMessage extends ResponseMessage implements IFailMessage {

        protected var _message:String;

        public function PlaceOrderDerivativesFailResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.PLACE_ORDER_DERIVATIVES_FAIL_RESPONSE, System.DERIV, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;

    public class BlockTradeFailResponseMessage extends ResponseMessage implements IFailMessage {

        protected var _message:String;

        public function BlockTradeFailResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.BLOCK_TRADE_FAIL_RESPONSE, System.DERIV, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response.blocktrade {

    public class Cpm {

        protected var _brokerId:String;
        protected var _code:String;

        public function Cpm(brokerId:String, code:String){
            super();
            this._brokerId = brokerId;
            this._code = code;
        }
        public function get brokerId():String{
            return (this._brokerId);
        }
        public function get code():String{
            return (this._code);
        }

    }
}//package com.settrade.streaming5.message.response.blocktrade 
﻿package com.settrade.streaming5.message.response.blocktrade {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class BlockTradeTrTypeResponseMessage extends ResponseMessage {

        protected var _trClass:Array;

        public function BlockTradeTrTypeResponseMessage(requestMessage:RequestMessage, source:Source, trClass:Array){
            super(MessageType.BLOCK_TRADE_TRTYPE_RESPONSE, System.DERIV, requestMessage, source);
            this._trClass = trClass;
        }
        public function get trClass():Array{
            return (this._trClass.slice(0));
        }

    }
}//package com.settrade.streaming5.message.response.blocktrade 
﻿package com.settrade.streaming5.message.response.blocktrade {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class BlockTradeInfoResponseMessage extends ResponseMessage {

        protected var _blockTradeInfoList:Array;
        protected var _blockTradeInfoSummaryList:Array;

        public function BlockTradeInfoResponseMessage(requestMessage:RequestMessage, source:Source){
            super(MessageType.BLOCK_TRADE_INFO_RESPONSE, System.DERIV, requestMessage, source);
            this._blockTradeInfoList = new Array();
            this._blockTradeInfoSummaryList = new Array();
        }
        public function add(info:BlockTradeInfo):void{
            this._blockTradeInfoList.push(info);
        }
        public function addSummary(info:BlockTradeInfo):void{
            this._blockTradeInfoSummaryList.push(info);
        }
        public function get blockTradeInfoList():Array{
            return (this._blockTradeInfoList.slice(0));
        }
        public function get blockTradeInfoSummaryList():Array{
            return (this._blockTradeInfoSummaryList.slice(0));
        }

    }
}//package com.settrade.streaming5.message.response.blocktrade 
﻿package com.settrade.streaming5.message.response.blocktrade {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class BlockTradeInitResponseMessage extends ResponseMessage {

        protected var _cpmList:Array;
        protected var _brokerCpm:Cpm;
        protected var _trTypeList:Array;

        public function BlockTradeInitResponseMessage(requestMessage:RequestMessage, source:Source){
            super(MessageType.BLOCK_TRADE_INIT_RESPONSE, System.DERIV, requestMessage, source);
            this._cpmList = new Array();
            this._trTypeList = new Array();
        }
        public function addCpm(cpm:Cpm):void{
            this._cpmList.push(cpm);
        }
        public function addTrType(trType:TrType):void{
            this._trTypeList.push(trType);
        }
        public function get cpmList():Array{
            return (this._cpmList);
        }
        public function get trTypeList():Array{
            return (this._trTypeList);
        }
        public function get userCpm():Cpm{
            return (this.brokerCpm);
        }
        public function get brokerCpm():Cpm{
            return (this._brokerCpm);
        }
        public function set brokerCpm(value:Cpm):void{
            this._brokerCpm = value;
        }
        public function getTrListByClassName(className:String):Array{
            var trType:TrType;
            var filterList:Array = new Array();
            for each (trType in this._trTypeList) {
                if (trType.className == className){
                    filterList.push(trType);
                };
            };
            return (filterList);
        }

    }
}//package com.settrade.streaming5.message.response.blocktrade 
﻿package com.settrade.streaming5.message.response.blocktrade {

    public class BlockTradeInfo {

        protected var _instrumentId:String;
        protected var _price:Number;
        protected var _priceDigit:int;
        protected var _volume:int;
        protected var _time:String;
        protected var _prevSettle:Number;
        protected var _deal:int;

        public function BlockTradeInfo(instrumentId:String, price:Number, priceDigit:int, volume:int, time:String, prevSettle:Number, deal:int){
            super();
            this._instrumentId = instrumentId;
            this._price = price;
            this._priceDigit = priceDigit;
            this._time = time;
            this._volume = volume;
            this._prevSettle = prevSettle;
            this._deal = deal;
        }
        public function get volume():int{
            return (this._volume);
        }
        public function get time():String{
            return (this._time);
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get priceDigit():int{
            return (this._priceDigit);
        }
        public function get price():Number{
            return (this._price);
        }
        public function get prevSettle():Number{
            return (this._prevSettle);
        }
        public function get deal():int{
            return (this._deal);
        }

    }
}//package com.settrade.streaming5.message.response.blocktrade 
﻿package com.settrade.streaming5.message.response.blocktrade {

    public class TrType {

        protected var _condition:String;
        protected var _className:String;
        protected var _type:String;

        public function TrType(condition:String, className:String, type:String){
            super();
            this._condition = condition;
            this._className = className;
            this._type = type;
        }
        public function get condition():String{
            return (this._condition);
        }
        public function get className():String{
            return (this._className);
        }
        public function get type():String{
            return (this._type);
        }

    }
}//package com.settrade.streaming5.message.response.blocktrade 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class OrderStatusPushResponseMessage extends ResponseMessage {

        public function OrderStatusPushResponseMessage(requestMessage:RequestMessage, source:Source){
            super(MessageType.ORDER_STATUS_PUSH_RESPONSE, System.REALTIME, requestMessage, source);
        }
    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class PlaceOrderEquityWarnResponseMessage extends ResponseMessage {

        protected var _message:String;

        public function PlaceOrderEquityWarnResponseMessage(requestMessage:RequestMessage, source:Source, message:String){
            super(MessageType.PLACE_ORDER_EQUITY_WARN_RESPONSE, System.EQUITY, requestMessage, source);
            this._message = message;
        }
        public function get message():String{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response.setcalendar {

    public class SetCalendarDetailXRXW extends SetCalendarDetail {

        protected var _boardDate:String;
        protected var _allotShare:Number;
        protected var _ratio:String;
        protected var _period:String;
        protected var _description:String;
        protected var _priceOnX:String;

        public function SetCalendarDetailXRXW(){
            super();
            this._boardDate = "";
            this._allotShare = NaN;
            this._ratio = "";
            this._period = "";
            this._description = "";
            this._priceOnX = "";
        }
        public function get boardDate():String{
            return (this._boardDate);
        }
        public function set boardDate(value:String):void{
            this._boardDate = value;
        }
        public function get allotShare():Number{
            return (this._allotShare);
        }
        public function set allotShare(value:Number):void{
            this._allotShare = value;
        }
        public function get ratio():String{
            return (this._ratio);
        }
        public function set ratio(value:String):void{
            this._ratio = value;
        }
        public function get period():String{
            return (this._period);
        }
        public function set period(value:String):void{
            this._period = value;
        }
        public function get description():String{
            return (this._description);
        }
        public function set description(value:String):void{
            this._description = value;
        }
        public function get priceOnX():String{
            return (this._priceOnX);
        }
        public function set priceOnX(value:String):void{
            this._priceOnX = value;
        }
        override public function toJsonObject():Object{
            var object:Array = new Array();
            object.push({
                label:"Board Date",
                value:this._boardDate
            });
            object.push({
                label:"Allot Share",
                value:this._allotShare
            });
            object.push({
                label:"Ratio",
                value:this._ratio
            });
            object.push({
                label:"Period",
                value:this._period
            });
            object.push({
                label:"Description",
                value:this._description
            });
            object.push({
                label:"Price on X",
                value:this._priceOnX
            });
            return (object);
        }

    }
}//package com.settrade.streaming5.message.response.setcalendar 
﻿package com.settrade.streaming5.message.response.setcalendar {

    public class SetCalendarDetailXD extends SetCalendarDetail {

        protected var _period:String;
        protected var _value:String;
        protected var _payDate:String;
        protected var _payType:String;
        protected var _priceOnX:String;
        protected var _priceBeforeX:String;

        public function SetCalendarDetailXD(){
            super();
            this._period = "";
            this._value = "";
            this._payDate = "";
            this._payType = "";
            this._priceOnX = "";
            this._priceBeforeX = "";
        }
        public function get period():String{
            return (this._period);
        }
        public function set period(value:String):void{
            this._period = value;
        }
        public function get value():String{
            return (this._value);
        }
        public function set value(value:String):void{
            this._value = value;
        }
        public function get payDate():String{
            return (this._payDate);
        }
        public function set payDate(value:String):void{
            this._payDate = value;
        }
        public function get payType():String{
            return (this._payType);
        }
        public function set payType(value:String):void{
            this._payType = value;
        }
        public function get priceOnX():String{
            return (this._priceOnX);
        }
        public function set priceOnX(value:String):void{
            this._priceOnX = value;
        }
        public function get priceBeforeX():String{
            return (this._priceBeforeX);
        }
        public function set priceBeforeX(value:String):void{
            this._priceBeforeX = value;
        }
        override public function toJsonObject():Object{
            var object:Array = new Array();
            object.push({
                label:"Period",
                value:this._period
            });
            object.push({
                label:"Value",
                value:this._value
            });
            object.push({
                label:"Payment Date",
                value:this._payDate
            });
            object.push({
                label:"Payment Type",
                value:this._payType
            });
            object.push({
                label:"Price on X",
                value:this._priceOnX
            });
            object.push({
                label:"Price before X",
                value:this._priceBeforeX
            });
            return (object);
        }

    }
}//package com.settrade.streaming5.message.response.setcalendar 
﻿package com.settrade.streaming5.message.response.setcalendar {

    public class SetCalendarDetailXE extends SetCalendarDetail {

        protected var _bookCloseDate:String;
        protected var _period:String;
        protected var _price:String;
        protected var _ratio:String;
        protected var _exerciseShare:Number;
        protected var _newlyShare:Number;

        public function SetCalendarDetailXE(){
            super();
            this._bookCloseDate = "";
            this._period = "";
            this._price = "";
            this._ratio = "";
            this._exerciseShare = NaN;
            this._newlyShare = NaN;
        }
        public function get bookCloseDate():String{
            return (this._bookCloseDate);
        }
        public function set bookCloseDate(value:String):void{
            this._bookCloseDate = value;
        }
        public function get period():String{
            return (this._period);
        }
        public function set period(value:String):void{
            this._period = value;
        }
        public function get price():String{
            return (this._price);
        }
        public function set price(value:String):void{
            this._price = value;
        }
        public function get ratio():String{
            return (this._ratio);
        }
        public function set ratio(value:String):void{
            this._ratio = value;
        }
        public function get exerciseShare():Number{
            return (this._exerciseShare);
        }
        public function set exerciseShare(value:Number):void{
            this._exerciseShare = value;
        }
        public function get newlyShare():Number{
            return (this._newlyShare);
        }
        public function set newlyShare(value:Number):void{
            this._newlyShare = value;
        }
        override public function toJsonObject():Object{
            var object:Array = new Array();
            object.push({
                label:"Book Close Date",
                value:this._bookCloseDate
            });
            object.push({
                label:"Period",
                value:this._period
            });
            object.push({
                label:"Price",
                value:this._price
            });
            object.push({
                label:"Ratio",
                value:this._ratio
            });
            object.push({
                label:"Exercise Share",
                value:this._exerciseShare
            });
            object.push({
                label:"Newly Share",
                value:this._newlyShare
            });
            return (object);
        }

    }
}//package com.settrade.streaming5.message.response.setcalendar 
﻿package com.settrade.streaming5.message.response.setcalendar {

    public class SetCalendarDetailXN extends SetCalendarDetail {

        protected var _bookCloseDate:String;
        protected var _capitalReturn:String;
        protected var _paymentDate:String;
        protected var _priceBeforeX:String;
        protected var _priceOnX:String;

        public function SetCalendarDetailXN(){
            super();
            this._bookCloseDate = "";
            this._capitalReturn = "";
            this._paymentDate = "";
            this._priceBeforeX = "";
            this._priceOnX = "";
        }
        override public function toJsonObject():Object{
            var object:Array = new Array();
            object.push({
                label:"Book Close Date",
                value:this._bookCloseDate
            });
            object.push({
                label:"Capital Return",
                value:this._capitalReturn
            });
            object.push({
                label:"Payment Date",
                value:this._paymentDate
            });
            object.push({
                label:"Price before X",
                value:this._priceBeforeX
            });
            object.push({
                label:"Price on X",
                value:this._priceOnX
            });
            return (object);
        }
        public function get bookCloseDate():String{
            return (this._bookCloseDate);
        }
        public function set bookCloseDate(value:String):void{
            this._bookCloseDate = value;
        }
        public function get capitalReturn():String{
            return (this._capitalReturn);
        }
        public function set capitalReturn(value:String):void{
            this._capitalReturn = value;
        }
        public function get paymentDate():String{
            return (this._paymentDate);
        }
        public function set paymentDate(value:String):void{
            this._paymentDate = value;
        }
        public function get priceBeforeX():String{
            return (this._priceBeforeX);
        }
        public function set priceBeforeX(value:String):void{
            this._priceBeforeX = value;
        }
        public function get priceOnX():String{
            return (this._priceOnX);
        }
        public function set priceOnX(value:String):void{
            this._priceOnX = value;
        }

    }
}//package com.settrade.streaming5.message.response.setcalendar 
﻿package com.settrade.streaming5.message.response.setcalendar {

    public class SetCalendarDetail {

        public function SetCalendarDetail(){
            super();
        }
        public function toJsonObject():Object{
            return (new Object());
        }

    }
}//package com.settrade.streaming5.message.response.setcalendar 
﻿package com.settrade.streaming5.message.response.setcalendar {

    public class SetCalendarDetailXB extends SetCalendarDetail {

        protected var _bookCloseDate:String;
        protected var _ratio:String;
        protected var _typeOfBenefit:String;
        protected var _subsidiaryCompany:String;
        protected var _remark:String;

        public function SetCalendarDetailXB(){
            super();
            this._bookCloseDate = "";
            this._ratio = "";
            this._typeOfBenefit = "";
            this._subsidiaryCompany = "";
            this._remark = "";
        }
        override public function toJsonObject():Object{
            var object:Array = new Array();
            object.push({
                label:"Book Close Date",
                value:this._bookCloseDate
            });
            object.push({
                label:"Ratio",
                value:this._ratio
            });
            object.push({
                label:"Type of Benefit",
                value:this._typeOfBenefit
            });
            object.push({
                label:"Subsidiary Company",
                value:this._subsidiaryCompany
            });
            object.push({
                label:"Remark",
                value:this._remark
            });
            return (object);
        }
        public function get bookCloseDate():String{
            return (this._bookCloseDate);
        }
        public function set bookCloseDate(value:String):void{
            this._bookCloseDate = value;
        }
        public function get ratio():String{
            return (this._ratio);
        }
        public function set ratio(value:String):void{
            this._ratio = value;
        }
        public function get typeOfBenefit():String{
            return (this._typeOfBenefit);
        }
        public function set typeOfBenefit(value:String):void{
            this._typeOfBenefit = value;
        }
        public function get subsidiaryCompany():String{
            return (this._subsidiaryCompany);
        }
        public function set subsidiaryCompany(value:String):void{
            this._subsidiaryCompany = value;
        }
        public function get remark():String{
            return (this._remark);
        }
        public function set remark(value:String):void{
            this._remark = value;
        }

    }
}//package com.settrade.streaming5.message.response.setcalendar 
﻿package com.settrade.streaming5.message.response.setcalendar {

    public class SetCalendarDetailXM extends SetCalendarDetail {

        protected var _date:String;
        protected var _agenda:String;
        protected var _venue:String;

        public function SetCalendarDetailXE(){
            this._date = "";
            this._agenda = "";
            this._venue = "";
        }
        public function get date():String{
            return (this._date);
        }
        public function set date(value:String):void{
            this._date = value;
        }
        public function get agenda():String{
            return (this._agenda);
        }
        public function set agenda(value:String):void{
            this._agenda = value;
        }
        public function get venue():String{
            return (this._venue);
        }
        public function set venue(value:String):void{
            this._venue = value;
        }
        override public function toJsonObject():Object{
            var object:Array = new Array();
            object.push({
                label:"Date",
                value:this._date
            });
            object.push({
                label:"Agenda",
                value:this._agenda
            });
            object.push({
                label:"Venue",
                value:this._venue
            });
            return (object);
        }

    }
}//package com.settrade.streaming5.message.response.setcalendar 
﻿package com.settrade.streaming5.message.response.setcalendar {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;

    public class SetCalendar {

        protected var _instrumentId:String;
        protected var _day:int;
        protected var _date:Date;
        protected var _eventType:CalendarType;
        protected var _hasDetail:Boolean;
        protected var _detail:SetCalendarDetail;

        public function SetCalendar(){
            super();
            this._instrumentId = "";
            this._day = -1;
            this._eventType = CalendarType.NO_TYPE;
            this._hasDetail = false;
            this._detail = null;
            this._date = null;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function set instrumentId(value:String):void{
            this._instrumentId = value;
        }
        public function get day():int{
            return (this._day);
        }
        public function set day(value:int):void{
            this._day = value;
        }
        public function get eventType():CalendarType{
            return (this._eventType);
        }
        public function set eventType(value:CalendarType):void{
            this._eventType = value;
        }
        public function get hasDetail():Boolean{
            return (this._hasDetail);
        }
        public function set hasDetail(value:Boolean):void{
            this._hasDetail = value;
        }
        public function get detail():SetCalendarDetail{
            return (this._detail);
        }
        public function set detail(value:SetCalendarDetail):void{
            this._detail = value;
        }
        public function get date():Date{
            return (this._date);
        }
        public function set date(value:Date):void{
            this._date = value;
        }
        public function toJsonObject():Object{
            var obj:Object = new Object();
            obj.instrumentId = this.instrumentId;
            obj.eventType = this.eventType.name;
            obj.detail = this.detail.toJsonObject();
            obj.date = StreamingTimeFormatter.DATE_SLASH_FORMAT.format(this.date);
            return (obj);
        }
        public function toJsonString():String{
            return (JSON.stringify(this.toJsonObject()));
        }

    }
}//package com.settrade.streaming5.message.response.setcalendar 
﻿package com.settrade.streaming5.message.response.setcalendar {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class SetCalendarResponseMessage extends ResponseMessage {

        protected var _month:int;
        protected var _year:int;
        protected var _dataList:Array;

        public function SetCalendarResponseMessage(requestMessage:RequestMessage, source:Source){
            super(MessageType.SET_CALENDAR_RESPONSE, System.REALTIME, requestMessage, source);
            this._month = -1;
            this._year = -1;
            this._dataList = new Array();
        }
        public function get month():int{
            return (this._month);
        }
        public function get year():int{
            return (this._year);
        }
        public function get dataList():Array{
            return (this._dataList);
        }
        public function set dataList(value:Array):void{
            this._dataList = value;
        }
        public function set month(value:int):void{
            this._month = value;
        }
        public function set year(value:int):void{
            this._year = value;
        }

    }
}//package com.settrade.streaming5.message.response.setcalendar 
﻿package com.settrade.streaming5.message.response.historicalchart {

    public class HistoricalChartData {

        protected var _day:int;
        protected var _month:int;
        protected var _year:int;
        protected var _value:Number;
        protected var _volume:Number;

        public function HistoricalChartData(){
            super();
            this._day = 1;
            this._month = 1;
            this._year = 1980;
            this._value = NaN;
            this._volume = NaN;
        }
        public function clone():HistoricalChartData{
            var clone:HistoricalChartData = new HistoricalChartData();
            clone.day = this.day;
            clone.month = this.month;
            clone.year = this.year;
            clone.value = this.value;
            clone.volume = this.volume;
            return (clone);
        }
        public function get date():Date{
            var date:Date = new Date();
            date.setFullYear(this._year, (this._month - 1), this._day);
            date.setHours(0, 0, 0, 0);
            return (date);
        }
        public function get day():int{
            return (this._day);
        }
        public function set day(value:int):void{
            this._day = value;
        }
        public function get month():int{
            return (this._month);
        }
        public function set month(value:int):void{
            this._month = value;
        }
        public function get year():int{
            return (this._year);
        }
        public function set year(value:int):void{
            this._year = value;
        }
        public function get value():Number{
            return (this._value);
        }
        public function set value(value:Number):void{
            this._value = value;
        }
        public function get volume():Number{
            return (this._volume);
        }
        public function set volume(value:Number):void{
            this._volume = value;
        }

    }
}//package com.settrade.streaming5.message.response.historicalchart 
﻿package com.settrade.streaming5.message.response.historicalchart {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class HistoricalChartResponseMessage extends ResponseMessage {

        protected var _instrumentId:String;
        protected var _data:Array;
        protected var _spread:Number;

        public function HistoricalChartResponseMessage(requestMessage:RequestMessage, source:Source){
            super(MessageType.HISTORICAL_CHART_RESPONSE, System.REALTIME, requestMessage, source);
            this._instrumentId = "";
            this._data = new Array();
            this._spread = NaN;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function set instrumentId(value:String):void{
            this._instrumentId = value;
        }
        public function addChartData(historicalChartData:HistoricalChartData):void{
            this._data.push(historicalChartData);
        }
        public function get data():Array{
            var obj:Object;
            var tmp:Array = new Array();
            for each (obj in this._data) {
                tmp.push(obj);
            };
            return (tmp);
        }
        public function set data(value:Array):void{
            this._data = value;
        }
        public function get spread():Number{
            return (this._spread);
        }
        public function set spread(value:Number):void{
            this._spread = value;
        }
        public function clone():HistoricalChartResponseMessage{
            var historicalChartData:HistoricalChartData;
            var clone:HistoricalChartResponseMessage = new HistoricalChartResponseMessage(this.requestMessage, this.source);
            clone.instrumentId = this.instrumentId;
            var cloneList:Array = new Array();
            for each (historicalChartData in this.data) {
                cloneList.push(historicalChartData.clone());
            };
            clone.data = cloneList;
            return (clone);
        }

    }
}//package com.settrade.streaming5.message.response.historicalchart 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;

    public class OptionsStrikePriceListResponseMessage extends ResponseMessage {

        protected var _expireDate:String;
        protected var _fullDate:String;
        protected var _daysToExpire:int;
        protected var _strikePriceList:Array;

        public function OptionsStrikePriceListResponseMessage(requestMessage:RequestMessage, source:Source, expireDate:String, fullDate:String, daysToExpire:int, strikePriceList:Array){
            super(MessageType.OPTIONS_STRIKE_PRICE_LIST_RESPONE, System.REALTIME, requestMessage, source);
            this._expireDate = expireDate;
            this._fullDate = fullDate;
            this._daysToExpire = daysToExpire;
            this._strikePriceList = strikePriceList;
        }
        public function get expireDate():String{
            return (this._expireDate);
        }
        public function get fullDate():String{
            return (this._fullDate);
        }
        public function get daysToExpire():int{
            return (this._daysToExpire);
        }
        public function get strikePriceList():Array{
            return (this._strikePriceList);
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.request.multipleorder.*;

    public class MultipleOrderEquityResponseMessage extends ResponseMessage {

        protected var _multipleOrderList:Array;

        public function MultipleOrderEquityResponseMessage(requestMessage:RequestMessage, source:Source){
            super(MessageType.MULTIPLE_ORDER_EQUITY_RESPONSE, System.EQUITY, requestMessage, source);
            this._multipleOrderList = new Array();
        }
        public function addMultipleOrder(order:MultipleOrderEquity):void{
            this._multipleOrderList.push(order);
        }
        public function get multipleOrderList():Array{
            return (this._multipleOrderList.slice(0));
        }

    }
}//package com.settrade.streaming5.message.response 
﻿package com.settrade.streaming5.message {
    import com.settrade.streaming5.connection.common.*;

    public interface IUrlSerializable {

        function toURLVariable():StreamingURLVariables;

    }
}//package com.settrade.streaming5.message 
﻿package com.settrade.streaming5.message {
    import com.settrade.streaming5.enumuration.*;
    import __AS3__.vec.*;

    public class MultipleMessage extends Message implements IMultipleMessage {

        protected var _messageList:Vector.<Message>;

        public function MultipleMessage(){
            super(MessageType.MULTIPLE, MessageSide.NO_SIDE, System.NO_SYSTEM);
            this._messageList = new Vector.<Message>();
        }
        public function add(message:Message):void{
            if (message != this){
                this._messageList.push(message);
            };
        }
        public function addAll(list:Vector.<Message>):void{
            var message:Message;
            for each (message in list) {
                this.add(message);
            };
        }
        public function get messageList():Vector.<Message>{
            return (this._messageList);
        }

    }
}//package com.settrade.streaming5.message 
﻿package com.settrade.streaming5.message.control {
    import com.settrade.streaming5.enumuration.*;

    public class PageStatusMessage extends ControlMessage {

        protected var _pageName:String;
        protected var _url:String;
        protected var _status:PageStatus;

        public function PageStatusMessage(pageName:String, url:String, status:PageStatus){
            super(MessageType.PAGE_STATUS);
            this._pageName = pageName;
            this._url = url;
            this._status = status;
        }
        public function get url():String{
            return (this._url);
        }
        public function get status():PageStatus{
            return (this._status);
        }
        public function get pageName():String{
            return (this._pageName);
        }

    }
}//package com.settrade.streaming5.message.control 
﻿package com.settrade.streaming5.message.control {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.config.*;

    public class ConfigChangeMessage extends ControlMessage {

        protected var _config:IConfig;

        public function ConfigChangeMessage(config:IConfig){
            super(MessageType.CONFIG_CHANGE);
            this._config = config;
        }
        public function get config():IConfig{
            return (this._config);
        }

    }
}//package com.settrade.streaming5.message.control 
﻿package com.settrade.streaming5.message.control {
    import com.settrade.streaming5.enumuration.*;

    public class FeedStatusMessage extends ControlMessage {

        protected var _host:String;
        protected var _state:FeedState;
        protected var _status:FeedStatus;

        public function FeedStatusMessage(host:String, state:FeedState, status:FeedStatus){
            super(MessageType.FEED_STATUS);
            this._host = host;
            this._state = state;
            this._status = status;
        }
        public function get host():String{
            return (this._host);
        }
        public function get state():FeedState{
            return (this._state);
        }
        public function get status():FeedStatus{
            return (this._status);
        }

    }
}//package com.settrade.streaming5.message.control 
﻿package com.settrade.streaming5.message.control {
    import com.settrade.streaming5.enumuration.*;

    public class NotifyPlaceInstrumentIdMessage extends ControlMessage {

        protected var _instrumentId:String;

        public function NotifyPlaceInstrumentIdMessage(instrumentId:String){
            super(MessageType.NOTIFY_PLACE_INSTRUMENT_ID);
            this._instrumentId = instrumentId;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }

    }
}//package com.settrade.streaming5.message.control 
﻿package com.settrade.streaming5.message.control {
    import com.settrade.streaming5.enumuration.*;

    public class ThemeChangeMessage extends ControlMessage {

        public function ThemeChangeMessage(){
            super(MessageType.THEME_CHANGE);
        }
    }
}//package com.settrade.streaming5.message.control 
﻿package com.settrade.streaming5.message.control {
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;

    public class PopupStateChangeMessage extends ControlMessage {

        protected var _newState:PopupState;
        protected var _popupComponent:DisplayObject;

        public function PopupStateChangeMessage(newState:PopupState, popupComponent:DisplayObject=null){
            super(MessageType.POPUP_STATE_CHANGE);
            this._newState = newState;
            this._popupComponent = popupComponent;
        }
        public function get newState():PopupState{
            return (this._newState);
        }
        public function get popupComponent():DisplayObject{
            return (this._popupComponent);
        }

    }
}//package com.settrade.streaming5.message.control 
﻿package com.settrade.streaming5.message.control {
    import com.settrade.streaming5.language.*;
    import com.settrade.streaming5.enumuration.*;

    public class ChangeLanguageMessage extends ControlMessage {

        protected var _language:ILanguageConfig;

        public function ChangeLanguageMessage(language:ILanguageConfig){
            super(MessageType.CHANGE_LANGUAGE);
            this._language = language;
        }
        public function get language():ILanguageConfig{
            return (this._language);
        }

    }
}//package com.settrade.streaming5.message.control 
﻿package com.settrade.streaming5.message.control {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.message.request.*;

    public class HttpFailedResponseMessage extends ControlMessage implements IFailMessage {

        protected var _code:int;
        protected var _source:RequestMessage;

        public function HttpFailedResponseMessage(code:int, requestMessage:RequestMessage){
            super(MessageType.HTTP_FAIL);
            this._code = code;
            this._source = requestMessage;
        }
        public function get message():String{
            return (LanguageManager.currentLanguageConfig.ALERT_CANNOT_CONNECT);
        }
        public function get requestMessage():RequestMessage{
            return (this._source);
        }
        public function get code():int{
            return (this._code);
        }
        public function get requestId():Number{
            if (this.requestMessage != null){
                return (this.requestMessage.id);
            };
            return (NaN);
        }

    }
}//package com.settrade.streaming5.message.control 
﻿package com.settrade.streaming5.message.control {
    import com.settrade.streaming5.enumuration.*;

    public class FeedManagerStatusMessage extends ControlMessage {

        protected var _oldStatus:FeedManagerState;
        protected var _status:FeedManagerState;

        public function FeedManagerStatusMessage(oldStatus:FeedManagerState, status:FeedManagerState){
            super(MessageType.FEED_MANAGER_STATUS);
            this._oldStatus = oldStatus;
            this._status = status;
        }
        public function get oldStatus():FeedManagerState{
            return (this._oldStatus);
        }
        public function get status():FeedManagerState{
            return (this._status);
        }

    }
}//package com.settrade.streaming5.message.control 
﻿package com.settrade.streaming5.message.control {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.common.*;

    public class AccountChangeMessage extends ControlMessage {

        protected var _oldAccount:Account;
        protected var _newAccount:Account;

        public function AccountChangeMessage(oldAccount:Account, newAccount:Account){
            super(MessageType.ACCOUNT_CHANGE);
            this._oldAccount = oldAccount;
            this._newAccount = newAccount;
        }
        public function get oldAccount():Account{
            return (this._oldAccount);
        }
        public function get newAccount():Account{
            return (this._newAccount);
        }

    }
}//package com.settrade.streaming5.message.control 
﻿package com.settrade.streaming5.message.control {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.request.*;

    public class InvalidParseMessage extends ControlMessage implements IFailMessage {

        protected var _rawMessage:IRawMessage;
        protected var _parseMessage:IMessage;
        protected var _requestMessage:RequestMessage;

        public function InvalidParseMessage(rawMessage:IRawMessage, parseMessage:IMessage=null, requestMessage:RequestMessage=null){
            super(MessageType.INVALID_PARSE);
            this._rawMessage = rawMessage;
            this._parseMessage = parseMessage;
            this._requestMessage = requestMessage;
        }
        public function get message():String{
            return (LanguageManager.currentLanguageConfig.ALERT_CANNOT_CONNECT);
        }
        public function get rawMessage():IRawMessage{
            return (this._rawMessage);
        }
        public function get parseMessage():IMessage{
            return (this._parseMessage);
        }
        public function get requestMessage():RequestMessage{
            return (this._requestMessage);
        }
        public function get requestId():Number{
            if (this.requestMessage != null){
                return (this.requestMessage.id);
            };
            return (NaN);
        }

    }
}//package com.settrade.streaming5.message.control 
﻿package com.settrade.streaming5.message.control {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;

    public class ControlMessage extends Message {

        public function ControlMessage(type:MessageType){
            super(type, MessageSide.CONTROL, System.NO_SYSTEM);
        }
    }
}//package com.settrade.streaming5.message.control 
﻿package com.settrade.streaming5.message.control.notification {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;

    public class NewsNotificationMessage extends FeedNotificationMessage {

        public function NewsNotificationMessage(date:String, time:String, instrumentId:String, title:String, link:String, id:Number){
            super(NotificationCategory.NEWS, date, time, instrumentId, title, link, id);
        }
        override public function toNotificationString():String{
            var resultString:String = "News about @args update from SET";
            return (StringUtil.generateStringWithArguments(resultString, instrumentId));
        }

    }
}//package com.settrade.streaming5.message.control.notification 
﻿package com.settrade.streaming5.message.control.notification {
    import com.settrade.streaming5.enumuration.*;

    public class FeedNotificationMessage extends NotificationMessage {

        protected var _instrumentId:String;
        protected var _title:String;
        protected var _link:String;
        protected var _notificationId:Number;

        public function FeedNotificationMessage(category:NotificationCategory, date:String, time:String, instrumentId:String, title:String, link:String, notificationId:Number){
            super(category, date, time);
            this._instrumentId = instrumentId;
            this._title = title;
            this._link = link;
            this._notificationId = notificationId;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get title():String{
            return (this._title);
        }
        public function get link():String{
            return (this._link);
        }
        public function get notificationId():Number{
            return (this._notificationId);
        }

    }
}//package com.settrade.streaming5.message.control.notification 
﻿package com.settrade.streaming5.message.control.notification {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;

    public class AnnoucementNotificationMessage extends FeedNotificationMessage {

        public function AnnoucementNotificationMessage(date:String, time:String, instrumentId:String, title:String, link:String, id:Number){
            super(NotificationCategory.ANNOUCEMENT, date, time, instrumentId, title, link, id);
        }
        override public function toNotificationString():String{
            var resultString:String = "Announcement: @args";
            return (StringUtil.generateStringWithArguments(resultString, _title));
        }

    }
}//package com.settrade.streaming5.message.control.notification 
﻿package com.settrade.streaming5.message.control.notification {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;

    public class ResearchNotificationMessage extends FeedNotificationMessage {

        public function ResearchNotificationMessage(date:String, time:String, instrumentId:String, title:String, link:String, id:Number){
            super(NotificationCategory.RESEARCH, date, time, instrumentId, title, link, id);
        }
        override public function toNotificationString():String{
            var resultString:String = "Research: @args";
            return (StringUtil.generateStringWithArguments(resultString, _title));
        }

    }
}//package com.settrade.streaming5.message.control.notification 
﻿package com.settrade.streaming5.message.control.notification {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.message.response.orderstatus.*;

    public class OrderNotificationMessage extends NotificationMessage {

        protected var _orderStatus:IOrderStatus;

        public function OrderNotificationMessage(date:String, time:String, orderStatus:IOrderStatus){
            super(NotificationCategory.ORDER, date, time);
            this._orderStatus = orderStatus;
        }
        public function get orderStatus():IOrderStatus{
            return (this._orderStatus);
        }
        public function toString():String{
            return ((("[OrderNotificationMessage orderStatus=" + this.orderStatus) + "]"));
        }
        public function toAlertString():String{
            var orderStatusEquity:OrderStatusEquity;
            var orderNo:String;
            var instrumentId:String;
            var orderSide:String;
            var matchVolume:String;
            var priceNumber:String;
            var price:String;
            var status:String;
            var orderStatusDerivatives:OrderStatusDerivatives;
            var resultString:String = "Order No :\t@args\nSymbol :  \t@args\nSide :       \t@args\nStatus :    \t@args\nVolume :   \t@args\nPrice :      \t@args";
            if (this._orderStatus.system.isEquity()){
                orderStatusEquity = OrderStatusEquity(this._orderStatus);
                orderNo = orderStatusEquity.orderNumber;
                instrumentId = orderStatusEquity.instrumentId;
                orderSide = "";
                if (orderStatusEquity.orderSide.isBuy()){
                    orderSide = "B";
                } else {
                    if (orderStatusEquity.orderSide.isSell()){
                        orderSide = "S";
                    };
                };
                matchVolume = StreamingNumberFormatter.formatVolume(orderStatusEquity.matchVolume);
                priceNumber = StreamingNumberFormatter.formatPrice(orderStatusEquity.price);
                price = ((orderStatusEquity.priceType.isLimit()) ? priceNumber : orderStatusEquity.priceType.name);
                status = "";
                if (orderStatusEquity.matchVolume < orderStatusEquity.volume){
                    status = "P-Matched";
                } else {
                    status = "Matched";
                };
            } else {
                if (this._orderStatus.system.isDeriv()){
                    orderStatusDerivatives = OrderStatusDerivatives(this._orderStatus);
                    orderNo = orderStatusDerivatives.orderNumber;
                    instrumentId = orderStatusDerivatives.instrumentId;
                    orderSide = "";
                    if (orderStatusDerivatives.orderSide.isShort()){
                        orderSide = "S";
                    } else {
                        if (orderStatusDerivatives.orderSide.isLong()){
                            orderSide = "L";
                        };
                    };
                    matchVolume = StreamingNumberFormatter.formatVolume(orderStatusDerivatives.matchVolume);
                    priceNumber = StreamingNumberFormatter.formatPriceWithPrecision(orderStatusDerivatives.price, orderStatusDerivatives.priceDigit);
                    price = ((orderStatusDerivatives.priceType.isLimit()) ? priceNumber : orderStatusDerivatives.priceType.name);
                    if (orderStatusDerivatives.matchVolume < orderStatusDerivatives.volume){
                        status = "P-Matched";
                    } else {
                        status = "Matched";
                    };
                };
            };
            return (StringUtil.generateStringWithArguments(resultString, orderNo, instrumentId, orderSide, status, matchVolume, price));
        }
        override public function toNotificationString():String{
            var orderStatusEquity:OrderStatusEquity;
            var orderNo:String;
            var instrumentId:String;
            var orderSide:String;
            var matchVolume:String;
            var priceNumber:String;
            var price:String;
            var resultString:String;
            var orderStatusDerivatives:OrderStatusDerivatives;
            if (this._orderStatus.system.isEquity()){
                orderStatusEquity = OrderStatusEquity(this._orderStatus);
                orderNo = orderStatusEquity.orderNumber;
                instrumentId = orderStatusEquity.instrumentId;
                orderSide = "";
                if (orderStatusEquity.orderSide.isBuy()){
                    orderSide = "B";
                } else {
                    if (orderStatusEquity.orderSide.isSell()){
                        orderSide = "S";
                    };
                };
                matchVolume = StreamingNumberFormatter.formatVolumeMillionLimit(orderStatusEquity.matchVolume);
                priceNumber = StreamingNumberFormatter.formatPrice(orderStatusEquity.price);
                price = ((orderStatusEquity.priceType.isLimit()) ? priceNumber : orderStatusEquity.priceType.name);
                if (orderStatusEquity.matchVolume < orderStatusEquity.volume){
                    resultString = "Ord No. @args  P-Matched : @args @args @args";
                } else {
                    resultString = "Ord No. @args  Matched : @args @args @args";
                };
                return (StringUtil.generateStringWithArguments(resultString, orderNo, orderSide, instrumentId, matchVolume, price));
            };
            if (this._orderStatus.system.isDeriv()){
                orderStatusDerivatives = OrderStatusDerivatives(this._orderStatus);
                orderNo = orderStatusDerivatives.orderNumber;
                instrumentId = orderStatusDerivatives.instrumentId;
                orderSide = "";
                if (orderStatusDerivatives.orderSide.isShort()){
                    orderSide = "S";
                } else {
                    if (orderStatusDerivatives.orderSide.isLong()){
                        orderSide = "L";
                    };
                };
                matchVolume = StreamingNumberFormatter.formatVolumeMillionLimit(orderStatusDerivatives.matchVolume);
                price = StreamingNumberFormatter.formatPrice(orderStatusDerivatives.price);
                if (orderStatusDerivatives.matchVolume < orderStatusDerivatives.volume){
                    resultString = "Ord No. @args  P-Matched : @args @args @args";
                } else {
                    resultString = "Ord No. @args  Matched : @args @args @args";
                };
                return (StringUtil.generateStringWithArguments(resultString, orderNo, orderSide, instrumentId, matchVolume, price));
            };
            return ("");
        }

    }
}//package com.settrade.streaming5.message.control.notification 
﻿package com.settrade.streaming5.message.control.notification {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.control.*;

    public class NotificationMessage extends ControlMessage {

        protected var _date:String;
        protected var _time:String;
        protected var _category:NotificationCategory;

        public function NotificationMessage(category:NotificationCategory, date:String, time:String){
            super(MessageType.NOTIFICATION);
            this._category = category;
            this._date = date;
            this._time = time;
        }
        public function get time():String{
            return (this._time);
        }
        public function get category():NotificationCategory{
            return (this._category);
        }
        public function get date():String{
            return (this._date);
        }
        public function toNotificationString():String{
            return ("");
        }

    }
}//package com.settrade.streaming5.message.control.notification 
﻿package com.settrade.streaming5.message.control.notification {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.message.feed.*;
    import com.settrade.streaming5.config.*;

    public class PriceVolumeNotificationMessage extends NotificationMessage {

        protected var _matchCriteria:PriceVolumeCondition;
        protected var _matchTicker:InstrumentTickerFeedMessage;

        public function PriceVolumeNotificationMessage(date:String, time:String, matchCriteria:PriceVolumeCondition, matchTicker:InstrumentTickerFeedMessage){
            super(NotificationCategory.ALERT, date, time);
            this._matchCriteria = matchCriteria;
            this._matchTicker = matchTicker;
        }
        public function get matchCriteria():PriceVolumeCondition{
            return (this._matchCriteria);
        }
        public function get matchTicker():InstrumentTickerFeedMessage{
            return (this._matchTicker);
        }
        public function toString():String{
            return ((("[PriceVolumeNotificationMessage matchCriteria=" + this.matchCriteria) + "]"));
        }
        override public function toNotificationString():String{
            var instrumentId:String;
            var price:String;
            var priceCondition:String;
            var mathematicalSymbol:String;
            var resultString:String;
            var volume:String;
            var volumeCondition:String;
            if (this._matchCriteria.condition.isPriceCondition()){
                instrumentId = this._matchCriteria.instrumentId;
                price = StreamingNumberFormatter.formatPrice(this._matchTicker.price);
                priceCondition = StreamingNumberFormatter.formatPrice(this._matchCriteria.value);
                mathematicalSymbol = this._matchCriteria.condition.mathematicalSymbol;
                resultString = "Price Alert : @args @ @args \n[Criteria @args @args @args]";
                return (StringUtil.generateStringWithArguments(resultString, instrumentId, price, instrumentId, mathematicalSymbol, priceCondition));
            };
            if (this._matchCriteria.condition.isVolumneCondition()){
                instrumentId = this._matchCriteria.instrumentId;
                volume = StreamingNumberFormatter.formatVolume(this._matchTicker.volume);
                volumeCondition = StreamingNumberFormatter.formatVolume(this._matchCriteria.value);
                mathematicalSymbol = this._matchCriteria.condition.mathematicalSymbol;
                resultString = "Volume Alert : @args @ @args Shares \n[Criteria @args @args @args]";
                return (StringUtil.generateStringWithArguments(resultString, instrumentId, volume, instrumentId, mathematicalSymbol, volumeCondition));
            };
            return ("");
        }

    }
}//package com.settrade.streaming5.message.control.notification 
﻿package com.settrade.streaming5.message.control {
    import com.settrade.streaming5.enumuration.*;

    public class KeyboardShortcutMessage extends ControlMessage {

        protected var _shortcutType:KeyboardShortcutType;

        public function KeyboardShortcutMessage(type:KeyboardShortcutType){
            super(MessageType.KEYBOARD_SHORTCUT);
            this._shortcutType = type;
        }
        public function get shortcutType():KeyboardShortcutType{
            return (this._shortcutType);
        }

    }
}//package com.settrade.streaming5.message.control 
﻿package com.settrade.streaming5.message.control {
    import com.settrade.streaming5.enumuration.*;

    public class NotifyPlaceOrderMessage extends ControlMessage {

        protected var _instrumentId:String;
        protected var _orderSide:OrderSide;
        protected var _priceType:PriceType;
        protected var _price:Number;
        protected var _priceDigit:Number;

        public function NotifyPlaceOrderMessage(instrumentId:String, orderSide:OrderSide, priceType:PriceType, price:Number=NaN, priceDigit:Number=2){
            super(MessageType.NOTIFY_PLACE_ORDER);
            this._instrumentId = instrumentId;
            this._orderSide = orderSide;
            this._priceType = priceType;
            this._price = price;
            this._priceDigit = priceDigit;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get orderSide():OrderSide{
            return (this._orderSide);
        }
        public function get priceType():PriceType{
            return (this._priceType);
        }
        public function get price():Number{
            return (this._price);
        }
        public function get priceDigit():Number{
            return (this._priceDigit);
        }

    }
}//package com.settrade.streaming5.message.control 
﻿package com.settrade.streaming5.message.control {
    import com.settrade.streaming5.enumuration.*;

    public class SocketStatusMessage extends ControlMessage {

        protected var _host:String;
        protected var _port:int;
        protected var _status:SocketStatus;

        public function SocketStatusMessage(host:String, port:int, status:SocketStatus){
            super(MessageType.SOCKET_STATUS);
            this._host = host;
            this._port = port;
            this._status = status;
        }
        public function get host():String{
            return (this._host);
        }
        public function get port():int{
            return (this._port);
        }
        public function get status():SocketStatus{
            return (this._status);
        }

    }
}//package com.settrade.streaming5.message.control 
﻿package com.settrade.streaming5.message.control {
    import com.settrade.streaming5.enumuration.*;

    public class HtmlHolderChangeInstrumentIdMessage extends ControlMessage {

        protected var _instrumentId:String;
        protected var _widgetId:String;

        public function HtmlHolderChangeInstrumentIdMessage(instrumentId:String, widgetId:String){
            super(MessageType.HTML_HOLDER_INSTRUMENT_CHANGE);
            this._instrumentId = instrumentId;
            this._widgetId = widgetId;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get widgetId():String{
            return (this._widgetId);
        }

    }
}//package com.settrade.streaming5.message.control 
﻿package com.settrade.streaming5.message.control {
    import com.settrade.streaming5.enumuration.*;

    public class InitialStatusMessage extends ControlMessage {

        protected var _status:InitialStatus;

        public function InitialStatusMessage(status:InitialStatus){
            super(MessageType.INITIAL_STATUS);
            this._status = status;
        }
        public function get status():InitialStatus{
            return (this._status);
        }

    }
}//package com.settrade.streaming5.message.control 
﻿package com.settrade.streaming5.message.control {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.widget.enumuration.*;

    public class WidgetPageStatusMessage extends ControlMessage {

        private var _pageName:String;
        private var _oldStatus:WidgetPageStatus;
        private var _newStatus:WidgetPageStatus;

        public function WidgetPageStatusMessage(pageName:String, oldStatus:WidgetPageStatus, newStatus:WidgetPageStatus){
            super(MessageType.WIDGET_PAGE_STATUS);
            this._pageName = pageName;
            this._oldStatus = oldStatus;
            this._newStatus = newStatus;
        }
        public function get pageName():String{
            return (this._pageName);
        }
        public function get oldStatus():WidgetPageStatus{
            return (this._oldStatus);
        }
        public function get newStatus():WidgetPageStatus{
            return (this._newStatus);
        }

    }
}//package com.settrade.streaming5.message.control 
﻿package com.settrade.streaming5.message.control {
    import com.settrade.streaming5.enumuration.*;

    public class WidgetLoadedMessage extends ControlMessage {

        protected var _widgetId:String;
        protected var _status:WidgetLoadedStatus;

        public function WidgetLoadedMessage(name:String, status:WidgetLoadedStatus){
            super(MessageType.WIDGET_LOADED);
            this._widgetId = name;
            this._status = status;
        }
        public function get widgetId():String{
            return (this._widgetId);
        }
        public function get status():WidgetLoadedStatus{
            return (this._status);
        }

    }
}//package com.settrade.streaming5.message.control 
﻿package com.settrade.streaming5.message {

    public interface IRegisterVerifiable {

        function get verifyObject():Object;

    }
}//package com.settrade.streaming5.message 
﻿package com.settrade.streaming5.message.raw {
    import com.settrade.streaming5.message.*;

    public interface IStubRawMessage extends IRawMessage {

        function get data():Message;

    }
}//package com.settrade.streaming5.message.raw 
﻿package com.settrade.streaming5.message.raw {
    import flash.net.*;

    public interface IURLRawMessage extends IRawMessage {

        function get data():URLVariables;

    }
}//package com.settrade.streaming5.message.raw 
﻿package com.settrade.streaming5.message.raw {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;

    public interface IRawMessage extends IMessage {

        function get messageFormat():MessageFormat;

    }
}//package com.settrade.streaming5.message.raw 
﻿package com.settrade.streaming5.message.raw.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.connection.common.*;

    public class BinaryRequestMessage extends RawRequestMessage implements IBinaryRawMessage {

        protected var _data:StreamingByteArray;

        public function BinaryRequestMessage(system:System, data:StreamingByteArray, originalMessage:RequestMessage){
            super(MessageType.BINARY_REQUEST, system, MessageFormat.BINARY, originalMessage);
            this._data = data;
        }
        public function get data():StreamingByteArray{
            return (this._data);
        }

    }
}//package com.settrade.streaming5.message.raw.request 
﻿package com.settrade.streaming5.message.raw.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.request.*;
    import flash.net.*;

    public class URLRequestMessage extends RawRequestMessage implements IURLRawMessage {

        protected var _path:UrlPath;
        protected var _data:URLVariables;

        public function URLRequestMessage(originalMessage:RequestMessage, path:UrlPath, data:URLVariables){
            super(MessageType.URL_REQUEST, path.system, MessageFormat.URL, originalMessage);
            if (originalMessage.type.isUserCheckRequest()){
                this._system = originalMessage.system;
            };
            this._data = data;
            this._path = path;
        }
        public function get data():URLVariables{
            return (this._data);
        }
        public function get path():UrlPath{
            return (this._path);
        }
        public function toString():String{
            return ((((("URLRequestMessage:[Path:" + this.path) + "][Data:") + this.data) + "]"));
        }

    }
}//package com.settrade.streaming5.message.raw.request 
﻿package com.settrade.streaming5.message.raw.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.request.*;

    public class RawRequestMessage extends RequestMessage implements IRawMessage {

        protected var _messageFormat:MessageFormat;
        protected var _originalMessage:RequestMessage;

        public function RawRequestMessage(type:MessageType, system:System, messageFormat:MessageFormat, originalMessage:RequestMessage){
            super(type, system);
            this._messageFormat = messageFormat;
            this._originalMessage = originalMessage;
        }
        public function get messageFormat():MessageFormat{
            return (this._messageFormat);
        }
        public function get originalMessage():RequestMessage{
            return (this._originalMessage);
        }

    }
}//package com.settrade.streaming5.message.raw.request 
﻿package com.settrade.streaming5.message.raw {
    import com.settrade.streaming5.message.*;

    public interface IMultipleRawMessage extends IMultipleMessage, IRawMessage {

    }
}//package com.settrade.streaming5.message.raw 
﻿package com.settrade.streaming5.message.raw.feed {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.feed.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.raw.*;

    public class MultipleRawFeedMessage extends RawFeedMessage implements IMultipleRawMessage {

        var _messageList:Vector.<Message>;

        public function MultipleRawFeedMessage(system:System, source:Source, messageFormat:MessageFormat){
            super(MessageType.MULTIPLE_RAW_FEED, system, source, messageFormat);
            this._messageList = new Vector.<Message>();
        }
        public function add(message:FeedMessage):void{
            if (message != this){
                this._messageList.push(message);
            };
        }
        public function addAll(list:Vector.<FeedMessage>):void{
            var message:FeedMessage;
            for each (message in list) {
                this.add(message);
            };
        }
        public function get messageList():Vector.<Message>{
            return (this._messageList);
        }

    }
}//package com.settrade.streaming5.message.raw.feed 
﻿package com.settrade.streaming5.message.raw.feed {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.connection.common.*;

    public class BinaryFeedMessage extends RawFeedMessage implements IBinaryRawMessage {

        protected var _data:StreamingByteArray;

        public function BinaryFeedMessage(system:System, source:Source, messageFormat:MessageFormat, data:StreamingByteArray){
            super(MessageType.BINARY_FEED, system, source, messageFormat);
            this._data = data;
        }
        public function get data():StreamingByteArray{
            return (this._data);
        }

    }
}//package com.settrade.streaming5.message.raw.feed 
﻿package com.settrade.streaming5.message.raw.feed {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.raw.*;

    public class StringFeedMessage extends RawFeedMessage implements IStringRawMessage {

        protected var _data:String;

        public function StringFeedMessage(system:System, source:Source, messageFormat:MessageFormat, data:String){
            super(MessageType.STRING_FEED, system, source, messageFormat);
            this._data = data;
        }
        public function get data():String{
            return (this._data);
        }

    }
}//package com.settrade.streaming5.message.raw.feed 
﻿package com.settrade.streaming5.message.raw.feed {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.feed.*;
    import com.settrade.streaming5.message.raw.*;

    public class StubRawFeedMessage extends RawFeedMessage implements IStubRawMessage {

        protected var _data:FeedMessage;

        public function StubRawFeedMessage(data:FeedMessage){
            super(MessageType.STUB_RAW_FEED, data.system, data.source, MessageFormat.STUB);
            this._data = data;
        }
        public function get data():Message{
            return (this._data);
        }

    }
}//package com.settrade.streaming5.message.raw.feed 
﻿package com.settrade.streaming5.message.raw.feed {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.feed.*;
    import com.settrade.streaming5.message.raw.*;

    public class RawFeedMessage extends FeedMessage implements IRawMessage {

        protected var _messageFormat:MessageFormat;

        public function RawFeedMessage(type:MessageType, system:System, source:Source, messageFormat:MessageFormat){
            super(type, system, source);
            this._messageFormat = messageFormat;
        }
        public function get messageFormat():MessageFormat{
            return (this._messageFormat);
        }

    }
}//package com.settrade.streaming5.message.raw.feed 
﻿package com.settrade.streaming5.message.raw.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;

    public class RawResponseMessage extends ResponseMessage implements IRawMessage {

        protected var _messageFormat:MessageFormat;

        public function RawResponseMessage(type:MessageType, system:System, requestMessage:RequestMessage, source:Source, messageFormat:MessageFormat){
            super(type, system, requestMessage, source);
            this._messageFormat = messageFormat;
        }
        public function get messageFormat():MessageFormat{
            return (this._messageFormat);
        }

    }
}//package com.settrade.streaming5.message.raw.response 
﻿package com.settrade.streaming5.message.raw.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.request.*;

    public class ObjectResponseMessage extends RawResponseMessage implements IObjectRawMessage {

        protected var _data:Object;

        public function ObjectResponseMessage(system:System, requestMessage:RequestMessage, source:Source, messageFormat:MessageFormat, data:Object){
            super(MessageType.OBJECT_RESPONSE, system, requestMessage, source, messageFormat);
            this._data = data;
        }
        public function get data():Object{
            return (this._data);
        }

    }
}//package com.settrade.streaming5.message.raw.response 
﻿package com.settrade.streaming5.message.raw.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.response.*;

    public class StubRawResponseMessage extends RawResponseMessage implements IStubRawMessage {

        protected var _data:ResponseMessage;

        public function StubRawResponseMessage(data:ResponseMessage){
            super(MessageType.STUB_RAW_RESPONSE, data.system, data.requestMessage, data.source, MessageFormat.STUB);
            this._data = data;
        }
        public function get data():Message{
            return (this._data);
        }

    }
}//package com.settrade.streaming5.message.raw.response 
﻿package com.settrade.streaming5.message.raw.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.request.*;

    public class StringResponseMessage extends RawResponseMessage implements IStringRawMessage {

        protected var _data:String;

        public function StringResponseMessage(system:System, requestMessage:RequestMessage, source:Source, messageFormat:MessageFormat, data:String){
            super(MessageType.STRING_RESPONSE, system, requestMessage, source, messageFormat);
            this._data = data;
        }
        public function get data():String{
            return (this._data);
        }

    }
}//package com.settrade.streaming5.message.raw.response 
﻿package com.settrade.streaming5.message.raw.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.request.*;

    public class MultipleRawResponseMessage extends RawResponseMessage implements IMultipleRawMessage {

        var _messageList:Vector.<Message>;

        public function MultipleRawResponseMessage(system:System, requestMessage:RequestMessage, source:Source, messageFormat:MessageFormat){
            super(MessageType.MULTIPLE_RAW_RESPONSE, system, requestMessage, source, messageFormat);
            this._messageList = new Vector.<Message>();
        }
        public function add(message:IRawMessage):void{
            if (message != this){
                this._messageList.push(Message(message));
            };
        }
        public function addAll(list:Vector.<IRawMessage>):void{
            var message:IRawMessage;
            for each (message in list) {
                this.add(message);
            };
        }
        public function get messageList():Vector.<Message>{
            return (this._messageList);
        }

    }
}//package com.settrade.streaming5.message.raw.response 
﻿package com.settrade.streaming5.message.raw.response {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.connection.common.*;

    public class BinaryResponseMessage extends RawResponseMessage implements IBinaryRawMessage {

        protected var _data:StreamingByteArray;

        public function BinaryResponseMessage(system:System, requestMessage:RequestMessage, source:Source, messageFormat:MessageFormat, data:StreamingByteArray){
            super(MessageType.BINARY_RESPONSE, system, requestMessage, source, messageFormat);
            this._data = data;
        }
        public function get data():StreamingByteArray{
            return (this._data);
        }

    }
}//package com.settrade.streaming5.message.raw.response 
﻿package com.settrade.streaming5.message.raw {

    public interface IObjectRawMessage extends IRawMessage {

        function get data():Object;

    }
}//package com.settrade.streaming5.message.raw 
﻿package com.settrade.streaming5.message.raw {

    public interface IStringRawMessage extends IRawMessage {

        function get data():String;

    }
}//package com.settrade.streaming5.message.raw 
﻿package com.settrade.streaming5.message.raw {
    import com.settrade.streaming5.connection.common.*;

    public interface IBinaryRawMessage extends IRawMessage {

        function get data():StreamingByteArray;

    }
}//package com.settrade.streaming5.message.raw 
﻿package com.settrade.streaming5.language {

    public class EnglishLanguageConfig implements ILanguageConfig {

        public function EnglishLanguageConfig(){
            super();
        }
        public function get ONE_D_TIME_DECAY():String{
            return ("1d Time Decay");
        }
        public function get ONE_M():String{
            return ("1M");
        }
        public function get ONE_Y():String{
            return ("1Y");
        }
        public function get THREE_M():String{
            return ("3M");
        }
        public function get FIFTY_TWO_WEEK_LOW():String{
            return ("52W Low");
        }
        public function get FIFTY_TWO_WEEK_HIGH():String{
            return ("52W High");
        }
        public function get SIX_M():String{
            return ("6M");
        }
        public function get ACCOUNT_NUMBER():String{
            return ("Account No.");
        }
        public function get ACTION():String{
            return ("Action");
        }
        public function get ACTUAL_VOLUME():String{
            return ("Actual Volume");
        }
        public function get ACTUAL_VOLUME_TWO_LINE():String{
            return ("Act\nVol");
        }
        public function get ADD():String{
            return ("Add");
        }
        public function get ALERT_CRITERIA():String{
            return ("Alert Criteria");
        }
        public function get ALERT_CRITERIA_TYPE():String{
            return ("Type");
        }
        public function get ALERT_NOTIFICATION():String{
            return ("Alert & Notification");
        }
        public function get ALL_ACCOUNT():String{
            return ("All Account");
        }
        public function get ALL_ACCOUNT_SHORT():String{
            return ("ALL");
        }
        public function get ALL_IN_PREMIUM():String{
            return ("All-in-Premium");
        }
        public function get AMOUNT():String{
            return ("Amount");
        }
        public function get AMOUNT_BAHT():String{
            return ("Amount (Baht)");
        }
        public function get AMOUNT_COST():String{
            return ("Amount(Cost)");
        }
        public function get AMOUNT_COST_TWO_LINE():String{
            return ("Amount\n(Cost)");
        }
        public function get AUM_SIZE():String{
            return ("AUM Size");
        }
        public function get AUTO_FILL_PRICE():String{
            return ("Auto Fill Price");
        }
        public function get AUTO_NVDR():String{
            return ("Auto NVDR");
        }
        public function get AVAILABLE_VOLUME():String{
            return ("Available Volume");
        }
        public function get AVAILABLE_VOLUME_TWO_LINE():String{
            return ("Avail\nVol");
        }
        public function get AVERAGE():String{
            return ("Average");
        }
        public function get AVERAGE_BUY():String{
            return ("Average Buy");
        }
        public function get AVERAGE_CLOSE():String{
            return ("Avg/Close");
        }
        public function get AVERAGE_COST():String{
            return ("Average Cost");
        }
        public function get AVERAGE_COST_TWO_LINE():String{
            return ("Average\nCost");
        }
        public function get AVERAGE_PREVIOUS_SETTLEMENT():String{
            return ("Avg/P.Settle");
        }
        public function get AVERAGE_PRICE():String{
            return ("Average Price");
        }
        public function get AVERAGE_SELL():String{
            return ("Average Sell");
        }
        public function get BACK():String{
            return ("Back");
        }
        public function get BAHT():String{
            return ("Baht");
        }
        public function get BALANCE_VOLUME():String{
            return ("Balance");
        }
        public function get BASIS():String{
            return ("Basis");
        }
        public function get BID_OFFER():String{
            return ("Bids Offers");
        }
        public function get BID_PRICE():String{
            return ("Bid");
        }
        public function get BID_VOLUME_SHORT():String{
            return ("Vol B");
        }
        public function get BREAK_EVEN():String{
            return ("Break Even");
        }
        public function get BROKER_ANNOUCEMENT():String{
            return ("Broker's Annoucement");
        }
        public function get BUY():String{
            return ("Buy");
        }
        public function get BUY_AMOUNT():String{
            return ("Buy Amount");
        }
        public function get BUY_ORDER_NUMBER():String{
            return ("# Buy Order");
        }
        public function get BUY_SELL():String{
            return ("Click");
        }
        public function get BUY_VOLUME_SHORT():String{
            return ("Buy Vol");
        }
        public function get BY_DATE():String{
            return ("By Date");
        }
        public function get CANCEL():String{
            return ("Cancel");
        }
        public function get CANCEL_ORDER_NEW_LINE():String{
            return ("Cancel\nOrder");
        }
        public function get CANCEL_SELECTED_ORDER():String{
            return ("Cancel selected order");
        }
        public function get CANCELLED_VOLUME():String{
            return ("Cancelled");
        }
        public function get CATEGORY():String{
            return ("Category");
        }
        public function get CEIL_FLOOR():String{
            return ("Ceil/Floor");
        }
        public function get CELING():String{
            return ("Ceiling");
        }
        public function get CHANGE():String{
            return ("Change");
        }
        public function get CHANGE_ACCOUNT_NUMBER():String{
            return ("Chage account no.");
        }
        public function get CHANGE_PASSWORD():String{
            return ("Change Password");
        }
        public function get CHANGE_PIN():String{
            return ("Change PIN");
        }
        public function get CHANGE_SELECTED_ORDER():String{
            return ("Change selected order");
        }
        public function get CHANGE_SHORT():String{
            return ("Chg");
        }
        public function get CHART():String{
            return ("Chart");
        }
        public function get CIRCUIT_BREAKER():String{
            return ("Circuit Breaker");
        }
        public function get CLEAR():String{
            return ("Clear");
        }
        public function get CLOSE():String{
            return ("Close");
        }
        public function get COMMISSION_NOT_INCLUDED():String{
            return ("(Commision and VAT not included)");
        }
        public function get COMMON_STOCK():String{
            return ("Common Stock");
        }
        public function get CONDITION():String{
            return ("Cond.");
        }
        public function get CONFIRM():String{
            return ("Confirm");
        }
        public function get CONFIRMATION_POPUP():String{
            return ("Confirmation Popup");
        }
        public function get CONVERTIBLE():String{
            return ("Convertible");
        }
        public function get COST():String{
            return ("Cost");
        }
        public function get DATE():String{
            return ("Date");
        }
        public function get DAYS_TO_EXPIRATION():String{
            return ("days to last trading date");
        }
        public function get DEAL():String{
            return ("Deal");
        }
        public function get DEAL_SUMMARY():String{
            return ("Deal Summary");
        }
        public function get DERIVATIVES():String{
            return ("Derivatives");
        }
        public function get DERIVATIVES_WARRANT():String{
            return ("Derivatives Warrant");
        }
        public function get DETAIL():String{
            return ("Detail");
        }
        public function get DONE():String{
            return ("Done");
        }
        public function get EDIT():String{
            return ("Edit");
        }
        public function get EFFECTIVE_GEARING_PERCENT():String{
            return ("Eff. Gearing(%)");
        }
        public function get ENABLE():String{
            return ("Enable");
        }
        public function get ENTER_INSTRUMENT_ID():String{
            return ("Enter Symbol");
        }
        public function get EPS():String{
            return ("EPS");
        }
        public function get EQUITY():String{
            return ("Equity");
        }
        public function get ERROR_ALERT():String{
            return ("Error !!!");
        }
        public function get ETF():String{
            return ("ETF");
        }
        public function get EXERCISE_DATE():String{
            return ("Exercise Date");
        }
        public function get EXERCISE_PRICE():String{
            return ("Exercise Price");
        }
        public function get EXERCISE_RATIO():String{
            return ("Exercise Ratio");
        }
        public function get FEE_COMMISSION():String{
            return ("Fee (Comm.)");
        }
        public function get FEE_VAT():String{
            return ("Fee & VAT");
        }
        public function get FLOOR():String{
            return ("Floor");
        }
        public function get FOREIGN_COMMON_STOCK():String{
            return ("Foreign Common Stock");
        }
        public function get FRIDAY_SHORT():String{
            return ("Fr");
        }
        public function get GEARING_RATIO():String{
            return ("Gearing Ratio");
        }
        public function get HIGH():String{
            return ("High");
        }
        public function get HIGH_LOW():String{
            return ("High/Low");
        }
        public function get HIGH_SHORT():String{
            return ("Hi");
        }
        public function get ICEBERG():String{
            return ("Iceberg");
        }
        public function get ICEBERG_VOLUME():String{
            return ("Iceberg Volume");
        }
        public function get IM():String{
            return ("IM");
        }
        public function get IMPLIED_VOLATILY():String{
            return ("Imp. Vol.");
        }
        public function get IN_NOTIFICATION_CENTER():String{
            return ("In Notification Center");
        }
        public function get INAV():String{
            return ("iNAV");
        }
        public function get INSTRUMENT_ID():String{
            return ("Symbol");
        }
        public function get INTRADAY():String{
            return ("Intraday");
        }
        public function get INTRINSIC_VALUE():String{
            return ("Intrinsic Val.");
        }
        public function get KEYBOARD_SHORTCUT():String{
            return ("Keyboard Shortcut");
        }
        public function get KEYBOARD_SHORTCUY_KEY():String{
            return ("Keyboard Shortcut Key");
        }
        public function get LAST():String{
            return ("Last");
        }
        public function get LAST_TRADE_DATE():String{
            return ("Last Trade");
        }
        public function get LAST_UPDATE():String{
            return ("Last Update");
        }
        public function get LONG():String{
            return ("Long");
        }
        public function get LOW():String{
            return ("Low");
        }
        public function get LOW_SHORT():String{
            return ("Lo");
        }
        public function get MANUAL():String{
            return ("Manual");
        }
        public function get MARGIN_RATE():String{
            return ("Margin Rate");
        }
        public function get MARKET():String{
            return ("Market");
        }
        public function get MARKET_PRICE():String{
            return ("Market Price");
        }
        public function get MARKET_PRICE_TWO_LINE():String{
            return ("Market\nPrice");
        }
        public function get MARKET_VALUE():String{
            return ("Market Value");
        }
        public function get MARKET_VALUE_CHART():String{
            return ("Market Value Chart");
        }
        public function get MARKET_VALUE_TWO_LINE():String{
            return ("Market\nValue");
        }
        public function get MATCHED_VOLUME():String{
            return ("Matched");
        }
        public function get MONDAY_SHORT():String{
            return ("Mo");
        }
        public function get MULTIPLE_ORDER():String{
            return ("Multiple Order");
        }
        public function get NET_PAID_RECEIVED():String{
            return ("Net Paid(-)/Received(+):");
        }
        public function get NET_PAID_RECEIVED_BAHT():String{
            return ("Net Paid/Received (Baht)");
        }
        public function get NEWS():String{
            return ("News");
        }
        public function get NEWS_FROM():String{
            return ("News From");
        }
        public function get NOTIFICATION_NEWS():String{
            return ("News about @args update from SET");
        }
        public function get NOTIFICATION_ORDER_MATCH():String{
            return ("Order No. @args is Matched : @args @args Volume @args @ Price @args");
        }
        public function get NOTIFICATION_ORDER_PARTIAL():String{
            return ("Order No. @args is Partially-Matched : @args @args Volume @args @ Price @args");
        }
        public function get NOTIFICATION_PRICE_ALERT():String{
            return ("Price Alert : @args @ @args \n[Criteria @args @args @args]");
        }
        public function get NOTIFICATION_RESEARCH():String{
            return ("Researches about @args update from Broker");
        }
        public function get NOTIFICATION_VOLUME_ALERT():String{
            return ("Volume Alert : @args @ @args Shares \n[Criteria @args @args @args]");
        }
        public function get NVDR():String{
            return ("NVDR");
        }
        public function get OFFER_PRICE():String{
            return ("Offer");
        }
        public function get OFFER_VOLUME_SHORT():String{
            return ("Vol O");
        }
        public function get OI_VOLUME():String{
            return ("OI/Vol");
        }
        public function get OK():String{
            return ("OK");
        }
        public function get OPEN_0():String{
            return ("Open0 (Night)");
        }
        public function get OPEN_1():String{
            return ("Open1 (Morning)");
        }
        public function get OPEN_2():String{
            return ("Open2 (Afternoon)");
        }
        public function get OPTIONS_VALUE_TWO_LINE():String{
            return ("Options\nValue");
        }
        public function get ORDER_ALERT():String{
            return ("Order Alert");
        }
        public function get ORDER_ENTRY():String{
            return ("Order Entry");
        }
        public function get ORDER_NUMBER():String{
            return ("Order No");
        }
        public function get ORDER_STATUS():String{
            return ("Order Status");
        }
        public function get OTHER_INFORMATION():String{
            return ("Other Information");
        }
        public function get PASSWORD_PIN():String{
            return ("Password & PIN");
        }
        public function get PBV():String{
            return ("P/BV");
        }
        public function get PE():String{
            return ("P/E");
        }
        public function get PERCENT_CHANGE_SHORT():String{
            return ("%Chg");
        }
        public function get PERCENT_TOTAL_VOLUME_SHORT():String{
            return ("% Total");
        }
        public function get PERCENT_UNREALIZED_PROFIT_LOST():String{
            return ("% Unrealized P/L");
        }
        public function get PERCENT_UNREALIZED_PROFIT_LOST_CHART():String{
            return ("% Unrealized P/L Chart");
        }
        public function get PERCENT_UNREALIZED_PROFIT_LOST_TWO_LINE():String{
            return ("% Unrealized\nP/L");
        }
        public function get PERCENT_YIELD():String{
            return ("YIELD(%)");
        }
        public function get PIN():String{
            return ("PIN");
        }
        public function get PLACE_ORDER_CONFIRMATION():String{
            return ("Confirmation of Placing Order");
        }
        public function get POPUP_ALERT():String{
            return ("Alert Popup");
        }
        public function get PORTFOLIO():String{
            return ("Portfolio");
        }
        public function get PORTFOLIO_COST():String{
            return ("Portfolio - Cost");
        }
        public function get PORTFOLIO_SETTLEMENT():String{
            return ("Portfolio - Settlement");
        }
        public function get PORTFOLIO_TOTAL():String{
            return ("Total");
        }
        public function get POSITION():String{
            return ("Position");
        }
        public function get POSITION_SHORT():String{
            return ("Pos");
        }
        public function get PREFERRED():String{
            return ("Preferred");
        }
        public function get PREVIOUS_CLOSE():String{
            return ("Previous Close");
        }
        public function get PREVIOUS_OI():String{
            return ("Previous OI");
        }
        public function get PREVIOUS_SETTLEMENT():String{
            return ("Prev Settle");
        }
        public function get PRICE():String{
            return ("Price");
        }
        public function get PRICE_TYPE():String{
            return ("Type");
        }
        public function get PUBLISH_VOLUME():String{
            return ("P/B Vol");
        }
        public function get QUOTE():String{
            return ("Quote");
        }
        public function get REALIZED_PROFIT_LOST():String{
            return ("Realized P/L");
        }
        public function get REALIZED_PROFIT_LOST_TWO_LINE():String{
            return ("Realized\nP/L");
        }
        public function get REFRESH():String{
            return ("Refresh");
        }
        public function get REMEMBER_LAST_ORDER():String{
            return ("Remember Last Order");
        }
        public function get RESEARCH():String{
            return ("Research");
        }
        public function get SATURDAY_SHORT():String{
            return ("Sa");
        }
        public function get SAVE():String{
            return ("SAVE");
        }
        public function get SAVE_PIN():String{
            return ("Save PIN");
        }
        public function get SEARCH():String{
            return ("Search");
        }
        public function get SELECT_LAST_ORDER_STATUS():String{
            return ("Select last order status");
        }
        public function get SELL():String{
            return ("Sell");
        }
        public function get SELL_AMOUNT():String{
            return ("Sell Amount");
        }
        public function get SELL_ORDER_NUMBER():String{
            return ("# Sell Order");
        }
        public function get SELL_VOLUME_SHORT():String{
            return ("Sell Vol");
        }
        public function get SET_CALENDAR():String{
            return ("SET Calendar");
        }
        public function get SET_ORDER_ALERT():String{
            return ("Set Order Alert");
        }
        public function get SET_PRICE_VOLUME_ALERT():String{
            return ("Set Price & Volume Alert");
        }
        public function get SETTINGS():String{
            return ("Settings");
        }
        public function get SETTLEMENT_DATE():String{
            return ("Settlement Date");
        }
        public function get SETTLEMENT_FEE():String{
            return ("Settlement Fee");
        }
        public function get SHORT():String{
            return ("Short");
        }
        public function get SHORTCUT():String{
            return ("Shortcut");
        }
        public function get SHOW_IN_NOTIFICATION():String{
            return ("Show in Notification");
        }
        public function get SIDE():String{
            return ("Side");
        }
        public function get SOUND_ALERT():String{
            return ("Sound Alert");
        }
        public function get START_VOLUME_TWO_LINE():String{
            return ("Start\nVol");
        }
        public function get STATUS():String{
            return ("Status");
        }
        public function get STOCK_FILTER():String{
            return ("Stock Filter");
        }
        public function get STOP_CONDITION():String{
            return ("Stop Condition");
        }
        public function get STOP_ORDER():String{
            return ("Stop Order");
        }
        public function get STRIKE_PRICE():String{
            return ("Strike Price");
        }
        public function get SUBJECT():String{
            return ("Subject");
        }
        public function get SUBMIT():String{
            return ("Submit");
        }
        public function get SUNDAY_SHORT():String{
            return ("Su");
        }
        public function get SYMBOL_SHORTCUT():String{
            return ("Symbol Shortcut");
        }
        public function get SYMBOL_SHORTCUT_KEY():String{
            return ("Symbol Shortcut Key");
        }
        public function get TECHNICAL():String{
            return ("Technical");
        }
        public function get TFEX_TOTAL():String{
            return ("Total");
        }
        public function get THEME():String{
            return ("Theme");
        }
        public function get THEORICAL_PRICE():String{
            return ("Theo. Price");
        }
        public function get THURSDAY_SHORT():String{
            return ("Th");
        }
        public function get TICKER():String{
            return ("Ticker");
        }
        public function get TIME():String{
            return ("Time");
        }
        public function get TIME_TO_MATURE():String{
            return ("to Last Trade");
        }
        public function get TIME_VALUE():String{
            return ("Time Value");
        }
        public function get TOTAL_AMOUNT():String{
            return ("Total Amount");
        }
        public function get TOTAL_BUY():String{
            return ("Total Buy");
        }
        public function get TOTAL_CLOSE_TWO_LINE():String{
            return ("Total\nClose");
        }
        public function get TOTAL_FEE():String{
            return ("Total Fee");
        }
        public function get TOTAL_OPEN_TWO_LINE():String{
            return ("Total\nOpen");
        }
        public function get TOTAL_SELL():String{
            return ("Total Sell");
        }
        public function get TOTAL_VOLUME_SHORT():String{
            return ("Total Vol");
        }
        public function get TRANSACTION_AMOUNT():String{
            return ("Transaction Amount");
        }
        public function get TUESDAY_SHORT():String{
            return ("Tu");
        }
        public function get TURNOVER_LIST():String{
            return ("Surveillance Securities");
        }
        public function get UNDERLYING():String{
            return ("Underlying");
        }
        public function get UNIT_TRUST():String{
            return ("Unit Trust");
        }
        public function get UNREALIZED_PROFIT_LOST():String{
            return ("Unrealized P/L");
        }
        public function get UNREALIZED_PROFIT_LOST_TWO_LINE():String{
            return ("Unrealized\nP/L");
        }
        public function get VALIDITY():String{
            return ("Validity");
        }
        public function get VALIDITY_SHORT():String{
            return ("Valid");
        }
        public function get VALUE():String{
            return ("Value");
        }
        public function get VALUE_K():String{
            return ("Value(K)");
        }
        public function get VAT():String{
            return ("VAT");
        }
        public function get VIEW_ALL():String{
            return ("View All");
        }
        public function get VOLUME():String{
            return ("Volume");
        }
        public function get VOLUME_BUY_SHORT():String{
            return ("Vol Buy");
        }
        public function get VOLUME_BY_PRICE():String{
            return ("Volume by Price");
        }
        public function get VOLUME_SELL_SHORT():String{
            return ("Vol Sell");
        }
        public function get VOLUME_SHORT():String{
            return ("Vol");
        }
        public function get VOLUME_TOTAL_SHORT():String{
            return ("Total");
        }
        public function get VOLUME_VALUE_K():String{
            return ("Vol/Value(K)");
        }
        public function get WARN_ALERT():String{
            return ("Warn !!");
        }
        public function get WARRANT():String{
            return ("Warrant");
        }
        public function get WEDNESDAY_SHORT():String{
            return ("We");
        }
        public function get WITHHOLDING_SHORT():String{
            return ("W/H");
        }
        public function get ALERT_NO_SIDE():String{
            return ("Please select Buy or Sell");
        }
        public function get ALERT_NO_INSTRUMENT_ID():String{
            return ("Please insert Symbol");
        }
        public function get ALERT_NO_VOLUME():String{
            return ("Please insert Volume");
        }
        public function get ALERT_WRONG_VOLUME():String{
            return ("Incorrect volume format");
        }
        public function get ALERT_NO_PRICE():String{
            return ("Please insert Price");
        }
        public function get ALERT_WRONG_PRICE():String{
            return ("Incorrect price format");
        }
        public function get ALERT_NO_PIN():String{
            return ("Please insert PIN");
        }
        public function get ALERT_NO_CANCEL():String{
            return ("Please select order to cancel");
        }
        public function get ALERT_NO_STOP_INSTRUMENT_ID():String{
            return ("Please insert Symbol Stop Condition");
        }
        public function get ALERT_INVALID_PRICE():String{
            return ("Price should be between @args and @args");
        }
        public function get ALERT_NO_STOP_CONDITION():String{
            return ("Please select Stop Condition");
        }
        public function get ALERT_NO_STOP_PRICE():String{
            return ("Please insert Price Stop Condition");
        }
        public function get ALERT_CANNOT_CONNECT():String{
            return ("Cannot connect to server");
        }
        public function get ALERT_UNKNOWN_PRICE():String{
            return ("Cannot Place Order: Unknown Price");
        }
        public function get ALERT_CONFIRM_CANCEL():String{
            return ("Cancel Order Confirmation. Order Number: ");
        }
        public function get ALERT_CONFIRM_CHANGE_PRICE():String{
            return ("Change Price Confirmation. New Price: ");
        }
        public function get ALERT_PROGRESS_PLACE():String{
            return ("Cannot Place Order at this time. Another action still in Process");
        }
        public function get ALERT_PROGRESS_CANCEL():String{
            return ("Cannot Cancel Order at this time. Another action still in Process");
        }
        public function get ALERT_PROGRESS_CHANGE():String{
            return ("Cannot Change Price at this time. Another action still in Process");
        }
        public function get MONTH_JANUARY():String{
            return ("January");
        }
        public function get MONTH_FEBRUARY():String{
            return ("February");
        }
        public function get MONTH_MARCH():String{
            return ("March");
        }
        public function get MONTH_APRIL():String{
            return ("April");
        }
        public function get MONTH_MAY():String{
            return ("May");
        }
        public function get MONTH_JUNE():String{
            return ("June");
        }
        public function get MONTH_JULY():String{
            return ("July");
        }
        public function get MONTH_AUGUST():String{
            return ("August");
        }
        public function get MONTH_SEPTEMBER():String{
            return ("September");
        }
        public function get MONTH_OCTOBER():String{
            return ("October");
        }
        public function get MONTH_NOVEMBER():String{
            return ("November");
        }
        public function get MONTH_DECEMBER():String{
            return ("December");
        }
        public function get MONTH_JANUARY_SHORT():String{
            return ("Jan");
        }
        public function get MONTH_FEBRUARY_SHORT():String{
            return ("Feb");
        }
        public function get MONTH_MARCH_SHORT():String{
            return ("Mar");
        }
        public function get MONTH_APRIL_SHORT():String{
            return ("Apr");
        }
        public function get MONTH_MAY_SHORT():String{
            return ("May");
        }
        public function get MONTH_JUNE_SHORT():String{
            return ("Jun");
        }
        public function get MONTH_JULY_SHORT():String{
            return ("Jul");
        }
        public function get MONTH_AUGUST_SHORT():String{
            return ("Aug");
        }
        public function get MONTH_SEPTEMBER_SHORT():String{
            return ("Sep");
        }
        public function get MONTH_OCTOBER_SHORT():String{
            return ("Oct");
        }
        public function get MONTH_NOVEMBER_SHORT():String{
            return ("Nov");
        }
        public function get MONTH_DECEMBER_SHORT():String{
            return ("Dec");
        }
        public function get DEAL_DATE():String{
            return ("Deal Date");
        }
        public function get CLOSED_CONTRACT():String{
            return ("Closed Contract");
        }
        public function get SETTLEMENT_PRICE():String{
            return ("Settlement Price");
        }
        public function get MATURITY_DATE():String{
            return ("Maturity Date");
        }
        public function get SETTLE():String{
            return ("Settle");
        }
        public function get DAYS():String{
            return ("Days");
        }
        public function get CONTRACT_SPEC():String{
            return ("Contract Specifications");
        }
        public function get MOVE_SELECTED_ORDER():String{
            return ("Move selected order (in key shortcut)");
        }
        public function get TERMS_OF_SERVICE():String{
            return ("Terms of Service");
        }
        public function get COPYRIGHT():String{
            return ("Copyright ");
        }
        public function get FOR_PUSH_MODE_ONLY():String{
            return ("For Push mode only");
        }
        public function get ACCOUNT_SHORTCUT():String{
            return ("Account Shortcut");
        }
        public function get CHANGE_LANGUAGE():String{
            return ("Change Language");
        }
        public function get ABOUT():String{
            return ("About");
        }
        public function get SAVE_ALL_CHANGES():String{
            return ("Do you want to save all changes?");
        }
        public function get EMPTY_FIELD_CONFIRM():String{
            return ("You have some data with Empty Field(s) in these following settings. These data will NOT be saved after closing. Do you want to continue?");
        }
        public function get TAB_TICKER():String{
            return ("Ticker");
        }
        public function get TAB_VOLUME_BY_PRICE():String{
            return ("Volume by Price");
        }
        public function get DISCLAIMER_PIN_TEXT():String{
            return ("\tSave PIN function allows you to save your PIN for an interval. During this interval, re-enter PIN is not required for any transaction performed in this trading program only.\n\tTherefore, you  understand and accept the risk of using this Save PIN function. We will take no responsibility on any loss or damage from any error occured.");
        }
        public function get DISCLAIMER_PIN_AGREE():String{
            return ("Do you agree to save PIN");
        }
        public function get DISCLAIMER_PIN_FIVE_MINUTES():String{
            return ("for 5 minutes");
        }
        public function get DISCLAIMER_PIN_SESSION_EXPIRE():String{
            return ("until log out or session expired");
        }
        public function get DISCLAIMER_AGREE_BUTTON():String{
            return ("I Agree");
        }
        public function get DISCLAIMER_DISAGREE_BUTTON():String{
            return ("I Disagree");
        }
        public function get DISCLAIMER_AGREE_TEXT():String{
            return ("with all the terms specified above.");
        }
        public function get DISCLAIMER_DISAGREE_TEXT():String{
            return ("about the terms.");
        }
        public function get DISCLAIMER_LAST_ORDER_TEXT():String{
            return ("\tWith this Remember Last Order function, This program will remember your recent order to facilitate the resubmission process. Please be reminded of accidental duplicated orders.\n\tIf you understand and accept the risk of using this Remember Last Order function. We will take no responsibility on any loss or damage from any errors or actions.");
        }
        public function get PLEASE_SELECT_LANGUAGE():String{
            return ("Select Language");
        }
        public function get LANGUAGE_ENGLISH():String{
            return ("English");
        }
        public function get LANGUAGE_THAI():String{
            return ("Thai");
        }
        public function get AVERAGE_PRICE_TWO_LINE():String{
            return ("Average\nPrice");
        }
        public function get AMOUNT_PRICE_TWO_LINE():String{
            return ("Amount\n(Price)");
        }
        public function get DISPLAY():String{
            return ("Display");
        }
        public function get DISPLAY_QUALITY():String{
            return ("Display Quality");
        }
        public function get SCREEN_LAYOUT():String{
            return ("Screen Layout");
        }
        public function get AUTO_DETECT():String{
            return ("Auto Detect");
        }
        public function get NORMAL_SCREEN():String{
            return ("Normal Screen");
        }
        public function get WIDE_SCREEN():String{
            return ("Wide Screen");
        }
        public function get DISPLAY_TEXT():String{
            return ("Display Text");
        }
        public function get FONT_SIZE():String{
            return ("Font Size");
        }
        public function get FONT_COLOR():String{
            return ("Font Color");
        }
        public function get RESTORE_TO_DEFAULT():String{
            return ("Restore to Default");
        }
        public function get PREVIEW():String{
            return ("Preview");
        }
        public function get FPS_BEST():String{
            return ("Best (60 frame per sec)");
        }
        public function get FPS_NORMAL():String{
            return ("Normal (24 frame per sec)");
        }
        public function get FPS_LOW():String{
            return ("Low (10 frame per sec)");
        }
        public function get FONT_LARGE():String{
            return ("Large");
        }
        public function get FONT_MEDIUM():String{
            return ("Medium");
        }
        public function get FONT_SMALL():String{
            return ("Small");
        }
        public function get QUALITY_RECOMMENDATION():String{
            return ("Higher quality requires more PC resources\nplease choose your display quality appropriately.");
        }
        public function get CUSTOMIZE_SCREEN():String{
            return ("Customized Screen");
        }
        public function get DEFAULT_SCREEN_BUTTON():String{
            return ("Default Screen");
        }
        public function get CUSTOMIZE_SCREEN_BUTTON():String{
            return ("Customized Screen");
        }
        public function get DEFAULT_SCREEN_DESC():String{
            return ("Display default screen with basic functions which are easily used and suitable to investor.");
        }
        public function get CUSTOMIZE_SCREEN_DESC():String{
            return ("Customize screens and functions by choosing widgets which are suited to your usage.");
        }
        public function get RESTORE_TO_INITIAL_CUSTOMIZE():String{
            return ("Restore to initial Customized screen");
        }
        public function get FOR():String{
            return ("For");
        }
        public function get NEW_USER():String{
            return ("New User");
        }
        public function get EXPERIENCED_USER():String{
            return ("Experienced User");
        }
        public function get CUSTOMIZE_SCREEN_CONFIRM():String{
            return ("System will restore to initial customized screen. Please confirm to proceed. ");
        }
        public function get STOP():String{
            return ("Stop");
        }
        public function get DEFAULT_ACCOUNT_NO():String{
            return ("Set default Account No.");
        }
        public function get EXECUTE_NUMBER():String{
            return ("Executed #");
        }
        public function get TECHNICAL_CHART():String{
            return ("Technical");
        }
        public function get AUTO_ADJUST_SIZE():String{
            return ("Auto Adjust Size");
        }
        public function get AUTO_ADJUST_SIZE_TEXT():String{
            return ("If you select:\n\n    o  ON (Default): Program will automatically adjust screen size to\n        the fixed ratio, and all functions will be available for usage.\n\n    o  OFF: User can freely adjust screen size, but some functions will\n        be unavailable for usage e.g. Technical Chart, or new functions to\n        be added in the future.");
        }
        public function get MONEYNESS():String{
            return ("Moneyness");
        }
        public function get PERCENTCHANGE_1W():String{
            return ("%Chg 1W");
        }
        public function get PERCENTCHANGE_1M():String{
            return ("%Chg 1M");
        }
        public function get PERCENTCHANGE_3M():String{
            return ("%Chg 3M");
        }
        public function get MARKET_CAP_MB():String{
            return ("Market Cap. (MB)");
        }
        public function get LIFE_HIGH():String{
            return ("Life High");
        }
        public function get LIFE_LOW():String{
            return ("Life Low");
        }

    }
}//package com.settrade.streaming5.language 
﻿package com.settrade.streaming5.language {

    public class ThaiLanguageConfig implements ILanguageConfig {

        public function ThaiLanguageConfig(){
            super();
        }
        public function get ONE_D_TIME_DECAY():String{
            return ("1d Time Decay");
        }
        public function get ONE_M():String{
            return ("1M");
        }
        public function get ONE_Y():String{
            return ("1Y");
        }
        public function get THREE_M():String{
            return ("3M");
        }
        public function get FIFTY_TWO_WEEK_LOW():String{
            return ("52W ต่ำสุด");
        }
        public function get FIFTY_TWO_WEEK_HIGH():String{
            return ("52W สูงสุด");
        }
        public function get SIX_M():String{
            return ("6M");
        }
        public function get ACCOUNT_NUMBER():String{
            return ("เลขที่ บ/ช");
        }
        public function get ACTION():String{
            return ("การกระทำ");
        }
        public function get ACTUAL_VOLUME():String{
            return ("ปริมาณเหลือจริง");
        }
        public function get ACTUAL_VOLUME_TWO_LINE():String{
            return ("เหลือ\nจริง");
        }
        public function get ADD():String{
            return ("เพิ่ม");
        }
        public function get ALERT_CRITERIA():String{
            return ("เงื่อนไขการเตือน");
        }
        public function get ALERT_CRITERIA_TYPE():String{
            return ("ประเภท");
        }
        public function get ALERT_NOTIFICATION():String{
            return ("การแจ้งเตือน");
        }
        public function get ALL_ACCOUNT():String{
            return ("ทุกบัญชี");
        }
        public function get ALL_ACCOUNT_SHORT():String{
            return ("ทั้งหมด");
        }
        public function get ALL_IN_PREMIUM():String{
            return ("All-in-Premium");
        }
        public function get AMOUNT():String{
            return ("มูลค่า");
        }
        public function get AMOUNT_BAHT():String{
            return ("มูลค่า(บาท)");
        }
        public function get AMOUNT_COST():String{
            return ("มูลค่า(ต้นทุน)");
        }
        public function get AMOUNT_COST_TWO_LINE():String{
            return ("มูลค่า\n(ต้นทุน)");
        }
        public function get AUM_SIZE():String{
            return ("AUM Size");
        }
        public function get AUTO_FILL_PRICE():String{
            return ("ใส่ราคาอัตโนมัติ");
        }
        public function get AUTO_NVDR():String{
            return ("เลือก NVDR อัตโนมัติ");
        }
        public function get AVAILABLE_VOLUME():String{
            return ("ปริมาณคงเหลือ");
        }
        public function get AVAILABLE_VOLUME_TWO_LINE():String{
            return ("คง\nเหลือ");
        }
        public function get AVERAGE():String{
            return ("เฉลี่ย");
        }
        public function get AVERAGE_BUY():String{
            return ("เฉลี่ยซื้อ");
        }
        public function get AVERAGE_CLOSE():String{
            return ("เฉลี่ย/ปิด");
        }
        public function get AVERAGE_COST():String{
            return ("ต้นทุนเฉลี่ย");
        }
        public function get AVERAGE_COST_TWO_LINE():String{
            return ("ต้นทุน\nเฉลี่ย");
        }
        public function get AVERAGE_PREVIOUS_SETTLEMENT():String{
            return ("เฉลี่ย/P.Settle");
        }
        public function get AVERAGE_PRICE():String{
            return ("ราคาเฉลี่ย");
        }
        public function get AVERAGE_SELL():String{
            return ("เฉลี่ยขาย");
        }
        public function get BACK():String{
            return ("กลับ");
        }
        public function get BAHT():String{
            return ("บาท");
        }
        public function get BALANCE_VOLUME():String{
            return ("คงเหลือ");
        }
        public function get BASIS():String{
            return ("Basis");
        }
        public function get BID_OFFER():String{
            return ("เสนอซื้อ/ขาย");
        }
        public function get BID_PRICE():String{
            return ("เสนอซื้อ");
        }
        public function get BID_VOLUME_SHORT():String{
            return ("ปริมาณซื้อ");
        }
        public function get BREAK_EVEN():String{
            return ("จุดคุ้มทุน");
        }
        public function get BROKER_ANNOUCEMENT():String{
            return ("ข่าวจากโบรกเกอร์");
        }
        public function get BUY():String{
            return ("ซื้อ");
        }
        public function get BUY_AMOUNT():String{
            return ("มูลค่าซื้อ");
        }
        public function get BUY_ORDER_NUMBER():String{
            return ("# คำสั่งซื้อ");
        }
        public function get BUY_SELL():String{
            return ("ซื้อ/ขาย");
        }
        public function get BUY_VOLUME_SHORT():String{
            return ("ปริมาณซื้อ");
        }
        public function get BY_DATE():String{
            return ("รายวัน");
        }
        public function get CANCEL():String{
            return ("ยกเลิก");
        }
        public function get CANCEL_ORDER_NEW_LINE():String{
            return ("ยกเลิก\nคำสั่ง");
        }
        public function get CANCEL_SELECTED_ORDER():String{
            return ("ยกเลิกคำสั่งที่เลือก");
        }
        public function get CANCELLED_VOLUME():String{
            return ("ยกเลิก");
        }
        public function get CATEGORY():String{
            return ("หมวด");
        }
        public function get CEIL_FLOOR():String{
            return ("ซิลลิ่ง/ฟลอร์");
        }
        public function get CELING():String{
            return ("ซิลลิ่ง");
        }
        public function get CHANGE():String{
            return ("เปลี่ยน");
        }
        public function get CHANGE_ACCOUNT_NUMBER():String{
            return ("เปลี่ยนบัญชี");
        }
        public function get CHANGE_PASSWORD():String{
            return ("เปลี่ยนรหัสผ่าน");
        }
        public function get CHANGE_PIN():String{
            return ("เปลี่ยน PIN");
        }
        public function get CHANGE_SELECTED_ORDER():String{
            return ("เปลี่ยนคำสั่งที่เลือก");
        }
        public function get CHANGE_SHORT():String{
            return ("เปลี่ยน");
        }
        public function get CHART():String{
            return ("กราฟ");
        }
        public function get CIRCUIT_BREAKER():String{
            return ("Circuit Breaker");
        }
        public function get CLEAR():String{
            return ("เคลียร์");
        }
        public function get CLOSE():String{
            return ("ปิด");
        }
        public function get COMMISSION_NOT_INCLUDED():String{
            return ("ไม่รวม Commission และ VAT ");
        }
        public function get COMMON_STOCK():String{
            return ("หุ้นสามัญ");
        }
        public function get CONDITION():String{
            return ("เงื่อนไข");
        }
        public function get CONFIRM():String{
            return ("ยืนยัน");
        }
        public function get CONFIRMATION_POPUP():String{
            return ("Popup ยืนยัน");
        }
        public function get CONVERTIBLE():String{
            return ("หุ้นกู้แปลงสภาพ");
        }
        public function get COST():String{
            return ("ต้นทุน");
        }
        public function get DATE():String{
            return ("วันที่");
        }
        public function get DAYS_TO_EXPIRATION():String{
            return ("วัน ก่อนวันซื้อขายวันสุดท้าย");
        }
        public function get DEAL():String{
            return ("ซื้อขาย");
        }
        public function get DEAL_SUMMARY():String{
            return ("สรุปซื้อขาย");
        }
        public function get DERIVATIVES():String{
            return ("อนุพันธ์");
        }
        public function get DERIVATIVES_WARRANT():String{
            return ("ใบสำคัญแสดงสิทธิอนุพันธ์");
        }
        public function get DETAIL():String{
            return ("รายละเอียด");
        }
        public function get DONE():String{
            return ("เสร็จสิ้น");
        }
        public function get EDIT():String{
            return ("แก้ไข");
        }
        public function get EFFECTIVE_GEARING_PERCENT():String{
            return ("Eff. Gearing(%)");
        }
        public function get ENABLE():String{
            return ("ให้สิทธิ์");
        }
        public function get ENTER_INSTRUMENT_ID():String{
            return ("ใส่ชื่อย่อ");
        }
        public function get EPS():String{
            return ("EPS");
        }
        public function get EQUITY():String{
            return ("หลักทรัพย์");
        }
        public function get ERROR_ALERT():String{
            return ("Error !!!");
        }
        public function get ETF():String{
            return ("ETF");
        }
        public function get EXERCISE_DATE():String{
            return ("วันที่ใช้สิทธิ์");
        }
        public function get EXERCISE_PRICE():String{
            return ("ราคาใช้สิทธิ์");
        }
        public function get EXERCISE_RATIO():String{
            return ("อัตราใช้สิทธิ์");
        }
        public function get FEE_COMMISSION():String{
            return ("ค่าคอมมิชชั่น");
        }
        public function get FEE_VAT():String{
            return ("Fee & VAT");
        }
        public function get FLOOR():String{
            return ("ฟลอร์");
        }
        public function get FOREIGN_COMMON_STOCK():String{
            return ("หุ้นสามัญ (ต่างประเทศ)");
        }
        public function get FRIDAY_SHORT():String{
            return ("ศ.");
        }
        public function get GEARING_RATIO():String{
            return ("Gearing Ratio");
        }
        public function get HIGH():String{
            return ("สูงสุด");
        }
        public function get HIGH_LOW():String{
            return ("สูงสุด/ต่ำสุด");
        }
        public function get HIGH_SHORT():String{
            return ("สูง");
        }
        public function get ICEBERG():String{
            return ("Iceberg");
        }
        public function get ICEBERG_VOLUME():String{
            return ("ปริมาณ Iceberg");
        }
        public function get IM():String{
            return ("IM");
        }
        public function get IMPLIED_VOLATILY():String{
            return ("Imp. Vol.");
        }
        public function get IN_NOTIFICATION_CENTER():String{
            return ("Notification Center");
        }
        public function get INAV():String{
            return ("iNAV");
        }
        public function get INSTRUMENT_ID():String{
            return ("ชื่อย่อ");
        }
        public function get INTRADAY():String{
            return ("ระหว่างวัน");
        }
        public function get INTRINSIC_VALUE():String{
            return ("มูลค่าที่แท้จริง");
        }
        public function get KEYBOARD_SHORTCUT():String{
            return ("แป้นพิมพ์ลัด");
        }
        public function get KEYBOARD_SHORTCUY_KEY():String{
            return ("คีย์แป้นพิมพ์ลัด");
        }
        public function get LAST():String{
            return ("ล่าสุด");
        }
        public function get LAST_TRADE_DATE():String{
            return ("ซื้อขายสุดท้าย");
        }
        public function get LAST_UPDATE():String{
            return ("ล่าสุด");
        }
        public function get LONG():String{
            return ("Long");
        }
        public function get LOW():String{
            return ("ต่ำสุด");
        }
        public function get LOW_SHORT():String{
            return ("ต่ำ");
        }
        public function get MANUAL():String{
            return ("คู่มือการใช้โปรแกรม Streaming");
        }
        public function get MARGIN_RATE():String{
            return ("อัตรามาร์จิน");
        }
        public function get MARKET():String{
            return ("ตลาด");
        }
        public function get MARKET_PRICE():String{
            return ("ราคาตลาด");
        }
        public function get MARKET_PRICE_TWO_LINE():String{
            return ("ราคา\nตลาด");
        }
        public function get MARKET_VALUE():String{
            return ("มูลค่าตลาด");
        }
        public function get MARKET_VALUE_CHART():String{
            return ("กราฟมูลค่าตลาด");
        }
        public function get MARKET_VALUE_TWO_LINE():String{
            return ("มูลค่า\nตลาด");
        }
        public function get MATCHED_VOLUME():String{
            return ("จับคู่");
        }
        public function get MONDAY_SHORT():String{
            return ("จ.");
        }
        public function get MULTIPLE_ORDER():String{
            return ("ข้อมูลการส่งคำสั่งแบบ Multiple Order");
        }
        public function get NET_PAID_RECEIVED():String{
            return ("รับ(-)/จ่ายสุทธิ(+)");
        }
        public function get NET_PAID_RECEIVED_BAHT():String{
            return ("รับ/จ่ายสุทธิ (บาท)");
        }
        public function get NEWS():String{
            return ("ข่าว");
        }
        public function get NEWS_FROM():String{
            return ("แหล่งข่าว");
        }
        public function get NOTIFICATION_NEWS():String{
            return ("ข่าวเกี่ยวกับ @args ถูกอัพเดทจาก SET");
        }
        public function get NOTIFICATION_ORDER_MATCH():String{
            return ("Order No. @args is Matched : @args @args Volume @args @ Price @args");
        }
        public function get NOTIFICATION_ORDER_PARTIAL():String{
            return ("Order No. @args is Partially-Matched : @args @args Volume @args @ Price @args");
        }
        public function get NOTIFICATION_PRICE_ALERT():String{
            return ("Price Alert : @args @ @args \n[Criteria @args @args @args]");
        }
        public function get NOTIFICATION_RESEARCH():String{
            return ("Researches about @args update from Broker");
        }
        public function get NOTIFICATION_VOLUME_ALERT():String{
            return ("Volume Alert : @args @ @args Shares \n[Criteria @args @args @args]");
        }
        public function get NVDR():String{
            return ("NVDR");
        }
        public function get OFFER_PRICE():String{
            return ("เสนอขาย");
        }
        public function get OFFER_VOLUME_SHORT():String{
            return ("ปริมาณขาย");
        }
        public function get OI_VOLUME():String{
            return ("สถานะค้าง/Vol");
        }
        public function get OK():String{
            return ("OK");
        }
        public function get OPEN_0():String{
            return ("เปิดค่ำ");
        }
        public function get OPEN_1():String{
            return ("เปิดเช้า");
        }
        public function get OPEN_2():String{
            return ("เปิดบ่าย");
        }
        public function get OPTIONS_VALUE_TWO_LINE():String{
            return ("ออปชั่น\nมูลค่า");
        }
        public function get ORDER_ALERT():String{
            return ("เตือนการส่งคำสั่ง");
        }
        public function get ORDER_ENTRY():String{
            return ("ส่วนส่งคำสั่ง");
        }
        public function get ORDER_NUMBER():String{
            return ("คำสั่งที่");
        }
        public function get ORDER_STATUS():String{
            return ("ความหมายของสถานะคำสั่ง");
        }
        public function get OTHER_INFORMATION():String{
            return ("ข้อมูลอื่นๆ");
        }
        public function get PASSWORD_PIN():String{
            return ("รหัสผ่าน & PIN");
        }
        public function get PBV():String{
            return ("P/BV");
        }
        public function get PE():String{
            return ("P/E");
        }
        public function get PERCENT_CHANGE_SHORT():String{
            return ("% เปลี่ยน");
        }
        public function get PERCENT_TOTAL_VOLUME_SHORT():String{
            return ("% รวม");
        }
        public function get PERCENT_UNREALIZED_PROFIT_LOST():String{
            return ("% Unrealized P/L");
        }
        public function get PERCENT_UNREALIZED_PROFIT_LOST_CHART():String{
            return ("% Unrealized P/L Chart");
        }
        public function get PERCENT_UNREALIZED_PROFIT_LOST_TWO_LINE():String{
            return ("% Unrealized\nP/L");
        }
        public function get PERCENT_YIELD():String{
            return ("YIELD(%)");
        }
        public function get PIN():String{
            return ("PIN");
        }
        public function get PLACE_ORDER_CONFIRMATION():String{
            return ("การยืนยันการส่งคำสั่ง");
        }
        public function get POPUP_ALERT():String{
            return ("Popup เตือน");
        }
        public function get PORTFOLIO():String{
            return ("พอร์ต");
        }
        public function get PORTFOLIO_COST():String{
            return ("พอร์ต - ต้นทุน");
        }
        public function get PORTFOLIO_SETTLEMENT():String{
            return ("พอร์ต - Settlement");
        }
        public function get PORTFOLIO_TOTAL():String{
            return ("ยอดรวม");
        }
        public function get POSITION():String{
            return ("Position");
        }
        public function get POSITION_SHORT():String{
            return ("Pos");
        }
        public function get PREFERRED():String{
            return ("หุ้นบุริมสิทธิ์");
        }
        public function get PREVIOUS_CLOSE():String{
            return ("ปิดวันก่อนหน้า");
        }
        public function get PREVIOUS_OI():String{
            return ("คงค้างวันก่อน");
        }
        public function get PREVIOUS_SETTLEMENT():String{
            return ("Prev Settle");
        }
        public function get PRICE():String{
            return ("ราคา");
        }
        public function get PRICE_TYPE():String{
            return ("ประเภท");
        }
        public function get PUBLISH_VOLUME():String{
            return ("P/B Vol");
        }
        public function get QUOTE():String{
            return ("ราคา");
        }
        public function get REALIZED_PROFIT_LOST():String{
            return ("กำไร/ขาดทุน");
        }
        public function get REALIZED_PROFIT_LOST_TWO_LINE():String{
            return ("กำไร/\nขาดทุน");
        }
        public function get REFRESH():String{
            return ("รีเฟรช");
        }
        public function get REMEMBER_LAST_ORDER():String{
            return ("จำคำสั่งล่าสุด");
        }
        public function get RESEARCH():String{
            return ("บทวิเคราะห์");
        }
        public function get SATURDAY_SHORT():String{
            return ("ส.");
        }
        public function get SAVE():String{
            return ("บันทึก");
        }
        public function get SAVE_PIN():String{
            return ("บันทึก PIN");
        }
        public function get SEARCH():String{
            return ("ค้นหา");
        }
        public function get SELECT_LAST_ORDER_STATUS():String{
            return ("เลือกคำสั่งล่าสุด");
        }
        public function get SELL():String{
            return ("ขาย");
        }
        public function get SELL_AMOUNT():String{
            return ("มูลค่าขาย");
        }
        public function get SELL_ORDER_NUMBER():String{
            return ("# คำสั่งขาย");
        }
        public function get SELL_VOLUME_SHORT():String{
            return ("ปริมาณขาย");
        }
        public function get SET_CALENDAR():String{
            return ("ปฏิทินหลักทรัพย์");
        }
        public function get SET_ORDER_ALERT():String{
            return ("ตั้งเงื่อนไขเตือน");
        }
        public function get SET_PRICE_VOLUME_ALERT():String{
            return ("ตั้งค่าการแจ้งเตือนของราคาและปริมาณ");
        }
        public function get SETTINGS():String{
            return ("ตั้งค่า");
        }
        public function get SETTLEMENT_DATE():String{
            return ("Settlement Date");
        }
        public function get SETTLEMENT_FEE():String{
            return ("Settlement Fee");
        }
        public function get SHORT():String{
            return ("Short");
        }
        public function get SHORTCUT():String{
            return ("ตัวลัด");
        }
        public function get SHOW_IN_NOTIFICATION():String{
            return ("แสดงใน Notification");
        }
        public function get SIDE():String{
            return ("ฝั่ง");
        }
        public function get SOUND_ALERT():String{
            return ("การแจ้งเตือนด้วยเสียง");
        }
        public function get START_VOLUME_TWO_LINE():String{
            return ("ปริมาณ\nเริ่มต้น");
        }
        public function get STATUS():String{
            return ("สถานะ");
        }
        public function get STOCK_FILTER():String{
            return ("Stock Filter");
        }
        public function get STOP_CONDITION():String{
            return ("เงื่อนไข Stop");
        }
        public function get STOP_ORDER():String{
            return ("คำสั่ง Stop");
        }
        public function get STRIKE_PRICE():String{
            return ("Strike Price");
        }
        public function get SUBJECT():String{
            return ("หัวข้อ");
        }
        public function get SUBMIT():String{
            return ("ส่งคำสั่ง");
        }
        public function get SUNDAY_SHORT():String{
            return ("อา.");
        }
        public function get SYMBOL_SHORTCUT():String{
            return ("ตัวลัดสำหรับชื่อย่อ");
        }
        public function get SYMBOL_SHORTCUT_KEY():String{
            return ("คีย์ตัวลัดสำหรับชื่อย่อ");
        }
        public function get TECHNICAL():String{
            return ("ทางเทคนิค");
        }
        public function get TFEX_TOTAL():String{
            return ("ยอดรวม");
        }
        public function get THEME():String{
            return ("ธีม");
        }
        public function get THEORICAL_PRICE():String{
            return ("ราคาทางทฤษฎี");
        }
        public function get THURSDAY_SHORT():String{
            return ("พฤ.");
        }
        public function get TICKER():String{
            return ("ซื้อขายล่าสุด");
        }
        public function get TIME():String{
            return ("เวลา");
        }
        public function get TIME_TO_MATURE():String{
            return ("ถึงซื้อขายสุดท้าย");
        }
        public function get TIME_VALUE():String{
            return ("Time Value");
        }
        public function get TOTAL_AMOUNT():String{
            return ("ยอดรวม");
        }
        public function get TOTAL_BUY():String{
            return ("ซื้อ");
        }
        public function get TOTAL_CLOSE_TWO_LINE():String{
            return ("ปิด\nรวม");
        }
        public function get TOTAL_FEE():String{
            return ("รวมค่า Fee");
        }
        public function get TOTAL_OPEN_TWO_LINE():String{
            return ("เปิด\nรวม");
        }
        public function get TOTAL_SELL():String{
            return ("ขาย");
        }
        public function get TOTAL_VOLUME_SHORT():String{
            return ("ปริมาณรวม");
        }
        public function get TRANSACTION_AMOUNT():String{
            return ("มูลค่าการซื้อขาย");
        }
        public function get TUESDAY_SHORT():String{
            return ("อ.");
        }
        public function get TURNOVER_LIST():String{
            return ("หลักทรัพย์ที่เข้าข่ายมาตรการกำกับการซื้อขาย");
        }
        public function get UNDERLYING():String{
            return ("Underlying");
        }
        public function get UNIT_TRUST():String{
            return ("Unit Trust");
        }
        public function get UNREALIZED_PROFIT_LOST():String{
            return ("Unrealized P/L");
        }
        public function get UNREALIZED_PROFIT_LOST_TWO_LINE():String{
            return ("Unrealized\nP/L");
        }
        public function get VALIDITY():String{
            return ("เงื่อนไข");
        }
        public function get VALIDITY_SHORT():String{
            return ("Valid");
        }
        public function get VALUE():String{
            return ("มูลค่า");
        }
        public function get VALUE_K():String{
            return ("มูลค่า(พัน)");
        }
        public function get VAT():String{
            return ("VAT");
        }
        public function get VIEW_ALL():String{
            return ("ดูทั้งหมด");
        }
        public function get VOLUME():String{
            return ("ปริมาณ");
        }
        public function get VOLUME_BUY_SHORT():String{
            return ("ปริมาณซื้อ");
        }
        public function get VOLUME_BY_PRICE():String{
            return ("ปริมาณซื้อขายตามราคา");
        }
        public function get VOLUME_SELL_SHORT():String{
            return ("ปริมาณขาย");
        }
        public function get VOLUME_SHORT():String{
            return ("ปริมาณ");
        }
        public function get VOLUME_TOTAL_SHORT():String{
            return ("ยอดรวม");
        }
        public function get VOLUME_VALUE_K():String{
            return ("ปริมาณ/มูลค่า(พัน)");
        }
        public function get WARN_ALERT():String{
            return ("Warn !!");
        }
        public function get WARRANT():String{
            return ("วอร์แรนท์");
        }
        public function get WEDNESDAY_SHORT():String{
            return ("พ.");
        }
        public function get WITHHOLDING_SHORT():String{
            return ("W/H");
        }
        public function get ALERT_NO_SIDE():String{
            return ("กรุณาเลือกซื้อหรือขาย");
        }
        public function get ALERT_NO_INSTRUMENT_ID():String{
            return ("กรุณาระบุชื่อย่อ");
        }
        public function get ALERT_NO_VOLUME():String{
            return ("กรุณาระบุปริมาณ");
        }
        public function get ALERT_WRONG_VOLUME():String{
            return ("Incorrect volume format");
        }
        public function get ALERT_NO_PRICE():String{
            return ("กรุณาระบุราคา");
        }
        public function get ALERT_WRONG_PRICE():String{
            return ("Incorrect price format");
        }
        public function get ALERT_NO_PIN():String{
            return ("กรุณาระบุ PIN");
        }
        public function get ALERT_NO_CANCEL():String{
            return ("กรุณาเลือกคำสั่งที่ต้องการยกเลิก");
        }
        public function get ALERT_NO_STOP_INSTRUMENT_ID():String{
            return ("กรุณาระบุชื่อย่อในคำสั่ง Stop");
        }
        public function get ALERT_INVALID_PRICE():String{
            return ("ราคาต้องอยู่ระหว่าง @args และ @args");
        }
        public function get ALERT_NO_STOP_CONDITION():String{
            return ("กรุณาเลือกเงื่อนไขในคำสั่งStop");
        }
        public function get ALERT_NO_STOP_PRICE():String{
            return ("กรุณาระบุราคาในคำสั่ง Stop");
        }
        public function get ALERT_CANNOT_CONNECT():String{
            return ("ไม่สามารถเชื่อมต่อไปยังเซิร์ฟเวอร์");
        }
        public function get ALERT_UNKNOWN_PRICE():String{
            return ("Cannot Place Order: Unknown Price");
        }
        public function get ALERT_CONFIRM_CANCEL():String{
            return ("Cancel Order Confirmation. Order Number: ");
        }
        public function get ALERT_CONFIRM_CHANGE_PRICE():String{
            return ("Change Price Confirmation. New Price: ");
        }
        public function get ALERT_PROGRESS_PLACE():String{
            return ("Cannot Place Order at this time. Another action still in Process");
        }
        public function get ALERT_PROGRESS_CANCEL():String{
            return ("Cannot Cancel Order at this time. Another action still in Process");
        }
        public function get ALERT_PROGRESS_CHANGE():String{
            return ("Cannot Change Price at this time. Another action still in Process");
        }
        public function get MONTH_JANUARY():String{
            return ("มกราคม");
        }
        public function get MONTH_FEBRUARY():String{
            return ("กุมภาพันธ์");
        }
        public function get MONTH_MARCH():String{
            return ("มีนาคม");
        }
        public function get MONTH_APRIL():String{
            return ("เมษายน");
        }
        public function get MONTH_MAY():String{
            return ("พฤษภาคม");
        }
        public function get MONTH_JUNE():String{
            return ("มิถุนายน");
        }
        public function get MONTH_JULY():String{
            return ("กรกฎาคม");
        }
        public function get MONTH_AUGUST():String{
            return ("สิงหาคม");
        }
        public function get MONTH_SEPTEMBER():String{
            return ("กันยายน");
        }
        public function get MONTH_OCTOBER():String{
            return ("ตุลาคม");
        }
        public function get MONTH_NOVEMBER():String{
            return ("พฤศจิกายน");
        }
        public function get MONTH_DECEMBER():String{
            return ("ธันวาคม");
        }
        public function get MONTH_JANUARY_SHORT():String{
            return ("ม.ค.");
        }
        public function get MONTH_FEBRUARY_SHORT():String{
            return ("ก.พ.");
        }
        public function get MONTH_MARCH_SHORT():String{
            return ("มี.ย.");
        }
        public function get MONTH_APRIL_SHORT():String{
            return ("เม.ย.");
        }
        public function get MONTH_MAY_SHORT():String{
            return ("พ.ค.");
        }
        public function get MONTH_JUNE_SHORT():String{
            return ("มิ.ย.");
        }
        public function get MONTH_JULY_SHORT():String{
            return ("ก.ค.");
        }
        public function get MONTH_AUGUST_SHORT():String{
            return ("ส.ค.");
        }
        public function get MONTH_SEPTEMBER_SHORT():String{
            return ("ก.ย.");
        }
        public function get MONTH_OCTOBER_SHORT():String{
            return ("ต.ค.");
        }
        public function get MONTH_NOVEMBER_SHORT():String{
            return ("พ.ย.");
        }
        public function get MONTH_DECEMBER_SHORT():String{
            return ("ธ.ค.");
        }
        public function get DEAL_DATE():String{
            return ("วันซื้อขาย");
        }
        public function get CLOSED_CONTRACT():String{
            return ("จำนวนที่ปิดสถานะ");
        }
        public function get SETTLEMENT_PRICE():String{
            return ("Settlement Price");
        }
        public function get MATURITY_DATE():String{
            return ("วันหมดอายุ");
        }
        public function get SETTLE():String{
            return ("Settle");
        }
        public function get DAYS():String{
            return ("วัน");
        }
        public function get CONTRACT_SPEC():String{
            return ("ลักษณะสัญญา");
        }
        public function get MOVE_SELECTED_ORDER():String{
            return ("เลือกคำสั่งที่ต้องการ  ");
        }
        public function get TERMS_OF_SERVICE():String{
            return ("ข้อตกลงในการใช้บริการ");
        }
        public function get COPYRIGHT():String{
            return ("สงวนลิขสิทธ์");
        }
        public function get FOR_PUSH_MODE_ONLY():String{
            return ("สำหรับ Push mode เท่านั้น");
        }
        public function get ACCOUNT_SHORTCUT():String{
            return ("ตัวลัดสำหรับเลขที่บัญชี");
        }
        public function get CHANGE_LANGUAGE():String{
            return ("เปลี่ยนภาษา");
        }
        public function get ABOUT():String{
            return ("เกี่ยวกับ");
        }
        public function get SAVE_ALL_CHANGES():String{
            return ("Do you want to save all changes?");
        }
        public function get EMPTY_FIELD_CONFIRM():String{
            return ("You have some data with Empty Field(s) in these following settings. These data will NOT be saved after closing. Do you want to continue?");
        }
        public function get TAB_TICKER():String{
            return ("ล่าสุด");
        }
        public function get TAB_VOLUME_BY_PRICE():String{
            return ("ปริมาณตามราคา");
        }
        public function get DISCLAIMER_PIN_TEXT():String{
            return ("\tคุณสามารถบันทึก PIN บนโปรแกรมนี้ โดยไม่ต้องใส่ PINในการทำรายการอีก\nตามช่วงเวลาที่ตั้งค่าไว้\n\tคุณเข้าใจและยอมรับความเสี่ยงของการใช้ฟังก์ชันบันทึก PIN นี้ โดยรับทราบว่า\nบริษัทจะไม่รับผิดชอบต่อความเสียหายและผลกระทบที่อาจะเกิดขึ้น");
        }
        public function get DISCLAIMER_PIN_AGREE():String{
            return ("คุณตกลงจะบันทึก PIN");
        }
        public function get DISCLAIMER_PIN_FIVE_MINUTES():String{
            return ("5 นาที");
        }
        public function get DISCLAIMER_PIN_SESSION_EXPIRE():String{
            return ("จนกระทั่ง Logout หรือ Session expired");
        }
        public function get DISCLAIMER_AGREE_BUTTON():String{
            return ("ฉันยอมรับ");
        }
        public function get DISCLAIMER_DISAGREE_BUTTON():String{
            return ("ฉันไม่ยอมรับ");
        }
        public function get DISCLAIMER_AGREE_TEXT():String{
            return ("ข้อตกลงที่กล่าวไว้ด้านบน");
        }
        public function get DISCLAIMER_DISAGREE_TEXT():String{
            return ("ข้อตกลง");
        }
        public function get DISCLAIMER_LAST_ORDER_TEXT():String{
            return ("\tเมื่อใช้งานฟังก์ชันจำคำสั่งล่าสุด โปรแกรมจะจำค่าต่างๆของคำสั่งสุดท้ายที่ส่ง\nเพื่อให้ง่ายต่อการส่งคำสั่งเดิมอีกครั้ง ซึ่งอาจส่งผลให้ส่งคำสั่งซ้ำได้โดยไม่ตั้งใจได้\n\tคุณเข้าใจและยอมรับความเสี่ยงของการใช้ฟังก์ชันจำคำสั่งล่าสุดนี้ โดยรับทราบว่า\nบริษัทฯจะไม่รับผิดชอบต่อความเสียหายและผลกระทบที่อาจเกิดขึ้น");
        }
        public function get PLEASE_SELECT_LANGUAGE():String{
            return ("กรุณาเลือกภาษาในการแสดงผล");
        }
        public function get LANGUAGE_ENGLISH():String{
            return ("ภาษาอังกฤษ (English)");
        }
        public function get LANGUAGE_THAI():String{
            return ("ภาษาไทย (Thai)");
        }
        public function get AVERAGE_PRICE_TWO_LINE():String{
            return ("ราคา\nเฉลี่ย");
        }
        public function get AMOUNT_PRICE_TWO_LINE():String{
            return ("มูลค่า\n(ราคา)");
        }
        public function get DISPLAY():String{
            return ("รูปแบบการแสดงผล");
        }
        public function get DISPLAY_QUALITY():String{
            return ("คุณภาพการแสดงผล");
        }
        public function get SCREEN_LAYOUT():String{
            return ("รูปแบบหน้าจอ");
        }
        public function get AUTO_DETECT():String{
            return ("ระบบเลือกให้อัตโนมัติ");
        }
        public function get NORMAL_SCREEN():String{
            return ("หน้าจอปกติ");
        }
        public function get WIDE_SCREEN():String{
            return ("หน้าจอกว้าง");
        }
        public function get DISPLAY_TEXT():String{
            return ("รูปแบบตัวอักษร");
        }
        public function get FONT_SIZE():String{
            return ("ขนาดตัวอักษร");
        }
        public function get FONT_COLOR():String{
            return ("สีของตัวอักษร");
        }
        public function get RESTORE_TO_DEFAULT():String{
            return ("กลับสู่ค่าเริ่มต้น");
        }
        public function get PREVIEW():String{
            return ("ตัวอย่าง");
        }
        public function get FPS_BEST():String{
            return ("ดีเยี่ยม (60 frame ต่อวินาที)");
        }
        public function get FPS_NORMAL():String{
            return ("ปกติ (24 frame ต่อวินาที)");
        }
        public function get FPS_LOW():String{
            return ("ต่ำ (10 frame ต่อวินาที)");
        }
        public function get FONT_LARGE():String{
            return ("ใหญ่");
        }
        public function get FONT_MEDIUM():String{
            return ("กลาง");
        }
        public function get FONT_SMALL():String{
            return ("เล็ก");
        }
        public function get QUALITY_RECOMMENDATION():String{
            return ("คุณภาพการแสดงผลระดับสูงเหมาะกับเครื่องคอมพิวเตอร์\nที่ Spec สูง ควรเลือกระดับที่เหมาะสมกับเครื่องคอมพิวเตอร์\nที่ท่านใช้งาน");
        }
        public function get CUSTOMIZE_SCREEN():String{
            return ("จัดหน้าจอด้วยตัวเอง");
        }
        public function get DEFAULT_SCREEN_BUTTON():String{
            return ("หน้าจอสำเร็จรูป");
        }
        public function get CUSTOMIZE_SCREEN_BUTTON():String{
            return ("จัดหน้าจอด้วยตัวเอง");
        }
        public function get DEFAULT_SCREEN_DESC():String{
            return ("แสดงหน้าจอพื้นฐานที่ครบทุกฟังก์ชั่น ช่วยให้นักลงทุนใช้งานง่าย  ");
        }
        public function get CUSTOMIZE_SCREEN_DESC():String{
            return ("จัดรุปแบบหน้าจอ และเลือกฟังก์ชั่น ให้เหมาะสมกับการใช้งานของท่าน");
        }
        public function get RESTORE_TO_INITIAL_CUSTOMIZE():String{
            return ("กลับสู่หน้าจอเริ่มต้นของการจัดหน้าจอด้วยตัวเอง");
        }
        public function get FOR():String{
            return ("สำหรับ");
        }
        public function get NEW_USER():String{
            return ("ผู้ใช้เริ่มต้น");
        }
        public function get EXPERIENCED_USER():String{
            return ("ผู้ใช้ที่คุ้นเคยแล้ว");
        }
        public function get CUSTOMIZE_SCREEN_CONFIRM():String{
            return ("ยืนยันกลับสู่หน้าจอเริ่มต้น โดยระบบจะเคลียร์หน้าจอที่เคยปรับแต่ง ");
        }
        public function get STOP():String{
            return ("Stop");
        }
        public function get DEFAULT_ACCOUNT_NO():String{
            return ("ระบุเลขที่บัญชีเริ่มต้น");
        }
        public function get EXECUTE_NUMBER():String{
            return ("คำสั่งจับคู่ #");
        }
        public function get TECHNICAL_CHART():String{
            return ("กราฟเทคนิค");
        }
        public function get AUTO_ADJUST_SIZE():String{
            return ("ปรับสัดส่วนอัตโนมัติ");
        }
        public function get AUTO_ADJUST_SIZE_TEXT():String{
            return ("หากท่านเลือก:\n\n    o  ON: การย่อหรือขยายขนาดหน้าจอ Streaming โปรแกรมจะปรับ\n        ขนาดอัตโนมัติให้เป็นสัดส่วนเดิม และจะสามารถใช้งานได้ทุกฟังก์ชั่น\n\n    o  OFF: การย่อหรือขยายขนาดหน้าจอ Streaming โปรแกรมตาม\n        สัดส่วนที่ปรับย่อขยาย แต่จะไม่สามารถใช้งานได้ทุกฟังก์ชั่นเช่น \n        Technical Chart  หรือฟังก์ชั่นเพิ่มเติมอื่นๆ ในอนาคต");
        }
        public function get MONEYNESS():String{
            return ("Moneyness");
        }
        public function get PERCENTCHANGE_1W():String{
            return ("%Chg 1W");
        }
        public function get PERCENTCHANGE_1M():String{
            return ("%Chg 1M");
        }
        public function get PERCENTCHANGE_3M():String{
            return ("%Chg 3M");
        }
        public function get MARKET_CAP_MB():String{
            return ("Market Cap. (MB)");
        }
        public function get LIFE_HIGH():String{
            return ("Life High");
        }
        public function get LIFE_LOW():String{
            return ("Life Low");
        }

    }
}//package com.settrade.streaming5.language 
﻿package com.settrade.streaming5.language {

    public interface ILanguageConfig {

        function get ONE_D_TIME_DECAY():String;
        function get ONE_M():String;
        function get ONE_Y():String;
        function get THREE_M():String;
        function get FIFTY_TWO_WEEK_LOW():String;
        function get FIFTY_TWO_WEEK_HIGH():String;
        function get SIX_M():String;
        function get ACCOUNT_NUMBER():String;
        function get ACTION():String;
        function get ACTUAL_VOLUME():String;
        function get ACTUAL_VOLUME_TWO_LINE():String;
        function get ADD():String;
        function get ALERT_CRITERIA():String;
        function get ALERT_CRITERIA_TYPE():String;
        function get ALERT_NOTIFICATION():String;
        function get ALL_ACCOUNT():String;
        function get ALL_ACCOUNT_SHORT():String;
        function get ALL_IN_PREMIUM():String;
        function get AMOUNT():String;
        function get AMOUNT_BAHT():String;
        function get AMOUNT_COST():String;
        function get AMOUNT_COST_TWO_LINE():String;
        function get AUM_SIZE():String;
        function get AUTO_FILL_PRICE():String;
        function get AUTO_NVDR():String;
        function get AVAILABLE_VOLUME():String;
        function get AVAILABLE_VOLUME_TWO_LINE():String;
        function get AVERAGE():String;
        function get AVERAGE_BUY():String;
        function get AVERAGE_CLOSE():String;
        function get AVERAGE_COST():String;
        function get AVERAGE_COST_TWO_LINE():String;
        function get AVERAGE_PREVIOUS_SETTLEMENT():String;
        function get AVERAGE_PRICE():String;
        function get AVERAGE_SELL():String;
        function get BACK():String;
        function get BAHT():String;
        function get BALANCE_VOLUME():String;
        function get BASIS():String;
        function get BID_OFFER():String;
        function get BID_PRICE():String;
        function get BID_VOLUME_SHORT():String;
        function get BREAK_EVEN():String;
        function get BROKER_ANNOUCEMENT():String;
        function get BUY():String;
        function get BUY_AMOUNT():String;
        function get BUY_ORDER_NUMBER():String;
        function get BUY_SELL():String;
        function get BUY_VOLUME_SHORT():String;
        function get BY_DATE():String;
        function get CANCEL():String;
        function get CANCEL_ORDER_NEW_LINE():String;
        function get CANCEL_SELECTED_ORDER():String;
        function get CANCELLED_VOLUME():String;
        function get CATEGORY():String;
        function get CEIL_FLOOR():String;
        function get CELING():String;
        function get CHANGE():String;
        function get CHANGE_ACCOUNT_NUMBER():String;
        function get CHANGE_PASSWORD():String;
        function get CHANGE_PIN():String;
        function get CHANGE_SELECTED_ORDER():String;
        function get CHANGE_SHORT():String;
        function get CHART():String;
        function get CIRCUIT_BREAKER():String;
        function get CLEAR():String;
        function get CLOSE():String;
        function get COMMISSION_NOT_INCLUDED():String;
        function get COMMON_STOCK():String;
        function get CONDITION():String;
        function get CONFIRM():String;
        function get CONFIRMATION_POPUP():String;
        function get CONVERTIBLE():String;
        function get COST():String;
        function get DATE():String;
        function get DAYS_TO_EXPIRATION():String;
        function get DEAL():String;
        function get DEAL_SUMMARY():String;
        function get DERIVATIVES():String;
        function get DERIVATIVES_WARRANT():String;
        function get DETAIL():String;
        function get DONE():String;
        function get EDIT():String;
        function get EFFECTIVE_GEARING_PERCENT():String;
        function get ENABLE():String;
        function get ENTER_INSTRUMENT_ID():String;
        function get EPS():String;
        function get EQUITY():String;
        function get ERROR_ALERT():String;
        function get ETF():String;
        function get EXERCISE_DATE():String;
        function get EXERCISE_PRICE():String;
        function get EXERCISE_RATIO():String;
        function get FEE_COMMISSION():String;
        function get FEE_VAT():String;
        function get FLOOR():String;
        function get FOREIGN_COMMON_STOCK():String;
        function get FRIDAY_SHORT():String;
        function get GEARING_RATIO():String;
        function get HIGH():String;
        function get HIGH_LOW():String;
        function get HIGH_SHORT():String;
        function get ICEBERG():String;
        function get ICEBERG_VOLUME():String;
        function get IM():String;
        function get IMPLIED_VOLATILY():String;
        function get IN_NOTIFICATION_CENTER():String;
        function get INAV():String;
        function get INSTRUMENT_ID():String;
        function get INTRADAY():String;
        function get INTRINSIC_VALUE():String;
        function get KEYBOARD_SHORTCUT():String;
        function get KEYBOARD_SHORTCUY_KEY():String;
        function get LAST():String;
        function get LAST_TRADE_DATE():String;
        function get LAST_UPDATE():String;
        function get LONG():String;
        function get LOW():String;
        function get LOW_SHORT():String;
        function get MANUAL():String;
        function get MARGIN_RATE():String;
        function get MARKET():String;
        function get MARKET_PRICE():String;
        function get MARKET_PRICE_TWO_LINE():String;
        function get MARKET_VALUE():String;
        function get MARKET_VALUE_CHART():String;
        function get MARKET_VALUE_TWO_LINE():String;
        function get MATCHED_VOLUME():String;
        function get MONDAY_SHORT():String;
        function get MULTIPLE_ORDER():String;
        function get NET_PAID_RECEIVED():String;
        function get NET_PAID_RECEIVED_BAHT():String;
        function get NEWS():String;
        function get NEWS_FROM():String;
        function get NOTIFICATION_NEWS():String;
        function get NOTIFICATION_ORDER_MATCH():String;
        function get NOTIFICATION_ORDER_PARTIAL():String;
        function get NOTIFICATION_PRICE_ALERT():String;
        function get NOTIFICATION_RESEARCH():String;
        function get NOTIFICATION_VOLUME_ALERT():String;
        function get NVDR():String;
        function get OFFER_PRICE():String;
        function get OFFER_VOLUME_SHORT():String;
        function get OI_VOLUME():String;
        function get OK():String;
        function get OPEN_0():String;
        function get OPEN_1():String;
        function get OPEN_2():String;
        function get OPTIONS_VALUE_TWO_LINE():String;
        function get ORDER_ALERT():String;
        function get ORDER_ENTRY():String;
        function get ORDER_NUMBER():String;
        function get ORDER_STATUS():String;
        function get OTHER_INFORMATION():String;
        function get PASSWORD_PIN():String;
        function get PBV():String;
        function get PE():String;
        function get PERCENT_CHANGE_SHORT():String;
        function get PERCENT_TOTAL_VOLUME_SHORT():String;
        function get PERCENT_UNREALIZED_PROFIT_LOST():String;
        function get PERCENT_UNREALIZED_PROFIT_LOST_CHART():String;
        function get PERCENT_UNREALIZED_PROFIT_LOST_TWO_LINE():String;
        function get PERCENT_YIELD():String;
        function get PIN():String;
        function get PLACE_ORDER_CONFIRMATION():String;
        function get POPUP_ALERT():String;
        function get PORTFOLIO():String;
        function get PORTFOLIO_COST():String;
        function get PORTFOLIO_SETTLEMENT():String;
        function get PORTFOLIO_TOTAL():String;
        function get POSITION():String;
        function get POSITION_SHORT():String;
        function get PREFERRED():String;
        function get PREVIOUS_CLOSE():String;
        function get PREVIOUS_OI():String;
        function get PREVIOUS_SETTLEMENT():String;
        function get PRICE():String;
        function get PRICE_TYPE():String;
        function get PUBLISH_VOLUME():String;
        function get QUOTE():String;
        function get REALIZED_PROFIT_LOST():String;
        function get REALIZED_PROFIT_LOST_TWO_LINE():String;
        function get REFRESH():String;
        function get REMEMBER_LAST_ORDER():String;
        function get RESEARCH():String;
        function get SATURDAY_SHORT():String;
        function get SAVE():String;
        function get SAVE_PIN():String;
        function get SEARCH():String;
        function get SELECT_LAST_ORDER_STATUS():String;
        function get SELL():String;
        function get SELL_AMOUNT():String;
        function get SELL_ORDER_NUMBER():String;
        function get SELL_VOLUME_SHORT():String;
        function get SET_CALENDAR():String;
        function get SET_ORDER_ALERT():String;
        function get SET_PRICE_VOLUME_ALERT():String;
        function get SETTINGS():String;
        function get SETTLEMENT_DATE():String;
        function get SETTLEMENT_FEE():String;
        function get SHORT():String;
        function get SHORTCUT():String;
        function get SHOW_IN_NOTIFICATION():String;
        function get SIDE():String;
        function get SOUND_ALERT():String;
        function get START_VOLUME_TWO_LINE():String;
        function get STATUS():String;
        function get STOCK_FILTER():String;
        function get STOP_CONDITION():String;
        function get STOP_ORDER():String;
        function get STRIKE_PRICE():String;
        function get SUBJECT():String;
        function get SUBMIT():String;
        function get SUNDAY_SHORT():String;
        function get SYMBOL_SHORTCUT():String;
        function get SYMBOL_SHORTCUT_KEY():String;
        function get TECHNICAL():String;
        function get TFEX_TOTAL():String;
        function get THEME():String;
        function get THEORICAL_PRICE():String;
        function get THURSDAY_SHORT():String;
        function get TICKER():String;
        function get TIME():String;
        function get TIME_TO_MATURE():String;
        function get TIME_VALUE():String;
        function get TOTAL_AMOUNT():String;
        function get TOTAL_BUY():String;
        function get TOTAL_CLOSE_TWO_LINE():String;
        function get TOTAL_FEE():String;
        function get TOTAL_OPEN_TWO_LINE():String;
        function get TOTAL_SELL():String;
        function get TOTAL_VOLUME_SHORT():String;
        function get TRANSACTION_AMOUNT():String;
        function get TUESDAY_SHORT():String;
        function get TURNOVER_LIST():String;
        function get UNDERLYING():String;
        function get UNIT_TRUST():String;
        function get UNREALIZED_PROFIT_LOST():String;
        function get UNREALIZED_PROFIT_LOST_TWO_LINE():String;
        function get VALIDITY():String;
        function get VALIDITY_SHORT():String;
        function get VALUE():String;
        function get VALUE_K():String;
        function get VAT():String;
        function get VIEW_ALL():String;
        function get VOLUME():String;
        function get VOLUME_BUY_SHORT():String;
        function get VOLUME_BY_PRICE():String;
        function get VOLUME_SELL_SHORT():String;
        function get VOLUME_SHORT():String;
        function get VOLUME_TOTAL_SHORT():String;
        function get VOLUME_VALUE_K():String;
        function get WARN_ALERT():String;
        function get WARRANT():String;
        function get WEDNESDAY_SHORT():String;
        function get WITHHOLDING_SHORT():String;
        function get ALERT_NO_SIDE():String;
        function get ALERT_NO_INSTRUMENT_ID():String;
        function get ALERT_NO_VOLUME():String;
        function get ALERT_WRONG_VOLUME():String;
        function get ALERT_NO_PRICE():String;
        function get ALERT_WRONG_PRICE():String;
        function get ALERT_NO_PIN():String;
        function get ALERT_NO_CANCEL():String;
        function get ALERT_NO_STOP_INSTRUMENT_ID():String;
        function get ALERT_INVALID_PRICE():String;
        function get ALERT_NO_STOP_CONDITION():String;
        function get ALERT_NO_STOP_PRICE():String;
        function get ALERT_CANNOT_CONNECT():String;
        function get ALERT_UNKNOWN_PRICE():String;
        function get ALERT_CONFIRM_CANCEL():String;
        function get ALERT_CONFIRM_CHANGE_PRICE():String;
        function get ALERT_PROGRESS_PLACE():String;
        function get ALERT_PROGRESS_CANCEL():String;
        function get ALERT_PROGRESS_CHANGE():String;
        function get MONTH_JANUARY():String;
        function get MONTH_FEBRUARY():String;
        function get MONTH_MARCH():String;
        function get MONTH_APRIL():String;
        function get MONTH_MAY():String;
        function get MONTH_JUNE():String;
        function get MONTH_JULY():String;
        function get MONTH_AUGUST():String;
        function get MONTH_SEPTEMBER():String;
        function get MONTH_OCTOBER():String;
        function get MONTH_NOVEMBER():String;
        function get MONTH_DECEMBER():String;
        function get MONTH_JANUARY_SHORT():String;
        function get MONTH_FEBRUARY_SHORT():String;
        function get MONTH_MARCH_SHORT():String;
        function get MONTH_APRIL_SHORT():String;
        function get MONTH_MAY_SHORT():String;
        function get MONTH_JUNE_SHORT():String;
        function get MONTH_JULY_SHORT():String;
        function get MONTH_AUGUST_SHORT():String;
        function get MONTH_SEPTEMBER_SHORT():String;
        function get MONTH_OCTOBER_SHORT():String;
        function get MONTH_NOVEMBER_SHORT():String;
        function get MONTH_DECEMBER_SHORT():String;
        function get DEAL_DATE():String;
        function get CLOSED_CONTRACT():String;
        function get SETTLEMENT_PRICE():String;
        function get MATURITY_DATE():String;
        function get SETTLE():String;
        function get DAYS():String;
        function get CONTRACT_SPEC():String;
        function get MOVE_SELECTED_ORDER():String;
        function get TERMS_OF_SERVICE():String;
        function get COPYRIGHT():String;
        function get FOR_PUSH_MODE_ONLY():String;
        function get ACCOUNT_SHORTCUT():String;
        function get CHANGE_LANGUAGE():String;
        function get ABOUT():String;
        function get SAVE_ALL_CHANGES():String;
        function get EMPTY_FIELD_CONFIRM():String;
        function get TAB_TICKER():String;
        function get TAB_VOLUME_BY_PRICE():String;
        function get DISCLAIMER_PIN_TEXT():String;
        function get DISCLAIMER_PIN_AGREE():String;
        function get DISCLAIMER_PIN_FIVE_MINUTES():String;
        function get DISCLAIMER_PIN_SESSION_EXPIRE():String;
        function get DISCLAIMER_AGREE_BUTTON():String;
        function get DISCLAIMER_DISAGREE_BUTTON():String;
        function get DISCLAIMER_AGREE_TEXT():String;
        function get DISCLAIMER_DISAGREE_TEXT():String;
        function get DISCLAIMER_LAST_ORDER_TEXT():String;
        function get PLEASE_SELECT_LANGUAGE():String;
        function get LANGUAGE_ENGLISH():String;
        function get LANGUAGE_THAI():String;
        function get AVERAGE_PRICE_TWO_LINE():String;
        function get AMOUNT_PRICE_TWO_LINE():String;
        function get DISPLAY():String;
        function get DISPLAY_QUALITY():String;
        function get SCREEN_LAYOUT():String;
        function get AUTO_DETECT():String;
        function get NORMAL_SCREEN():String;
        function get WIDE_SCREEN():String;
        function get DISPLAY_TEXT():String;
        function get FONT_SIZE():String;
        function get FONT_COLOR():String;
        function get RESTORE_TO_DEFAULT():String;
        function get PREVIEW():String;
        function get FPS_BEST():String;
        function get FPS_NORMAL():String;
        function get FPS_LOW():String;
        function get FONT_LARGE():String;
        function get FONT_MEDIUM():String;
        function get FONT_SMALL():String;
        function get QUALITY_RECOMMENDATION():String;
        function get CUSTOMIZE_SCREEN():String;
        function get DEFAULT_SCREEN_BUTTON():String;
        function get CUSTOMIZE_SCREEN_BUTTON():String;
        function get DEFAULT_SCREEN_DESC():String;
        function get CUSTOMIZE_SCREEN_DESC():String;
        function get RESTORE_TO_INITIAL_CUSTOMIZE():String;
        function get FOR():String;
        function get NEW_USER():String;
        function get EXPERIENCED_USER():String;
        function get CUSTOMIZE_SCREEN_CONFIRM():String;
        function get STOP():String;
        function get DEFAULT_ACCOUNT_NO():String;
        function get EXECUTE_NUMBER():String;
        function get TECHNICAL_CHART():String;
        function get AUTO_ADJUST_SIZE():String;
        function get AUTO_ADJUST_SIZE_TEXT():String;
        function get MONEYNESS():String;
        function get PERCENTCHANGE_1W():String;
        function get PERCENTCHANGE_1M():String;
        function get PERCENTCHANGE_3M():String;
        function get MARKET_CAP_MB():String;
        function get LIFE_HIGH():String;
        function get LIFE_LOW():String;

    }
}//package com.settrade.streaming5.language 
﻿package com.settrade.streaming5.manager {
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import flash.events.*;
    import flash.utils.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.widget.component.*;
    import flash.system.*;
    import flash.net.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;
    import com.settrade.streaming5.widget.component.standard.unavailable.*;

    public class WidgetComponentProvider extends Manager {

        private static var _instance:WidgetComponentProvider;
        private static var logger:Logger = new Logger(prototype.constructor);

        var widgetListManager:WidgetAttributeManager;
        protected var _loaderMap:Dictionary;
        protected var _statusMap:Dictionary;
        protected var _pathMap:Dictionary;

        public function WidgetComponentProvider(){
            this.widgetListManager = WidgetAttributeManager.getInstance();
            super();
            this._loaderMap = new Dictionary();
            this._statusMap = new Dictionary();
            this._pathMap = new Dictionary();
            this.setWidgetStatus(WidgetAttribute.UNAVAILABLE.widgetId, WidgetLoadedStatus.LOADED);
        }
        public static function getInstance():WidgetComponentProvider{
            if (_instance == null){
                _instance = new (WidgetComponentProvider)();
            };
            return (_instance);
        }

        public function getWidgetComponent(widgetId:String):WidgetComponent{
            var classRef:* = null;
            var widgetComponent:* = null;
            var widgetId:* = widgetId;
            if (this.widgetListManager.hasWidgetAttributeByWidgetId(widgetId)){
                if (this.canCreate(widgetId)){
                    classRef = this.getClass(this.widgetListManager.getWidgetAttributeByWidgetId(widgetId).classPath);
                    widgetComponent = WidgetComponent(new (classRef)());
                    widgetComponent.loadWidgetAttribute(widgetId);
                    return (widgetComponent);
                    var _slot1:* = error;
                    logger.fatal(((((("Error when create widget [" + widgetId) + "] : ") + _slot1.getStackTrace()) + ", ") + _slot1.message));
                } else {
                    logger.fatal((("Cannot create widget [" + widgetId) + "]"));
                };
            } else {
                logger.fatal((("Widget Id not Found [" + widgetId) + "]"));
            };
            return (new UnavailableWidget(widgetId));
        }
        public function canCreate(widgetId:String):Boolean{
            return (this.getWidgetStatusByWidgetId(widgetId).isLoaded());
        }
        public function loadWidgetComponentFromRemote(widgetId:String):void{
            var url:String;
            var appDomain:ApplicationDomain;
            var context:LoaderContext;
            var remoteLoader:Loader;
            var urlRequest:URLRequest;
            var urlVariables:URLVariables;
            if (this.widgetListManager.hasWidgetAttributeByWidgetId(widgetId)){
                url = this.widgetListManager.getWidgetAttributeByWidgetId(widgetId).path;
                logger.info(((("Load Widget [" + widgetId) + "] from ") + url));
                if (((this.getWidgetStatusByWidgetId(widgetId).isNoState()) || (this.getWidgetStatusByWidgetId(widgetId).isError()))){
                    appDomain = ApplicationDomain.currentDomain;
                    context = new LoaderContext(false, appDomain);
                    remoteLoader = new Loader();
                    remoteLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, this.onRemoteLoaderCompleteHandler);
                    remoteLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, this.onIOErrorHandler);
                    remoteLoader.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onSecurityErrorHandler);
                    urlRequest = new URLRequest(url);
                    urlVariables = new URLVariables();
                    urlVariables.nocache = StreamingAttribute.lastModified;
                    urlRequest.data = urlVariables;
                    this._loaderMap[remoteLoader] = url;
                    if (this._pathMap[url] == null){
                        this._pathMap[url] = new Array();
                    };
                    if (this._pathMap[url].indexOf(widgetId) == -1){
                        this._pathMap[url].push(widgetId);
                    };
                    this.setWidgetStatus(widgetId, WidgetLoadedStatus.LOADING);
                    remoteLoader.load(urlRequest, context);
                } else {
                    if (this.getWidgetStatusByWidgetId(widgetId).isLoading()){
                        if (this._pathMap[url] == null){
                            this._pathMap[url] = new Array();
                        };
                        if (this._pathMap[url].indexOf(widgetId) == -1){
                            this._pathMap[url].push(widgetId);
                        };
                    };
                };
            } else {
                logger.fatal((("Widget [" + widgetId) + "] didn't load yet"));
            };
        }
        private function onRemoteLoaderCompleteHandler(event:Event):void{
            var widgetId:String;
            var loaderInfo:LoaderInfo = LoaderInfo(event.target);
            var loader:Loader = loaderInfo.loader;
            var path:String = this._loaderMap[loader];
            for each (widgetId in this._pathMap[path]) {
                logger.info((("Remote load == { widgetId: " + widgetId) + " }"));
                this.setWidgetStatus(widgetId, WidgetLoadedStatus.LOADED);
                dispatcher.notifyControlMessage(new WidgetLoadedMessage(widgetId, WidgetLoadedStatus.LOADED));
            };
            this._pathMap[path] = null;
            this.destroyLoader(loader);
        }
        private function onSecurityErrorHandler(event:SecurityErrorEvent):void{
            var widgetId:String;
            var loaderInfo:LoaderInfo = LoaderInfo(event.target);
            var loader:Loader = loaderInfo.loader;
            var url:String = loaderInfo.url;
            var path:String = this._loaderMap[loader];
            for each (widgetId in this._pathMap[path]) {
                logger.error(((("SecurityError: Cannot Load " + url) + ", widgetId: ") + widgetId));
                this.setWidgetStatus(widgetId, WidgetLoadedStatus.ERROR);
                dispatcher.notifyControlMessage(new WidgetLoadedMessage(widgetId, WidgetLoadedStatus.ERROR));
            };
            this._pathMap[path] = null;
            this.destroyLoader(loader);
        }
        private function onIOErrorHandler(event:IOErrorEvent):void{
            var widgetId:String;
            var loaderInfo:LoaderInfo = LoaderInfo(event.target);
            var loader:Loader = loaderInfo.loader;
            var url:String = loaderInfo.url;
            var path:String = this._loaderMap[loader];
            for each (widgetId in this._pathMap[path]) {
                logger.error(((("IOError: Cannot Load " + url) + ", widgetId: ") + widgetId));
                this.setWidgetStatus(widgetId, WidgetLoadedStatus.ERROR);
                dispatcher.notifyControlMessage(new WidgetLoadedMessage(widgetId, WidgetLoadedStatus.ERROR));
            };
            this._pathMap[path] = null;
            this.destroyLoader(loader);
        }
        private function destroyLoader(loader:Loader){
            this._loaderMap[loader] = null;
            loader.contentLoaderInfo.addEventListener(Event.COMPLETE, this.onRemoteLoaderCompleteHandler);
            loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, this.onIOErrorHandler);
            loader.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onSecurityErrorHandler);
            loader.unloadAndStop();
        }
        private function getClass(classPath:String):Class{
            return (Class(getDefinitionByName(classPath)));
        }
        private function getWidgetStatusByWidgetId(widgetId:String):WidgetLoadedStatus{
            var widgetAttribute:WidgetAttribute = this.widgetListManager.getWidgetAttributeByWidgetId(widgetId);
            return (this.getWidgetStatusByPath(widgetAttribute.path));
        }
        private function getWidgetStatusByPath(path:String):WidgetLoadedStatus{
            if (this._statusMap[path] == null){
                return (WidgetLoadedStatus.NO_STATE);
            };
            return (this._statusMap[path]);
        }
        private function setWidgetStatus(widgetId:String, status:WidgetLoadedStatus):void{
            var widgetAttribute:WidgetAttribute = this.widgetListManager.getWidgetAttributeByWidgetId(widgetId);
            this._statusMap[widgetAttribute.path] = status;
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import flash.utils.*;
    import com.settrade.log.logger.*;

    public class FavouriteListManager extends Manager {

        protected static var instance:FavouriteListManager;
        private static var logger:Logger = new Logger(prototype.constructor);

        protected var _favouriteListDictionary:Dictionary;
        protected var _favouriteListNameArray:Array;
        protected var _currentSelectedListName:String;

        public function FavouriteListManager(){
            super();
            this._favouriteListDictionary = new Dictionary();
            this._favouriteListNameArray = new Array();
            this._currentSelectedListName = "";
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():FavouriteListManager{
            if (instance == null){
                instance = new (FavouriteListManager)();
            };
            return (instance);
        }

        override public function startService():void{
        }
        override public function stopService():void{
        }
        public function addOrUpdateFavouriteList(listName:String, instrumentList:Array):void{
            this._favouriteListDictionary[listName] = instrumentList;
            if (this._favouriteListNameArray.indexOf(listName) == -1){
                this._favouriteListNameArray.push(listName);
            };
        }
        public function addInstrumentToFavouriteListName(listName:String, instrument:String):void{
            if (this._favouriteListDictionary[listName] != null){
                this._favouriteListDictionary[listName].push(instrument);
                logger.debug((((("Add [" + instrument) + "] to list [") + listName) + "]."));
            } else {
                logger.error((((("There is no favourite list name [" + listName) + "], [") + instrument) + "] will be not added to list."));
            };
        }
        public function removeInstrumentFromFavouriteName(listName:String, instrument:String):void{
            var i:*;
            if (this._favouriteListDictionary[listName] != null){
                i = 0;
                while (i < this._favouriteListDictionary[listName].length) {
                    if (this._favouriteListDictionary[listName][i] == instrument){
                        this._favouriteListDictionary[listName].splice(i, 1);
                        logger.debug((((("Remove [" + instrument) + "] from list [") + listName) + "]."));
                        return;
                    };
                    i++;
                };
                logger.error((((("There is no [" + instrument) + "] in [") + listName) + "]."));
            };
        }
        public function updateInstrumentInFavouriteName(listName:String, oldInstrument:String, newInstrument:String):void{
            var i:*;
            if (this._favouriteListDictionary[listName] != null){
                i = 0;
                while (i < this._favouriteListDictionary[listName].length) {
                    if (this._favouriteListDictionary[listName][i] == oldInstrument){
                        this._favouriteListDictionary[listName][i] = newInstrument;
                        logger.debug((((((("Update [" + oldInstrument) + "] to [") + newInstrument) + "] in list [") + listName) + "]."));
                        return;
                    };
                    i++;
                };
                logger.error((((("There is no [" + oldInstrument) + "] in [") + listName) + "]."));
            };
        }
        public function clearAllInstrumentInFavouriteName(listName:String):void{
            this._favouriteListDictionary[listName] = new Array();
        }
        public function swapInstrumentInFavouriteName(listName:String, oldInstrument:String, newInstrument:String):void{
            var i:*;
            var oldInstrumentIndex = -1;
            var newInstrumentIndex = -1;
            if (this._favouriteListDictionary[listName] != null){
                i = 0;
                while (i < this._favouriteListDictionary[listName].length) {
                    if (this._favouriteListDictionary[listName][i] == oldInstrument){
                        oldInstrumentIndex = i;
                        break;
                    };
                    i++;
                };
                i = 0;
                while (i < this._favouriteListDictionary[listName].length) {
                    if (this._favouriteListDictionary[listName][i] == newInstrument){
                        newInstrumentIndex = i;
                        break;
                    };
                    i++;
                };
                if (((!((oldInstrumentIndex == -1))) && (!((newInstrumentIndex == -1))))){
                    this._favouriteListDictionary[listName][oldInstrumentIndex] = newInstrument;
                    this._favouriteListDictionary[listName][newInstrumentIndex] = oldInstrument;
                };
            };
        }
        public function changeFavouriteListName(oldListName:String, newListName:String):void{
            this._favouriteListDictionary[newListName] = this._favouriteListDictionary[oldListName];
            this._favouriteListDictionary[oldListName] = null;
            this._favouriteListNameArray[this._favouriteListNameArray.indexOf(oldListName)] = newListName;
        }
        public function getFavouriteListName():Array{
            return (this._favouriteListNameArray);
        }
        public function getFavouriteInstrumentListByListName(listName:String):Array{
            if (this._favouriteListDictionary[listName] != null){
                return (this._favouriteListDictionary[listName]);
            };
            return (null);
        }
        public function getFavouriteListByIndex(index:int):Array{
            return (this.getFavouriteInstrumentListByListName(this._favouriteListNameArray[index]));
        }
        public function getFavouriteListIndexByListName(listName:String):int{
            return (this._favouriteListNameArray.indexOf(listName));
        }
        public function printString():String{
            return (this._favouriteListDictionary.toString());
        }
        public function isDuplicateSymbolInList(symbol:String, listName:String=""):Boolean{
            var i:*;
            if (listName == ""){
                listName = this._currentSelectedListName;
            };
            if (this._favouriteListDictionary[listName] != null){
                i = 0;
                while (i < this._favouriteListDictionary[listName].length) {
                    if (this._favouriteListDictionary[listName][i] == symbol){
                        return (true);
                    };
                    i++;
                };
            };
            return (false);
        }
        public function get currentSelectedListName():String{
            return (this._currentSelectedListName);
        }
        public function set currentSelectedListName(value:String):void{
            this._currentSelectedListName = value;
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.message.feed.*;
    import com.settrade.streaming5.message.response.orderstatus.*;
    import flash.utils.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.log.logger.*;

    public class OrderManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:OrderManager;

        protected var accountManager:AccountManager;
        protected var accountOrderNumberMap:Dictionary;
        protected var accountOrderListMap:Dictionary;

        public function OrderManager(){
            super();
            this.accountManager = AccountManager.getInstance();
            this.accountOrderNumberMap = new Dictionary();
            this.accountOrderListMap = new Dictionary();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():OrderManager{
            if (instance == null){
                instance = new (OrderManager)();
            };
            return (instance);
        }

        private function clearOrder(account:Account){
            this.accountOrderNumberMap[account] = new Dictionary();
            this.accountOrderListMap[account] = new Array();
        }
        private function getAccountByOrderStatus(order:IOrderStatus):Account{
            return (this.accountManager.getAccountByAccountNumberAndSystem(order.accountNumber, order.system));
        }
        private function addOrder(order:IOrderStatus):void{
            var account:Account = this.getAccountByOrderStatus(order);
            if (account == null){
                logger.error("Account Number not found");
                return;
            };
            var orderNumberMap:Dictionary = this.accountOrderNumberMap[account];
            var orderList:Array = this.accountOrderListMap[account];
            if (orderNumberMap == null){
                orderNumberMap = new Dictionary();
                this.accountOrderNumberMap[account] = orderNumberMap;
            };
            if (orderList == null){
                orderList = new Array();
                this.accountOrderListMap[account] = orderList;
            };
            orderNumberMap[order.orderNumber] = order;
            orderList.push(order);
        }
        public function hasOrderStatusByAccount(account:Account):Boolean{
            return (!((this.accountOrderListMap[account] == null)));
        }
        public function getOrderListByAccount(account:Account):Array{
            var orderList:Array = this.accountOrderListMap[account];
            if (orderList == null){
                return (new Array());
            };
            return (orderList.slice(0));
        }
        public function hasOrderByAccountAndOrderNumber(account:Account, orderNumber:String):Boolean{
            return (!((this.getOrderByAccountAndOrderNumber(account, orderNumber) == null)));
        }
        public function getOrderByAccountAndOrderNumber(account:Account, orderNumber:String):IOrderStatus{
            var orderNumberMap:Dictionary = this.accountOrderNumberMap[account];
            if (orderNumberMap == null){
                return (null);
            };
            return (orderNumberMap[orderNumber]);
        }
        override public function startService():void{
            this.addEventListener(MessageReceiveEvent.ORDER_STATUS_DERIVATIVES, this.receiveOrderStatusDerivatives, false, 1);
            this.addEventListener(MessageReceiveEvent.ORDER_STATUS_EQUITY, this.receiveOrderStatusEquity, false, 1);
            this.addEventListener(MessageReceiveEvent.PLACE_ORDER_EQUITY, this.receivePlaceOrderEquity);
            this.addEventListener(MessageReceiveEvent.PLACE_ORDER_DERIVATIVES, this.receivePlaceOrderDerivatives);
            this.addEventListener(MessageReceiveEvent.ORDER_STATUS_PUSH_DERIVATIVES, this.receiveOrderStatusDerivativesPush, false, 1);
            this.addEventListener(MessageReceiveEvent.ORDER_STATUS_PUSH_EQUITY, this.receiveOrderStatusEquityPush, false, 1);
        }
        override public function stopService():void{
            this.removeEventListener(MessageReceiveEvent.ORDER_STATUS_DERIVATIVES, this.receiveOrderStatusDerivatives);
            this.removeEventListener(MessageReceiveEvent.ORDER_STATUS_EQUITY, this.receiveOrderStatusEquity);
            this.removeEventListener(MessageReceiveEvent.ORDER_STATUS_PUSH_DERIVATIVES, this.receiveOrderStatusDerivativesPush);
            this.removeEventListener(MessageReceiveEvent.ORDER_STATUS_PUSH_EQUITY, this.receiveOrderStatusEquityPush);
        }
        private function receivePlaceOrderDerivatives(e:MessageReceiveEvent):void{
            var fakeOrder:OrderStatusDerivativesFakeFeedMessage;
            var currentTime:Date;
            var responseMessage:PlaceOrderDerivativesResponseMessage = PlaceOrderDerivativesResponseMessage(e.message);
            var requestMessage:PlaceOrderDerivativesRequestMessage;
            if ((responseMessage.requestMessage is PlaceOrderDerivativesRequestMessage)){
                requestMessage = PlaceOrderDerivativesRequestMessage(responseMessage.requestMessage);
            } else {
                if ((responseMessage.requestMessage is PlaceOrderDerivativesConfirmRequestMessage)){
                    requestMessage = PlaceOrderDerivativesConfirmRequestMessage(responseMessage.requestMessage).requestMessage;
                } else {
                    return;
                };
            };
            var account:Account = this.accountManager.getAccountByAccountNumberAndSystem(requestMessage.accountNumber, System.EQUITY);
            if (!this.hasOrderByAccountAndOrderNumber(account, responseMessage.orderNo)){
                fakeOrder = new OrderStatusDerivativesFakeFeedMessage(Source.NO_SOURCE);
                fakeOrder.accountNumber = requestMessage.accountNumber;
                fakeOrder.balanceVolume = Number(requestMessage.volume);
                fakeOrder.canApprove = false;
                fakeOrder.canCancel = false;
                fakeOrder.cancelVolume = 0;
                fakeOrder.canChange = false;
                currentTime = SyncTimeManager.getInstance().getCurrentTime();
                fakeOrder.date = StreamingTimeFormatter.MONTH_FORMAT_SHORT.format(currentTime);
                fakeOrder.deleteFlag = false;
                fakeOrder.enterId = "";
                fakeOrder.instrumentId = requestMessage.instrumentId;
                fakeOrder.isMatch = false;
                fakeOrder.matchVolume = 0;
                fakeOrder.orderNumber = responseMessage.orderNo;
                fakeOrder.orderSide = requestMessage.orderSide;
                fakeOrder.position = requestMessage.position;
                fakeOrder.price = Number(requestMessage.price);
                fakeOrder.priceDigit = 2;
                fakeOrder.priceType = requestMessage.priceType;
                fakeOrder.status = "Pending";
                fakeOrder.time = StreamingTimeFormatter.TIME_FORMAT.format(currentTime);
                fakeOrder.until = "";
                fakeOrder.validity = requestMessage.validityType;
                fakeOrder.volume = Number(requestMessage.volume);
                this.dispatcher.notifyReceiveMessage(fakeOrder);
            };
        }
        private function receivePlaceOrderEquity(e:MessageReceiveEvent):void{
            var fakeOrder:OrderStatusEquityFakeFeedMessage;
            var currentTime:Date;
            var responseMessage:PlaceOrderEquityResponseMessage = PlaceOrderEquityResponseMessage(e.message);
            var requestMessage:PlaceOrderEquityRequestMessage;
            if ((responseMessage.requestMessage is PlaceOrderEquityRequestMessage)){
                requestMessage = PlaceOrderEquityRequestMessage(responseMessage.requestMessage);
            } else {
                if ((responseMessage.requestMessage is PlaceOrderEquityConfirmRequestMessage)){
                    requestMessage = PlaceOrderEquityConfirmRequestMessage(responseMessage.requestMessage).requestMessage;
                } else {
                    return;
                };
            };
            var account:Account = this.accountManager.getAccountByAccountNumberAndSystem(requestMessage.accountNo, System.EQUITY);
            if (!this.hasOrderByAccountAndOrderNumber(account, responseMessage.orderNo)){
                fakeOrder = new OrderStatusEquityFakeFeedMessage(Source.NO_SOURCE);
                fakeOrder.accountNumber = requestMessage.accountNo;
                fakeOrder.balanceVolume = int(requestMessage.quantity);
                fakeOrder.canCancel = false;
                fakeOrder.canChange = false;
                fakeOrder.cancelVolume = 0;
                fakeOrder.instrumentId = requestMessage.instrumentId;
                fakeOrder.isMatchOrder = false;
                fakeOrder.matchVolume = 0;
                fakeOrder.nvdrFlag = ((requestMessage.nvdrFlag) ? "-R" : "");
                fakeOrder.orderNumber = responseMessage.orderNo;
                fakeOrder.orderSide = requestMessage.orderSide;
                currentTime = SyncTimeManager.getInstance().getCurrentTime();
                fakeOrder.orderTimeHour = currentTime.hours;
                fakeOrder.orderTimeMinute = currentTime.minutes;
                fakeOrder.orderTimeSecond = currentTime.seconds;
                fakeOrder.price = Number(requestMessage.price);
                fakeOrder.priceType = requestMessage.priceType;
                fakeOrder.status = "Pending";
                fakeOrder.tradeDate = StreamingTimeFormatter.FULL_DATE_FORMAT.format(currentTime);
                fakeOrder.volume = int(requestMessage.quantity);
                this.dispatcher.notifyReceiveMessage(fakeOrder);
            };
        }
        private function receiveOrderStatusEquityPush(e:MessageReceiveEvent):void{
            var message:OrderStatusEquityFeedMessage = OrderStatusEquityFeedMessage(e.message);
            this.addOrUpdatePushOrderStatusEquity(message);
        }
        private function addOrUpdatePushOrderStatusEquity(message:OrderStatusEquityFeedMessage):void{
            var orderStatusEquity:OrderStatusEquity;
            var account:Account = this.accountManager.getAccountByAccountNumberAndSystem(message.accountNumber, System.EQUITY);
            if (account == null){
                logger.error("Account Number not found");
                return;
            };
            if (this.hasOrderByAccountAndOrderNumber(account, message.orderNumber)){
                orderStatusEquity = OrderStatusEquity(this.getOrderByAccountAndOrderNumber(account, message.orderNumber));
                orderStatusEquity.updateFromFeed(message);
            } else {
                this.addOrder(OrderStatusEquity.createFromFeed(message));
            };
        }
        private function receiveOrderStatusDerivativesPush(e:MessageReceiveEvent):void{
            var message:OrderStatusDerivativesFeedMessage = OrderStatusDerivativesFeedMessage(e.message);
            this.addOrUpdatePushOrderStatusDerivatives(message);
        }
        private function addOrUpdatePushOrderStatusDerivatives(message:OrderStatusDerivativesFeedMessage):void{
            var orderStatusDerivatives:OrderStatusDerivatives;
            var account:Account = this.accountManager.getAccountByAccountNumberAndSystem(message.accountNumber, System.DERIV);
            if (account == null){
                logger.error("Account Number not found");
                return;
            };
            if (this.hasOrderByAccountAndOrderNumber(account, message.orderNumber)){
                orderStatusDerivatives = OrderStatusDerivatives(this.getOrderByAccountAndOrderNumber(account, message.orderNumber));
                orderStatusDerivatives.updateFromFeed(message);
            } else {
                this.addOrder(OrderStatusDerivatives.createFromFeed(message));
            };
        }
        private function receiveOrderStatusDerivatives(e:MessageReceiveEvent):void{
            var order:IOrderStatus;
            var orderStatusDerivatives:OrderStatusDerivativesResponseMessage = OrderStatusDerivativesResponseMessage(e.message);
            var orderList:Array = orderStatusDerivatives.orderStatusList;
            var account:Account = this.accountManager.getAccountByAccountNumberAndSystem(orderStatusDerivatives.accountNumber, System.DERIV);
            this.clearOrder(account);
            for each (order in orderList) {
                this.addOrder(order);
            };
        }
        private function receiveOrderStatusEquity(e:MessageReceiveEvent):void{
            var order:IOrderStatus;
            var orderStatusEquity:OrderStatusEquityResponseMessage = OrderStatusEquityResponseMessage(e.message);
            var orderList:Array = orderStatusEquity.orderStatusList;
            var account:Account = this.accountManager.getAccountByAccountNumberAndSystem(orderStatusEquity.accountNumber, System.EQUITY);
            this.clearOrder(account);
            for each (order in orderList) {
                this.addOrder(order);
            };
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.message.*;
    import flash.events.*;
    import com.settrade.streaming5.event.*;
    import flash.utils.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.connection.helper.feed.*;
    import com.settrade.streaming5.connection.helper.http.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;

    public class FeedManager extends Manager implements IStatusNotifier {

        private static const START_FEED:String = "Start";
        private static const CLICK_PUSH:String = "Click Push";
        private static const CLICK_PULL:String = "Click Pull";
        private static const UNAUTHORIZE:String = "Unauthorize";
        private static const TRIGGER:String = "Timer Trigger";
        private static const S0I:String = "Socket IO Error";
        private static const S0S:String = "Socket Connect";
        private static const U1S:String = "User Check Primary Tier Success";
        private static const U1F:String = "User Check Primary Tier Fail";
        private static const U1H:String = "User Check Primary Tier Http Error";
        private static const U2S:String = "User Check Secondary Tier Success";
        private static const U2F:String = "User Check Secondary Tier Fail";
        private static const U2H:String = "User Check Secondary Tier Http Error";
        private static const USER_CHECK_TIME:Number = 180000;
        private static const MAX_BUFFER_TIME:Number = 11000;

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:FeedManager;

        protected var _system:System;
        protected var _state:FeedManagerState;
        protected var pushManager:PushManager;
        protected var pullManager:PullManager;
        protected var pullIntervalManager:PullIntervalManager;
        protected var userCheckService:UserCheckService;
        protected var usageLogService:UsageLogService;
        protected var userCheckTimer:Timer;
        protected var bufferRandomDelayTimer:Timer;
        protected var requestHelper:RequestHelper;
        protected var pullHelper:PullHelper;
        protected var feedHelper:FeedHelper;
        protected var systemHostMap:Dictionary;
        protected var registerService:RegisterService;
        protected var isRegist:Boolean;
        protected var userCheckPrimaryMessageId:Number;
        protected var userCheckSecondaryMessageId:Number;

        public function FeedManager(){
            super();
            this.pushManager = PushManager.getInstance();
            this.pullManager = PullManager.getInstance();
            this.pullIntervalManager = PullIntervalManager.getInstance();
            this.userCheckService = UserCheckService.getInstance();
            this.usageLogService = UsageLogService.getInstance();
            this.userCheckTimer = new Timer(USER_CHECK_TIME);
            this.userCheckTimer.addEventListener(TimerEvent.TIMER, this.onUsercheckTime);
            this.bufferRandomDelayTimer = new Timer(MAX_BUFFER_TIME, 1);
            this.bufferRandomDelayTimer.addEventListener(TimerEvent.TIMER_COMPLETE, this.onDelayBufferComplete);
            this.registerService = RegisterService.getInstance();
            this.feedHelper = FeedHelper.getInstance();
            this.pullHelper = PullHelper.getInstance();
            this.requestHelper = RequestHelper.getInstance();
            this.systemHostMap = new Dictionary();
            this.userCheckPrimaryMessageId = -1;
            this.userCheckSecondaryMessageId = -1;
            this._state = FeedManagerState.NO_STATE;
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():FeedManager{
            if (instance == null){
                instance = new (FeedManager)();
            };
            return (instance);
        }

        private function startRandomDelayTimer():void{
            var delayTime:int = Math.round((Math.random() * MAX_BUFFER_TIME));
            this.bufferRandomDelayTimer.delay = delayTime;
            this.bufferRandomDelayTimer.repeatCount = 1;
            this.bufferRandomDelayTimer.start();
        }
        private function onDelayBufferComplete(e:TimerEvent):void{
            this.onAction(TRIGGER);
        }
        private function onUsercheckTime(e:TimerEvent):void{
            this.usageLogService.sendUsageLog();
            if (this.isUserCheckPrimary()){
                this.userCheckPrimaryMessageId = this.userCheckService.userCheckPrimary();
            };
            if (this.isUserCheckSecondary()){
                this.userCheckSecondaryMessageId = this.userCheckService.userCheckSecondary();
            };
        }
        private function isUserCheckPrimary():Boolean{
            return (((((((((((this.state.isPushPrimary()) || (this.state.isPushSecondary()))) || (this.state.isPullPrimary()))) || (this.state.isPullSecondary()))) || (this.state.isForcedPullPrimary()))) || (this.state.isForcedPullSecondary())));
        }
        private function isUserCheckSecondary():Boolean{
            return (((((((this.state.isPushSecondary()) || (this.state.isPullPrimary()))) || (this.state.isPullSecondary()))) || (this.state.isForcedPullSecondary())));
        }
        override public function startService():void{
            this.isRegist = true;
            this.userCheckTimer.start();
            this.pullIntervalManager.connect();
            addEventListener(MessageControlEvent.FEED_STATUS, this.onReceiveFeedStatus, false, 1);
            addEventListener(MessageReceiveEvent.USER_CHECK, this.onReceiveUserCheck, false, 1);
            addEventListener(MessageReceiveEvent.UNAUTHORIZE, this.onReceiveUnauthorize, false, 1);
            addEventListener(MessageReceiveEvent.DISPATHCER_DOWN, this.onReceiveDispatcherDown, false, 1);
            addEventListener(MessageReceiveEvent.DISCONNECT, this.onReceiveDisconnect, false, 1);
            addEventListener(MessageFailEvent.FAIL, this.onReceiveHttpFailed, false, 1);
            this.onAction(START_FEED);
        }
        override public function stopService():void{
            this.isRegist = false;
            this.userCheckTimer.stop();
            this.pullManager.disconnect();
            this.pushManager.disconnect();
            this.pullIntervalManager.disconnect();
            removeEventListener(MessageControlEvent.FEED_STATUS, this.onReceiveFeedStatus);
            removeEventListener(MessageReceiveEvent.USER_CHECK, this.onReceiveUserCheck);
            removeEventListener(MessageReceiveEvent.UNAUTHORIZE, this.onReceiveUnauthorize);
            removeEventListener(MessageReceiveEvent.DISPATHCER_DOWN, this.onReceiveDispatcherDown);
            removeEventListener(MessageFailEvent.FAIL, this.onReceiveHttpFailed);
        }
        private function getNextState(action:String):FeedManagerState{
            if (action == START_FEED){
                return (FeedManagerState.INITIAL_PUSH_PRIMARY);
            };
            if (this._state.isOffline()){
                return (FeedManagerState.OFFLINE);
            };
            switch (action){
                case UNAUTHORIZE:
                    return (FeedManagerState.OFFLINE);
                case CLICK_PULL:
                    return (FeedManagerState.INITIAL_PUSH_PRIMARY);
                case CLICK_PUSH:
                    return (FeedManagerState.FORCED_PULL_PRIMARY);
            };
            switch (this._state){
                case FeedManagerState.INITIAL_PUSH_PRIMARY:
                    return (this.getNextStateInitialPushPrimary(action));
                case FeedManagerState.INITIAL_PUSH_SECONDARY:
                    return (this.getNextStateInitialPushSecondary(action));
                case FeedManagerState.PUSH_PRIMARY:
                    return (this.getNextStatePushPrimary(action));
                case FeedManagerState.PUSH_SECONDARY:
                    return (this.getNextStatePushSecondary(action));
                case FeedManagerState.BUFFER_PRIMARY:
                    return (this.getNextStateBufferPrimary(action));
                case FeedManagerState.BUFFER_SECONDARY:
                    return (this.getNextStateBufferSecondary(action));
                case FeedManagerState.PULL_PRIMARY:
                    return (this.getNextStatePullPrimary(action));
                case FeedManagerState.PULL_SECONDARY:
                    return (this.getNextStatePullSecondary(action));
                case FeedManagerState.FORCED_PULL_PRIMARY:
                    return (this.getNextStateForcedPullPrimary(action));
                case FeedManagerState.FORCED_PULL_SECONDARY:
                    return (this.getNextStateForcedPullSecondary(action));
                case FeedManagerState.OFFLINE:
                    return (FeedManagerState.OFFLINE);
                default:
                    logger.fatal(("Invalid Feed State: " + this._state));
                    return (FeedManagerState.OFFLINE);
            };
        }
        private function getNextStateInitialPushPrimary(action:String):FeedManagerState{
            switch (action){
                case S0I:
                    return (FeedManagerState.INITIAL_PUSH_SECONDARY);
                case S0S:
                    return (FeedManagerState.PUSH_PRIMARY);
                default:
                    return (FeedManagerState.INITIAL_PUSH_PRIMARY);
            };
        }
        private function getNextStateInitialPushSecondary(action:String):FeedManagerState{
            switch (action){
                case S0I:
                    return (FeedManagerState.FORCED_PULL_PRIMARY);
                case S0S:
                    return (FeedManagerState.PUSH_SECONDARY);
                default:
                    return (FeedManagerState.INITIAL_PUSH_SECONDARY);
            };
        }
        private function getNextStatePushPrimary(action:String):FeedManagerState{
            switch (action){
                case S0I:
                    return (FeedManagerState.BUFFER_SECONDARY);
                case U1F:
                    return (FeedManagerState.BUFFER_SECONDARY);
                case U1H:
                    return (FeedManagerState.BUFFER_SECONDARY);
                default:
                    return (FeedManagerState.PUSH_PRIMARY);
            };
        }
        private function getNextStatePushSecondary(action:String):FeedManagerState{
            switch (action){
                case U1S:
                    return (FeedManagerState.PUSH_PRIMARY);
                case S0I:
                    return (FeedManagerState.BUFFER_PRIMARY);
                case U2F:
                    return (FeedManagerState.BUFFER_PRIMARY);
                case U2H:
                    return (FeedManagerState.BUFFER_PRIMARY);
                default:
                    return (FeedManagerState.PUSH_SECONDARY);
            };
        }
        private function getNextStatePullPrimary(action:String):FeedManagerState{
            switch (action){
                case U1S:
                    return (FeedManagerState.PUSH_PRIMARY);
                case U2S:
                    return (FeedManagerState.PUSH_SECONDARY);
                case U1H:
                    return (FeedManagerState.PULL_SECONDARY);
                default:
                    return (FeedManagerState.PULL_PRIMARY);
            };
        }
        private function getNextStatePullSecondary(action:String):FeedManagerState{
            switch (action){
                case U1S:
                    return (FeedManagerState.PUSH_PRIMARY);
                case U2S:
                    return (FeedManagerState.PUSH_SECONDARY);
                case U1F:
                    return (FeedManagerState.PULL_PRIMARY);
                case U2H:
                    return (FeedManagerState.OFFLINE);
                default:
                    return (FeedManagerState.PULL_SECONDARY);
            };
        }
        private function getNextStateForcedPullPrimary(action:String):FeedManagerState{
            switch (action){
                case U1H:
                    return (FeedManagerState.FORCED_PULL_SECONDARY);
                default:
                    return (FeedManagerState.FORCED_PULL_PRIMARY);
            };
        }
        private function getNextStateForcedPullSecondary(action:String):FeedManagerState{
            switch (action){
                case U1S:
                    return (FeedManagerState.FORCED_PULL_PRIMARY);
                case U1F:
                    return (FeedManagerState.FORCED_PULL_PRIMARY);
                case U1H:
                    return (FeedManagerState.OFFLINE);
                default:
                    return (FeedManagerState.FORCED_PULL_SECONDARY);
            };
        }
        private function getNextStateBufferPrimary(action:String):FeedManagerState{
            switch (action){
                case TRIGGER:
                    return (FeedManagerState.PULL_PRIMARY);
                default:
                    return (FeedManagerState.BUFFER_PRIMARY);
            };
        }
        private function getNextStateBufferSecondary(action:String):FeedManagerState{
            switch (action){
                case TRIGGER:
                    return (FeedManagerState.PUSH_SECONDARY);
                default:
                    return (FeedManagerState.BUFFER_SECONDARY);
            };
        }
        public function disconnectDisableConnector(newState:FeedManagerState):void{
            if (this.isRegist){
                if (((!(newState.state.isEnablePull())) && (this.state.state.isEnablePull()))){
                    this.pullManager.disconnect();
                };
                if (((!(newState.state.isEnablePush())) && (this.state.state.isEnablePush()))){
                    this.pushManager.disconnect();
                } else {
                    if (((((this.state.state.isEnablePush()) && (newState.state.isEnablePush()))) && (!((this.state.tier == newState.tier))))){
                        this.pushManager.disconnect();
                    };
                };
            };
        }
        public function disconnect(){
            if (this.isRegist){
                if (this.state.state.isEnablePull()){
                    this.pullManager.disconnect();
                };
                if (this.state.state.isEnablePush()){
                    this.pushManager.disconnect();
                };
            };
        }
        public function connect(){
            logger.info(("Connect :" + this.isRegist));
            if (this.isRegist){
                if (this.state.state.isEnablePull()){
                    logger.info("Connect Pull");
                    this.pullManager.connect();
                } else {
                    if (this.state.state.isEnablePush()){
                        logger.info("Connect Push");
                        this.pushManager.connect();
                    };
                };
            };
        }
        public function changeToPushMode(){
            logger.info("Click Pull");
            this.onAction(CLICK_PULL);
        }
        public function changeToPullMode(){
            logger.info("Click Push");
            this.onAction(CLICK_PUSH);
        }
        private function onAction(action:String){
            var oldState:* = this._state;
            var nextState:FeedManagerState = this.getNextState(action);
            if (nextState != this._state){
                this.disconnectDisableConnector(nextState);
                logger.info(((("Change Feed State:" + this._state) + " to ") + nextState));
                this._state = nextState;
                this.setFeedState(this.state.state);
                this.setSystem(this.state.tier);
                this.onStartStateHandler();
                this.connect();
                dispatcher.notifyControlMessage(new FeedManagerStatusMessage(oldState, nextState));
            };
        }
        private function onStartStateHandler():void{
            switch (this.state){
                case FeedManagerState.BUFFER_PRIMARY:
                    this.onBufferPrimaryState();
                    break;
                case FeedManagerState.BUFFER_SECONDARY:
                    this.onBufferSecondaryState();
                    break;
            };
        }
        private function onBufferState():void{
            this.startRandomDelayTimer();
        }
        private function onBufferSecondaryState():void{
            this.onBufferState();
        }
        private function onBufferPrimaryState():void{
            this.onBufferState();
        }
        private function onReceiveFeedStatus(e:MessageControlEvent):void{
            var message:FeedStatusMessage = FeedStatusMessage(e.message);
            if (message.status.isConnect()){
                if (message.state.isPush()){
                    this.registerService.sendRegisterMessageOnConnectPush();
                    this.onAction(S0S);
                } else {
                    this.registerService.sendRegisterMessage();
                };
            } else {
                if (((((message.status.isTimeout()) && (message.state.isEnablePush()))) && (this.state.state.isEnablePush()))){
                    this.onAction(S0I);
                } else {
                    if (((((((message.status.isDisconnect()) || (message.status.isFail()))) && (message.state.isEnablePush()))) && (this.state.state.isEnablePush()))){
                        this.onAction(S0I);
                    };
                };
            };
        }
        private function onReceiveUserCheck(e:MessageReceiveEvent):void{
            var message:UserCheckResponseMessage = UserCheckResponseMessage(e.message);
            if (message.system.isRealtimePrimary()){
                this.onAction(U1S);
            } else {
                if (message.system.isRealtimeSecondary()){
                    this.onAction(U2S);
                };
            };
        }
        private function onReceiveUnauthorize(e:MessageReceiveEvent):void{
            AlertService.getInstance().alert("Your session has been expired or terminated. Please re-login.");
            this.onAction(UNAUTHORIZE);
        }
        private function onReceiveHttpFailed(e:MessageEvent):void{
            var failMessage:IFailMessage = IFailMessage(e.message);
            if (failMessage.requestId == this.userCheckPrimaryMessageId){
                this.onAction(U1H);
            } else {
                if (failMessage.requestId == this.userCheckSecondaryMessageId){
                    this.onAction(U2H);
                };
            };
        }
        private function onReceiveDispatcherDown(e:MessageReceiveEvent):void{
            var message:DispatcherDownResponseMessage = DispatcherDownResponseMessage(e.message);
            if (message.system.isRealtimePrimary()){
                this.onAction(U1F);
            } else {
                if (message.system.isRealtimeSecondary()){
                    this.onAction(U2F);
                };
            };
        }
        private function onReceiveDisconnect(e:MessageReceiveEvent):void{
            this.onAction(UNAUTHORIZE);
        }
        private function isMatchCurrentHost(host:String):Boolean{
            if (this._system.isRealtimePrimary()){
                return (this.isPrimaryHost(host));
            };
            if (this._system.isRealtimeSecondary()){
                return (this.isSecondaryHost(host));
            };
            return (false);
        }
        private function isPrimaryHost(host:String){
            return (!((this.getHostFromSystem(System.REALTIME_PRIMARY).indexOf(host) == -1)));
        }
        private function isSecondaryHost(host:String){
            return (!((this.getHostFromSystem(System.REALTIME_SECONDARY).indexOf(host) == -1)));
        }
        public function addHost(host:String, system:System):void{
            this.systemHostMap[system] = host;
            this.requestHelper.addConnector(System.REALTIME, host);
            this.pullHelper.addNewConnection(host);
        }
        private function getHostFromSystem(system:System):String{
            var host:String = this.systemHostMap[system];
            return (host);
        }
        private function setFeedState(state:FeedState):void{
            this.feedHelper.feedState = state;
        }
        private function setSystem(obj:System):void{
            var host:String;
            if (obj != this._system){
                host = this.getHostFromSystem(obj);
                this.pullHelper.setCurrentConnector(host);
                this.requestHelper.setCurrentConnector(System.REALTIME, host);
                this._system = obj;
            };
        }
        public function get state():FeedManagerState{
            return (this._state);
        }
        public function get system():System{
            return (this._system);
        }
        public function getStatus():Dictionary{
            var statusDictionary:Dictionary = new Dictionary();
            statusDictionary["state"] = this.state;
            statusDictionary["system"] = this.system;
            return (statusDictionary);
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.message.response.instrumentlist.*;
    import com.settrade.log.logger.*;

    public class InstrumentListManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:InstrumentListManager;

        protected var _instrumentList:Array;
        protected var _instrumentListOfInstrumentList:Array;
        protected var isAlreadyLoad:Boolean;

        public function InstrumentListManager(){
            super();
            this._instrumentList = new Array();
            this._instrumentListOfInstrumentList = new Array();
            this.isAlreadyLoad = false;
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():InstrumentListManager{
            if (instance == null){
                instance = new (InstrumentListManager)();
            };
            return (instance);
        }

        override public function startService():void{
            this.addEventListener(MessageReceiveEvent.INSTRUMENT_LIST, this.onReceiveInstrumentList);
        }
        override public function stopService():void{
            this.removeEventListener(MessageReceiveEvent.INSTRUMENT_LIST, this.onReceiveInstrumentList);
        }
        public function get instrumentList():Array{
            return (this._instrumentList);
        }
        public function getInstrumentSymbolList():Array{
            var symbolList:Array = new Array();
            var i:* = 0;
            while (i < this._instrumentList.length) {
                if (symbolList.indexOf(this._instrumentList[i].instrumentId) == -1){
                    symbolList.push(this._instrumentList[i].instrumentId);
                };
                i++;
            };
            return (symbolList);
        }
        public function getInstrumentListWithOutException():Array{
            return (this.getInstrumentListByInstrumentListTypeArray(InstrumentListType.ALL));
        }
        public function getInstrumentListByInstrumentListType(instrumentListType:InstrumentListType):Array{
            var instrumentList:InstrumentList;
            for each (instrumentList in this._instrumentListOfInstrumentList) {
                if (instrumentList.type == instrumentListType){
                    return (instrumentList.instrumentIdList);
                };
            };
            return (new Array());
        }
        public function getInstrumentListByInstrumentListTypeArray(instrumentListTypeArray:Array):Array{
            var instrumentListType:InstrumentListType;
            var instrumentListArray:Array = new Array();
            for each (instrumentListType in instrumentListTypeArray) {
                instrumentListArray = instrumentListArray.concat(this.getInstrumentListByInstrumentListType(instrumentListType));
            };
            return (instrumentListArray);
        }
        public function getInstrumentListFilterOutByInstrumentListTypeArray(filterOutInstrumentListTypeArray:Array):Array{
            var instrumentListType:InstrumentListType;
            var instrumentListTypeArray:Array = InstrumentListType.ALL.slice(0);
            for each (instrumentListType in filterOutInstrumentListTypeArray) {
                if (instrumentListTypeArray.indexOf(instrumentListType) > -1){
                    instrumentListTypeArray.splice(instrumentListTypeArray.indexOf(instrumentListType), 1);
                };
            };
            return (this.getInstrumentListByInstrumentListTypeArray(instrumentListTypeArray));
        }
        public function getExceptionForDerivativesOnlyInstrumentList():Array{
            var instrumentListArray:Array = this.getInstrumentListByInstrumentListTypeArray([InstrumentListType.INDUSTRY, InstrumentListType.MAI_INDUSTRY, InstrumentListType.SECTOR]);
            instrumentListArray.push(".SET");
            instrumentListArray.push(".SET100");
            instrumentListArray.push(".SETHD");
            instrumentListArray.push(".MAI");
            return (instrumentListArray);
        }
        public function addInstrumentList(instrumentList:InstrumentList):void{
            this._instrumentListOfInstrumentList = this._instrumentListOfInstrumentList.concat(instrumentList);
            this._instrumentList = this._instrumentList.concat(instrumentList.instrumentList);
        }
        private function onReceiveInstrumentList(e:MessageReceiveEvent):void{
            var instrumentListArray:Array;
            var i:*;
            var instrumentList:InstrumentList;
            var msg:InstrumentListResponseMessage = InstrumentListResponseMessage(e.message);
            if (!this.isAlreadyLoad){
                this.isAlreadyLoad = true;
                this._instrumentListOfInstrumentList = this._instrumentListOfInstrumentList.concat(msg.instrumentList);
                instrumentListArray = msg.instrumentList;
                i = 0;
                while (i < instrumentListArray.length) {
                    instrumentList = instrumentListArray[i];
                    this._instrumentList = this._instrumentList.concat(instrumentList.instrumentList);
                    i++;
                };
                this.removeEventListener(MessageReceiveEvent.INSTRUMENT_LIST, this.onReceiveInstrumentList);
            };
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.message.feed.*;
    import com.settrade.streaming5.message.response.orderstatus.*;
    import flash.utils.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.register.*;
    import com.settrade.log.logger.*;

    public class OrderClickManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:OrderClickManager;

        private var isStartService:Boolean;
        private var isRegist:Boolean;
        private var orderClickRegister:OrderClickRegister;
        private var orderManager:OrderManager;
        private var accountManager:AccountManager;

        public function OrderClickManager(){
            super();
            this.isStartService = false;
            this.accountManager = AccountManager.getInstance();
            this.orderClickRegister = OrderClickRegister.getInstance();
            this.orderManager = OrderManager.getInstance();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():OrderClickManager{
            if (instance == null){
                instance = new (OrderClickManager)();
            };
            return (instance);
        }

        override public function startService():void{
            logger.info("Start Service");
            this.isStartService = true;
            this.activate();
        }
        override public function stopService():void{
            logger.info("Stop Service");
            this.isStartService = false;
            this.activate();
        }
        public function activate():void{
            if (((this.isStartService) && (this.orderClickRegister.hasRegisterToken()))){
                this.regist();
            } else {
                this.unregist();
            };
        }
        private function regist():void{
            if (!this.isRegist){
                logger.info("Regist Order Click Listener");
                this.addEventListener(MessageReceiveEvent.ORDER_STATUS_DERIVATIVES, this.receiveOrderStatusDerivatives, false, 0);
                this.addEventListener(MessageReceiveEvent.ORDER_STATUS_EQUITY, this.receiveOrderStatusEquity, false, 0);
                this.addEventListener(MessageReceiveEvent.ORDER_STATUS_PUSH_DERIVATIVES, this.receiveOrderStatusDerivativesPush, false, 0);
                this.addEventListener(MessageReceiveEvent.ORDER_STATUS_PUSH_EQUITY, this.receiveOrderStatusEquityPush, false, 0);
                this.isRegist = true;
            };
        }
        private function unregist():void{
            if (this.isRegist){
                logger.info("Unregist Order Click Listener");
                this.removeEventListener(MessageReceiveEvent.ORDER_STATUS_DERIVATIVES, this.receiveOrderStatusDerivatives);
                this.removeEventListener(MessageReceiveEvent.ORDER_STATUS_EQUITY, this.receiveOrderStatusEquity);
                this.removeEventListener(MessageReceiveEvent.ORDER_STATUS_PUSH_DERIVATIVES, this.receiveOrderStatusDerivativesPush);
                this.removeEventListener(MessageReceiveEvent.ORDER_STATUS_PUSH_EQUITY, this.receiveOrderStatusEquityPush);
                this.isRegist = false;
            };
        }
        private function isValidOrder(order:IOrderStatus):Boolean{
            var orderEquity:OrderStatusEquity;
            var orderDerivatives:OrderStatusDerivatives;
            if (order.system.isEquity()){
                orderEquity = OrderStatusEquity(order);
                return (((orderEquity.canCancel) || (orderEquity.isFakeOrder)));
            };
            if (order.system.isDeriv()){
                orderDerivatives = OrderStatusDerivatives(order);
                return (((orderDerivatives.canCancel) || (orderDerivatives.isFakeOrder)));
            };
            return (false);
        }
        private function convertOrderToClick(account:Account):Dictionary{
            var order:IOrderStatus;
            var instrumentId:String;
            var clickArray:Array;
            var sideMap:Dictionary;
            var orderEquity:OrderStatusEquity;
            var sideEquity:OrderSide;
            var priceMapEquity:Dictionary;
            var key:*;
            var priceEquity:Number;
            var priceTypeEquity:PriceType;
            var orderClickEquity:OrderStatusClickEquity;
            var orderDerivatives:OrderStatusDerivatives;
            var sideDerivatives:DerivativesOrderSide;
            var priceMapDerivatives:Dictionary;
            var priceDerivatives:Number;
            var priceTypeDerivatives:DerivativesPriceType;
            var orderClickDerivatives:OrderStatusClickDerivatives;
            var clickMap:Dictionary = new Dictionary();
            var idMap:Dictionary = new Dictionary();
            var orderList:Array = this.orderManager.getOrderListByAccount(account);
            for each (order in orderList) {
                if (this.isValidOrder(order)){
                    instrumentId = order.instrumentId;
                    clickArray = clickMap[instrumentId];
                    if (clickArray == null){
                        clickArray = new Array();
                        clickMap[instrumentId] = clickArray;
                    };
                    sideMap = idMap[instrumentId];
                    if (sideMap == null){
                        sideMap = new Dictionary();
                        idMap[instrumentId] = sideMap;
                    };
                    if (order.system.isEquity()){
                        orderEquity = OrderStatusEquity(order);
                        sideEquity = orderEquity.orderSide;
                        priceMapEquity = sideMap[sideEquity];
                        if (priceMapEquity == null){
                            priceMapEquity = new Dictionary();
                            sideMap[sideEquity] = priceMapEquity;
                        };
                        priceEquity = orderEquity.price;
                        priceTypeEquity = orderEquity.priceType;
                        if (priceTypeEquity.isATOATC()){
                            key = priceTypeEquity;
                        } else {
                            key = priceEquity;
                        };
                        orderClickEquity = priceMapEquity[key];
                        if (orderClickEquity == null){
                            orderClickEquity = new OrderStatusClickEquity(priceEquity, sideEquity, priceTypeEquity);
                            priceMapEquity[key] = orderClickEquity;
                            clickArray.push(orderClickEquity);
                        };
                        orderClickEquity.addOrder(orderEquity);
                    } else {
                        if (order.system.isDeriv()){
                            orderDerivatives = OrderStatusDerivatives(order);
                            sideDerivatives = orderDerivatives.orderSide;
                            priceMapDerivatives = sideMap[sideDerivatives];
                            if (priceMapDerivatives == null){
                                priceMapDerivatives = new Dictionary();
                                sideMap[sideDerivatives] = priceMapDerivatives;
                            };
                            priceDerivatives = orderDerivatives.price;
                            priceTypeDerivatives = orderDerivatives.priceType;
                            if (priceTypeDerivatives.isAto()){
                                key = priceTypeDerivatives;
                            } else {
                                key = priceDerivatives;
                            };
                            orderClickDerivatives = priceMapDerivatives[key];
                            if (orderClickDerivatives == null){
                                orderClickDerivatives = new OrderStatusClickDerivatives(priceDerivatives, sideDerivatives, priceTypeDerivatives);
                                priceMapDerivatives[key] = orderClickDerivatives;
                                clickArray.push(orderClickDerivatives);
                            };
                            orderClickDerivatives.addOrder(orderDerivatives);
                        };
                    };
                };
            };
            return (clickMap);
        }
        public function notifyOrderClickByAccountAndInstrumentId(account:Account, instrumentId:String):void{
            var clickMap:Dictionary;
            var clickArray:Array;
            var message:OrderStatusClickResponseMessage;
            var orderStatusClick:IOrderStatusClick;
            if (this.orderClickRegister.isRegist(new OrderStatusClickRegisterToken(instrumentId, account))){
                clickMap = this.convertOrderToClick(account);
                clickArray = clickMap[instrumentId];
                message = new OrderStatusClickResponseMessage(account.system, null, Source.NO_SOURCE, instrumentId, account.accountNumber);
                for each (orderStatusClick in clickArray) {
                    message.addOrderStatusClick(orderStatusClick);
                };
                dispatcher.notifyReceiveMessage(message);
            };
        }
        private function receiveOrderStatusEquityPush(e:MessageEvent):void{
            var tic:Date = new Date();
            logger.info("Receive Order Push Equity");
            var orderStatus:OrderStatusEquityFeedMessage = OrderStatusEquityFeedMessage(e.message);
            var account:Account = this.accountManager.getAccountByAccountNumberAndSystem(orderStatus.accountNumber, System.EQUITY);
            this.notifyOrderClickByAccountAndInstrumentId(account, orderStatus.instrumentId);
            logger.info(("PROCESS TIME:::: " + (new Date().getTime() - tic.getTime())));
        }
        private function receiveOrderStatusDerivativesPush(e:MessageEvent):void{
            logger.info("Receive Order Push Derivatives");
            var orderStatus:OrderStatusDerivativesFeedMessage = OrderStatusDerivativesFeedMessage(e.message);
            var account:Account = this.accountManager.getAccountByAccountNumberAndSystem(orderStatus.accountNumber, System.DERIV);
            this.notifyOrderClickByAccountAndInstrumentId(account, orderStatus.instrumentId);
        }
        private function receiveOrderStatusEquity(e:MessageEvent):void{
            var clickMap:Dictionary;
            var registList:Array;
            var instrumentId:String;
            var clickArray:Array;
            var message:OrderStatusClickResponseMessage;
            var orderStatusClick:IOrderStatusClick;
            var tic:Date = new Date();
            logger.info("Receive Order Equity");
            var orderStatus:OrderStatusEquityResponseMessage = OrderStatusEquityResponseMessage(e.message);
            var account:Account = this.accountManager.getAccountByAccountNumberAndSystem(orderStatus.accountNumber, System.EQUITY);
            if (this.orderClickRegister.isRegistAccount(account)){
                clickMap = this.convertOrderToClick(account);
                registList = this.orderClickRegister.getRegistListByAccount(account);
                for each (instrumentId in registList) {
                    clickArray = clickMap[instrumentId];
                    message = new OrderStatusClickResponseMessage(System.EQUITY, orderStatus.requestMessage, orderStatus.source, instrumentId, orderStatus.accountNumber);
                    if (clickArray != null){
                        for each (orderStatusClick in clickArray) {
                            message.addOrderStatusClick(orderStatusClick);
                        };
                    };
                    dispatcher.notifyReceiveMessage(message);
                };
            };
            logger.info(("PROCESS TIME:::: " + (new Date().getTime() - tic.getTime())));
        }
        private function receiveOrderStatusDerivatives(e:MessageEvent):void{
            var clickMap:Dictionary;
            var registList:Array;
            var instrumentId:String;
            var clickArray:Array;
            var message:OrderStatusClickResponseMessage;
            var orderStatusClick:IOrderStatusClick;
            logger.info("Receive Order Derivatives");
            var orderStatus:OrderStatusDerivativesResponseMessage = OrderStatusDerivativesResponseMessage(e.message);
            var account:Account = this.accountManager.getAccountByAccountNumberAndSystem(orderStatus.accountNumber, System.DERIV);
            if (this.orderClickRegister.isRegistAccount(account)){
                clickMap = this.convertOrderToClick(account);
                registList = this.orderClickRegister.getRegistListByAccount(account);
                for each (instrumentId in registList) {
                    clickArray = clickMap[instrumentId];
                    message = new OrderStatusClickResponseMessage(System.DERIV, orderStatus.requestMessage, orderStatus.source, instrumentId, orderStatus.accountNumber);
                    if (clickArray != null){
                        for each (orderStatusClick in clickArray) {
                            message.addOrderStatusClick(orderStatusClick);
                        };
                    };
                    dispatcher.notifyReceiveMessage(message);
                };
            };
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.message.feed.*;
    import com.settrade.streaming5.config.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;

    public class OrderAlertManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:OrderAlertManager;

        private var isStartService:Boolean;
        private var isRegist:Boolean;
        private var orderAlertConfig:OrderAlertConfig;

        public function OrderAlertManager(){
            super();
            this.isStartService = false;
            this.isRegist = false;
            this.orderAlertConfig = new OrderAlertConfig(false, false, false, false);
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():OrderAlertManager{
            if (instance == null){
                instance = new (OrderAlertManager)();
            };
            return (instance);
        }

        override public function startService():void{
            logger.info("Start Service");
            this.isStartService = true;
            addEventListener(MessageControlEvent.CONFIG_CHANGE, this.onConfigChange);
            this.loadManagerConfig();
            this.triggerRegister();
        }
        override public function stopService():void{
            logger.info("Stop Service");
            this.isStartService = false;
            removeEventListener(MessageControlEvent.CONFIG_CHANGE, this.onConfigChange);
            this.triggerRegister();
        }
        private function onConfigChange(e:MessageControlEvent):void{
            var message:ConfigChangeMessage = ConfigChangeMessage(e.message);
            if (message.config.type.isOrderAlertConfig()){
                this.loadManagerConfig();
            };
        }
        private function triggerRegister():void{
            if (((this.isStartService) && (this.orderAlertConfig.isEnable))){
                if (!this.isRegist){
                    this.regist();
                };
            } else {
                if (this.isRegist){
                    this.unregist();
                };
            };
        }
        private function regist():void{
            logger.info("Regist");
            this.isRegist = true;
            addEventListener(MessageReceiveEvent.ORDER_STATUS_PUSH_EQUITY, this.onReceiveOrderStatusPushEquity);
            addEventListener(MessageReceiveEvent.ORDER_STATUS_PUSH_DERIVATIVES, this.onReceiveOrderStatusPushDerivatives);
            OrderPushService.getInstance().registOrderPush(AccountManager.getInstance().accountList, this);
        }
        private function unregist():void{
            logger.info("Unregist");
            this.isRegist = false;
            removeEventListener(MessageReceiveEvent.ORDER_STATUS_PUSH_EQUITY, this.onReceiveOrderStatusPushEquity);
            removeEventListener(MessageReceiveEvent.ORDER_STATUS_PUSH_DERIVATIVES, this.onReceiveOrderStatusPushDerivatives);
            OrderPushService.getInstance().unregistSource(this);
        }
        public function loadManagerConfig():void{
            var settingManager:SettingManager = SettingManager.getInstance();
            this.loadConfig(OrderAlertConfig(settingManager.getConfig(ConfigType.ORDER_ALERT)));
        }
        public function loadConfig(config:OrderAlertConfig):void{
            logger.info("Load Config");
            this.orderAlertConfig = config;
            this.triggerRegister();
        }
        private function onReceiveOrderStatusPushDerivatives(e:MessageReceiveEvent):void{
            var message:OrderStatusDerivativesFeedMessage = OrderStatusDerivativesFeedMessage(e.message);
            if (message.isMatch){
                if (AccountManager.getInstance().hasAccountByAccountNumberAndSystem(message.accountNumber, System.DERIV)){
                    NotificationService.getInstance().notifyOrderMatchDerivatives(message);
                };
            };
        }
        private function onReceiveOrderStatusPushEquity(e:MessageReceiveEvent):void{
            var message:OrderStatusEquityFeedMessage = OrderStatusEquityFeedMessage(e.message);
            if (message.isMatchOrder){
                if (AccountManager.getInstance().hasAccountByAccountNumberAndSystem(message.accountNumber, System.EQUITY)){
                    NotificationService.getInstance().notifyOrderMatchEquity(message);
                };
            };
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.enumuration.*;
    import flash.events.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.config.*;
    import flash.utils.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;

    public class PinManager extends Manager {

        private static const PIN_TIME:Number = 300000;

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:PinManager;

        private var timer:Timer;

        public function PinManager(){
            super();
            this.timer = new Timer(PIN_TIME, 1);
            this.timer.addEventListener(TimerEvent.TIMER, this.onDisableTimer);
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():PinManager{
            if (instance == null){
                instance = new (PinManager)();
            };
            return (instance);
        }

        override public function startService():void{
            this.addEventListener(MessageControlEvent.CONFIG_CHANGE, this.onConfigChange);
        }
        override public function stopService():void{
            this.removeEventListener(MessageControlEvent.CONFIG_CHANGE, this.onConfigChange);
        }
        private function onConfigChange(e:MessageControlEvent):void{
            var config:PasswordPinConfig;
            var message:ConfigChangeMessage = ConfigChangeMessage(e.message);
            if (message.config.type.isPasswordPin()){
                config = PasswordPinConfig(message.config);
                if (((config.isSavePin) && (config.isSaveFiveMinute))){
                    this.startTimer();
                };
            };
        }
        private function startTimer():void{
            this.timer.reset();
            this.timer.start();
        }
        private function onDisableTimer(e:TimerEvent):void{
            var config:PasswordPinConfig = PasswordPinConfig(SettingManager.getInstance().getConfig(ConfigType.PASSWORD_PIN));
            config.pin = "";
            config.isSavePin = false;
            dispatcher.notifyControlMessage(new ConfigChangeMessage(config));
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.widget.config.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.initializer.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.page.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;
    import com.settrade.streaming5.widget.*;

    public class WidgetProPageManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:WidgetProPageManager;

        protected var widgetPageList:Array;
        protected var _pageHolder:MovieClip;
        protected var _editorHolder:MovieClip;
        protected var _headerPage:HeaderPage;
        protected var configList:Array;
        protected var isLoaded:Boolean;
        protected var _toShowPageId:String;

        public function WidgetProPageManager(){
            super();
            this._pageHolder = null;
            this._headerPage = null;
            this._editorHolder = null;
            this.widgetPageList = new Array();
            this.isLoaded = false;
            this._toShowPageId = "";
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():WidgetProPageManager{
            if (instance == null){
                instance = new (WidgetProPageManager)();
            };
            return (instance);
        }

        private function getDefaultPageList():Array{
            return (DefaultWidgetPageProUtils.getDefaultConfig());
        }
        public function initialWidgetProPage(pageList:Array):void{
            var widgetPageList:*;
            var object:Object;
            var widgetPageConfig:WidgetPageConfig;
            logger.info("Initial Widget Pro Page");
            if (!this.isLoaded){
                widgetPageList = new Array();
                if (pageList.length == 0){
                    widgetPageList = this.getDefaultPageList();
                } else {
                    for each (object in pageList) {
                        widgetPageConfig = WidgetPageConfig.fromJsonObject(object);
                        widgetPageList.push(widgetPageConfig);
                    };
                    if (!((StreamingAttribute.isMarketRep) && (!(StreamingAttribute.isPrimaryScreen)))){
                        widgetPageList.push(DefaultWidgetPageProUtils.SETTINGS);
                    };
                };
                this.setAllPageConfigWithoutUpdate(widgetPageList);
                this._pageHolder = PageInitializer.getInstance().source;
                addEventListener(MessageControlEvent.CONFIG_CHANGE, this.onWidgetConfigPageChange);
                this.isLoaded = true;
            };
        }
        public function initialAllPage():void{
            this.setAllPageConfig(this.configList);
        }
        public function getAllPageConfig():Array{
            return (this.configList);
        }
        public function getPageConfigAtIndex(index:int):WidgetPageConfig{
            if ((((index > -1)) && ((index < this.configList.length)))){
                return (this.configList[index]);
            };
            return (null);
        }
        public function cloneAllPageConfig():Array{
            var pageConfig:WidgetPageConfig;
            var array:Array = new Array();
            for each (pageConfig in this.configList) {
                if (pageConfig.id != PageName.SETTING){
                    array.push(pageConfig.clone());
                };
            };
            return (array);
        }
        public function setAllPageConfigWithoutUpdate(configList:Array):void{
            this.configList = configList;
        }
        public function setAllPageConfig(configList:Array):void{
            this.configList = configList;
            this.updateHeader();
            this.updatePageConfig();
            this.savePageConfig();
        }
        private function updateHeader():void{
            if (this._headerPage != null){
                this._headerPage.initialHeaderPage(this.configList);
            };
        }
        private function updatePageConfig():void{
            var widgetPageConfig:WidgetPageConfig;
            var widgetPage:WidgetPage;
            var page:uint;
            var i:* = 0;
            while (i < this.configList.length) {
                widgetPageConfig = WidgetPageConfig(this.configList[i]);
                if (i < this.widgetPageList.length){
                    widgetPage = WidgetPage(this.widgetPageList[i]);
                    logger.trace(((("update " + widgetPage.widgetPageConfig.toJsonString()) + " to ") + widgetPageConfig.toJsonString()));
                    if (!widgetPage.widgetPageConfig.equals(widgetPageConfig)){
                        widgetPage.initialPageFromConfig(widgetPageConfig);
                        if (widgetPageConfig.id != PageName.SETTING){
                            PageManager.getInstance().removePage(widgetPageConfig.id);
                            PageManager.getInstance().loadInternalPage(widgetPageConfig.id, widgetPage, this._pageHolder);
                        };
                    };
                } else {
                    logger.trace(("add " + widgetPageConfig.toJsonString()));
                    this.addNewPage(widgetPageConfig);
                };
                i++;
            };
            if (this.widgetPageList.length > this.configList.length){
                page = this.configList.length;
                while (page < this.widgetPageList.length) {
                    logger.info(((("About to delete " + widgetPage.widgetPageConfig.id) + ", ") + widgetPage.widgetPageConfig.name));
                    widgetPage = WidgetPage(this.widgetPageList[i]);
                    if (widgetPageConfig.id != PageName.SETTING){
                        PageManager.getInstance().removePage(widgetPage.widgetPageConfig.id);
                    };
                    page++;
                };
                this.widgetPageList.splice(this.configList.length, ((this.widgetPageList.length - this.configList.length) - 1));
            };
        }
        private function savePageConfig():void{
            SettingService.getInstance().updateConfig([this.createMultipleWidgetPageConfig()]);
        }
        private function createMultipleWidgetPageConfig():MultipleWidgetPageConfig{
            var config:MultipleWidgetPageConfig = new MultipleWidgetPageConfig();
            config.widgetPageConfigList = this.cloneAllPageConfig();
            return (config);
        }
        private function addNewPage(config:WidgetPageConfig):void{
            logger.info((((("Add new page : " + config.id) + "(") + config.name) + ")"));
            var widgetPage:WidgetPage = new WidgetPage(config);
            this.widgetPageList.push(widgetPage);
            if (((!((config.id == PageName.SETTING))) && (!(PageManager.getInstance().hasPageByName(config.id))))){
                logger.info((((("Add and load page " + config.id) + "(") + config.name) + ")"));
                PageManager.getInstance().loadInternalPage(config.id, widgetPage, this._pageHolder);
            };
        }
        private function onWidgetConfigPageChange(e:MessageControlEvent):void{
            var updatedWidgetPageConfig:WidgetPageConfig;
            var widgetPageConfig:WidgetPageConfig;
            var message:ConfigChangeMessage = ConfigChangeMessage(e.message);
            if (message.config.type.isUserWidgetPageConfig()){
                updatedWidgetPageConfig = WidgetPageConfig(message.config);
                for each (widgetPageConfig in this.configList) {
                    if (widgetPageConfig.id == updatedWidgetPageConfig.id){
                        widgetPageConfig.importWidgetPageConfig(updatedWidgetPageConfig);
                    };
                };
            };
        }
        public function initialEditMode():void{
            var id:int = int(PageManager.getInstance().getCurrentPageFromSource(this.pageHolder));
            logger.info(("initialize edit mode with id : " + id));
            PageManager.getInstance().hidePage(PageManager.getInstance().getCurrentPageFromSource(PageInitializer.getInstance().source));
            PageManager.getInstance().showPage(PageName.WIDGET_EDITOR, {
                widgetPageConfigList:this.cloneAllPageConfig(),
                onFinishEditingCallbackFunction:this.onFinishEditMode,
                currentId:id
            });
        }
        public function onFinishEditMode(configList:Array, currentPageIdStr:String):void{
            this._toShowPageId = currentPageIdStr;
            addEventListener(MessageControlEvent.WIDGET_PAGE_STATUS, this.onReceiveWidgetPageStatus);
            if (!((StreamingAttribute.isMarketRep) && (!(StreamingAttribute.isPrimaryScreen)))){
                configList.push(DefaultWidgetPageProUtils.SETTINGS);
            };
            this.setAllPageConfig(configList);
            var currentPageId:int = int(this._toShowPageId);
            PageManager.getInstance().hidePage(PageName.WIDGET_EDITOR);
            PageManager.getInstance().showPage(this._toShowPageId);
            this._headerPage.activateButton(currentPageId);
        }
        private function onReceiveWidgetPageStatus(e:MessageControlEvent):void{
            var currentPageId:int;
            var message:WidgetPageStatusMessage = WidgetPageStatusMessage(e.message);
            if ((((message.pageName == this._toShowPageId)) && (message.newStatus.isIdle()))){
                logger.info(("Refresh the page : " + this._toShowPageId));
                removeEventListener(MessageControlEvent.WIDGET_PAGE_STATUS, this.onReceiveWidgetPageStatus);
                currentPageId = int(this._toShowPageId);
                PageManager.getInstance().refreshPage(PageManager.getInstance().getSourceByName(this._toShowPageId));
            };
        }
        public function get pageHolder():MovieClip{
            return (this._pageHolder);
        }
        public function set pageHolder(value:MovieClip):void{
            this._pageHolder = value;
        }
        public function get headerPage():HeaderPage{
            return (this._headerPage);
        }
        public function set headerPage(value:HeaderPage):void{
            this._headerPage = value;
        }
        public function get editorHolder():MovieClip{
            return (this._editorHolder);
        }
        public function set editorHolder(value:MovieClip):void{
            this._editorHolder = value;
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import flash.utils.*;
    import com.settrade.streaming5.message.feed.info.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.utils.datetime.*;

    public class InstrumentInfoManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:InstrumentInfoManager;

        protected var instrumentIdMap:Dictionary;

        public function InstrumentInfoManager(){
            super();
            this.instrumentIdMap = new Dictionary();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():InstrumentInfoManager{
            if (instance == null){
                instance = new (InstrumentInfoManager)();
            };
            return (instance);
        }

        public function onReceiveInstrumentInfo(info:InfoFeedMessage):void{
            logger.debug("Receive Instrument Info");
            if (this.hasInstrumentInfoByInstrumentId(info.instrumentId)){
                this.updateInstrumentInfo(info);
            } else {
                this.addInstrumentInfo(info);
            };
        }
        protected function addInstrumentInfo(info:InfoFeedMessage):void{
            this.calculateAdditionalField(info);
            this.instrumentIdMap[info.instrumentId] = info;
        }
        protected function updateInstrumentInfo(info:InfoFeedMessage):void{
            this.replaceMissingField(info);
            this.updateParameter(info);
            this.addInstrumentInfo(info);
        }
        protected function replaceMissingField(info:InfoFeedMessage):void{
            var oldInfo:InfoFeedMessage = this.getInstrumentInfoByInstrumentId(info.instrumentId);
            if (((!(info.hasBidOffer)) && (oldInfo.hasBidOffer))){
                info.hasBidOffer = true;
                info.bidOffer = oldInfo.bidOffer;
            };
            if (((!(info.hasInitIntraday)) && (oldInfo.hasInitIntraday))){
                info.hasInitIntraday = true;
                info.initialIntraday = oldInfo.initialIntraday;
            };
            if (((!(info.hasInitMarket)) && (oldInfo.hasInitMarket))){
                info.hasInitMarket = true;
                info.initialMarket = oldInfo.initialMarket;
            };
            if (((!(info.hasInitStat)) && (oldInfo.hasInitStat))){
                info.hasInitStat = true;
                info.initialStat = oldInfo.initialStat;
            };
            if (((!(info.hasProjected)) && (oldInfo.hasProjected))){
                info.hasProjected = true;
                info.projected = oldInfo.projected;
            };
            if (((!(info.hasSummary)) && (oldInfo.hasSummary))){
                info.hasSummary = true;
                info.summary = oldInfo.summary;
            };
        }
        protected function updateParameter(info:InfoFeedMessage):void{
            var initialMarket:InfoInitialMarket;
            var summary:InfoSummary;
            var dateFormatter:DateSlashFormatter;
            var initIntraEq:InfoInitialIntradayEquity;
            var initIntraDeriv:InfoInitialIntradayDerivatives;
            if (((info.hasSummary) && (info.hasInitMarket))){
                initialMarket = info.initialMarket;
                summary = info.summary;
                if (!isNaN(summary.lastDone)){
                    if (((isNaN(initialMarket.high)) || ((((initialMarket.high < summary.lastDone)) || ((((initialMarket.high == 0)) && ((summary.lastDone > 0)))))))){
                        initialMarket.high = summary.lastDone;
                    };
                    if (((isNaN(initialMarket.low)) || ((((initialMarket.low > summary.lastDone)) || ((((initialMarket.low == 0)) && ((summary.lastDone > 0)))))))){
                        initialMarket.low = summary.lastDone;
                    };
                };
                if (info.hasInitIntraday){
                    dateFormatter = new DateSlashFormatter();
                    if (info.instrumentType.isEquity()){
                        initIntraEq = InfoInitialIntradayEquity(info.initialIntraday);
                        if (((isNaN(initIntraEq.w52High)) || ((((initialMarket.high >= initIntraEq.w52High)) && ((initialMarket.high > 0)))))){
                            initIntraEq.w52High = initialMarket.high;
                            initIntraEq.w52HighDate = dateFormatter.format(new Date());
                        };
                        if (((((isNaN(initIntraEq.w52Low)) || ((((initialMarket.low <= initIntraEq.w52Low)) && ((initialMarket.low > 0)))))) || ((((initIntraEq.w52Low == 0)) && ((initialMarket.low > 0)))))){
                            initIntraEq.w52Low = initialMarket.low;
                            initIntraEq.w52LowDate = dateFormatter.format(new Date());
                        };
                    } else {
                        if (info.instrumentType.isDerivatives()){
                            initIntraDeriv = InfoInitialIntradayDerivatives(info.initialIntraday);
                            if (((isNaN(initIntraDeriv.lifeHigh)) || ((((initialMarket.high >= initIntraDeriv.lifeHigh)) && ((initialMarket.high > 0)))))){
                                initIntraDeriv.lifeHigh = initialMarket.high;
                                initIntraDeriv.lifeHighDate = dateFormatter.format(new Date());
                            };
                            if (((((isNaN(initIntraDeriv.lifeLow)) || ((((initialMarket.low <= initIntraDeriv.lifeLow)) && ((initialMarket.low > 0)))))) || ((((initIntraDeriv.lifeLow == 0)) && ((initialMarket.low > 0)))))){
                                initIntraDeriv.lifeLow = initialMarket.low;
                                initIntraDeriv.lifeLowDate = dateFormatter.format(new Date());
                            };
                        };
                    };
                };
            };
        }
        protected function calculateAdditionalField(info:InfoFeedMessage):void{
            if (((info.instrumentType.isEquity()) && (InfoEquityFeedMessage(info).instrumentSubType.isAllWarrant()))){
                this.calculateAdditionalFieldAllWarrant(info);
            } else {
                if (info.instrumentType.isDerivatives()){
                    this.calculateAdditionalFieldDerivatives(info);
                };
            };
        }
        private function calculateAdditionalFieldAllWarrant(info:InfoFeedMessage):void{
            var last:Number;
            var summary:InfoSummaryAllWarrant;
            var initIntraday:InfoInitialIntradayAllWarrant;
            var exRatio:Number;
            var inverter:Number;
            var effectiveGearing:Number;
            var intrinsicValue:Number;
            var breakEvenPrice:Number;
            var warrantStatus:String;
            var allInPremium:Number;
            var gearingRatio:Number;
            var coverRatio:Number;
            if (((info.hasSummary) && (info.hasInitIntraday))){
                last = this.calculateLastValue(info);
                summary = InfoSummaryAllWarrant(info.summary);
                initIntraday = InfoInitialIntradayAllWarrant(info.initialIntraday);
                exRatio = initIntraday.numberExerciseRatio;
                inverter = ((initIntraday.optionsType.isCall()) ? 1 : -1);
                effectiveGearing = 0;
                if (((!((last == 0))) && (!((exRatio == 0))))){
                    effectiveGearing = (((summary.underlyingPrice * summary.delta) * exRatio) / last);
                };
                intrinsicValue = (((summary.underlyingPrice - initIntraday.exercisePrice) * inverter) * exRatio);
                intrinsicValue = (((intrinsicValue < 0)) ? 0 : intrinsicValue);
                breakEvenPrice = 0;
                if (exRatio != 0){
                    breakEvenPrice = (initIntraday.exercisePrice + ((last / exRatio) * inverter));
                };
                warrantStatus = "ATM";
                if (((summary.underlyingPrice - initIntraday.exercisePrice) * inverter) < 0){
                    warrantStatus = "OTM";
                } else {
                    if (((summary.underlyingPrice - initIntraday.exercisePrice) * inverter) > 0){
                        warrantStatus = "ITM";
                    };
                };
                allInPremium = 0;
                if (((!((exRatio == 0))) && (!((summary.underlyingPrice == 0))))){
                    allInPremium = (((last + (((initIntraday.exercisePrice - summary.underlyingPrice) * exRatio) * inverter)) * 100) / (summary.underlyingPrice * exRatio));
                };
                gearingRatio = 0;
                if (((!((last == 0))) && (!((exRatio == 0))))){
                    coverRatio = (1 / exRatio);
                    gearingRatio = (summary.underlyingPrice / (last * coverRatio));
                };
                summary.effectiveGearing = effectiveGearing;
                summary.intrinsicValue = intrinsicValue;
                summary.breakEvenPrice = breakEvenPrice;
                summary.warrantStatus = warrantStatus;
                summary.allInPremium = allInPremium;
                summary.gearingRatio = gearingRatio;
            };
        }
        private function calculateAdditionalFieldDerivatives(info:InfoFeedMessage):void{
            var summary:InfoSummaryDerivatives;
            var last:Number;
            var basis:Number;
            if (info.hasSummary){
                summary = InfoSummaryDerivatives(info.summary);
                last = this.calculateLastValue(info);
                basis = NaN;
                if (((!(isNaN(last))) && (!(isNaN(summary.underlyingPrice))))){
                    basis = (last - summary.underlyingPrice);
                };
                summary.basis = basis;
            };
            if (info.instrumentType.isOptions()){
                this.calculateAdditionalFieldOptions(info);
            };
        }
        private function calculateAdditionalFieldOptions(info:InfoFeedMessage):void{
            var last:Number;
            var summary:InfoSummaryOptions;
            var underlying:Number;
            var delta:Number;
            var effectiveGearing:Number;
            var initIntraday:InfoInitialIntradayOptions;
            var inverter:Number;
            var strikePrice:Number;
            var intrinsicValue:Number;
            var breakEvenPrice:Number;
            var allInPremium:Number;
            var gearingRatio:Number;
            if (info.hasSummary){
                last = this.calculateLastValue(info);
                summary = InfoSummaryOptions(info.summary);
                underlying = summary.underlyingPrice;
                delta = summary.delta;
                effectiveGearing = 0;
                if (((isNaN(underlying)) || (isNaN(last)))){
                    effectiveGearing = NaN;
                } else {
                    if (last != 0){
                        effectiveGearing = ((underlying * delta) / last);
                    };
                };
                summary.effectiveGearing = effectiveGearing;
                if (info.hasInitIntraday){
                    initIntraday = InfoInitialIntradayOptions(info.initialIntraday);
                    inverter = ((initIntraday.optionsType.isCall()) ? 1 : -1);
                    strikePrice = initIntraday.strikePrice;
                    intrinsicValue = 0;
                    if (isNaN(underlying)){
                        intrinsicValue = NaN;
                    } else {
                        intrinsicValue = ((underlying - strikePrice) * inverter);
                        if (intrinsicValue < 0){
                            intrinsicValue = 0;
                        };
                    };
                    breakEvenPrice = (strikePrice + (last * inverter));
                    allInPremium = 0;
                    if (isNaN(underlying)){
                        allInPremium = NaN;
                    } else {
                        if (underlying != 0){
                            allInPremium = (((last + ((strikePrice - underlying) * inverter)) * 100) / underlying);
                        };
                    };
                    gearingRatio = 0;
                    if (((isNaN(underlying)) || (isNaN(last)))){
                        gearingRatio = NaN;
                    } else {
                        if (last != 0){
                            gearingRatio = (underlying / last);
                        };
                    };
                    summary.intrinsicValue = intrinsicValue;
                    summary.breakEvenPrice = breakEvenPrice;
                    summary.allInPremium = allInPremium;
                    summary.gearingRatio = gearingRatio;
                };
            };
        }
        protected function calculateLastValue(info:InfoFeedMessage):Number{
            var lastValue:Number;
            if (info.hasSummary){
                lastValue = info.summary.lastDone;
                if ((((((((lastValue == 0)) || (isNaN(lastValue)))) && (info.hasInitMarket))) && (info.instrumentType.isInstrument()))){
                    if (info.instrumentType.isEquity()){
                        lastValue = info.initialMarket.previousClose;
                    } else {
                        if (info.instrumentType.isDerivatives()){
                            lastValue = InfoInitialMarketDerivatives(info.initialMarket).previousSettle;
                        };
                    };
                };
                return (lastValue);
            };
            return (NaN);
        }
        protected function hasInstrumentInfoByInstrumentId(instrumentId:String):Boolean{
            return (!((this.getInstrumentInfoByInstrumentId(instrumentId) == null)));
        }
        protected function getInstrumentInfoByInstrumentId(instrumentId:String):InfoFeedMessage{
            return (this.instrumentIdMap[instrumentId]);
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.event.*;
    import flash.utils.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.message.response.portfolio.*;
    import com.settrade.log.logger.*;

    public class AllPortfolioManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:AllPortfolioManager;

        protected var accountService:AccountService;
        protected var portfolioMap:Dictionary;
        protected var requestMessageList:Array;
        protected var isProcess:Boolean;

        public function AllPortfolioManager(){
            var account:Account;
            super();
            this.isProcess = false;
            this.accountService = AccountService.getInstance();
            this.portfolioMap = new Dictionary();
            var accountList:Array = this.accountService.getAllAccount();
            for each (account in accountList) {
                this.portfolioMap[account] = new PortfolioByAccount(account, NaN, NaN, NaN, NaN, NaN, NaN);
            };
            this.requestMessageList = new Array();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():AllPortfolioManager{
            if (instance == null){
                instance = new (AllPortfolioManager)();
            };
            return (instance);
        }

        public function getAllPortfolio():void{
            var accountList:Array;
            var account:Account;
            var requestId:Number;
            var portByAccount:PortfolioByAccount;
            if (!this.isProcess){
                this.requestMessageList = new Array();
                accountList = this.accountService.getAllAccount();
                for each (account in accountList) {
                    requestId = AccountInformationService.getInstance().getPortfolio(account);
                    if (!isNaN(requestId)){
                        this.requestMessageList.push(requestId);
                        portByAccount = new PortfolioByAccount(account, 0, 0, 0, 0, 0, 0);
                        this.portfolioMap[account] = portByAccount;
                    };
                };
                this.isProcess = true;
                this.pollResponseMessage();
            };
        }
        private function sendAllPortfolioMessage():void{
            var portfolio:PortfolioByAccount;
            var sortedPort:PortfolioByAccount;
            var message:PortfolioByAccountResponseMessage = new PortfolioByAccountResponseMessage(null, Source.NO_SOURCE);
            var portfolioList:Array = new Array();
            for each (portfolio in this.portfolioMap) {
                portfolioList.push(portfolio);
            };
            portfolioList.sort(this.sortPortfolioByAccount);
            for each (sortedPort in portfolioList) {
                message.addPortfolio(sortedPort);
            };
            dispatcher.notifyReceiveMessage(message);
        }
        private function sortPortfolioByAccount(portfolio1:PortfolioByAccount, portfolio2:PortfolioByAccount):int{
            var accountList:Array = this.accountService.getAllAccount();
            return ((accountList.indexOf(portfolio1.account) - accountList.indexOf(portfolio2.account)));
        }
        private function pollResponseMessage():void{
            if (this.isProcess){
                if (this.requestMessageList.length == 0){
                    this.sendAllPortfolioMessage();
                    this.isProcess = false;
                };
            };
        }
        private function removeRequestMessageFromList(requestMessageId:Number){
            var i:int;
            if (((this.isProcess) && (!(isNaN(requestMessageId))))){
                i = 0;
                while (i < this.requestMessageList.length) {
                    if (this.requestMessageList[i] == requestMessageId){
                        this.requestMessageList.splice(i, 1);
                        break;
                    };
                    i++;
                };
            };
        }
        private function onReceiveEquityPortfolio(event:MessageEvent){
            var totalPortfolio:PortfolioEquity;
            var portByAccount:PortfolioByAccount;
            var message:PortfolioEquityResponseMessage = PortfolioEquityResponseMessage(event.message);
            var account:Account = this.accountService.getAccountByAccountNumberAndSystem(message.accountNumber, System.EQUITY);
            if (message.portfolioList.length > 0){
                totalPortfolio = message.portfolioList[(message.portfolioList.length - 1)];
                portByAccount = new PortfolioByAccount(account, totalPortfolio.actualVolume, totalPortfolio.amount, totalPortfolio.marketValue, totalPortfolio.unrealizedProfit, totalPortfolio.percentUnrealizedProfit, totalPortfolio.realizeProfit);
                this.portfolioMap[account] = portByAccount;
            };
            this.removeRequestMessageFromList(message.requestId);
            this.pollResponseMessage();
        }
        private function onReceiveDerivativesPortfolio(event:MessageEvent){
            var totalPortfolio:PortfolioDerivatives;
            var portByAccount:PortfolioByAccount;
            var message:PortfolioDerivativesResponseMessage = PortfolioDerivativesResponseMessage(event.message);
            var account:Account = this.accountService.getAccountByAccountNumberAndSystem(message.accountNumber, System.DERIV);
            if (message.portfolioList.length > 0){
                totalPortfolio = message.portfolioList[(message.portfolioList.length - 1)];
                portByAccount = new PortfolioByAccount(account, totalPortfolio.actualVolume, totalPortfolio.amount, totalPortfolio.marketValue, totalPortfolio.unrealizedProfit, totalPortfolio.percentUnrealizedProfit, totalPortfolio.realizeProfit);
                this.portfolioMap[account] = portByAccount;
            };
            this.removeRequestMessageFromList(message.requestId);
            this.pollResponseMessage();
        }
        private function onReceiveFail(event:MessageEvent){
            var message:IFailMessage = IFailMessage(event.message);
            this.removeRequestMessageFromList(message.requestId);
            this.pollResponseMessage();
        }
        override public function startService():void{
            addEventListener(MessageReceiveEvent.PORTFOLIO_EQUITY, this.onReceiveEquityPortfolio);
            addEventListener(MessageReceiveEvent.PORTFOLIO_DERIVATIVES, this.onReceiveDerivativesPortfolio);
            addEventListener(MessageFailEvent.FAIL, this.onReceiveFail);
        }
        override public function stopService():void{
            removeEventListener(MessageReceiveEvent.PORTFOLIO_EQUITY, this.onReceiveEquityPortfolio);
            removeEventListener(MessageReceiveEvent.PORTFOLIO_DERIVATIVES, this.onReceiveDerivativesPortfolio);
            removeEventListener(MessageFailEvent.FAIL, this.onReceiveFail);
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.config.*;
    import flash.utils.*;
    import com.settrade.log.logger.*;

    public class SettingManager {

        private static var logger:Logger = new Logger(prototype.constructor);
        private static var _instance:SettingManager;

        private var settingMap:Dictionary;

        public function SettingManager(){
            super();
            this.settingMap = new Dictionary();
            this.initialConfig();
        }
        public static function getInstance():SettingManager{
            if (_instance == null){
                _instance = new (SettingManager)();
            };
            return (_instance);
        }

        public function initialConfig():void{
            this.addOrUpdateConfig(new TemplateConfig());
            this.addOrUpdateConfig(new OrderAlertConfig());
            this.addOrUpdateConfig(new PriceVolumeAlertConfig());
            this.addOrUpdateConfig(new PriceVolumeConditionConfig());
            this.addOrUpdateConfig(new ShortcutInstrumentIdConfig());
            this.addOrUpdateConfig(new ShortcutAccountConfig());
            this.addOrUpdateConfig(new NotifyListConfig());
            this.addOrUpdateConfig(new OrderEntryConfig());
            this.addOrUpdateConfig(new PasswordPinConfig());
            this.addOrUpdateConfig(new LanguageChangeConfig());
            this.addOrUpdateConfig(new AutoPositionConfig());
            this.addOrUpdateConfig(new ScreenConfig());
            this.addOrUpdateConfig(new ApplicationModeConfig());
        }
        public function addOrUpdateConfig(config:IConfig):void{
            this.settingMap[config.type] = config;
        }
        public function getConfig(configType:ConfigType):IConfig{
            return (this.settingMap[configType]);
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import flash.utils.*;

    public interface IStatusNotifier {

        function getStatus():Dictionary;

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.message.feed.*;
    import com.settrade.streaming5.config.*;
    import flash.utils.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;

    public class PriceVolumeAlertManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:PriceVolumeAlertManager;

        private var isStartService:Boolean;
        private var isRegist:Boolean;
        private var hasCondition:Boolean;
        private var conditionConfig:PriceVolumeConditionConfig;
        private var conditionMap:Dictionary;
        private var registList:Array;
        private var requestTime:Date;
        private var lastSequenceIdMap:Dictionary;
        private var priceVolumeAlertConfig:PriceVolumeAlertConfig;

        public function PriceVolumeAlertManager(){
            super();
            this.isStartService = false;
            this.isRegist = false;
            this.hasCondition = false;
            this.conditionMap = new Dictionary();
            this.registList = new Array();
            this.requestTime = new Date();
            this.lastSequenceIdMap = new Dictionary();
            this.priceVolumeAlertConfig = new PriceVolumeAlertConfig(false, false, false, false);
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():PriceVolumeAlertManager{
            if (instance == null){
                instance = new (PriceVolumeAlertManager)();
            };
            return (instance);
        }

        override public function startService():void{
            logger.info("Start Service");
            this.isStartService = true;
            addEventListener(MessageControlEvent.CONFIG_CHANGE, this.onConfigChange);
            this.registList = new Array();
            this.requestTime = new Date();
            this.loadManagerConfig();
            this.triggerRegister();
        }
        override public function stopService():void{
            logger.info("Stop Service");
            this.isStartService = false;
            removeEventListener(MessageControlEvent.CONFIG_CHANGE, this.onConfigChange);
            this.registList = new Array();
            this.requestTime = new Date();
            this.triggerRegister();
        }
        private function triggerRegister():void{
            if (((((this.isStartService) && (this.hasCondition))) && (this.priceVolumeAlertConfig.isEnable))){
                if (!this.isRegist){
                    this.regist();
                };
                this.registerInstrumentTicker();
            } else {
                if (this.isRegist){
                    this.unregist();
                };
                InstrumentTickerService.getInstance().unregistSource(this);
            };
        }
        private function regist():void{
            logger.info("Regist");
            this.isRegist = true;
            addEventListener(MessageReceiveEvent.INSTRUMENT_TICKER, this.onReceiveInstrumentTicker);
        }
        private function unregist():void{
            logger.info("Unregist");
            this.isRegist = false;
            removeEventListener(MessageReceiveEvent.INSTRUMENT_TICKER, this.onReceiveInstrumentTicker);
        }
        private function onConfigChange(e:MessageControlEvent):void{
            logger.info("Config Change");
            var message:ConfigChangeMessage = ConfigChangeMessage(e.message);
            if (((message.config.type.isPriceVolumeAlertConfig()) || (message.config.type.isPriceVolumeConditionConfig()))){
                this.loadManagerConfig();
            };
        }
        public function loadManagerConfig():void{
            var settingManager:SettingManager = SettingManager.getInstance();
            this.loadConfig(PriceVolumeAlertConfig(settingManager.getConfig(ConfigType.PRICE_VOLUME_ALERT)));
            this.loadConditionConfig(PriceVolumeConditionConfig(settingManager.getConfig(ConfigType.PRICE_VOLUME_CONDITION)));
        }
        public function loadConfig(config:PriceVolumeAlertConfig):void{
            logger.info("Load Config");
            this.priceVolumeAlertConfig = config;
            this.triggerRegister();
        }
        public function loadConditionConfig(config:PriceVolumeConditionConfig):void{
            var priceVolumeCondition:PriceVolumeCondition;
            this.conditionConfig = config;
            this.conditionMap = new Dictionary();
            if (config.priceVolumeConditionList.length == 0){
                this.hasCondition = false;
            } else {
                this.hasCondition = true;
                for each (priceVolumeCondition in config.priceVolumeConditionList) {
                    this.hasCondition = ((this.hasCondition) || (priceVolumeCondition.isEnable));
                    this.addCondition(priceVolumeCondition);
                };
            };
            this.triggerRegister();
        }
        public function onReceiveInstrumentTicker(e:MessageEvent):void{
            var isMatch:Boolean;
            var condition:PriceVolumeCondition;
            var isChangeCondition:Boolean;
            var message:InstrumentTickerFeedMessage = InstrumentTickerFeedMessage(e.message);
            var conditionArray:Array = this.conditionMap[message.instrumentId];
            if (conditionArray != null){
                isMatch = false;
                for each (condition in conditionArray) {
                    if (this.isTriggerCondition(message, condition)){
                        isMatch = true;
                        this.notifyMatchCondition(condition, message);
                        if (condition.type.isOnce()){
                            condition.isEnable = false;
                            isChangeCondition = true;
                        };
                    };
                };
                if (isMatch){
                    this.lastSequenceIdMap[message.instrumentId] = message.sequenceId;
                };
            };
            if (isChangeCondition){
                this.notifyConfigChange();
            };
        }
        private function notifyConfigChange():void{
            SettingService.getInstance().updateConfig([this.conditionConfig]);
        }
        private function notifyMatchCondition(condition:PriceVolumeCondition, message:InstrumentTickerFeedMessage):void{
            NotificationService.getInstance().notifyPriceOrderAlert(condition, message);
        }
        public function registerInstrumentTicker():void{
            var instrumentId:String;
            this.requestTime = SyncTimeManager.getInstance().getCurrentTime();
            this.lastSequenceIdMap = new Dictionary();
            var newRegistList:Array = this.getRegistList();
            var isChange:Boolean;
            if (newRegistList.length != this.registList.length){
                isChange = true;
            } else {
                for each (instrumentId in newRegistList) {
                    if (this.registList.indexOf(instrumentId) == -1){
                        isChange = true;
                        break;
                    };
                };
            };
            if (isChange){
                this.registList = newRegistList;
                this.triggerRegister();
                InstrumentTickerService.getInstance().reRegistTicker(this.registList, this);
            };
        }
        public function addCondition(priceVolumeCondition:PriceVolumeCondition):void{
            var configArray:Array = this.conditionMap[priceVolumeCondition.instrumentId];
            if (configArray == null){
                configArray = new Array();
                this.conditionMap[priceVolumeCondition.instrumentId] = configArray;
            };
            configArray.push(priceVolumeCondition);
        }
        private function isValidTime(date:Date):Boolean{
            var currentTime:Date = SyncTimeManager.getInstance().getCurrentTime();
            var tmpDate:Date = new Date(currentTime.fullYear, currentTime.month, currentTime.date, date.hours, date.minutes, date.seconds, date.milliseconds);
            return ((tmpDate.getTime() > this.requestTime.getTime()));
        }
        private function isTriggerCondition(message:InstrumentTickerFeedMessage, condition:PriceVolumeCondition):Boolean{
            if (!condition.isEnable){
                return (false);
            };
            if (!this.isValidTime(message.time)){
                return (false);
            };
            if (this.lastSequenceIdMap[message.instrumentId] >= message.sequenceId){
                return (false);
            };
            switch (condition.condition){
                case PriceVolumeAlertConditionType.PRICE_LESS:
                    return ((message.price < condition.value));
                case PriceVolumeAlertConditionType.PRICE_LESS_EQUAL:
                    return ((message.price <= condition.value));
                case PriceVolumeAlertConditionType.PRICE_MORE:
                    return ((message.price > condition.value));
                case PriceVolumeAlertConditionType.PRICE_MORE_EQUAL:
                    return ((message.price >= condition.value));
                case PriceVolumeAlertConditionType.VOLUME_MORE:
                    return ((message.volume > condition.value));
                case PriceVolumeAlertConditionType.VOLUME_MORE_EQUAL:
                    return ((message.volume >= condition.value));
                default:
                    return (false);
            };
        }
        private function getRegistList():Array{
            var instrumentId:String;
            var configArray:Array;
            var condition:PriceVolumeCondition;
            var registList:Array = new Array();
            for (instrumentId in this.conditionMap) {
                configArray = this.conditionMap[instrumentId];
                for each (condition in configArray) {
                    if (condition.isEnable){
                        registList.push(instrumentId);
                    };
                };
            };
            return (registList);
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.enumuration.*;
    import flash.events.*;
    import flash.utils.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.connection.helper.feed.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;

    public class PullManager extends Manager implements IStatusNotifier {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:PullManager;

        protected var _connected:Boolean;
        protected var _host:String;
        protected var pullHelper:PullHelper;
        protected var pullTimer:Timer;
        protected var _refreshRate:Number;
        protected var registerService:RegisterService;

        public function PullManager(){
            super();
            this.pullHelper = PullHelper.getInstance();
            this._refreshRate = 5000;
            this.pullTimer = new Timer(this._refreshRate, 0);
            this._host = "";
            this._connected = false;
            this.registerService = RegisterService.getInstance();
        }
        public static function getInstance():PullManager{
            if (instance == null){
                instance = new (PullManager)();
            };
            return (instance);
        }

        public function connect():void{
            if (!this._connected){
                this.startService();
                this.pullTimer.start();
                dispatcher.notifyControlMessage(new FeedStatusMessage(this.pullHelper.getCurrentConnector().host, FeedState.PULL, FeedStatus.CONNECT));
                this._connected = true;
            };
        }
        public function disconnect():void{
            if (this._connected){
                this._connected = false;
                this.stopService();
                this.pullTimer.stop();
                dispatcher.notifyControlMessage(new FeedStatusMessage(this.pullHelper.getCurrentConnector().host, FeedState.PULL, FeedStatus.DISCONNECT));
            };
        }
        override public function startService():void{
            this.pullTimer.addEventListener(TimerEvent.TIMER, this.timerEventHandler);
        }
        override public function stopService():void{
            this.pullTimer.removeEventListener(TimerEvent.TIMER, this.timerEventHandler);
        }
        private function timerEventHandler(e:TimerEvent):void{
            this.registerService.sendRegisterMessage();
        }
        public function get refreshRate():Number{
            return (this._refreshRate);
        }
        public function set refreshRate(value:Number):void{
            this._refreshRate = value;
            this.pullTimer.delay = this._refreshRate;
        }
        public function get host():String{
            return (this._host);
        }
        public function set host(value:String):void{
            this._host = value;
        }
        public function get connected():Boolean{
            return (this._connected);
        }
        public function getStatus():Dictionary{
            var statusDictionary:Dictionary = new Dictionary();
            statusDictionary["connected"] = this.connected;
            statusDictionary["host"] = this.host;
            return (statusDictionary);
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import flash.utils.*;
    import com.settrade.streaming5.common.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.page.*;
    import flash.system.*;
    import flash.net.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;

    public class PageManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        private static var instance:PageManager;

        protected var sourceMap:Dictionary;
        protected var loaderMap:Dictionary;
        protected var loaderUrlMap:Dictionary;
        protected var pageList:Vector.<StreamingMovieClip>;
        protected var pageMap:Dictionary;
        protected var registerService:RegisterService;
        protected var serviceLockManager:ServiceLockManager;
        protected var currentPageMap:Dictionary;
        protected var urlByteMap:Dictionary;
        protected var previousPage:String;

        public function PageManager(){
            super();
            this.registerService = RegisterService.getInstance();
            this.pageList = new Vector.<StreamingMovieClip>();
            this.pageMap = new Dictionary();
            this.loaderMap = new Dictionary();
            this.loaderUrlMap = new Dictionary();
            this.sourceMap = new Dictionary();
            this.urlByteMap = new Dictionary();
            this.currentPageMap = new Dictionary();
            this.serviceLockManager = ServiceLockManager.getInstance();
        }
        public static function getInstance():PageManager{
            if (instance == null){
                instance = new (PageManager)();
            };
            return (instance);
        }

        public function loadInternalPage(name:String, movieclip:StreamingMovieClip, holder:MovieClip):void{
            if (this.hasPageByName(name)){
                logger.warn("Duplicate Page Name");
            };
            movieclip.visible = false;
            holder.addChild(movieclip);
            this.pageMap[name] = movieclip;
            this.sourceMap[name] = holder;
            this.pageList.push(movieclip);
            logger.info(("Load internal page : " + name));
        }
        public function load(name:String, url:String, holder:MovieClip):void{
            var appDomain:ApplicationDomain = ApplicationDomain.currentDomain;
            var context:LoaderContext = new LoaderContext(false, appDomain);
            var loader:Loader = new Loader();
            loader.contentLoaderInfo.addEventListener(Event.COMPLETE, this.onLoaderCompleteHandler);
            loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, this.onIOErrorHandler);
            loader.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onSecurityErrorHandler);
            var urlRequest:URLRequest = new URLRequest(url);
            var urlVariables:URLVariables = new URLVariables();
            urlVariables.nocache = StreamingAttribute.lastModified;
            urlRequest.data = urlVariables;
            this.loaderMap[loader] = name;
            this.loaderUrlMap[loader] = url;
            this.sourceMap[name] = holder;
            var bytes:ByteArray = this.urlByteMap[url];
            if (bytes == null){
                loader.load(urlRequest, context);
            } else {
                loader.loadBytes(bytes, context);
            };
        }
        public function getPageByName(name:String):StreamingMovieClip{
            return (StreamingMovieClip(this.pageMap[name]));
        }
        public function removePage(name:String):void{
            var source:MovieClip;
            var page:StreamingMovieClip = this.getPageByName(name);
            if (page != null){
                source = this.getSourceByName(name);
                source.removeChild(page);
                delete this.pageMap[name];
                delete this.sourceMap[name];
                this.pageList.splice(this.pageList.indexOf(page), 1);
            };
        }
        public function removeSource(source:Object):void{
            var page:String;
            delete this.currentPageMap[source];
            for (page in this.sourceMap) {
                if (this.getSourceByName(page) == source){
                    this.removePage(page);
                };
            };
        }
        public function hasPageByName(name:String){
            return (!((this.getPageByName(name) == null)));
        }
        public function getSourceByName(name:String):MovieClip{
            return (MovieClip(this.sourceMap[name]));
        }
        public function getCurrentPageFromSource(source:MovieClip):String{
            return (this.currentPageMap[source]);
        }
        public function getAllCurrentPage():Array{
            var source:Object;
            var list:Array = new Array();
            for (source in this.currentPageMap) {
                list.push(this.currentPageMap[source]);
            };
            return (list);
        }
        public function getCurrentSameSourcePageFromName(name:String):String{
            var source:MovieClip = this.sourceMap[name];
            if (source == null){
                return (null);
            };
            return (this.getCurrentPageFromSource(source));
        }
        public function visiblePage(dest:String):void{
            if (!this.hasPageByName(dest)){
                logger.error(("Invalid Destination Page: " + dest));
                return;
            };
            var destMovieClip:StreamingMovieClip = this.getPageByName(dest);
            var source:MovieClip = this.getSourceByName(dest);
            var currentPage:String = this.getCurrentSameSourcePageFromName(dest);
            var currentMovieClip:StreamingMovieClip = this.getPageByName(currentPage);
            if (currentMovieClip != null){
                currentMovieClip.visible = false;
            };
            destMovieClip.visible = true;
            this.currentPageMap[source] = dest;
        }
        public function refreshPage(source):void{
            var currentMovieClip:* = null;
            var source:* = source;
            var currentPage:* = this.getCurrentPageFromSource(source);
            currentMovieClip = this.getPageByName(currentPage);
            if (currentMovieClip != null){
                try {
                    currentMovieClip.synchronousStopService();
                } catch(error:Error) {
                    logger.error("Error: on Stop Service");
                    logger.debug(error.getStackTrace());
                };
            };
            try {
                currentMovieClip.synchronousStartService();
            } catch(error:Error) {
                logger.error("Error: on Start Service");
                logger.debug(error.getStackTrace());
            };
            var timer:* = new Timer(1, 1);
            timer.addEventListener(TimerEvent.TIMER_COMPLETE, function (event:Event){
                var event:* = event;
                serviceLockManager.lock(this);
                if (currentMovieClip != null){
                    try {
                        currentMovieClip.stopService();
                    } catch(error:Error) {
                        logger.error("Error: on Stop Service");
                        logger.debug(error.getStackTrace());
                    };
                };
                try {
                    currentMovieClip.startService();
                } catch(error:Error) {
                    logger.error("Error: on Start Service");
                    logger.debug(error.getStackTrace());
                };
                registerService.sendRegisterMessage();
                serviceLockManager.unlock(this);
            });
            timer.start();
        }
        public function showPage(dest:String, parameter:Object=null):void{
            var timerHelper:* = null;
            var destMovieClip:* = null;
            var currentPage:* = null;
            var currentMovieClip:* = null;
            var dest:* = dest;
            var parameter = parameter;
            logger.info(((("Show Page : " + dest) + " with parameter : ") + parameter));
            timerHelper = new TimerHelper("StartServiceTimer");
            if (!this.hasPageByName(dest)){
                logger.error(("Invalid Destination Page: " + dest));
                return;
            };
            destMovieClip = this.getPageByName(dest);
            var source:* = this.getSourceByName(dest);
            currentPage = this.getCurrentSameSourcePageFromName(dest);
            if ((((dest == currentPage)) && ((parameter == null)))){
                return;
            };
            timerHelper.stop(("Start:VisibleCurrentPage:" + currentPage));
            currentMovieClip = this.getPageByName(currentPage);
            if (currentMovieClip != null){
                currentMovieClip.visible = false;
            };
            timerHelper.stop(("Complete:VisibleCurrentPage:" + currentPage));
            timerHelper.stop(("Start:VisibleDestinationPage:" + dest));
            destMovieClip.visible = true;
            timerHelper.stop(("Complete:VisibleDestinationPage:" + dest));
            timerHelper.stop(("Start:SynchronizeStopService:" + currentPage));
            if (currentMovieClip != null){
                try {
                    currentMovieClip.synchronousStopService();
                } catch(error:Error) {
                    logger.error("Error: on Stop Service");
                    logger.debug(error.getStackTrace());
                };
            };
            timerHelper.stop(("Complete:SynchronizeStopService:" + currentPage));
            timerHelper.stop(("Start:SynchronizeStartService:" + dest));
            try {
                destMovieClip.synchronousStartService();
            } catch(error:Error) {
                logger.error("Error: on Start Service");
                logger.debug(error.getStackTrace());
            };
            timerHelper.stop(("Complete:SynchronizeStartService:" + dest));
            var timer:* = new Timer(1, 1);
            timer.addEventListener(TimerEvent.TIMER_COMPLETE, function (event:Event){
                var event:* = event;
                timerHelper.stop("Start:Lock");
                serviceLockManager.lock(this);
                timerHelper.stop("Complete:Lock");
                timerHelper.stop(("Start:StopService:" + currentPage));
                if (currentMovieClip != null){
                    try {
                        currentMovieClip.stopService();
                    } catch(error:Error) {
                        logger.error("Error: on Stop Service");
                        logger.debug(error.getStackTrace());
                    };
                };
                timerHelper.stop(("Complete:StopService:" + currentPage));
                timerHelper.stop(("Start:StartService:" + dest));
                try {
                    destMovieClip.startService();
                } catch(error:Error) {
                    logger.error("Error: on Start Service");
                    logger.debug(error.getStackTrace());
                };
                timerHelper.stop(("Complete:StartService:" + dest));
                timerHelper.stop(("Start:onShowPage:" + dest));
                if (parameter != null){
                    destMovieClip.onShowPage(parameter);
                };
                timerHelper.stop(("Complete:onShowPage:" + dest));
                timerHelper.stop("Start:unlock");
                serviceLockManager.unlock(this);
                timerHelper.stop("Complete:unlock");
                timerHelper.summarize();
            });
            timer.start();
            this.currentPageMap[source] = dest;
        }
        public function hidePage(src:String, parameter:Object=null):void{
            if (!this.hasPageByName(src)){
                logger.error(("Invalid Source Page: " + src));
                return;
            };
            var source:MovieClip = this.getSourceByName(src);
            var currentPage:* = this.getCurrentSameSourcePageFromName(src);
            var currentMovieClip:StreamingMovieClip = this.getPageByName(currentPage);
            this.serviceLockManager.lock(this);
            if (currentMovieClip != null){
                currentMovieClip.visible = false;
                currentMovieClip.stopService();
            };
            this.currentPageMap[source] = null;
            this.serviceLockManager.unlock(this);
            logger.info(("Hide Page: " + src));
            var message:PopupStateChangeMessage = new PopupStateChangeMessage(PopupState.HIDING);
            dispatcher.notifyControlMessage(message);
        }
        protected function onLoaderCompleteHandler(event:Event){
            var loaderInfo:LoaderInfo = LoaderInfo(event.target);
            var loader:Loader = loaderInfo.loader;
            var displayObject:DisplayObject = loader.content;
            if ((!(displayObject) is StreamingMovieClip)){
                logger.error(("Invalid swf: " + loaderInfo.loaderURL));
                return;
            };
            var streamingMovieClip:StreamingMovieClip = StreamingMovieClip(displayObject);
            var url:String = this.loaderUrlMap[loader];
            var name:String = this.loaderMap[loader];
            var holder:MovieClip = this.sourceMap[name];
            this.urlByteMap[url] = loaderInfo.bytes;
            this.loaderMap[loader] = null;
            this.loaderUrlMap[loader] = null;
            this.loadInternalPage(name, streamingMovieClip, holder);
            this.destroyLoader(loader);
            dispatcher.notifyControlMessage(new PageStatusMessage(name, url, PageStatus.COMPLETE));
            logger.info((("Load widget [" + name) + "] completed"));
        }
        private function onSecurityErrorHandler(event:SecurityErrorEvent):void{
            var loaderInfo:LoaderInfo = LoaderInfo(event.target);
            var loader:Loader = loaderInfo.loader;
            var name:String = this.loaderMap[loader];
            var url:String = loaderInfo.url;
            logger.fatal(("SecurityError: Cannot Load " + url));
            this.destroyLoader(loader);
            dispatcher.notifyControlMessage(new PageStatusMessage(name, url, PageStatus.ERROR));
        }
        private function onIOErrorHandler(event:IOErrorEvent):void{
            var loaderInfo:LoaderInfo = LoaderInfo(event.target);
            var loader:Loader = loaderInfo.loader;
            var name:String = this.loaderMap[loader];
            var url:String = loaderInfo.url;
            logger.fatal(("SecurityError: Cannot Load " + url));
            this.destroyLoader(loader);
            dispatcher.notifyControlMessage(new PageStatusMessage(name, url, PageStatus.ERROR));
        }
        private function destroyLoader(loader:Loader){
            loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, this.onLoaderCompleteHandler);
            loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, this.onIOErrorHandler);
            loader.contentLoaderInfo.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onSecurityErrorHandler);
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import __AS3__.vec.*;
    import com.settrade.streaming5.service.*;

    public class ServiceLockManager {

        private static var instance:ServiceLockManager;

        private var key:Object;
        private var isLock:Boolean;
        private var serviceList:Vector.<Lockable>;

        public function ServiceLockManager(){
            super();
            this.initialServiceList();
            this.isLock = false;
        }
        public static function getInstance():ServiceLockManager{
            if (instance == null){
                instance = new (ServiceLockManager)();
            };
            return (instance);
        }

        private function initialServiceList():void{
            this.serviceList = new Vector.<Lockable>();
            this.serviceList.push(InfoService.getInstance());
            this.serviceList.push(SnapshotService.getInstance());
            this.serviceList.push(InstrumentTickerService.getInstance());
            this.serviceList.push(IntradayChartService.getInstance());
            this.serviceList.push(MarketTickerService.getInstance());
            this.serviceList.push(OrderPushService.getInstance());
            this.serviceList.push(VolumeByPriceDetailService.getInstance());
            this.serviceList.push(MarketSummaryService.getInstance());
            this.serviceList.push(AccountInformationEquityService.getInstance());
            this.serviceList.push(AccountInformationDerivativesService.getInstance());
            this.serviceList.push(HistoricalChartService.getInstance());
        }
        public function lock(key:Object):Boolean{
            var service:Lockable;
            if (this.isLock){
                return (false);
            };
            for each (service in this.serviceList) {
                service.lock();
            };
            this.isLock = true;
            this.key = key;
            return (true);
        }
        public function unlock(key:Object):Boolean{
            var service:Lockable;
            if (((!(this.isLock)) || (!((this.key == key))))){
                return (false);
            };
            for each (service in this.serviceList) {
                service.unlock();
            };
            this.isLock = false;
            this.key = null;
            return (true);
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.message.feed.*;
    import flash.utils.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;

    public class MarketTickerManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:MarketTickerManager;

        public const DEFAULT_SEQUENCE_ID:int = -1;

        protected var sequenceIdMap:Dictionary;
        protected var sumSequenceIdMap:Dictionary;

        public function MarketTickerManager(){
            super();
            this.sequenceIdMap = new Dictionary();
            this.sumSequenceIdMap = new Dictionary();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():MarketTickerManager{
            if (instance == null){
                instance = new (MarketTickerManager)();
            };
            return (instance);
        }
        public static function getFeedMarketFromInstrumentType(instrumentType:InstrumentType):System{
            if (instrumentType.isEquity()){
                return (System.EQUITY);
            };
            if (instrumentType.isDerivatives()){
                return (System.DERIV);
            };
            return (System.NO_SYSTEM);
        }

        override public function startService():void{
            this.addEventListener(MessageReceiveEvent.MARKET_TICKER, this.MarketTickerHandler);
        }
        override public function stopService():void{
            this.removeEventListener(MessageReceiveEvent.MARKET_TICKER, this.MarketTickerHandler);
        }
        private function MarketTickerHandler(e:MessageReceiveEvent):void{
            var message:Message = e.message;
            if (!message.type.isMarketTickerFeed()){
                throw (new InvalidMessageTypeError(message));
            };
            var marketTickerFeedMessage:MarketTickerFeedMessage = MarketTickerFeedMessage(message);
            var system:System = getFeedMarketFromInstrumentType(marketTickerFeedMessage.instrumentType);
            var sequenceId:int = marketTickerFeedMessage.sequenceId;
            var isSum:Boolean = marketTickerFeedMessage.isSum;
            this.updateSequenceId(system, sequenceId, isSum);
        }
        public function clearSequenceId(system:System):void{
            this.sequenceIdMap[system] = this.DEFAULT_SEQUENCE_ID;
            this.sumSequenceIdMap[system] = this.DEFAULT_SEQUENCE_ID;
        }
        public function getSequenceId(system:System, isSum:Boolean=false):int{
            var sequenceId:int = this.DEFAULT_SEQUENCE_ID;
            if (isSum){
                sequenceId = this.sumSequenceIdMap[system];
                if (this.sumSequenceIdMap[system] == null){
                    return (this.DEFAULT_SEQUENCE_ID);
                };
            } else {
                sequenceId = this.sequenceIdMap[system];
                if (this.sequenceIdMap[system] == null){
                    return (this.DEFAULT_SEQUENCE_ID);
                };
            };
            return (sequenceId);
        }
        public function hasSequenceId(system:System, isSum:Boolean=false):Boolean{
            return (!((this.getSequenceId(system, isSum) == this.DEFAULT_SEQUENCE_ID)));
        }
        public function updateSequenceId(system:System, sequenceId:int, isSum:Boolean=false):void{
            if (this.isValidSequenceId(system, sequenceId, isSum)){
                if (isSum){
                    this.sumSequenceIdMap[system] = sequenceId;
                } else {
                    this.sequenceIdMap[system] = sequenceId;
                };
            };
        }
        public function isValidSequenceId(system:System, sequenceId:int, isSum:Boolean=false){
            return ((sequenceId > this.getSequenceId(system, isSum)));
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.event.*;
    import flash.utils.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.connection.helper.feed.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;

    public class PushManager extends Manager implements IStatusNotifier {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:PushManager;

        protected var _connecting:Boolean;
        protected var _connected:Boolean;
        protected var pushHelper:PushHelper;
        protected var registerKeyService:RegisterKeyService;
        protected var generateKeyService:GenerateKeyService;
        protected var generateKeyMessageId:Number;
        protected var password:String;
        protected var _host:String;
        protected var _port:int;

        public function PushManager(){
            super();
            this.pushHelper = PushHelper.getInstance();
            this.registerKeyService = RegisterKeyService.getInstance();
            this.generateKeyService = GenerateKeyService.getInstance();
            this.password = "";
            this._host = "";
            this._port = -1;
            this._connecting = false;
            this._connected = false;
        }
        public static function getInstance():PushManager{
            if (instance == null){
                instance = new (PushManager)();
            };
            return (instance);
        }

        public function connect():void{
            if (((!(this._connected)) && (!(this._connecting)))){
                this.startService();
                this.generateKeyMessageId = this.generateKeyService.generateKey();
            };
        }
        protected function connectPort():void{
            if (!this.pushHelper.hasConnector(this._host, this._port)){
                this.pushHelper.addNewConnection(this._host, this._port);
            };
            this.pushHelper.setCurrentConnector(this._host, this._port, false);
            this.pushHelper.connect();
            this._connecting = true;
        }
        public function disconnect():void{
            logger.trace("Disconnect Push");
            this._connecting = false;
            this._connected = false;
            this.stopService();
            this.pushHelper.disconnect();
        }
        protected function onReceiveSocketStatus(event:MessageEvent){
            var message:SocketStatusMessage = SocketStatusMessage(event.message);
            var status:SocketStatus = message.status;
            if (status.isConnected()){
                this._connected = true;
                this._connecting = false;
                this.registerPush();
            } else {
                if (status.isTimeout()){
                    this._connected = false;
                    this._connecting = false;
                    dispatcher.notifyControlMessage(new FeedStatusMessage(message.host, FeedState.PUSH, FeedStatus.TIMEOUT));
                } else {
                    if (((this._connecting) && (((status.isDisconnected()) || (status.isError()))))){
                        this._connected = false;
                        this._connecting = false;
                        dispatcher.notifyControlMessage(new FeedStatusMessage(message.host, FeedState.PUSH, FeedStatus.FAIL));
                    } else {
                        if (((status.isDisconnected()) || (status.isError()))){
                            this._connected = false;
                            this._connecting = false;
                            dispatcher.notifyControlMessage(new FeedStatusMessage(message.host, FeedState.PUSH, FeedStatus.DISCONNECT));
                        };
                    };
                };
            };
        }
        protected function onReceiveGenerateKeyMessage(event:MessageEvent){
            var message:GenerateKeyResponse = GenerateKeyResponse(event.message);
            this._host = message.host;
            this._port = message.port;
            this.password = message.password;
            this.connectPort();
        }
        protected function registerPush():void{
            this.registerKeyService.registerKey(this.password);
            dispatcher.notifyControlMessage(new FeedStatusMessage(this._host, FeedState.PUSH, FeedStatus.CONNECT));
        }
        override public function startService():void{
            addEventListener(MessageReceiveEvent.GENERATE_KEY, this.onReceiveGenerateKeyMessage);
            addEventListener(MessageControlEvent.SOCKET_STATUS, this.onReceiveSocketStatus);
            addEventListener(MessageFailEvent.FAIL, this.onFailMessage);
        }
        private function onFailMessage(e:MessageEvent):void{
            var message:IFailMessage = IFailMessage(e.message);
            if (message.requestId == this.generateKeyMessageId){
                dispatcher.notifyControlMessage(new FeedStatusMessage(this._host, FeedState.PUSH, FeedStatus.FAIL));
            };
        }
        override public function stopService():void{
            removeEventListener(MessageReceiveEvent.GENERATE_KEY, this.onReceiveGenerateKeyMessage);
            removeEventListener(MessageControlEvent.SOCKET_STATUS, this.onReceiveSocketStatus);
            removeEventListener(MessageFailEvent.FAIL, this.onFailMessage);
        }
        public function getStatus():Dictionary{
            var statusDictionary:Dictionary = new Dictionary();
            statusDictionary["connecting"] = this.connecting;
            statusDictionary["connected"] = this.connected;
            statusDictionary["host"] = this.host;
            statusDictionary["port"] = this.port;
            return (statusDictionary);
        }
        public function get connecting():Boolean{
            return (this._connecting);
        }
        public function get host():String{
            return (this._host);
        }
        public function get port():int{
            return (this._port);
        }
        public function get connected():Boolean{
            return (this._connected);
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.message.feed.*;
    import flash.utils.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;

    public class InstrumentTickerOddLotManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:InstrumentTickerOddLotManager;

        public const DEFAULT_SEQUENCE_ID:int = -1;

        protected var sequenceIdMap:Dictionary;

        public function InstrumentTickerOddLotManager(){
            super();
            this.sequenceIdMap = new Dictionary();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():InstrumentTickerOddLotManager{
            if (instance == null){
                instance = new (InstrumentTickerOddLotManager)();
            };
            return (instance);
        }

        override public function startService():void{
            this.addEventListener(MessageReceiveEvent.INSTRUMENT_TICKER_ODDLOT, this.instrumentTickerHandler);
        }
        override public function stopService():void{
            this.removeEventListener(MessageReceiveEvent.INSTRUMENT_TICKER_ODDLOT, this.instrumentTickerHandler);
        }
        private function instrumentTickerHandler(e:MessageReceiveEvent):void{
            var message:Message = e.message;
            if (!message.type.isInstrumentTickerOddLotFeed()){
                throw (new InvalidMessageTypeError(message));
            };
            var instrumentTickerFeedMessage:InstrumentTickerOddLotFeedMessage = InstrumentTickerOddLotFeedMessage(message);
            var instrumentId:String = instrumentTickerFeedMessage.instrumentId;
            var sequenceId:int = instrumentTickerFeedMessage.sequenceId;
            this.updateSequenceId(instrumentId, sequenceId);
        }
        public function clearSequenceId(instrumentId:String):void{
            this.sequenceIdMap[instrumentId] = this.DEFAULT_SEQUENCE_ID;
        }
        public function getSequenceId(instrumentId:String):int{
            var sequenceId:int = this.sequenceIdMap[instrumentId];
            if (this.sequenceIdMap[instrumentId] == null){
                return (this.DEFAULT_SEQUENCE_ID);
            };
            return (sequenceId);
        }
        public function hasSequenceId(instrumentId:String):Boolean{
            return (!((this.getSequenceId(instrumentId) == this.DEFAULT_SEQUENCE_ID)));
        }
        public function updateSequenceId(instrumentId:String, sequenceId:int):void{
            if (this.isValidSequenceId(instrumentId, sequenceId)){
                this.sequenceIdMap[instrumentId] = sequenceId;
            };
        }
        public function isValidSequenceId(instrumentId:String, sequenceId:int){
            return ((sequenceId > this.getSequenceId(instrumentId)));
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import flash.utils.*;
    import com.settrade.streaming5.widget.component.*;
    import com.settrade.streaming5.message.request.pagestat.*;
    import com.settrade.log.logger.*;

    public class UsageLogManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:UsageLogManager;

        protected var _usageLogDictionary:Dictionary;
        protected var _usageTimeDictionary:Dictionary;
        protected var _startTimeDictionary:Dictionary;

        public function UsageLogManager(){
            super();
            this._usageLogDictionary = new Dictionary();
            this._usageTimeDictionary = new Dictionary();
            this._startTimeDictionary = new Dictionary();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():UsageLogManager{
            if (instance == null){
                instance = new (UsageLogManager)();
            };
            return (instance);
        }

        public function startLog(widget:WidgetComponent):void{
            logger.info(("START::" + widget.widgetId));
            this.increase(widget.widgetId);
            this._startTimeDictionary[widget] = SyncTimeManager.getInstance().getCurrentTime();
        }
        public function stopLog(widget:WidgetComponent):void{
            var stop:Date = SyncTimeManager.getInstance().getCurrentTime();
            var start:Date = this._startTimeDictionary[widget];
            var time:int = int(((stop.getTime() - start.getTime()) / 1000));
            delete this._startTimeDictionary[widget];
            var oldTime:int = this._usageTimeDictionary[widget.widgetId];
            if (isNaN(oldTime)){
                oldTime = 0;
            };
            this._usageTimeDictionary[widget.widgetId] = (oldTime + time);
        }
        public function increase(widgetId:String, increase:int=1):void{
            var count:int = this._usageLogDictionary[widgetId];
            count = (count + increase);
            this._usageLogDictionary[widgetId] = count;
        }
        public function calculateAvailable():void{
            var widget:Object;
            var start:Date;
            var time:int;
            var oldTime:int;
            var stop:Date = SyncTimeManager.getInstance().getCurrentTime();
            for (widget in this._startTimeDictionary) {
                start = this._startTimeDictionary[widget];
                time = int(((stop.getTime() - start.getTime()) / 1000));
                oldTime = this._usageTimeDictionary[widget.widgetId];
                if (isNaN(oldTime)){
                    oldTime = 0;
                };
                this._usageTimeDictionary[widget.widgetId] = (oldTime + time);
                this._startTimeDictionary[widget] = stop;
            };
        }
        public function clear():void{
            this._usageLogDictionary = new Dictionary();
        }
        public function get usageLogDictionary():Dictionary{
            return (this._usageLogDictionary);
        }
        public function get usageTimeDictionary():Dictionary{
            return (this._usageTimeDictionary);
        }
        public function getMinuteUsageTimeMap():Dictionary{
            var widgetId:String;
            var _usageTime:int;
            var result:Dictionary = new Dictionary();
            for (widgetId in this._usageTimeDictionary) {
                _usageTime = this._usageTimeDictionary[widgetId];
                result[widgetId] = (_usageTime / 60);
                this._usageTimeDictionary[widgetId] = (_usageTime % 60);
            };
            return (result);
        }
        public function collectPageStatistic():Array{
            var widgetId:String;
            var array:Array;
            var stat:PageStatistic;
            this.calculateAvailable();
            var usageMap:Dictionary = this.usageLogDictionary;
            var timeMap:Dictionary = this.getMinuteUsageTimeMap();
            var statMap:Dictionary = new Dictionary();
            for (widgetId in usageMap) {
                statMap[widgetId] = new PageStatistic(widgetId, usageMap[widgetId], 0);
            };
            for (widgetId in timeMap) {
                stat = statMap[widgetId];
                if (stat == null){
                    stat = new PageStatistic(widgetId, 0, 0);
                    statMap[widgetId] = stat;
                };
                stat.time = timeMap[widgetId];
            };
            array = new Array();
            for each (stat in statMap) {
                array.push(stat);
            };
            this.clear();
            return (array);
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.widget.config.*;
    import flash.utils.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.log.logger.*;

    public class WidgetPageManager {

        public static const EMPTY:WidgetPageConfig = new WidgetPageConfig("", "", 3, 4);
        public static const MARKET_WATCH:WidgetPageConfig = createMarketWatch();
        public static const BUY_SELL:WidgetPageConfig = createBuySell();
        public static const PORTFOLIO:WidgetPageConfig = createPortfolio();
        public static const BID_OFFER:WidgetPageConfig = createBidOffer();
        public static const TICKER:WidgetPageConfig = createTicker();
        public static const QUOTE:WidgetPageConfig = createQuote();
        public static const NEWS:WidgetPageConfig = createNews();
        public static const RESEARCH:WidgetPageConfig = createResearch();
        public static const BUY_SELL_MKT:WidgetPageConfig = createBuySellMkt();
        public static const DEAL_SUMMARY:WidgetPageConfig = createDealSummary();
        public static const ACCOUNT_INFO:WidgetPageConfig = createAccountInfo();
        public static const TRADE_REPORT:WidgetPageConfig = createTradeReport();
        public static const ORDER_STATUS_SEARCH:WidgetPageConfig = createOrderStausSearch();
        public static const PLACE_ORDER_FULL:WidgetPageConfig = createPlaceOrderFull();
        public static const MULTIPLE_ORDER:WidgetPageConfig = createMultipleOrder();
        public static const OPTIONS_SUMMARY:WidgetPageConfig = createOptionsSummary();
        public static const TECHNICAL_CHART:WidgetPageConfig = createTechnicalChart();
        public static const SETTINGS:WidgetPageConfig = createSettings();

        private static var _instance:WidgetPageManager;
        private static var logger:Logger = new Logger(prototype.constructor);
        public static var customizedPageList:Array = new Array();

        var configMap:Dictionary;

        public function WidgetPageManager(){
            super();
            this.configMap = new Dictionary();
        }
        public static function getInstance():WidgetPageManager{
            if (_instance == null){
                _instance = new (WidgetPageManager)();
            };
            return (_instance);
        }
        private static function createPlaceOrderFull():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig(PageName.PLACE_ORDER_FULL, "", 3, 4);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Place_Singleton_3_4", 0, 0);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createMarketWatch():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig(PageName.MARKET_WATCH, "Market", 3, 4);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Watch_3_3", 0, 0);
            group.add(component, false);
            component = new WidgetComponentConfig("Place_Singleton_3_1", 0, 3);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createBuySell():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig(PageName.BUY_SELL, "Click", 3, 4);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("QuoteSet_1_1", 0, 0);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Place_Singleton_3_1", 0, 3);
            group.add(component, true);
            component = new WidgetComponentConfig("Click_2_3", 1, 0);
            group.add(component, false);
            component = new WidgetComponentConfig("Fav_1_2", 0, 1);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createPortfolio():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig(PageName.PORTFOLIO, "Portfolio", 3, 4);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("PortDeal_3_2", 0, 0);
            group.add(component, false);
            component = new WidgetComponentConfig("AccInfo_1_1", 0, 2);
            group.add(component, false);
            component = new WidgetComponentConfig("ChartPort_1_1", 1, 2);
            group.add(component, false);
            component = new WidgetComponentConfig("ChartProfit_1_1", 2, 2);
            group.add(component, false);
            component = new WidgetComponentConfig("Place_Singleton_3_1", 0, 3);
            group.add(component, true);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createBidOffer():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig(PageName.BID_OFFER, "Bids Offers", 3, 4);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("QuoteSet_1_1", 0, 0);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Bid3_1_1", 1, 0);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Bid3_1_1", 2, 0);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Bid3_1_1", 0, 1);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Bid3_1_1", 1, 1);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Bid3_1_1", 2, 1);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Bid3_1_1", 0, 2);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Bid3_1_1", 1, 2);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Bid3_1_1", 2, 2);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Place_Singleton_3_1", 0, 3);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createTicker():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig(PageName.TICKER, "Ticker", 3, 4);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Ticker_3_3", 0, 0);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Place_Singleton_3_1", 0, 3);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createQuote():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig(PageName.QUOTE, "Quote", 3, 4);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Quote_3_2", 0, 0);
            group.add(component, true);
            component = new WidgetComponentConfig("Bid5_1_1", 0, 2);
            group.add(component, false);
            component = new WidgetComponentConfig("PercentBuy_1_1", 1, 2);
            group.add(component, false);
            component = new WidgetComponentConfig("ChartDay_1_1", 2, 2);
            group.add(component, false);
            component = new WidgetComponentConfig("Place_Singleton_3_1", 0, 3);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createNews():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig(PageName.NEWS, "News", 3, 4);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("News_3_2", 0, 0);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Calendar_1_1", 0, 2);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Oppday_2_1", 1, 2);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Place_Singleton_3_1", 0, 3);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createResearch():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig(PageName.RESEARCH, "Research", 3, 4);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Research_3_3", 0, 0);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Place_Singleton_3_1", 0, 3);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createBuySellMkt():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig(PageName.BUY_SELL_MKT, "Click Mkt", 3, 4);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("QuoteSet_1_1", 0, 0);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Announcement_1_1", 2, 0);
            group.add(component, false);
            component = new WidgetComponentConfig("TickerId_1_1", 1, 0);
            group.add(component, false);
            component = new WidgetComponentConfig("Fav_1_2", 0, 1);
            group.add(component, false);
            component = new WidgetComponentConfig("Click_2_2", 1, 1);
            group.add(component, false);
            component = new WidgetComponentConfig("Port_3_1", 0, 3);
            group.add(component, true);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createDealSummary():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig(PageName.DEAL_SUMMARY, "Total Deal", 3, 4);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Place_Singleton_3_1", 0, 3);
            group.add(component, true);
            component = new WidgetComponentConfig("Deal_3_2", 0, 0);
            group.add(component, false);
            component = new WidgetComponentConfig("Port_3_1", 0, 2);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createAccountInfo():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig(PageName.ACCOUNT_INFO, "A/C Info", 3, 4);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Place_Singleton_3_1", 0, 3);
            group.add(component, true);
            component = new WidgetComponentConfig("AccInfo_3_3", 0, 0);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createTradeReport():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig(PageName.TRADE_REPORT, "TradeReport", 3, 4);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("BlockTrade_2_2", 0, 0);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("QuoteSet_1_1", 2, 0);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Bid3_1_1", 2, 1);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Bid3_1_1", 2, 2);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("BlockTradeInfo_2_1", 0, 2);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Place_Singleton_3_1", 0, 3);
            group.add(component, true);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createOrderStausSearch():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig(PageName.ORDER_STATUS_SEARCH, "SearchOrder", 3, 4);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("OrderSearch_3_4", 0, 0);
            group.add(component, true);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createMultipleOrder():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig(PageName.MULTIPLE_ORDER, "", 3, 4);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Multi_3_4", 0, 0);
            group.add(component, true);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createOptionsSummary():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig(PageName.OPTIONS_SUMMARY, "OptionsSum", 3, 4);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Greek_3_2", 0, 0);
            group.add(component, false);
            component = new WidgetComponentConfig("Bid5_1_1", 0, 2);
            group.add(component, false);
            component = new WidgetComponentConfig("TickerId_1_1", 1, 2);
            group.add(component, false);
            component = new WidgetComponentConfig("ChartDay_1_1", 2, 2);
            group.add(component, false);
            component = new WidgetComponentConfig("Place_Singleton_3_1", 0, 3);
            group.add(component, true);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createTechnicalChart():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig(PageName.TECHNICAL_CHART, "Technical", 3, 4);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("TechnicalChart_3_3", 0, 0);
            group.add(component, false);
            component = new WidgetComponentConfig("Place_Singleton_3_1", 0, 3);
            group.add(component, false);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createSettings():WidgetPageConfig{
            var page:WidgetPageConfig = new WidgetPageConfig(PageName.SETTING, "Settings", 3, 4);
            return (page);
        }

        public function initConfigMap():void{
            logger.trace(("APPLICATION MODE = " + StreamingAttribute.applicationMode.name));
            if (StreamingAttribute.applicationMode.isLite()){
                this.loadPageConfig(MARKET_WATCH);
                this.loadPageConfig(BUY_SELL);
                this.loadPageConfig(PORTFOLIO);
                this.loadPageConfig(BID_OFFER);
                this.loadPageConfig(TICKER);
                this.loadPageConfig(QUOTE);
                this.loadPageConfig(NEWS);
                this.loadPageConfig(RESEARCH);
                this.loadPageConfig(PLACE_ORDER_FULL);
                this.loadPageConfig(MULTIPLE_ORDER);
                this.loadPageConfig(TECHNICAL_CHART);
                if (StreamingAttribute.isMarketRep){
                    this.initConfigMapMarketRep();
                } else {
                    this.initConfigMapInvestor();
                };
            } else {
                if (StreamingAttribute.applicationMode.isMini()){
                    this.loadPageConfig(MARKET_WATCH);
                    this.loadPageConfig(PORTFOLIO);
                };
            };
        }
        private function initConfigMapInvestor():void{
        }
        private function initConfigMapMarketRep():void{
            this.loadPageConfig(BUY_SELL_MKT);
            this.loadPageConfig(DEAL_SUMMARY);
            this.loadPageConfig(ACCOUNT_INFO);
            this.loadPageConfig(TRADE_REPORT);
            this.loadPageConfig(ORDER_STATUS_SEARCH);
            this.loadPageConfig(OPTIONS_SUMMARY);
        }
        public function setPageConfig(pageName:String, pageConfig:WidgetPageConfig):void{
            this.configMap[pageName] = pageConfig;
        }
        public function getPageConfig(pageName:String):WidgetPageConfig{
            var pageConfig:WidgetPageConfig = this.configMap[pageName];
            if (pageConfig == null){
                return (EMPTY);
            };
            return (pageConfig);
        }
        public function getAllPageConfig():Array{
            var pageConfig:WidgetPageConfig;
            var pageList:Array = new Array();
            for each (pageConfig in this.configMap) {
                pageList.push(pageConfig);
            };
            return (pageList);
        }
        public function loadPageConfig(config:WidgetPageConfig):void{
            this.configMap[config.id] = config;
        }
        public function initPageConfigFromTemplate(widgetPageList:Array):void{
            var object:Object;
            var widgetPageConfig:WidgetPageConfig;
            var template:WidgetPageConfig;
            if (widgetPageList != null){
                for each (object in widgetPageList) {
                    widgetPageConfig = WidgetPageConfig.fromJsonObject(object);
                    template = this.getPageConfig(widgetPageConfig.id);
                    if ((((template == EMPTY)) || ((widgetPageConfig.version == template.version)))){
                        this.loadPageConfig(widgetPageConfig);
                    };
                };
            };
        }
        public function initPageConfigNoTemplate(widgetPageList:Array):void{
            var object:Object;
            var widgetPageConfig:WidgetPageConfig;
            if (widgetPageList != null){
                for each (object in widgetPageList) {
                    widgetPageConfig = WidgetPageConfig.fromJsonObject(object);
                    this.loadPageConfig(widgetPageConfig);
                };
            };
        }
        public function initPageConfig(widgetPageList:Array):void{
            if (StreamingAttribute.applicationMode.isLite()){
                this.loadPageConfig(PLACE_ORDER_FULL);
                this.loadPageConfig(MULTIPLE_ORDER);
                this.initPageConfigFromTemplate(widgetPageList);
            } else {
                this.initPageConfigNoTemplate(widgetPageList);
            };
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.enumuration.*;
    import flash.utils.*;
    import com.settrade.streaming5.connection.common.*;
    import com.settrade.streaming5.common.stat.*;
    import com.settrade.log.logger.*;

    public class UrlLoaderStatManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:UrlLoaderStatManager;

        protected var statMap:Dictionary;

        public function UrlLoaderStatManager(){
            this.statMap = new Dictionary();
            super();
            this.statMap = new Dictionary();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():UrlLoaderStatManager{
            if (instance == null){
                instance = new (UrlLoaderStatManager)();
            };
            return (instance);
        }

        public function addOrUpdateStatByLoader(loader:StreamingURLLoader):void{
            if (this.hasStatByPath(loader.path)){
                this.updateStatByLoader(loader);
            } else {
                this.addStatByLoader(loader);
            };
        }
        public function updateStatByLoader(loader:StreamingURLLoader):void{
            this.getStatByPath(loader.path).update(loader);
        }
        public function addStatByLoader(loader:StreamingURLLoader):void{
            this.statMap[loader.path.name] = UrlLoaderStat.createByLoader(loader);
        }
        public function getStatByPath(urlPath:UrlPath):UrlLoaderStat{
            return (this.statMap[urlPath.name]);
        }
        public function hasStatByPath(urlPath:UrlPath):Boolean{
            return (!((this.getStatByPath(urlPath) == null)));
        }
        public function getAllStat():Array{
            var stat:UrlLoaderStat;
            var list:Array = new Array();
            for each (stat in this.statMap) {
                list.push(stat);
            };
            return (list);
        }
        public function toString():String{
            var stat:UrlLoaderStat;
            var str:String = "UrlLoaderStatManager\n";
            for each (stat in this.statMap) {
                str = (str + (stat.toString() + "\n"));
            };
            return (str);
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import flash.events.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;
    import flash.ui.*;

    public class KeyboardShortcutManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:KeyboardShortcutManager;

        protected var _stage:Stage;

        public function KeyboardShortcutManager(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():KeyboardShortcutManager{
            if (instance == null){
                instance = new (KeyboardShortcutManager)();
            };
            return (instance);
        }

        override public function startService():void{
            this._stage.addEventListener(KeyboardEvent.KEY_UP, this.onKeyDown);
        }
        override public function stopService():void{
        }
        public function attachKeyboardShortcutEvent(movieClip:MovieClip):void{
            movieClip.addEventListener(KeyboardEvent.KEY_UP, this.onDatagridKeyDown);
        }
        private function onDatagridKeyDown(e:KeyboardEvent):void{
            var key:uint = e.keyCode;
            var type:KeyboardShortcutType = KeyboardShortcutType.NO_TYPE;
            type = this.convertDatagridKeyboardShortType(key);
            if (type != KeyboardShortcutType.NO_TYPE){
                dispatcher.notifyControlMessage(new KeyboardShortcutMessage(type));
            };
        }
        private function convertDatagridKeyboardShortType(key:uint):KeyboardShortcutType{
            switch (key){
                case Keyboard.C:
                    return (KeyboardShortcutType.CANCEL_SELECT_ORDER);
                case Keyboard.D:
                    return (KeyboardShortcutType.CHANGE_SELECT_ORDER);
            };
            return (KeyboardShortcutType.NO_TYPE);
        }
        private function onKeyDown(e:KeyboardEvent):void{
            var key:uint = e.keyCode;
            var type:KeyboardShortcutType = KeyboardShortcutType.NO_TYPE;
            if (e.ctrlKey){
                type = this.convertKeyboardShortcutTypeCtrl(key);
            } else {
                if (e.shiftKey){
                    type = this.convertKeyboardShortcutTypeShift(key);
                } else {
                    type = this.convertKeyboardShortType(key);
                };
            };
            if (type != KeyboardShortcutType.NO_TYPE){
                dispatcher.notifyControlMessage(new KeyboardShortcutMessage(type));
            };
        }
        private function convertKeyboardShortcutTypeCtrl(key:uint):KeyboardShortcutType{
            switch (key){
                case Keyboard.Q:
                    return (KeyboardShortcutType.CHANGE_ACCOUNT_NUMBER);
            };
            return (KeyboardShortcutType.NO_TYPE);
        }
        private function convertKeyboardShortcutTypeShift(key:uint):KeyboardShortcutType{
            switch (key){
                case Keyboard.EQUAL:
                    return (KeyboardShortcutType.BUY);
                case Keyboard.NUMBER_8:
                    return (KeyboardShortcutType.SELECT_LAST_ORDER);
            };
            return (KeyboardShortcutType.NO_TYPE);
        }
        private function convertKeyboardShortType(key:uint):KeyboardShortcutType{
            switch (key){
                case Keyboard.NUMPAD_ADD:
                    return (KeyboardShortcutType.BUY);
                case Keyboard.NUMPAD_DIVIDE:
                case Keyboard.SLASH:
                    return (KeyboardShortcutType.SELL);
                case Keyboard.NUMPAD_MULTIPLY:
                    return (KeyboardShortcutType.SELECT_LAST_ORDER);
            };
            return (KeyboardShortcutType.NO_TYPE);
        }
        public function get stage():Stage{
            return (this._stage);
        }
        public function set stage(value:Stage):void{
            this._stage = value;
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.dispatcher.*;

    public class Manager {

        var dispatcher:MessageDispatcher;

        public function Manager(){
            super();
            this.dispatcher = MessageDispatcher.getInstance();
        }
        public function addEventListener(type:String, listener:Function, useCapture:Boolean=false, priority:int=0, useWeakReference:Boolean=false):void{
            if (MessageEvent.isMessageEvent(type)){
                this.dispatcher.addEventListener(type, listener, useCapture, priority, useWeakReference);
            };
        }
        public function removeEventListener(type:String, listener:Function, useCapture:Boolean=false):void{
            if (MessageEvent.isMessageEvent(type)){
                this.dispatcher.removeEventListener(type, listener, useCapture);
            };
        }
        public function startService():void{
        }
        public function stopService():void{
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.message.response.updateconfig.*;
    import com.settrade.log.logger.*;

    public class ConfigReloadPageManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:ConfigReloadPageManager;

        protected var messageId:Number;

        public function ConfigReloadPageManager(){
            super();
            this.messageId = NaN;
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():ConfigReloadPageManager{
            if (instance == null){
                instance = new (ConfigReloadPageManager)();
            };
            return (instance);
        }

        public function activate(requestMessageId:Number):void{
            addEventListener(MessageReceiveEvent.UPDATE_CONFIG, this.onReceiveUpdateConfig);
            addEventListener(MessageFailEvent.FAIL, this.onFail);
            this.messageId = requestMessageId;
        }
        private function onReceiveUpdateConfig(e:MessageReceiveEvent):void{
            var message:UpdateConfigResponseMessage = UpdateConfigResponseMessage(e.message);
            if (message.requestId == this.messageId){
                JavascriptInterface.reloadScreen();
            };
        }
        private function onFail(e:MessageEvent):void{
            var message:IFailMessage = IFailMessage(e.message);
            if (message.requestId == this.messageId){
                AlertService.getInstance().alertFailMessage(message);
            };
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import flash.utils.*;
    import com.settrade.streaming5.widget.event.*;
    import com.settrade.streaming5.widget.enumuration.*;
    import com.settrade.log.logger.*;

    public class GlobalGroupEventManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:GlobalGroupEventManager;

        protected var eventMap:Dictionary;

        public function GlobalGroupEventManager(){
            super();
            this.eventMap = new Dictionary();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():GlobalGroupEventManager{
            if (instance == null){
                instance = new (GlobalGroupEventManager)();
            };
            return (instance);
        }

        public function addOrUpdateEvent(event:GroupMessageEvent):void{
            var eventType:GroupMessageType = event.messageType;
            logger.info(("Add event for event type " + eventType.name));
            this.eventMap[eventType] = event;
        }
        public function hasEvent(eventType:GroupMessageType):Boolean{
            return (!((this.eventMap[eventType] == null)));
        }
        public function getGroupMessageByEventType(eventType:GroupMessageType):GroupMessageEvent{
            var groupMessage:GroupMessageEvent = GroupMessageEvent(this.eventMap[eventType]);
            if (groupMessage == null){
                return (null);
            };
            return (groupMessage);
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.message.feed.*;
    import flash.utils.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;

    public class InstrumentTickerManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:InstrumentTickerManager;

        public const DEFAULT_SEQUENCE_ID:int = -1;

        protected var sequenceIdMap:Dictionary;

        public function InstrumentTickerManager(){
            super();
            this.sequenceIdMap = new Dictionary();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():InstrumentTickerManager{
            if (instance == null){
                instance = new (InstrumentTickerManager)();
            };
            return (instance);
        }

        override public function startService():void{
            this.addEventListener(MessageReceiveEvent.INSTRUMENT_TICKER, this.instrumentTickerHandler);
        }
        override public function stopService():void{
            this.removeEventListener(MessageReceiveEvent.INSTRUMENT_TICKER, this.instrumentTickerHandler);
        }
        private function instrumentTickerHandler(e:MessageReceiveEvent):void{
            var message:Message = e.message;
            if (!message.type.isInstrumentTickerFeed()){
                throw (new InvalidMessageTypeError(message));
            };
            var instrumentTickerFeedMessage:InstrumentTickerFeedMessage = InstrumentTickerFeedMessage(message);
            var instrumentId:String = instrumentTickerFeedMessage.instrumentId;
            var sequenceId:int = instrumentTickerFeedMessage.sequenceId;
            this.updateSequenceId(instrumentId, sequenceId);
        }
        public function clearSequenceId(instrumentId:String):void{
            this.sequenceIdMap[instrumentId] = this.DEFAULT_SEQUENCE_ID;
        }
        public function getSequenceId(instrumentId:String):int{
            var sequenceId:int = this.sequenceIdMap[instrumentId];
            if (this.sequenceIdMap[instrumentId] == null){
                return (this.DEFAULT_SEQUENCE_ID);
            };
            return (sequenceId);
        }
        public function hasSequenceId(instrumentId:String):Boolean{
            return (!((this.getSequenceId(instrumentId) == this.DEFAULT_SEQUENCE_ID)));
        }
        public function updateSequenceId(instrumentId:String, sequenceId:int):void{
            if (this.isValidSequenceId(instrumentId, sequenceId)){
                this.sequenceIdMap[instrumentId] = sequenceId;
            };
        }
        public function isValidSequenceId(instrumentId:String, sequenceId:int){
            return ((sequenceId > this.getSequenceId(instrumentId)));
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.language.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.config.*;
    import flash.utils.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;

    public class LanguageManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:LanguageManager;

        private var languageMap:Dictionary;
        private var _currentLanguage:Language;

        public function LanguageManager(){
            super();
            this.languageMap = new Dictionary();
            this.languageMap[Language.ENGLISH] = new EnglishLanguageConfig();
            this.languageMap[Language.THAI] = new ThaiLanguageConfig();
            this._currentLanguage = Language.ENGLISH;
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():LanguageManager{
            if (instance == null){
                instance = new (LanguageManager)();
            };
            return (instance);
        }
        public static function get currentLanguage():Language{
            getInstance();
            return (instance.currentLanguage);
        }
        public static function get currentLanguageConfig():ILanguageConfig{
            getInstance();
            return (instance.currentLanguageConfig);
        }
        public static function get englishLanguageConfig():ILanguageConfig{
            getInstance();
            return (instance.getLangageConfigByLanguage(Language.ENGLISH));
        }
        public static function get thaiLanguageConfig():ILanguageConfig{
            getInstance();
            return (instance.getLangageConfigByLanguage(Language.THAI));
        }

        override public function startService():void{
            super.startService();
            this.addEventListener(MessageControlEvent.CONFIG_CHANGE, this.onConfigChange);
        }
        override public function stopService():void{
            super.stopService();
            this.removeEventListener(MessageControlEvent.CONFIG_CHANGE, this.onConfigChange);
        }
        private function onConfigChange(e:MessageControlEvent):void{
            var message:ConfigChangeMessage = ConfigChangeMessage(e.message);
            if (message.config.type.isLanguage()){
                this.setCurrentLanuage(LanguageChangeConfig(message.config).language);
            };
        }
        public function getLangageConfigByLanguage(language:Language):ILanguageConfig{
            return (this.languageMap[language]);
        }
        public function setCurrentLanuage(language:Language):void{
            this._currentLanguage = language;
            dispatcher.notifyControlMessage(new ChangeLanguageMessage(this.currentLanguageConfig));
        }
        public function get currentLanguage():Language{
            return (this._currentLanguage);
        }
        public function get currentLanguageConfig():ILanguageConfig{
            return (this.getLangageConfigByLanguage(this._currentLanguage));
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.log.logger.*;

    public class TurnoverListManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:TurnoverListManager;

        protected var _turnOverList:Array;

        public function TurnoverListManager(){
            super();
            this._turnOverList = new Array();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():TurnoverListManager{
            if (instance == null){
                instance = new (TurnoverListManager)();
            };
            return (instance);
        }

        public function importTurnoverList(message:Message):void{
            if ((message is AccountListEquityResponseMessage)){
                this._turnOverList = AccountListEquityResponseMessage(message).turnoverList.slice(0);
            } else {
                if ((message is AccountListMarketRepEquityResponseMessage)){
                    this._turnOverList = AccountListMarketRepEquityResponseMessage(message).turnoverList.slice(0);
                };
            };
            this._turnOverList = (((this._turnOverList == null)) ? new Array() : this._turnOverList);
        }
        public function isTurnoverList(instrumentId:String):Boolean{
            return (!((this.getTurnOverListLevel(instrumentId) == null)));
        }
        public function getTurnOverListLevel(instrumentId:String):String{
            var turnOverListObject:Object;
            var level:String;
            var turnOverListArray:Array;
            var instrument:String;
            for each (turnOverListObject in this._turnOverList) {
                level = turnOverListObject.level;
                turnOverListArray = turnOverListObject.list;
                if (turnOverListArray != null){
                    for each (instrument in turnOverListArray) {
                        if (instrument == instrumentId){
                            return (level);
                        };
                    };
                };
            };
            return ("");
        }
        public function get turnOverList():Array{
            return (this._turnOverList);
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.enumuration.*;
    import flash.utils.*;
    import com.settrade.streaming5.message.feed.snapshot.*;
    import com.settrade.log.logger.*;

    public class InstrumentSnapshotManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:InstrumentSnapshotManager;

        protected var instrumentIdMap:Dictionary;
        protected var turnoverlistManager:TurnoverListManager;

        public function InstrumentSnapshotManager(){
            super();
            this.instrumentIdMap = new Dictionary();
            this.turnoverlistManager = TurnoverListManager.getInstance();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():InstrumentSnapshotManager{
            if (instance == null){
                instance = new (InstrumentSnapshotManager)();
            };
            return (instance);
        }

        public function onReceiveInstrumentSnapshot(snapshot:SnapshotFeedMessage):void{
            if (this.hasInstrumentSnapshotByInstrumentId(snapshot.instrumentId)){
                this.updateInstrumentSnapshot(snapshot);
            } else {
                this.addInstrumentSnapshot(snapshot);
            };
            this.calculateAdditionalField(snapshot);
        }
        protected function addInstrumentSnapshot(snapshot:SnapshotFeedMessage):void{
            this.instrumentIdMap[snapshot.instrumentId] = snapshot;
        }
        protected function updateInstrumentSnapshot(snapshot:SnapshotFeedMessage):void{
            this.replaceMissingField(snapshot);
            this.updateParameter(snapshot);
            this.addInstrumentSnapshot(snapshot);
        }
        protected function replaceMissingField(snapshot:SnapshotFeedMessage):void{
            var oldSnapshot:SnapshotFeedMessage = this.getInstrumentSnapshotByInstrumentId(snapshot.instrumentId);
            if (((!(snapshot.hasBidOfferData)) && (oldSnapshot.hasBidOfferData))){
                snapshot.hasBidOfferData = true;
                snapshot.snapshotBidOffer = oldSnapshot.snapshotBidOffer;
            };
            if (((!(snapshot.hasInitData)) && (oldSnapshot.hasInitData))){
                snapshot.hasInitData = true;
                snapshot.snapshotInit = oldSnapshot.snapshotInit;
            };
            if (((!(snapshot.hasProjectedData)) && (oldSnapshot.hasProjectedData))){
                snapshot.hasProjectedData = true;
                snapshot.snapshotProjected = oldSnapshot.snapshotProjected;
            };
            if (((!(snapshot.hasSummaryData)) && (oldSnapshot.hasSummaryData))){
                snapshot.hasSummaryData = true;
                snapshot.snapshotSummary = oldSnapshot.snapshotSummary;
            };
        }
        protected function updateParameter(snapshot:SnapshotFeedMessage):void{
            var summary:SnapshotSummary;
            var initData:SnapshotInit;
            if (((snapshot.hasSummaryData) && (snapshot.hasInitData))){
                summary = snapshot.snapshotSummary;
                initData = snapshot.snapshotInit;
                if (!isNaN(summary.lastDone)){
                    if (((isNaN(initData.high)) || ((summary.lastDone > initData.high)))){
                        initData.high = summary.lastDone;
                    };
                    if (((isNaN(initData.low)) || ((((initData.low > summary.lastDone)) || ((((initData.low == 0)) && ((summary.lastDone > 0)))))))){
                        initData.low = summary.lastDone;
                    };
                };
            };
        }
        protected function calculateAdditionalField(snapshot:SnapshotFeedMessage):void{
            var initDataInstrument:SnapshotInitInstrument;
            if (snapshot.hasSummaryData){
                if (snapshot.instrumentType.isDerivatives()){
                    SnapshotSummaryDerivatives(snapshot.snapshotSummary).basis = this.calculateBasis(snapshot);
                    if (snapshot.instrumentType.isFutures()){
                        SnapshotSummaryDerivatives(snapshot.snapshotSummary).diff = this.calculateDiff(snapshot);
                    };
                };
            };
            if (((snapshot.hasInitData) && (snapshot.hasSummaryData))){
                snapshot.snapshotSummary.percentSwing = this.calculatePercentSwing(snapshot);
                if (snapshot.instrumentType.isOptions()){
                    SnapshotSummaryOption(snapshot.snapshotSummary).inOut = this.calculateInOut(snapshot);
                };
            };
            if (((((snapshot.instrumentType.isInstrument()) && (snapshot.hasInitData))) && (this.turnoverlistManager.isTurnoverList(snapshot.instrumentId)))){
                initDataInstrument = SnapshotInitInstrument(snapshot.snapshotInit);
                initDataInstrument.isTurnOver = true;
                initDataInstrument.turnOverListLevel = this.turnoverlistManager.getTurnOverListLevel(snapshot.instrumentId);
            };
        }
        protected function calculateLastValue(snapshot:SnapshotFeedMessage):Number{
            var lastValue:Number;
            if (snapshot.hasSummaryData){
                lastValue = snapshot.snapshotSummary.lastDone;
                if ((((((((lastValue == 0)) || (isNaN(lastValue)))) && (snapshot.hasInitData))) && (snapshot.instrumentType.isInstrument()))){
                    if (snapshot.instrumentType.isEquity()){
                        lastValue = SnapshotInitEquity(snapshot.snapshotInit).previousClose;
                    } else {
                        if (snapshot.instrumentType.isDerivatives()){
                            lastValue = SnapshotInitDerivatives(snapshot.snapshotInit).previousSettle;
                        };
                    };
                };
                return (lastValue);
            };
            return (NaN);
        }
        protected function calculateInOut(snapshot:SnapshotFeedMessage):Number{
            var underlyingPrice:Number;
            var strikePrice:Number;
            var optionsType:OptionsType;
            var inOut:Number = NaN;
            if (snapshot.instrumentType.isOptions()){
                underlyingPrice = SnapshotSummaryOption(snapshot.snapshotSummary).underlyingPrice;
                strikePrice = SnapshotInitOptions(snapshot.snapshotInit).strikePrice;
                optionsType = SnapshotInitOptions(snapshot.snapshotInit).optionsType;
                if (((isNaN(underlyingPrice)) || (isNaN(strikePrice)))){
                    return (NaN);
                };
                inOut = (underlyingPrice - strikePrice);
                if (optionsType.isCall()){
                    inOut = (inOut * -1);
                };
            };
            return (inOut);
        }
        protected function calculateBasis(snapshot:SnapshotFeedMessage):Number{
            var lastDone:Number;
            var underlyingPrice:Number;
            var basis:Number = NaN;
            if (snapshot.instrumentType.isDerivatives()){
                lastDone = this.calculateLastValue(snapshot);
                underlyingPrice = SnapshotSummaryDerivatives(snapshot.snapshotSummary).underlyingPrice;
                if (((isNaN(lastDone)) || (isNaN(underlyingPrice)))){
                    return (NaN);
                };
                basis = (lastDone - underlyingPrice);
            };
            return (basis);
        }
        protected function calculateDiff(snapshot:SnapshotFeedMessage):Number{
            var lastDone:Number;
            var theoricalPrice:Number;
            var diff:Number = NaN;
            if (snapshot.instrumentType.isFutures()){
                lastDone = snapshot.snapshotSummary.lastDone;
                theoricalPrice = SnapshotSummaryDerivatives(snapshot.snapshotSummary).theoricalPrice;
                if (((isNaN(lastDone)) || (isNaN(theoricalPrice)))){
                    return (NaN);
                };
                diff = (lastDone - theoricalPrice);
            };
            return (diff);
        }
        protected function calculatePercentSwing(snapshot:SnapshotFeedMessage):Number{
            var high:Number = snapshot.snapshotInit.high;
            var low:Number = snapshot.snapshotInit.low;
            if ((((high == NaN)) || ((low == NaN)))){
                return (NaN);
            };
            var previousCloseOrSettle:* = NaN;
            if (snapshot.instrumentType.isDerivatives()){
                previousCloseOrSettle = SnapshotInitDerivatives(snapshot.snapshotInit).previousSettle;
            } else {
                if (snapshot.instrumentType.isEquity()){
                    previousCloseOrSettle = SnapshotInitEquity(snapshot.snapshotInit).previousClose;
                } else {
                    if (snapshot.instrumentType.isIndex()){
                        previousCloseOrSettle = SnapshotInitIndex(snapshot.snapshotInit).previousClose;
                    };
                };
            };
            if ((((previousCloseOrSettle == NaN)) || ((previousCloseOrSettle == 0)))){
                return (NaN);
            };
            return ((((high - low) * 100) / previousCloseOrSettle));
        }
        protected function hasInstrumentSnapshotByInstrumentId(instrumentId:String):Boolean{
            return (!((this.getInstrumentSnapshotByInstrumentId(instrumentId) == null)));
        }
        protected function getInstrumentSnapshotByInstrumentId(instrumentId:String):SnapshotFeedMessage{
            return (this.instrumentIdMap[instrumentId]);
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import flash.events.*;
    import flash.utils.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.log.logger.*;

    public class PullIntervalManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:PullIntervalManager;

        protected var _host:String;
        protected var pullTimer:Timer;
        protected var _refreshRate:Number;
        protected var registerService:RegisterService;

        public function PullIntervalManager(){
            super();
            this._refreshRate = 300000;
            this.pullTimer = new Timer(this._refreshRate, 0);
            this._host = "";
            this.registerService = RegisterService.getInstance();
        }
        public static function getInstance():PullIntervalManager{
            if (instance == null){
                instance = new (PullIntervalManager)();
            };
            return (instance);
        }

        public function connect():void{
            this.startService();
            this.pullTimer.start();
        }
        public function disconnect():void{
            this.stopService();
            this.pullTimer.stop();
        }
        override public function startService():void{
            this.pullTimer.addEventListener(TimerEvent.TIMER, this.timerEventHandler);
        }
        override public function stopService():void{
            this.pullTimer.removeEventListener(TimerEvent.TIMER, this.timerEventHandler);
        }
        private function timerEventHandler(e:TimerEvent):void{
            this.registerService.sendRegisterMessageInterval();
        }
        public function get refreshRate():Number{
            return (this._refreshRate);
        }
        public function set refreshRate(value:Number):void{
            this._refreshRate = value;
            this.pullTimer.delay = this._refreshRate;
        }
        public function get host():String{
            return (this._host);
        }
        public function set host(value:String):void{
            this._host = value;
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.enumuration.*;
    import flash.utils.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.widget.component.*;
    import com.settrade.streaming5.connection.helper.http.*;
    import com.settrade.log.logger.*;

    public class WidgetAttributeManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        private static var _instance:WidgetAttributeManager;

        protected var _attributeMap:Dictionary;

        public function WidgetAttributeManager(){
            super();
            this._attributeMap = new Dictionary();
        }
        public static function getInstance():WidgetAttributeManager{
            if (_instance == null){
                _instance = new (WidgetAttributeManager)();
            };
            return (_instance);
        }

        public function initConfigurationMap(configArray:Array):void{
            var config:Object;
            var widgetId:String;
            var width:int;
            var height:int;
            var path:String;
            var classPath:String;
            var thumbnailPath:String;
            var displayName:String;
            var canChangeAccount:Boolean;
            var canChangeSymbol:Boolean;
            var canDisplayWidget:Boolean;
            var tag:Array;
            var isHtmlComponent:Boolean;
            var htmlComponentUrl:String;
            var htmlComponentHost:System;
            var isNewWidget:Boolean;
            var attributeObject:WidgetAttribute;
            var host:String;
            this._attributeMap[WidgetAttribute.UNAVAILABLE.widgetId] = WidgetAttribute.UNAVAILABLE;
            for each (config in configArray) {
                widgetId = config.widgetId;
                width = config.width;
                height = config.height;
                path = config.path;
                classPath = config.classPath;
                thumbnailPath = config.thumbnailPath;
                displayName = config.displayName;
                canChangeAccount = config.canChangeAccount;
                canChangeSymbol = config.canChangeSymbol;
                canDisplayWidget = config.canDisplayWidget;
                tag = new Array();
                if (config.tag != null){
                    tag = config.tag.slice(0);
                };
                isHtmlComponent = config.isHtmlComponent;
                htmlComponentUrl = config.htmlComponentUrl;
                htmlComponentHost = System.lookupByValue(config.htmlComponentHost);
                if (htmlComponentHost != null){
                    host = RequestHelper.getInstance().getCurrentHost(htmlComponentHost);
                    htmlComponentUrl = ((host + "/") + htmlComponentUrl);
                };
                isNewWidget = config.isNewWidget;
                if (isNewWidget){
                    StreamingAttribute.newWidgetList.push(widgetId);
                };
                attributeObject = new WidgetAttribute(widgetId, displayName, width, height, path, classPath, thumbnailPath, canChangeAccount, canChangeSymbol, canDisplayWidget, tag, "", isHtmlComponent, htmlComponentUrl);
                this.addWidgetAttribute(attributeObject);
            };
        }
        public function addWidgetAttribute(widgetAttribute:WidgetAttribute):void{
            this._attributeMap[widgetAttribute.widgetId] = widgetAttribute;
        }
        public function getWidgetAttributeList():Array{
            var attribute:WidgetAttribute;
            var list:Array = new Array();
            for each (attribute in this._attributeMap) {
                list.push(attribute);
            };
            return (list);
        }
        public function getWidgetAttributeByWidgetId(widgetId:String):WidgetAttribute{
            if (this.hasWidgetAttributeByWidgetId(widgetId)){
                return (this._attributeMap[widgetId]);
            };
            return (WidgetAttribute.UNAVAILABLE);
        }
        public function hasWidgetAttributeByWidgetId(widgetId:String):Boolean{
            return (this._attributeMap[widgetId]);
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.message.response.oppday.*;
    import com.settrade.streaming5.message.request.oppday.*;
    import com.settrade.log.logger.*;

    public class OppDayArchiveManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:OppDayArchiveManager;

        private const MAX_COUNT = 3;

        protected var requestId:Number;
        protected var count:int;

        public function OppDayArchiveManager(){
            super();
            this.requestId = NaN;
            this.count = 0;
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():OppDayArchiveManager{
            if (instance == null){
                instance = new (OppDayArchiveManager)();
            };
            return (instance);
        }

        public function requestOppDayArchive():Number{
            if (!isNaN(this.requestId)){
                return (this.requestId);
            };
            var currentDate:Date = SynctimeService.getInstance().getTime();
            this.requestId = OppDayService.getInstance().getOppDayByQuarterAndYearFixedId(CalendarUtil.getQuarter(currentDate), currentDate.fullYear);
            this.count = 1;
            return (this.requestId);
        }
        public function screenOppDayArchive(message:OppDayArchiveResponseMessage):Boolean{
            var requestMessage:OppDayArchiveRequestMessage;
            if ((((this.count >= this.MAX_COUNT)) || ((message.oppDayList.length > 0)))){
                this.requestId = NaN;
                this.count = 0;
                return (true);
            };
            requestMessage = OppDayArchiveRequestMessage(message.requestMessage);
            this.sendNextMessage(requestMessage);
            return (false);
        }
        private function sendNextMessage(requestMesage:OppDayArchiveRequestMessage):void{
            var year:int = requestMesage.year;
            var quarter:int = requestMesage.quarter;
            quarter--;
            if (quarter < 1){
                quarter = 4;
                year--;
            };
            OppDayService.getInstance().getOppDayByQuarterAndYearFixedId(quarter, year, this.requestId);
            this.count++;
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.message.*;
    import flash.events.*;
    import com.settrade.streaming5.event.*;
    import flash.utils.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.log.logger.*;

    public class SyncTimeManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:SyncTimeManager;

        protected const SYNC_TIME_NUMBER:int = 3;
        protected const SYNC_TIME_THRESHOLD:int = 10000;
        protected const SYNC_TIME_REFRESH_TIME:int = 1000;

        protected var timeOffset:Number = 0;
        protected var lastTime:Number = 0;
        protected var syncTimeService:SynctimeService;
        protected var syncTimeTimer:Timer;
        protected var currentSyncTimeNumber:int;
        protected var currentSyncTimeRequestId:Number;
        protected var resultArray:Array;
        protected var sendTimeArray:Array;
        protected var receiveTimeArray:Array;
        protected var isSyncTime:Boolean;

        public function SyncTimeManager(){
            super();
            this.syncTimeService = SynctimeService.getInstance();
            this.syncTimeTimer = new Timer(this.SYNC_TIME_REFRESH_TIME);
            this.syncTimeTimer.addEventListener(TimerEvent.TIMER, this.onTimer);
            this.timeOffset = 0;
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():SyncTimeManager{
            if (instance == null){
                instance = new (SyncTimeManager)();
            };
            return (instance);
        }

        override public function startService():void{
            this.startSyncTime();
        }
        public function getCurrentTime():Date{
            var date:Date = new Date();
            date.setTime((date.getTime() + this.timeOffset));
            return (date);
        }
        public function startSyncTime():void{
            logger.info("Start Sync Time");
            this.syncTimeTimer.stop();
            this.addEventListener(MessageReceiveEvent.SYNC_TIME, this.onReceiveSyncTime);
            this.addEventListener(MessageFailEvent.FAIL, this.onReceiveFailEvent);
            this.resultArray = new Array();
            this.currentSyncTimeNumber = 0;
            this.sendTimeArray = new Array();
            this.receiveTimeArray = new Array();
            this.isSyncTime = true;
            this.sendSyncTime();
        }
        private function onReceiveFailEvent(e:MessageEvent):void{
            var message:IFailMessage = IFailMessage(e.message);
            if (message.requestId == this.currentSyncTimeRequestId){
                this.sendTimeArray.pop();
                this.currentSyncTimeNumber++;
                if (this.currentSyncTimeNumber < this.SYNC_TIME_NUMBER){
                    this.sendSyncTime();
                } else {
                    this.calculateSyncTime();
                    this.stopSyncTime();
                };
            };
        }
        private function onReceiveSyncTime(e:MessageEvent):void{
            var message:SyncTimeResponseMessage = SyncTimeResponseMessage(e.message);
            if (message.requestId == this.currentSyncTimeRequestId){
                this.currentSyncTimeNumber++;
                this.receiveTimeArray.push(new Date().getTime());
                this.resultArray.push(message);
                if (this.currentSyncTimeNumber < this.SYNC_TIME_NUMBER){
                    this.sendSyncTime();
                } else {
                    this.calculateSyncTime();
                    this.stopSyncTime();
                };
            };
        }
        private function calculateSyncTime():void{
            var sumTimeOffset:Number;
            var i:*;
            var clientSendTime:Number;
            var clientReceiveTime:Number;
            var serverSendTime:Number;
            var serverReceiveTime:Number;
            var calculatedTimeOffset:Number;
            if (this.resultArray.length == 0){
                this.timeOffset = 0;
            } else {
                sumTimeOffset = 0;
                i = 0;
                while (i < this.resultArray.length) {
                    clientSendTime = this.sendTimeArray[i];
                    clientReceiveTime = this.receiveTimeArray[i];
                    serverSendTime = SyncTimeResponseMessage(this.resultArray[i]).serverSendTime;
                    serverReceiveTime = SyncTimeResponseMessage(this.resultArray[i]).serverReceiveTime;
                    calculatedTimeOffset = (((serverReceiveTime - clientSendTime) + (serverSendTime - clientReceiveTime)) / 2);
                    sumTimeOffset = (sumTimeOffset + calculatedTimeOffset);
                    i++;
                };
                this.timeOffset = (sumTimeOffset / this.resultArray.length);
            };
        }
        public function stopSyncTime():void{
            this.lastTime = new Date().getTime();
            this.syncTimeTimer.start();
            this.removeEventListener(MessageReceiveEvent.SYNC_TIME, this.onReceiveSyncTime);
            this.removeEventListener(MessageFailEvent.FAIL, this.onReceiveFailEvent);
        }
        private function onTimer(e:TimerEvent):void{
            var currentTime:Number = new Date().getTime();
            if (Math.abs((currentTime - this.lastTime)) > (this.SYNC_TIME_REFRESH_TIME + this.SYNC_TIME_THRESHOLD)){
                this.startSyncTime();
            } else {
                this.lastTime = currentTime;
            };
        }
        public function sendSyncTime():void{
            this.currentSyncTimeRequestId = this.syncTimeService.syncTime();
            this.sendTimeArray.push(new Date().getTime());
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.event.*;
    import flash.utils.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.message.response.dealsummary.*;
    import com.settrade.log.logger.*;

    public class AllDealSummaryManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:AllDealSummaryManager;

        protected var accountService:AccountService;
        protected var dealEquitySummaryMap:Dictionary;
        protected var dealDerivativesSummaryMap:Dictionary;
        protected var requestMessageList:Array;
        protected var isProcess:Boolean;

        public function AllDealSummaryManager(){
            var account:Account;
            super();
            this.isProcess = false;
            this.accountService = AccountService.getInstance();
            this.dealEquitySummaryMap = new Dictionary();
            this.dealDerivativesSummaryMap = new Dictionary();
            var accountList:Array = this.accountService.getAllAccount();
            for each (account in accountList) {
                if (account.system.isEquity()){
                    this.dealEquitySummaryMap[account] = new DealSummaryByAccount(account, NaN, NaN);
                } else {
                    if (account.system.isDeriv()){
                        this.dealDerivativesSummaryMap[account] = new Array(new DealSummaryByAccountDerivatives(account, NaN, NaN, ""));
                    };
                };
            };
            this.requestMessageList = new Array();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():AllDealSummaryManager{
            if (instance == null){
                instance = new (AllDealSummaryManager)();
            };
            return (instance);
        }

        public function getAllDealSummary():void{
            var accountList:Array;
            var account:Account;
            var requestId:Number;
            if (!this.isProcess){
                this.requestMessageList = new Array();
                accountList = this.accountService.getAllAccount();
                for each (account in accountList) {
                    requestId = AccountInformationService.getInstance().getDealSummary(account);
                    if (!isNaN(requestId)){
                        this.requestMessageList.push(requestId);
                    };
                };
                this.isProcess = true;
                this.pollResponseMessage();
            };
        }
        private function sendAllDealSummaryMessage():void{
            var dealSummary:DealSummaryByAccount;
            var dealSummaryList:Array;
            var sortedDealSummary:DealSummaryByAccount;
            var dealSummaryByAccount:DealSummaryByAccount;
            var message:DealSummaryByAccountResponseMessage = new DealSummaryByAccountResponseMessage(null, Source.NO_SOURCE);
            var dealArray:Array = new Array();
            for each (dealSummary in this.dealEquitySummaryMap) {
                dealArray.push(dealSummary);
            };
            for each (dealSummaryList in this.dealDerivativesSummaryMap) {
                for each (dealSummaryByAccount in dealSummaryList) {
                    dealArray.push(dealSummaryByAccount);
                };
            };
            dealArray.sort(this.sortDealSummaryByAccount);
            for each (sortedDealSummary in dealArray) {
                message.addDealSummary(sortedDealSummary);
            };
            dispatcher.notifyReceiveMessage(message);
        }
        private function sortDealSummaryByAccount(deal1:DealSummaryByAccount, deal2:DealSummaryByAccount):int{
            var accountList:Array = this.accountService.getAllAccount();
            return ((accountList.indexOf(deal1.account) - accountList.indexOf(deal2.account)));
        }
        private function pollResponseMessage():void{
            if (this.isProcess){
                if (this.requestMessageList.length == 0){
                    this.sendAllDealSummaryMessage();
                    this.isProcess = false;
                };
            };
        }
        private function removeRequestMessageFromList(requestMessageId:Number){
            var i:int;
            if (((this.isProcess) && (!(isNaN(requestMessageId))))){
                i = 0;
                while (i < this.requestMessageList.length) {
                    if (this.requestMessageList[i] == requestMessageId){
                        this.requestMessageList.splice(i, 1);
                        break;
                    };
                    i++;
                };
            };
        }
        private function onReceiveEquityDealSummary(event:MessageEvent){
            var message:DealSummaryEquityResponseMessage = DealSummaryEquityResponseMessage(event.message);
            var account:Account = this.accountService.getAccountByAccountNumberAndSystem(message.accountNumber, System.EQUITY);
            var totalDealSummary:DealSummaryTotalEquity = message.dealSummaryTotal;
            var feeVat:Number = (totalDealSummary.totalFee + totalDealSummary.vat);
            var dealByAccount:DealSummaryByAccount = new DealSummaryByAccount(account, feeVat, totalDealSummary.net);
            this.dealEquitySummaryMap[account] = dealByAccount;
            this.removeRequestMessageFromList(message.requestId);
            this.pollResponseMessage();
        }
        private function onReceiveDerivativesDealSummary(event:MessageEvent){
            var totalDealSummary:DealSummaryDerivatives;
            var portByAccount:DealSummaryByAccountDerivatives;
            var message:DealSummaryDerivativesResponseMessage = DealSummaryDerivativesResponseMessage(event.message);
            var account:Account = this.accountService.getAccountByAccountNumberAndSystem(message.accountNumber, System.DERIV);
            var totalList:Array = new Array();
            var isAdd:Boolean;
            for each (totalDealSummary in message.dealSummaryList) {
                if (totalDealSummary.instrumentId == "_TOTAL"){
                    portByAccount = new DealSummaryByAccountDerivatives(account, totalDealSummary.amount, NaN, totalDealSummary.settlementDate);
                    totalList.push(portByAccount);
                    isAdd = true;
                };
            };
            if (!isAdd){
                totalList.push(new DealSummaryByAccountDerivatives(account, NaN, NaN, ""));
            };
            this.dealDerivativesSummaryMap[account] = totalList;
            this.removeRequestMessageFromList(message.requestId);
            this.pollResponseMessage();
        }
        private function onReceiveFail(event:MessageEvent){
            var message:IFailMessage = IFailMessage(event.message);
            this.removeRequestMessageFromList(message.requestId);
            this.pollResponseMessage();
        }
        override public function startService():void{
            addEventListener(MessageReceiveEvent.DEAL_SUMMARY_EQUITY, this.onReceiveEquityDealSummary);
            addEventListener(MessageReceiveEvent.DEAL_SUMMARY_DERIVATIVES, this.onReceiveDerivativesDealSummary);
            addEventListener(MessageFailEvent.FAIL, this.onReceiveFail);
        }
        override public function stopService():void{
            removeEventListener(MessageReceiveEvent.DEAL_SUMMARY_EQUITY, this.onReceiveEquityDealSummary);
            removeEventListener(MessageReceiveEvent.DEAL_SUMMARY_DERIVATIVES, this.onReceiveDerivativesDealSummary);
            removeEventListener(MessageFailEvent.FAIL, this.onReceiveFail);
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.message.control.notification.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.config.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.widget.component.standard.notification.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.sound.*;
    import flash.media.*;

    public class NotificationManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:NotificationManager;

        private var _notificationList:Array;
        private var _notificationBox:NotificationBox = null;

        public function NotificationManager(){
            super();
            this._notificationList = new Array();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():NotificationManager{
            if (instance == null){
                instance = new (NotificationManager)();
            };
            return (instance);
        }

        override public function startService():void{
            this.addEventListener(MessageControlEvent.NOTIFICATION, this.onReceiveNotification);
            NotificationService.getInstance().getNotificationStartup();
        }
        override public function stopService():void{
            this.removeEventListener(MessageControlEvent.NOTIFICATION, this.onReceiveNotification);
        }
        public function setNotificationBoxRef(notificationBox:NotificationBox):void{
            this._notificationBox = notificationBox;
        }
        public function getLatestNotificationString():String{
            var latestMessage:NotificationMessage;
            var notificationList:Array = this.showNotificationList;
            if (notificationList.length > 0){
                latestMessage = notificationList[(notificationList.length - 1)];
                return (latestMessage.toNotificationString());
            };
            return ("");
        }
        public function getLatestNotification():NotificationMessage{
            var latestMessage:NotificationMessage;
            var notificationList:Array = this.showNotificationList;
            if (notificationList.length > 0){
                latestMessage = notificationList[(notificationList.length - 1)];
                return (latestMessage);
            };
            return (null);
        }
        private function onReceiveNotification(e:MessageControlEvent):void{
            var message:NotificationMessage = NotificationMessage(e.message);
            switch (message.category){
                case NotificationCategory.ORDER:
                    this.onReceiveOrderAlert(OrderNotificationMessage(message));
                    break;
                case NotificationCategory.ALERT:
                    this.onReceivePriceVolumeAlert(PriceVolumeNotificationMessage(message));
                    break;
                case NotificationCategory.NEWS:
                    this.onReceiveNews(NewsNotificationMessage(message));
                    break;
                case NotificationCategory.RESEARCH:
                    this.onReceiveResearch(ResearchNotificationMessage(message));
                    break;
                case NotificationCategory.ANNOUCEMENT:
                    this.onReceiveAnnoucement(AnnoucementNotificationMessage(message));
                    break;
            };
            if (this._notificationBox != null){
                if (this.isShowNotification(message)){
                    this._notificationBox.showActiveNotification(this.getLatestNotification());
                };
            };
        }
        private function onReceiveAnnoucement(annoucementNotificationMessage:AnnoucementNotificationMessage):void{
            this._notificationList.push(annoucementNotificationMessage);
        }
        private function onReceiveResearch(researchNotificationMessage:ResearchNotificationMessage):void{
            this._notificationList.push(researchNotificationMessage);
        }
        private function onReceiveNews(newsNotificationMessage:NewsNotificationMessage):void{
            this._notificationList.push(newsNotificationMessage);
        }
        private function onReceivePriceVolumeAlert(priceVolumeNotificationMessage:PriceVolumeNotificationMessage):void{
            var config:PriceVolumeAlertConfig = PriceVolumeAlertConfig(SettingManager.getInstance().getConfig(ConfigType.PRICE_VOLUME_ALERT));
            this._notificationList.push(priceVolumeNotificationMessage);
            if (config.isEnable){
                if (config.isSound){
                    this.playSound();
                };
                if (config.isPopup){
                    AlertService.getInstance().alertBuySellNotification(priceVolumeNotificationMessage);
                };
            };
        }
        private function onReceiveOrderAlert(orderNotificationMessage:OrderNotificationMessage):void{
            var config:OrderAlertConfig = OrderAlertConfig(SettingManager.getInstance().getConfig(ConfigType.ORDER_ALERT));
            this._notificationList.push(orderNotificationMessage);
            if (config.isEnable){
                if (config.isSound){
                    this.playSound();
                };
                if (config.isPopup){
                    AlertService.getInstance().alertOrderNotification(orderNotificationMessage);
                };
            };
        }
        private function playSound():void{
            var sound:Sound = new AlertSound();
            sound.play();
        }
        public function get showNotificationList():Array{
            var message:NotificationMessage;
            var list:Array = new Array();
            for each (message in this._notificationList) {
                if (this.isShowNotification(message)){
                    list.push(message);
                };
            };
            return (list);
        }
        public function get notificationList():Array{
            return (this._notificationList);
        }
        public function get notificationBox():NotificationBox{
            return (this._notificationBox);
        }
        public function isShowNotification(message:NotificationMessage):Boolean{
            var _local2:PriceVolumeAlertConfig;
            var _local3:OrderAlertConfig;
            if ((message is FeedNotificationMessage)){
                return (this.isValidFeedNotification(FeedNotificationMessage(message)));
            };
            switch (message.category){
                case NotificationCategory.ALERT:
                    _local2 = PriceVolumeAlertConfig(SettingManager.getInstance().getConfig(ConfigType.PRICE_VOLUME_ALERT));
                    return (((_local2.isEnable) && (_local2.isNotify)));
                case NotificationCategory.ORDER:
                    _local3 = OrderAlertConfig(SettingManager.getInstance().getConfig(ConfigType.ORDER_ALERT));
                    return (((_local3.isEnable) && (_local3.isNotify)));
            };
            return (false);
        }
        public function isValidNotification(message:NotificationMessage):Boolean{
            var _local2:OrderAlertConfig;
            var _local3:PriceVolumeAlertConfig;
            if ((message is FeedNotificationMessage)){
                return (this.isValidFeedNotification(FeedNotificationMessage(message)));
            };
            switch (message.category){
                case NotificationCategory.ALERT:
                    _local2 = OrderAlertConfig(SettingManager.getInstance().getConfig(ConfigType.ORDER_ALERT));
                    return (_local2.isEnable);
                case NotificationCategory.ORDER:
                    _local3 = PriceVolumeAlertConfig(SettingManager.getInstance().getConfig(ConfigType.PRICE_VOLUME_ALERT));
                    return (_local3.isEnable);
            };
            return (false);
        }
        public function isValidFeedNotification(message:FeedNotificationMessage):Boolean{
            var config:NotifyListConfig;
            var _local3:Array;
            config = NotifyListConfig(SettingManager.getInstance().getConfig(ConfigType.NOTIFY_LIST));
            switch (message.category){
                case NotificationCategory.ANNOUCEMENT:
                    return (config.announcement);
                case NotificationCategory.NEWS:
                    _local3 = FavouriteListManager.getInstance().getFavouriteListByIndex(config.newsFavouriteListIndex);
                    if (_local3 == null){
                        _local3 = [];
                    };
                    return (((config.news) && (!((_local3.indexOf(message.instrumentId) == -1)))));
                case NotificationCategory.RESEARCH:
                    return (config.research);
            };
            return (false);
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.config.*;
    import flash.utils.*;
    import com.settrade.streaming5.config.generic.*;
    import com.settrade.log.logger.*;

    public class GenericSettingManager {

        private static var logger:Logger = new Logger(prototype.constructor);
        private static var _instance:GenericSettingManager;

        private var settingMap:Dictionary;

        public function GenericSettingManager(){
            super();
            this.settingMap = new Dictionary();
            this.initialConfig();
        }
        public static function getInstance():GenericSettingManager{
            if (_instance == null){
                _instance = new (GenericSettingManager)();
            };
            return (_instance);
        }

        public function initialConfig():void{
            this.addOrUpdateConfig(new DisplayTextConfig());
            this.addOrUpdateConfig(new VersionConfig());
            this.addOrUpdateConfig(new QualityConfig());
        }
        public function addOrUpdateConfig(config:IConfig):void{
            this.settingMap[config.type] = config;
        }
        public function getConfig(configType:ConfigType):IConfig{
            return (this.settingMap[configType]);
        }
        public function getGenericConfig():GenericConfig{
            var config:IConfig;
            var genericConfig:GenericConfig;
            var configObject:Object = new Object();
            for each (config in this.settingMap) {
                configObject[config.type.name] = config.toJsonObject();
            };
            genericConfig = new GenericConfig();
            genericConfig.jsonObject = configObject;
            return (genericConfig);
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;

    public class TitleHostManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:TitleHostManager;

        public function TitleHostManager(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():TitleHostManager{
            if (instance == null){
                instance = new (TitleHostManager)();
            };
            return (instance);
        }

        override public function startService():void{
            this.addEventListener(MessageControlEvent.FEED_STATUS, this.onReceiveFeedStatus);
        }
        override public function stopService():void{
            this.removeEventListener(MessageControlEvent.FEED_STATUS, this.onReceiveFeedStatus);
        }
        private function onReceiveFeedStatus(e:MessageControlEvent):void{
            var message:FeedStatusMessage = FeedStatusMessage(e.message);
            if (message.status.isConnect()){
                JavascriptInterface.setTitleHost(message.host);
            };
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import flash.utils.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.log.logger.*;

    public class AccountManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:AccountManager;

        protected var systemAccountMap:Dictionary;
        protected var orderPushService:OrderPushService;
        protected var _accountList:Array;
        protected var _currentAccount:Account;

        public function AccountManager(){
            super();
            this._currentAccount = null;
            this.systemAccountMap = new Dictionary();
            this.orderPushService = OrderPushService.getInstance();
            this._accountList = new Array();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():AccountManager{
            if (instance == null){
                instance = new (AccountManager)();
            };
            return (instance);
        }

        public function importAccountEquity(message:Message):void{
            var accountListEquityMessage:AccountListEquityResponseMessage;
            var accountList:Array;
            var account:Account;
            var defaultAccount:String;
            if (StreamingAttribute.userRoleEquity.isInvestor()){
                accountListEquityMessage = AccountListEquityResponseMessage(message);
                accountList = accountListEquityMessage.accountList;
                for each (account in accountList) {
                    this.addAccount(account);
                };
                if (StreamingAttribute.defaultMarket.isEquity()){
                    defaultAccount = StreamingAttribute.defaultAccount;
                    if (!this.hasAccountByAccountNumberAndSystem(defaultAccount, System.EQUITY)){
                        if (accountList.length > 0){
                            defaultAccount = accountList[0].accountNumber;
                        } else {
                            defaultAccount = "";
                        };
                    };
                    this.setCurrentAccountByAccountNumberAndSystem(defaultAccount, System.EQUITY, false);
                };
            } else {
                if (StreamingAttribute.userRoleEquity.isMarketRep()){
                    StreamingAttribute.canUseMarketMaker = AccountListMarketRepEquityResponseMessage(message).isMarketMaker;
                };
            };
        }
        public function getAndAddAccountByAccountNumberAndSystemMktRep(accountNumber:String, system:System):Account{
            var account:Account;
            if (this.hasAccountByAccountNumberAndSystem(accountNumber, system)){
                return (this.getAccountByAccountNumberAndSystem(accountNumber, system));
            };
            account = null;
            if (system.isEquity()){
                account = new AccountEquity(accountNumber, OrderType.SEOS, "", true, false, false, "");
            } else {
                account = new Account(accountNumber, system);
            };
            this.addAccount(account);
            return (account);
        }
        public function getAccountByAccountNumberAndSystem(accountNumber:String, system:System):Account{
            var accountMap:Dictionary = this.systemAccountMap[system];
            if (accountMap == null){
                return (null);
            };
            return (accountMap[accountNumber]);
        }
        public function hasAccountByAccountNumberAndSystem(accountNumber:String, system:System):Boolean{
            return (!((this.getAccountByAccountNumberAndSystem(accountNumber, system) == null)));
        }
        public function hasEquityAccount():Boolean{
            var account:Account;
            for each (account in this._accountList) {
                if (account.system.isEquity()){
                    return (true);
                };
            };
            return (false);
        }
        public function hasDerivativesAccount():Boolean{
            var account:Account;
            for each (account in this._accountList) {
                if (account.system.isDeriv()){
                    return (true);
                };
            };
            return (false);
        }
        public function addAccount(account:Account):void{
            var accountMap:Dictionary;
            if (!this.hasAccountByAccountNumberAndSystem(account.accountNumber, account.system)){
                accountMap = this.systemAccountMap[account.system];
                if (accountMap == null){
                    accountMap = new Dictionary();
                    this.systemAccountMap[account.system] = accountMap;
                };
                accountMap[account.accountNumber] = account;
                this._accountList.push(account);
            };
        }
        public function setCurrentAccountByAccountNumberAndSystem(accountNumber:String, system:System, flushFlag:Boolean=true):void{
            if (this.hasAccountByAccountNumberAndSystem(accountNumber, system)){
                if (this._currentAccount != null){
                    this.orderPushService.unregistOrderPush([this._currentAccount], this, false);
                };
                this._currentAccount = this.getAccountByAccountNumberAndSystem(accountNumber, system);
                this.orderPushService.registOrderPush([this._currentAccount], this, flushFlag);
            } else {
                logger.error("Account not Found");
            };
        }
        public function get currentAccount():Account{
            return (this._currentAccount);
        }
        public function get accountList():Array{
            var account:Account;
            var tmpAccountList:Array = new Array();
            for each (account in this._accountList) {
                tmpAccountList.push(account);
            };
            return (tmpAccountList);
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.message.feed.*;
    import flash.utils.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.log.logger.*;

    public class OrderStatusHierachyManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:OrderStatusHierachyManager;

        protected var accountDerivativesMap:Dictionary;
        protected var isRequestAccountDerivatives:Boolean;
        protected var isHierachyDerivatives:Boolean;
        protected var accountHierachyRequestId:Number;

        public function OrderStatusHierachyManager(){
            super();
            this.accountDerivativesMap = new Dictionary();
            this.isHierachyDerivatives = true;
            this.isRequestAccountDerivatives = false;
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():OrderStatusHierachyManager{
            if (instance == null){
                instance = new (OrderStatusHierachyManager)();
            };
            return (instance);
        }

        public function requestAccountHierachy():void{
            if (!this.isRequestAccountDerivatives){
                if (StreamingAttribute.userRoleDerivatives.isMarketRep()){
                    this.isRequestAccountDerivatives = true;
                    addEventListener(MessageReceiveEvent.ACCOUNT_LIST_HIERACHY_DERIAVTIVES, this.onReceiveAccountListDerivatives);
                    addEventListener(MessageFailEvent.FAIL, this.onFail);
                    this.accountHierachyRequestId = AccountListHierachyService.getInstance().getAccountListHeirachyDerivatives();
                };
            };
        }
        private function removeAllMessageListener():void{
            removeEventListener(MessageReceiveEvent.ACCOUNT_LIST_HIERACHY_DERIAVTIVES, this.onReceiveAccountListDerivatives);
            removeEventListener(MessageFailEvent.FAIL, this.onFail);
        }
        private function onReceiveAccountListDerivatives(e:MessageReceiveEvent):void{
            var accoutNumber:String;
            var message:AccountListHierachyDerivativeResponseMessage = AccountListHierachyDerivativeResponseMessage(e.message);
            if (message.requestId == this.accountHierachyRequestId){
                for each (accoutNumber in message.accountNumberList) {
                    this.accountDerivativesMap[accoutNumber] = accoutNumber;
                };
                this.isHierachyDerivatives = message.isEnableHierarchy;
                this.accountHierachyRequestId = NaN;
                this.removeAllMessageListener();
            };
        }
        private function onFail(e:MessageEvent):void{
            var message:IFailMessage = IFailMessage(e.message);
            if (message.requestId == this.accountHierachyRequestId){
                AlertService.getInstance().alert(message.message);
                this.accountHierachyRequestId = NaN;
                this.isRequestAccountDerivatives = false;
                this.removeAllMessageListener();
            };
        }
        private function hasAccountNumberDerivatives(accountNumber:String):Boolean{
            return (!((this.accountDerivativesMap[accountNumber] == null)));
        }
        public function isValidOrderDerivatives(orderStatus:OrderStatusDerivativesAllFeedMessage):Boolean{
            if (this.isHierachyDerivatives){
                return (this.hasAccountNumberDerivatives(orderStatus.accountNumber));
            };
            return (true);
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.message.feed.*;
    import flash.utils.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.register.*;
    import com.settrade.streaming5.message.response.volumebypricedetail.*;
    import com.settrade.log.logger.*;

    public class VolumeByPriceManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:VolumeByPriceManager;

        private var isStartService:Boolean;
        private var isRegist:Boolean;
        private var volumeByPriceRegister:VolumeByPriceDetailRegister;
        private var instrumentTickerRegister:InstrumentTickerRegister;
        private var volumeByPriceDetailMap:Dictionary;
        private var requestTime:Date;
        private var lastSequenceIdMap:Dictionary;

        public function VolumeByPriceManager(){
            super();
            this.isStartService = false;
            this.volumeByPriceRegister = VolumeByPriceDetailRegister.getInstance();
            this.instrumentTickerRegister = InstrumentTickerRegister.getInstance();
            this.requestTime = new Date();
            this.lastSequenceIdMap = new Dictionary();
            this.volumeByPriceDetailMap = new Dictionary();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():VolumeByPriceManager{
            if (instance == null){
                instance = new (VolumeByPriceManager)();
            };
            return (instance);
        }

        override public function startService():void{
            logger.info("Start Service");
            this.isStartService = true;
            this.requestTime = new Date();
            this.triggerRegister();
        }
        override public function stopService():void{
            logger.info("Stop Service");
            this.isStartService = false;
            this.requestTime = new Date();
            this.triggerRegister();
        }
        public function triggerRegister():void{
            logger.info("Trigger Service");
            if (((this.isStartService) && ((this.volumeByPriceRegister.getAllRegistList().length > 0)))){
                this.regist();
            } else {
                this.unregist();
            };
        }
        private function regist():void{
            logger.info("Regist");
            dispatcher.addEventListener(MessageReceiveEvent.VOLUME_BY_PRICE_DETAIL, this.onReceiveVolumeByPriceDetail);
            dispatcher.addEventListener(MessageReceiveEvent.INSTRUMENT_TICKER, this.onReceiveInstrumentTicker);
            this.registerInstrumentTicker();
        }
        private function unregist():void{
            logger.info("Unregist");
            dispatcher.removeEventListener(MessageReceiveEvent.VOLUME_BY_PRICE_DETAIL, this.onReceiveVolumeByPriceDetail);
            dispatcher.removeEventListener(MessageReceiveEvent.INSTRUMENT_TICKER, this.onReceiveInstrumentTicker);
            InstrumentTickerService.getInstance().unregistSource(this);
        }
        private function registerInstrumentTicker():void{
            InstrumentTickerService.getInstance().reRegistTicker(this.volumeByPriceRegister.getAllRegistList(), this);
            this.requestTime = SyncTimeManager.getInstance().getCurrentTime();
            this.lastSequenceIdMap = new Dictionary();
        }
        private function onReceiveVolumeByPriceDetail(e:MessageReceiveEvent):void{
            var message:VolumeByPriceDetailResponseMessage = VolumeByPriceDetailResponseMessage(e.message);
            this.volumeByPriceDetailMap[message.instrumentId] = message;
        }
        private function updateVolumeByPriceByInstrumentTicker(ticker:InstrumentTickerFeedMessage):void{
            var isFound:Boolean;
            var detail:VolumeByPriceDetail;
            var totalVolume:Number;
            var buyVolume:Number;
            var sellVolume:Number;
            var detail2:VolumeByPriceDetail;
            var volumeByPriceMessage:VolumeByPriceDetailResponseMessage = this.volumeByPriceDetailMap[ticker.instrumentId];
            if (volumeByPriceMessage != null){
                isFound = false;
                for each (detail in volumeByPriceMessage.buySellList) {
                    if (detail.price == ticker.price){
                        if (ticker.orderSide.isBuy()){
                            detail.buyVolume = (detail.buyVolume + ticker.volume);
                            detail.buyDeal = (detail.buyDeal + 1);
                        } else {
                            if (ticker.orderSide.isSell()){
                                detail.sellVolume = (detail.sellVolume + ticker.volume);
                                detail.sellDeal = (detail.sellDeal + 1);
                            };
                        };
                        detail.totalVolume = (detail.totalVolume + ticker.volume);
                        isFound = true;
                    };
                };
                if (!isFound){
                    detail2 = new VolumeByPriceDetail();
                    detail2.price = ticker.price;
                    if (ticker.orderSide.isBuy()){
                        detail2.buyVolume = ticker.volume;
                        detail2.buyDeal = 1;
                        detail2.sellVolume = 0;
                        detail2.sellDeal = 0;
                    } else {
                        if (ticker.orderSide.isSell()){
                            detail2.sellVolume = ticker.volume;
                            detail2.sellDeal = 1;
                            detail2.buyVolume = 0;
                            detail2.buyDeal = 0;
                        };
                    };
                    detail2.totalVolume = ticker.volume;
                    volumeByPriceMessage.buySellList.push(detail2);
                };
                totalVolume = 0;
                buyVolume = 0;
                sellVolume = 0;
                for each (detail in volumeByPriceMessage.buySellList) {
                    totalVolume = (totalVolume + detail.totalVolume);
                    buyVolume = (buyVolume + detail.buyVolume);
                    sellVolume = (sellVolume + detail.sellVolume);
                };
                volumeByPriceMessage.percentBuyVolume = (100 * (buyVolume / totalVolume));
                volumeByPriceMessage.percentSellVolume = (100 * (sellVolume / totalVolume));
                volumeByPriceMessage.buyVolume = buyVolume;
                volumeByPriceMessage.sellVolume = sellVolume;
                for each (detail in volumeByPriceMessage.buySellList) {
                    detail.percentTotalVolume = (100 * (detail.totalVolume / totalVolume));
                };
                volumeByPriceMessage.buySellList.sort(this.volumeByPriceDetailSortFunction);
                dispatcher.notifyReceiveMessage(volumeByPriceMessage);
            };
        }
        private function onReceiveInstrumentTicker(e:MessageReceiveEvent):void{
            var message:InstrumentTickerFeedMessage = InstrumentTickerFeedMessage(e.message);
            if (this.isValidTicker(message)){
                this.updateVolumeByPriceByInstrumentTicker(message);
                this.lastSequenceIdMap[message.instrumentId] = message.sequenceId;
            };
        }
        private function isValidTime(date:Date):Boolean{
            var currentTime:Date = SyncTimeManager.getInstance().getCurrentTime();
            var tmpDate:Date = new Date(currentTime.fullYear, currentTime.month, currentTime.date, date.hours, date.minutes, date.seconds, date.milliseconds);
            return ((tmpDate.getTime() > this.requestTime.getTime()));
        }
        private function isValidTicker(message:InstrumentTickerFeedMessage):Boolean{
            if (this.volumeByPriceRegister.getAllRegistList().indexOf(message.instrumentId) == -1){
                return (false);
            };
            if (!this.isValidTime(message.time)){
                return (false);
            };
            if (this.lastSequenceIdMap[message.instrumentId] >= message.sequenceId){
                return (false);
            };
            return (true);
        }
        private function volumeByPriceDetailSortFunction(detail1:VolumeByPriceDetail, detail2:VolumeByPriceDetail):int{
            if ((((detail1.price > detail2.price)) || (isNaN(detail1.price)))){
                return (-1);
            };
            if ((((detail1.price < detail2.price)) || (isNaN(detail2.price)))){
                return (1);
            };
            return (0);
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.event.*;
    import flash.utils.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.message.response.accountInfo.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.log.logger.*;

    public class AccountInfoManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:AccountInfoManager;

        protected var accountEquityMap:Dictionary;
        protected var accountDerivativesMap:Dictionary;
        protected var accountNameMap:Dictionary;

        public function AccountInfoManager(){
            super();
            this.accountEquityMap = new Dictionary();
            this.accountDerivativesMap = new Dictionary();
            this.accountNameMap = new Dictionary();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():AccountInfoManager{
            if (instance == null){
                instance = new (AccountInfoManager)();
            };
            return (instance);
        }

        public function addOrUpdateEquityAccountInfo(accountInfoEquity:AccountInfoEquityResponseMessage):void{
            this.accountEquityMap[accountInfoEquity.accountNumber] = accountInfoEquity;
        }
        public function addOrUpdateDerivativesAccountInfo(accountInfoDerivatives:AccountInfoDerivativesResponseMessage):void{
            this.accountDerivativesMap[accountInfoDerivatives.accountNumber] = accountInfoDerivatives;
        }
        public function addOrUpdateAccountName(accountName:AccountNameResponseMessage):void{
            this.accountNameMap[new Account(accountName.accountNumber, accountName.system)] = accountName;
        }
        public function hasAccountInfoByAccount(account:Account):Boolean{
            if (account.system.isEquity()){
                return (!((this.accountEquityMap[account.accountNumber] == null)));
            };
            if (account.system.isDeriv()){
                return (!((this.accountDerivativesMap[account.accountNumber] == null)));
            };
            return (false);
        }
        public function hasAccountName(account:Account):Boolean{
            return (!((this.accountNameMap[account] == null)));
        }
        public function getEquityAccountInfoByAccount(account:Account):AccountInfoEquityResponseMessage{
            var accountInfoEquity:AccountInfoEquityResponseMessage = this.accountEquityMap[account.accountNumber];
            if (accountInfoEquity == null){
                return (null);
            };
            return (accountInfoEquity);
        }
        public function getDerivativesAccountInfoByAccount(account:Account):AccountInfoDerivativesResponseMessage{
            var accountInfoDerivatives:AccountInfoDerivativesResponseMessage = this.accountDerivativesMap[account.accountNumber];
            if (accountInfoDerivatives == null){
                return (null);
            };
            return (accountInfoDerivatives);
        }
        public function getAccountName(account:Account):AccountNameResponseMessage{
            var accountName:AccountNameResponseMessage = this.accountNameMap[account];
            if (accountName == null){
                return (null);
            };
            return (accountName);
        }
        override public function startService():void{
            this.addEventListener(MessageReceiveEvent.ACCOUNT_INFO_EQUITY, this.onReceiveAccountInfoEquity);
            this.addEventListener(MessageReceiveEvent.ACCOUNT_INFO_DERIVATIVES, this.onReceiveAccountInfoDerivatives);
            this.addEventListener(MessageReceiveEvent.ACCOUNT_NAME, this.onReceiveAccountName);
        }
        override public function stopService():void{
            this.removeEventListener(MessageReceiveEvent.ACCOUNT_INFO_EQUITY, this.onReceiveAccountInfoEquity);
            this.removeEventListener(MessageReceiveEvent.ACCOUNT_INFO_DERIVATIVES, this.onReceiveAccountInfoDerivatives);
            this.removeEventListener(MessageReceiveEvent.ACCOUNT_NAME, this.onReceiveAccountName);
        }
        private function onReceiveAccountInfoEquity(e:MessageReceiveEvent):void{
            var accountInfoEquity:AccountInfoEquityResponseMessage = AccountInfoEquityResponseMessage(e.message);
            this.addOrUpdateEquityAccountInfo(accountInfoEquity);
        }
        private function onReceiveAccountInfoDerivatives(e:MessageReceiveEvent):void{
            var accountInfoDerivatives:AccountInfoDerivativesResponseMessage = AccountInfoDerivativesResponseMessage(e.message);
            this.addOrUpdateDerivativesAccountInfo(accountInfoDerivatives);
        }
        private function onReceiveAccountName(e:MessageReceiveEvent):void{
            var accountName:AccountNameResponseMessage = AccountNameResponseMessage(e.message);
            this.addOrUpdateAccountName(accountName);
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.widget.component.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.log.logger.*;

    public class OrderLogManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        private static var orderLogger:Logger = new Logger("OrderLog");
        protected static var instance:OrderLogManager;

        private const PREFIX_TEMPLATE:String = "[APP:@args,VERSION:@args]";
        private const WIDGET_PLACE_EQUITY_TEMPLATE:String = "[Request:@args][PlaceOrderEquity][Caller]:Caller[@args]";
        private const WIDGET_PLACE_DERIVATIVES_TEMPLATE:String = "[Request:@args][PlaceOrderDerivatives][Caller]:Caller[@args]";
        private const WIDGET_CANCEL_EQUITY_TEMPLATE:String = "[Request:@args][CancelOrderEquity][Caller]:Caller[@args]";
        private const WIDGET_CANCEL_DERIVATIVES_TEMPLATE:String = "[Request:@args][CancelOrderDerivatives][Caller]:Caller[@args]";
        private const WIDGET_CHANGE_EQUITY_TEMPLATE:String = "[Request:@args][ChangeOrderEquity][Caller]:Caller[@args]";
        private const WIDGET_CHANGE_DERIVATIVES_TEMPLATE:String = "[Request:@args][ChangeOrderDerivatives][Caller]:Caller[@args]";
        private const PLACE_ORDER_EQUITY_REQUEST_TEMPLATE:String = "[Request:@args][PlaceOrderEquity][Request]:Account[AccountNumber:@args,ClientType:@args],Order[InstrumentId:@args,nvdrFlag:@args,side:@args,volume:@args,price:@args,priceType:@args,validity:@args,icevergVolume:@args]";
        private const PLACE_ORDER_EQUITY_CONFIRM_REQUEST_TEMPLATE:String = "[Request:@args<@args][PlaceOrderEquity][Confirm]";
        private const PLACE_ORDER_EQUITY_RESPONSE_TEMPLATE:String = "[Response:@args<@args][PlaceOrderEquity][Success]:OrderNumber:@args,Message:@args";
        private const PLACE_ORDER_EQUITY_WARN_RESPONSE_TEMPLATE:String = "[Response:@args<@args][PlaceOrderEquity][Warn]:Message:@args";
        private const CANCEL_ORDER_EQUITY_REQUEST_TEMPLATE:String = "[Request:@args][CancelOrderEquity][Request]:Account[AccountNumber:@args],Order[OrderNumber:(@args)]";
        private const CANCEL_ORDER_EQUITY_RESPONSE_TEMPLATE:String = "[Response:@args<@args][CancelOrderEquity][Success]:Message:@args";
        private const CHANGE_ORDER_EQUITY_REQUEST_TEMPLATE:String = "[Request:@args][ChangeOrderEquity][Request]:Account[AccountNumber:@args],Order[OrderNumber:@args,volume:@args,price:@args]";
        private const CHANGE_ORDER_EQUITY_CONFIRM_REQUEST_TEMPLATE:String = "[Request:@args<@args][ChangeOrderEquity][Confirm]";
        private const CHANGE_ORDER_EQUITY_RESPONSE_TEMPLATE:String = "[Response:@args<@args][ChangeOrderEquity][Success]:Message:@args";
        private const CHANGE_ORDER_EQUITY_WARN_RESPONSE_TEMPLATE:String = "[Response:@args<@args][ChangeOrderEquity][Warn]:Message:@args";
        private const PLACE_ORDER_DERIVATIVES_REQUEST_TEMPLATE:String = "[Request:@args][PlaceOrderDerivatives][Request]:Account[AccountNumber:@args],Order[InstrumentId:@args,side:@args,volume:@args,price:@args,priceType:@args,position:@args,validity:@args,publishVolume:@args,StopOrder[condition:@args,instrumentId:@args,price:@args]]";
        private const PLACE_ORDER_DERIVATIVES_CONFIRM_REQUEST_TEMPLATE:String = "[Request:@args<@args][PlaceOrderDerivatives][Confirm]";
        private const PLACE_ORDER_DERIVATIVES_RESPONSE_TEMPLATE:String = "[Response:@args<@args][PlaceOrderDerivatives][Success]:OrderNumber:@args,Message:@args";
        private const PLACE_ORDER_DERIVATIVES_WARN_RESPONSE_TEMPLATE:String = "[Response:@args<@args][PlaceOrderDerivatives][Warn]:Message:@args";
        private const CANCEL_ORDER_DERIVATIVES_REQUEST_TEMPLATE:String = "[Request:@args][CancelOrderDerivatives][Request]:Account[AccountNumber:@args],Order[OrderNumber:(@args)]";
        private const CANCEL_ORDER_DERIVATIVES_RESPONSE_TEMPLATE:String = "[Response:@args<@args][CancelOrderDerivatives][Success]:Message:@args";
        private const CHANGE_ORDER_DERIVATIVES_REQUEST_TEMPLATE:String = "[Request:@args][ChangeOrderDerivatives][Request]:Account[AccountNumber:@args],Order[OrderNumber:@args,volume:@args,price:@args]";
        private const CHANGE_ORDER_DERIVATIVES_CONFIRM_REQUEST_TEMPLATE:String = "[Request:@args<@args][ChangeOrderDerivatives][Confirm]";
        private const CHANGE_ORDER_DERIVATIVES_RESPONSE_TEMPLATE:String = "[Response:@args<@args][ChangeOrderDerivatives][Success]:Message:@args";
        private const CHANGE_ORDER_DERIVATIVES_WARN_RESPONSE_TEMPLATE:String = "[Response:@args<@args][ChangeOrderDerivatives][Warn]:Message:@args";
        private const PLACE_ORDER_EQUITY_FAIL_RESPONSE_TEMPLATE:String = "[Response:@args<@args][PlaceOrderEquity][Fail]:Message:@args";
        private const PLACE_ORDER_DERIVATIVES_FAIL_RESPONSE_TEMPLATE:String = "[Response:@args<@args][PlaceOrderDerivatives][Fail]:Message:@args";
        private const CANCEL_ORDER_EQUITY_FAIL_RESPONSE_TEMPLATE:String = "[Response:@args<@args][CancelOrderEquity][Fail]:Message:@args";
        private const CANCEL_ORDER_DERIVATIVES_FAIL_RESPONSE_TEMPLATE:String = "[Response:@args<@args][CancelOrderDerivatives][Fail]:Message:@args";
        private const CHANGE_ORDER_EQUITY_FAIL_RESPONSE_TEMPLATE:String = "[Response:@args<@args][ChangeOrderEquity][Fail]:Message:@args";
        private const CHANGE_ORDER_DERIVATIVES_FAIL_RESPONSE_TEMPLATE:String = "[Response:@args<@args][ChangeOrderDerivatives][Fail]:Message:@args";

        private var placeOrderEquityArray:Array;
        private var changeOrderEquityArray:Array;
        private var cancelOrderEquityArray:Array;
        private var placeOrderDerivativesArray:Array;
        private var changeOrderDerivativesArray:Array;
        private var cancelOrderDerivativesArray:Array;

        public function OrderLogManager(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
            this.placeOrderEquityArray = new Array();
            this.changeOrderEquityArray = new Array();
            this.cancelOrderEquityArray = new Array();
            this.placeOrderDerivativesArray = new Array();
            this.changeOrderDerivativesArray = new Array();
            this.cancelOrderDerivativesArray = new Array();
        }
        public static function getInstance():OrderLogManager{
            if (instance == null){
                instance = new (OrderLogManager)();
            };
            return (instance);
        }

        override public function startService():void{
            addEventListener(MessageSendEvent.PLACE_ORDER_EQUITY, this.onRequestPlaceOrderEquity, false, int.MIN_VALUE);
            addEventListener(MessageSendEvent.PLACE_ORDER_CONFIRM_EQUITY, this.onRequestPlaceOrderConfirmEquity, false, int.MIN_VALUE);
            addEventListener(MessageReceiveEvent.PLACE_ORDER_EQUITY, this.onResponsePlaceOrderEquity, false, int.MIN_VALUE);
            addEventListener(MessageReceiveEvent.PLACE_ORDER_EQUITY_WARN, this.onResponsePlaceOrderWarnEquity, false, int.MIN_VALUE);
            addEventListener(MessageSendEvent.CANCEL_ORDER_EQUITY, this.onRequestCancelOrderEquity, false, int.MIN_VALUE);
            addEventListener(MessageReceiveEvent.CANCEL_ORDER_EQUITY, this.onResponseCancelOrderEquity, false, int.MIN_VALUE);
            addEventListener(MessageSendEvent.CHANGE_ORDER_EQUITY, this.onRequestChangeOrderEquity, false, int.MIN_VALUE);
            addEventListener(MessageSendEvent.CHANGE_ORDER_CONFIRM_DERIVATIVES, this.onRequestChangeOrderConfirmEquity, false, int.MIN_VALUE);
            addEventListener(MessageReceiveEvent.CHANGE_ORDER_EQUITY, this.onResponseChangeOrderEquity, false, int.MIN_VALUE);
            addEventListener(MessageReceiveEvent.CHANGE_ORDER_EQUITY_WARN, this.onResponseChangeOrderWarnEquity, false, int.MIN_VALUE);
            addEventListener(MessageSendEvent.PLACE_ORDER_DERIVATIVES, this.onRequestPlaceOrderDerivatives, false, int.MIN_VALUE);
            addEventListener(MessageSendEvent.PLACE_ORDER_CONFIRM_DERIVATIVES, this.onRequestPlaceOrderConfirmDerivatives, false, int.MIN_VALUE);
            addEventListener(MessageReceiveEvent.PLACE_ORDER_DERIVATIVES, this.onResponsePlaceOrderDerivatives, false, int.MIN_VALUE);
            addEventListener(MessageReceiveEvent.PLACE_ORDER_DERIVATIVES_WARN, this.onResponsePlaceOrderWarnDerivatives, false, int.MIN_VALUE);
            addEventListener(MessageSendEvent.CANCEL_ORDER_DERIVATIVES, this.onRequestCancelOrderDerivatives, false, int.MIN_VALUE);
            addEventListener(MessageReceiveEvent.CANCEL_ORDER_DERIVATIVES, this.onResponseCancelOrderDerivatives, false, int.MIN_VALUE);
            addEventListener(MessageSendEvent.CHANGE_ORDER_DERIVATIVES, this.onRequestChangeOrderDerivatives, false, int.MIN_VALUE);
            addEventListener(MessageSendEvent.CHANGE_ORDER_CONFIRM_DERIVATIVES, this.onRequestChangeOrderConfirmDerivatives, false, int.MIN_VALUE);
            addEventListener(MessageReceiveEvent.CHANGE_ORDER_DERIVATIVES, this.onResponseChangeOrderDerivatives, false, int.MIN_VALUE);
            addEventListener(MessageReceiveEvent.CHANGE_ORDER_DERIVATIVES_WARN, this.onResponseChangeOrderWarnDerivatives, false, int.MIN_VALUE);
            addEventListener(MessageFailEvent.FAIL, this.onFail, false, int.MIN_VALUE);
        }
        override public function stopService():void{
            removeEventListener(MessageSendEvent.PLACE_ORDER_EQUITY, this.onRequestPlaceOrderEquity);
            removeEventListener(MessageSendEvent.PLACE_ORDER_CONFIRM_EQUITY, this.onRequestPlaceOrderConfirmEquity);
            removeEventListener(MessageReceiveEvent.PLACE_ORDER_EQUITY, this.onResponsePlaceOrderEquity);
            removeEventListener(MessageReceiveEvent.PLACE_ORDER_EQUITY_WARN, this.onResponsePlaceOrderWarnEquity);
            removeEventListener(MessageSendEvent.CANCEL_ORDER_EQUITY, this.onRequestCancelOrderEquity);
            removeEventListener(MessageReceiveEvent.CANCEL_ORDER_EQUITY, this.onResponseCancelOrderEquity);
            removeEventListener(MessageSendEvent.CHANGE_ORDER_EQUITY, this.onRequestChangeOrderEquity);
            removeEventListener(MessageSendEvent.CHANGE_ORDER_CONFIRM_DERIVATIVES, this.onRequestChangeOrderConfirmEquity);
            removeEventListener(MessageReceiveEvent.CHANGE_ORDER_EQUITY, this.onResponseChangeOrderEquity);
            removeEventListener(MessageReceiveEvent.CHANGE_ORDER_EQUITY_WARN, this.onResponseChangeOrderWarnEquity);
            removeEventListener(MessageSendEvent.PLACE_ORDER_DERIVATIVES, this.onRequestPlaceOrderDerivatives);
            removeEventListener(MessageSendEvent.PLACE_ORDER_CONFIRM_DERIVATIVES, this.onRequestPlaceOrderConfirmDerivatives);
            removeEventListener(MessageReceiveEvent.PLACE_ORDER_DERIVATIVES, this.onResponsePlaceOrderDerivatives);
            removeEventListener(MessageReceiveEvent.PLACE_ORDER_DERIVATIVES_WARN, this.onResponsePlaceOrderWarnDerivatives);
            removeEventListener(MessageSendEvent.CANCEL_ORDER_DERIVATIVES, this.onRequestCancelOrderDerivatives);
            removeEventListener(MessageReceiveEvent.CANCEL_ORDER_DERIVATIVES, this.onResponseCancelOrderDerivatives);
            removeEventListener(MessageSendEvent.CHANGE_ORDER_DERIVATIVES, this.onRequestChangeOrderDerivatives);
            removeEventListener(MessageSendEvent.CHANGE_ORDER_CONFIRM_DERIVATIVES, this.onRequestChangeOrderConfirmDerivatives);
            removeEventListener(MessageReceiveEvent.CHANGE_ORDER_DERIVATIVES, this.onResponseChangeOrderDerivatives);
            removeEventListener(MessageReceiveEvent.CHANGE_ORDER_DERIVATIVES_WARN, this.onResponseChangeOrderWarnDerivatives);
            removeEventListener(MessageFailEvent.FAIL, this.onFail);
        }
        public function logPlaceOrderEquity(id:Number, caller):void{
            var name:String = this.getNameFromCaller(caller);
            this.writeOrderLog(StringUtil.generateStringWithArguments(this.WIDGET_PLACE_EQUITY_TEMPLATE, id, name));
        }
        public function logPlaceOrderDerivatives(id:Number, caller):void{
            var name:String = this.getNameFromCaller(caller);
            this.writeOrderLog(StringUtil.generateStringWithArguments(this.WIDGET_PLACE_DERIVATIVES_TEMPLATE, id, name));
        }
        public function logCancelOrderEquity(id:Number, caller):void{
            var name:String = this.getNameFromCaller(caller);
            this.writeOrderLog(StringUtil.generateStringWithArguments(this.WIDGET_CANCEL_EQUITY_TEMPLATE, id, name));
        }
        public function logCancelOrderDerivatives(id:Number, caller):void{
            var name:String = this.getNameFromCaller(caller);
            this.writeOrderLog(StringUtil.generateStringWithArguments(this.WIDGET_CANCEL_DERIVATIVES_TEMPLATE, id, name));
        }
        public function logChangeOrderEquity(id:Number, caller):void{
            var name:String = this.getNameFromCaller(caller);
            this.writeOrderLog(StringUtil.generateStringWithArguments(this.WIDGET_CHANGE_EQUITY_TEMPLATE, id, name));
        }
        public function logChangeOrderDerivatives(id:Number, caller):void{
            var name:String = this.getNameFromCaller(caller);
            this.writeOrderLog(StringUtil.generateStringWithArguments(this.WIDGET_CHANGE_DERIVATIVES_TEMPLATE, id, name));
        }
        private function getNameFromCaller(caller):String{
            var name:String;
            if ((caller is WidgetComponent)){
                name = WidgetComponent(caller).widgetId;
            } else {
                name = (caller + "");
            };
            return (name);
        }
        private function getPrefix():String{
            var appName:String = (StreamingAttribute.applicationName + StreamingAttribute.applicationMode.name);
            var version:String = StreamingAttribute.version;
            var prefix:String = StringUtil.generateStringWithArguments(this.PREFIX_TEMPLATE, appName, version);
            return (prefix);
        }
        private function writeOrderLog(str:String):void{
            orderLogger.info((this.getPrefix() + str));
        }
        public function onRequestPlaceOrderEquity(e:MessageSendEvent):void{
            var message:* = null;
            var id:* = null;
            var accountNumber:* = null;
            var clientType:* = null;
            var instrumentId:* = null;
            var nvdrFlag:* = null;
            var side:* = null;
            var volume:* = null;
            var price:* = null;
            var priceType:* = null;
            var validity:* = null;
            var icebergVolume:* = null;
            var log:* = null;
            var e:* = e;
            this.placeOrderEquityArray.push(e.message.id);
            try {
                message = PlaceOrderEquityRequestMessage(e.message);
                id = message.id.toString();
                accountNumber = message.accountNo;
                clientType = message.clientType;
                instrumentId = message.instrumentId;
                nvdrFlag = message.nvdrFlag.toString();
                side = (((message.orderSide == null)) ? "" : message.orderSide.name);
                volume = message.quantity.toString();
                price = message.price;
                priceType = (((message.priceType == null)) ? "" : message.priceType.name);
                validity = (((message.validity == null)) ? "" : message.validity.name);
                icebergVolume = message.icebergVolume;
                log = StringUtil.generateStringWithArguments(this.PLACE_ORDER_EQUITY_REQUEST_TEMPLATE, id, accountNumber, clientType, instrumentId, nvdrFlag, side, volume, price, priceType, validity, icebergVolume);
                this.writeOrderLog(log);
            } catch(error:Error) {
                orderLogger.error(("Error When Writing Log:PlaceOrderEquityRequest:" + error.message));
            };
        }
        private function onRequestPlaceOrderConfirmEquity(e:MessageSendEvent):void{
            var message:* = null;
            var id:* = null;
            var requestId:* = null;
            var log:* = null;
            var e:* = e;
            this.placeOrderEquityArray.push(e.message.id);
            try {
                message = PlaceOrderEquityConfirmRequestMessage(e.message);
                id = message.id.toString();
                requestId = (((message.requestMessage == null)) ? "" : message.requestMessage.id.toString());
                log = StringUtil.generateStringWithArguments(this.PLACE_ORDER_EQUITY_CONFIRM_REQUEST_TEMPLATE, id, requestId);
                this.writeOrderLog(log);
            } catch(error:Error) {
                orderLogger.error(("Error When Writing Log:PlaceOrderEquityConfirmRequest:" + error.message));
            };
        }
        private function onResponsePlaceOrderEquity(e:MessageReceiveEvent):void{
            var id:* = null;
            var requestId:* = null;
            var orderNumber:* = null;
            var alert:* = null;
            var log:* = null;
            var e:* = e;
            var message:* = PlaceOrderEquityResponseMessage(e.message);
            if (this.remove(this.placeOrderEquityArray, message.requestId)){
                try {
                    id = message.id.toString();
                    requestId = message.requestId.toString();
                    orderNumber = message.orderNo;
                    alert = message.message;
                    log = StringUtil.generateStringWithArguments(this.PLACE_ORDER_EQUITY_RESPONSE_TEMPLATE, id, requestId, orderNumber, alert);
                    this.writeOrderLog(log);
                } catch(error:Error) {
                    orderLogger.error(("Error When Writing Log:PlaceOrderEquityResponse:" + error.message));
                };
            };
        }
        private function onResponsePlaceOrderWarnEquity(e:MessageReceiveEvent):void{
            var id:* = null;
            var requestId:* = null;
            var alert:* = null;
            var log:* = null;
            var e:* = e;
            var message:* = PlaceOrderEquityWarnResponseMessage(e.message);
            if (this.remove(this.placeOrderEquityArray, message.requestId)){
                try {
                    id = message.id.toString();
                    requestId = message.requestId.toString();
                    alert = message.message;
                    log = StringUtil.generateStringWithArguments(this.PLACE_ORDER_EQUITY_WARN_RESPONSE_TEMPLATE, id, requestId, alert);
                    this.writeOrderLog(log);
                } catch(error:Error) {
                    orderLogger.error(("Error When Writing Log:PlaceOrderEquityResponse:" + error.message));
                };
            };
        }
        private function onRequestCancelOrderEquity(e:MessageSendEvent):void{
            var message:* = null;
            var id:* = null;
            var accountNumber:* = null;
            var orderNumberList:* = null;
            var order:* = null;
            var orderNumber:* = null;
            var log:* = null;
            var e:* = e;
            this.cancelOrderEquityArray.push(e.message.id);
            try {
                message = CancelOrderEquityRequestMessage(e.message);
                id = message.id.toString();
                accountNumber = message.accountNo;
                orderNumberList = new Array();
                for each (order in message.orderList) {
                    orderNumberList.push(order.orderNumber);
                };
                orderNumber = orderNumberList.join(",");
                log = StringUtil.generateStringWithArguments(this.CANCEL_ORDER_EQUITY_REQUEST_TEMPLATE, id, accountNumber, orderNumber);
                this.writeOrderLog(log);
            } catch(error:Error) {
                orderLogger.error(("Error When Writing Log:CancelOrderEquityRequest:" + error.message));
            };
        }
        private function onResponseCancelOrderEquity(e:MessageReceiveEvent):void{
            var id:* = null;
            var requestId:* = null;
            var alert:* = null;
            var log:* = null;
            var e:* = e;
            var message:* = CancelOrderEquityResponseMessage(e.message);
            if (this.remove(this.cancelOrderEquityArray, message.requestId)){
                try {
                    id = message.id.toString();
                    requestId = message.requestId.toString();
                    alert = message.message;
                    log = StringUtil.generateStringWithArguments(this.CANCEL_ORDER_EQUITY_RESPONSE_TEMPLATE, id, requestId, alert);
                    this.writeOrderLog(log);
                } catch(error:Error) {
                    orderLogger.error(("Error When Writing Log:PlaceOrderEquityResponse:" + error.message));
                };
            };
        }
        private function onRequestChangeOrderEquity(e:MessageSendEvent):void{
            var message:* = null;
            var id:* = null;
            var accountNumber:* = null;
            var orderNumber:* = null;
            var volume:* = null;
            var price:* = null;
            var log:* = null;
            var e:* = e;
            this.changeOrderEquityArray.push(e.message.id);
            try {
                message = ChangeOrderEquityRequestMessage(e.message);
                id = message.id.toString();
                accountNumber = message.accountNumber;
                orderNumber = message.orderNumber;
                volume = message.volume;
                price = message.price;
                log = StringUtil.generateStringWithArguments(this.CHANGE_ORDER_EQUITY_REQUEST_TEMPLATE, id, accountNumber, orderNumber, volume, price);
                this.writeOrderLog(log);
            } catch(error:Error) {
                orderLogger.error(("Error When Writing Log:ChangeOrderEquityRequest:" + error.message));
            };
        }
        private function onRequestChangeOrderConfirmEquity(e:MessageSendEvent):void{
            var message:* = null;
            var id:* = null;
            var requestId:* = null;
            var log:* = null;
            var e:* = e;
            this.changeOrderEquityArray.push(e.message.id);
            try {
                message = ChangeOrderEquityConfirmRequestMessage(e.message);
                id = message.id.toString();
                requestId = message.requestMessage.id.toString();
                log = StringUtil.generateStringWithArguments(this.CHANGE_ORDER_EQUITY_CONFIRM_REQUEST_TEMPLATE, id, requestId);
                this.writeOrderLog(log);
            } catch(error:Error) {
                orderLogger.error(("Error When Writing Log:ChangeOrderEquityRequest:" + error.message));
            };
        }
        private function onResponseChangeOrderEquity(e:MessageReceiveEvent):void{
            var id:* = null;
            var requestId:* = null;
            var alert:* = null;
            var log:* = null;
            var e:* = e;
            var message:* = ChangeOrderEquityResponseMessage(e.message);
            if (this.remove(this.changeOrderEquityArray, message.requestId)){
                try {
                    id = message.id.toString();
                    requestId = message.requestId.toString();
                    alert = message.message;
                    log = StringUtil.generateStringWithArguments(this.CHANGE_ORDER_EQUITY_RESPONSE_TEMPLATE, id, requestId, alert);
                    this.writeOrderLog(log);
                } catch(error:Error) {
                    orderLogger.error(("Error When Writing Log:ChangeOrderEquityResponse:" + error.message));
                };
            };
        }
        private function onResponseChangeOrderWarnEquity(e:MessageReceiveEvent):void{
            var id:* = null;
            var requestId:* = null;
            var alert:* = null;
            var log:* = null;
            var e:* = e;
            var message:* = ChangeOrderEquityWarnResponseMessage(e.message);
            if (this.remove(this.changeOrderEquityArray, message.requestId)){
                try {
                    id = message.id.toString();
                    requestId = message.requestId.toString();
                    alert = message.message;
                    log = StringUtil.generateStringWithArguments(this.CHANGE_ORDER_EQUITY_WARN_RESPONSE_TEMPLATE, id, requestId, alert);
                    this.writeOrderLog(log);
                } catch(error:Error) {
                    orderLogger.error(("Error When Writing Log:ChangeOrderEquityResponse:" + error.message));
                };
            };
        }
        public function onRequestPlaceOrderDerivatives(e:MessageSendEvent):void{
            var message:* = null;
            var id:* = null;
            var accountNumber:* = null;
            var instrumentId:* = null;
            var side:* = null;
            var volume:* = null;
            var price:* = null;
            var priceType:* = null;
            var position:* = null;
            var validity:* = null;
            var publishVolume:* = null;
            var stopCondition:* = null;
            var stopInstrument:* = null;
            var stopPrice:* = null;
            var log:* = null;
            var e:* = e;
            this.placeOrderDerivativesArray.push(e.message.id);
            try {
                message = PlaceOrderDerivativesRequestMessage(e.message);
                id = message.id.toString();
                accountNumber = message.accountNumber;
                instrumentId = message.instrumentId;
                side = (((message.orderSide == null)) ? "" : message.orderSide.name);
                volume = message.volume;
                price = message.price;
                priceType = (((message.priceType == null)) ? "" : message.priceType.name);
                position = (((message.position == null)) ? "" : message.position.name);
                validity = (((message.validityType == null)) ? "" : message.validityType.name);
                publishVolume = message.publishVolume;
                stopCondition = (((message.stopCondition == null)) ? "" : message.stopCondition.name);
                stopInstrument = message.stopInstrumentId;
                stopPrice = message.stopPrice;
                log = StringUtil.generateStringWithArguments(this.PLACE_ORDER_DERIVATIVES_REQUEST_TEMPLATE, id, accountNumber, instrumentId, side, volume, price, priceType, position, validity, publishVolume, stopCondition, stopInstrument, stopPrice);
                this.writeOrderLog(log);
            } catch(error:Error) {
                orderLogger.error(("Error When Writing Log:PlaceOrderDerivativesRequest:" + error.message));
            };
        }
        private function onRequestPlaceOrderConfirmDerivatives(e:MessageSendEvent):void{
            var message:* = null;
            var id:* = null;
            var requestId:* = null;
            var log:* = null;
            var e:* = e;
            this.placeOrderDerivativesArray.push(e.message.id);
            try {
                message = PlaceOrderDerivativesConfirmRequestMessage(e.message);
                id = message.id.toString();
                requestId = (((message.requestMessage == null)) ? "" : message.requestMessage.id.toString());
                log = StringUtil.generateStringWithArguments(this.PLACE_ORDER_DERIVATIVES_CONFIRM_REQUEST_TEMPLATE, id, requestId);
                this.writeOrderLog(log);
            } catch(error:Error) {
                orderLogger.error(("Error When Writing Log:PlaceOrderDerivativesConfirmRequest:" + error.message));
            };
        }
        private function onResponsePlaceOrderDerivatives(e:MessageReceiveEvent):void{
            var id:* = null;
            var requestId:* = null;
            var orderNumber:* = null;
            var alert:* = null;
            var log:* = null;
            var e:* = e;
            var message:* = PlaceOrderDerivativesResponseMessage(e.message);
            if (this.remove(this.placeOrderDerivativesArray, message.requestId)){
                try {
                    id = message.id.toString();
                    requestId = message.requestId.toString();
                    orderNumber = message.orderNo;
                    alert = message.message;
                    log = StringUtil.generateStringWithArguments(this.PLACE_ORDER_DERIVATIVES_RESPONSE_TEMPLATE, id, requestId, orderNumber, alert);
                    this.writeOrderLog(log);
                } catch(error:Error) {
                    orderLogger.error(("Error When Writing Log:PlaceOrderDerivativesResponse:" + error.message));
                };
            };
        }
        private function onResponsePlaceOrderWarnDerivatives(e:MessageReceiveEvent):void{
            var id:* = null;
            var requestId:* = null;
            var alert:* = null;
            var log:* = null;
            var e:* = e;
            var message:* = PlaceOrderDerivativesWarnResponseMessage(e.message);
            if (this.remove(this.placeOrderDerivativesArray, message.requestId)){
                try {
                    id = message.id.toString();
                    requestId = message.requestId.toString();
                    alert = message.message;
                    log = StringUtil.generateStringWithArguments(this.PLACE_ORDER_DERIVATIVES_WARN_RESPONSE_TEMPLATE, id, requestId, alert);
                    this.writeOrderLog(log);
                } catch(error:Error) {
                    orderLogger.error(("Error When Writing Log:PlaceOrderDerivativesResponse:" + error.message));
                };
            };
        }
        private function onRequestCancelOrderDerivatives(e:MessageSendEvent):void{
            var message:* = null;
            var id:* = null;
            var accountNumber:* = null;
            var orderNumberList:* = null;
            var order:* = null;
            var orderNumber:* = null;
            var log:* = null;
            var e:* = e;
            this.cancelOrderDerivativesArray.push(e.message.id);
            try {
                message = CancelOrderDerivativesRequestMessage(e.message);
                id = message.id.toString();
                accountNumber = message.accountNumber;
                orderNumberList = new Array();
                for each (order in message.orderList) {
                    orderNumberList.push(order.orderNumber);
                };
                orderNumber = orderNumberList.join(",");
                log = StringUtil.generateStringWithArguments(this.CANCEL_ORDER_DERIVATIVES_REQUEST_TEMPLATE, id, accountNumber, orderNumber);
                this.writeOrderLog(log);
            } catch(error:Error) {
                orderLogger.error(("Error When Writing Log:CancelOrderDerivativesRequest:" + error.message));
            };
        }
        private function onResponseCancelOrderDerivatives(e:MessageReceiveEvent):void{
            var id:* = null;
            var requestId:* = null;
            var alert:* = null;
            var log:* = null;
            var e:* = e;
            var message:* = CancelOrderDerivativesResponseMessage(e.message);
            if (this.remove(this.cancelOrderDerivativesArray, message.requestId)){
                try {
                    id = message.id.toString();
                    requestId = message.requestId.toString();
                    alert = message.message;
                    log = StringUtil.generateStringWithArguments(this.CANCEL_ORDER_DERIVATIVES_RESPONSE_TEMPLATE, id, requestId, alert);
                    this.writeOrderLog(log);
                } catch(error:Error) {
                    orderLogger.error(("Error When Writing Log:PlaceOrderDerivativesResponse:" + error.message));
                };
            };
        }
        private function onRequestChangeOrderDerivatives(e:MessageSendEvent):void{
            var message:* = null;
            var id:* = null;
            var accountNumber:* = null;
            var orderNumber:* = null;
            var volume:* = null;
            var price:* = null;
            var log:* = null;
            var e:* = e;
            this.changeOrderDerivativesArray.push(e.message.id);
            try {
                message = ChangeOrderDerivativesRequestMessage(e.message);
                id = message.id.toString();
                accountNumber = message.accountNumber;
                orderNumber = message.orderNumber;
                volume = message.volume;
                price = message.price;
                log = StringUtil.generateStringWithArguments(this.CHANGE_ORDER_DERIVATIVES_REQUEST_TEMPLATE, id, accountNumber, orderNumber, volume, price);
                this.writeOrderLog(log);
            } catch(error:Error) {
                orderLogger.error(("Error When Writing Log:ChangeOrderDerivativesRequest:" + error.message));
            };
        }
        private function onRequestChangeOrderConfirmDerivatives(e:MessageSendEvent):void{
            var message:* = null;
            var id:* = null;
            var requestId:* = null;
            var log:* = null;
            var e:* = e;
            this.changeOrderDerivativesArray.push(e.message.id);
            try {
                message = ChangeOrderDerivativesConfirmRequestMessage(e.message);
                id = message.id.toString();
                requestId = message.requestMessage.id.toString();
                log = StringUtil.generateStringWithArguments(this.CHANGE_ORDER_DERIVATIVES_CONFIRM_REQUEST_TEMPLATE, id, requestId);
                this.writeOrderLog(log);
            } catch(error:Error) {
                orderLogger.error(("Error When Writing Log:ChangeOrderDerivativesRequest:" + error.message));
            };
        }
        private function onResponseChangeOrderDerivatives(e:MessageReceiveEvent):void{
            var id:* = null;
            var requestId:* = null;
            var alert:* = null;
            var log:* = null;
            var e:* = e;
            var message:* = ChangeOrderDerivativesResponseMessage(e.message);
            if (this.remove(this.changeOrderDerivativesArray, message.requestId)){
                try {
                    id = message.id.toString();
                    requestId = message.requestId.toString();
                    alert = message.message;
                    log = StringUtil.generateStringWithArguments(this.CHANGE_ORDER_DERIVATIVES_RESPONSE_TEMPLATE, id, requestId, alert);
                    this.writeOrderLog(log);
                } catch(error:Error) {
                    orderLogger.error(("Error When Writing Log:ChangeOrderDerivativesResponse:" + error.message));
                };
            };
        }
        private function onResponseChangeOrderWarnDerivatives(e:MessageReceiveEvent):void{
            var id:* = null;
            var requestId:* = null;
            var alert:* = null;
            var log:* = null;
            var e:* = e;
            var message:* = ChangeOrderDerivativesWarnResponseMessage(e.message);
            if (this.remove(this.changeOrderDerivativesArray, message.requestId)){
                try {
                    id = message.id.toString();
                    requestId = message.requestId.toString();
                    alert = message.message;
                    log = StringUtil.generateStringWithArguments(this.CHANGE_ORDER_DERIVATIVES_WARN_RESPONSE_TEMPLATE, id, requestId, alert);
                    this.writeOrderLog(log);
                } catch(error:Error) {
                    orderLogger.error(("Error When Writing Log:ChangeOrderDerivativesResponse:" + error.message));
                };
            };
        }
        private function onFail(e:MessageEvent):void{
            var message:IFailMessage = IFailMessage(e.message);
            var id:String = (((message is Message)) ? Message(message).id.toString() : "");
            var log:String = "";
            if (this.remove(this.placeOrderEquityArray, message.requestId)){
                log = StringUtil.generateStringWithArguments(this.PLACE_ORDER_EQUITY_FAIL_RESPONSE_TEMPLATE, id, message.requestId.toString(), message.message);
                this.writeOrderLog(log);
            } else {
                if (this.remove(this.placeOrderDerivativesArray, message.requestId)){
                    log = StringUtil.generateStringWithArguments(this.PLACE_ORDER_DERIVATIVES_FAIL_RESPONSE_TEMPLATE, id, message.requestId.toString(), message.message);
                    this.writeOrderLog(log);
                } else {
                    if (this.remove(this.cancelOrderEquityArray, message.requestId)){
                        log = StringUtil.generateStringWithArguments(this.CANCEL_ORDER_EQUITY_FAIL_RESPONSE_TEMPLATE, id, message.requestId.toString(), message.message);
                        this.writeOrderLog(log);
                    } else {
                        if (this.remove(this.cancelOrderDerivativesArray, message.requestId)){
                            log = StringUtil.generateStringWithArguments(this.CANCEL_ORDER_DERIVATIVES_FAIL_RESPONSE_TEMPLATE, id, message.requestId.toString(), message.message);
                            this.writeOrderLog(log);
                        } else {
                            if (this.remove(this.changeOrderEquityArray, message.requestId)){
                                log = StringUtil.generateStringWithArguments(this.CHANGE_ORDER_EQUITY_FAIL_RESPONSE_TEMPLATE, id, message.requestId.toString(), message.message);
                                this.writeOrderLog(log);
                            } else {
                                if (this.remove(this.changeOrderDerivativesArray, message.requestId)){
                                    log = StringUtil.generateStringWithArguments(this.CHANGE_ORDER_DERIVATIVES_FAIL_RESPONSE_TEMPLATE, id, message.requestId.toString(), message.message);
                                    this.writeOrderLog(log);
                                };
                            };
                        };
                    };
                };
            };
        }
        private function remove(array:Array, data:Number):Boolean{
            var index:int = array.indexOf(data);
            if (index == -1){
                return (false);
            };
            array.splice(index, 1);
            return (true);
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.manager {
    import flash.utils.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.log.logger.*;

    public class InstrumentListNameManager extends Manager {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:InstrumentListNameManager;

        protected var _favoriteList:Array;
        protected var _activeList:Array;
        protected var _securityList:Array;
        protected var _tfexActiveList:Array;
        protected var _allUnderlyingsList:Array;
        protected var _optionsActiveList:Array;
        protected var _allSymbolList:Array;
        protected var _marketList:Array;
        protected var _stockFuturesUnderlyingList:Array;
        protected var _twoLevelListNameArray:Array;
        protected var _brokerFavouriteName:InstrumentListName;
        protected var _twoLevelListDictionary:Dictionary;

        public function InstrumentListNameManager(){
            super();
            this._favoriteList = new Array();
            this._activeList = new Array();
            this._securityList = new Array();
            this._tfexActiveList = new Array();
            this._allUnderlyingsList = new Array();
            this._optionsActiveList = new Array();
            this._allSymbolList = new Array();
            this._marketList = new Array();
            this._stockFuturesUnderlyingList = new Array();
            this._twoLevelListNameArray = new Array();
            this._twoLevelListDictionary = new Dictionary();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():InstrumentListNameManager{
            if (instance == null){
                instance = new (InstrumentListNameManager)();
            };
            return (instance);
        }

        public function get favoriteList():Array{
            return (this._favoriteList);
        }
        public function set favoriteList(value:Array):void{
            this._favoriteList = value;
        }
        public function get activeList():Array{
            return (this._activeList);
        }
        public function set activeList(value:Array):void{
            this._activeList = value;
        }
        public function get securityList():Array{
            return (this._securityList);
        }
        public function set securityList(value:Array):void{
            this._securityList = value;
        }
        public function get tfexActiveList():Array{
            return (this._tfexActiveList);
        }
        public function set tfexActiveList(value:Array):void{
            this._tfexActiveList = value;
        }
        public function get allUnderlyingsList():Array{
            return (this._allUnderlyingsList);
        }
        public function set allUnderlyingsList(value:Array):void{
            this._allUnderlyingsList = value;
        }
        public function get optionsActiveList():Array{
            return (this._optionsActiveList);
        }
        public function set optionsActiveList(value:Array):void{
            this._optionsActiveList = value;
        }
        public function get allSymbolList():Array{
            return (this._allSymbolList);
        }
        public function set allSymbolList(value:Array):void{
            this._allSymbolList = value;
        }
        public function get twoLevelListNameArray():Array{
            return (this._twoLevelListNameArray);
        }
        public function set twoLevelListNameArray(value:Array):void{
            this._twoLevelListNameArray = value;
        }
        public function get twoLevelListDictionary():Dictionary{
            return (this._twoLevelListDictionary);
        }
        public function set twoLevelListDictionary(value:Dictionary):void{
            this._twoLevelListDictionary = value;
        }
        public function get marketList():Array{
            return (this._marketList);
        }
        public function set marketList(value:Array):void{
            this._marketList = value;
        }
        public function get brokerFavouriteName():InstrumentListName{
            return (this._brokerFavouriteName);
        }
        public function set brokerFavouriteName(value:InstrumentListName):void{
            this._brokerFavouriteName = value;
        }
        public function get stockFuturesUnderlyingList():Array{
            return (this._stockFuturesUnderlyingList);
        }
        public function set stockFuturesUnderlyingList(value:Array):void{
            this._stockFuturesUnderlyingList = value;
        }

    }
}//package com.settrade.streaming5.manager 
﻿package com.settrade.streaming5.datacomponent.handler {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.message.feed.info.*;
    import com.settrade.streaming5.error.*;

    public class InstrumentInfoHandler extends DefaultMessageHandler {

        protected var instrumentInfoManager:InstrumentInfoManager;

        public function InstrumentInfoHandler(){
            super();
            this.instrumentInfoManager = InstrumentInfoManager.getInstance();
        }
        override public function handlingMessage(message:Message):void{
            if (!message.type.isInfoFeed()){
                throw (new InvalidMessageTypeError(message));
            };
            this.instrumentInfoManager.onReceiveInstrumentInfo(InfoFeedMessage(message));
            super.handlingMessage(message);
        }

    }
}//package com.settrade.streaming5.datacomponent.handler 
﻿package com.settrade.streaming5.datacomponent.handler {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.feed.*;
    import com.settrade.streaming5.manager.*;

    public class OrderStatusHierachyHandler extends DefaultMessageHandler {

        protected var orderStatusHierachyManger:OrderStatusHierachyManager;

        public function OrderStatusHierachyHandler(){
            super();
            this.orderStatusHierachyManger = OrderStatusHierachyManager.getInstance();
        }
        override public function handlingMessage(message:Message):void{
            if ((message is OrderStatusDerivativesAllFeedMessage)){
                if (this.orderStatusHierachyManger.isValidOrderDerivatives(OrderStatusDerivativesAllFeedMessage(message))){
                    super.handlingMessage(message);
                };
            };
        }

    }
}//package com.settrade.streaming5.datacomponent.handler 
﻿package com.settrade.streaming5.datacomponent.handler {
    import com.settrade.streaming5.message.*;
    import flash.events.*;
    import com.settrade.streaming5.message.feed.*;
    import com.settrade.streaming5.manager.*;
    import flash.utils.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;

    public class PullTickerHandler extends TickerHandler {

        public static const BREAK_INTERVAL:int = 500;

        private static var logger:Logger = new Logger(prototype.constructor);

        protected var messageQueue:Array;
        private var timer:Timer;
        private var breakTimer:Timer;
        private var chunk:int;

        public function PullTickerHandler(){
            super();
            this.messageQueue = new Array();
            this.timer = new Timer(1000);
            this.timer.addEventListener(TimerEvent.TIMER, this.onTimer);
        }
        private function onTimer(e:TimerEvent):void{
            this.sendLatestMessage();
            if (this.messageQueue.length == 0){
                this.timer.stop();
            };
        }
        private function sendLatestMessage():void{
            var marketTickerFeedMessage:MarketTickerFeedMessage;
            var message:MultipleMarketTickerFeedMessage = this.messageQueue.shift();
            if (message != null){
                for each (marketTickerFeedMessage in message.messageList) {
                    super.handlingMessage(marketTickerFeedMessage);
                };
            };
        }
        private function sendChunckMessage():void{
            var i:* = 0;
            while (i < this.chunk) {
                this.sendLatestMessage();
                i++;
            };
        }
        override public function handlingMessage(message:Message):void{
            var uniqueMessage:MultipleMarketTickerFeedMessage;
            var marketTickerFeedMessage:MarketTickerFeedMessage;
            if (!message.type.isMultipleTickerFeed()){
                throw (new InvalidMessageTypeError(message));
            };
            var multipleTickerFeedMessage:MultipleMarketTickerFeedMessage = MultipleMarketTickerFeedMessage(message);
            var instrumentId:String;
            for each (marketTickerFeedMessage in multipleTickerFeedMessage.messageList) {
                if (instrumentId != marketTickerFeedMessage.instrumentId){
                    uniqueMessage = new MultipleMarketTickerFeedMessage();
                    this.messageQueue.push(uniqueMessage);
                    uniqueMessage.add(marketTickerFeedMessage);
                    instrumentId = marketTickerFeedMessage.instrumentId;
                } else {
                    uniqueMessage.add(marketTickerFeedMessage);
                };
            };
            this.activateTimer();
        }
        private function activateTimer():void{
            this.timer.stop();
            var interval:Number = (PullManager.getInstance().refreshRate / this.messageQueue.length);
            if (interval < BREAK_INTERVAL){
                this.timer.delay = BREAK_INTERVAL;
                this.chunk = Math.ceil(((this.messageQueue.length * BREAK_INTERVAL) / PullManager.getInstance().refreshRate));
                this.timer.addEventListener(TimerEvent.TIMER, this.onBreakTimer);
            } else {
                this.timer.delay = interval;
                this.timer.addEventListener(TimerEvent.TIMER, this.onTimer);
            };
            this.timer.repeatCount = 0;
            this.sendLatestMessage();
            this.timer.start();
        }
        private function onBreakTimer(e:TimerEvent):void{
            this.sendChunckMessage();
        }

    }
}//package com.settrade.streaming5.datacomponent.handler 
﻿package com.settrade.streaming5.datacomponent.handler {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.message.feed.snapshot.*;
    import com.settrade.streaming5.error.*;

    public class InstrumentSnapshotHandler extends DefaultMessageHandler {

        protected var instrumentSnapshotManager:InstrumentSnapshotManager;

        public function InstrumentSnapshotHandler(){
            super();
            this.instrumentSnapshotManager = InstrumentSnapshotManager.getInstance();
        }
        override public function handlingMessage(message:Message):void{
            if (!message.type.isSnapshotFeed()){
                throw (new InvalidMessageTypeError(message));
            };
            this.instrumentSnapshotManager.onReceiveInstrumentSnapshot(SnapshotFeedMessage(message));
            super.handlingMessage(message);
        }

    }
}//package com.settrade.streaming5.datacomponent.handler 
﻿package com.settrade.streaming5.datacomponent.handler {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.feed.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;

    public class TickerHandler extends DefaultMessageHandler {

        private static var logger:Logger = new Logger(prototype.constructor);

        var tickerManager:MarketTickerManager;
        var lastMessageId:Number;

        public function TickerHandler(){
            super();
            this.tickerManager = MarketTickerManager.getInstance();
            this.lastMessageId = NaN;
        }
        override public function handlingMessage(message:Message):void{
            if (!message.type.isMarketTickerFeed()){
                throw (new InvalidMessageTypeError(message));
            };
            var tickerFeedMessage:MarketTickerFeedMessage = MarketTickerFeedMessage(message);
            if (StreamingAttribute.isGoldOnly){
                if (((tickerFeedMessage.instrumentType.isDerivatives()) && (!(DerivativesTickerSubType(tickerFeedMessage.tickerSubType).isMetal())))){
                    return;
                };
            };
            if (StreamingAttribute.isSubBroker){
                if (((tickerFeedMessage.instrumentType.isEquity()) && (!(EquityTickerSubType(tickerFeedMessage.tickerSubType).isETF())))){
                    return;
                };
            };
            if (!this.isValidTickerSequence(tickerFeedMessage)){
                return;
            };
            this.lastMessageId = tickerFeedMessage.firstMessageId;
            super.handlingMessage(message);
        }
        private function isValidTickerSequence(tickerFeedMessage:MarketTickerFeedMessage):Boolean{
            var sequenceId:int;
            if (tickerFeedMessage.instrumentType.isEquity()){
                sequenceId = this.tickerManager.getSequenceId(System.EQUITY, tickerFeedMessage.isSum);
            } else {
                if (tickerFeedMessage.instrumentType.isDerivatives()){
                    sequenceId = this.tickerManager.getSequenceId(System.DERIV, tickerFeedMessage.isSum);
                };
            };
            return ((((sequenceId < tickerFeedMessage.sequenceId)) || ((this.lastMessageId == tickerFeedMessage.firstMessageId))));
        }

    }
}//package com.settrade.streaming5.datacomponent.handler 
﻿package com.settrade.streaming5.datacomponent.handler {
    import com.settrade.streaming5.message.*;

    public interface IMessageHandler {

        function handlingMessage(_arg1:Message):void;

    }
}//package com.settrade.streaming5.datacomponent.handler 
﻿package com.settrade.streaming5.datacomponent.handler {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import flash.utils.*;

    public class MessageHandlerFactory {

        protected static var instance:MessageHandlerFactory;

        protected var handlerMap:Dictionary;
        protected var rawMessageHandler:RawMessageHandler;
        protected var stubResponseMessageHandler:StubResponseMessageHandler;
        protected var defaultMessageHandler:DefaultMessageHandler;
        protected var multipleMessageHandler:MultipleMessageHandler;
        protected var optionsRecommendHandler:OptionsRecommendHandler;
        protected var instrumentInfoHandler:InstrumentInfoHandler;
        protected var instrumentSnapshotHandler:InstrumentSnapshotHandler;
        protected var oppDayArchiveHandler:OppDayArchiveHandler;
        protected var pullTickerHandler:PullTickerHandler;
        protected var tickerHandler:TickerHandler;
        protected var orderStatusHierachyHandler:OrderStatusHierachyHandler;
        protected var DEFAULT_HANDLER:IMessageHandler;

        public function MessageHandlerFactory(){
            super();
            this.rawMessageHandler = new RawMessageHandler();
            this.stubResponseMessageHandler = new StubResponseMessageHandler();
            this.defaultMessageHandler = new DefaultMessageHandler();
            this.multipleMessageHandler = new MultipleMessageHandler();
            this.optionsRecommendHandler = new OptionsRecommendHandler();
            this.instrumentInfoHandler = new InstrumentInfoHandler();
            this.instrumentSnapshotHandler = new InstrumentSnapshotHandler();
            this.oppDayArchiveHandler = new OppDayArchiveHandler();
            this.pullTickerHandler = new PullTickerHandler();
            this.tickerHandler = new TickerHandler();
            this.orderStatusHierachyHandler = new OrderStatusHierachyHandler();
            this.initMap();
        }
        public static function getInstance():MessageHandlerFactory{
            if (instance == null){
                instance = new (MessageHandlerFactory)();
            };
            return (instance);
        }

        private function initMap():void{
            this.handlerMap = new Dictionary();
            this.handlerMap[MessageType.STUB_RAW_FEED] = this.rawMessageHandler;
            this.handlerMap[MessageType.STUB_RAW_RESPONSE] = this.rawMessageHandler;
            this.handlerMap[MessageType.BINARY_FEED] = this.rawMessageHandler;
            this.handlerMap[MessageType.BINARY_RESPONSE] = this.rawMessageHandler;
            this.handlerMap[MessageType.STRING_FEED] = this.rawMessageHandler;
            this.handlerMap[MessageType.STRING_RESPONSE] = this.rawMessageHandler;
            this.handlerMap[MessageType.OBJECT_RESPONSE] = this.rawMessageHandler;
            this.handlerMap[MessageType.MULTIPLE_FEED] = this.multipleMessageHandler;
            this.handlerMap[MessageType.MULTIPLE_RESPONSE] = this.multipleMessageHandler;
            this.handlerMap[MessageType.STUB_RESPONSE] = this.stubResponseMessageHandler;
            this.handlerMap[MessageType.MULTIPLE_RAW_FEED] = this.rawMessageHandler;
            this.handlerMap[MessageType.MULTIPLE_RAW_RESPONSE] = this.multipleMessageHandler;
            this.handlerMap[MessageType.MULTIPLE_MARKET_TICKER_FEED] = this.pullTickerHandler;
            this.handlerMap[MessageType.MULTIPLE] = this.multipleMessageHandler;
            this.handlerMap[MessageType.OPTIONS_RECOMMEND_RESPONSE] = this.optionsRecommendHandler;
            this.handlerMap[MessageType.INFO_FEED] = this.instrumentInfoHandler;
            this.handlerMap[MessageType.SNAPSHOT_FEED] = this.instrumentSnapshotHandler;
            this.handlerMap[MessageType.OPPDAY_ARCHIVE_RESPONSE] = this.oppDayArchiveHandler;
            this.handlerMap[MessageType.MARKET_TICKER_FEED] = this.tickerHandler;
            this.handlerMap[MessageType.ORDER_STATUS_DERIVATIVES_ALL_FEED] = this.orderStatusHierachyHandler;
        }
        public function addCustomizeHandler(messageType:MessageType, handler:IMessageHandler):void{
            this.handlerMap[messageType] = handler;
        }
        public function getMessageHandler(message:Message):IMessageHandler{
            var handler:IMessageHandler = this.handlerMap[message.type];
            if (handler != null){
                return (handler);
            };
            return (this.defaultMessageHandler);
        }

    }
}//package com.settrade.streaming5.datacomponent.handler 
﻿package com.settrade.streaming5.datacomponent.handler {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.error.*;

    public class StubResponseMessageHandler extends DefaultMessageHandler {

        public function StubResponseMessageHandler(){
            super();
        }
        override public function handlingMessage(message:Message):void{
            if (!message.type.isStubResponse()){
                throw (new InvalidMessageTypeError(message));
            };
            var stubResponseMessage:StubResponseMessage = StubResponseMessage(message);
            stubResponseMessage.data = (stubResponseMessage.data + " Modify by Handler");
            super.handlingMessage(stubResponseMessage);
        }

    }
}//package com.settrade.streaming5.datacomponent.handler 
﻿package com.settrade.streaming5.datacomponent.handler {
    import com.settrade.streaming5.message.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.datacomponent.*;
    import com.settrade.streaming5.error.*;

    public class MultipleMessageHandler implements IMessageHandler {

        var dataComponent:DataComponent;

        public function MultipleMessageHandler(){
            super();
            this.dataComponent = DataComponent.getInstance();
        }
        public function handlingMessage(message:Message):void{
            var curMessage:Message;
            if ((!(message) is IMultipleMessage)){
                throw (new InvalidMessageTypeError(message));
            };
            var multipleMessage:IMultipleMessage = IMultipleMessage(message);
            var messageList:Vector.<Message> = multipleMessage.messageList;
            for each (curMessage in messageList) {
                this.dataComponent.receiveMessage(curMessage);
            };
        }

    }
}//package com.settrade.streaming5.datacomponent.handler 
﻿package com.settrade.streaming5.datacomponent.handler {
    import com.settrade.streaming5.message.*;
    import com.settrade.optionswizard.manager.*;
    import com.settrade.optionswizard.message.response.*;
    import com.settrade.streaming5.dispatcher.*;

    public class OptionsRecommendHandler implements IMessageHandler {

        protected var optionsWizardManager:OptionsWizardManager;
        protected var dispatcher:MessageDispatcher;

        public function OptionsRecommendHandler(){
            super();
            this.dispatcher = MessageDispatcher.getInstance();
            this.optionsWizardManager = OptionsWizardManager.getInstance();
        }
        public function handlingMessage(message:Message):void{
            var optionsRecommendMessage:OptionsRecommendResponseMessage = OptionsRecommendResponseMessage(message);
            this.optionsWizardManager.updateOptionsList(optionsRecommendMessage.optionsRecommnedList);
            this.dispatcher.notifyReceiveMessage(optionsRecommendMessage);
        }

    }
}//package com.settrade.streaming5.datacomponent.handler 
﻿package com.settrade.streaming5.datacomponent.handler {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.dispatcher.*;
    import com.settrade.streaming5.message.control.*;

    public class DefaultMessageHandler implements IMessageHandler {

        protected var dispatcher:MessageDispatcher;

        public function DefaultMessageHandler(){
            super();
            this.dispatcher = MessageDispatcher.getInstance();
        }
        public function handlingMessage(message:Message):void{
            if ((message is ControlMessage)){
                this.dispatcher.notifyControlMessage(message);
            } else {
                this.dispatcher.notifyReceiveMessage(message);
            };
        }

    }
}//package com.settrade.streaming5.datacomponent.handler 
﻿package com.settrade.streaming5.datacomponent.handler {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.message.response.oppday.*;
    import com.settrade.streaming5.dispatcher.*;

    public class OppDayArchiveHandler implements IMessageHandler {

        protected var oppDayArchiveManager:OppDayArchiveManager;
        protected var dispatcher:MessageDispatcher;

        public function OppDayArchiveHandler(){
            super();
            this.dispatcher = MessageDispatcher.getInstance();
            this.oppDayArchiveManager = OppDayArchiveManager.getInstance();
        }
        public function handlingMessage(message:Message):void{
            var oppDayArchiveResponseMessage:OppDayArchiveResponseMessage = OppDayArchiveResponseMessage(message);
            if (this.oppDayArchiveManager.screenOppDayArchive(oppDayArchiveResponseMessage)){
                this.dispatcher.notifyReceiveMessage(oppDayArchiveResponseMessage);
            };
        }

    }
}//package com.settrade.streaming5.datacomponent.handler 
﻿package com.settrade.streaming5.datacomponent.handler {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.datacomponent.parser.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.datacomponent.*;
    import com.settrade.streaming5.error.*;

    public class RawMessageHandler implements IMessageHandler {

        var dataComponent:DataComponent;

        public function RawMessageHandler(){
            super();
            this.dataComponent = DataComponent.getInstance();
        }
        public function handlingMessage(message:Message):void{
            if (!message.type.isRawMessage){
                throw (new InvalidMessageTypeError(message));
            };
            var rawMessage:IRawMessage = IRawMessage(message);
            var parser:IMessageParser = MessageParserFactory.getMessageParser(rawMessage);
            message = parser.parseMessage(rawMessage);
            this.dataComponent.receiveMessage(message);
        }

    }
}//package com.settrade.streaming5.datacomponent.handler 
﻿package com.settrade.streaming5.datacomponent {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.*;
    import com.settrade.streaming5.datacomponent.handler.*;
    import com.settrade.log.logger.*;

    public class DataComponent implements IMessageReceiver {

        private static var logger:Logger = new Logger(prototype.constructor);
        public static var instance:DataComponent;

        public function DataComponent(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():DataComponent{
            if (instance == null){
                instance = new (DataComponent)();
            };
            return (instance);
        }

        public function receiveMessage(message:Message):void{
            var messageHandler:* = null;
            var message:* = message;
            try {
                messageHandler = MessageHandlerFactory.getInstance().getMessageHandler(message);
                messageHandler.handlingMessage(message);
            } catch(error:Error) {
                logger.debug(error.getStackTrace());
                logger.error(error.message);
            };
        }

    }
}//package com.settrade.streaming5.datacomponent 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.request.multipleorder.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.streaming5.message.response.multipleorder.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.message.control.*;

    public class MultipleOrderDerivativesMessageParser implements IMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        const DATA_START_INDEX:int = 5;

        public function MultipleOrderDerivativesMessageParser(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            if ((!(message) is StringResponseMessage)){
                throw (new InvalidMessageTypeError(message));
            };
            var stringRawMessage:StringResponseMessage = StringResponseMessage(message);
            var responseString:String = stringRawMessage.data;
            var responseArray:Array = responseString.split(Delimiter.LEVEL2);
            if (!this.isValidArray(responseArray)){
                return (new InvalidParseMessage(stringRawMessage, null, stringRawMessage.requestMessage));
            };
            var status:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(responseArray[2]);
            switch (status){
                case OrderResponseStatus.SUCCESS:
                    return (this.parseSuccessMessage(stringRawMessage, responseArray));
                case OrderResponseStatus.WARNING:
                    return (this.parseWarnMessage(stringRawMessage, responseArray));
                case OrderResponseStatus.FAILED:
                    return (this.parseFail(stringRawMessage, responseArray));
            };
            return (new InvalidParseMessage(stringRawMessage, null, stringRawMessage.requestMessage));
        }
        private function parseWarnMessage(message:StringResponseMessage, responseArray:Array):Message{
            var service:String = responseArray[1];
            switch (service){
                case "MultiOrderDerivExtractData":
                    return (this.parseMultipleOrderDerivativesWarn(message, responseArray));
                case "PlaceMultiOrderMkt":
                case "PlaceMultiOrder":
                    return (this.parsePlaceMultipleOrderDerivativesMessage(message, responseArray));
            };
            logger.error(("Invalid Service:" + service));
            return (new InvalidParseMessage(message, null, message.requestMessage));
        }
        private function parseSuccessMessage(message:StringResponseMessage, responseArray:Array):Message{
            var service:String = responseArray[1];
            switch (service){
                case "MultiOrderDerivFavourite":
                    return (this.parseMultipleOrderDerivativesMessage(message, responseArray));
                case "MultiOrderDerivExtractData":
                    return (this.parseMultipleOrderDerivativesExtractMessage(message, responseArray));
                case "PlaceMultiOrder":
                case "PlaceMultiOrderMkt":
                    return (this.parsePlaceMultipleOrderDerivativesMessage(message, responseArray));
            };
            logger.error(("Invalid Service:" + service));
            return (new InvalidParseMessage(message, null, message.requestMessage));
        }
        private function parseMultipleOrderDerivativesWarn(message:StringResponseMessage, responseArray:Array):Message{
            if (responseArray.length < 6){
                return (new InvalidParseMessage(message, null, message.requestMessage));
            };
            var warnMessage:String = responseArray[this.DATA_START_INDEX];
            return (new MultipleOrderDerivativesWarnResponseMessage(message.requestMessage, message.source, warnMessage));
        }
        private function parseMultipleOrderDerivativesExtractMessage(message:StringResponseMessage, responseArray:Array):Message{
            var subDataArray:Array;
            var order:MultipleOrderDerivatives;
            var parseMessage:MultipleOrderExtractDerivativesResponseMessage = new MultipleOrderExtractDerivativesResponseMessage(message.requestMessage, message.source);
            var number:int = int(responseArray[3]);
            var i:int = this.DATA_START_INDEX;
            while (i < (number + this.DATA_START_INDEX)) {
                subDataArray = responseArray[i].split(Delimiter.LEVEL1);
                order = this.parseMultipleOrderDerivatives(subDataArray);
                parseMessage.add(order);
                i++;
            };
            return (parseMessage);
        }
        private function parseMultipleOrderDerivatives(array:Array):MultipleOrderDerivatives{
            var index:int;
            if (array.length < 9){
                return (new MultipleOrderDerivatives(DerivativesOrderSide.LONG, DerivativesPosition.OPEN, "", "", "", DerivativesPriceType.LIMIT, DerivativesValidity.DAY, ""));
            };
            var _temp1 = index;
            index = (index + 1);
            var instrumentId:String = array[_temp1];
            var _temp2 = index;
            index = (index + 1);
            var side:DerivativesOrderSide = this.parseOrderSide(array[_temp2]);
            var _temp3 = index;
            index = (index + 1);
            var volume:String = array[_temp3];
            var _temp4 = index;
            index = (index + 1);
            var price:Number = Number(array[_temp4]);
            var _temp5 = index;
            index = (index + 1);
            var position:DerivativesPosition = DerivativesPosition.lookupFromFeed(array[_temp5]);
            var _temp6 = index;
            index = (index + 1);
            var priceType:DerivativesPriceType = this.parsePriceType(array[_temp6]);
            var _temp7 = index;
            index = (index + 1);
            var validity:DerivativesValidity = this.parseValidity(array[_temp7]);
            var _temp8 = index;
            index = (index + 1);
            var icebergVolume:String = array[_temp8];
            var _temp9 = index;
            index = (index + 1);
            var priceDigit:int = int(array[_temp9]);
            var priceStr:String = StreamingNumberFormatter.removeComma(StreamingNumberFormatter.formatPriceWithPrecision(price, priceDigit));
            return (new MultipleOrderDerivatives(side, position, instrumentId, volume, priceStr, priceType, validity, icebergVolume));
        }
        private function parsePriceType(str:String):DerivativesPriceType{
            switch (str){
                case "LIMIT":
                    return (DerivativesPriceType.LIMIT);
                case "ATO":
                    return (DerivativesPriceType.ATO);
                case "MP":
                    return (DerivativesPriceType.MP);
                case "MP-MKT":
                    return (DerivativesPriceType.MP_MKT);
                case "MP-MTL":
                    return (DerivativesPriceType.MP_MTL);
            };
            return (DerivativesPriceType.NO_TYPE);
        }
        private function parseOrderSide(str:String):DerivativesOrderSide{
            switch (str){
                case "B":
                    return (DerivativesOrderSide.LONG);
                case "S":
                    return (DerivativesOrderSide.SHORT);
            };
            return (DerivativesOrderSide.NO_SIDE);
        }
        private function parseFail(message:StringResponseMessage, responseArray:Array):Message{
            if (responseArray.length < 6){
                return (new InvalidParseMessage(message, null, message.requestMessage));
            };
            var failMessage:String = responseArray[this.DATA_START_INDEX];
            return (new FailResponseMessage(message.requestMessage, message.source, failMessage));
        }
        private function parsePlaceMultipleOrderDerivativesMessage(message:StringResponseMessage, responseArray:Array):Message{
            var subDataArray:Array;
            var order:PlaceMultipleOrderDerivativesResult;
            var parseMessage:PlaceMultipleOrderDerivativesResponseMessage = new PlaceMultipleOrderDerivativesResponseMessage(message.requestMessage, message.source);
            var number:int = int(responseArray[3]);
            var i:int = this.DATA_START_INDEX;
            while (i < (number + this.DATA_START_INDEX)) {
                subDataArray = responseArray[i].split(Delimiter.LEVEL1);
                order = this.parsePlaceMultipleOrderDerivativesResult(subDataArray);
                parseMessage.addResult(order);
                i++;
            };
            return (parseMessage);
        }
        private function parsePlaceMultipleOrderDerivativesResult(subDataArray:Array):PlaceMultipleOrderDerivativesResult{
            var index:int;
            var _temp1 = index;
            index = (index + 1);
            var result:OrderResponseStatus = this.parseOrderResponseStatus(subDataArray[_temp1]);
            var _temp2 = index;
            index = (index + 1);
            var message:String = subDataArray[_temp2];
            return (new PlaceMultipleOrderDerivativesResult(result, message));
        }
        private function parseOrderResponseStatus(str:String):OrderResponseStatus{
            switch (str){
                case "T":
                    return (OrderResponseStatus.SUCCESS);
                case "W":
                    return (OrderResponseStatus.WARNING);
                case "E":
                    return (OrderResponseStatus.FAILED);
            };
            return (OrderResponseStatus.NO_STATUS);
        }
        private function parseValidity(string:String):DerivativesValidity{
            switch (string){
                case "DAY":
                    return (DerivativesValidity.DAY);
                case "FOK":
                    return (DerivativesValidity.FOK);
                case "IOC":
                    return (DerivativesValidity.IOC);
                case "GTC":
                    return (DerivativesValidity.CANCEL);
                case "AUTO-M":
                    return (DerivativesValidity.AUTO_M);
            };
            return (DerivativesValidity.NO_TYPE);
        }
        private function parseMultipleOrderDerivativesMessage(message:StringResponseMessage, responseArray:Array):Message{
            var subDataArray:Array;
            var order:MultipleOrderGetLastDerivatives;
            var parseMessage:MultipleOrderGetLastDerivativesResponseMessage = new MultipleOrderGetLastDerivativesResponseMessage(message.requestMessage, message.source);
            var number:int = int(responseArray[3]);
            var i:int = this.DATA_START_INDEX;
            while (i < (number + this.DATA_START_INDEX)) {
                subDataArray = responseArray[i].split(Delimiter.LEVEL1);
                order = this.parseMultipleOrderGetLastDerivatives(subDataArray);
                parseMessage.add(order);
                i++;
            };
            return (parseMessage);
        }
        private function parseMultipleOrderGetLastDerivatives(array:Array):MultipleOrderGetLastDerivatives{
            var index:int;
            if (array.length < 3){
                return (new MultipleOrderGetLastDerivatives("", ""));
            };
            var _temp1 = index;
            index = (index + 1);
            var instrumentId:String = array[_temp1];
            var _temp2 = index;
            index = (index + 1);
            var price:Number = Number(array[_temp2]);
            var _temp3 = index;
            index = (index + 1);
            var priceDigit:int = int(array[_temp3]);
            var priceStr:String = StreamingNumberFormatter.removeComma(StreamingNumberFormatter.formatPriceWithPrecision(price, priceDigit));
            return (new MultipleOrderGetLastDerivatives(instrumentId, priceStr));
        }
        private function isValidArray(responseArray:Array):Boolean{
            if (responseArray.length < 5){
                logger.error((("Invalid Length: " + responseArray.length) + " expected >= 5"));
                return (false);
            };
            if (responseArray[0] != "Streaming"){
                logger.error((("Invalid Field[0]: " + responseArray[0]) + " expected Streaming"));
                return (false);
            };
            return (true);
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.message.control.*;

    public class StaticDataMessageParser implements IMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        const STATUS_INDEX:int = 0;
        const DATA_START_INDEX:int = 1;

        public function StaticDataMessageParser(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            if (!message.type.isStringResponse()){
                throw (new InvalidMessageTypeError(message));
            };
            var responseMessage:StringResponseMessage = StringResponseMessage(message);
            return (this.parseStaticData(responseMessage));
        }
        private function parseStaticData(responseMessage:StringResponseMessage):Message{
            var status:OrderResponseStatus;
            var index:int;
            var ceiling:Number;
            var floor:Number;
            var spread:Number;
            var last:Number;
            var close:Number;
            var firstBid:Number;
            var firstAsk:Number;
            var priceDigit:int;
            var alertMessage:String;
            var rawData:String = responseMessage.data;
            var dataToken:Array = rawData.split(Delimiter.LEVEL1);
            if (dataToken.length >= (this.STATUS_INDEX + 1)){
                status = OrderResponseStatus.lookupFromOrder(dataToken[this.STATUS_INDEX]);
                if (status.isSuccess()){
                    index = this.DATA_START_INDEX;
                    var _temp1 = index;
                    index = (index + 1);
                    ceiling = Number(dataToken[_temp1]);
                    var _temp2 = index;
                    index = (index + 1);
                    floor = Number(dataToken[_temp2]);
                    var _temp3 = index;
                    index = (index + 1);
                    spread = Number(dataToken[_temp3]);
                    var _temp4 = index;
                    index = (index + 1);
                    last = Number(dataToken[_temp4]);
                    var _temp5 = index;
                    index = (index + 1);
                    close = Number(dataToken[_temp5]);
                    var _temp6 = index;
                    index = (index + 1);
                    firstBid = Number(dataToken[_temp6]);
                    var _temp7 = index;
                    index = (index + 1);
                    firstAsk = Number(dataToken[_temp7]);
                    priceDigit = 2;
                    if (index < dataToken.length){
                        var _temp8 = index;
                        index = (index + 1);
                        priceDigit = int(dataToken[_temp8]);
                    };
                    return (new StaticDataResponseMessage(responseMessage.requestMessage, responseMessage.source, ceiling, floor, spread, last, close, firstBid, firstAsk, priceDigit));
                };
                alertMessage = dataToken[this.DATA_START_INDEX];
                return (new FailResponseMessage(responseMessage.requestMessage, responseMessage.source, alertMessage));
            };
            return (new InvalidParseMessage(responseMessage, null, responseMessage.requestMessage));
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.streaming5.message.response.news.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;

    public class NewsInformationMessageParser implements IMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        public function NewsInformationMessageParser(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            var attachmentXML:XML;
            var attachment:NewsAttachment;
            if ((!(message) is BinaryResponseMessage)){
                throw (new InvalidMessageTypeError(message));
            };
            var binaryResponseMessage:BinaryResponseMessage = BinaryResponseMessage(message);
            var responseString:String = binaryResponseMessage.data.readMultiByte(binaryResponseMessage.data.length, "TIS-620");
            var xml:XML = new XML(responseString);
            var newsInformationResponseMessage:NewsInformationResponseMessage = new NewsInformationResponseMessage(binaryResponseMessage.requestMessage, binaryResponseMessage.source);
            newsInformationResponseMessage.newsId = xml.NewsID;
            newsInformationResponseMessage.sourceId = xml.SourceID;
            newsInformationResponseMessage.language = Language.lookupFromFeed(xml.Language);
            var dateTimeString:String = xml.NewsDate.split("-").join("/");
            newsInformationResponseMessage.newsDate = new Date(Date.parse(dateTimeString));
            newsInformationResponseMessage.headline = xml.Headline;
            newsInformationResponseMessage.story = xml.Story;
            var attachmentList:Array = new Array();
            for each (attachmentXML in xml.Attachments) {
                attachment = new NewsAttachment();
                attachment.fileName = attachmentXML.OriginalFileName;
                attachment.linkPath = attachmentXML.LinkPath;
                attachmentList.push(attachment);
            };
            newsInformationResponseMessage.attachmentList = attachmentList;
            newsInformationResponseMessage.symbol = xml.Symbol;
            newsInformationResponseMessage.newsType = xml.NewsType;
            newsInformationResponseMessage.link = xml.Link;
            return (newsInformationResponseMessage);
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.log.logger.*;

    public class StubMessageParser implements IMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        public function StubMessageParser(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            var stubRawMessage:IStubRawMessage = IStubRawMessage(message);
            return (stubRawMessage.data);
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.optionswizard.message.response.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;

    public class OptionsCommissionMessageParser implements IMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        public function OptionsCommissionMessageParser(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            if (!message.type.isStringResponse()){
                return (InvalidParseMessage(message));
            };
            var responseMessage:StringResponseMessage = StringResponseMessage(message);
            return (this.parseGenerateKey(responseMessage));
        }
        protected function parseGenerateKey(message:StringResponseMessage):Message{
            var subDataList:Array;
            var index:int;
            var fixedComm:Number;
            var fee:Number;
            var percentComm:Number;
            var vatRate:Number;
            var reason:String;
            var parseMessage:Message;
            var data:String = message.data;
            var dataList:Array = data.split(Delimiter.LEVEL1);
            var successFlag:String = dataList[0];
            if (successFlag == "T"){
                if (dataList.length == 2){
                    subDataList = dataList[1].split(Delimiter.LEVEL2);
                    if (subDataList.length == 4){
                        index = 0;
                        var _temp1 = index;
                        index = (index + 1);
                        fixedComm = Number(subDataList[_temp1]);
                        var _temp2 = index;
                        index = (index + 1);
                        fee = Number(subDataList[_temp2]);
                        var _temp3 = index;
                        index = (index + 1);
                        percentComm = Number(subDataList[_temp3]);
                        var _temp4 = index;
                        index = (index + 1);
                        vatRate = Number(subDataList[_temp4]);
                        parseMessage = new OptionsCommissionResponseMessage(message.requestMessage, message.source, percentComm, fixedComm, fee, vatRate);
                    } else {
                        logger.error("Length != 4");
                        return (new InvalidParseMessage(message, null, message.requestMessage));
                    };
                } else {
                    logger.error("Length != 2");
                    return (new InvalidParseMessage(message, null, message.requestMessage));
                };
            } else {
                if (successFlag == "F"){
                    if (dataList.length == 2){
                        reason = dataList[1];
                        parseMessage = new OptionsCommissionFailResponseMessage(message.requestMessage, message.source, reason);
                    } else {
                        logger.error("Length != 2");
                        return (new InvalidParseMessage(message, null, message.requestMessage));
                    };
                } else {
                    return (new InvalidParseMessage(message, null, message.requestMessage));
                };
            };
            return (parseMessage);
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.message.response.orderstatus.*;
    import com.settrade.streaming5.common.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.response.portfolio.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.dealsummary.*;
    import com.settrade.streaming5.message.response.accountInfo.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.streaming5.message.response.positionclosing.*;
    import com.settrade.streaming5.message.response.outstandingposition.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.message.control.*;

    public class OrderDerivativesMessageParser implements IMessageParser {

        private static const DERIVATIVES_RESPONSE_INDEX = 0;
        private static const MODE_INDEX = (DERIVATIVES_INDEX + 1);
        private static const DATA_COUNT_INDEX = (MODE_INDEX + 1);
        private static const DATA_START_INDEX = (DATA_COUNT_INDEX + 1);
        private static const DERIVATIVES_INDEX = 0;
        private static const SERVICE_TYPE_INDEX = 1;
        private static const STATUS_INDEX = 2;
        private static const WARN_FAIL_MESSAGE_INDEX = 3;
        private static const SUB_DATA_COUNT_INDEX = 3;
        private static const LENGTH_INDEX = 4;
        private static const SUB_DATA_START_INDEX = 5;
        private static const DEAL_SUMMARY_SETTLEMENT_DATE_CONT_INDEX = 4;
        private static const DEAL_SUMMARY_LENGTH_INDEX = 5;
        private static const DEAL_SUMMARY_START_INDEX = 6;

        private static var logger:Logger = new Logger(prototype.constructor);

        public function OrderDerivativesMessageParser(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            if ((!(message) is StringResponseMessage)){
                throw (new InvalidMessageTypeError(message));
            };
            var stringRawMessage:StringResponseMessage = StringResponseMessage(message);
            var parseMessage:Message;
            if (this.isFailResponseMessage(stringRawMessage)){
                parseMessage = this.parseFailMessage(stringRawMessage);
            } else {
                parseMessage = this.parseDerivativesOrderMessage(stringRawMessage);
            };
            return (parseMessage);
        }
        public function isFailResponseMessage(stringRawMessage:StringResponseMessage):Boolean{
            return ((stringRawMessage.data.split(Delimiter.LEVEL1)[DERIVATIVES_INDEX] == "F"));
        }
        public function parseFailMessage(stringRawMessage:StringResponseMessage):Message{
            var failMessage:String = stringRawMessage.data.split(Delimiter.LEVEL1)[1];
            var parseMessage:FailResponseMessage = new FailResponseMessage(stringRawMessage.requestMessage, stringRawMessage.source, failMessage);
            return (parseMessage);
        }
        public function parseDerivativesOrderMessage(stringRawMessage:StringResponseMessage):Message{
            var index:int;
            var subMessageString:String;
            var subMessage:Message;
            var parseMessage:MultipleMessage = new MultipleMessage();
            var responseString:String = stringRawMessage.data;
            var responseArray:Array = responseString.split(Delimiter.LEVEL3);
            if (!this.isValidArray(responseArray)){
                return (new InvalidParseMessage(stringRawMessage, null, stringRawMessage.requestMessage));
            };
            var num:int = int(responseArray[DATA_COUNT_INDEX]);
            var i:* = 0;
            while (i < num) {
                index = (i + DATA_START_INDEX);
                subMessageString = responseArray[index];
                subMessage = this.parseSubMessage(stringRawMessage, subMessageString);
                parseMessage.add(subMessage);
                if (subMessage.type.isCancelOrderDerivativesResponse()){
                    break;
                };
                i++;
            };
            return (parseMessage);
        }
        private function isValidArray(responseArray:Array):Boolean{
            if (responseArray.length < (DATA_COUNT_INDEX + 1)){
                logger.error(((("Invalid Length: " + responseArray.length) + " expected >=") + (DATA_COUNT_INDEX + 1)));
                return (false);
            };
            if (responseArray[DERIVATIVES_INDEX] != "DerivativeResponse"){
                logger.error((((("Invalid Field[" + DERIVATIVES_INDEX) + "]: ") + responseArray[DERIVATIVES_INDEX]) + " expected DerivativeResponse"));
                return (false);
            };
            return (true);
        }
        private function parseSubMessage(message:StringResponseMessage, data:String):Message{
            var message:* = message;
            var data:* = data;
            var dataArray:* = data.split(Delimiter.LEVEL2);
            if (!this.isValidSubMessageArray(dataArray, data)){
                return (new InvalidParseMessage(message, null, message.requestMessage));
            };
            var serviceType:* = OrderDerivativesServiceType.lookUpFromId(dataArray[MODE_INDEX]);
            switch (serviceType){
                case OrderDerivativesServiceType.PLACE_OR_CANCEL_ORDER:
                    return (this.parsePlaceOrderOrCancel(message, dataArray));
                case OrderDerivativesServiceType.ACCOUNT_INFO:
                    return (this.parseAccountInfo(message, dataArray));
                case OrderDerivativesServiceType.PORTFOLIO:
                    return (this.parsePortfolio(message, dataArray));
                case OrderDerivativesServiceType.ORDER_STATUS:
                    return (this.parseOrderStatus(message, dataArray));
                case OrderDerivativesServiceType.DEAL_SUMMARY:
                    return (this.parseDealSummary(message, dataArray));
                case OrderDerivativesServiceType.DEAL_SUMMARY_SERIES:
                    return (this.parseDealSummarySeries(message, dataArray));
                case OrderDerivativesServiceType.DEAL_SUMMARY_PRICE:
                    return (this.parseDealSummaryPrice(message, dataArray));
                case OrderDerivativesServiceType.ORDER_STATUS_BY_ORDER_NUMBER:
                    return (this.parseOrderStatusByOrderNumber(message, dataArray));
                case OrderDerivativesServiceType.OUTSTANDING_POSITION:
                    return (this.parseOutstandingPosition(message, dataArray));
                case OrderDerivativesServiceType.POSITION_CLOSING:
                    return (this.parsePositionClosing(message, dataArray));
                default:
                    logger.error(("Invalid Service Type: " + dataArray[MODE_INDEX]));
                    return (new InvalidParseMessage(message, null, message.requestMessage));
            };
            var _slot1:* = error;
            logger.debug(_slot1.getStackTrace());
            logger.error("Invalid parse Message");
            return (new InvalidParseMessage(message, null, message.requestMessage));
        }
        private function isValidSubMessageArray(responseArray:Array, responseString:String):Boolean{
            if (responseArray.length < (STATUS_INDEX + 1)){
                logger.error(((("Invalid Length: " + responseArray.length) + " expected >= ") + (STATUS_INDEX + 1)));
                return (false);
            };
            if (responseArray[DERIVATIVES_INDEX] != "Derivative"){
                logger.error((((("Invalid Field[" + DERIVATIVES_INDEX) + "]: ") + responseArray[DERIVATIVES_INDEX]) + " expected Streaming"));
                return (false);
            };
            return (true);
        }
        private function parsePositionClosing(message:StringResponseMessage, dataArray:Array):Message{
            var account:Account;
            var accountNumber:String;
            var numSubData:int;
            var positionClosingDerivativesResponseMessage:PositionClosingDerivativesResponseMessage;
            var index:int;
            var dataToken:String;
            var positionClosing:PositionClosingDerivatives;
            var alertMessage:String;
            var status:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(dataArray[STATUS_INDEX]);
            var parseMessage:Message;
            if (status.isSuccess()){
                account = this.getAccountFromPositionClosingRequestMessage(message.requestMessage);
                accountNumber = "";
                if (account != null){
                    accountNumber = account.accountNumber;
                };
                numSubData = int(dataArray[SUB_DATA_COUNT_INDEX]);
                positionClosingDerivativesResponseMessage = new PositionClosingDerivativesResponseMessage(message.requestMessage, message.source, accountNumber);
                index = SUB_DATA_START_INDEX;
                while (index < (SUB_DATA_START_INDEX + numSubData)) {
                    dataToken = dataArray[index];
                    positionClosing = this.parsePositionClosingToken(dataToken);
                    positionClosingDerivativesResponseMessage.addPositionClosing(positionClosing);
                    index++;
                };
                parseMessage = positionClosingDerivativesResponseMessage;
            } else {
                alertMessage = dataArray[WARN_FAIL_MESSAGE_INDEX];
                parseMessage = new PositionClosingDerivativesFailResponseMessage(message.requestMessage, message.source, alertMessage);
            };
            return (parseMessage);
        }
        private function parsePositionClosingToken(dataToken:String):PositionClosingDerivatives{
            var token:Array = dataToken.split(Delimiter.LEVEL1);
            var index:int;
            var _temp1 = index;
            index = (index + 1);
            var instrumentId:String = token[_temp1];
            var _temp2 = index;
            index = (index + 1);
            var closeLong:int = int(token[_temp2]);
            var _temp3 = index;
            index = (index + 1);
            var closeShort:int = int(token[_temp3]);
            var _temp4 = index;
            index = (index + 1);
            var closeContract:int = int(token[_temp4]);
            var _temp5 = index;
            index = (index + 1);
            var realizeProfitLoss:Number = Number(token[_temp5]);
            var _temp6 = index;
            index = (index + 1);
            var realizeProfitLossByCost:Number = Number(token[_temp6]);
            return (new PositionClosingDerivatives(instrumentId, closeLong, closeShort, closeContract, realizeProfitLoss, realizeProfitLossByCost));
        }
        private function getAccountFromPositionClosingRequestMessage(message:RequestMessage):Account{
            var accountNumber:String = this.getAccountFromPositionClosingRequestMessageSub(message);
            var account:Account = AccountManager.getInstance().currentAccount;
            if (accountNumber != null){
                if (AccountManager.getInstance().hasAccountByAccountNumberAndSystem(accountNumber, System.DERIV)){
                    account = AccountManager.getInstance().getAccountByAccountNumberAndSystem(accountNumber, System.DERIV);
                };
            };
            return (account);
        }
        private function getAccountFromPositionClosingRequestMessageSub(message:RequestMessage):String{
            var subMessage:Message;
            var list:Vector.<Message>;
            var subsubMessage:Message;
            var accountNumber:String;
            var messageList:Array = [message];
            while (messageList.length > 0) {
                subMessage = messageList.pop();
                if (subMessage.type.isPositionClosingDerivativesRequest()){
                    accountNumber = PositionClosingDerivativesRequestMessage(subMessage).accountNo;
                    break;
                };
                if ((subMessage is IMultipleMessage)){
                    list = IMultipleMessage(subMessage).messageList;
                    for each (subsubMessage in list) {
                        messageList.push(subsubMessage);
                    };
                };
            };
            return (accountNumber);
        }
        private function parseOutstandingPosition(message:StringResponseMessage, dataArray:Array):Message{
            var account:Account;
            var accountNumber:String;
            var numSubData:int;
            var outstandingPositionDerivativesResponseMessage:OutstandingPositionDerivativesResponseMessage;
            var index:int;
            var dataToken:String;
            var outstandingPosition:OutstandingPositionDerivatives;
            var alertMessage:String;
            var status:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(dataArray[STATUS_INDEX]);
            var parseMessage:Message;
            if (status.isSuccess()){
                account = this.getAccountFromOutstandingPositionRequestMessage(message.requestMessage);
                accountNumber = "";
                if (account != null){
                    accountNumber = account.accountNumber;
                };
                numSubData = int(dataArray[SUB_DATA_COUNT_INDEX]);
                outstandingPositionDerivativesResponseMessage = new OutstandingPositionDerivativesResponseMessage(message.requestMessage, message.source, accountNumber);
                index = SUB_DATA_START_INDEX;
                while (index < (SUB_DATA_START_INDEX + numSubData)) {
                    dataToken = dataArray[index];
                    outstandingPosition = this.parseOutstandingPositionToken(dataToken);
                    outstandingPositionDerivativesResponseMessage.addOutstandingPosition(outstandingPosition);
                    index++;
                };
                parseMessage = outstandingPositionDerivativesResponseMessage;
            } else {
                alertMessage = dataArray[WARN_FAIL_MESSAGE_INDEX];
                parseMessage = new OutstandingPositionDerivativesFailResponseMessage(message.requestMessage, message.source, alertMessage);
            };
            return (parseMessage);
        }
        private function parseOutstandingPositionToken(dataToken:String):OutstandingPositionDerivatives{
            var token:Array = dataToken.split(Delimiter.LEVEL1);
            var index:int;
            var _temp1 = index;
            index = (index + 1);
            var instrumentId:String = token[_temp1];
            var _temp2 = index;
            index = (index + 1);
            var longPosition:int = int(token[_temp2]);
            var _temp3 = index;
            index = (index + 1);
            var shortPosition:int = int(token[_temp3]);
            var _temp4 = index;
            index = (index + 1);
            var averagePrice:Number = Number(token[_temp4]);
            var _temp5 = index;
            index = (index + 1);
            var settlementPrice:Number = Number(token[_temp5]);
            var _temp6 = index;
            index = (index + 1);
            var unrealizeProfitLoss:Number = Number(token[_temp6]);
            var _temp7 = index;
            index = (index + 1);
            var unrealizeProfitLossByCost:Number = Number(token[_temp7]);
            var _temp8 = index;
            index = (index + 1);
            var priceDigit:int = int(token[_temp8]);
            var _temp9 = index;
            index = (index + 1);
            var settlementDigit:int = int(token[_temp9]);
            return (new OutstandingPositionDerivatives(instrumentId, longPosition, shortPosition, averagePrice, settlementPrice, unrealizeProfitLoss, unrealizeProfitLossByCost, priceDigit, settlementDigit));
        }
        private function getAccountFromOutstandingPositionRequestMessage(message:RequestMessage):Account{
            var accountNumber:String = this.getAccountFromOutstandingPositionRequestMessageSub(message);
            var account:Account = AccountManager.getInstance().currentAccount;
            if (accountNumber != null){
                if (AccountManager.getInstance().hasAccountByAccountNumberAndSystem(accountNumber, System.DERIV)){
                    account = AccountManager.getInstance().getAccountByAccountNumberAndSystem(accountNumber, System.DERIV);
                };
            };
            return (account);
        }
        private function getAccountFromOutstandingPositionRequestMessageSub(message:RequestMessage):String{
            var subMessage:Message;
            var list:Vector.<Message>;
            var subsubMessage:Message;
            var accountNumber:String;
            var messageList:Array = [message];
            while (messageList.length > 0) {
                subMessage = messageList.pop();
                if (subMessage.type.isOutStandingPositionDerivativesRequest()){
                    accountNumber = OutstandingPositionDerivativesRequestMessage(subMessage).accountNo;
                    break;
                };
                if ((subMessage is IMultipleMessage)){
                    list = IMultipleMessage(subMessage).messageList;
                    for each (subsubMessage in list) {
                        messageList.push(subsubMessage);
                    };
                };
            };
            return (accountNumber);
        }
        private function parseDealSummaryPrice(message:StringResponseMessage, dataArray:Array):Message{
            var account:Account;
            var accountNumber:String;
            var numSubData:int;
            var numSettlementDate:int;
            var dealSummaryDerivativesResponseMessage:DealSummaryDerivativesByPriceResponseMessage;
            var index:int;
            var dataToken:String;
            var dealSummary:DealSummaryDerivatives;
            var alertMessage:String;
            var status:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(dataArray[STATUS_INDEX]);
            var parseMessage:Message;
            if (status.isSuccess()){
                account = this.getAccountFromDealSummaryPriceRequestMessage(message.requestMessage);
                accountNumber = "";
                if (account != null){
                    accountNumber = account.accountNumber;
                };
                numSubData = int(dataArray[SUB_DATA_COUNT_INDEX]);
                numSettlementDate = int(dataArray[DEAL_SUMMARY_SETTLEMENT_DATE_CONT_INDEX]);
                dealSummaryDerivativesResponseMessage = new DealSummaryDerivativesByPriceResponseMessage(message.requestMessage, message.source, accountNumber, numSettlementDate);
                index = DEAL_SUMMARY_START_INDEX;
                while (index < (DEAL_SUMMARY_START_INDEX + numSubData)) {
                    dataToken = dataArray[index];
                    dealSummary = this.parseDealSummaryToken(dataToken);
                    dealSummaryDerivativesResponseMessage.addDealSummary(dealSummary);
                    index++;
                };
                parseMessage = dealSummaryDerivativesResponseMessage;
            } else {
                alertMessage = dataArray[WARN_FAIL_MESSAGE_INDEX];
                parseMessage = new DealSummaryDerivativesFailResponseMessage(message.requestMessage, message.source, alertMessage);
            };
            return (parseMessage);
        }
        private function getAccountFromDealSummaryPriceRequestMessage(message:RequestMessage):Account{
            var accountNumber:String = this.getAccountFromDealSummaryPriceRequestMessageSub(message);
            var account:Account = AccountManager.getInstance().currentAccount;
            if (accountNumber != null){
                if (AccountManager.getInstance().hasAccountByAccountNumberAndSystem(accountNumber, System.DERIV)){
                    account = AccountManager.getInstance().getAccountByAccountNumberAndSystem(accountNumber, System.DERIV);
                };
            };
            return (account);
        }
        private function getAccountFromDealSummaryPriceRequestMessageSub(message:RequestMessage):String{
            var subMessage:Message;
            var list:Vector.<Message>;
            var subsubMessage:Message;
            var accountNumber:String;
            var messageList:Array = [message];
            while (messageList.length > 0) {
                subMessage = messageList.pop();
                if (subMessage.type.isDealSummaryDerivativesByPriceRequest()){
                    accountNumber = DealSummaryDerivativesByPriceRequestMessage(subMessage).accountNo;
                    break;
                };
                if ((subMessage is IMultipleMessage)){
                    list = IMultipleMessage(subMessage).messageList;
                    for each (subsubMessage in list) {
                        messageList.push(subsubMessage);
                    };
                };
            };
            return (accountNumber);
        }
        private function parseDealSummarySeries(message:StringResponseMessage, dataArray:Array):Message{
            var account:Account;
            var accountNumber:String;
            var numSubData:int;
            var numSettlementDate:int;
            var dealSummaryDerivativesResponseMessage:DealSummaryDerivativesByInstrumentIdResponseMessage;
            var index:int;
            var dataToken:String;
            var dealSummary:DealSummaryDerivatives;
            var alertMessage:String;
            var status:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(dataArray[STATUS_INDEX]);
            var parseMessage:Message;
            if (status.isSuccess()){
                account = this.getAccountFromDealSummarySeriesRequestMessage(message.requestMessage);
                accountNumber = "";
                if (account != null){
                    accountNumber = account.accountNumber;
                };
                numSubData = int(dataArray[SUB_DATA_COUNT_INDEX]);
                numSettlementDate = int(dataArray[DEAL_SUMMARY_SETTLEMENT_DATE_CONT_INDEX]);
                dealSummaryDerivativesResponseMessage = new DealSummaryDerivativesByInstrumentIdResponseMessage(message.requestMessage, message.source, accountNumber, numSettlementDate);
                index = DEAL_SUMMARY_START_INDEX;
                while (index < (DEAL_SUMMARY_START_INDEX + numSubData)) {
                    dataToken = dataArray[index];
                    dealSummary = this.parseDealSummaryToken(dataToken);
                    dealSummaryDerivativesResponseMessage.addDealSummary(dealSummary);
                    index++;
                };
                parseMessage = dealSummaryDerivativesResponseMessage;
            } else {
                alertMessage = dataArray[WARN_FAIL_MESSAGE_INDEX];
                parseMessage = new DealSummaryDerivativesFailResponseMessage(message.requestMessage, message.source, alertMessage);
            };
            return (parseMessage);
        }
        private function getAccountFromDealSummarySeriesRequestMessage(message:RequestMessage):Account{
            var accountNumber:String = this.getAccountFromDealSummarySeriesRequestMessageSub(message);
            var account:Account = AccountManager.getInstance().currentAccount;
            if (accountNumber != null){
                if (AccountManager.getInstance().hasAccountByAccountNumberAndSystem(accountNumber, System.DERIV)){
                    account = AccountManager.getInstance().getAccountByAccountNumberAndSystem(accountNumber, System.DERIV);
                };
            };
            return (account);
        }
        private function getAccountFromDealSummarySeriesRequestMessageSub(message:RequestMessage):String{
            var subMessage:Message;
            var list:Vector.<Message>;
            var subsubMessage:Message;
            var accountNumber:String;
            var messageList:Array = [message];
            while (messageList.length > 0) {
                subMessage = messageList.pop();
                if (subMessage.type.isDealSummaryDerivativesByInstrumentIdRequest()){
                    accountNumber = DealSummaryDerivativesByInstrumentIdRequestMessage(subMessage).accountNo;
                    break;
                };
                if ((subMessage is IMultipleMessage)){
                    list = IMultipleMessage(subMessage).messageList;
                    for each (subsubMessage in list) {
                        messageList.push(subsubMessage);
                    };
                };
            };
            return (accountNumber);
        }
        private function parseDealSummary(message:StringResponseMessage, dataArray:Array):Message{
            var account:Account;
            var accountNumber:String;
            var numSubData:int;
            var numSettlementDate:int;
            var dealSummaryDerivativesResponseMessage:DealSummaryDerivativesResponseMessage;
            var index:int;
            var dataToken:String;
            var dealSummary:DealSummaryDerivatives;
            var alertMessage:String;
            var status:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(dataArray[STATUS_INDEX]);
            var parseMessage:Message;
            if (status.isSuccess()){
                account = this.getAccountFromDealSummaryRequestMessage(message.requestMessage);
                accountNumber = "";
                if (account != null){
                    accountNumber = account.accountNumber;
                };
                numSubData = int(dataArray[SUB_DATA_COUNT_INDEX]);
                numSettlementDate = int(dataArray[DEAL_SUMMARY_SETTLEMENT_DATE_CONT_INDEX]);
                dealSummaryDerivativesResponseMessage = new DealSummaryDerivativesResponseMessage(message.requestMessage, message.source, accountNumber, numSettlementDate);
                index = DEAL_SUMMARY_START_INDEX;
                while (index < (DEAL_SUMMARY_START_INDEX + numSubData)) {
                    dataToken = dataArray[index];
                    logger.trace(dataToken);
                    dealSummary = this.parseDealSummaryToken(dataToken);
                    dealSummaryDerivativesResponseMessage.addDealSummary(dealSummary);
                    index++;
                };
                parseMessage = dealSummaryDerivativesResponseMessage;
            } else {
                alertMessage = dataArray[WARN_FAIL_MESSAGE_INDEX];
                parseMessage = new DealSummaryDerivativesFailResponseMessage(message.requestMessage, message.source, alertMessage);
            };
            return (parseMessage);
        }
        private function parseDealSummaryToken(str:String):DealSummaryDerivatives{
            var token:Array = str.split(Delimiter.LEVEL1);
            var index:int;
            var _temp1 = index;
            index = (index + 1);
            var orderNumber:String = token[_temp1];
            var _temp2 = index;
            index = (index + 1);
            var instrumentId:String = token[_temp2];
            var _temp3 = index;
            index = (index + 1);
            var side:DerivativesOrderSide = DerivativesOrderSide.lookupFromOrder(token[_temp3]);
            var _temp4 = index;
            index = (index + 1);
            var position:DerivativesPosition = DerivativesPosition.lookupFromOrder(token[_temp4]);
            var _temp5 = index;
            index = (index + 1);
            var volume:Number = Number(token[_temp5]);
            var _temp6 = index;
            index = (index + 1);
            var costPrice:Number = Number(token[_temp6]);
            var _temp7 = index;
            index = (index + 1);
            var commission:Number = Number(token[_temp7]);
            var _temp8 = index;
            index = (index + 1);
            var vat:Number = Number(token[_temp8]);
            var _temp9 = index;
            index = (index + 1);
            var withHoldingTax:Number = Number(token[_temp9]);
            var _temp10 = index;
            index = (index + 1);
            var amount:Number = Number(token[_temp10]);
            var _temp11 = index;
            index = (index + 1);
            var priceDigit:int = int(token[_temp11]);
            var _temp12 = index;
            index = (index + 1);
            var dealDate:String = token[_temp12];
            var _temp13 = index;
            index = (index + 1);
            var settlementDate:String = token[_temp13];
            var _temp14 = index;
            index = (index + 1);
            var dealDetailCount:int = int(token[_temp14]);
            var dealDetailList:Array = new Array();
            var i:* = 0;
            while (i < dealDetailCount) {
                var _temp15 = index;
                index = (index + 1);
                dealDetailList.push(this.parseDealSummaryDetail(token[_temp15]));
                i++;
            };
            var dealSummary:DealSummaryDerivatives = new DealSummaryDerivatives(orderNumber, instrumentId, side, position, volume, costPrice, commission, vat, withHoldingTax, amount, priceDigit, dealDate, settlementDate, dealDetailList);
            return (dealSummary);
        }
        private function parseDealSummaryDetail(str:String):DealSummaryDerivativesDetail{
            var token:Array = str.split(Delimiter.LEVEL4);
            var index:int;
            var _temp1 = index;
            index = (index + 1);
            var volume:Number = Number(token[_temp1]);
            var _temp2 = index;
            index = (index + 1);
            var price:Number = Number(token[_temp2]);
            var detail:DealSummaryDerivativesDetail = new DealSummaryDerivativesDetail(price, volume);
            return (detail);
        }
        private function getAccountFromDealSummaryRequestMessage(message:RequestMessage):Account{
            var accountNumber:String = this.getAccountFromDealSummaryRequestMessageSub(message);
            var account:Account = AccountManager.getInstance().currentAccount;
            if (accountNumber != null){
                if (AccountManager.getInstance().hasAccountByAccountNumberAndSystem(accountNumber, System.DERIV)){
                    account = AccountManager.getInstance().getAccountByAccountNumberAndSystem(accountNumber, System.DERIV);
                };
            };
            return (account);
        }
        private function getAccountFromDealSummaryRequestMessageSub(message:RequestMessage):String{
            var subMessage:Message;
            var list:Vector.<Message>;
            var subsubMessage:Message;
            var accountNumber:String;
            var messageList:Array = [message];
            while (messageList.length > 0) {
                subMessage = messageList.pop();
                if (subMessage.type.isDealSummaryDerivativesRequest()){
                    accountNumber = DealSummaryDerivativesRequestMessage(subMessage).accountNo;
                    break;
                };
                if ((subMessage is IMultipleMessage)){
                    list = IMultipleMessage(subMessage).messageList;
                    for each (subsubMessage in list) {
                        messageList.push(subsubMessage);
                    };
                };
            };
            return (accountNumber);
        }
        private function parseOrderStatus(message:StringResponseMessage, dataArray:Array):Message{
            var account:Account;
            var orderStatusDerivativesResponseMessage:OrderStatusDerivativesResponseMessage;
            var numSubData:int;
            var index:int;
            var dataToken:String;
            var orderStatus:OrderStatusDerivatives;
            var alertMessage:String;
            var status:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(dataArray[STATUS_INDEX]);
            var parseMessage:Message;
            if (status.isSuccess()){
                account = this.getAccountFromOrderStatusRequestMessage(message.requestMessage);
                orderStatusDerivativesResponseMessage = null;
                if (this.isOrderStatusDerivativesAll(message.requestMessage)){
                    orderStatusDerivativesResponseMessage = new OrderStatusAllDerivativesResponseMessage(message.requestMessage, message.source, account.accountNumber);
                } else {
                    orderStatusDerivativesResponseMessage = new OrderStatusDerivativesResponseMessage(message.requestMessage, message.source, account.accountNumber);
                };
                numSubData = int(dataArray[SUB_DATA_COUNT_INDEX]);
                index = SUB_DATA_START_INDEX;
                while (index < (SUB_DATA_START_INDEX + numSubData)) {
                    dataToken = dataArray[index];
                    orderStatus = this.parseOrderStatusToken(dataToken);
                    orderStatusDerivativesResponseMessage.addOrderStatus(orderStatus);
                    index++;
                };
                parseMessage = orderStatusDerivativesResponseMessage;
            } else {
                alertMessage = dataArray[WARN_FAIL_MESSAGE_INDEX];
                parseMessage = new OrderStatusDerivativesFailResponseMessage(message.requestMessage, message.source, alertMessage);
            };
            return (parseMessage);
        }
        private function isOrderStatusDerivativesAll(message:RequestMessage):Boolean{
            var subMessage:Message;
            var list:Vector.<Message>;
            var subsubMessage:Message;
            var messageList:Array = [message];
            while (messageList.length > 0) {
                subMessage = messageList.pop();
                if (subMessage.type.isOrderStatusAllDerivativesRequest()){
                    return (true);
                };
                if ((subMessage is IMultipleMessage)){
                    list = IMultipleMessage(subMessage).messageList;
                    for each (subsubMessage in list) {
                        messageList.push(subsubMessage);
                    };
                };
            };
            return (false);
        }
        private function parseOrderStatusByOrderNumber(message:StringResponseMessage, dataArray:Array):Message{
            var account:Account;
            var dataToken:String;
            var orderStatus:OrderStatusDerivatives;
            var orderStatusByNumberDerivativesRequestMessage:OrderStatusByNumberDerivativesResponseMessage;
            var alertMessage:String;
            var status:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(dataArray[STATUS_INDEX]);
            var parseMessage:Message;
            if (status.isSuccess()){
                account = this.getAccountFromOrderStatusByNumberRequestMessage(message.requestMessage);
                dataToken = dataArray[SUB_DATA_START_INDEX];
                orderStatus = this.parseOrderStatusToken(dataToken);
                orderStatusByNumberDerivativesRequestMessage = new OrderStatusByNumberDerivativesResponseMessage(message.requestMessage, message.source, account.accountNumber, orderStatus);
                parseMessage = orderStatusByNumberDerivativesRequestMessage;
            } else {
                alertMessage = dataArray[WARN_FAIL_MESSAGE_INDEX];
                parseMessage = new OrderStatusByNumberDerivativesFailResponseMessage(message.requestMessage, message.source, alertMessage);
            };
            return (parseMessage);
        }
        protected function parseOrderStatusToken(str:String):OrderStatusDerivatives{
            var token:Array = str.split(Delimiter.LEVEL1);
            var index:int;
            var _temp1 = index;
            index = (index + 1);
            var orderNumber:String = token[_temp1];
            var _temp2 = index;
            index = (index + 1);
            var instrumentId:String = token[_temp2];
            var _temp3 = index;
            index = (index + 1);
            var time:String = token[_temp3];
            var _temp4 = index;
            index = (index + 1);
            var side:DerivativesOrderSide = DerivativesOrderSide.lookupFromOrder(token[_temp4]);
            var _temp5 = index;
            index = (index + 1);
            var priceStr:String = token[_temp5];
            var price:Number = Number(priceStr);
            var priceType:DerivativesPriceType = (((priceStr == "Market")) ? DerivativesPriceType.MP : DerivativesPriceType.LIMIT);
            var _temp6 = index;
            index = (index + 1);
            var volume:Number = Number(token[_temp6]);
            var _temp7 = index;
            index = (index + 1);
            var matchVolume:Number = Number(token[_temp7]);
            var _temp8 = index;
            index = (index + 1);
            var balanceVolume:Number = Number(token[_temp8]);
            var _temp9 = index;
            index = (index + 1);
            var cancelVolume:Number = Number(token[_temp9]);
            var _temp10 = index;
            index = (index + 1);
            var valStr:String = token[_temp10];
            var validity:DerivativesValidity = DerivativesValidity.lookupFromOrder(valStr);
            var _temp11 = index;
            index = (index + 1);
            var until:String = token[_temp11];
            var _temp12 = index;
            index = (index + 1);
            var status:String = token[_temp12];
            var _temp13 = index;
            index = (index + 1);
            var canCancel = (token[_temp13] == "Y");
            var _temp14 = index;
            index = (index + 1);
            var canChange = (token[_temp14] == "Y");
            var _temp15 = index;
            index = (index + 1);
            var position:DerivativesPosition = DerivativesPosition.lookupFromOrder(token[_temp15]);
            var _temp16 = index;
            index = (index + 1);
            var enterId:String = token[_temp16];
            var _temp17 = index;
            index = (index + 1);
            var accountNumber:String = token[_temp17];
            var _temp18 = index;
            index = (index + 1);
            var canApprove = (token[_temp18] == "Y");
            var _temp19 = index;
            index = (index + 1);
            var deleteFlag = (token[_temp19] == "Y");
            var _temp20 = index;
            index = (index + 1);
            var priceDigit:int = int(token[_temp20]);
            var _temp21 = index;
            index = (index + 1);
            var tfexOrderNumber:String = token[_temp21];
            var _temp22 = index;
            index = (index + 1);
            var isStopOrder = (token[_temp22] == "Y");
            var _temp23 = index;
            index = (index + 1);
            var date:String = token[_temp23];
            var _temp24 = index;
            index = (index + 1);
            var canChangePriceVolume = (token[_temp24] == "Y");
            var orderStatus:OrderStatusDerivatives = new OrderStatusDerivatives(orderNumber, instrumentId, time, side, price, volume, matchVolume, balanceVolume, cancelVolume, validity, until, status, canCancel, canChange, position, enterId, accountNumber, canApprove, deleteFlag, priceDigit, tfexOrderNumber, isStopOrder, date, false, priceType, canChangePriceVolume);
            return (orderStatus);
        }
        private function getAccountFromOrderStatusByNumberRequestMessage(message:RequestMessage):Account{
            var accountNumber:String = this.getAccountFromOrderStatusByNumberRequestMessageSub(message);
            var account:Account = AccountManager.getInstance().currentAccount;
            if (accountNumber != null){
                if (AccountManager.getInstance().hasAccountByAccountNumberAndSystem(accountNumber, System.DERIV)){
                    account = AccountManager.getInstance().getAccountByAccountNumberAndSystem(accountNumber, System.DERIV);
                };
            };
            return (account);
        }
        private function getAccountFromOrderStatusByNumberRequestMessageSub(message:RequestMessage):String{
            var subMessage:Message;
            var list:Vector.<Message>;
            var subsubMessage:Message;
            var accountNumber:String;
            var messageList:Array = [message];
            while (messageList.length > 0) {
                subMessage = messageList.pop();
                if (subMessage.type.isOrderStatusByNumberDerivativesRequest()){
                    accountNumber = OrderStatusByNumberDerivativesRequestMessage(subMessage).orderStatus.accountNumber;
                    break;
                };
                if ((subMessage is IMultipleMessage)){
                    list = IMultipleMessage(subMessage).messageList;
                    for each (subsubMessage in list) {
                        messageList.push(subsubMessage);
                    };
                };
            };
            return (accountNumber);
        }
        private function getAccountFromOrderStatusRequestMessage(message:RequestMessage):Account{
            var accountNumber:String = this.getAccountFromOrderStatusRequestMessageSub(message);
            var account:Account = AccountManager.getInstance().currentAccount;
            if (accountNumber != null){
                if (AccountManager.getInstance().hasAccountByAccountNumberAndSystem(accountNumber, System.DERIV)){
                    account = AccountManager.getInstance().getAccountByAccountNumberAndSystem(accountNumber, System.DERIV);
                } else {
                    if (accountNumber == Account.ALL_DERIVATIVES.accountNumber){
                        account = Account.ALL_DERIVATIVES;
                    };
                };
            };
            return (account);
        }
        private function getAccountFromOrderStatusRequestMessageSub(message:RequestMessage):String{
            var subMessage:Message;
            var list:Vector.<Message>;
            var subsubMessage:Message;
            var accountNumber:String;
            var messageList:Array = [message];
            while (messageList.length > 0) {
                subMessage = messageList.pop();
                if (((subMessage.type.isOrderStausDerivativesRequest()) || (subMessage.type.isOrderStatusAllDerivativesRequest()))){
                    accountNumber = OrderStatusDerivativesRequestMessage(subMessage).accountNo;
                    break;
                };
                if (subMessage.type.isCancelOrderDerivativesRequest()){
                    accountNumber = CancelOrderDerivativesRequestMessage(subMessage).accountNumber;
                } else {
                    if ((subMessage is IMultipleMessage)){
                        list = IMultipleMessage(subMessage).messageList;
                        for each (subsubMessage in list) {
                            messageList.push(subsubMessage);
                        };
                    };
                };
            };
            return (accountNumber);
        }
        private function parsePortfolio(message:StringResponseMessage, dataArray:Array):Message{
            var account:Account;
            var accountNumber:String;
            var portfolioDerivativesResponseMessage:PortfolioDerivativesResponseMessage;
            var numSubData:int;
            var index:int;
            var dataToken:String;
            var portfolio:PortfolioDerivatives;
            var alertMessage:String;
            var status:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(dataArray[STATUS_INDEX]);
            var parseMessage:Message;
            if (status.isSuccess()){
                account = this.getAccountFromPortfolioRequestMessage(message.requestMessage);
                accountNumber = "";
                if (account != null){
                    accountNumber = account.accountNumber;
                };
                portfolioDerivativesResponseMessage = new PortfolioDerivativesResponseMessage(message.requestMessage, message.source, accountNumber);
                numSubData = int(dataArray[SUB_DATA_COUNT_INDEX]);
                index = SUB_DATA_START_INDEX;
                while (index < (SUB_DATA_START_INDEX + numSubData)) {
                    dataToken = dataArray[index];
                    portfolio = this.parsePortfolioToken(dataToken);
                    portfolioDerivativesResponseMessage.addPortfolio(portfolio);
                    index++;
                };
                parseMessage = portfolioDerivativesResponseMessage;
            } else {
                alertMessage = dataArray[WARN_FAIL_MESSAGE_INDEX];
                parseMessage = new PortfolioDerivativesFailResponseMessage(message.requestMessage, message.source, alertMessage);
            };
            return (parseMessage);
        }
        private function parsePortfolioToken(str:String):PortfolioDerivatives{
            var token:Array = str.split(Delimiter.LEVEL1);
            var index:int;
            var _temp1 = index;
            index = (index + 1);
            var instrumentId:String = token[_temp1];
            var _temp2 = index;
            index = (index + 1);
            var side:DerivativesOrderSide = DerivativesOrderSide.lookupFromOrder(token[_temp2]);
            var _temp3 = index;
            index = (index + 1);
            var startVolume:Number = Number(token[_temp3]);
            var _temp4 = index;
            index = (index + 1);
            var availableVolume:Number = Number(token[_temp4]);
            var _temp5 = index;
            index = (index + 1);
            var actualVolume:Number = Number(token[_temp5]);
            var _temp6 = index;
            index = (index + 1);
            var averagePrice:Number = Number(token[_temp6]);
            var _temp7 = index;
            index = (index + 1);
            var marketPrice:Number = Number(token[_temp7]);
            var _temp8 = index;
            index = (index + 1);
            var amount:Number = Number(token[_temp8]);
            var _temp9 = index;
            index = (index + 1);
            var marketValue:Number = Number(token[_temp9]);
            var _temp10 = index;
            index = (index + 1);
            var unrealizedProfit:Number = Number(token[_temp10]);
            var _temp11 = index;
            index = (index + 1);
            var percentUnrealizedProfit:Number = Number(token[_temp11]);
            var _temp12 = index;
            index = (index + 1);
            var realizeProfit:Number = Number(token[_temp12]);
            var _temp13 = index;
            index = (index + 1);
            var multiplier:Number = Number(token[_temp13]);
            var _temp14 = index;
            index = (index + 1);
            var optionsValue:Number = Number(token[_temp14]);
            var _temp15 = index;
            index = (index + 1);
            var unrealizedProfitByAverageCost:Number = Number(token[_temp15]);
            var _temp16 = index;
            index = (index + 1);
            var percentUnrealizedProfitByAverageCost:Number = Number(token[_temp16]);
            var _temp17 = index;
            index = (index + 1);
            var realizeProfitByAverageCost:Number = Number(token[_temp17]);
            var _temp18 = index;
            index = (index + 1);
            var averageCost:Number = Number(token[_temp18]);
            var _temp19 = index;
            index = (index + 1);
            var amountByAverageCost:Number = Number(token[_temp19]);
            var _temp20 = index;
            index = (index + 1);
            var priceDigit:int = int(token[_temp20]);
            var portfolio:PortfolioDerivatives = new PortfolioDerivatives(instrumentId, side, startVolume, availableVolume, actualVolume, averagePrice, marketPrice, amount, marketValue, unrealizedProfit, percentUnrealizedProfit, realizeProfit, multiplier, optionsValue, unrealizedProfitByAverageCost, percentUnrealizedProfitByAverageCost, realizeProfitByAverageCost, averageCost, amountByAverageCost, priceDigit);
            return (portfolio);
        }
        private function getAccountFromPortfolioRequestMessage(message:RequestMessage):Account{
            var accountNumber:String = this.getAccountNumberFromPortfolioRequestMessageSub(message);
            var account:Account = AccountManager.getInstance().currentAccount;
            if (accountNumber != null){
                if (AccountManager.getInstance().hasAccountByAccountNumberAndSystem(accountNumber, System.DERIV)){
                    account = AccountManager.getInstance().getAccountByAccountNumberAndSystem(accountNumber, System.DERIV);
                };
            };
            return (account);
        }
        private function getAccountNumberFromPortfolioRequestMessageSub(message:RequestMessage):String{
            var subMessage:Message;
            var list:Vector.<Message>;
            var subsubMessage:Message;
            var accountNumber:String;
            var messageList:Array = [message];
            while (messageList.length > 0) {
                subMessage = messageList.pop();
                if (subMessage.type.isPortfolioDerivativesRequest()){
                    accountNumber = PortfolioDerivativesRequestMessage(subMessage).accountNo;
                    break;
                };
                if ((subMessage is IMultipleMessage)){
                    list = IMultipleMessage(subMessage).messageList;
                    for each (subsubMessage in list) {
                        messageList.push(subsubMessage);
                    };
                };
            };
            return (accountNumber);
        }
        private function parseAccountInfo(message:StringResponseMessage, dataArray:Array):Message{
            var account:Account;
            var accountNumber:String;
            var subData:String;
            var subDataArray:Array;
            var index:int;
            var creditLine:Number;
            var excessEquity:Number;
            var cashBalance:Number;
            var englishName:String;
            var totalMR:Number;
            var totalMM:Number;
            var callForceFlag:String;
            var callForceMargin:Number;
            var alertMessage:String;
            var status:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(dataArray[STATUS_INDEX]);
            var parseMessage:Message;
            if (status.isSuccess()){
                account = this.getAccountNumberFromAccountInfoMessage(message.requestMessage);
                accountNumber = "";
                if (account != null){
                    accountNumber = account.accountNumber;
                };
                subData = dataArray[SUB_DATA_START_INDEX];
                subDataArray = subData.split(Delimiter.LEVEL1);
                index = 0;
                var _temp1 = index;
                index = (index + 1);
                creditLine = Number(subDataArray[_temp1]);
                var _temp2 = index;
                index = (index + 1);
                excessEquity = Number(subDataArray[_temp2]);
                var _temp3 = index;
                index = (index + 1);
                cashBalance = Number(subDataArray[_temp3]);
                var _temp4 = index;
                index = (index + 1);
                englishName = subDataArray[_temp4];
                var _temp5 = index;
                index = (index + 1);
                totalMR = Number(subDataArray[_temp5]);
                var _temp6 = index;
                index = (index + 1);
                totalMM = Number(subDataArray[_temp6]);
                var _temp7 = index;
                index = (index + 1);
                callForceFlag = subDataArray[_temp7];
                var _temp8 = index;
                index = (index + 1);
                callForceMargin = Number(subDataArray[_temp8]);
                parseMessage = new AccountInfoDerivativesResponseMessage(message.requestMessage, message.source, accountNumber, creditLine, excessEquity, cashBalance, englishName, totalMR, totalMM, callForceFlag, callForceMargin);
            } else {
                alertMessage = dataArray[WARN_FAIL_MESSAGE_INDEX];
                parseMessage = new AccountInfoDerivativesFailResponseMessage(message.requestMessage, message.source, alertMessage);
            };
            return (parseMessage);
        }
        private function getAccountNumberFromAccountInfoMessage(message:RequestMessage):Account{
            var accountNumber:String = this.getAccountNumberFromAccountInfoMessageSub(message);
            var account:Account = AccountManager.getInstance().currentAccount;
            if (accountNumber != null){
                if (AccountManager.getInstance().hasAccountByAccountNumberAndSystem(accountNumber, System.DERIV)){
                    account = AccountManager.getInstance().getAccountByAccountNumberAndSystem(accountNumber, System.DERIV);
                };
            };
            return (account);
        }
        private function getAccountNumberFromAccountInfoMessageSub(message:RequestMessage):String{
            var subMessage:Message;
            var list:Vector.<Message>;
            var subsubMessage:Message;
            var accountNumber:String;
            var messageList:Array = [message];
            while (messageList.length > 0) {
                subMessage = messageList.pop();
                if (subMessage.type.isAccountInfoDerivativesRequest()){
                    accountNumber = AccountInfoDerivativesRequestMessage(subMessage).accountNo;
                    break;
                };
                if ((subMessage is IMultipleMessage)){
                    list = IMultipleMessage(subMessage).messageList;
                    for each (subsubMessage in list) {
                        messageList.push(subsubMessage);
                    };
                };
            };
            return (accountNumber);
        }
        private function parsePlaceOrderOrCancel(message:StringResponseMessage, dataArray:Array):Message{
            if (message.requestMessage == null){
                logger.error("Request Message not found");
                return (new InvalidParseMessage(message, null, message.requestMessage));
            };
            if (((message.requestMessage.type.isPlaceOrderDerivativesRequest()) || (message.requestMessage.type.isPlaceOrderDerivativesConfirmRequest()))){
                return (this.parsePlaceOrder(message, dataArray));
            };
            if (message.requestMessage.type.isCancelOrderDerivativesRequest()){
                return (this.parseCancelOrder(message, dataArray));
            };
            logger.error("Invalid Message Type");
            return (new InvalidParseMessage(message, null, message.requestMessage));
        }
        private function parsePlaceOrder(message:StringResponseMessage, dataArray:Array):Message{
            var index:int;
            var alertMessage:String;
            var orderNumber:String;
            var warnMessage:String;
            var failMessage:String;
            var status:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(dataArray[STATUS_INDEX]);
            var parseMessage:Message;
            if (status.isSuccess()){
                index = SUB_DATA_START_INDEX;
                var _temp1 = index;
                index = (index + 1);
                alertMessage = dataArray[_temp1];
                var _temp2 = index;
                index = (index + 1);
                orderNumber = dataArray[_temp2];
                parseMessage = new PlaceOrderDerivativesResponseMessage(message.requestMessage, message.source, alertMessage, orderNumber);
            } else {
                if (status.isWarning()){
                    warnMessage = dataArray[WARN_FAIL_MESSAGE_INDEX];
                    parseMessage = new PlaceOrderDerivativesWarnResponseMessage(message.requestMessage, message.source, warnMessage);
                } else {
                    failMessage = dataArray[WARN_FAIL_MESSAGE_INDEX];
                    parseMessage = new PlaceOrderDerivativesFailResponseMessage(message.requestMessage, message.source, failMessage);
                };
            };
            return (parseMessage);
        }
        private function parseCancelOrder(message:StringResponseMessage, dataArray:Array):Message{
            var index:int;
            var alertMessage:String;
            var failMessage:String;
            var status:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(dataArray[STATUS_INDEX]);
            var parseMessage:Message;
            if (status.isSuccess()){
                index = SUB_DATA_START_INDEX;
                var _temp1 = index;
                index = (index + 1);
                alertMessage = dataArray[_temp1];
                parseMessage = new CancelOrderDerivativesResponseMessage(message.requestMessage, message.source, alertMessage);
            } else {
                failMessage = dataArray[WARN_FAIL_MESSAGE_INDEX];
                parseMessage = new CancelOrderDerivativesFailResponseMessage(message.requestMessage, message.source, failMessage);
            };
            return (parseMessage);
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser.customized.b004 {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.datacomponent.parser.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.message.control.*;
    import com.settrade.streaming5.message.customized.b004.response.*;
    import com.settrade.streaming5.message.customized.b004.request.*;

    public class JsonBrainBoxMessageParser implements IMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        public function JsonBrainBoxMessageParser(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            var objectResponseMessage:* = null;
            var requestMsg:* = null;
            var message:* = message;
            logger.info(("Parse Message type " + message.type.name));
            if (!message.type.isObjectResponse()){
                throw (new InvalidMessageTypeError(message));
            };
            objectResponseMessage = ObjectResponseMessage(message);
            requestMsg = BullishBearishSpecificTabRequestMessage(objectResponseMessage.requestMessage);
            if ((((requestMsg == null)) || ((requestMsg.instrumentType == null)))){
                return (new InvalidParseMessage(message, null, objectResponseMessage.requestMessage));
            };
            if (requestMsg.instrumentType.isIndex()){
                return (this.parseBullishBearishForIndex(objectResponseMessage));
            };
            return (this.parseBullishBearishForGeneral(objectResponseMessage));
            var _slot1:* = error;
            throw (new InvalidMessageTypeError(message));
        }
        private function parseBullishBearishForIndex(objectResponseMessage:ObjectResponseMessage):Message{
            logger.info("Parse Bullish Bearish for Index");
            if ((((objectResponseMessage == null)) || ((objectResponseMessage.data == null)))){
                return (new InvalidParseMessage(objectResponseMessage, null, objectResponseMessage.requestMessage));
            };
            var data:Object = objectResponseMessage.data;
            logger.debug(("bearish :: " + data.bearish));
            var symbol:String = data.sym;
            var horizon:String = data.trading_horizon;
            var bearishCount:Number = Number(data.bearish);
            var bullishCount:Number = Number(data.bullish);
            var message:BullishBearishSpecificTabResponseMessage = new BullishBearishSpecificTabResponseMessage(objectResponseMessage.requestMessage, objectResponseMessage.source, symbol, horizon, bearishCount, bullishCount);
            return (message);
        }
        private function parseBullishBearishForGeneral(objectResponseMessage:ObjectResponseMessage):Message{
            logger.info("Parse Bullish Bearish for General");
            if ((((((objectResponseMessage == null)) || ((objectResponseMessage.data == null)))) || ((objectResponseMessage.data.data == null)))){
                return (new InvalidParseMessage(objectResponseMessage, null, objectResponseMessage.requestMessage));
            };
            var data:Object = objectResponseMessage.data.data[0];
            var symbol:String = data.symbol;
            var horizon:String = BullishBearishSpecificTabRequestMessage(objectResponseMessage.requestMessage).trading_horizon;
            logger.debug(("bearish :: " + data.bearish));
            var bearishCount:Number = Number(data.bearish);
            var bullishCount:Number = Number(data.bullish);
            var message:BullishBearishSpecificTabResponseMessage = new BullishBearishSpecificTabResponseMessage(objectResponseMessage.requestMessage, objectResponseMessage.source, symbol, horizon, bearishCount, bullishCount);
            return (message);
        }

    }
}//package com.settrade.streaming5.datacomponent.parser.customized.b004 
﻿package com.settrade.streaming5.datacomponent.parser.customized.b004 {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.datacomponent.parser.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.message.control.*;
    import com.settrade.streaming5.message.customized.b004.response.*;

    public class BrainBoxMessageParser implements IMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        public function BrainBoxMessageParser(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            var stringResponseMessage:* = null;
            var responseString:* = null;
            var xml:* = null;
            var requestMessage:* = null;
            var parseMessage:* = null;
            var currency:* = null;
            var exchangeName:* = null;
            var issueType:* = null;
            var companyName:* = null;
            var symbol:* = null;
            var type:* = null;
            var bearishCount:* = NaN;
            var bearishUpperClosestTargetPrice:* = NaN;
            var bearishLowerClosestTargetPrice:* = NaN;
            var bullishCount:* = NaN;
            var bullishUpperClosestTargetPrice:* = NaN;
            var bullishLowerClosestTargetPrice:* = NaN;
            var errorMessage:* = null;
            var valueColor:* = null;
            var valueDescription:* = null;
            var rorEstimate:* = null;
            var supportPrice:* = null;
            var supportWeight:* = null;
            var supportTouches:* = null;
            var supportType:* = null;
            var resistancePrice:* = null;
            var resistanceWeight:* = null;
            var resistanceTouches:* = null;
            var resistanceType:* = null;
            var supportAndResistanceList:* = null;
            var startDate:* = null;
            var endDate:* = null;
            var supportAndResistanceXml:* = null;
            var sr:* = null;
            var message:* = message;
            if ((!(message) is StringResponseMessage)){
                throw (new InvalidMessageTypeError(message));
            };
            stringResponseMessage = StringResponseMessage(message);
            responseString = stringResponseMessage.data;
            xml = new XML(responseString);
            requestMessage = stringResponseMessage.requestMessage;
            parseMessage = null;
            switch (requestMessage.type){
                case MessageType.DBSV_TECHNICAL_INSIGHT_REQUEST:
                    currency = xml.summary[0].instrument[0].currency_symbol;
                    exchangeName = xml.summary[0].instrument[0].exchange_symbol;
                    issueType = xml.summary[0].instrument[0].issue_type;
                    companyName = xml.summary[0].instrument[0].name;
                    symbol = xml.summary[0].instrument[0].symbol;
                    type = xml.summary[0].instrument[0].type;
                    bearishCount = xml.summary[0].bearish[0].count;
                    bearishUpperClosestTargetPrice = xml.summary[0].bearish[0].closest_target_price_range[0].upper;
                    bearishLowerClosestTargetPrice = xml.summary[0].bearish[0].closest_target_price_range[0].lower;
                    bullishCount = xml.summary[0].bullish[0].count;
                    bullishUpperClosestTargetPrice = xml.summary[0].bullish[0].closest_target_price_range[0].upper;
                    bullishLowerClosestTargetPrice = xml.summary[0].bullish[0].closest_target_price_range[0].lower;
                    errorMessage = new Array();
                    parseMessage = new TechnicalInsightResponseMessage(requestMessage, stringResponseMessage.source, currency, exchangeName, issueType, companyName, symbol, type, bearishCount, bearishUpperClosestTargetPrice, bearishLowerClosestTargetPrice, bullishCount, bullishUpperClosestTargetPrice, bullishLowerClosestTargetPrice, errorMessage);
                    break;
                case MessageType.DBSV_VALUE_ANALYZER_REQUEST:
                    currency = xml.instrument[0].currency_symbol;
                    exchangeName = xml.instrument[0].exchange_symbol;
                    issueType = xml.instrument[0].issue_type;
                    companyName = xml.instrument[0].name;
                    symbol = xml.instrument[0].symbol;
                    type = xml.instrument[0].type;
                    valueColor = xml.value_color;
                    valueDescription = xml.value_description;
                    rorEstimate = xml.ror_estimate;
                    errorMessage = new Array();
                    parseMessage = new ValueAnalyzerResponseMessage(requestMessage, stringResponseMessage.source, currency, exchangeName, issueType, companyName, symbol, type, valueColor, valueDescription, rorEstimate, errorMessage);
                    break;
                case MessageType.DBSV_SUPPORT_AND_RESISTANCE_REQUEST:
                    supportPrice = "";
                    supportWeight = "";
                    supportTouches = "";
                    supportType = "";
                    resistancePrice = "";
                    resistanceWeight = "";
                    resistanceTouches = "";
                    resistanceType = "";
                    supportAndResistanceList = new Array();
                    for each (supportAndResistanceXml in xml.list[0].support_and_resistance) {
                        supportAndResistanceList.push(supportAndResistanceXml);
                    };
                    for each (sr in supportAndResistanceList) {
                        if (sr.type == "S"){
                            supportPrice = sr.price;
                            supportWeight = sr.weight;
                            supportTouches = sr.touches;
                            supportType = sr.type;
                        } else {
                            if (sr.type == "R"){
                                resistancePrice = sr.price;
                                resistanceWeight = sr.weight;
                                resistanceTouches = sr.touches;
                                resistanceType = sr.type;
                            };
                        };
                    };
                    parseMessage = new SupportAndResistanceResponseMessage(requestMessage, stringResponseMessage.source, supportPrice, supportWeight, supportTouches, supportType, resistancePrice, resistanceWeight, resistanceTouches, resistanceType);
                    break;
                case MessageType.DBSV_START_DATE_END_DATE_REQUEST:
                    startDate = xml.value_lookup.charting.fundamental_chart.start_date;
                    endDate = xml.value_lookup.charting.fundamental_chart.end_date;
                    errorMessage = new Array();
                    parseMessage = new StartDateEndDateResponseMessage(requestMessage, stringResponseMessage.source, startDate, endDate, errorMessage);
                    break;
                default:
                    return (new InvalidParseMessage(message, null, requestMessage));
            };
            return (parseMessage);
            var _slot1:* = error;
            logger.error("Cannot Parse Message");
            return (new InvalidParseMessage(message, null, requestMessage));
        }

    }
}//package com.settrade.streaming5.datacomponent.parser.customized.b004 
﻿package com.settrade.streaming5.datacomponent.parser.customized.b002 {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.datacomponent.parser.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.streaming5.message.customized.b002.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.message.control.*;

    public class JsonMessageParser implements IMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        public function JsonMessageParser(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            logger.info(("Parse Message type " + message.type.name));
            if (!message.type.isObjectResponse()){
                throw (new InvalidMessageTypeError(message));
            };
            var objectResponseMessage:ObjectResponseMessage = ObjectResponseMessage(message);
            var data:Object = objectResponseMessage.data;
            var responseStatus:FeedResponseStatus = FeedResponseStatus.lookup(data.result);
            switch (responseStatus){
                case FeedResponseStatus.SUCCESS:
                    return (this.parseSuccessMessage(objectResponseMessage));
                case FeedResponseStatus.FAILED:
                    return (this.parseFailMessage(objectResponseMessage));
            };
            return (new InvalidParseMessage(message, null, objectResponseMessage.requestMessage));
        }
        private function parseSuccessMessage(objectResponseMessage:ObjectResponseMessage):Message{
            var parseMessage:Message;
            logger.info("Parse Success");
            var data:Object = objectResponseMessage.data;
            var service:FeedServiceType = FeedServiceType.lookUpFromStrId(data.service);
            switch (service){
                case FeedServiceType.TISCO_SETTLEMENT_INFO:
                    return (this.parseSettlementInfo(objectResponseMessage));
                case FeedServiceType.TISCO_STOCK_INFO:
                    return (this.parseStockInfo(objectResponseMessage));
                case FeedServiceType.TISCO_VOL_FOCUS_LIST:
                    return (this.parseVolFocusList(objectResponseMessage));
            };
            return (parseMessage);
        }
        private function parseSettlementInfo(objectResponseMessage:ObjectResponseMessage):Message{
            logger.info("Parse Settlement Info");
            var data:Object = objectResponseMessage.data.data;
            if (data == null){
                return (new InvalidParseMessage(objectResponseMessage, null, objectResponseMessage.requestMessage));
            };
            var accountNumber:String = data.accountNumber;
            var asOfDate:String = data.asOfDate;
            var tDate:String = data.tDate;
            var tAmount:String = data.tAmount;
            var tSide:String = data.tSide;
            var t1Date:String = data.t1Date;
            var t1Amount:String = data.t1Amount;
            var t1Side:String = data.t1Side;
            var t2Date:String = data.t2Date;
            var t2Amount:String = data.t2Amount;
            var t2Side:String = data.t2Side;
            var creditType:String = data.creditType;
            var message:SettlementInfoResponseMessage = new SettlementInfoResponseMessage(objectResponseMessage.requestMessage, objectResponseMessage.source, accountNumber, asOfDate, tDate, tAmount, tSide, t1Date, t1Amount, t1Side, t2Date, t2Amount, t2Side, creditType);
            return (message);
        }
        private function parseStockInfo(objectResponseMessage:ObjectResponseMessage):Message{
            logger.info("Parse Stock Info");
            var data:Object = objectResponseMessage.data.data;
            if (data == null){
                return (new InvalidParseMessage(objectResponseMessage, null, objectResponseMessage.requestMessage));
            };
            var stockInfo:StockInfo = new StockInfo(data);
            var message:StockInfoResponseMessage = new StockInfoResponseMessage(objectResponseMessage.requestMessage, objectResponseMessage.source, stockInfo);
            return (message);
        }
        private function parseVolFocusList(objectResponseMessage:ObjectResponseMessage):Message{
            var obj:Object;
            var stockInfo:StockInfo;
            logger.info("Parse Vol Focus");
            var data:Array = objectResponseMessage.data.data;
            if (data == null){
                return (new InvalidParseMessage(objectResponseMessage, null, objectResponseMessage.requestMessage));
            };
            var message:VolFocusListResponseMessage = new VolFocusListResponseMessage(objectResponseMessage.requestMessage, objectResponseMessage.source);
            for each (obj in data) {
                stockInfo = new StockInfo(obj);
                message.addStockInfo(stockInfo);
            };
            return (message);
        }
        private function parseFailMessage(objectResponseMessage:ObjectResponseMessage):Message{
            logger.info("Parse Fail");
            var data:Object = objectResponseMessage.data;
            var message:String = data.strMsg;
            message = (((message == null)) ? "" : message);
            return (new FailResponseMessage(objectResponseMessage.requestMessage, objectResponseMessage.source, message));
        }

    }
}//package com.settrade.streaming5.datacomponent.parser.customized.b002 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.message.response.fastquote.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.streaming5.error.*;

    public class FastQuoteDerivativesMessageParser implements IMessageParser {

        public function FastQuoteDerivativesMessageParser(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            var parseMessage:FastQuoteDerivativesResponseMessage;
            var i:int;
            if (!message.type.isObjectResponse()){
                throw (new InvalidMessageTypeError(message));
            };
            var responseMessage:ObjectResponseMessage = ObjectResponseMessage(message);
            var data:Object = responseMessage.data;
            var instrumentId:String = data.symbol;
            if (instrumentId != null){
                parseMessage = new FastQuoteDerivativesResponseMessage(responseMessage.requestMessage, responseMessage.source, instrumentId);
                Array[7];
                Array[7];
                if (((((!((data.statetypelabel == null))) && (!((data.statetypeval == null))))) && ((data.statetypelabel.length == data.statetypeval.length)))){
                    i = 0;
                    while (i < data.statetypelabel.length) {
                        parseMessage.addStateType(new StateType(data.statetypelabel[i], data.statetypeval[i]));
                        i++;
                    };
                };
                return (parseMessage);
            };
            return (new FailResponseMessage(responseMessage.requestMessage, responseMessage.source, ""));
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.message.control.*;

    public class AccountListHierachyDerivativesMessageParser implements IMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        public function AccountListMessageParser(){
        }
        public function parseMessage(message:IRawMessage):Message{
            var data:Object;
            var _local5:Boolean;
            var _local6:Array;
            var _local7:String;
            if (!message.type.isObjectResponse()){
                throw (new InvalidMessageTypeError(message));
            };
            var responseMessage:ObjectResponseMessage = ObjectResponseMessage(message);
            data = responseMessage.data;
            var status:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(data.result);
            switch (status){
                case OrderResponseStatus.SUCCESS:
                    _local5 = data.isEnableHierarchy;
                    _local6 = data.accountList;
                    return (new AccountListHierachyDerivativeResponseMessage(responseMessage.requestMessage, responseMessage.source, _local5, _local6));
                case OrderResponseStatus.FAILED:
                    _local7 = data.message;
                    return (new FailResponseMessage(responseMessage.requestMessage, responseMessage.source, _local7));
            };
            return (new InvalidParseMessage(responseMessage, null, responseMessage.requestMessage));
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;

    public class GenerateKeyResponseMessageParser implements IMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        public function GenerateKeyResponseMessageParser(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            if (!message.type.isStringResponse()){
                throw (new InvalidMessageTypeError(message));
            };
            var responseMessage:StringResponseMessage = StringResponseMessage(message);
            return (this.parseGenerateKey(responseMessage));
        }
        protected function parseGenerateKey(message:StringResponseMessage):Message{
            var password:String;
            var host:String;
            var portStr:String;
            var port:int;
            var reason:String;
            var parseMessage:Message;
            var data:String = message.data;
            var dataList:Array = data.split(Delimiter.LEVEL1.value);
            var successFlag:String = dataList[0];
            if (successFlag == "T"){
                if (dataList.length == 4){
                    password = dataList[1];
                    host = dataList[2];
                    portStr = dataList[3];
                    port = int(portStr);
                    parseMessage = new GenerateKeyResponse(message.requestMessage, password, host, port);
                } else {
                    logger.error("GenerateKeyFailResponse Length == 4");
                    throw (new StringResponseMessageParseError(message));
                };
            } else {
                if (successFlag == "F"){
                    if (dataList.length == 2){
                        reason = dataList[1];
                        parseMessage = new GenerateKeyFailResponse(message.requestMessage, reason);
                    } else {
                        logger.error("GenerateKeyFailResponse Length == 2");
                        throw (new StringResponseMessageParseError(message));
                    };
                } else {
                    throw (new StringResponseMessageParseError(message));
                };
            };
            return (parseMessage);
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.message.control.*;

    public class AccountNameMessageParser implements IMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        public function GenerateKeyResponseMessageParser(){
        }
        public function parseMessage(message:IRawMessage):Message{
            if (!message.type.isStringResponse()){
                throw (new InvalidMessageTypeError(message));
            };
            var responseMessage:StringResponseMessage = StringResponseMessage(message);
            return (this.parseAccountName(responseMessage));
        }
        private function parseAccountName(responseMessage:StringResponseMessage):Message{
            var engName:String;
            var thaiName:String;
            var traderName:String;
            var i:*;
            var nameToken:Array;
            var lang:String;
            var name:String;
            var alertMessage:String;
            var data:String = responseMessage.data;
            var requestMessage:AccountNameRequestMessage = this.getRequestMessage(responseMessage);
            var dataToken:Array = data.split(Delimiter.LEVEL1);
            if (dataToken.length >= 1){
                if (dataToken[0] == "T"){
                    engName = "";
                    thaiName = "";
                    traderName = "";
                    i = 1;
                    while (i < dataToken.length) {
                        nameToken = dataToken[i].split(Delimiter.LEVEL2);
                        if (nameToken.length >= 2){
                            lang = nameToken[0];
                            name = nameToken[1];
                            if (lang == "EN"){
                                engName = name;
                            } else {
                                if (lang == "TH"){
                                    thaiName = name;
                                } else {
                                    if (lang == "TRADER"){
                                        traderName = name;
                                    };
                                };
                            };
                        };
                        i++;
                    };
                    return (new AccountNameResponseMessage(responseMessage.requestMessage, responseMessage.source, requestMessage.accountNumber, requestMessage.market, engName, thaiName, traderName));
                };
                if (dataToken[0] == "F"){
                    alertMessage = "";
                    if (dataToken.length >= 2){
                        alertMessage = dataToken[1];
                    };
                    return (new FailResponseMessage(responseMessage.requestMessage, responseMessage.source, alertMessage));
                };
            };
            return (new InvalidParseMessage(responseMessage, null, responseMessage.requestMessage));
        }
        private function getRequestMessage(responseMessage:StringResponseMessage):AccountNameRequestMessage{
            var subMessage:Message;
            var list:Vector.<Message>;
            var subsubMessage:Message;
            var accountNumber:String;
            var messageList:Array = [responseMessage.requestMessage];
            while (messageList.length > 0) {
                subMessage = messageList.pop();
                if (subMessage.type.isAccountNameRequest()){
                    return (AccountNameRequestMessage(subMessage));
                };
                if ((subMessage is IMultipleMessage)){
                    list = IMultipleMessage(subMessage).messageList;
                    for each (subsubMessage in list) {
                        messageList.push(subsubMessage);
                    };
                };
            };
            return (null);
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.message.control.*;

    public class UserCheckMessageParser implements IMessageParser {

        private static const AUTHORIZE_INDEX:int = 0;
        private static const DISPATCHER_STATUS_INDEX:int = 1;
        private static const CLIENT_STATE_INDEX:int = 2;
        private static const FEED_EQUITY_STATE_INDEX:int = 3;
        private static const FEED_DERIVATIVES_STATE_INDEX:int = 4;

        private static var logger:Logger = new Logger(prototype.constructor);

        public function UserCheckMessageParser(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            var responseMessage:* = null;
            var message:* = message;
            if (!message.type.isStringResponse()){
                throw (new InvalidMessageTypeError(message));
            };
            responseMessage = StringResponseMessage(message);
            return (this.parseUserCheck(responseMessage));
            var _slot1:* = error;
            logger.fatal("Cannot Parse Usercheck: Must terminate Program");
            logger.debug(_slot1.getStackTrace());
            return (new InvalidParseMessage(message, null, responseMessage.requestMessage));
        }
        private function parseUserCheck(responseMessage:StringResponseMessage):Message{
            var dispatcherStatus:Boolean;
            var clientState:FeedState;
            var feedEquityState:Boolean;
            var feedDerivativesState:Boolean;
            var dataStr:String = responseMessage.data;
            var dataToken:Array = dataStr.split(Delimiter.LEVEL1);
            var isAuthorize = (dataToken[AUTHORIZE_INDEX] == "T");
            if (isAuthorize){
                if (dataToken.length >= (DISPATCHER_STATUS_INDEX + 1)){
                    dispatcherStatus = (dataToken[DISPATCHER_STATUS_INDEX] == "T");
                    if (dispatcherStatus){
                        if (dataToken.length >= (FEED_DERIVATIVES_STATE_INDEX + 1)){
                            clientState = FeedState.lookUpFromStrId(dataToken[CLIENT_STATE_INDEX]);
                            feedEquityState = (dataToken[FEED_EQUITY_STATE_INDEX] == "Y");
                            feedDerivativesState = (dataToken[FEED_DERIVATIVES_STATE_INDEX] == "Y");
                            return (new UserCheckResponseMessage(responseMessage.system, responseMessage.requestMessage, responseMessage.source, clientState, feedEquityState, feedDerivativesState));
                        };
                    } else {
                        return (new DispatcherDownResponseMessage(responseMessage.system, responseMessage.requestMessage, responseMessage.source));
                    };
                };
            } else {
                return (new UnauthorizeResponseMessage(responseMessage.system, responseMessage.requestMessage, responseMessage.source));
            };
            logger.fatal("Cannot Parse Usercheck: Must terminate Program");
            return (new InvalidParseMessage(responseMessage, null, responseMessage.requestMessage));
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.response.orderstatus.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.message.control.*;

    public class OrderAjaxDerivativesMessageParser implements IMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        public function AccountListMessageParser(){
        }
        public function parseMessage(message:IRawMessage):Message{
            if (!message.type.isObjectResponse()){
                throw (new InvalidMessageTypeError(message));
            };
            var responseMessage:ObjectResponseMessage = ObjectResponseMessage(message);
            var object:Object = responseMessage.data;
            var result:FeedResponseStatus = FeedResponseStatus.lookup(object.result);
            switch (result){
                case FeedResponseStatus.SUCCESS:
                    return (this.parseOrder(object.data, responseMessage));
                case FeedResponseStatus.FAILED:
                    return (this.parseFailed(object.message, responseMessage));
                default:
                    return (new InvalidParseMessage(responseMessage, null, responseMessage.requestMessage));
            };
        }
        protected function parseFailed(message:String, responseMessage:ObjectResponseMessage):Message{
            return (new FailResponseMessage(responseMessage.requestMessage, responseMessage.source, message));
        }
        protected function parseOrder(obj:Object, responseMessage:ObjectResponseMessage):Message{
            var orderArray:Array;
            var message:OrderStatusSearchDerivativesResponseMessage = new OrderStatusSearchDerivativesResponseMessage(responseMessage.requestMessage, responseMessage.source);
            for each (orderArray in obj) {
                message.addOrder(this.parseOrderStatus(orderArray));
            };
            return (message);
        }
        protected function parseOrderStatus(orderArray:Array):OrderStatusDerivatives{
            var index:int;
            var _temp1 = index;
            index = (index + 1);
            var orderNumber:String = orderArray[_temp1];
            var _temp2 = index;
            index = (index + 1);
            var instrumentId:String = orderArray[_temp2];
            var _temp3 = index;
            index = (index + 1);
            var date:String = orderArray[_temp3];
            var _temp4 = index;
            index = (index + 1);
            var time:String = orderArray[_temp4];
            var _temp5 = index;
            index = (index + 1);
            var side:DerivativesOrderSide = DerivativesOrderSide.lookupFromOrder(orderArray[_temp5]);
            var _temp6 = index;
            index = (index + 1);
            var priceType:DerivativesPriceType = this.parsePriceType(orderArray[_temp6]);
            var _temp7 = index;
            index = (index + 1);
            var price:Number = Number(orderArray[_temp7]);
            var _temp8 = index;
            index = (index + 1);
            var volume:int = int(orderArray[_temp8]);
            var _temp9 = index;
            index = (index + 1);
            var matchedVolume:int = int(orderArray[_temp9]);
            var _temp10 = index;
            index = (index + 1);
            var balanceVolume:int = int(orderArray[_temp10]);
            var _temp11 = index;
            index = (index + 1);
            var cancelVolume:int = int(orderArray[_temp11]);
            var _temp12 = index;
            index = (index + 1);
            var validity:DerivativesValidity = this.parseValidity(orderArray[_temp12]);
            var _temp13 = index;
            index = (index + 1);
            var until:String = orderArray[_temp13];
            var _temp14 = index;
            index = (index + 1);
            var status:String = orderArray[_temp14];
            var _temp15 = index;
            index = (index + 1);
            var canCancel = (orderArray[_temp15] == "T");
            var _temp16 = index;
            index = (index + 1);
            var canChange = (orderArray[_temp16] == "T");
            var _temp17 = index;
            index = (index + 1);
            var position:DerivativesPosition = DerivativesPosition.lookupFromOrder(orderArray[_temp17]);
            var _temp18 = index;
            index = (index + 1);
            var enterId:String = orderArray[_temp18];
            var _temp19 = index;
            index = (index + 1);
            var accountNumber:String = orderArray[_temp19];
            var _temp20 = index;
            index = (index + 1);
            var canApprove = (orderArray[_temp20] == "T");
            var _temp21 = index;
            index = (index + 1);
            var priceDigit:int = int(orderArray[_temp21]);
            var _temp22 = index;
            index = (index + 1);
            var tfexOrderNumber:String = orderArray[_temp22];
            var _temp23 = index;
            index = (index + 1);
            var isStopOrder = (orderArray[_temp23] == "Y");
            var _temp24 = index;
            index = (index + 1);
            var canChangePriceVolume = (orderArray[_temp24] == "T");
            var _temp25 = index;
            index = (index + 1);
            var isStopOrderNotActivate:Boolean = this.parseIsStopOrderNotActivate(orderArray[_temp25]);
            var orderStatus:OrderStatusDerivatives = new OrderStatusDerivatives(orderNumber, instrumentId, time, side, price, volume, matchedVolume, balanceVolume, cancelVolume, validity, until, status, canCancel, canChange, position, enterId, accountNumber, canApprove, false, priceDigit, tfexOrderNumber, isStopOrder, date, false, priceType, canChangePriceVolume, isStopOrderNotActivate);
            return (orderStatus);
        }
        protected function parseIsStopOrderNotActivate(str:String):Boolean{
            return (false);
        }
        protected function parseValidity(str:String):DerivativesValidity{
            return (DerivativesValidity.lookupFromOrder(str));
        }
        protected function parsePriceType(str:String):DerivativesPriceType{
            if (str == "Market"){
                return (DerivativesPriceType.MP);
            };
            return (DerivativesPriceType.LIMIT);
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;

    public class ChangeOrderAjaxEquityMessageParser implements IMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        public function ChangeOrderAjaxEquityMessageParser(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            if (!message.type.isObjectResponse()){
                throw (new InvalidMessageTypeError(message));
            };
            var responseMessage:ObjectResponseMessage = ObjectResponseMessage(message);
            var object:Object = responseMessage.data;
            var result:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(object.result);
            var alertMessage:String = object.message;
            alertMessage = (((alertMessage == null)) ? "" : alertMessage);
            if (result.isSuccess()){
                return (new ChangeOrderEquityResponseMessage(responseMessage.requestMessage, responseMessage.source, alertMessage));
            };
            if (result.isWarning()){
                return (new ChangeOrderEquityWarnResponseMessage(responseMessage.requestMessage, responseMessage.source, alertMessage));
            };
            alertMessage = (((alertMessage == "")) ? "System Error" : alertMessage);
            return (new ChangeOrderEquityFailResponseMessage(responseMessage.requestMessage, responseMessage.source, alertMessage));
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import flash.utils.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.datacomponent.parser.customized.b004.*;
    import com.settrade.streaming5.datacomponent.parser.customized.b002.*;

    public class MessageParserFactory {

        public static var parserMap:Dictionary = new Dictionary();
        public static var stubMessageParser:IMessageParser = new StubMessageParser();
        public static var binaryMessageParser:IMessageParser = new DispatcherBinaryMessageParser();
        public static var pullMessageParser:IMessageParser = new DispatcherPullBinaryMessageParser();
        public static var generateKeyMessageParser:IMessageParser = new GenerateKeyResponseMessageParser();
        public static var orderEquityMessageParser:IMessageParser = new OrderEquityMessageParser();
        public static var orderDerivativesMessageParser:IMessageParser = new OrderDerivativesMessageParser();
        public static var dispatcherStringMessageParser:IMessageParser = new DispatcherStringMessageParser();
        public static var optionsCommissionMessageParser:IMessageParser = new OptionsCommissionMessageParser();
        public static var emptyMessageParser:IMessageParser = new EmptyMessageParse();
        public static var accountNameMessageParser:IMessageParser = new AccountNameMessageParser();
        public static var accountListMessageParser:IMessageParser = new AccountListMessageParser();
        public static var syncTimeMessageParser:IMessageParser = new SynctimeMessageParser();
        public static var userCheckMessageParser:IMessageParser = new UserCheckMessageParser();
        public static var staticDataMessageParser:IMessageParser = new StaticDataMessageParser();
        public static var newsInformationMessageParser:IMessageParser = new NewsInformationMessageParser();
        public static var oppDayMessageParser:IMessageParser = new OppDayMessageParser();
        public static var instrumentIdValidatorParser:IMessageParser = new InstrumentIdValidatorParser();
        public static var orderAjaxEquityMessageParser:IMessageParser = new OrderAjaxEquityMessageParser();
        public static var changeOrderAjaxEquityMessageParser:IMessageParser = new ChangeOrderAjaxEquityMessageParser();
        public static var changeOrderAjaxDerivativesMessageParser:IMessageParser = new ChangeOrderAjaxDerivativesMessageParser();
        public static var dataProviderJsonMessageParser:IMessageParser = new DataProviderJsonMessageParser();
        public static var orderAjaxDerivativesMessageParser:IMessageParser = new OrderAjaxDerivativesMessageParser();
        public static var blockTradeMessageParser:IMessageParser = new BlockTradeMessageParser();
        public static var accountListHierachyDerivativesMessageParser:IMessageParser = new AccountListHierachyDerivativesMessageParser();
        public static var accountInfoJsonMessageParser:IMessageParser = new AccountInfoJsonMessageParser();
        public static var fastQuoteDerivativesMessageParser:IMessageParser = new FastQuoteDerivativesMessageParser();
        public static var blockTradeInfoMessageParser:IMessageParser = new BlockTradeInfoMessageParser();
        public static var multipleOrderFavouriteEquityMessageParser:IMessageParser = new MultipleOrderFavouriteEquityMessageParser();
        public static var multipleOrderDerivativesMessageParser:IMessageParser = new MultipleOrderDerivativesMessageParser();
        public static var tiscoJsonMessageparser:IMessageParser = new JsonMessageParser();
        public static var dbsvXmlMessageParser:IMessageParser = new BrainBoxMessageParser();
        public static var dbsvJsonMessageParser:IMessageParser = new JsonBrainBoxMessageParser();

        public function MessageParserFactory(){
            super();
        }
        private static function initMap():void{
            parserMap[MessageFormat.STUB] = stubMessageParser;
            parserMap[MessageFormat.DISPATCHER_BINARY] = binaryMessageParser;
            parserMap[MessageFormat.DISPATCHER_BINARY_PULL] = pullMessageParser;
            parserMap[MessageFormat.STRING_GENERATE_KEY] = generateKeyMessageParser;
            parserMap[MessageFormat.ORDER_EQUITY] = orderEquityMessageParser;
            parserMap[MessageFormat.ORDER_DERIVATIVES] = orderDerivativesMessageParser;
            parserMap[MessageFormat.DISPATCHER_STRING] = dispatcherStringMessageParser;
            parserMap[MessageFormat.STRING_OPTIONS_COMM] = optionsCommissionMessageParser;
            parserMap[MessageFormat.EMPTY] = emptyMessageParser;
            parserMap[MessageFormat.ACCOUNT_NAME] = accountNameMessageParser;
            parserMap[MessageFormat.ACCOUNT_LIST] = accountListMessageParser;
            parserMap[MessageFormat.SYNC_TIME] = syncTimeMessageParser;
            parserMap[MessageFormat.USER_CHECK] = userCheckMessageParser;
            parserMap[MessageFormat.STATIC_DATA] = staticDataMessageParser;
            parserMap[MessageFormat.NEWS_INFORMATION] = newsInformationMessageParser;
            parserMap[MessageFormat.OPPDAY] = oppDayMessageParser;
            parserMap[MessageFormat.INSTRUMENT_ID_VALIDATOR] = instrumentIdValidatorParser;
            parserMap[MessageFormat.ORDER_AJAX_EQUITY] = orderAjaxEquityMessageParser;
            parserMap[MessageFormat.ORDER_AJAX_DERIVATIVES] = orderAjaxDerivativesMessageParser;
            parserMap[MessageFormat.CHANGE_EQUITY] = changeOrderAjaxEquityMessageParser;
            parserMap[MessageFormat.CHANGE_DERIVATIVES] = changeOrderAjaxDerivativesMessageParser;
            parserMap[MessageFormat.DATA_PROVIDER_JSON] = dataProviderJsonMessageParser;
            parserMap[MessageFormat.BLOCK_TRADE] = blockTradeMessageParser;
            parserMap[MessageFormat.ACCOUNT_LIST_HIERACHY_DERIVAITVES] = accountListHierachyDerivativesMessageParser;
            parserMap[MessageFormat.ACCOUNT_INFO_JSON] = accountInfoJsonMessageParser;
            parserMap[MessageFormat.FAST_QUOTE_DERIVATIVES] = fastQuoteDerivativesMessageParser;
            parserMap[MessageFormat.BLOCK_TRADE_INFO] = blockTradeInfoMessageParser;
            parserMap[MessageFormat.MULTIPLE_ORDER_FAVOURITE_EQUITY] = multipleOrderFavouriteEquityMessageParser;
            parserMap[MessageFormat.MULTIPLE_ORDER_EQUITY] = multipleOrderFavouriteEquityMessageParser;
            parserMap[MessageFormat.MULTIPLE_ORDER_FAVOURITE_DERIVATIVES] = multipleOrderDerivativesMessageParser;
            parserMap[MessageFormat.MULTIPLE_ORDER_DERIVATIVES] = multipleOrderDerivativesMessageParser;
            parserMap[MessageFormat.TISCO_JSON] = tiscoJsonMessageparser;
            parserMap[MessageFormat.DBSV_XML] = dbsvXmlMessageParser;
            parserMap[MessageFormat.DBSV_JSON] = dbsvJsonMessageParser;
        }
        public static function addOrReplaceMessageParser(format:MessageFormat, parser:IMessageParser):void{
            parserMap[format] = parser;
        }
        public static function getMessageParser(rawMessage:IRawMessage):IMessageParser{
            var parser:IMessageParser = IMessageParser(parserMap[rawMessage.messageFormat]);
            if (parser != null){
                return (parser);
            };
            throw (new InvalidMessageFormatError(rawMessage));
        }

        initMap();
    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;

    public class ChangeOrderAjaxDerivativesMessageParser implements IMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        public function ChangeOrderAjaxDerivativesMessageParser(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            if (!message.type.isObjectResponse()){
                throw (new InvalidMessageTypeError(message));
            };
            var responseMessage:ObjectResponseMessage = ObjectResponseMessage(message);
            var object:Object = responseMessage.data;
            var result:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(object.result);
            var alertMessage:String = object.message;
            alertMessage = (((alertMessage == null)) ? "" : alertMessage);
            if (result.isSuccess()){
                return (new ChangeOrderDerivativesResponseMessage(responseMessage.requestMessage, responseMessage.source, alertMessage));
            };
            if (result.isWarning()){
                return (new ChangeOrderDerivativesWarnResponseMessage(responseMessage.requestMessage, responseMessage.source, alertMessage));
            };
            alertMessage = (((alertMessage == "")) ? "System Error" : alertMessage);
            return (new ChangeOrderDerivativesFailResponseMessage(responseMessage.requestMessage, responseMessage.source, alertMessage));
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.response.oppday.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.message.control.*;

    public class OppDayMessageParser implements IMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        public function OppDayMessageParser(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            var binaryResponseMessage:* = null;
            var responseString:* = null;
            var xml:* = null;
            var requestMessage:* = null;
            var parseMessage:* = null;
            var oppDayXml:* = null;
            var year:* = null;
            var quarter:* = null;
            var company_id:* = null;
            var symbol:* = null;
            var name:* = null;
            var vdo:* = null;
            var presentation:* = null;
            var industry:* = null;
            var sector:* = null;
            var date:* = null;
            var time:* = null;
            var logo:* = null;
            var oppDay:* = null;
            var message:* = message;
            if ((!(message) is BinaryResponseMessage)){
                throw (new InvalidMessageTypeError(message));
            };
            binaryResponseMessage = BinaryResponseMessage(message);
            responseString = binaryResponseMessage.data.readMultiByte(binaryResponseMessage.data.length, "TIS-620");
            xml = new XML(responseString);
            requestMessage = binaryResponseMessage.requestMessage;
            parseMessage = null;
            switch (requestMessage.type){
                case MessageType.OPPDAY_LIVE_REQUEST:
                    parseMessage = new OppDayLiveResponseMessage(requestMessage, binaryResponseMessage.source);
                    break;
                case MessageType.OPPDAY_ARCHIVE_REQUEST:
                    parseMessage = new OppDayArchiveResponseMessage(requestMessage, binaryResponseMessage.source);
                    break;
                case MessageType.OPPDAY_SEARCH_REQUEST:
                    parseMessage = new OppDaySearchResponseMessage(requestMessage, binaryResponseMessage.source);
                    break;
                default:
                    return (new InvalidParseMessage(message, null, requestMessage));
            };
            for each (oppDayXml in xml.opportunity_day) {
                year = oppDayXml.year;
                quarter = oppDayXml.quarter;
                company_id = oppDayXml.company_id;
                symbol = oppDayXml.symbol;
                name = oppDayXml.name;
                vdo = oppDayXml.vdo;
                presentation = oppDayXml.presentation;
                industry = oppDayXml.industry;
                sector = oppDayXml.sector;
                date = this.convertDate(oppDayXml.oppdayDate);
                time = oppDayXml.oppdayTime;
                logo = oppDayXml.logo;
                oppDay = new Oppday(year, quarter, company_id, symbol, name, vdo, presentation, industry, sector, date, time, logo);
                parseMessage.add(oppDay);
            };
            return (parseMessage);
            var _slot1:* = error;
            logger.error("Cannot Parse Message");
            return (new InvalidParseMessage(message, null, null));
        }
        private function convertDate(oppdayDate:String):Date{
            var year:String;
            var month:int;
            var date:String;
            if (oppdayDate.length < 8){
                return (new Date());
            };
            year = oppdayDate.substr(0, 4);
            month = (int(oppdayDate.substr(4, 2)) - 1);
            date = oppdayDate.substr(6, 2);
            return (new Date(year, month, date));
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.message.control.*;

    public class AccountListMessageParser implements IMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        const STATUS_INDEX:int = 0;
        const DATA_START_INDEX:int = 1;

        public function AccountListMessageParser(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            if (!message.type.isObjectResponse()){
                throw (new InvalidMessageTypeError(message));
            };
            var responseMessage:ObjectResponseMessage = ObjectResponseMessage(message);
            return (this.parseAccounListEquity(responseMessage));
        }
        public function parseAccounListEquity(responseMessage:ObjectResponseMessage):Message{
            switch (StreamingAttribute.userRoleEquity){
                case UserRole.INVESTOR:
                    return (this.parseInvestorAccountListEquity(responseMessage));
                case UserRole.MARKETREP1:
                case UserRole.MARKETREP2:
                    return (this.parseMarketRepAccountListEquity(responseMessage));
                default:
                    return (new InvalidParseMessage(responseMessage, null, responseMessage.requestMessage));
            };
        }
        public function parseInvestorAccountListEquity(responseMessage:ObjectResponseMessage):Message{
            var data:Object;
            var _local4:String;
            var _local5:AccountListEquityResponseMessage;
            var _local6:Array;
            var _local7:Object;
            var _local8:String;
            var account:Object;
            var accountNumber:String;
            var orderType:OrderType;
            var tradeType:String;
            var canTrade:Boolean;
            var canUseMultipleOrder:Boolean;
            var sblFlag:Boolean;
            var clientType:String;
            var accountEquity:AccountEquity;
            var turnoverList:Object;
            var level:String;
            var turnOverListList:Array;
            data = responseMessage.data;
            var status:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(data.result);
            switch (status){
                case OrderResponseStatus.SUCCESS:
                    _local4 = data.tradeNo;
                    _local5 = new AccountListEquityResponseMessage(responseMessage.requestMessage, responseMessage.source, _local4);
                    _local6 = data.accountInfoList;
                    for each (account in _local6) {
                        accountNumber = account.accountNo;
                        orderType = OrderType.lookUpFromId(account.orderType);
                        tradeType = account.tradeType;
                        canTrade = account.canTrade;
                        canUseMultipleOrder = account.canUseBasket;
                        sblFlag = (account.sblFlag == "Y");
                        clientType = account.clientType;
                        accountEquity = new AccountEquity(accountNumber, orderType, tradeType, canTrade, canUseMultipleOrder, sblFlag, clientType);
                        _local5.addAccount(accountEquity);
                    };
                    _local7 = data.turnoverList;
                    if (_local7 != null){
                        for each (turnoverList in _local7) {
                            level = turnoverList.type;
                            turnOverListList = turnoverList.list;
                            _local5.addTurnOverList(turnOverListList, level);
                        };
                    };
                    return (_local5);
                case OrderResponseStatus.FAILED:
                    _local8 = data.message;
                    return (new FailResponseMessage(responseMessage.requestMessage, responseMessage.source, _local8));
            };
            return (new InvalidParseMessage(responseMessage, null, responseMessage.requestMessage));
        }
        public function parseMarketRepAccountListEquity(responseMessage:ObjectResponseMessage):Message{
            var data:Object;
            var _local4:Boolean;
            var _local5:AccountListMarketRepEquityResponseMessage;
            var _local6:Object;
            var _local7:String;
            var turnoverList:Object;
            var level:String;
            var turnOverListList:Array;
            data = responseMessage.data;
            var status:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(data.result);
            switch (status){
                case OrderResponseStatus.SUCCESS:
                    _local4 = data.canUseMarketMaker;
                    _local5 = new AccountListMarketRepEquityResponseMessage(responseMessage.requestMessage, responseMessage.source, _local4);
                    _local6 = data.turnoverList;
                    if (_local6 != null){
                        for each (turnoverList in _local6) {
                            level = turnoverList.type;
                            turnOverListList = turnoverList.list;
                            _local5.addTurnOverList(turnOverListList, level);
                        };
                    };
                    return (_local5);
                case OrderResponseStatus.FAILED:
                    _local7 = data.message;
                    return (new FailResponseMessage(responseMessage.requestMessage, responseMessage.source, _local7));
            };
            return (new InvalidParseMessage(responseMessage, null, responseMessage.requestMessage));
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.message.control.*;

    public class InstrumentIdValidatorParser implements IMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        public function InstrumentIdValidatorParser(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            if (!message.type.isStringResponse()){
                throw (new InvalidMessageTypeError(message));
            };
            var responseMessage:StringResponseMessage = StringResponseMessage(message);
            return (this.parseInstrumentIdValidator(responseMessage));
        }
        private function parseInstrumentIdValidator(responseMessage:StringResponseMessage):Message{
            var alertMessage:String;
            var data:String = responseMessage.data;
            var dataToken:Array = data.split(Delimiter.LEVEL1);
            if (dataToken.length >= 1){
                if (dataToken[0] == "T"){
                    return (new InstrumentIdValidatorResponseMessage(responseMessage.requestMessage, responseMessage.source, true, ""));
                };
                if (dataToken.length >= 2){
                    alertMessage = dataToken[1];
                    return (new InstrumentIdValidatorResponseMessage(responseMessage.requestMessage, responseMessage.source, false, alertMessage));
                };
                return (new InvalidParseMessage(responseMessage, null, responseMessage.requestMessage));
            };
            return (new InvalidParseMessage(responseMessage, null, responseMessage.requestMessage));
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.message.control.*;

    public class SynctimeMessageParser implements IMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        public function SynctimeMessageParser(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            if (!message.type.isStringResponse()){
                throw (new InvalidMessageTypeError(message));
            };
            var responseMessage:StringResponseMessage = StringResponseMessage(message);
            return (this.parseSyncTime(responseMessage));
        }
        private function parseSyncTime(responseMessage:StringResponseMessage):Message{
            var serverReceiveTime:Number;
            var serverSendTime:Number;
            var dataStr:String = responseMessage.data;
            var dataToken:Array = dataStr.split(Delimiter.LEVEL1);
            if (dataToken.length >= 1){
                if (dataToken[0] == "T"){
                    if (dataToken.length >= 3){
                        serverReceiveTime = Number(dataToken[1]);
                        serverSendTime = Number(dataToken[2]);
                        return (new SyncTimeResponseMessage(responseMessage.requestMessage, responseMessage.source, serverReceiveTime, serverSendTime));
                    };
                    logger.error("Invalid Length");
                    return (new InvalidParseMessage(responseMessage, null, responseMessage.requestMessage));
                };
                return (new FailResponseMessage(responseMessage.requestMessage, responseMessage.source, ""));
            };
            logger.error("Invalid Length");
            return (new InvalidParseMessage(responseMessage, null, responseMessage.requestMessage));
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.message.response.blocktrade.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.message.control.*;

    public class BlockTradeMessageParser implements IMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        public function BlockTradeMessageParser(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            if (!message.type.isObjectResponse()){
                throw (new InvalidMessageTypeError(message));
            };
            var responseMessage:ObjectResponseMessage = ObjectResponseMessage(message);
            var mode:String = responseMessage.data.mode;
            switch (mode){
                case "init":
                    return (this.parseInit(responseMessage));
                case "getTRType":
                    return (this.parseTrType(responseMessage));
                case "place":
                    return (this.parsePlace(responseMessage));
            };
            return (new InvalidParseMessage(message, null, responseMessage.requestMessage));
        }
        protected function getResponseStatus(object:Object):OrderResponseStatus{
            var responseStatus:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(object.result);
            return (responseStatus);
        }
        private function getAlertMessage(object:Object):String{
            var alertMessage:String = object.message;
            return ((((alertMessage == null)) ? "" : alertMessage));
        }
        protected function parseFailMessage(responseMessage:ObjectResponseMessage):FailResponseMessage{
            var data:Object = responseMessage.data;
            var alertMessage:String = this.getAlertMessage(data);
            return (new FailResponseMessage(responseMessage.requestMessage, responseMessage.source, alertMessage));
        }
        private function parsePlace(responseMessage:ObjectResponseMessage):Message{
            var data:Object = responseMessage.data;
            var status:OrderResponseStatus = this.getResponseStatus(data);
            var alertMessage:String = this.getAlertMessage(data);
            switch (status){
                case OrderResponseStatus.SUCCESS:
                    return (new BlockTradeResponseMessage(responseMessage.requestMessage, responseMessage.source, alertMessage));
                case OrderResponseStatus.WARNING:
                    return (new BlockTradeWarnResponseMessage(responseMessage.requestMessage, responseMessage.source, alertMessage));
                case OrderResponseStatus.FAILED:
                    return (new BlockTradeFailResponseMessage(responseMessage.requestMessage, responseMessage.source, alertMessage));
            };
            return (new InvalidParseMessage(responseMessage, null, responseMessage.requestMessage));
        }
        private function parseInit(responseMessage:ObjectResponseMessage):Message{
            var data:Object;
            var _local4:BlockTradeInitResponseMessage;
            var _local5:String;
            var _local6:Array;
            var _local7:Array;
            var cpmObj:Object;
            var brokerId:String;
            var code:String;
            var cpm:Cpm;
            var trObj:Object;
            var condition:String;
            var className:String;
            var type:String;
            data = responseMessage.data;
            var status:OrderResponseStatus = this.getResponseStatus(data);
            switch (status){
                case OrderResponseStatus.SUCCESS:
                    _local4 = new BlockTradeInitResponseMessage(responseMessage.requestMessage, responseMessage.source);
                    _local5 = data.brokercpm;
                    _local6 = data.cpm;
                    for each (cpmObj in _local6) {
                        brokerId = cpmObj.id;
                        code = cpmObj.code;
                        cpm = new Cpm(brokerId, code);
                        if (brokerId == _local5){
                            _local4.brokerCpm = cpm;
                        };
                        _local4.addCpm(cpm);
                    };
                    _local7 = data.tradeReport;
                    for each (trObj in _local7) {
                        condition = trObj.condition;
                        className = trObj["class"];
                        type = trObj.type;
                        _local4.addTrType(new TrType(condition, className, type));
                    };
                    return (_local4);
                case OrderResponseStatus.FAILED:
                    return (this.parseFailMessage(responseMessage));
            };
            return (new InvalidParseMessage(responseMessage, null, responseMessage.requestMessage));
        }
        protected function parseTrType(responseMessage:ObjectResponseMessage):Message{
            var data:Object;
            var _local4:String;
            var _local5:Array;
            var _local6:BlockTradeTrTypeResponseMessage;
            data = responseMessage.data;
            var status:OrderResponseStatus = this.getResponseStatus(data);
            switch (status){
                case OrderResponseStatus.SUCCESS:
                    _local4 = data.trType;
                    _local5 = new Array();
                    _local5.push(_local4);
                    _local6 = new BlockTradeTrTypeResponseMessage(responseMessage.requestMessage, responseMessage.source, _local5);
                    return (_local6);
                case OrderResponseStatus.FAILED:
                    return (this.parseFailMessage(responseMessage));
            };
            return (new InvalidParseMessage(responseMessage, null, responseMessage.requestMessage));
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.raw.*;

    public interface IMessageParser {

        function parseMessage(_arg1:IRawMessage):Message;

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.request.multipleorder.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.streaming5.message.response.multipleorder.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.message.control.*;

    public class MultipleOrderFavouriteEquityMessageParser implements IMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        const DATA_START_INDEX:int = 5;

        public function MultipleOrderFavouriteEquityMessageParser(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            if ((!(message) is StringResponseMessage)){
                throw (new InvalidMessageTypeError(message));
            };
            var stringRawMessage:StringResponseMessage = StringResponseMessage(message);
            var responseString:String = stringRawMessage.data;
            var responseArray:Array = responseString.split(Delimiter.LEVEL2);
            if (!this.isValidArray(responseArray)){
                return (new InvalidParseMessage(stringRawMessage, null, stringRawMessage.requestMessage));
            };
            var status:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(responseArray[2]);
            switch (status){
                case OrderResponseStatus.SUCCESS:
                    return (this.parseSuccessMessage(stringRawMessage, responseArray));
                case OrderResponseStatus.WARNING:
                    return (this.parseWarnMessage(stringRawMessage, responseArray));
                case OrderResponseStatus.FAILED:
                    return (this.parseFail(stringRawMessage, responseArray));
            };
            return (new InvalidParseMessage(stringRawMessage, null, stringRawMessage.requestMessage));
        }
        private function parseWarnMessage(message:StringResponseMessage, responseArray:Array):Message{
            var service:String = responseArray[1];
            switch (service){
                case "BasketOrderList":
                    return (this.parseMultipleOrderEquityWarnMessage(message, responseArray));
                case "PlaceMultiOrderMkt":
                case "PlaceMultiOrder":
                    return (this.parsePlaceMultipleOrderEquityMessage(message, responseArray));
            };
            logger.error(("Invalid Service:" + service));
            return (new InvalidParseMessage(message, null, message.requestMessage));
        }
        private function parseMultipleOrderEquityWarnMessage(message:StringResponseMessage, responseArray:Array):Message{
            if (responseArray.length < 6){
                return (new InvalidParseMessage(message, null, message.requestMessage));
            };
            var warnMessage:String = responseArray[this.DATA_START_INDEX];
            return (new MultipleOrderEquityWarnResponseMessage(message.requestMessage, message.source, warnMessage));
        }
        private function parseSuccessMessage(message:StringResponseMessage, responseArray:Array):Message{
            var service:String = responseArray[1];
            switch (service){
                case "BasketOrderList":
                    return (this.parseMultipleOrderEquityMessage(message, responseArray));
                case "PlaceMultiOrder":
                case "PlaceMultiOrderMkt":
                    return (this.parsePlaceMultipleOrderEquityMessage(message, responseArray));
            };
            logger.error(("Invalid Service:" + service));
            return (new InvalidParseMessage(message, null, message.requestMessage));
        }
        private function parseFail(message:StringResponseMessage, responseArray:Array):Message{
            if (responseArray.length < 6){
                return (new InvalidParseMessage(message, null, message.requestMessage));
            };
            var failMessage:String = responseArray[this.DATA_START_INDEX];
            return (new FailResponseMessage(message.requestMessage, message.source, failMessage));
        }
        private function parsePlaceMultipleOrderEquityMessage(message:StringResponseMessage, responseArray:Array):Message{
            var subDataArray:Array;
            var order:PlaceMultipleOrderEquityResult;
            var parseMessage:PlaceMultipleOrderEquityResponseMessage = new PlaceMultipleOrderEquityResponseMessage(message.requestMessage, message.source);
            var number:int = int(responseArray[3]);
            var i:int = this.DATA_START_INDEX;
            while (i < (number + this.DATA_START_INDEX)) {
                subDataArray = responseArray[i].split(Delimiter.LEVEL1);
                order = this.parsePlaceMultipleOrderEquityResult(subDataArray);
                parseMessage.addResult(order);
                i++;
            };
            return (parseMessage);
        }
        private function parsePlaceMultipleOrderEquityResult(subDataArray:Array):PlaceMultipleOrderEquityResult{
            var index:int;
            var _temp1 = index;
            index = (index + 1);
            var result:OrderResponseStatus = this.parseOrderResponseStatus(subDataArray[_temp1]);
            var _temp2 = index;
            index = (index + 1);
            var message:String = subDataArray[_temp2];
            return (new PlaceMultipleOrderEquityResult(result, message));
        }
        private function parseOrderResponseStatus(str:String):OrderResponseStatus{
            switch (str){
                case "T":
                    return (OrderResponseStatus.SUCCESS);
                case "W":
                    return (OrderResponseStatus.WARNING);
                case "E":
                    return (OrderResponseStatus.FAILED);
            };
            return (OrderResponseStatus.NO_STATUS);
        }
        private function parseMultipleOrderEquityMessage(message:StringResponseMessage, responseArray:Array):Message{
            var subDataArray:Array;
            var order:MultipleOrderEquity;
            var parseMessage:MultipleOrderEquityResponseMessage = new MultipleOrderEquityResponseMessage(message.requestMessage, message.source);
            var number:int = int(responseArray[3]);
            var i:int = this.DATA_START_INDEX;
            while (i < (number + this.DATA_START_INDEX)) {
                subDataArray = responseArray[i].split(Delimiter.LEVEL1);
                order = this.parseMultipleOrderEquity(subDataArray);
                parseMessage.addMultipleOrder(order);
                i++;
            };
            return (parseMessage);
        }
        private function parseMultipleOrderEquity(array:Array):MultipleOrderEquity{
            var index:int;
            if (array.length < 8){
                return (MultipleOrderEquity.getBlank());
            };
            var _temp1 = index;
            index = (index + 1);
            var orderSide:OrderSide = OrderSide.lookUpFromOrder(array[_temp1]);
            var _temp2 = index;
            index = (index + 1);
            var instrumentId:String = array[_temp2];
            var _temp3 = index;
            index = (index + 1);
            var nvdrFlag = (array[_temp3] == "1");
            var _temp4 = index;
            index = (index + 1);
            var volume:Number = Number(array[_temp4]);
            volume = (((volume == 0)) ? NaN : volume);
            var _temp5 = index;
            index = (index + 1);
            var price:Number = Number(array[_temp5]);
            var _temp6 = index;
            index = (index + 1);
            var priceType:PriceType = PriceType.lookUpFromOrder(array[_temp6]);
            var _temp7 = index;
            index = (index + 1);
            var validity:Validity = this.parseValidity(array[_temp7]);
            var _temp8 = index;
            index = (index + 1);
            var icebergVolume:Number = Number(array[_temp8]);
            icebergVolume = (((icebergVolume == 0)) ? NaN : icebergVolume);
            return (new MultipleOrderEquity(orderSide, instrumentId, nvdrFlag, volume, price, priceType, validity, icebergVolume));
        }
        private function parseValidity(string:String):Validity{
            switch (string){
                case "DAY":
                    return (Validity.DAY);
                case "FOK":
                    return (Validity.FOK);
                case "IOC":
                    return (Validity.IOC);
            };
            return (Validity.NO_TYPE);
        }
        private function isValidArray(responseArray:Array):Boolean{
            if (responseArray.length < 5){
                logger.error((("Invalid Length: " + responseArray.length) + " expected >= 5"));
                return (false);
            };
            if (responseArray[0] != "Streaming"){
                logger.error((("Invalid Field[0]: " + responseArray[0]) + " expected Streaming"));
                return (false);
            };
            return (true);
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.response.symbolselector.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.streaming5.message.response.news.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.response.optionsgreekvalue.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.message.control.*;

    public class DataProviderJsonMessageParser implements IMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        public function DataProviderJsonMessageParser(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            if (!message.type.isObjectResponse()){
                throw (new InvalidMessageTypeError(message));
            };
            var objectResponseMessage:ObjectResponseMessage = ObjectResponseMessage(message);
            var data:Object = objectResponseMessage.data;
            var responseStatus:FeedResponseStatus = FeedResponseStatus.lookup(data.result);
            switch (responseStatus){
                case FeedResponseStatus.SUCCESS:
                    return (this.parseSuccessMessage(objectResponseMessage));
                case FeedResponseStatus.FAILED:
                    return (this.parseFailMessage(objectResponseMessage));
            };
            return (new InvalidParseMessage(message, null, objectResponseMessage.requestMessage));
        }
        private function parseSuccessMessage(objectResponseMessage:ObjectResponseMessage):Message{
            var parseMessage:Message;
            var data:Object = objectResponseMessage.data;
            var service:FeedServiceType = FeedServiceType.lookUpFromStrId(data.service);
            switch (service){
                case FeedServiceType.SYMBOL_SELECTOR_TREE:
                    parseMessage = this.parseSymbolSelectorTree(objectResponseMessage);
                    break;
                case FeedServiceType.SYMBOL_SELECTOR_OPTIONS:
                    parseMessage = this.parseSymbolSelectorOptions(objectResponseMessage);
                    break;
                case FeedServiceType.PIN_CHECK:
                    parseMessage = this.parsePinCheck(objectResponseMessage);
                    break;
                case FeedServiceType.STREAMING_OPTIONS_EXPIRE_DATE:
                    parseMessage = this.parseOptionsExpireDate(objectResponseMessage);
                    break;
                case FeedServiceType.NEWS:
                    parseMessage = this.parseNews(objectResponseMessage);
                    break;
                default:
                    logger.error(("Invalid Service:" + data.service));
                    return (new InvalidParseMessage(objectResponseMessage, null, objectResponseMessage.requestMessage));
            };
            var alertMessage:String = data.strMsg;
            if ((parseMessage is DataProviderJsonResponseMessage)){
                DataProviderJsonResponseMessage(parseMessage).alertMessage = alertMessage;
            };
            return (parseMessage);
        }
        private function parseNews(objectResponseMessage:ObjectResponseMessage):Message{
            var obj:Object;
            var type:NewsType;
            var language:Language;
            var time:String;
            var date:String;
            var source:String;
            var instrumentId:String;
            var title:String;
            var id:int;
            var filePath:String;
            var link:String;
            var hasAttach:Boolean;
            var news:News;
            var data:Array = objectResponseMessage.data.data;
            if (data == null){
                return (new InvalidParseMessage(objectResponseMessage, null, objectResponseMessage.requestMessage));
            };
            var message:NewsResponseMessage = new NewsResponseMessage(objectResponseMessage.requestMessage, objectResponseMessage.source);
            for each (obj in data) {
                type = NewsType.lookupFromFeed(obj.type);
                language = Language.lookupFromFeed(obj.language);
                time = obj.time;
                date = obj.date;
                source = obj.source;
                instrumentId = obj.instrumentID;
                title = obj.title;
                id = obj.id;
                filePath = obj.filePath;
                link = obj.link;
                hasAttach = obj.hasAttach;
                news = new News();
                news.date = date;
                news.filePath = filePath;
                news.hasAttach = hasAttach;
                news.id = id;
                news.instrumentId = instrumentId;
                news.language = language;
                news.link = link;
                news.source = source;
                news.time = time;
                news.title = title;
                news.type = type;
                message.addNews(news);
            };
            return (message);
        }
        private function parseOptionsExpireDate(objectResponseMessage:ObjectResponseMessage):Message{
            var subData:Object;
            var data:Object = objectResponseMessage.data.data;
            if (data == null){
                return (new InvalidParseMessage(objectResponseMessage, null, objectResponseMessage.requestMessage));
            };
            var expireDateList:Array = new Array();
            for each (subData in data) {
                expireDateList.push(subData);
            };
            return (new OptionsExpireDateResponseMessage(objectResponseMessage.requestMessage, objectResponseMessage.source, expireDateList));
        }
        private function parsePinCheck(objectResponseMessage:ObjectResponseMessage):Message{
            var data:Object = objectResponseMessage.data.data;
            if (data == null){
                return (new InvalidParseMessage(objectResponseMessage, null, objectResponseMessage.requestMessage));
            };
            var isCorrectPin = (data.result == "T");
            return (new PinCheckResponseMessage(objectResponseMessage.requestMessage, objectResponseMessage.source, isCorrectPin));
        }
        private function parseSymbolSelectorOptions(objectResponseMessage:ObjectResponseMessage):Message{
            var symbolSelectorOptions:SymbolSelectorOptions;
            var putMatrix:SymbolSelectorOptionsMatrix;
            var callMatrix:SymbolSelectorOptionsMatrix;
            var data:Object = objectResponseMessage.data.data;
            if (data == null){
                return (new InvalidParseMessage(objectResponseMessage, null, objectResponseMessage.requestMessage));
            };
            var optionsList:Array = this.parseSymbolSelectorOptionsList(data);
            var putList:Array = new Array();
            var callList:Array = new Array();
            var strikePriceList:Array = new Array();
            for each (symbolSelectorOptions in optionsList) {
                if (symbolSelectorOptions.optionsType.isCall()){
                    callList.push(symbolSelectorOptions);
                } else {
                    if (symbolSelectorOptions.optionsType.isPut()){
                        putList.push(symbolSelectorOptions);
                    };
                };
                if (strikePriceList.indexOf(symbolSelectorOptions.strikePrice) == -1){
                    strikePriceList.push(symbolSelectorOptions.strikePrice);
                };
            };
            strikePriceList.sort(Array.NUMERIC);
            putMatrix = this.createSymbolSelectorOptionsMatrix(strikePriceList, putList);
            callMatrix = this.createSymbolSelectorOptionsMatrix(strikePriceList, callList);
            return (new SymbolSelectorOptionsResponseMessage(objectResponseMessage.requestMessage, objectResponseMessage.source, strikePriceList, putMatrix, callMatrix));
        }
        private function createSymbolSelectorOptionsMatrix(strikePriceList:Array, optionsList:Array):SymbolSelectorOptionsMatrix{
            var symbolSelectorOptions:SymbolSelectorOptions;
            var optionsMatrix:Array;
            var i:*;
            var dateObjList:Array;
            var dateNumber:Number;
            var dateList:Array = new Array();
            for each (symbolSelectorOptions in optionsList) {
                if (dateList.indexOf(symbolSelectorOptions.date.getTime()) == -1){
                    dateList.push(symbolSelectorOptions.date.getTime());
                };
            };
            dateList.sort(Array.NUMERIC);
            optionsMatrix = new Array(strikePriceList.length);
            i = 0;
            while (i < strikePriceList.length) {
                optionsMatrix[i] = new Array(dateList.length);
                i++;
            };
            for each (symbolSelectorOptions in optionsList) {
                optionsMatrix[strikePriceList.indexOf(symbolSelectorOptions.strikePrice)][dateList.indexOf(symbolSelectorOptions.date.getTime())] = symbolSelectorOptions;
            };
            dateObjList = new Array();
            for each (dateNumber in dateList) {
                dateObjList.push(new Date(dateNumber));
            };
            return (new SymbolSelectorOptionsMatrix(strikePriceList, dateObjList, optionsMatrix));
        }
        private function parseSymbolSelectorOptionsList(data:Object):Array{
            var subData:Object;
            var optionsList:Array = new Array();
            for each (subData in data) {
                optionsList.push(this.parseSymbolSelectorOptionsSub(subData));
            };
            return (optionsList);
        }
        private function parseSymbolSelectorOptionsSub(subData:Object):SymbolSelectorOptions{
            var strikePrice:Number = Number(subData.strike);
            var optionsType:OptionsType = OptionsType.lookup(subData.flag);
            var instrumentId:String = subData.symbol;
            var dateStr:String = subData.date;
            var dateArray:Array = dateStr.split("/");
            var date:Date = new Date(dateArray[2], (dateArray[1] - 1), dateArray[0]);
            return (new SymbolSelectorOptions(instrumentId, date, strikePrice, optionsType));
        }
        private function parseSymbolSelectorTree(objectResponseMessage:ObjectResponseMessage):Message{
            var data:Object = objectResponseMessage.data.data;
            if (data == null){
                return (new InvalidParseMessage(objectResponseMessage, null, objectResponseMessage.requestMessage));
            };
            var equityTree:SymbolSelectorTreeNode = this.parseSymbolSelectorTreeNodeEquity(data.equity);
            var derivativesTree:SymbolSelectorTreeNode = this.parseSymbolSelectorTreeNodeDerivatives(data.futures);
            var indexTree:SymbolSelectorTreeNode = this.parseSymbolSelectorTreeNodeIndex(data.index);
            var message:SymbolSelectorTreeResponseMessage = new SymbolSelectorTreeResponseMessage(objectResponseMessage.requestMessage, objectResponseMessage.source, equityTree, derivativesTree, indexTree);
            return (message);
        }
        private function parseSymbolSelectorTreeNodeDerivatives(object:Object):SymbolSelectorTreeNode{
            var subObject:Object;
            var tree:SymbolSelectorTreeNode = new SymbolSelectorTreeNode("Derivatives");
            var futures:SymbolSelectorTreeNode = new SymbolSelectorTreeNode("Futures");
            tree.add(futures);
            if (object != null){
                for each (subObject in object) {
                    futures.add(this.parseSymbolSelectorTreeAll(subObject));
                };
            };
            return (tree);
        }
        private function parseSymbolSelectorTreeNodeEquity(object:Object):SymbolSelectorTreeNode{
            var subObject:Object;
            var tree:SymbolSelectorTreeNode = new SymbolSelectorTreeNode("Equity");
            if (object != null){
                for each (subObject in object) {
                    tree.add(this.parseSymbolSelectorTreeAll(subObject));
                };
            };
            return (tree);
        }
        private function parseSymbolSelectorTreeNodeIndex(object:Object):SymbolSelectorTreeNode{
            var subObject:Object;
            var tree:SymbolSelectorTreeNode = new SymbolSelectorTreeNode("Index");
            if (object != null){
                for each (subObject in object) {
                    tree.add(this.parseSymbolSelectorTreeAll(subObject));
                };
            };
            return (tree);
        }
        private function parseSymbolSelectorTreeAll(object:Object):Object{
            var subTree:Array = object.subTree;
            if (subTree == null){
                return (this.parseSymbolSelectorTreeLeaf(object));
            };
            return (this.parseSymbolSelectorTreeNode(object));
        }
        private function parseSymbolSelectorTreeNode(object:Object):SymbolSelectorTreeNode{
            var subObject:Object;
            var displayName:String = object.name;
            displayName = (((displayName == null)) ? "" : displayName);
            var node:SymbolSelectorTreeNode = new SymbolSelectorTreeNode(displayName);
            var subTree:Array = object.subTree;
            subTree = (((subTree == null)) ? new Array() : subTree);
            for each (subObject in subTree) {
                node.add(this.parseSymbolSelectorTreeAll(subObject));
            };
            return (node);
        }
        private function parseSymbolSelectorTreeLeaf(object:Object):SymbolSelectorTreeLeaf{
            var displayName:String = object.name;
            displayName = (((displayName == null)) ? "" : displayName);
            var listName:String = object.mainListName;
            listName = (((listName == null)) ? "" : listName);
            var subListName:String = object.subListName;
            subListName = (((subListName == null)) ? "" : subListName);
            var boardType:String = object.boardType;
            boardType = (((boardType == null)) ? "" : boardType);
            var boardSubType:String = object.boardSubType;
            boardSubType = (((boardSubType == null)) ? "" : boardSubType);
            return (new SymbolSelectorTreeLeaf(displayName, listName, subListName, boardType, boardSubType));
        }
        private function parseFailMessage(objectResponseMessage:ObjectResponseMessage):Message{
            var data:Object = objectResponseMessage.data;
            var message:String = data.strMsg;
            message = (((message == null)) ? "" : message);
            return (new FailResponseMessage(objectResponseMessage.requestMessage, objectResponseMessage.source, message));
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.message.control.*;

    public class EmptyMessageParse implements IMessageParser {

        public function EmptyMessageParse(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            var responseMessage:ResponseMessage;
            var requestType:MessageType;
            if (message.side.isResponse()){
                responseMessage = ResponseMessage(message);
                requestType = responseMessage.requestMessage.type;
                switch (requestType){
                    case MessageType.ORDER_STATUS_PUSH_REQUEST:
                        return (new OrderStatusPushResponseMessage(responseMessage.requestMessage, responseMessage.source));
                };
            };
            return (new InvalidParseMessage(message));
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.message.response.blocktrade.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.message.control.*;

    public class BlockTradeInfoMessageParser implements IMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        public function BlockTradeInfoMessageParser(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            if (!message.type.isObjectResponse()){
                throw (new InvalidMessageTypeError(message));
            };
            var responseMessage:ObjectResponseMessage = ObjectResponseMessage(message);
            var status:OrderResponseStatus = this.getResponseStatus(responseMessage.data);
            switch (status){
                case OrderResponseStatus.SUCCESS:
                    return (this.parseBlockTradeInfo(responseMessage));
                case OrderResponseStatus.FAILED:
                    return (this.parseFailMessage(responseMessage));
            };
            return (new InvalidParseMessage(message, null, responseMessage.requestMessage));
        }
        private function getResponseStatus(object:Object):OrderResponseStatus{
            var responseStatus:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(object.result);
            return (responseStatus);
        }
        private function getAlertMessage(object:Object):String{
            var alertMessage:String = object.message;
            return ((((alertMessage == null)) ? "" : alertMessage));
        }
        private function parseFailMessage(responseMessage:ObjectResponseMessage):FailResponseMessage{
            var data:Object = responseMessage.data;
            var alertMessage:String = this.getAlertMessage(data);
            return (new FailResponseMessage(responseMessage.requestMessage, responseMessage.source, alertMessage));
        }
        private function parseBlockTradeInfo(responseMessage:ObjectResponseMessage):Message{
            var orderObj:Object;
            var summaryList:Array;
            var summaryObj:Object;
            var data:Object = responseMessage.data;
            var message:BlockTradeInfoResponseMessage = new BlockTradeInfoResponseMessage(responseMessage.requestMessage, responseMessage.source);
            var orderList:Array = data.order;
            for each (orderObj in orderList) {
                message.add(this.parseBlockTradeInfoToken(orderObj));
            };
            summaryList = data.summary;
            for each (summaryObj in summaryList) {
                message.addSummary(this.parseBlockTradeInfoSummaryToken(summaryObj));
            };
            return (message);
        }
        private function parseBlockTradeInfoToken(object:Object):BlockTradeInfo{
            var prevSettle:Number = object.prevSettle;
            var price:Number = object.price;
            var priceDigit:int = object.priceDigit;
            var symbol:String = object.symbol;
            var time:String = object.time;
            var volume:int = object.volume;
            return (new BlockTradeInfo(symbol, price, priceDigit, volume, time, prevSettle, 1));
        }
        private function parseBlockTradeInfoSummaryToken(object:Object):BlockTradeInfo{
            var prevSettle:Number = object.prevSettle;
            var price:Number = object.price;
            var priceDigit:int = object.priceDigit;
            var symbol:String = object.symbol;
            var time:String = object.time;
            var volume:int = object.volume;
            var deal:int = object.deal;
            return (new BlockTradeInfo(symbol, price, priceDigit, volume, time, prevSettle, deal));
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.response.orderstatus.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;

    public class OrderAjaxEquityMessageParser implements IMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        public function AccountListMessageParser(){
        }
        public function parseMessage(message:IRawMessage):Message{
            var key:String;
            if (!message.type.isObjectResponse()){
                throw (new InvalidMessageTypeError(message));
            };
            var responseMessage:ObjectResponseMessage = ObjectResponseMessage(message);
            var object:Object = responseMessage.data;
            var multipleMessage:MultipleMessage = new MultipleMessage();
            for (key in object) {
                switch (key){
                    case "order":
                        multipleMessage.add(this.parseOrder(object[key], responseMessage));
                        break;
                    case "txtMsg":
                        multipleMessage.add(new FailResponseMessage(responseMessage.requestMessage, responseMessage.source, object[key].toString()));
                        break;
                    default:
                        logger.error(("Invalid Key " + key));
                };
            };
            return (multipleMessage);
        }
        private function parseOrder(obj:Object, responseMessage:ObjectResponseMessage):Message{
            var orderArray:Array;
            var message:OrderStatusSearchEquityResponseMessage = new OrderStatusSearchEquityResponseMessage(responseMessage.requestMessage, responseMessage.source);
            for each (orderArray in obj) {
                message.addOrder(this.parseOrderStatus(orderArray));
            };
            return (message);
        }
        private function parseOrderStatus(orderArray:Array):OrderStatusEquity{
            var matchVolume:int;
            var balanceVolume:int;
            var cancelVolume:int;
            var index:int;
            var _temp1 = index;
            index = (index + 1);
            var enterId:String = orderArray[_temp1];
            var _temp2 = index;
            index = (index + 1);
            var accountNumber:String = orderArray[_temp2];
            var _temp3 = index;
            index = (index + 1);
            var orderNumber:String = orderArray[_temp3];
            var _temp4 = index;
            index = (index + 1);
            var instrumentId:String = orderArray[_temp4];
            var _temp5 = index;
            index = (index + 1);
            var orderTime:String = orderArray[_temp5];
            var _temp6 = index;
            index = (index + 1);
            var orderSide:OrderSide = OrderSide.lookUpFromOrder(orderArray[_temp6]);
            var _temp7 = index;
            index = (index + 1);
            var showPriceTitle:String = orderArray[_temp7];
            var _temp8 = index;
            index = (index + 1);
            var showPrice:String = orderArray[_temp8];
            var _temp9 = index;
            index = (index + 1);
            var showVolume:String = orderArray[_temp9];
            var _temp10 = index;
            index = (index + 1);
            var icebergVolume:int = int(StreamingNumberFormatter.removeComma(orderArray[_temp10]));
            var _temp11 = index;
            index = (index + 1);
            var validity:Validity = Validity.lookUpFromOrder(orderArray[_temp11]);
            var _temp12 = index;
            index = (index + 1);
            matchVolume = int(StreamingNumberFormatter.removeComma(orderArray[_temp12]));
            var _temp13 = index;
            index = (index + 1);
            balanceVolume = int(StreamingNumberFormatter.removeComma(orderArray[_temp13]));
            var _temp14 = index;
            index = (index + 1);
            cancelVolume = int(StreamingNumberFormatter.removeComma(orderArray[_temp14]));
            var _temp15 = index;
            index = (index + 1);
            var showStatus:String = orderArray[_temp15];
            var _temp16 = index;
            index = (index + 1);
            var canCancel = (orderArray[_temp16] == "T");
            var _temp17 = index;
            index = (index + 1);
            var nvdrFlag:String = orderArray[_temp17];
            var _temp18 = index;
            index = (index + 1);
            var price:Number = Number(orderArray[_temp18]);
            var _temp19 = index;
            index = (index + 1);
            var volume:int = int(orderArray[_temp19]);
            var _temp20 = index;
            index = (index + 1);
            matchVolume = int(StreamingNumberFormatter.removeComma(orderArray[_temp20]));
            var _temp21 = index;
            index = (index + 1);
            balanceVolume = int(StreamingNumberFormatter.removeComma(orderArray[_temp21]));
            var _temp22 = index;
            index = (index + 1);
            cancelVolume = int(StreamingNumberFormatter.removeComma(orderArray[_temp22]));
            var _temp23 = index;
            index = (index + 1);
            var canChange = (orderArray[_temp23] == "T");
            var _temp24 = index;
            index = (index + 1);
            var priceType:PriceType = PriceType.lookUpFromOrder(orderArray[_temp24]);
            var _temp25 = index;
            index = (index + 1);
            var status:String = orderArray[_temp25];
            var _temp26 = index;
            index = (index + 1);
            var canChangePriceVolume = (orderArray[_temp26] == "T");
            var orderStatus:OrderStatusEquity = new OrderStatusEquity(orderNumber, nvdrFlag, instrumentId, orderTime, orderSide, price, volume, matchVolume, balanceVolume, cancelVolume, status, priceType, canCancel, canChange, "", -1, accountNumber, orderNumber, "", validity, canChangePriceVolume, enterId, icebergVolume);
            return (orderStatus);
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.response.accountInfo.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.message.control.*;

    public class AccountInfoJsonMessageParser implements IMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        public function AccountListMessageParser(){
        }
        public function parseMessage(message:IRawMessage):Message{
            var data:Object;
            var _local5:System;
            var _local6:String;
            if (!message.type.isObjectResponse()){
                throw (new InvalidMessageTypeError(message));
            };
            var responseMessage:ObjectResponseMessage = ObjectResponseMessage(message);
            data = responseMessage.data;
            var status:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(data.result);
            switch (status){
                case OrderResponseStatus.SUCCESS:
                    _local5 = message.system;
                    switch (_local5){
                        case System.EQUITY:
                            return (this.parseAccountInformationEquity(responseMessage));
                        case System.DERIV:
                            return (this.parseAccountInformationDerivatives(responseMessage));
                    };
                case OrderResponseStatus.FAILED:
                    _local6 = data.message;
                    return (new FailResponseMessage(responseMessage.requestMessage, responseMessage.source, _local6));
            };
            return (new InvalidParseMessage(responseMessage, null, responseMessage.requestMessage));
        }
        private function parseAccountInformationEquity(responseMessage:ObjectResponseMessage):Message{
            var isCreditBalance:Boolean = responseMessage.data.data.isCreditBalance;
            if (isCreditBalance){
                return (this.parseAccountInformationEquityCreditBalance(responseMessage));
            };
            return (this.parseAccountInformationEquityCashBalance(responseMessage));
        }
        private function parseAccountInformationEquityCashBalance(responseMessage:ObjectResponseMessage):Message{
            var data:Object = responseMessage.data.data;
            var accountNo:String = data.accountNo;
            var cashBalance:String = data.cashBalance;
            var creditLimit:String = data.creditLimit;
            var customerName:String = data.customerName;
            var initialCashBalance:String = data.initialCashBalance;
            var initialCreditLimit:String = data.initialCreditLimit;
            var initialLineAvailable:String = data.initialLineAvailable;
            var isCreditBalance:String = data.isCreditBalance;
            var lineAvailable:String = data.lineAvailable;
            var traderName:String = data.traderName;
            var pendingLine:String = data.netSettlementLine;
            return (new AccountInfoLongEquityCashResponseMessage(responseMessage.requestMessage, responseMessage.source, accountNo, customerName, traderName, creditLimit, initialCreditLimit, lineAvailable, initialLineAvailable, cashBalance, initialCashBalance, pendingLine));
        }
        private function parseAccountInformationEquityCreditBalance(responseMessage:ObjectResponseMessage):Message{
            var data:Object = responseMessage.data.data;
            var accountNo:String = data.accountNo;
            var actualCashBalance:String = data.actualCashBalance;
            var actualMarginLoan:String = data.actualMarginLoan;
            var asset:String = data.asset;
            var availableCashBalance:String = data.availableCashBalance;
            var availableMarginLoan:String = data.availableMarginLoan;
            var cashBalance:String = data.cashBalance;
            var collateral:String = data.collateral;
            var creditLimit:String = data.creditLimit;
            var customerName:String = data.customerName;
            var equityBalance:String = data.equityBalance;
            var excessEquity:String = data.excessEquity;
            var isCreditBalance:String = data.isCreditBalance;
            var liabilities:String = data.liabilities;
            var lineAvailable:String = data.lineAvailable;
            var marginCM:String = data.marginCM;
            var marginFM:String = data.marginFM;
            var marginIM:String = data.marginIM;
            var traderName:String = data.traderName;
            var imAdjust:String = data.imAdjust;
            var cmAdjust:String = data.cmAdjust;
            var fmAdjust:String = data.fmAdjust;
            var mtmRealtime:String = data.mtmRealtime;
            var mr:String = data.mr;
            var buyMr:String = data.buyMr;
            var lineAvail50:String = data.lineAvail50;
            var lineAvail60:String = data.lineAvail60;
            var lineAvail70:String = data.lineAvail70;
            var lineAvail80:String = data.lineAvail80;
            var callMargin:String = data.callMargin;
            var callAmount:String = data.callAmount;
            var valueForceSale:String = data.valueForceSale;
            var forceMargin:String = data.forceMargin;
            var forceAmount:String = data.forceAmount;
            var percentMM:String = data.percentMM;
            return (new AccountInfoLongEquityCreditResponseMessage(responseMessage.requestMessage, responseMessage.source, accountNo, customerName, traderName, lineAvailable, excessEquity, equityBalance, creditLimit, cashBalance, asset, availableCashBalance, actualCashBalance, liabilities, availableMarginLoan, actualMarginLoan, collateral, marginIM, marginCM, marginFM, imAdjust, cmAdjust, fmAdjust, mtmRealtime, mr, buyMr, lineAvail50, lineAvail60, lineAvail70, lineAvail80, callMargin, callAmount, valueForceSale, forceMargin, forceAmount, percentMM));
        }
        private function parseAccountInformationDerivatives(responseMessage:ObjectResponseMessage):Message{
            var data:Object = responseMessage.data.data;
            var accountNo:String = data.accountNo;
            var calMTM:String = data.calMTM;
            var callForceFlag:String = data.callForceFlag;
            var callForceMargin:String = data.callForceMargin;
            var canClose:String = data.canClose;
            var canOpen:String = data.canOpen;
            var cashBalance:String = data.cashBalance;
            var closingMethod:String = data.closingMethod;
            var commissionConfirmOrder:String = data.commissionConfirmOrder;
            var commissionPendingOrder:String = data.commissionPendingOrder;
            var commissionTotalOrder:String = data.commissionTotalOrder;
            var creditLimit:String = data.creditLimit;
            var customerName:String = data.customerName;
            var depositWithdrawal:String = data.depositWithdrawal;
            var equityBalance:String = data.equityBalance;
            var excessEquity:String = data.excessEquity;
            var foreignCollateral:String = data.foreignCollateral;
            var futuresMTM:String = data.futuresMTM;
            var initCallForceFlag:String = data.initCallForceFlag;
            var initCallForceMargin:String = data.initCallForceMargin;
            var initialCashBalance:String = data.initialCashBalance;
            var initialEquity:String = data.initialEquity;
            var initialMR:String = data.initialMR;
            var lineAvailable:String = data.lineAvailable;
            var liquidationValue:String = data.liquidationValue;
            var marginMethod:String = data.marginMethod;
            var nonCashBalance:String = data.nonCashBalance;
            var optionsMTM:String = data.optionsMTM;
            var pendingOrderOutrightFM:String = data.pendingOrderOutrightFM;
            var pendingOrderOutrightMM:String = data.pendingOrderOutrightMM;
            var pendingOrderOutrightMR:String = data.pendingOrderOutrightMR;
            var pendingOrderSpreadFM:String = data.pendingOrderSpreadFM;
            var pendingOrderSpreadMM:String = data.pendingOrderSpreadMM;
            var pendingOrderSpreadMR:String = data.pendingOrderSpreadMR;
            var receivePaymentAfterComm:String = data.receivePayMentAfterComm;
            var receivePayment:String = data.receivePayment;
            var totalFM:String = data.totalFM;
            var totalMM:String = data.totalMM;
            var totalMR:String = data.totalMR;
            var totalUnrealizedPL:String = data.totalUnrealizedPL;
            var traderName:String = data.traderName;
            var virtualPortOutrightFM:String = data.virtualPortOutrightFM;
            var virtualPortOutrightMM:String = data.virtualPortOutrightMM;
            var virtualPortOutrightMR:String = data.virtualPortOutrightMR;
            var virtualPortSpreadFM:String = data.virtualPortSpreadFM;
            var virtualPortSpreadMM:String = data.virtualPortSpreadMM;
            var virtualPortSpreadMR:String = data.virtualPortSpreadMR;
            return (new AccountInfoLongDerivativesResponseMessage(responseMessage.requestMessage, responseMessage.source, accountNo, customerName, traderName, lineAvailable, excessEquity, equityBalance, creditLimit, cashBalance, liquidationValue, foreignCollateral, nonCashBalance, initialMR, initialCashBalance, initialEquity, commissionConfirmOrder, commissionPendingOrder, commissionTotalOrder, canOpen, canClose, closingMethod, calMTM, futuresMTM, optionsMTM, receivePayment, receivePaymentAfterComm, callForceFlag, initCallForceFlag, totalUnrealizedPL, depositWithdrawal, callForceMargin, initCallForceMargin, marginMethod, virtualPortOutrightMR, virtualPortOutrightMM, virtualPortOutrightFM, virtualPortSpreadMR, virtualPortSpreadMM, virtualPortSpreadFM, pendingOrderOutrightMR, pendingOrderOutrightMM, pendingOrderOutrightFM, pendingOrderSpreadMR, pendingOrderSpreadMM, pendingOrderSpreadFM, totalMR, totalMM, totalFM));
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.widget.config.*;
    import com.settrade.streaming5.message.response.instrumentlist.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.optionswizard.message.response.*;
    import com.settrade.optionswizard.common.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.streaming5.message.response.updateconfig.*;
    import com.settrade.streaming5.message.response.research.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.response.widgettemplate.*;
    import com.settrade.optionswizard.message.response.optionsinstrumentlist.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.message.control.*;

    public class DispatcherStringMessageParser implements IMessageParser {

        private static const STATUS_INDEX = 0;
        private static const FAILED_MESSAGE_INDEX = 1;
        private static const SERVICE_TYPE_INDEX = 1;
        private static const DATA_START_INDEX = 2;

        private static var logger:Logger = new Logger(prototype.constructor);

        public function DispatcherStringMessageParser(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            var tokenList:* = null;
            var status:* = null;
            var serviceType:* = null;
            var message:* = message;
            if ((!(message) is StringResponseMessage)){
                throw (new InvalidMessageTypeError(message));
            };
            var stringRawMessage:* = StringResponseMessage(message);
            tokenList = stringRawMessage.data.split(Delimiter.LEVEL1);
            if (tokenList.length < 1){
                logger.error((("Invalid length for Message: length=" + tokenList.length) + " expected:>=1"));
                return (new InvalidParseMessage(message, null, stringRawMessage.requestMessage));
            };
            status = FeedResponseStatus.lookup(tokenList[STATUS_INDEX]);
            if (status.isSuccess()){
                if (tokenList.length < 2){
                    logger.error((("Invalid length for Message: length=" + tokenList.length) + " expected:>=2"));
                    return (new InvalidParseMessage(message, null, stringRawMessage.requestMessage));
                };
                serviceType = FeedServiceType.lookUpFromStrId(tokenList[SERVICE_TYPE_INDEX]);
                switch (serviceType){
                    case FeedServiceType.INSTRUMENT_LIST:
                        return (this.parseInstrumentList(stringRawMessage, tokenList));
                    case FeedServiceType.FAVOURITE_MANAGEMENT:
                        return (this.parseFavoriteManagement(stringRawMessage, tokenList));
                    case FeedServiceType.OPTIONS_INSTRUMENT_LIST:
                        return (this.parseOptionsInstrumentList(stringRawMessage, tokenList));
                    case FeedServiceType.OPTIONS_EXPIRE_DATE:
                        return (this.parseOptionsExpireDate(stringRawMessage, tokenList));
                    case FeedServiceType.OPTIONS_RECOMMEND:
                        return (this.parseOptionsRecommend(stringRawMessage, tokenList));
                    case FeedServiceType.RESEARCH:
                        return (this.parseResearch(stringRawMessage, tokenList));
                    case FeedServiceType.SETTING:
                        return (this.parseSetting(stringRawMessage, tokenList));
                    case FeedServiceType.TEMPLATE:
                        return (this.parseTemplate(stringRawMessage, tokenList));
                    case FeedServiceType.MARGIN_STOCK:
                        return (this.parseMarginStock(stringRawMessage, tokenList));
                    default:
                        logger.error(("Invalid Service: " + tokenList[SERVICE_TYPE_INDEX]));
                        return (new InvalidParseMessage(message, null, stringRawMessage.requestMessage));
                };
            };
            if (status.isFailed()){
                if (tokenList.length < 2){
                    logger.error((("Invalid length for failed Message: length=" + tokenList.length) + " expected:>=2"));
                    return (new InvalidParseMessage(message, null, stringRawMessage.requestMessage));
                };
                return (new FeedStringFailedResponseMessage(stringRawMessage.requestMessage, stringRawMessage.source, tokenList[FAILED_MESSAGE_INDEX]));
            };
            logger.error(("Invalid Status: " + tokenList[STATUS_INDEX]));
            return (new InvalidParseMessage(message, null, stringRawMessage.requestMessage));
            var _slot1:* = error;
            logger.error(("Parse Message Error:" + _slot1.message));
            return (new InvalidParseMessage(message, null, stringRawMessage.requestMessage));
        }
        private function parseSetting(stringRawMessage:StringResponseMessage, tokenList:Array):Message{
            var numToken:int;
            var result:OrderResponseStatus;
            var type:ConfigType;
            var alertMessage:String;
            if (tokenList.length < 3){
                logger.error((("Invalid length for Setting: length=" + tokenList.length) + " expected:>=4"));
            };
            var message:UpdateConfigResponseMessage = new UpdateConfigResponseMessage(stringRawMessage.requestMessage, stringRawMessage.source);
            var index:int = DATA_START_INDEX;
            var _temp1 = index;
            index = (index + 1);
            var settingNum:int = int(tokenList[_temp1]);
            var i:* = 0;
            while (i < settingNum) {
                var _temp2 = index;
                index = (index + 1);
                numToken = int(tokenList[_temp2]);
                var _temp3 = index;
                index = (index + 1);
                result = OrderResponseStatus.lookupFromOrder(tokenList[_temp3]);
                var _temp4 = index;
                index = (index + 1);
                type = ConfigType.lookUp(tokenList[_temp4]);
                var _temp5 = index;
                index = (index + 1);
                alertMessage = tokenList[_temp5];
                message.addResult(new UpdateConfigResult(result, type, alertMessage));
                i++;
            };
            return (message);
        }
        private function parseTemplate(stringRawMessage:StringResponseMessage, tokenList:Array):Message{
            var standardTemplateList:Array;
            var widgetTemplateStandard:Array;
            var brokerTemplateList:Array;
            var widgetTemplateBroker:Array;
            var template:Object;
            var id:String;
            var displayName:String;
            var thumbnailPath:String;
            var roleEquity:Array;
            var roleStr:String;
            var roleDerivatives:Array;
            var widgetPageConfig:WidgetPageConfig;
            var templateJSON:Object;
            var widgetTemplate:WidgetTemplateObject;
            if (tokenList.length < 3){
                logger.error((("Invalid length for Template: length=" + tokenList.length) + " expected:>=4"));
            };
            var message:WidgetTemplateResponseMessage;
            var index:int = DATA_START_INDEX;
            var jsonString:String = tokenList[index];
            var jsonObject:Object = JSON.parse(jsonString);
            var widgetTemplateJSON:Object = jsonObject.templates;
            var widgetInfoJSON:Object = jsonObject.widgetInfo;
            logger.info(("template " + widgetTemplateJSON));
            logger.info(("info " + widgetInfoJSON));
            if (((!((widgetTemplateJSON == null))) && (!((widgetInfoJSON == null))))){
                standardTemplateList = new Array();
                widgetTemplateStandard = widgetTemplateJSON.standard;
                logger.info(("Standard " + widgetTemplateStandard));
                if (widgetTemplateStandard != null){
                    for each (template in widgetTemplateStandard) {
                        id = template.id;
                        logger.info(("process template " + id));
                        displayName = template.name;
                        logger.info(("process template " + displayName));
                        thumbnailPath = template.thumbnailPath;
                        roleEquity = new Array();
                        for each (roleStr in template.role_equity) {
                            roleEquity.push(UserRole.lookupFromId(roleStr));
                        };
                        roleDerivatives = new Array();
                        for each (roleStr in template.role_derivatives) {
                            roleDerivatives.push(UserRole.lookupFromId(roleStr));
                        };
                        widgetPageConfig = null;
                        templateJSON = Object(template.template);
                        logger.info((templateJSON + ""));
                        if (templateJSON != null){
                            logger.info(template.template);
                            widgetPageConfig = WidgetPageConfig.fromJsonObject(templateJSON);
                        };
                        widgetTemplate = new WidgetTemplateObject(id, displayName, thumbnailPath, roleEquity, roleDerivatives, widgetPageConfig);
                        standardTemplateList.push(widgetTemplate);
                    };
                };
                logger.info("standard template creation is done");
                brokerTemplateList = new Array();
                widgetTemplateBroker = widgetTemplateJSON.broker;
                if (widgetTemplateBroker != null){
                    for each (template in widgetTemplateBroker) {
                        id = template.id;
                        displayName = template.name;
                        thumbnailPath = template.thumbnailPath;
                        roleEquity = new Array();
                        for each (roleStr in template.role_equity) {
                            roleEquity.push(UserRole.lookupFromId(roleStr));
                        };
                        roleDerivatives = new Array();
                        for each (roleStr in template.role_derivatives) {
                            roleDerivatives.push(UserRole.lookupFromId(roleStr));
                        };
                        widgetPageConfig = null;
                        templateJSON = Object(template.template);
                        if (templateJSON != null){
                            widgetPageConfig = WidgetPageConfig.fromJsonObject(templateJSON);
                        };
                        widgetTemplate = new WidgetTemplateObject(id, displayName, thumbnailPath, roleEquity, roleDerivatives, widgetPageConfig);
                        brokerTemplateList.push(widgetTemplate);
                    };
                };
                logger.info("broker customized template creation is done");
                message = new WidgetTemplateResponseMessage(stringRawMessage.requestMessage, stringRawMessage.source, standardTemplateList, brokerTemplateList, widgetInfoJSON);
                logger.info("message creation is done");
            };
            return (message);
        }
        private function parseMarginStock(stringRawMessage:StringResponseMessage, tokenList:Array):Message{
            if (tokenList.length < 2){
                logger.error((("Invalid length for Margin Stock: length=" + tokenList.length) + " expected:>=2"));
            };
            var index:int = DATA_START_INDEX;
            var _temp1 = index;
            index = (index + 1);
            var marginRateStr:String = tokenList[_temp1];
            var marginRateToken:Array = marginRateStr.split(Delimiter.LEVEL2);
            var _temp2 = index;
            index = (index + 1);
            var stockGradeStr:String = tokenList[_temp2];
            var stockGradeToken:Array = stockGradeStr.split(Delimiter.LEVEL2);
            var marginRateBroker:String = "";
            var marginRateTSFC:String = "";
            var stockGradeBroker:String = "";
            var stockGradeTSFC:String = "";
            if (marginRateToken.length == 2){
                marginRateBroker = marginRateToken[0];
                marginRateTSFC = marginRateToken[1];
            };
            if (stockGradeToken.length == 2){
                stockGradeBroker = stockGradeToken[0];
                stockGradeTSFC = stockGradeToken[1];
            };
            var message:MarginStockResponseMessage = new MarginStockResponseMessage(stringRawMessage.requestMessage, stringRawMessage.source, marginRateBroker, marginRateTSFC, stockGradeBroker, stockGradeTSFC);
            return (message);
        }
        private function parseResearch(stringRawMessage:StringResponseMessage, tokenList:Array):Message{
            var researchStr:String;
            var message:ResearchResponseMessage;
            var researchToken:Array;
            var postDate:String;
            var url:String;
            var title:String;
            var expireDate:String;
            var market:String;
            var category:String;
            if (tokenList.length < 4){
                logger.error((("Invalid length for Research: length=" + tokenList.length) + " expected:>=4"));
            };
            var index:int = DATA_START_INDEX;
            var _temp1 = index;
            index = (index + 1);
            var researchListStr:String = tokenList[_temp1];
            var researchListToken:Array = researchListStr.split(Delimiter.LEVEL2);
            var researchList:Array = new Array();
            for each (researchStr in researchListToken) {
                researchToken = researchStr.split(Delimiter.LEVEL3);
                if (researchToken.length >= 3){
                    postDate = researchToken[0];
                    url = researchToken[1];
                    title = researchToken[2];
                    expireDate = researchToken[3];
                    market = researchToken[4];
                    category = researchToken[5];
                    researchList.push(new Research(postDate, url, title, expireDate, market, category));
                } else {
                    logger.error(("Expected Token Length=3: Found " + researchToken.length));
                };
            };
            message = new ResearchResponseMessage(stringRawMessage.requestMessage, stringRawMessage.source, researchList);
            return (message);
        }
        private function parseOptionsInstrumentList(stringRawMessage:StringResponseMessage, tokenList:Array):Message{
            var instrumentStr:String;
            var message:OptionsInstrumentListResponseMessage;
            var instrumentToken:Array;
            var instrumentId:String;
            var optionsType:OptionsType;
            var expireDate:String;
            if (tokenList.length < 3){
                logger.error((("Invalid length for Options Instrument List: length=" + tokenList.length) + " expected:>=3"));
            };
            var index:int = DATA_START_INDEX;
            var _temp1 = index;
            index = (index + 1);
            var instrumentListStr:String = tokenList[_temp1];
            var instrumentList:Array = new Array();
            var instrumentListArray:Array = instrumentListStr.split(Delimiter.LEVEL2);
            for each (instrumentStr in instrumentListArray) {
                if (instrumentStr != ""){
                    instrumentToken = instrumentStr.split(Delimiter.LEVEL3);
                    if (instrumentToken.length >= 3){
                        instrumentId = instrumentToken[0];
                        optionsType = OptionsType.lookup(instrumentToken[1]);
                        expireDate = instrumentToken[2];
                        instrumentList.push(new OptionsInstrumentValue(instrumentId, optionsType, expireDate));
                    } else {
                        logger.error(("Expected Token Length=3: Found " + instrumentToken.length));
                    };
                };
            };
            message = new OptionsInstrumentListResponseMessage(stringRawMessage.requestMessage, stringRawMessage.source, instrumentList);
            return (message);
        }
        private function parseInstrumentList(stringRawMessage:StringResponseMessage, tokenList:Array):Message{
            var listTypeStr:* = null;
            var message:* = null;
            var instrumentListStr:* = null;
            var instrumentList:* = null;
            var instrumentListType:* = null;
            var stringRawMessage:* = stringRawMessage;
            var tokenList:* = tokenList;
            if (tokenList.length < 3){
                logger.error((("Invalid length for Instrument List: length=" + tokenList.length) + " expected:>=3"));
            };
            var index:* = DATA_START_INDEX;
            index = (index + 1);
            var listName:* = tokenList[index];
            index = (index + 1);
            var subListName:* = tokenList[index];
            index = (index + 1);
            var boardType:* = tokenList[index];
            index = (index + 1);
            var boardSubType:* = tokenList[index];
            index = (index + 1);
            var listTypeListStr:* = tokenList[index];
            var listTypeList:* = listTypeListStr.split(Delimiter.LEVEL2);
            var instrumentListList:* = new Array();
            for each (listTypeStr in listTypeList) {
                index = (index + 1);
                instrumentListStr = tokenList[index];
                instrumentList = null;
                instrumentListType = InstrumentListType.lookUpFromFeed(listTypeStr);
                try {
                    switch (instrumentListType){
                        case InstrumentListType.FAVOURITE:
                            instrumentList = this.parseFavoriteList(instrumentListStr);
                            break;
                        case InstrumentListType.EQUITY:
                            instrumentList = this.parseEquityList(instrumentListStr);
                            break;
                        case InstrumentListType.FUTURES:
                            instrumentList = this.parseFuturesList(instrumentListStr);
                            break;
                        case InstrumentListType.FUTURES_UNDERLYING:
                            instrumentList = this.parseFutureUnderlyingList(instrumentListStr);
                            break;
                        case InstrumentListType.OPTIONS:
                            instrumentList = this.parseOptionsList(instrumentListStr);
                            break;
                        case InstrumentListType.INDEX:
                            instrumentList = this.parseIndexList(instrumentListStr);
                            break;
                        case InstrumentListType.INDUSTRY:
                            instrumentList = this.parseIndustryList(instrumentListStr);
                            break;
                        case InstrumentListType.SECTOR:
                            instrumentList = this.parseSectorList(instrumentListStr);
                            break;
                        case InstrumentListType.MAI_INDUSTRY:
                            instrumentList = this.parseMaiIndustryList(instrumentListStr);
                            break;
                        case InstrumentListType.MAI_SECTOR:
                            instrumentList = this.parseMaiSectorList(instrumentListStr);
                            break;
                        default:
                            logger.error(("ListType not Found:" + listTypeStr));
                    };
                } catch(error:Error) {
                    logger.error("Cannot Parse Instrument List");
                };
                if (instrumentList != null){
                    instrumentListList.push(instrumentList);
                };
            };
            message = new InstrumentListResponseMessage(stringRawMessage.requestMessage, stringRawMessage.source, listName, subListName, boardType, boardSubType, instrumentListList);
            return (message);
        }
        private function parseOptionsRecommend(stringRawMessage:StringResponseMessage, tokenList:Array):Message{
            var dataList:Array;
            var subIndex:int;
            var targetIndex:Number;
            var indexDiff:Number;
            var instrumentId:String;
            var optionsType:OptionsType;
            var expireDate:String;
            var premium:Number;
            var breakEvenPoint:Number;
            var multiplier:Number;
            var strikeprice:Number;
            var budget:Number;
            var maxVolPerOrder:Number;
            var optionsRecommend:OptionsRecommend;
            if (tokenList.length < 3){
                logger.error((("Invalid length for OptionsRecommend: length=" + tokenList.length) + " expected:>=3"));
            };
            var index:int = DATA_START_INDEX;
            var _temp1 = index;
            index = (index + 1);
            var timeAsOf:String = tokenList[_temp1];
            var message:OptionsRecommendResponseMessage = new OptionsRecommendResponseMessage(stringRawMessage.requestMessage, stringRawMessage.source, timeAsOf);
            while (index < tokenList.length) {
                if (tokenList[index] == ""){
                } else {
                    dataList = tokenList[index].split(Delimiter.LEVEL2);
                    if (dataList.length < 10){
                        logger.error((("Invalid length for OptionsRecommendData: length=" + dataList.length) + "expected:=10"));
                    } else {
                        subIndex = 0;
                        var _temp2 = subIndex;
                        subIndex = (subIndex + 1);
                        targetIndex = Number(dataList[_temp2]);
                        var _temp3 = subIndex;
                        subIndex = (subIndex + 1);
                        indexDiff = Number(dataList[_temp3]);
                        var _temp4 = subIndex;
                        subIndex = (subIndex + 1);
                        instrumentId = dataList[_temp4];
                        var _temp5 = subIndex;
                        subIndex = (subIndex + 1);
                        optionsType = OptionsType.lookup(dataList[_temp5]);
                        var _temp6 = subIndex;
                        subIndex = (subIndex + 1);
                        expireDate = dataList[_temp6];
                        var _temp7 = subIndex;
                        subIndex = (subIndex + 1);
                        premium = Number(dataList[_temp7]);
                        var _temp8 = subIndex;
                        subIndex = (subIndex + 1);
                        breakEvenPoint = Number(dataList[_temp8]);
                        var _temp9 = subIndex;
                        subIndex = (subIndex + 1);
                        multiplier = Number(dataList[_temp9]);
                        var _temp10 = subIndex;
                        subIndex = (subIndex + 1);
                        strikeprice = Number(dataList[_temp10]);
                        var _temp11 = subIndex;
                        subIndex = (subIndex + 1);
                        budget = Number(dataList[_temp11]);
                        var _temp12 = subIndex;
                        subIndex = (subIndex + 1);
                        maxVolPerOrder = Number(dataList[_temp12]);
                        optionsRecommend = new OptionsRecommend(targetIndex, indexDiff, instrumentId, optionsType, expireDate, premium, breakEvenPoint, multiplier, strikeprice, budget, maxVolPerOrder);
                        message.addOptionsRecommend(optionsRecommend);
                    };
                };
                index++;
            };
            return (message);
        }
        private function parseDefaultList(instrumentListStr:String):Array{
            var instrumentId:String;
            var instrumentList:Array = new Array();
            var instrumentListArray:Array = instrumentListStr.split(Delimiter.LEVEL2);
            for each (instrumentId in instrumentListArray) {
                if (instrumentId != ""){
                    instrumentList.push(new InstrumentToken(instrumentId));
                };
            };
            return (instrumentList);
        }
        private function parseListWithUnderlying(instrumentListStr:String):Array{
            var instrumentId:String;
            var instrumentIdToken:Array;
            var instrumentList:Array = new Array();
            var instrumentListArray:Array = instrumentListStr.split(Delimiter.LEVEL2);
            for each (instrumentId in instrumentListArray) {
                if (instrumentId != ""){
                    instrumentIdToken = instrumentId.split(Delimiter.LEVEL3);
                    if (instrumentIdToken.length >= 2){
                        instrumentList.push(new InstrumentTokenWithUnderlying(instrumentIdToken[0], instrumentIdToken[1]));
                    } else {
                        instrumentList.push(new InstrumentToken(instrumentId));
                    };
                };
            };
            return (instrumentList);
        }
        private function parseMaiSectorList(instrumentListStr:String):InstrumentList{
            var instrumentList:InstrumentList = new InstrumentList(InstrumentListType.MAI_SECTOR, this.parseDefaultList(instrumentListStr));
            return (instrumentList);
        }
        private function parseMaiIndustryList(instrumentListStr:String):InstrumentList{
            var instrumentList:InstrumentList = new InstrumentList(InstrumentListType.MAI_INDUSTRY, this.parseDefaultList(instrumentListStr));
            return (instrumentList);
        }
        private function parseSectorList(instrumentListStr:String):InstrumentList{
            var instrumentList:InstrumentList = new InstrumentList(InstrumentListType.SECTOR, this.parseDefaultList(instrumentListStr));
            return (instrumentList);
        }
        private function parseIndustryList(instrumentListStr:String):InstrumentList{
            var instrumentList:InstrumentList = new InstrumentList(InstrumentListType.INDUSTRY, this.parseDefaultList(instrumentListStr));
            return (instrumentList);
        }
        private function parseIndexList(instrumentListStr:String):InstrumentList{
            var instrumentList:InstrumentList = new InstrumentList(InstrumentListType.INDEX, this.parseDefaultList(instrumentListStr));
            return (instrumentList);
        }
        private function parseOptionsList(instrumentListStr:String):InstrumentList{
            var instrumentList:InstrumentList = new InstrumentList(InstrumentListType.OPTIONS, this.parseDefaultList(instrumentListStr));
            return (instrumentList);
        }
        private function parseFutureUnderlyingList(instrumentListStr:String):InstrumentList{
            var instrumentList:InstrumentList = new InstrumentList(InstrumentListType.FUTURES_UNDERLYING, this.parseListWithUnderlying(instrumentListStr));
            return (instrumentList);
        }
        private function parseFuturesList(instrumentListStr:String):InstrumentList{
            var instrumentList:InstrumentList = new InstrumentList(InstrumentListType.FUTURES, this.parseDefaultList(instrumentListStr));
            return (instrumentList);
        }
        private function parseEquityList(instrumentListStr:String):InstrumentList{
            var instrumentList:InstrumentList = new InstrumentList(InstrumentListType.EQUITY, this.parseDefaultList(instrumentListStr));
            return (instrumentList);
        }
        private function parseFavoriteList(instrumentListStr:String):InstrumentList{
            var instrumentList:InstrumentList = new InstrumentList(InstrumentListType.FAVOURITE, this.parseDefaultList(instrumentListStr));
            return (instrumentList);
        }
        private function parseOptionsExpireDate(stringRawMessage:StringResponseMessage, tokenList:Array):Message{
            var dataList:Array;
            var day:int;
            var month:int;
            var year:int;
            var dayToExpire:int;
            var expireDate:OptionsExpireDate;
            var message:OptionsExpireDateResponseMessage = new OptionsExpireDateResponseMessage(stringRawMessage.requestMessage, stringRawMessage.source);
            var index:* = DATA_START_INDEX;
            var _temp1 = index;
            index = (index + 1);
            var mostActiveIndex:int = int(tokenList[_temp1]);
            var i:* = index;
            while (i < tokenList.length) {
                if (tokenList[i] == ""){
                } else {
                    dataList = tokenList[i].split(Delimiter.LEVEL2);
                    if (dataList.length < 4){
                        logger.error("Invalid length for Expire Date");
                    } else {
                        day = int(dataList[0]);
                        month = int(dataList[1]);
                        year = int(dataList[2]);
                        dayToExpire = int(dataList[3]);
                        expireDate = new OptionsExpireDate(day, month, year, dayToExpire);
                        message.addExpireDate(expireDate);
                    };
                };
                i++;
            };
            message.setMostActiveSeriesByIndex(mostActiveIndex);
            return (message);
        }
        private function parseFavoriteManagement(stringRawMessage:StringResponseMessage, tokenList:Array):Message{
            var index:int = DATA_START_INDEX;
            var _temp1 = index;
            index = (index + 1);
            var cmd:String = tokenList[_temp1];
            var _temp2 = index;
            index = (index + 1);
            var listName:String = tokenList[_temp2];
            var _temp3 = index;
            index = (index + 1);
            var alertMessage:String = tokenList[_temp3];
            var message:FavouriteResponseMessage = new FavouriteResponseMessage(stringRawMessage.requestMessage, stringRawMessage.source, cmd, listName, alertMessage);
            return (message);
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.control.notification.*;
    import com.settrade.streaming5.message.feed.*;
    import com.settrade.streaming5.message.response.setcalendar.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.connection.common.*;
    import com.settrade.optionswizard.enumuration.*;
    import com.settrade.streaming5.message.response.historicalchart.*;
    import com.settrade.streaming5.message.response.volumebypricedetail.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.message.feed.info.*;
    import com.settrade.optionswizard.message.response.*;
    import com.settrade.streaming5.message.feed.snapshot.*;
    import com.settrade.streaming5.message.response.news.*;
    import com.settrade.streaming5.message.response.historicalbydate.*;
    import com.settrade.streaming5.message.feed.announcement.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.response.intradaychart.*;
    import com.settrade.streaming5.message.response.optionsgreekvalue.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.message.control.*;

    public class DispatcherBinaryMessageParser implements IMessageParser {

        public static const DEFAULT_PRICE_DIGIT:int = 2;
        public static const DEFAULT_SETTLE_DIGIT:int = 2;
        public static const PERCENT_CHANGE_DIGIT:int = 2;
        public static const PERCENT_SWING_DIGIT:int = 2;
        public static const PERFECT_PROJECTED_CHANGE_DIGIT:int = 2;
        public static const INOUT_DIGIT:int = 2;
        public static const EQUITY_PREVIOUS_CLOSE_DIGIT:int = 2;
        public static const PE_DIGIT:int = 2;
        public static const PBV_DIGIT:int = 2;
        public static const YIELD_DIGIT:int = 2;
        public static const EPS_DIGIT:int = 2;
        public static const W52_DIGIT:int = 2;
        public static const PERCENT_CHANGE_WEEK_MONTH_DIGIT:int = 2;
        public static const LAST_TRADING_DATE_LENGTH:int = 10;
        public static const PERCENT_DIGIT:int = 2;
        public static const DATE_LENGTH:int = 8;
        public static const ORDER_SIDE_LENGTH:int = 1;
        public static const DERIVATIVES_WARRANT_TYPE_LENGTH:int = 1;
        public static const EXERCISE_DATE_LENGTH:int = 10;
        public static const W_52_HIGH_LOW_DATE_LENGTH:int = 10;
        public static const AVERAGE_DIGIT:int = 2;
        public static const WARRANT_UNDERLYING_PRICE_DIGIT:int = 2;
        public static const INAV_DIGIT:int = 4;
        public static const TIME_VALUE_DIGIT:int = 2;
        public static const TIME_LENGTH:int = 8;
        public static const POSITION_LENGTH:int = 1;
        public static const UNTIL_LENGTH:int = 8;
        public static const OPTIONS_WIZARD_TOKEN_DIGIT:int = 2;
        public static const TRADE_DATE_CHART_LENGTH:int = 6;
        public static const AUM_SIZE_DIGIT:int = 2;
        public static const THEORICAL_PRICE_DIGIT:int = 2;
        public static const IMPLIED_VOLATILLITY_DIGIT:int = 2;
        public static const DELTA_DIGIT:int = 2;
        public static const THETA_DIGIT:int = 4;
        public static const HISTORICAL_CHART_VALUE_DIGIT:int = 2;
        public static const NEWS_DATE_LENGTH:int = 10;
        public static const NEWS_TIME_LENGTH:int = 8;
        public static const INITIAL_MARGIN_DIGIT:int = 2;
        public static const NOTIFICATION_DATE_LENGTH:int = 10;
        public static const NOTIFICATION_TIME_LENGTH:int = 5;
        public static const STRIKE_PRICE_DIGIT:int = 2;
        public static const HISTORICAL_BY_DATE_VALUE_DIGIT:int = 2;
        public static const MULTIPLER_DIGIT:int = 5;
        public static const EXPIRY_TIME_LENGTH:int = 5;
        public static const EXPIRY_DATE_LENGTH:int = 10;

        private static var logger:Logger = new Logger(prototype.constructor);

        public function DispatcherBinaryMessageParser(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            var requestMessage:* = null;
            var parseMessage:* = null;
            var serviceType:* = null;
            var message:* = message;
            if ((!(message) is IBinaryRawMessage)){
                throw (new InvalidMessageTypeError(message));
            };
            requestMessage = null;
            parseMessage = null;
            var rawMessage:* = IBinaryRawMessage(message);
            var source:* = null;
            if ((message is ResponseMessage)){
                source = ResponseMessage(message).source;
                requestMessage = ResponseMessage(message).requestMessage;
            } else {
                if ((message is FeedMessage)){
                    source = FeedMessage(message).source;
                };
            };
            var rawData:* = rawMessage.data;
            var serviceId:* = rawData.readByte();
            logger.debug(("service id is " + serviceId));
            serviceType = FeedServiceType.lookUpFromId(serviceId);
            try {
                switch (serviceType){
                    case FeedServiceType.INFO:
                        parseMessage = this.parseInfo(rawMessage, source);
                        break;
                    case FeedServiceType.INFO_STATISTIC:
                        parseMessage = this.parseInfoStatistic(rawMessage, source);
                        break;
                    case FeedServiceType.INFO_STATISTIC_CHART:
                        parseMessage = this.parseInfoStatisticChart(rawMessage, source);
                        break;
                    case FeedServiceType.INFO_ODDLOT:
                        parseMessage = this.parseInfoOddLot(rawMessage, source);
                        break;
                    case FeedServiceType.SNAPSHOT:
                        parseMessage = this.parseSnapshot(rawMessage, source);
                        break;
                    case FeedServiceType.INSTRUMNET_TICKER:
                        parseMessage = this.parseInstrumentTicker(rawMessage, source);
                        break;
                    case FeedServiceType.INSTRUMENT_TICKER_ODDLOT:
                        parseMessage = this.parseInstrumentTickerOddLot(rawMessage, source);
                        break;
                    case FeedServiceType.MARKET_TICKER:
                        parseMessage = this.parseMarketTicker(rawMessage, source);
                        break;
                    case FeedServiceType.MARKET_SUMMARY:
                        parseMessage = this.parseMarketSummary(rawMessage, source);
                        break;
                    case FeedServiceType.EQUITY_ORDER:
                        parseMessage = this.parseEquityOrder(rawMessage, source);
                        break;
                    case FeedServiceType.DERIV_ORDER:
                        parseMessage = this.parseDerivativesOrder(rawMessage, source);
                        break;
                    case FeedServiceType.VOLUME_BY_PRICE:
                        parseMessage = this.parseVolumeByPrice(rawMessage, source);
                        break;
                    case FeedServiceType.VOLUME_BY_PRICE_DETAIL:
                        parseMessage = this.parseVolumeByPriceDetail(rawMessage, source);
                        break;
                    case FeedServiceType.OPTIONS_HISTORICAL_CHART:
                        parseMessage = this.parseOptionsHistoricalChart(rawMessage, source);
                        break;
                    case FeedServiceType.INTRADAY_CHART:
                        parseMessage = this.parseIntradayChart(rawMessage, source);
                        break;
                    case FeedServiceType.OPTIONS_STRIKE_PRICE_LIST:
                        parseMessage = this.parseOptionsStrikePriceList(rawMessage, source);
                        break;
                    case FeedServiceType.OPTIONS_GREEK_VALUE:
                        parseMessage = this.parseOptionsGreekValue(rawMessage, source);
                        break;
                    case FeedServiceType.OPTIONS_GREEK_DEFAULT_VALUE:
                        parseMessage = this.parseOptionsGreekDefaultValue(rawMessage, source);
                        break;
                    case FeedServiceType.HISTORICAL_CHART:
                        parseMessage = this.parseHistoricalChart(rawMessage, source);
                        break;
                    case FeedServiceType.HISTORICAL_BY_DATE:
                        parseMessage = this.parseHistoricalByDate(rawMessage, source);
                        break;
                    case FeedServiceType.DISCONNECT:
                        parseMessage = this.parseDisconnect(rawMessage, source);
                        break;
                    case FeedServiceType.NEWS:
                        parseMessage = this.parseNews(rawMessage, source);
                        break;
                    case FeedServiceType.NOTIFICATION:
                        parseMessage = this.parseNotification(rawMessage, source);
                        break;
                    case FeedServiceType.SET_CALENDAR:
                        parseMessage = this.parseSetCalendar(rawMessage, source);
                        break;
                    case FeedServiceType.ADMIN:
                        parseMessage = this.parseAdmin(rawMessage, source);
                        break;
                    case FeedServiceType.ANNOUNCEMENT:
                        parseMessage = this.parseAnnouncement(rawMessage, source);
                        break;
                    case FeedServiceType.DERIV_ORDER_NEW:
                        parseMessage = this.parseDerivativesOrderNew(rawMessage, source);
                        break;
                    case FeedServiceType.ORDER_PUSH_CHECK:
                        parseMessage = this.parseOrderPushCheck(rawMessage, source);
                        break;
                    default:
                        throw (new Error(("Invalid Service Type: " + serviceId)));
                };
                if (rawMessage.data.readByte() != -127){
                    logger.error("Invalid Message End");
                    return (new InvalidParseMessage(message, parseMessage, requestMessage));
                };
                if (rawMessage.data.bytesAvailable > 0){
                    logger.warn(((("ServiceType: " + serviceType.toString()) + " BytesAvailable: ") + rawMessage.data.bytesAvailable));
                };
            } catch(error:Error) {
                logger.error(("Error When Parse Message Type: " + serviceType.toString()));
                logger.debug(error.getStackTrace());
                return (new InvalidParseMessage(message, parseMessage, requestMessage));
            };
            return (parseMessage);
        }
        private function parseOrderPushCheck(feedMessage:IBinaryRawMessage, source:Source):Message{
            var rawData:StreamingByteArray = feedMessage.data;
            rawData.readConfigByte();
            var brokerId:String = rawData.readStringWithLength();
            var service:String = rawData.readStringWithLength();
            var status:String = rawData.readStringWithLength();
            var accountSystem:System = (((service == "SEOSD")) ? System.DERIV : System.EQUITY);
            var orderType:OrderType = OrderType.lookUpFromId(service);
            var feedState:FeedState = FeedState.NO_STATE;
            switch (status){
                case "PUSH":
                    feedState = FeedState.PUSH;
                    break;
                case "PULL":
                    feedState = FeedState.PULL;
                    break;
                case "DISABLE":
                    feedState = FeedState.OFFLINE;
                    break;
            };
            var parseMessage:OrderPushCheckFeedMessage = new OrderPushCheckFeedMessage(source);
            parseMessage.brokerId = brokerId;
            parseMessage.accountSystem = accountSystem;
            parseMessage.orderType = orderType;
            parseMessage.orderPushStatus = feedState;
            return (parseMessage);
        }
        private function parseDerivativesOrderNew(feedMessage:IBinaryRawMessage, source:Source):Message{
            var message:OrderStatusDerivativesFeedMessage;
            var rawData:StreamingByteArray = feedMessage.data;
            rawData.readConfigByte();
            var priceDigit:int = rawData.readByte();
            var orderNumber:String = rawData.readLongOrInt().toString();
            var accountNumber:String = rawData.readStringWithLength();
            var enterId:String = rawData.readStringWithLength();
            var date:String = rawData.readStringWithLength();
            var time:String = rawData.readUTFBytes(TIME_LENGTH);
            var instrumentId:String = rawData.readStringWithLength();
            var side:DerivativesOrderSide = DerivativesOrderSide.lookupFromFeed(rawData.readUTFBytes(ORDER_SIDE_LENGTH));
            var position:DerivativesPosition = DerivativesPosition.lookupFromFeed(rawData.readUTFBytes(POSITION_LENGTH));
            var price:Number = rawData.readNumberWithDigit(priceDigit);
            var priceTypeStr:String = rawData.readStringWithLength();
            var priceType:DerivativesPriceType = DerivativesPriceType.lookUpFromOrder(priceTypeStr);
            var volume:Number = rawData.readIntOrShort();
            var balanceVolume:Number = rawData.readIntOrShort();
            var matchVolume:Number = rawData.readIntOrShort();
            var cancelVolume:Number = rawData.readIntOrShort();
            var validityStr:String = rawData.readStringWithLength();
            var validity:DerivativesValidity = DerivativesValidity.lookupFromNewOrder(validityStr);
            var until:String = rawData.readStringWithLength();
            var dataArray:Array = rawData.readVaryBitArray([1, 1, 1, 1, 1, 1, 1, 1]);
            var canCancel:Boolean = Boolean(dataArray[0]);
            var canChange:Boolean = Boolean(dataArray[1]);
            var canApprove:Boolean = Boolean(dataArray[2]);
            var deleteFlag:Boolean = Boolean(dataArray[3]);
            var isMatch:Boolean = Boolean(dataArray[4]);
            var isAll:Boolean = Boolean(dataArray[5]);
            var isStopOrderNotActivate:Boolean = Boolean(dataArray[6]);
            var isTradeReport:Boolean = Boolean(dataArray[7]);
            var canChangePriceVolume:Boolean = rawData.readBoolean();
            var status:String = rawData.readStringWithLength();
            var version:Number = rawData.readLongOrInt();
            if (isAll){
                message = new OrderStatusDerivativesAllFeedMessage(source);
            } else {
                message = new OrderStatusDerivativesFeedMessage(source);
            };
            message.priceDigit = priceDigit;
            message.orderSide = side;
            message.orderNumber = orderNumber;
            message.accountNumber = accountNumber;
            message.enterId = enterId;
            message.date = date;
            message.time = time;
            message.instrumentId = instrumentId;
            message.orderSide = side;
            message.position = position;
            message.price = price;
            message.priceType = priceType;
            message.volume = volume;
            message.balanceVolume = balanceVolume;
            message.matchVolume = matchVolume;
            message.cancelVolume = cancelVolume;
            message.validity = validity;
            message.until = until;
            message.canCancel = canCancel;
            message.canChange = canChange;
            message.canChangePriceVolume = canChangePriceVolume;
            message.canApprove = canApprove;
            message.deleteFlag = deleteFlag;
            message.status = status;
            message.isMatch = isMatch;
            message.isStopOrderNotActivate = isStopOrderNotActivate;
            message.isTradeReport = isTradeReport;
            message.version = version;
            return (message);
        }
        private function parseAdmin(rawMessage:IBinaryRawMessage, source:Source):Message{
            var parseMessage:AdminFeedMessage = new AdminFeedMessage(source);
            var byteArray:StreamingByteArray = rawMessage.data;
            byteArray.readConfigByte();
            var time:String = byteArray.readUTFBytes(TIME_LENGTH);
            var detail:String = byteArray.readStringWithLength();
            parseMessage.time = time;
            parseMessage.detail = detail;
            return (parseMessage);
        }
        private function parseAnnouncement(rawMessage:IBinaryRawMessage, source:Source):Message{
            var marketId:String;
            var market:String;
            var marketStatus:String;
            var instrumentId:String;
            var volume:Number;
            var priceDigit:int;
            var price:Number;
            var parseMessage:AnnouncementFeedMessage = new AnnouncementFeedMessage(source);
            var byteArray:StreamingByteArray = rawMessage.data;
            byteArray.readConfigByte();
            var instrumentType:InstrumentType = InstrumentType.lookUpFromFeed(byteArray.readByte());
            var dataFlagArray:Array = byteArray.readBooleanArray();

            var hasBigLotDataFlag:Boolean = dataFlagArray[1];
            var hasMarketStatusChangeDataFlag:Boolean = dataFlagArray[0];
            var time:String = byteArray.readUTFBytes(8);
            var bigLotMessage:BigLotMessage;
            var marketStatusMessage:MarketStatusChangeMessage;
            if (hasMarketStatusChangeDataFlag){
                marketStatusMessage = new MarketStatusChangeMessage();
                marketId = "";
                market = "SET";
                if (instrumentType.isDerivatives()){
                    marketId = byteArray.readUTFBytes(3);
                    market = "TFEX";
                };
                marketStatus = byteArray.readStringWithLength();
                marketStatusMessage.marketId = marketId;
                marketStatusMessage.market = market;
                marketStatusMessage.marketStatus = marketStatus;
            };
            if (hasBigLotDataFlag){
                bigLotMessage = new BigLotMessage();
                instrumentId = byteArray.readStringWithLength();
                volume = byteArray.readIntOrShort();
                priceDigit = 2;
                if (instrumentType.isDerivatives()){
                    priceDigit = byteArray.readByte();
                };
                price = byteArray.readNumberWithDigit(priceDigit);
                bigLotMessage.instrumentId = instrumentId;
                bigLotMessage.volume = volume;
                bigLotMessage.price = price;
                bigLotMessage.priceDigit = priceDigit;
            };
            parseMessage.instrumentType = instrumentType;
            parseMessage.hasMarketStatusChange = hasMarketStatusChangeDataFlag;
            parseMessage.hasBigLot = hasBigLotDataFlag;
            parseMessage.time = time;
            parseMessage.marketStatusMessage = marketStatusMessage;
            parseMessage.bigLotMessage = bigLotMessage;
            return (parseMessage);
        }
        private function parseHistoricalByDate(rawMessage:IBinaryRawMessage, source:Source):Message{
            var day:int;
            var month:int;
            var year:int;
            var open:Number;
            var close:Number;
            var change:Number;
            var percentChange:Number;
            var high:Number;
            var low:Number;
            var volume:Number;
            var averagePrice:Number;
            var historicalByDateData:HistoricalByDateData;
            var value:Number;
            var marketCap:Number;
            var pe:Number;
            var dividend:Number;
            var prevSettlementPrice:Number;
            var settlementPrice:Number;
            var transaction:Number;
            var oi:int;
            var requestMessage:RequestMessage = ResponseMessage(rawMessage).requestMessage;
            var parseMessage:HistoricalByDateResponseMessage = new HistoricalByDateResponseMessage(requestMessage, source);
            var byteArray:StreamingByteArray = rawMessage.data;
            byteArray.readConfigByte();
            var instrumentId:String = byteArray.readStringWithLength();
            var instrumentType:InstrumentType = InstrumentType.lookUpFromFeed(byteArray.readByte());
            var hasExtraDetail:Boolean = byteArray.readBoolean();
            var dataCount:int = byteArray.readShort();
            var data:Array = new Array();
            var i:int;
            while (i < dataCount) {
                day = byteArray.readByte();
                month = byteArray.readByte();
                year = byteArray.readShort();
                open = byteArray.readNumberWithDigit(HISTORICAL_BY_DATE_VALUE_DIGIT);
                close = byteArray.readNumberWithDigit(HISTORICAL_BY_DATE_VALUE_DIGIT);
                change = byteArray.readNumberWithDigit(HISTORICAL_BY_DATE_VALUE_DIGIT);
                percentChange = byteArray.readNumberFixedShortWithDigit(HISTORICAL_BY_DATE_VALUE_DIGIT);
                high = byteArray.readNumberWithDigit(HISTORICAL_BY_DATE_VALUE_DIGIT);
                low = byteArray.readNumberWithDigit(HISTORICAL_BY_DATE_VALUE_DIGIT);
                volume = byteArray.readLongOrInt();
                averagePrice = NaN;
                if (instrumentType.isEquity()){
                    averagePrice = byteArray.readNumberWithDigit(HISTORICAL_BY_DATE_VALUE_DIGIT);
                };
                historicalByDateData = new HistoricalByDateData();
                historicalByDateData.day = day;
                historicalByDateData.month = month;
                historicalByDateData.year = year;
                historicalByDateData.open = open;
                historicalByDateData.close = close;
                historicalByDateData.change = change;
                historicalByDateData.percentChange = percentChange;
                historicalByDateData.high = high;
                historicalByDateData.low = low;
                historicalByDateData.averagePrice = averagePrice;
                historicalByDateData.volume = volume;
                if (hasExtraDetail){
                    if (((instrumentType.isEquity()) || (instrumentType.isIndex()))){
                        value = byteArray.readLongOrInt();
                        marketCap = byteArray.readLongOrInt();
                        pe = byteArray.readNumberFixedShortWithDigit(HISTORICAL_BY_DATE_VALUE_DIGIT);
                        dividend = byteArray.readNumberFixedShortWithDigit(HISTORICAL_BY_DATE_VALUE_DIGIT);
                        historicalByDateData.hasExtraDetail = true;
                        historicalByDateData.value = value;
                        historicalByDateData.marketCap = marketCap;
                        historicalByDateData.pe = pe;
                        historicalByDateData.dividend = dividend;
                    } else {
                        if (instrumentType.isDerivatives()){
                            prevSettlementPrice = byteArray.readNumberWithDigit(HISTORICAL_BY_DATE_VALUE_DIGIT);
                            settlementPrice = byteArray.readNumberWithDigit(HISTORICAL_BY_DATE_VALUE_DIGIT);
                            transaction = byteArray.readLongOrInt();
                            oi = byteArray.readLongOrInt();
                            historicalByDateData.prevSettlementPrice = prevSettlementPrice;
                            historicalByDateData.settlementPrice = settlementPrice;
                            historicalByDateData.transaction = transaction;
                            historicalByDateData.oi = oi;
                        };
                    };
                };
                data.push(historicalByDateData);
                i++;
            };
            parseMessage.instrumentId = instrumentId;
            parseMessage.data = data;
            return (parseMessage);
        }
        private function parseSetCalendar(rawMessage:IBinaryRawMessage, source:Source):Message{
            var byteArray:StreamingByteArray;
            var instrumentId:String;
            var day:int;
            var currentDate:Date;
            var eventType:CalendarType;
            var hasDetail:Boolean;
            var setCalendar:SetCalendar;
            var setCalendarDetail:SetCalendarDetail;
            var _local18:SetCalendarDetailXD;
            var _local19:String;
            var _local20:String;
            var _local21:String;
            var _local22:String;
            var _local23:String;
            var _local24:String;
            var _local25:SetCalendarDetailXE;
            var _local26:String;
            var _local27:String;
            var _local28:String;
            var _local29:Number;
            var _local30:Number;
            var _local31:SetCalendarDetailXM;
            var _local32:String;
            var _local33:String;
            var _local34:String;
            var _local35:SetCalendarDetailXRXW;
            var _local36:String;
            var _local37:Number;
            var _local38:String;
            var _local39:SetCalendarDetailXB;
            var _local40:String;
            var _local41:String;
            var _local42:String;
            var _local43:SetCalendarDetailXN;
            var _local44:String;
            var _local45:String;
            var requestMessage:RequestMessage = ResponseMessage(rawMessage).requestMessage;
            byteArray = rawMessage.data;
            byteArray.readConfigByte();
            var month:int = byteArray.readByte();
            var year:int = byteArray.readShort();
            var dataCount:int = byteArray.readShort();
            var dataList:Array = new Array();
            var i:* = 0;
            while (i < dataCount) {
                instrumentId = byteArray.readStringWithLength();
                day = byteArray.readByte();
                currentDate = new Date(year, (month - 1), day);
                eventType = CalendarType.lookupFromFeed(byteArray.readStringWithLength());
                hasDetail = byteArray.readBoolean();
                setCalendar = new SetCalendar();
                setCalendar.instrumentId = instrumentId;
                setCalendar.day = day;
                setCalendar.date = currentDate;
                setCalendar.eventType = eventType;
                setCalendar.hasDetail = hasDetail;
                if (hasDetail){
                    setCalendarDetail = null;
                    switch (eventType){
                        case CalendarType.XD:
                            _local18 = new SetCalendarDetailXD();
                            _local19 = byteArray.readStringWithLength();
                            _local20 = byteArray.readStringWithLength();
                            _local21 = byteArray.readStringWithLength();
                            _local22 = byteArray.readStringWithLength();
                            _local23 = byteArray.readStringWithLength();
                            _local24 = byteArray.readStringWithLength();
                            _local18.period = _local19;
                            _local18.value = _local20;
                            _local18.payDate = _local21;
                            _local18.payType = _local22;
                            _local18.priceOnX = _local23;
                            _local18.priceBeforeX = _local24;
                            setCalendarDetail = _local18;
                            break;
                        case CalendarType.XE:
                            _local25 = new SetCalendarDetailXE();
                            _local26 = byteArray.readStringWithLength();
                            _local19 = byteArray.readStringWithLength();
                            _local27 = byteArray.readStringWithLength();
                            _local28 = byteArray.readStringWithLength();
                            _local29 = byteArray.readLong();
                            _local30 = byteArray.readLong();
                            _local25.bookCloseDate = _local26;
                            _local25.exerciseShare = _local29;
                            _local25.period = _local19;
                            _local25.price = _local27;
                            _local25.ratio = _local28;
                            _local25.exerciseShare = _local29;
                            _local25.newlyShare = _local30;
                            setCalendarDetail = _local25;
                            break;
                        case CalendarType.XM:
                            _local31 = new SetCalendarDetailXM();
                            _local32 = byteArray.readStringWithLength();
                            _local33 = byteArray.readStringWithLength();
                            _local34 = byteArray.readStringWithLength();
                            _local31.date = _local32;
                            _local31.agenda = _local33;
                            _local31.venue = _local34;
                            setCalendarDetail = _local31;
                            break;
                        case CalendarType.XR:
                        case CalendarType.XW:
                            _local35 = new SetCalendarDetailXRXW();
                            _local36 = byteArray.readStringWithLength();
                            _local37 = byteArray.readLong();
                            _local28 = byteArray.readStringWithLength();
                            _local19 = byteArray.readStringWithLength();
                            _local38 = byteArray.readStringWithLength();
                            _local23 = byteArray.readStringWithLength();
                            _local35.allotShare = _local37;
                            _local35.boardDate = _local36;
                            _local35.description = _local38;
                            _local35.period = _local19;
                            _local35.priceOnX = _local23;
                            _local35.ratio = _local28;
                            setCalendarDetail = _local35;
                            break;
                        case CalendarType.XB:
                            _local39 = new SetCalendarDetailXB();
                            _local26 = byteArray.readStringWithLength();
                            _local28 = byteArray.readStringWithLength();
                            _local40 = byteArray.readStringWithLength();
                            _local41 = byteArray.readStringWithLength();
                            _local42 = byteArray.readStringWithLength();
                            _local39.bookCloseDate = _local26;
                            _local39.ratio = _local28;
                            _local39.typeOfBenefit = _local40;
                            _local39.subsidiaryCompany = _local41;
                            _local39.remark = _local42;
                            setCalendarDetail = _local39;
                            break;
                        case CalendarType.XN:
                            _local43 = new SetCalendarDetailXN();
                            _local26 = byteArray.readStringWithLength();
                            _local44 = byteArray.readStringWithLength();
                            _local45 = byteArray.readStringWithLength();
                            _local24 = byteArray.readStringWithLength();
                            _local23 = byteArray.readStringWithLength();
                            _local43.bookCloseDate = _local26;
                            _local43.capitalReturn = _local44;
                            _local43.paymentDate = _local45;
                            _local43.priceBeforeX = _local24;
                            _local43.priceOnX = _local23;
                            setCalendarDetail = _local43;
                            break;
                    };
                    setCalendar.detail = setCalendarDetail;
                };
                dataList.push(setCalendar);
                i++;
            };
            var message:SetCalendarResponseMessage = new SetCalendarResponseMessage(requestMessage, source);
            message.dataList = dataList;
            message.month = month;
            message.year = year;
            return (message);
        }
        private function parseNotification(rawMessage:IBinaryRawMessage, source:Source):Message{
            var byteArray:StreamingByteArray = rawMessage.data;
            byteArray.readConfigByte();
            var notificationType:NotificationCategory = NotificationCategory.lookupFromFeed(byteArray.readStringWithLength());
            var date:String = byteArray.readUTFBytes(NOTIFICATION_DATE_LENGTH);
            var time:String = byteArray.readUTFBytes(NOTIFICATION_TIME_LENGTH);
            var instrumentId:String = byteArray.readStringWithLength();
            var title:String = byteArray.readStringWithLength();
            var link:String = byteArray.readStringWithLength();
            var id:Number = byteArray.readLongOrInt();
            switch (notificationType){
                case NotificationCategory.NEWS:
                    return (new NewsNotificationMessage(date, time, instrumentId, title, link, id));
                case NotificationCategory.ANNOUCEMENT:
                    return (new AnnoucementNotificationMessage(date, time, instrumentId, title, link, id));
                case NotificationCategory.RESEARCH:
                    return (new ResearchNotificationMessage(date, time, instrumentId, title, link, id));
                default:
                    logger.error("Invalid Category");
                    return (new InvalidParseMessage(rawMessage, null, null));
            };
        }
        private function parseHistoricalChart(rawMessage:IBinaryRawMessage, source:Source):Message{
            var day:int;
            var month:int;
            var year:int;
            var value:Number;
            var volume:Number;
            var chartData:HistoricalChartData;
            var requestMessage:RequestMessage = ResponseMessage(rawMessage).requestMessage;
            var parseMessage:HistoricalChartResponseMessage = new HistoricalChartResponseMessage(requestMessage, source);
            var byteArray:StreamingByteArray = rawMessage.data;
            byteArray.readConfigByte();
            var instrumentId:String = byteArray.readStringWithLength();
            var priceDigit:int = byteArray.readByte();
            var spreadInt:int = byteArray.readIntOrShort();
            var spread:Number = (((spreadInt == 0)) ? NaN : (spreadInt / Math.pow(10, priceDigit)));
            var dataCount:int = byteArray.readShort();
            var data:Array = new Array();
            var i:int;
            while (i < dataCount) {
                day = byteArray.readByte();
                month = byteArray.readByte();
                year = byteArray.readShort();
                value = byteArray.readNumberWithDigit(HISTORICAL_CHART_VALUE_DIGIT);
                volume = byteArray.readLongOrInt();
                chartData = new HistoricalChartData();
                chartData.day = day;
                chartData.month = month;
                chartData.year = year;
                chartData.value = value;
                chartData.volume = volume;
                data.push(chartData);
                i++;
            };
            parseMessage.instrumentId = instrumentId;
            parseMessage.spread = spread;
            parseMessage.data = data;
            return (parseMessage);
        }
        private function parseNews(rawMessage:IBinaryRawMessage, source:Source):Message{
            var requestMessage:RequestMessage;
            var type:NewsType;
            var language:Language;
            var date:String;
            var time:String;
            var src:String;
            var instrumentId:String;
            var title:String;
            var id:int;
            var filePath:String;
            var link:String;
            var hasAttach:Boolean;
            var news:News;
            if (rawMessage.side.isResponse()){
                requestMessage = ResponseMessage(rawMessage).requestMessage;
            } else {
                requestMessage = null;
            };
            var parseMessage:NewsResponseMessage = new NewsResponseMessage(requestMessage, source);
            var byteArray:StreamingByteArray = rawMessage.data;
            byteArray.readConfigByte();
            var count:int = byteArray.readShortOrByte();
            var i:* = 0;
            while (i < count) {
                type = NewsType.lookupFromFeed(byteArray.readStringWithLength());
                language = Language.lookupFromFeed(byteArray.readStringWithLength());
                date = byteArray.readUTFBytes(NEWS_DATE_LENGTH);
                time = byteArray.readUTFBytes(NEWS_TIME_LENGTH);
                src = byteArray.readStringWithLength();
                instrumentId = byteArray.readStringWithLength();
                title = byteArray.readStringWithLength();
                id = byteArray.readInt();
                filePath = byteArray.readStringWithLength();
                link = byteArray.readStringWithLength();
                hasAttach = byteArray.readBoolean();
                news = new News();
                news.type = type;
                news.language = language;
                news.date = date;
                news.time = time;
                news.source = src;
                news.instrumentId = instrumentId;
                news.title = title;
                news.id = id;
                news.filePath = filePath;
                news.link = link;
                news.hasAttach = hasAttach;
                parseMessage.addNews(news);
                i++;
            };
            return (parseMessage);
        }
        private function parseDisconnect(rawMessage:IBinaryRawMessage, source:Source):Message{
            logger.error("DISCONNECT FROM DISPATCHER");
            return (new DisconnectFeedMessage(source));
        }
        private function parseIntradayChart(rawMessage:IBinaryRawMessage, source:Source):Message{
            var nValue:Number;
            var volume:Number;
            var chartData:PriceValueIntradayChartData;
            var requestMessage:RequestMessage = ResponseMessage(rawMessage).requestMessage;
            var parseMessage:VolumeByPriceResponseMessage;
            var byteArray:StreamingByteArray = rawMessage.data;
            byteArray.readConfigByte();
            var instrumentId:String = byteArray.readStringWithLength();
            var chartType:ChartType = ChartType.lookupFromFeed(byteArray.readByte());
            var isNight:Boolean = byteArray.readBoolean();
            var prevClose:Number = byteArray.readNumberWithDigit(DEFAULT_PRICE_DIGIT);
            var last:Number = byteArray.readNumberWithDigit(DEFAULT_PRICE_DIGIT);
            var high:Number = byteArray.readNumberWithDigit(DEFAULT_PRICE_DIGIT);
            var low:Number = byteArray.readNumberWithDigit(DEFAULT_PRICE_DIGIT);
            var priceDigit:int = byteArray.readByte();
            var spreadInt:int = byteArray.readIntOrShort();
            var spread:Number = (((spreadInt == 0)) ? NaN : (spreadInt / Math.pow(10, priceDigit)));
            var hour:int = byteArray.readByte();
            var minute:int = byteArray.readByte();
            var second:int = byteArray.readByte();
            var numData:int = byteArray.readShort();
            var value:Array = new Array();
            var i:* = 0;
            while (i < numData) {
                nValue = byteArray.readNumberWithDigit(DEFAULT_PRICE_DIGIT);
                if (chartType.isPriceValue()){
                    volume = byteArray.readLongOrInt();
                    chartData = new PriceValueIntradayChartData(nValue, volume);
                    value.push(chartData);
                } else {
                    value.push(nValue);
                };
                i++;
            };
            var message:IntradayChartResponseMessage = new IntradayChartResponseMessage(requestMessage, source, instrumentId, chartType, isNight, prevClose, last, high, low, spread, hour, minute, second, value);
            return (message);
        }
        private function parseOptionsStrikePriceList(rawMessage:IBinaryRawMessage, source:Source):Message{
            var strikePrice:Number;
            var callSymbol:String;
            var putSymbol:String;
            var callInTheMoney:Boolean;
            var putInTheMoney:Boolean;
            var optionsStrikePrice:OptionsStrikePrice;
            var requestMessage:RequestMessage = ResponseMessage(rawMessage).requestMessage;
            var byteArray:StreamingByteArray = rawMessage.data;
            byteArray.readConfigByte();
            var expireDate:String = byteArray.readStringWithLength();
            var fullDate:String = byteArray.readStringWithLength();
            var daysToExpire:int = byteArray.readIntOrShort();
            var numData:int = byteArray.readShort();
            var value:Array = new Array();
            var i:* = 0;
            while (i < numData) {
                strikePrice = byteArray.readNumberFixedIntWithDigit(2);
                callSymbol = byteArray.readStringWithLength();
                putSymbol = byteArray.readStringWithLength();
                callInTheMoney = byteArray.readBoolean();
                putInTheMoney = byteArray.readBoolean();
                optionsStrikePrice = new OptionsStrikePrice(strikePrice, callSymbol, putSymbol, callInTheMoney, putInTheMoney);
                value.push(optionsStrikePrice);
                i++;
            };
            var parseMessage:OptionsStrikePriceListResponseMessage = new OptionsStrikePriceListResponseMessage(requestMessage, source, expireDate, fullDate, daysToExpire, value);
            return (parseMessage);
        }
        private function parseOptionsGreekValue(rawMessage:IBinaryRawMessage, source:Source):Message{
            var optionsGreekValue:OptionsGreekValue;
            var isCall:Boolean;
            var bidFlag:PriceType;
            var askFlag:PriceType;
            var requestMessage:RequestMessage = ResponseMessage(rawMessage).requestMessage;
            var byteArray:StreamingByteArray = rawMessage.data;
            byteArray.readConfigByte();
            var expireDate:String = byteArray.readStringWithLength();
            var underlyingPrice:Number = byteArray.readNumberFixedIntWithDigit(2);
            var volatility:Number = byteArray.readNumberFixedIntWithDigit(4);
            var remainDay:int = byteArray.readInt();
            var interestRate:Number = byteArray.readNumberFixedIntWithDigit(4);
            var dividend:Number = byteArray.readNumberFixedIntWithDigit(4);
            var numData:int = byteArray.readShort();
            var dataArray:Array = new Array();
            var i:int;
            while (i < numData) {
                optionsGreekValue = new OptionsGreekValue();
                optionsGreekValue.instrumentId = byteArray.readStringWithLength();
                isCall = byteArray.readBoolean();
                if (isCall){
                    optionsGreekValue.optionsType = OptionsType.CALL;
                } else {
                    optionsGreekValue.optionsType = OptionsType.PUT;
                };
                optionsGreekValue.strikePrice = byteArray.readNumberFixedIntWithDigit(2);
                optionsGreekValue.prevSettle = byteArray.readNumberWithDigit(2);
                optionsGreekValue.last = byteArray.readNumberWithDigit(2);
                optionsGreekValue.change = byteArray.readNumberWithDigit(2);
                bidFlag = PriceType.lookUpFromFeed(byteArray.readByte());
                askFlag = PriceType.lookUpFromFeed(byteArray.readByte());
                optionsGreekValue.bidFlag = bidFlag;
                optionsGreekValue.askFlag = askFlag;
                optionsGreekValue.bidPrice = byteArray.readNumberWithDigit(2);
                optionsGreekValue.askPrice = byteArray.readNumberWithDigit(2);
                optionsGreekValue.bidVolume = byteArray.readIntOrShort();
                optionsGreekValue.askVolume = byteArray.readIntOrShort();
                optionsGreekValue.totalVolume = byteArray.readIntOrShort();
                optionsGreekValue.theoPrice = byteArray.readNumberWithDigit(2);
                optionsGreekValue.diff = byteArray.readNumberWithDigit(2);
                optionsGreekValue.implied = byteArray.readNumberWithDigit(2);
                optionsGreekValue.delta = byteArray.readNumberWithDigit(2);
                optionsGreekValue.gamma = byteArray.readNumberWithDigit(2);
                optionsGreekValue.theta = byteArray.readNumberFixedIntWithDigit(4);
                optionsGreekValue.vega = byteArray.readNumberFixedIntWithDigit(4);
                optionsGreekValue.rho = byteArray.readNumberFixedIntWithDigit(4);
                dataArray.push(optionsGreekValue);
                i++;
            };
            var parseMessage:OptionsGreekValueResponseMessage = new OptionsGreekValueResponseMessage(requestMessage, source, expireDate, underlyingPrice, volatility, remainDay, interestRate, dividend, dataArray);
            return (parseMessage);
        }
        private function parseOptionsGreekDefaultValue(rawMessage:IBinaryRawMessage, source:Source):Message{
            var requestMessage:RequestMessage = ResponseMessage(rawMessage).requestMessage;
            var byteArray:StreamingByteArray = rawMessage.data;
            byteArray.readConfigByte();
            var underlyingPrice:Number = byteArray.readNumberFixedIntWithDigit(2);
            var volatility:Number = byteArray.readNumberFixedIntWithDigit(4);
            var remainDay:int = byteArray.readInt();
            var interestRate:Number = byteArray.readNumberFixedIntWithDigit(4);
            var dividend:Number = byteArray.readNumberFixedIntWithDigit(4);
            var parseMessage:OptionsGreekDefaultValueResponseMessage = new OptionsGreekDefaultValueResponseMessage(requestMessage, source, underlyingPrice, volatility, remainDay, interestRate, dividend);
            return (parseMessage);
        }
        private function parseOptionsHistoricalChart(rawMessage:IBinaryRawMessage, source:Source):Message{
            var requestMessage:RequestMessage = ResponseMessage(rawMessage).requestMessage;
            var parseMessage:VolumeByPriceResponseMessage;
            var byteArray:StreamingByteArray = rawMessage.data;
            byteArray.readConfigByte();
            var instrumentId:String = byteArray.readStringWithLength();
            var period:OptionsWizardHistoricalChartPeriod = OptionsWizardHistoricalChartPeriod.lookupFromFeed(byteArray.readStringWithLength());
            var high:Number = byteArray.readNumberFixedIntWithDigit(OPTIONS_WIZARD_TOKEN_DIGIT);
            var low:Number = byteArray.readNumberFixedIntWithDigit(OPTIONS_WIZARD_TOKEN_DIGIT);
            var totalValue:Number = byteArray.readLong();
            var totalVolume:Number = byteArray.readLong();
            var dataCount:int = byteArray.readShort();
            var close:Array = new Array();
            var tradeDate:Array = new Array();
            var i:* = 0;
            while (i < dataCount) {
                close.push(byteArray.readNumberFixedIntWithDigit(OPTIONS_WIZARD_TOKEN_DIGIT));
                tradeDate.push(byteArray.readUTFBytes(TRADE_DATE_CHART_LENGTH));
                i++;
            };
            var message:OptionsHistoricalChartResponseMessage = new OptionsHistoricalChartResponseMessage(requestMessage, source, instrumentId, period, high, low, totalValue, totalVolume, close, tradeDate);
            return (message);
        }
        private function parseVolumeByPriceDetail(rawMessage:IBinaryRawMessage, source:Source):Message{
            var subPrice:Number;
            var subBuyVolume:Number;
            var subSellVolume:Number;
            var subTotalVolume:Number;
            var subPercentTotalVolume:Number;
            var subBuyDeal:int;
            var subSellDeal:int;
            var volumeByPriceDetail:VolumeByPriceDetail;
            var optionsType:OptionsType;
            var volumeByPriceDetailOptionsResponseMessage:VolumeByPriceDetailOptionsResponseMessage;
            var requestMessage:RequestMessage = ResponseMessage(rawMessage).requestMessage;
            var parseMessage:VolumeByPriceDetailResponseMessage;
            var byteArray:StreamingByteArray = rawMessage.data;
            byteArray.readConfigByte();
            var instrumentId:String = byteArray.readStringWithLength();
            var instrumentType:InstrumentType = InstrumentType.lookUpFromFeed(byteArray.readByte());
            var priceDigit:int = DEFAULT_PRICE_DIGIT;
            if (instrumentType.isDerivatives()){
                priceDigit = byteArray.readByte();
            };
            var buyVolume:Number = byteArray.readLongOrInt();
            var sellVolume:Number = byteArray.readLongOrInt();
            var percentBuyVolume:Number = byteArray.readByte();
            var percentSellVolume:Number = byteArray.readByte();
            var previousClose:Number = byteArray.readNumberWithDigit(priceDigit);
            var buySellCount:int = byteArray.readShortOrByte();
            var buySellList:Array = new Array();
            var i:int;
            while (i < buySellCount) {
                subPrice = byteArray.readNumberWithDigit(priceDigit);
                subBuyVolume = byteArray.readLongOrInt();
                subSellVolume = byteArray.readLongOrInt();
                subTotalVolume = byteArray.readLongOrInt();
                subPercentTotalVolume = byteArray.readNumberFixedShortWithDigit(PERCENT_DIGIT);
                subBuyDeal = byteArray.readIntOrShort();
                subSellDeal = byteArray.readIntOrShort();
                volumeByPriceDetail = new VolumeByPriceDetail();
                volumeByPriceDetail.price = subPrice;
                volumeByPriceDetail.buyVolume = subBuyVolume;
                volumeByPriceDetail.sellVolume = subSellVolume;
                volumeByPriceDetail.totalVolume = subTotalVolume;
                volumeByPriceDetail.percentTotalVolume = subPercentTotalVolume;
                volumeByPriceDetail.buyDeal = subBuyDeal;
                volumeByPriceDetail.sellDeal = subSellDeal;
                buySellList.push(volumeByPriceDetail);
                i++;
            };
            if (instrumentType.isOptions()){
                optionsType = ((byteArray.readBoolean()) ? OptionsType.CALL : OptionsType.PUT);
            };
            var volumeByPriceDetailResponseMessage:VolumeByPriceDetailResponseMessage;
            if (instrumentType.isOptions()){
                volumeByPriceDetailOptionsResponseMessage = new VolumeByPriceDetailOptionsResponseMessage(requestMessage, source);
                volumeByPriceDetailOptionsResponseMessage.optionsType = optionsType;
                volumeByPriceDetailResponseMessage = volumeByPriceDetailOptionsResponseMessage;
            } else {
                volumeByPriceDetailResponseMessage = new VolumeByPriceDetailResponseMessage(requestMessage, source);
            };
            volumeByPriceDetailResponseMessage.instrumentId = instrumentId;
            volumeByPriceDetailResponseMessage.instrumentType = instrumentType;
            volumeByPriceDetailResponseMessage.buyVolume = buyVolume;
            volumeByPriceDetailResponseMessage.sellVolume = sellVolume;
            volumeByPriceDetailResponseMessage.priceDigit = priceDigit;
            volumeByPriceDetailResponseMessage.percentBuyVolume = percentBuyVolume;
            volumeByPriceDetailResponseMessage.percentSellVolume = percentSellVolume;
            volumeByPriceDetailResponseMessage.previousClose = previousClose;
            volumeByPriceDetailResponseMessage.buySellList = buySellList;
            parseMessage = volumeByPriceDetailResponseMessage;
            return (parseMessage);
        }
        private function parseVolumeByPrice(rawMessage:IBinaryRawMessage, source:Source):Message{
            var averageBuy:Number;
            var averageSell:Number;
            var isCallOptions:Boolean;
            var buyVolOpposite:int;
            var sellVolOpposite:int;
            var percentBuyVolOpposite:int;
            var percentSellVolOpposite:int;
            var sectorBuyVolOpposite:int;
            var sectorSellVolOpposite:int;
            var sectorPercentBuyVolOpposite:int;
            var sectorPercentSellVolOpposite:int;
            var volumeByPriceEquityResponseMessage:VolumeByPriceEquityResponseMessage;
            var volumeByPriceOptionsResponseMessage:VolumeByPriceOptionsResponseMessage;
            var requestMessage:RequestMessage = ResponseMessage(rawMessage).requestMessage;
            var parseMessage:VolumeByPriceResponseMessage;
            var byteArray:StreamingByteArray = rawMessage.data;
            byteArray.readConfigByte();
            var instrumentId:String = byteArray.readStringWithLength();
            var intInstrumentType:int = byteArray.readByte();
            var instrumentType:InstrumentType = InstrumentType.lookUpFromFeed(intInstrumentType);
            var priceDigit:int = DEFAULT_PRICE_DIGIT;
            if (instrumentType.isDerivatives()){
                priceDigit = byteArray.readByte();
            };
            var status:String = byteArray.readStringWithLength();
            var sectorName:String = byteArray.readStringWithLength();
            var previousClose:Number = byteArray.readNumberFixedIntWithDigit(priceDigit);
            var buyVolume:Number = byteArray.readLong();
            var sellVolume:Number = byteArray.readLong();
            var percentBuyVolume:int = byteArray.readByte();
            var percentSellVolume:int = byteArray.readByte();
            var sectorBuyVolume:Number = byteArray.readLong();
            var sectorSellVolume:Number = byteArray.readLong();
            var percentSectorBuyVolume:int = byteArray.readByte();
            var percentSectorSellVolume:int = byteArray.readByte();
            var marketBuyVolume:Number = byteArray.readLong();
            var marketSellVolume:Number = byteArray.readLong();
            var percentMarketBuyVolume:int = byteArray.readByte();
            var percentMarketSellVolume:int = byteArray.readByte();
            if (instrumentType.isEquity()){
                averageBuy = byteArray.readNumberFixedIntWithDigit(AVERAGE_DIGIT);
                averageSell = byteArray.readNumberFixedIntWithDigit(AVERAGE_DIGIT);
            } else {
                if (instrumentType.isOptions()){
                    isCallOptions = byteArray.readBoolean();
                    buyVolOpposite = byteArray.readInt();
                    sellVolOpposite = byteArray.readInt();
                    percentBuyVolOpposite = byteArray.readByte();
                    percentSellVolOpposite = byteArray.readByte();
                    sectorBuyVolOpposite = byteArray.readInt();
                    sectorSellVolOpposite = byteArray.readInt();
                    sectorPercentBuyVolOpposite = byteArray.readByte();
                    sectorPercentSellVolOpposite = byteArray.readByte();
                };
            };
            if (instrumentType.isEquity()){
                volumeByPriceEquityResponseMessage = new VolumeByPriceEquityResponseMessage(requestMessage, source);
                parseMessage = volumeByPriceEquityResponseMessage;
                volumeByPriceEquityResponseMessage.averageBuy = averageBuy;
                volumeByPriceEquityResponseMessage.averageSell = averageSell;
            } else {
                if (instrumentType.isOptions()){
                    volumeByPriceOptionsResponseMessage = new VolumeByPriceOptionsResponseMessage(requestMessage, source);
                    parseMessage = volumeByPriceOptionsResponseMessage;
                    volumeByPriceOptionsResponseMessage.optionsType = ((isCallOptions) ? OptionsType.CALL : OptionsType.PUT);
                    volumeByPriceOptionsResponseMessage.buyVolumeOpposite = buyVolOpposite;
                    volumeByPriceOptionsResponseMessage.sellVolumeOpposite = sellVolOpposite;
                    volumeByPriceOptionsResponseMessage.percentBuyVolumeOpposite = percentBuyVolOpposite;
                    volumeByPriceOptionsResponseMessage.percentSellVolumeOpposite = percentSellVolOpposite;
                    volumeByPriceOptionsResponseMessage.sectorBuyVolumeOpposite = sectorBuyVolOpposite;
                    volumeByPriceOptionsResponseMessage.sectorSellVolumeOpposite = sectorSellVolOpposite;
                    volumeByPriceOptionsResponseMessage.sectorPercentBuyVolumeOpposite = sectorPercentBuyVolOpposite;
                    volumeByPriceOptionsResponseMessage.sectorPercentSellVolumeOpposite = sectorPercentSellVolOpposite;
                } else {
                    parseMessage = new VolumeByPriceResponseMessage(requestMessage, source);
                };
            };
            parseMessage.instrumentId = instrumentId;
            parseMessage.instrumentType = instrumentType;
            parseMessage.status = status;
            parseMessage.sectorName = sectorName;
            parseMessage.previousClose = previousClose;
            parseMessage.buyVolume = buyVolume;
            parseMessage.sellVolume = sellVolume;
            parseMessage.percentBuyVolume = percentBuyVolume;
            parseMessage.percentSellVolume = percentSellVolume;
            parseMessage.sectorBuyVolume = sectorBuyVolume;
            parseMessage.sectorSellVolume = sectorSellVolume;
            parseMessage.sectorPercentBuyVolume = percentSectorBuyVolume;
            parseMessage.sectorPercentSellVolume = percentSectorSellVolume;
            parseMessage.marketBuyVolume = marketBuyVolume;
            parseMessage.marketSellVolume = marketSellVolume;
            parseMessage.marketPercentBuyVolume = percentMarketBuyVolume;
            parseMessage.marketPercentSellVolume = percentMarketSellVolume;
            return (parseMessage);
        }
        private function parseDerivativesOrder(feedMessage:IBinaryRawMessage, source:Source):Message{
            var message:OrderStatusDerivativesFeedMessage;
            var rawData:StreamingByteArray = feedMessage.data;
            rawData.readConfigByte();
            var priceDigit:int = rawData.readByte();
            var orderNumber:String = rawData.readInt().toString();
            var accountNumber:String = rawData.readStringWithLength();
            var enterId:String = rawData.readStringWithLength();
            var date:String = rawData.readStringWithLength();
            var time:String = rawData.readUTFBytes(TIME_LENGTH);
            var instrumentId:String = rawData.readStringWithLength();
            var side:DerivativesOrderSide = DerivativesOrderSide.lookupFromFeed(rawData.readUTFBytes(ORDER_SIDE_LENGTH));
            var position:DerivativesPosition = DerivativesPosition.lookupFromFeed(rawData.readUTFBytes(POSITION_LENGTH));
            var price:Number = rawData.readNumberWithDigit(priceDigit);
            var priceType:DerivativesPriceType = DerivativesPriceType.lookUpFromFeed(rawData.readUTFBytes(1));
            var volume:Number = rawData.readIntOrShort();
            var balanceVolume:Number = rawData.readIntOrShort();
            var matchVolume:Number = rawData.readIntOrShort();
            var cancelVolume:Number = rawData.readIntOrShort();
            var validity:DerivativesValidity = DerivativesValidity.lookupFromFeed(rawData.readByte());
            var until:String = rawData.readUTFBytes(UNTIL_LENGTH);
            var dataArray:Array = rawData.readVaryBitArray([1, 1, 1, 1, 1, 1, 1]);
            var canCancel:Boolean = Boolean(dataArray[0]);
            var canChange:Boolean = Boolean(dataArray[1]);
            var canApprove:Boolean = Boolean(dataArray[2]);
            var deleteFlag:Boolean = Boolean(dataArray[3]);
            var isMatch:Boolean = Boolean(dataArray[4]);
            var isAll:Boolean = Boolean(dataArray[5]);
            var canChangePriceVolume:Boolean = Boolean(dataArray[6]);
            var status:String = rawData.readStringWithLength();
            if (isAll){
                message = new OrderStatusDerivativesAllFeedMessage(source);
            } else {
                message = new OrderStatusDerivativesFeedMessage(source);
            };
            message.priceDigit = priceDigit;
            message.orderSide = side;
            message.orderNumber = orderNumber;
            message.accountNumber = accountNumber;
            message.enterId = enterId;
            message.date = date;
            message.time = time;
            message.instrumentId = instrumentId;
            message.orderSide = side;
            message.position = position;
            message.price = price;
            message.priceType = priceType;
            message.volume = volume;
            message.balanceVolume = balanceVolume;
            message.matchVolume = matchVolume;
            message.cancelVolume = cancelVolume;
            message.validity = validity;
            message.until = until;
            message.canCancel = canCancel;
            message.canChange = canChange;
            message.canApprove = canApprove;
            message.deleteFlag = deleteFlag;
            message.status = status;
            message.isMatch = isMatch;
            message.canChangePriceVolume = canChangePriceVolume;
            return (message);
        }
        private function parseEquityOrder(feedMessage:IBinaryRawMessage, source:Source):Message{
            var rawData:StreamingByteArray = feedMessage.data;
            rawData.readConfigByte();
            var orderNumber:String = rawData.readInt().toFixed(0);
            var accountNumber:String = rawData.readStringWithLength();
            var tradeDate:String = rawData.readStringWithLength();
            var orderTimeHour:int = rawData.readByte();
            var orderTimeMinute:int = rawData.readByte();
            var orderTimeSecond:int = rawData.readByte();
            var instrumentId:String = rawData.readStringWithLength();
            var nvdrFlag:String = rawData.readStringWithLength();
            var price:Number = rawData.readNumberWithDigit(DEFAULT_PRICE_DIGIT);
            var byteData:Array = rawData.readVaryBitArray([4]);
            var priceType:PriceType = PriceType.lookUpFromFeed(byteData[0]);
            var orderSide:OrderSide = OrderSide.lookUpFromFeed(byteData[1]);
            var volume:int = rawData.readIntOrShort();
            var matchVolume:int = rawData.readIntOrShort();
            var balanceVolume:int = rawData.readIntOrShort();
            var cancelVolume:int = rawData.readIntOrShort();
            var bitData:Array = rawData.readVaryBitArray([1, 1, 1, 1]);
            var canCancel:Boolean = bitData[0];
            var canChange:Boolean = bitData[1];
            var isMatchOrder:Boolean = bitData[2];
            var canChangePriceVolume:Boolean = bitData[3];
            var status:String = rawData.readStringWithLength();
            var orderNumberSeos:String = rawData.readInt().toFixed(0);
            var externalOrderNumber:String = rawData.readInt().toFixed(0);
            var message:OrderStatusEquityFeedMessage = new OrderStatusEquityFeedMessage(source);
            message.orderNumber = orderNumber;
            message.accountNumber = accountNumber;
            message.tradeDate = tradeDate;
            message.orderTimeHour = orderTimeHour;
            message.orderTimeMinute = orderTimeMinute;
            message.orderTimeSecond = orderTimeSecond;
            message.instrumentId = instrumentId;
            message.nvdrFlag = nvdrFlag;
            message.price = price;
            message.priceType = priceType;
            message.orderSide = orderSide;
            message.volume = volume;
            message.matchVolume = matchVolume;
            message.balanceVolume = balanceVolume;
            message.cancelVolume = cancelVolume;
            message.canCancel = canCancel;
            message.canChange = canChange;
            message.canChangePriceVolume = canChangePriceVolume;
            message.isMatchOrder = isMatchOrder;
            message.status = status;
            message.orderNumberSeos = orderNumberSeos;
            message.externalOrderNumber = externalOrderNumber;
            return (message);
        }
        private function parseSnapshot(feedMessage:IBinaryRawMessage, source:Source):Message{
            var instrumentSubType:InstrumentSubType;
            var high:Number;
            var low:Number;
            var caFlagCount:int;
            var caFlagList:Array;
            var i:int;
            var sign:String;
            var caDate:String;
            var caFlag:SnapshotCaFlag;
            var previousClose:Number;
            var previousSettle:Number;
            var previousOI:Number;
            var lastTradingDate:String;
            var expiryFlag:DerivativesExpireFlag;
            var expiryTime:String;
            var expiryDate:String;
            var isCallOptions:Boolean;
            var optionsType:OptionsType;
            var strikePrice:int;
            var lastDone:Number;
            var change:Number;
            var percentChange:Number;
            var totalVolume:Number;
            var totalValue:Number;
            var status:String;
            var settlePrice:Number;
            var theoricalPrice:Number;
            var underlyingPrice:Number;
            var bidAskFlagArray:Array;
            var bidFlag:PriceType;
            var askFlag:PriceType;
            var bidPrice:Number;
            var askPrice:Number;
            var bidVolume:Number;
            var askVolume:Number;
            var openPrice1:Number;
            var openPrice2:Number;
            var projectedPrice:Number;
            var percentProjectedChange:Number;
            var openPrice0:Number;
            var snapshotEquity:SnapshotEquityFeedMessage;
            var snapshotInitIndex:SnapshotInitIndex;
            var snapshotInitInstrument:SnapshotInitInstrument;
            var snapshotInitEquity:SnapshotInitEquity;
            var snapshotInitDerivatives:SnapshotInitDerivatives;
            var snapshotInitOptions:SnapshotInitOptions;
            var snapshotSummaryIndex:SnapshotSummaryIndex;
            var snapshotSummaryInstrument:SnapshotSummaryInstrument;
            var snapshotSummaryEquity:SnapshotSummaryEquity;
            var snapshotSummaryDerivatives:SnapshotSummaryDerivatives;
            var snapshotSummaryOption:SnapshotSummaryOption;
            var snapshotProjectedDerivatves:SnapshotProjectedDerivatives;
            var rawData:StreamingByteArray = feedMessage.data;
            rawData.readConfigByte();
            var instrumentId:String = rawData.readStringWithLength();
            var instrumentType:InstrumentType = InstrumentType.lookUpFromFeed(rawData.readByte());
            if (instrumentType.isEquity()){
                instrumentSubType = InstrumentSubType.lookUpFromFeed(rawData.readByte());
            };
            var priceDigit:int = DEFAULT_PRICE_DIGIT;
            var settleDigit:int = DEFAULT_SETTLE_DIGIT;
            if (instrumentType.isDerivatives()){
                priceDigit = rawData.readByte();
                settleDigit = rawData.readByte();
            };
            var dataFlagArray:Array = rawData.readBooleanArray();
            var hasInitDataFlag:Boolean = dataFlagArray[3];
            var hasSummaryDataFlag:Boolean = dataFlagArray[2];
            var hasBidOfferDataFlag:Boolean = dataFlagArray[1];
            var hasProjectedDataFlag:Boolean = dataFlagArray[0];
            if (hasInitDataFlag){
                high = rawData.readNumberWithDigit(priceDigit);
                low = rawData.readNumberWithDigit(priceDigit);
                if (instrumentType.isInstrument()){
                    caFlagCount = rawData.readByte();
                    caFlagList = new Array();
                    i = 0;
                    while (i < caFlagCount) {
                        sign = rawData.readStringWithLength();
                        caDate = rawData.readStringWithLength();
                        caFlag = new SnapshotCaFlag(sign, caDate);
                        caFlagList.push(caFlag);
                        i++;
                    };
                };
                if (((instrumentType.isEquity()) || (instrumentType.isIndex()))){
                    previousClose = rawData.readNumberWithDigit(EQUITY_PREVIOUS_CLOSE_DIGIT);
                } else {
                    if (instrumentType.isDerivatives()){
                        previousSettle = rawData.readNumberWithDigit(priceDigit);
                        previousOI = rawData.readIntOrShort();
                        lastTradingDate = rawData.readUTFBytes(LAST_TRADING_DATE_LENGTH);
                        expiryFlag = DerivativesExpireFlag.lookupFromFeed(rawData.readByte());
                        expiryTime = rawData.readUTFBytes(EXPIRY_TIME_LENGTH);
                        expiryDate = rawData.readUTFBytes(EXPIRY_DATE_LENGTH);
                        if (instrumentType.isOptions()){
                            isCallOptions = rawData.readBoolean();
                            optionsType = ((isCallOptions) ? OptionsType.CALL : OptionsType.PUT);
                            strikePrice = rawData.readShort();
                        };
                    };
                };
            };
            if (hasSummaryDataFlag){
                lastDone = rawData.readNumberWithDigit(priceDigit);
                change = rawData.readNumberWithDigit(priceDigit);
                percentChange = rawData.readNumberWithDigit(PERCENT_CHANGE_DIGIT);
                totalVolume = rawData.readLongOrInt();
                if (instrumentType.isIndex()){
                    totalValue = rawData.readLongOrInt();
                } else {
                    status = rawData.readStringWithLength();
                    if (instrumentType.isEquity()){
                        totalValue = rawData.readLongOrInt();
                    } else {
                        if (instrumentType.isDerivatives()){
                            settlePrice = rawData.readNumberWithDigit(settleDigit);
                            theoricalPrice = rawData.readNumberWithDigit(THEORICAL_PRICE_DIGIT);
                            underlyingPrice = rawData.readNumberWithDigit(priceDigit);
                        };
                    };
                };
            };
            if (hasBidOfferDataFlag){
                if (!instrumentType.isIndex()){
                    bidAskFlagArray = rawData.readVaryBitArray([4]);
                    bidFlag = PriceType.lookUpFromFeed(bidAskFlagArray[0]);
                    askFlag = PriceType.lookUpFromFeed(bidAskFlagArray[1]);
                    bidPrice = rawData.readNumberWithDigit(priceDigit);
                    askPrice = rawData.readNumberWithDigit(priceDigit);
                    bidVolume = rawData.readLongOrInt();
                    askVolume = rawData.readLongOrInt();
                };
            };
            if (hasProjectedDataFlag){
                if (!instrumentType.isIndex()){
                    openPrice1 = rawData.readNumberWithDigit(priceDigit);
                    openPrice2 = rawData.readNumberWithDigit(priceDigit);
                    projectedPrice = rawData.readNumberWithDigit(priceDigit);
                    percentProjectedChange = rawData.readNumberWithDigit(PERFECT_PROJECTED_CHANGE_DIGIT);
                    if (instrumentType.isDerivatives()){
                        openPrice0 = rawData.readNumberWithDigit(priceDigit);
                    };
                };
            };
            var snapshot:SnapshotFeedMessage;
            if (instrumentType.isEquity()){
                snapshotEquity = new SnapshotEquityFeedMessage(source);
                snapshotEquity.instrumentSubType = instrumentSubType;
                snapshot = snapshotEquity;
            } else {
                snapshot = new SnapshotFeedMessage(source);
            };
            snapshot.instrumentId = instrumentId;
            snapshot.instrumentType = instrumentType;
            snapshot.priceDigit = priceDigit;
            snapshot.settleDigit = settleDigit;
            snapshot.hasInitData = hasInitDataFlag;
            snapshot.hasSummaryData = hasSummaryDataFlag;
            snapshot.hasBidOfferData = hasBidOfferDataFlag;
            snapshot.hasProjectedData = hasProjectedDataFlag;
            var snapshotInit:SnapshotInit;
            var snapshotSummary:SnapshotSummary;
            var snapshotBidOffer:SnapshotBidOffer;
            var snapshotProjected:SnapshotProjected;
            if (hasInitDataFlag){
                if (instrumentType.isIndex()){
                    snapshotInitIndex = new SnapshotInitIndex();
                    snapshotInit = snapshotInitIndex;
                    snapshotInitIndex.previousClose = previousClose;
                } else {
                    if (instrumentType.isInstrument()){
                        snapshotInitInstrument = null;
                        if (instrumentType.isEquity()){
                            snapshotInitEquity = new SnapshotInitEquity();
                            snapshotInitInstrument = snapshotInitEquity;
                            snapshotInitEquity.previousClose = previousClose;
                        } else {
                            if (instrumentType.isDerivatives()){
                                snapshotInitDerivatives = null;
                                if (instrumentType.isOptions()){
                                    snapshotInitOptions = new SnapshotInitOptions();
                                    snapshotInitOptions.optionsType = optionsType;
                                    snapshotInitOptions.strikePrice = strikePrice;
                                    snapshotInitDerivatives = snapshotInitOptions;
                                } else {
                                    snapshotInitDerivatives = new SnapshotInitDerivatives();
                                };
                                snapshotInitInstrument = snapshotInitDerivatives;
                                snapshotInitDerivatives.previousSettle = previousSettle;
                                snapshotInitDerivatives.previousOI = previousOI;
                                snapshotInitDerivatives.lastTradingDate = lastTradingDate;
                                snapshotInitDerivatives.expiryFlag = expiryFlag;
                                snapshotInitDerivatives.expiryTime = expiryTime;
                                snapshotInitDerivatives.expiryDate = expiryDate;
                            };
                        };
                        snapshotInitInstrument.caFlagList = caFlagList;
                        snapshotInit = snapshotInitInstrument;
                    };
                };
                snapshotInit.high = high;
                snapshotInit.low = low;
                snapshot.snapshotInit = snapshotInit;
            };
            if (hasSummaryDataFlag){
                if (instrumentType.isIndex()){
                    snapshotSummaryIndex = new SnapshotSummaryIndex();
                    snapshotSummary = snapshotSummaryIndex;
                    snapshotSummaryIndex.totalValue = totalValue;
                } else {
                    if (instrumentType.isEquity()){
                        snapshotSummaryEquity = new SnapshotSummaryEquity();
                        snapshotSummary = snapshotSummaryEquity;
                        snapshotSummaryEquity.totalValue = totalValue;
                    } else {
                        if (instrumentType.isDerivatives()){
                            snapshotSummaryDerivatives = null;
                            if (instrumentType.isOptions()){
                                snapshotSummaryOption = new SnapshotSummaryOption();
                                snapshotSummaryDerivatives = snapshotSummaryOption;
                            } else {
                                snapshotSummaryDerivatives = new SnapshotSummaryDerivatives();
                            };
                            snapshotSummary = snapshotSummaryDerivatives;
                            snapshotSummaryDerivatives.settlePrice = settlePrice;
                            snapshotSummaryDerivatives.theoricalPrice = theoricalPrice;
                            snapshotSummaryDerivatives.underlyingPrice = underlyingPrice;
                        };
                    };
                    snapshotSummaryInstrument = SnapshotSummaryInstrument(snapshotSummary);
                    snapshotSummaryInstrument.status = status;
                };
                snapshotSummary.lastDone = lastDone;
                snapshotSummary.change = change;
                snapshotSummary.percentChange = percentChange;
                snapshotSummary.totalVolume = totalVolume;
                snapshot.snapshotSummary = snapshotSummary;
            };
            if (hasBidOfferDataFlag){
                snapshotBidOffer = new SnapshotBidOffer();
                snapshotBidOffer.bidFlag = bidFlag;
                snapshotBidOffer.askFlagh = askFlag;
                snapshotBidOffer.bidPrice = bidPrice;
                snapshotBidOffer.askPrice = askPrice;
                snapshotBidOffer.bidVolume = bidVolume;
                snapshotBidOffer.askVolume = askVolume;
                snapshot.snapshotBidOffer = snapshotBidOffer;
            };
            if (hasProjectedDataFlag){
                if (instrumentType.isDerivatives()){
                    snapshotProjectedDerivatves = new SnapshotProjectedDerivatives();
                    snapshotProjected = snapshotProjectedDerivatves;
                    snapshotProjectedDerivatves.openPrice0 = openPrice0;
                } else {
                    snapshotProjected = new SnapshotProjected();
                };
                snapshotProjected.openPrice1 = openPrice1;
                snapshotProjected.openPrice2 = openPrice2;
                snapshotProjected.projectedPrice = projectedPrice;
                snapshotProjected.percentProjectedChange = percentProjectedChange;
                snapshot.snapshotProjected = snapshotProjected;
            };
            return (snapshot);
        }
        private function parseInfo(feedMessage:IBinaryRawMessage, source:Source):Message{
            var rawData:StreamingByteArray;
            var instrumentId:String;
            var instrumentType:InstrumentType;
            var instrumentSubType:InstrumentSubType;
            var priceDigit:int;
            var settleDigit:int;
            var hasInitMarket:Boolean;
            var hasInitIntraday:Boolean;
            var hasInitStat:Boolean;
            var hasSummary:Boolean;
            var hasBidOffer:Boolean;
            var hasProjected:Boolean;
            var info:InfoFeedMessage;
            var previousClose:Number;
            var high:Number;
            var low:Number;
            var ceiling:Number;
            var floor:Number;
            var spread:Number;
            var previousSettle:Number;
            var instrumentLongName:String;
            var pe:Number;
            var pbv:Number;
            var yield:Number;
            var eps:Number;
            var w52High:Number;
            var w52Low:Number;
            var w52HighDate:String;
            var w52LowDate:String;
            var percentChg1W:Number;
            var percentChg1M:Number;
            var percentChg3M:Number;
            var currency:String;
            var exercisePrice:Number;
            var exerciseDate:String;
            var isCallOptions:Boolean;
            var optionsType:OptionsType;
            var exerciseRatio:String;
            var derivativesWarrantType:DerivativesWarrantType;
            var remainingDays:int;
            var lastTradingDate:String;
            var multiplier:Number;
            var aumSize:Number;
            var lifeHigh:Number;
            var lifeLow:Number;
            var lifeHighDate:String;
            var lifeLowDate:String;
            var underlying:String;
            var marketType:MarketType;
            var initialMargin:Number;
            var strikePrice:*;
            var marketCap:Number;
            var dividendYield:int;
            var lastDone:Number;
            var change:Number;
            var percentChange:Number;
            var totalVolume:Number;
            var average:Number;
            var status:String;
            var percentBuy:int;
            var percentSell:int;
            var totalValue:Number;
            var averageBuy:Number;
            var averageSell:Number;
            var underlyingPrice:Number;
            var theoricalPrice:Number;
            var impliedVolatility:Number;
            var delta:Number;
            var theta:Number;
            var iNav:Number;
            var openInterest:int;
            var settlePrice:Number;
            var bidAskFlagArray:Array;
            var bidFlag:PriceType;
            var askFlag:PriceType;
            var bidPrice1:Number;
            var bidPrice2:Number;
            var bidPrice3:Number;
            var bidPrice4:Number;
            var bidPrice5:Number;
            var askPrice1:Number;
            var askPrice2:Number;
            var askPrice3:Number;
            var askPrice4:Number;
            var askPrice5:Number;
            var bidVolume1:Number;
            var bidVolume2:Number;
            var bidVolume3:Number;
            var bidVolume4:Number;
            var bidVolume5:Number;
            var askVolume1:Number;
            var askVolume2:Number;
            var askVolume3:Number;
            var askVolume4:Number;
            var askVolume5:Number;
            var projectedPrice:Number;
            var openPrice1:Number;
            var openPrice2:Number;
            var currentState:int;
            var projectedVolume:Number;
            var projected2:Number;
            var projected0:Number;
            var openPrice0:Number;
            
            var infoEquityFeedMessage:InfoEquityFeedMessage;
            var infoInitialMarket:InfoInitialMarket;
            var infoInitialMarketInstrument:InfoInitialMarketInstrument;
            var infoInitialMarketDerivatives:InfoInitialMarketDerivatives;
            var infoInitialIntraday:InfoInitialIntraday;
            var infoInitialIntradayInstrument:InfoInitialIntradayInstrument;
            var infoInitialIntradayEquity:InfoInitialIntradayEquity;
            var infoInitialIntradayAllWarrant:InfoInitialIntradayAllWarrant;
            var infoInitialIntradayDerivativesWarrant:InfoInitialIntradayDerivativesWarrant;
            var infoInitialIntradayETF:InfoInitialIntradayETF;
            var infoInitialIntradayDerivatives:InfoInitialIntradayDerivatives;
            var infoInitialIntradayOptions:InfoInitialIntradayOptions;
            var infoInitialIntradayIndex:InfoInitialIntradayIndex;
            var infoInitialStat:InfoInitialStat;
            var infoInitialStatEquity:InfoInitialStatEquity;
            var infoSummary:InfoSummary;
            var infoSummaryInstrument:InfoSummaryInstrument;
            var infoSummaryEquity:InfoSummaryEquity;
            var infoSummaryAllWarrant:InfoSummaryAllWarrant;
            var infoSummaryETF:InfoSummaryETF;
            var infoSummaryDerivatives:InfoSummaryDerivatives;
            var infoSummaryOptions:InfoSummaryOptions;
            var infoSummaryIndex:InfoSummaryIndex;
            var infoBidOffer:InfoBidOffer;
            var infoBidOfferInstrument:InfoBidOfferInstrument;
            var infoProjected:InfoProjected;
            var infoProjectedInstrument:InfoProjectedInstrument;
            var infoProjectedEquity:InfoProjectedEquity;
            var infoProjectedDerivatives:InfoProjectedDerivatives;
            rawData = feedMessage.data;
            rawData.readConfigByte();
            instrumentId = rawData.readStringWithLength();
            instrumentType = InstrumentType.lookUpFromFeed(rawData.readByte());
            instrumentSubType = InstrumentSubType.NO_TYPE;
            if (instrumentType.isEquity()){
                instrumentSubType = InstrumentSubType.lookUpFromFeed(rawData.readByte());
            };
            priceDigit = DEFAULT_PRICE_DIGIT;
            settleDigit = DEFAULT_SETTLE_DIGIT;
            if (instrumentType.isDerivatives()){
                priceDigit = rawData.readByte();
                settleDigit = rawData.readByte();
            };
            var dataFlag:Array = rawData.readBooleanArray();
            hasInitMarket = dataFlag[5];
            hasInitIntraday = dataFlag[4];
            hasInitStat = dataFlag[3];
            hasSummary = dataFlag[2];
            hasBidOffer = dataFlag[1];
            hasProjected = dataFlag[0];
            if (hasInitMarket){
                previousClose = rawData.readNumberWithDigit(priceDigit);
                high = rawData.readNumberWithDigit(priceDigit);
                low = rawData.readNumberWithDigit(priceDigit);
                if (instrumentType.isInstrument()){
                    ceiling = rawData.readNumberWithDigit(priceDigit);
                    floor = rawData.readNumberWithDigit(priceDigit);
                    if (instrumentType.isDerivatives()){
                        spread = rawData.readNumberWithDigit(priceDigit);
                        previousSettle = rawData.readNumberWithDigit(priceDigit);
                    };
                };
            };
            if (hasInitIntraday){
                if (instrumentType.isInstrument()){
                    instrumentLongName = rawData.readStringWithLength();
                    if (instrumentType.isEquity()){
                        pe = rawData.readNumberWithDigit(PE_DIGIT);
                        pbv = rawData.readNumberWithDigit(PBV_DIGIT);
                        yield = rawData.readNumberWithDigit(YIELD_DIGIT);
                        eps = rawData.readNumberWithDigit(EPS_DIGIT);
                        w52High = rawData.readNumberWithDigit(W52_DIGIT);
                        w52Low = rawData.readNumberWithDigit(W52_DIGIT);
                        w52HighDate = rawData.readUTFBytes(W_52_HIGH_LOW_DATE_LENGTH);
                        w52LowDate = rawData.readUTFBytes(W_52_HIGH_LOW_DATE_LENGTH);
                        percentChg1W = rawData.readNumberWithDigit(PERCENT_CHANGE_WEEK_MONTH_DIGIT);
                        percentChg1M = rawData.readNumberWithDigit(PERCENT_CHANGE_WEEK_MONTH_DIGIT);
                        percentChg3M = rawData.readNumberWithDigit(PERCENT_CHANGE_WEEK_MONTH_DIGIT);
                        currency = rawData.readStringWithLength();
                        if (instrumentSubType.isAllWarrant()){
                            exercisePrice = rawData.readDouble();
                            exerciseDate = rawData.readUTFBytes(EXERCISE_DATE_LENGTH);
                            isCallOptions = rawData.readBoolean();
                            optionsType = ((isCallOptions) ? OptionsType.CALL : OptionsType.PUT);
                            exerciseRatio = rawData.readStringWithLength();
                            if (instrumentSubType.isDerivativesWarrant()){
                                derivativesWarrantType = DerivativesWarrantType.lookUpFromFeed(rawData.readUTFBytes(DERIVATIVES_WARRANT_TYPE_LENGTH));
                                remainingDays = rawData.readIntOrShort();
                                lastTradingDate = rawData.readUTFBytes(LAST_TRADING_DATE_LENGTH);
                                multiplier = rawData.readNumberFixedIntWithDigit(MULTIPLER_DIGIT);
                            };
                        } else {
                            if (instrumentSubType.isETF()){
                                aumSize = rawData.readNumberFixedIntWithDigit(AUM_SIZE_DIGIT);
                            };
                        };
                    } else {
                        if (instrumentType.isDerivatives()){
                            lifeHigh = rawData.readNumberWithDigit(W52_DIGIT);
                            lifeLow = rawData.readNumberWithDigit(W52_DIGIT);
                            lifeHighDate = rawData.readUTFBytes(W_52_HIGH_LOW_DATE_LENGTH);
                            lifeLowDate = rawData.readUTFBytes(W_52_HIGH_LOW_DATE_LENGTH);
                            remainingDays = rawData.readIntOrShort();
                            lastTradingDate = rawData.readUTFBytes(LAST_TRADING_DATE_LENGTH);
                            underlying = rawData.readStringWithLength();
                            marketType = MarketType.lookUpFromFeed(rawData.readStringWithLength());
                            initialMargin = rawData.readNumberFixedIntWithDigit(INITIAL_MARGIN_DIGIT);
                            if (instrumentType.isOptions()){
                                isCallOptions = rawData.readBoolean();
                                optionsType = ((isCallOptions) ? OptionsType.CALL : OptionsType.PUT);
                                strikePrice = rawData.readNumberFixedIntWithDigit(STRIKE_PRICE_DIGIT);
                            };
                        };
                    };
                } else {
                    if (instrumentType.isIndex()){
                        marketCap = rawData.readLongOrInt();
                        pe = rawData.readNumberWithDigit(PE_DIGIT);
                        pbv = rawData.readNumberWithDigit(PBV_DIGIT);
                        yield = rawData.readNumberWithDigit(YIELD_DIGIT);
                    };
                };
            };
            if (hasInitStat){
                if (instrumentType.isEquity()){
                    dividendYield = rawData.readIntOrShort();
                };
            };
            if (hasSummary){
                lastDone = rawData.readNumberWithDigit(priceDigit);
                change = rawData.readNumberWithDigit(priceDigit);
                percentChange = rawData.readNumberWithDigit(PERCENT_DIGIT);
                totalVolume = rawData.readLongOrInt();
                if (instrumentType.isInstrument()){
                    average = rawData.readNumberWithDigit(priceDigit);
                    status = rawData.readStringWithLength();
                    percentBuy = rawData.readByte();
                    percentSell = rawData.readByte();
                    if (instrumentType.isEquity()){
                        totalValue = rawData.readLongOrInt();
                        averageBuy = rawData.readNumberWithDigit(AVERAGE_DIGIT);
                        averageSell = rawData.readNumberWithDigit(AVERAGE_DIGIT);
                        if (instrumentSubType.isAllWarrant()){
                            underlyingPrice = rawData.readNumberWithDigit(WARRANT_UNDERLYING_PRICE_DIGIT);
                            theoricalPrice = rawData.readNumberWithDigit(THEORICAL_PRICE_DIGIT);
                            impliedVolatility = rawData.readNumberWithDigit(IMPLIED_VOLATILLITY_DIGIT);
                            delta = rawData.readNumberWithDigit(DELTA_DIGIT);
                            theta = rawData.readNumberFixedIntWithDigit(THETA_DIGIT);
                        } else {
                            if (instrumentSubType.isETF()){
                                iNav = rawData.readNumberFixedIntWithDigit(INAV_DIGIT);
                            };
                        };
                    } else {
                        if (instrumentType.isDerivatives()){
                            underlyingPrice = rawData.readNumberWithDigit(priceDigit);
                            openInterest = rawData.readIntOrShort();
                            settlePrice = rawData.readNumberWithDigit(settleDigit);
                            theoricalPrice = rawData.readNumberWithDigit(THEORICAL_PRICE_DIGIT);
                            if (instrumentType.isOptions()){
                                impliedVolatility = rawData.readNumberWithDigit(IMPLIED_VOLATILLITY_DIGIT);
                                delta = rawData.readNumberWithDigit(DELTA_DIGIT);
                                theta = rawData.readNumberFixedIntWithDigit(THETA_DIGIT);
                            };
                        };
                    };
                } else {
                    if (instrumentType.isIndex()){
                        totalValue = rawData.readLongOrInt();
                    };
                };
            };
            if (hasBidOffer){
                if (instrumentType.isInstrument()){
                    bidAskFlagArray = rawData.readVaryBitArray([4]);
                    bidFlag = PriceType.lookUpFromFeed(bidAskFlagArray[0]);
                    askFlag = PriceType.lookUpFromFeed(bidAskFlagArray[1]);
                    bidPrice1 = rawData.readNumberWithDigit(priceDigit);
                    bidPrice2 = rawData.readNumberWithDigit(priceDigit);
                    bidPrice3 = rawData.readNumberWithDigit(priceDigit);
                    bidPrice4 = rawData.readNumberWithDigit(priceDigit);
                    bidPrice5 = rawData.readNumberWithDigit(priceDigit);
                    askPrice1 = rawData.readNumberWithDigit(priceDigit);
                    askPrice2 = rawData.readNumberWithDigit(priceDigit);
                    askPrice3 = rawData.readNumberWithDigit(priceDigit);
                    askPrice4 = rawData.readNumberWithDigit(priceDigit);
                    askPrice5 = rawData.readNumberWithDigit(priceDigit);
                    bidVolume1 = rawData.readLongOrInt();
                    bidVolume2 = rawData.readLongOrInt();
                    bidVolume3 = rawData.readLongOrInt();
                    bidVolume4 = rawData.readLongOrInt();
                    bidVolume5 = rawData.readLongOrInt();
                    askVolume1 = rawData.readLongOrInt();
                    askVolume2 = rawData.readLongOrInt();
                    askVolume3 = rawData.readLongOrInt();
                    askVolume4 = rawData.readLongOrInt();
                    askVolume5 = rawData.readLongOrInt();
                };
            };
            if (hasProjected){
                if (instrumentType.isInstrument()){
                    projectedPrice = rawData.readNumberWithDigit(priceDigit);
                    openPrice1 = rawData.readNumberWithDigit(priceDigit);
                    openPrice2 = rawData.readNumberWithDigit(priceDigit);
                    currentState = rawData.readByte();
                    if (instrumentType.isEquity()){
                        projectedVolume = rawData.readLongOrInt();
                    } else {
                        if (instrumentType.isDerivatives()){
                            projected2 = rawData.readNumberWithDigit(priceDigit);
                            projected0 = rawData.readNumberWithDigit(priceDigit);
                            openPrice0 = rawData.readNumberWithDigit(priceDigit);
                        };
                    };
                };
            };
            info = null;
            if (instrumentType.isEquity()){
                infoEquityFeedMessage = new InfoEquityFeedMessage(source);
                info = infoEquityFeedMessage;
                infoEquityFeedMessage.instrumentSubType = instrumentSubType;
            } else {
                info = new InfoFeedMessage(source);
            };
            info.instrumentId = instrumentId;
            info.instrumentType = instrumentType;
            info.priceDigit = priceDigit;
            info.settleDigit = settleDigit;
            info.hasInitMarket = hasInitMarket;
            info.hasInitIntraday = hasInitIntraday;
            info.hasInitStat = hasInitStat;
            info.hasSummary = hasSummary;
            info.hasBidOffer = hasBidOffer;
            info.hasProjected = hasProjected;
            if (hasInitMarket){
                infoInitialMarket = null;
                if (instrumentType.isInstrument()){
                    infoInitialMarketInstrument = null;
                    if (instrumentType.isDerivatives()){
                        infoInitialMarketDerivatives = new InfoInitialMarketDerivatives();
                        infoInitialMarketInstrument = infoInitialMarketDerivatives;
                        infoInitialMarketDerivatives.spread = spread;
                        infoInitialMarketDerivatives.previousSettle = previousSettle;
                    } else {
                        infoInitialMarketInstrument = new InfoInitialMarketInstrument();
                    };
                    infoInitialMarketInstrument.ceiling = ceiling;
                    infoInitialMarketInstrument.floor = floor;
                    infoInitialMarket = infoInitialMarketInstrument;
                } else {
                    infoInitialMarket = new InfoInitialMarket();
                };
                infoInitialMarket.previousClose = previousClose;
                infoInitialMarket.high = high;
                infoInitialMarket.low = low;
                info.initialMarket = infoInitialMarket;
            };
            if (hasInitIntraday){
                infoInitialIntraday = null;
                if (instrumentType.isInstrument()){
                    infoInitialIntradayInstrument = null;
                    if (instrumentType.isEquity()){
                        infoInitialIntradayEquity = null;
                        if (instrumentSubType.isAllWarrant()){
                            infoInitialIntradayAllWarrant = null;
                            if (instrumentSubType.isDerivativesWarrant()){
                                infoInitialIntradayDerivativesWarrant = new InfoInitialIntradayDerivativesWarrant();
                                infoInitialIntradayAllWarrant = infoInitialIntradayDerivativesWarrant;
                                infoInitialIntradayDerivativesWarrant.derivatviesWarrantType = derivativesWarrantType;
                                infoInitialIntradayDerivativesWarrant.remainingDays = remainingDays;
                                infoInitialIntradayDerivativesWarrant.lastTradingDate = lastTradingDate;
                                infoInitialIntradayDerivativesWarrant.multiplier = multiplier;
                            } else {
                                infoInitialIntradayAllWarrant = new InfoInitialIntradayAllWarrant();
                            };
                            infoInitialIntradayEquity = infoInitialIntradayAllWarrant;
                            infoInitialIntradayAllWarrant.optionsType = optionsType;
                            infoInitialIntradayAllWarrant.exercisePrice = exercisePrice;
                            infoInitialIntradayAllWarrant.exerciseRatio = exerciseRatio;
                            infoInitialIntradayAllWarrant.exerciseDate = exerciseDate;
                        } else {
                            if (instrumentSubType.isETF()){
                                infoInitialIntradayETF = new InfoInitialIntradayETF();
                                infoInitialIntradayEquity = infoInitialIntradayETF;
                                infoInitialIntradayETF.aumSize = aumSize;
                            } else {
                                infoInitialIntradayEquity = new InfoInitialIntradayEquity();
                            };
                        };
                        infoInitialIntradayInstrument = infoInitialIntradayEquity;
                        infoInitialIntradayEquity.pe = pe;
                        infoInitialIntradayEquity.pbv = pbv;
                        infoInitialIntradayEquity.yield = yield;
                        infoInitialIntradayEquity.eps = eps;
                        infoInitialIntradayEquity.w52High = w52High;
                        infoInitialIntradayEquity.w52Low = w52Low;
                        infoInitialIntradayEquity.w52HighDate = w52HighDate;
                        infoInitialIntradayEquity.w52LowDate = w52LowDate;
                        infoInitialIntradayEquity.percentChg1W = percentChg1W;
                        infoInitialIntradayEquity.percentCgh1M = percentChg1M;
                        infoInitialIntradayEquity.percentChg3M = percentChg3M;
                        infoInitialIntradayEquity.currency = currency;
                    } else {
                        if (instrumentType.isDerivatives()){
                            infoInitialIntradayDerivatives = null;
                            if (instrumentType.isOptions()){
                                infoInitialIntradayOptions = new InfoInitialIntradayOptions();
                                infoInitialIntradayOptions.optionsType = optionsType;
                                infoInitialIntradayOptions.strikePrice = strikePrice;
                                infoInitialIntradayDerivatives = infoInitialIntradayOptions;
                                infoInitialIntradayDerivatives.initialMargin = initialMargin;
                            } else {
                                infoInitialIntradayDerivatives = new InfoInitialIntradayDerivatives();
                            };
                            infoInitialIntradayInstrument = infoInitialIntradayDerivatives;
                            infoInitialIntradayDerivatives.lifeHigh = lifeHigh;
                            infoInitialIntradayDerivatives.lifeLow = lifeLow;
                            infoInitialIntradayDerivatives.lifeHighDate = lifeHighDate;
                            infoInitialIntradayDerivatives.lifeLowDate = lifeLowDate;
                            infoInitialIntradayDerivatives.remainingDays = remainingDays;
                            infoInitialIntradayDerivatives.lastTradingDate = lastTradingDate;
                            infoInitialIntradayDerivatives.underlying = underlying;
                            infoInitialIntradayDerivatives.marketType = marketType;
                        };
                    };
                    infoInitialIntradayInstrument.instrumentLongName = instrumentLongName;
                    infoInitialIntraday = infoInitialIntradayInstrument;
                } else {
                    if (instrumentType.isIndex()){
                        infoInitialIntradayIndex = new InfoInitialIntradayIndex();
                        infoInitialIntradayIndex.marketCap = marketCap;
                        infoInitialIntradayIndex.pe = pe;
                        infoInitialIntradayIndex.pbv = pbv;
                        infoInitialIntradayIndex.yield = yield;
                        infoInitialIntraday = infoInitialIntradayIndex;
                    } else {
                        infoInitialIntraday = new InfoInitialIntraday();
                    };
                };
                info.initialIntraday = infoInitialIntraday;
            };
            if (hasInitStat){
                infoInitialStat = null;
                if (instrumentType.isEquity()){
                    infoInitialStatEquity = new InfoInitialStatEquity();
                    infoInitialStat = infoInitialStatEquity;
                    infoInitialStatEquity.dividendYield = dividendYield;
                } else {
                    infoInitialStat = new InfoInitialStat();
                };
                info.initialStat = infoInitialStat;
            };
            if (hasSummary){
                infoSummary = new InfoSummary();
                if (instrumentType.isInstrument()){
                    infoSummaryInstrument = null;
                    if (instrumentType.isEquity()){
                        infoSummaryEquity = null;
                        if (instrumentSubType.isAllWarrant()){
                            infoSummaryAllWarrant = new InfoSummaryAllWarrant();
                            infoSummaryEquity = infoSummaryAllWarrant;
                            infoSummaryAllWarrant.underlyingPrice = underlyingPrice;
                            infoSummaryAllWarrant.theoricalPrice = theoricalPrice;
                            infoSummaryAllWarrant.impliedVolatility = impliedVolatility;
                            infoSummaryAllWarrant.delta = delta;
                            infoSummaryAllWarrant.theta = theta;
                        } else {
                            if (instrumentSubType.isETF()){
                                infoSummaryETF = new InfoSummaryETF();
                                infoSummaryEquity = infoSummaryETF;
                                infoSummaryETF.iNav = iNav;
                            } else {
                                infoSummaryEquity = new InfoSummaryEquity();
                            };
                        };
                        infoSummaryInstrument = infoSummaryEquity;
                        infoSummaryEquity.averageBuy = averageBuy;
                        infoSummaryEquity.averageSell = averageSell;
                        infoSummaryEquity.totalValue = totalValue;
                    } else {
                        if (instrumentType.isDerivatives()){
                            infoSummaryDerivatives = null;
                            if (instrumentType.isOptions()){
                                infoSummaryOptions = new InfoSummaryOptions();
                                infoSummaryOptions.impliedVolatility = impliedVolatility;
                                infoSummaryOptions.delta = delta;
                                infoSummaryOptions.theta = theta;
                                infoSummaryDerivatives = infoSummaryOptions;
                            } else {
                                infoSummaryDerivatives = new InfoSummaryDerivatives();
                            };
                            infoSummaryInstrument = infoSummaryDerivatives;
                            infoSummaryDerivatives.openInterest = openInterest;
                            infoSummaryDerivatives.settlePrice = settlePrice;
                            infoSummaryDerivatives.underlyingPrice = underlyingPrice;
                            infoSummaryDerivatives.theoricalPrice = theoricalPrice;
                        };
                    };
                    infoSummaryInstrument.average = average;
                    infoSummaryInstrument.status = status;
                    infoSummaryInstrument.percentBuy = percentBuy;
                    infoSummaryInstrument.percentSell = percentSell;
                    infoSummary = infoSummaryInstrument;
                } else {
                    if (instrumentType.isIndex()){
                        infoSummaryIndex = new InfoSummaryIndex();
                        infoSummaryIndex.totalValue = totalValue;
                        infoSummary = infoSummaryIndex;
                    } else {
                        infoSummary = new InfoSummary();
                    };
                };
                infoSummary.lastDone = lastDone;
                infoSummary.change = change;
                infoSummary.percentChange = percentChange;
                infoSummary.totalVolume = totalVolume;
                info.summary = infoSummary;
            };
            if (hasBidOffer){
                infoBidOffer = null;
                if (instrumentType.isInstrument()){
                    infoBidOfferInstrument = new InfoBidOfferInstrument();
                    infoBidOfferInstrument.bidFlag = bidFlag;
                    infoBidOfferInstrument.askFlag = askFlag;
                    infoBidOfferInstrument.bidPrice1 = bidPrice1;
                    infoBidOfferInstrument.bidPrice2 = bidPrice2;
                    infoBidOfferInstrument.bidPrice3 = bidPrice3;
                    infoBidOfferInstrument.bidPrice4 = bidPrice4;
                    infoBidOfferInstrument.bidPrice5 = bidPrice5;
                    infoBidOfferInstrument.askPrice1 = askPrice1;
                    infoBidOfferInstrument.askPrice2 = askPrice2;
                    infoBidOfferInstrument.askPrice3 = askPrice3;
                    infoBidOfferInstrument.askPrice4 = askPrice4;
                    infoBidOfferInstrument.askPrice5 = askPrice5;
                    infoBidOfferInstrument.bidVolume1 = bidVolume1;
                    infoBidOfferInstrument.bidVolume2 = bidVolume2;
                    infoBidOfferInstrument.bidVolume3 = bidVolume3;
                    infoBidOfferInstrument.bidVolume4 = bidVolume4;
                    infoBidOfferInstrument.bidVolume5 = bidVolume5;
                    infoBidOfferInstrument.askVolume1 = askVolume1;
                    infoBidOfferInstrument.askVolume2 = askVolume2;
                    infoBidOfferInstrument.askVolume3 = askVolume3;
                    infoBidOfferInstrument.askVolume4 = askVolume4;
                    infoBidOfferInstrument.askVolume5 = askVolume5;
                    infoBidOffer = infoBidOfferInstrument;
                } else {
                    infoBidOffer = new InfoBidOffer();
                };
                info.bidOffer = infoBidOffer;
            };
            if (hasProjected){
                infoProjected = null;
                if (instrumentType.isInstrument()){
                    infoProjectedInstrument = new InfoProjectedInstrument();
                    if (instrumentType.isEquity()){
                        infoProjectedEquity = new InfoProjectedEquity();
                        infoProjectedInstrument = infoProjectedEquity;
                        infoProjectedEquity.projectedVolume = projectedVolume;
                    } else {
                        if (instrumentType.isDerivatives()){
                            infoProjectedDerivatives = new InfoProjectedDerivatives();
                            infoProjectedInstrument = infoProjectedDerivatives;
                            infoProjectedDerivatives.projected2 = projected2;
                            infoProjectedDerivatives.projected0 = projected0;
                            infoProjectedDerivatives.openPrice0 = openPrice0;
                        };
                    };
                    infoProjectedInstrument.projectedPrice = projectedPrice;
                    infoProjectedInstrument.openPrice1 = openPrice1;
                    infoProjectedInstrument.openPrice2 = openPrice2;
                    infoProjectedInstrument.currentState = InstrumentInfoCurrentState.lookupById(currentState);
                    infoProjected = infoProjectedInstrument;
                } else {
                    infoProjected = new InfoProjected();
                };
                info.projected = infoProjected;
            };
            return (info);
        }
        private function parseInfoStatistic(feedMessage:IBinaryRawMessage, source:Source):Message{
            var rawData:StreamingByteArray;
            var instrumentId:String;
            var instrumentType:InstrumentType;
            var instrumentSubType:InstrumentSubType;
            var priceDigit:int;
            var statPriceDigit:int;
            var informationAsOf:String;
            var pe:Number;
            var pbv:Number;
            var yield:Number;
            var grossProfitMargin:Number;
            var netProfitMargin:Number;
            var roa:Number;
            var roe:Number;
            var deRatio:Number;
            var marketCap:Number;
            var shares:Number;
            var cash:Number;
            var totalAsset:Number;
            var currentLiabilities:Number;
            var totalLiabilities:Number;
            var paidupCap:Number;
            var equities:Number;
            var sale:Number;
            var revenue:Number;
            var costOfSales:Number;
            var ebit:Number;
            var intExpenses:Number;
            var netProfit:Number;
            var epsCount:int;
            var epsArray:Array;
            var i:uint;
            var info:InfoStatisticFeedMessage;
            var dateString:String;
            var eps:Number;
            var epsData:InfoStatisticEPS;
            rawData = feedMessage.data;
            rawData.readConfigByte();
            instrumentId = rawData.readStringWithLength();
            instrumentType = InstrumentType.lookUpFromFeed(rawData.readByte());
            instrumentSubType = InstrumentSubType.NO_TYPE;
            if (instrumentType.isEquity()){
                instrumentSubType = InstrumentSubType.lookUpFromFeed(rawData.readByte());
            };
            priceDigit = DEFAULT_PRICE_DIGIT;
            statPriceDigit = 3;
            informationAsOf = rawData.readStringWithLength();
            pe = rawData.readNumberWithDigit(priceDigit);
            pbv = rawData.readNumberWithDigit(priceDigit);
            yield = rawData.readNumberFixedShortWithDigit(priceDigit);
            grossProfitMargin = rawData.readNumberFixedShortWithDigit(priceDigit);
            netProfitMargin = rawData.readNumberFixedShortWithDigit(priceDigit);
            roa = rawData.readNumberFixedShortWithDigit(priceDigit);
            roe = rawData.readNumberFixedShortWithDigit(priceDigit);
            deRatio = rawData.readNumberWithDigit(priceDigit);
            marketCap = rawData.readLongOrInt();
            shares = rawData.readLongOrInt();
            cash = rawData.readNumberFixedLongOrIntWithDigit(statPriceDigit);
            totalAsset = rawData.readNumberFixedLongOrIntWithDigit(statPriceDigit);
            currentLiabilities = rawData.readNumberFixedLongOrIntWithDigit(statPriceDigit);
            totalLiabilities = rawData.readNumberFixedLongOrIntWithDigit(statPriceDigit);
            paidupCap = rawData.readNumberFixedLongOrIntWithDigit(statPriceDigit);
            equities = rawData.readNumberFixedLongOrIntWithDigit(statPriceDigit);
            sale = rawData.readNumberFixedLongOrIntWithDigit(statPriceDigit);
            revenue = rawData.readNumberFixedLongOrIntWithDigit(statPriceDigit);
            costOfSales = rawData.readNumberFixedLongOrIntWithDigit(statPriceDigit);
            ebit = rawData.readNumberFixedLongOrIntWithDigit(statPriceDigit);
            intExpenses = rawData.readNumberFixedLongOrIntWithDigit(statPriceDigit);
            netProfit = rawData.readNumberFixedLongOrIntWithDigit(statPriceDigit);
            epsCount = rawData.readByte();
            epsArray = new Array();
            i = 0;
            while (i < epsCount) {
                dateString = rawData.readStringWithLength();
                eps = rawData.readNumberWithDigit(priceDigit);
                epsData = new InfoStatisticEPS(dateString, eps);
                epsArray.push(epsData);
                i++;
            };
            info = new InfoStatisticFeedMessage(source);
            info.instrumentId = instrumentId;
            info.instrumentType = instrumentType;
            info.instrumentSubType = instrumentSubType;
            info.informationAsOf = informationAsOf;
            info.pe = pe;
            info.pbv = pbv;
            info.yield = yield;
            info.grossProfitMargin = grossProfitMargin;
            info.netProfitMargin = netProfitMargin;
            info.roa = roa;
            info.roe = roe;
            info.deRatio = deRatio;
            info.marketCap = marketCap;
            info.shares = shares;
            info.cash = cash;
            info.totalAsset = totalAsset;
            info.currentLiabilities = currentLiabilities;
            info.totalLiabilities = totalLiabilities;
            info.paidupCap = paidupCap;
            info.equities = equities;
            info.sale = sale;
            info.revenue = revenue;
            info.costOfSales = costOfSales;
            info.ebit = ebit;
            info.intExpenses = intExpenses;
            info.netProfit = netProfit;
            info.epsArray = epsArray;
            return (info);
        }
        private function parseInfoStatisticChart(feedMessage:IBinaryRawMessage, source:Source):Message{
            var rawData:StreamingByteArray;
            var instrumentId:String;
            var chartType:InstrumentInfoStatisticChartType;
            var chartDataCount:int;
            var chartDataArray:Array;
            var statPriceDigit:int;
            var i:uint;
            var chartInfo:InfoStatisticChartFeedMessage;
            var dateString:String;
            var revenue:Number;
            var netIncome:Number;
            var profitMargin:Number;
            var chartData:InfoStatisticChartData;
            rawData = feedMessage.data;
            rawData.readConfigByte();
            instrumentId = rawData.readStringWithLength();
            chartType = InstrumentInfoStatisticChartType.lookUpFromFeed(rawData.readByte());
            chartDataCount = rawData.readShort();
            chartDataArray = new Array();
            statPriceDigit = 3;
            i = 0;
            while (i < chartDataCount) {
                dateString = rawData.readStringWithLength();
                revenue = rawData.readNumberFixedLongOrIntWithDigit(statPriceDigit);
                netIncome = rawData.readNumberFixedLongOrIntWithDigit(statPriceDigit);
                profitMargin = rawData.readNumberFixedShortWithDigit(DEFAULT_PRICE_DIGIT);
                chartData = new InfoStatisticChartData(dateString, revenue, netIncome, profitMargin);
                chartDataArray.push(chartData);
                i++;
            };
            chartInfo = new InfoStatisticChartFeedMessage(source);
            chartInfo.instrumentId = instrumentId;
            chartInfo.chartType = chartType;
            chartInfo.chartDataArray = chartDataArray;
            return (chartInfo);
        }
        private function parseInfoOddLot(feedMessage:IBinaryRawMessage, source:Source):Message{
            var rawData:StreamingByteArray;
            var instrumentId:String;
            var instrumentType:InstrumentType;
            var instrumentSubType:InstrumentSubType;
            var priceDigit:int;
            var previousClose:Number;
            var high:Number;
            var low:Number;
            var ceiling:Number;
            var floor:Number;
            var last:Number;
            var change:Number;
            var percentChange:Number;
            var totalVolume:Number;
            var totalValue:Number;
            var average:Number;
            var status:String;
            var percentBuy:int;
            var percentSell:int;
            var averageBuy:Number;
            var averageSell:Number;
            var bidAskFlagArray:Array;
            var bidFlag:PriceType;
            var askFlag:PriceType;
            var bidPrice1:Number;
            var bidPrice2:Number;
            var bidPrice3:Number;
            var bidPrice4:Number;
            var bidPrice5:Number;
            var askPrice1:Number;
            var askPrice2:Number;
            var askPrice3:Number;
            var askPrice4:Number;
            var askPrice5:Number;
            var bidVolume1:Number;
            var bidVolume2:Number;
            var bidVolume3:Number;
            var bidVolume4:Number;
            var bidVolume5:Number;
            var askVolume1:Number;
            var askVolume2:Number;
            var askVolume3:Number;
            var askVolume4:Number;
            var askVolume5:Number;
            var currentState:int;
            var projectedPrice:Number;
            var openPrice1:Number;
            var openPrice2:Number;
            var projectedVolume:int;
            var info:InfoOddLotFeedMessage;
            rawData = feedMessage.data;
            rawData.readConfigByte();
            instrumentId = rawData.readStringWithLength();
            instrumentType = InstrumentType.lookUpFromFeed(rawData.readByte());
            instrumentSubType = InstrumentSubType.NO_TYPE;
            if (instrumentType.isEquity()){
                instrumentSubType = InstrumentSubType.lookUpFromFeed(rawData.readByte());
            };
            priceDigit = DEFAULT_PRICE_DIGIT;
            previousClose = rawData.readNumberWithDigit(priceDigit);
            high = rawData.readNumberWithDigit(priceDigit);
            low = rawData.readNumberWithDigit(priceDigit);
            ceiling = rawData.readNumberWithDigit(priceDigit);
            floor = rawData.readNumberWithDigit(priceDigit);
            last = rawData.readNumberWithDigit(priceDigit);
            change = rawData.readNumberWithDigit(priceDigit);
            percentChange = rawData.readNumberWithDigit(priceDigit);
            totalVolume = rawData.readLongOrInt();
            totalValue = rawData.readLongOrInt();
            average = rawData.readNumberWithDigit(priceDigit);
            status = rawData.readStringWithLength();
            percentBuy = rawData.readByte();
            percentSell = rawData.readByte();
            averageBuy = rawData.readNumberWithDigit(priceDigit);
            averageSell = rawData.readNumberWithDigit(priceDigit);
            bidAskFlagArray = rawData.readVaryBitArray([4]);
            bidFlag = PriceType.lookUpFromFeed(bidAskFlagArray[0]);
            askFlag = PriceType.lookUpFromFeed(bidAskFlagArray[1]);
            bidPrice1 = rawData.readNumberWithDigit(priceDigit);
            bidPrice2 = rawData.readNumberWithDigit(priceDigit);
            bidPrice3 = rawData.readNumberWithDigit(priceDigit);
            bidPrice4 = rawData.readNumberWithDigit(priceDigit);
            bidPrice5 = rawData.readNumberWithDigit(priceDigit);
            askPrice1 = rawData.readNumberWithDigit(priceDigit);
            askPrice2 = rawData.readNumberWithDigit(priceDigit);
            askPrice3 = rawData.readNumberWithDigit(priceDigit);
            askPrice4 = rawData.readNumberWithDigit(priceDigit);
            askPrice5 = rawData.readNumberWithDigit(priceDigit);
            bidVolume1 = rawData.readLongOrInt();
            bidVolume2 = rawData.readLongOrInt();
            bidVolume3 = rawData.readLongOrInt();
            bidVolume4 = rawData.readLongOrInt();
            bidVolume5 = rawData.readLongOrInt();
            askVolume1 = rawData.readLongOrInt();
            askVolume2 = rawData.readLongOrInt();
            askVolume3 = rawData.readLongOrInt();
            askVolume4 = rawData.readLongOrInt();
            askVolume5 = rawData.readLongOrInt();
            currentState = rawData.readByte();
            projectedPrice = rawData.readNumberWithDigit(priceDigit);
            openPrice1 = rawData.readNumberWithDigit(priceDigit);
            openPrice2 = rawData.readNumberWithDigit(priceDigit);
            projectedVolume = rawData.readInt();
            info = new InfoOddLotFeedMessage(source);
            info.instrumentId = instrumentId;
            info.instrumentType = instrumentType;
            info.instrumentSubType = instrumentSubType;
            info.priceDigit = priceDigit;
            info.previousClose = previousClose;
            info.high = high;
            info.low = low;
            info.ceiling = ceiling;
            info.floor = floor;
            info.last = last;
            info.change = change;
            info.percentChange = percentChange;
            info.totalVolume = totalVolume;
            info.totalValue = totalValue;
            info.average = average;
            info.status = status;
            info.percentBuy = percentBuy;
            info.percentSell = percentSell;
            info.averageBuy = averageBuy;
            info.averageSell = averageSell;
            info.bidFlag = bidFlag;
            info.askFlag = askFlag;
            info.bidPrice1 = bidPrice1;
            info.bidPrice2 = bidPrice2;
            info.bidPrice3 = bidPrice3;
            info.bidPrice4 = bidPrice4;
            info.bidPrice5 = bidPrice5;
            info.askPrice1 = askPrice1;
            info.askPrice2 = askPrice2;
            info.askPrice3 = askPrice3;
            info.askPrice4 = askPrice4;
            info.askPrice5 = askPrice5;
            info.bidVolume1 = bidVolume1;
            info.bidVolume2 = bidVolume2;
            info.bidVolume3 = bidVolume3;
            info.bidVolume4 = bidVolume4;
            info.bidVolume5 = bidVolume5;
            info.askVolume1 = askVolume1;
            info.askVolume2 = askVolume2;
            info.askVolume3 = askVolume3;
            info.askVolume4 = askVolume4;
            info.askVolume5 = askVolume5;
            info.currentState = InstrumentInfoCurrentState.lookupById(currentState);
            info.projectedPrice = projectedPrice;
            info.openPrice1 = openPrice1;
            info.openPrice2 = openPrice2;
            info.projectedVolume = projectedVolume;
            return (info);
        }
        protected function parseStub(feedMessage:IBinaryRawMessage, source:Source):Message{
            var rawData:StreamingByteArray;
            var data:String;
            var message:StubFeedMessage;
            var byte:int;
            rawData = feedMessage.data;
            rawData.position = 0;
            data = "";
            while (rawData.bytesAvailable > 1) {
                byte = rawData.readUnsignedByte();
                data = (data + (byte.toString(10) + ","));
            };
            message = new StubFeedMessage(System.REALTIME, source, data);
            return (message);
        }
        protected function parseInstrumentTicker(feedMessage:IBinaryRawMessage, source:Source):Message{
            var byteArray:StreamingByteArray;
            var intinstrumentType:int;
            var instrumentType:InstrumentType;
            var subArray:*;
            var tickerSubType:TickerSubType;
            var orderSide:OrderSide;
            var trend:Trend;
            var priceDigit:int;
            var instrumentId:String;
            var hour:int;
            var minute:int;
            var second:int;
            var time:Date;
            var price:Number;
            var change:Number;
            var percentChange:Number;
            var sequenceId:int;
            var instrumentTickerFeedMessage:InstrumentTickerFeedMessage;
            var volume:int;
            var volumeCount:int;
            var startSequenceId:int;
            var multipleFeedMessage:MultipleFeedMessage;
            var i:int;
            byteArray = feedMessage.data;
            byteArray.readConfigByte();
            intinstrumentType = byteArray.readByte();
            instrumentType = InstrumentType.lookUpFromFeed(intinstrumentType);
            subArray = byteArray.readVaryBitArray([4, 1, 2, 1]);
            tickerSubType = TickerSubType.lookUpFromFeed(instrumentType, subArray[0]);
            orderSide = OrderSide.lookUpFromFeed(subArray[1]);
            trend = Trend.lookUpFromFeed(subArray[2]);
            var isSum = (subArray[3] == 1);
            priceDigit = DEFAULT_PRICE_DIGIT;
            if (instrumentType.isDerivatives()){
                priceDigit = byteArray.readByte();
            };
            instrumentId = byteArray.readStringWithLength();
            hour = byteArray.readByte();
            minute = byteArray.readByte();
            second = byteArray.readByte();
            time = new Date(null, null, null, hour, minute, second);
            price = byteArray.readNumberWithDigit(priceDigit);
            change = byteArray.readNumberWithDigit(priceDigit);
            percentChange = byteArray.readNumberWithDigit(PERCENT_DIGIT);
            sequenceId = byteArray.readInt();
            instrumentTickerFeedMessage = null;
            volume = int.MIN_VALUE;
            volumeCount = byteArray.readShortOrByte();
            if (volumeCount > 1){
                startSequenceId = ((sequenceId - volumeCount) + 1);
                multipleFeedMessage = new MultipleFeedMessage();
                i = 0;
                while (i < volumeCount) {
                    instrumentTickerFeedMessage = new InstrumentTickerFeedMessage(source);
                    volume = byteArray.readIntOrShortVolume();
                    instrumentTickerFeedMessage.instrumentType = instrumentType;
                    instrumentTickerFeedMessage.tickerSubType = tickerSubType;
                    instrumentTickerFeedMessage.instrumentId = instrumentId;
                    instrumentTickerFeedMessage.time = time;
                    instrumentTickerFeedMessage.trend = trend;
                    instrumentTickerFeedMessage.orderSide = orderSide;
                    instrumentTickerFeedMessage.price = price;
                    instrumentTickerFeedMessage.priceDigit = priceDigit;
                    instrumentTickerFeedMessage.change = change;
                    instrumentTickerFeedMessage.percentChange = percentChange;
                    var _temp1 = startSequenceId;
                    startSequenceId = (startSequenceId + 1);
                    instrumentTickerFeedMessage.sequenceId = _temp1;
                    instrumentTickerFeedMessage.volume = volume;
                    multipleFeedMessage.add(instrumentTickerFeedMessage);
                    i++;
                };
                return (multipleFeedMessage);
            };
            instrumentTickerFeedMessage = new InstrumentTickerFeedMessage(source);
            volume = byteArray.readIntOrShortVolume();
            instrumentTickerFeedMessage.instrumentType = instrumentType;
            instrumentTickerFeedMessage.tickerSubType = tickerSubType;
            instrumentTickerFeedMessage.instrumentId = instrumentId;
            instrumentTickerFeedMessage.time = time;
            instrumentTickerFeedMessage.trend = trend;
            instrumentTickerFeedMessage.orderSide = orderSide;
            instrumentTickerFeedMessage.price = price;
            instrumentTickerFeedMessage.priceDigit = priceDigit;
            instrumentTickerFeedMessage.change = change;
            instrumentTickerFeedMessage.percentChange = percentChange;
            instrumentTickerFeedMessage.sequenceId = sequenceId;
            instrumentTickerFeedMessage.volume = volume;
            return (instrumentTickerFeedMessage);
        }
        protected function parseInstrumentTickerOddLot(feedMessage:IBinaryRawMessage, source:Source):Message{
            var byteArray:StreamingByteArray;
            var intinstrumentType:int;
            var instrumentType:InstrumentType;
            var subArray:*;
            var tickerSubType:TickerSubType;
            var orderSide:OrderSide;
            var trend:Trend;
            var priceDigit:int;
            var instrumentId:String;
            var hour:int;
            var minute:int;
            var second:int;
            var time:Date;
            var price:Number;
            var change:Number;
            var percentChange:Number;
            var sequenceId:int;
            var instrumentTickerFeedMessage:InstrumentTickerOddLotFeedMessage;
            var volume:int;
            var volumeCount:int;
            var startSequenceId:int;
            var multipleFeedMessage:MultipleFeedMessage;
            var i:int;
            byteArray = feedMessage.data;
            byteArray.readConfigByte();
            intinstrumentType = byteArray.readByte();
            instrumentType = InstrumentType.lookUpFromFeed(intinstrumentType);
            subArray = byteArray.readVaryBitArray([4, 1, 2, 1]);
            tickerSubType = TickerSubType.lookUpFromFeed(instrumentType, subArray[0]);
            orderSide = OrderSide.lookUpFromFeed(subArray[1]);
            trend = Trend.lookUpFromFeed(subArray[2]);
            var isSum = (subArray[3] == 1);
            priceDigit = DEFAULT_PRICE_DIGIT;
            instrumentId = byteArray.readStringWithLength();
            hour = byteArray.readByte();
            minute = byteArray.readByte();
            second = byteArray.readByte();
            time = new Date(null, null, null, hour, minute, second);
            price = byteArray.readNumberWithDigit(priceDigit);
            change = byteArray.readNumberWithDigit(priceDigit);
            percentChange = byteArray.readNumberWithDigit(PERCENT_DIGIT);
            sequenceId = byteArray.readInt();
            instrumentTickerFeedMessage = null;
            volume = int.MIN_VALUE;
            volumeCount = byteArray.readShortOrByte();
            if (volumeCount > 1){
                startSequenceId = ((sequenceId - volumeCount) + 1);
                multipleFeedMessage = new MultipleFeedMessage();
                i = 0;
                while (i < volumeCount) {
                    instrumentTickerFeedMessage = new InstrumentTickerOddLotFeedMessage(source);
                    volume = byteArray.readIntOrShortVolume();
                    instrumentTickerFeedMessage.instrumentType = instrumentType;
                    instrumentTickerFeedMessage.tickerSubType = tickerSubType;
                    instrumentTickerFeedMessage.instrumentId = instrumentId;
                    instrumentTickerFeedMessage.time = time;
                    instrumentTickerFeedMessage.trend = trend;
                    instrumentTickerFeedMessage.orderSide = orderSide;
                    instrumentTickerFeedMessage.price = price;
                    instrumentTickerFeedMessage.priceDigit = priceDigit;
                    instrumentTickerFeedMessage.change = change;
                    instrumentTickerFeedMessage.percentChange = percentChange;
                    var _temp1 = startSequenceId;
                    startSequenceId = (startSequenceId + 1);
                    instrumentTickerFeedMessage.sequenceId = _temp1;
                    instrumentTickerFeedMessage.volume = volume;
                    multipleFeedMessage.add(instrumentTickerFeedMessage);
                    i++;
                };
                return (multipleFeedMessage);
            };
            instrumentTickerFeedMessage = new InstrumentTickerOddLotFeedMessage(source);
            volume = byteArray.readIntOrShortVolume();
            instrumentTickerFeedMessage.instrumentType = instrumentType;
            instrumentTickerFeedMessage.tickerSubType = tickerSubType;
            instrumentTickerFeedMessage.instrumentId = instrumentId;
            instrumentTickerFeedMessage.time = time;
            instrumentTickerFeedMessage.trend = trend;
            instrumentTickerFeedMessage.orderSide = orderSide;
            instrumentTickerFeedMessage.price = price;
            instrumentTickerFeedMessage.priceDigit = priceDigit;
            instrumentTickerFeedMessage.change = change;
            instrumentTickerFeedMessage.percentChange = percentChange;
            instrumentTickerFeedMessage.sequenceId = sequenceId;
            instrumentTickerFeedMessage.volume = volume;
            return (instrumentTickerFeedMessage);
        }
        protected function parseMarketTicker(feedMessage:IBinaryRawMessage, source:Source):Message{
            var byteArray:StreamingByteArray;
            var intinstrumentType:int;
            var instrumentType:InstrumentType;
            var subArray:*;
            var tickerSubType:TickerSubType;
            var orderSide:OrderSide;
            var trend:Trend;
            var isSum:Boolean;
            var priceDigit:int;
            var instrumentId:String;
            var price:Number;
            var change:Number;
            var sequenceId:int;
            var marketTickerFeedMessage:MarketTickerFeedMessage;
            var volume:int;
            var volumeCount:int;
            var multipleFeedMessage:MultipleFeedMessage;
            var firstMessageId:Number;
            var i:int;

            byteArray = feedMessage.data;
x            byteArray.readConfigByte();
            
x            intinstrumentType = byteArray.readByte();
            
            instrumentType = InstrumentType.lookUpFromFeed(intinstrumentType);
            
x            subArray = byteArray.readVaryBitArray([4, 1, 2, 1]);
            
            tickerSubType = TickerSubType.lookUpFromFeed(instrumentType, subArray[0]);  D OR E 
            
            orderSide = OrderSide.lookUpFromFeed(subArray[1]); S B H
            
            trend = Trend.lookUpFromFeed(subArray[2]);
            
            isSum = (subArray[3] == 1);
            
            priceDigit = DEFAULT_PRICE_DIGIT;
            if (instrumentType.isDerivatives()){
                priceDigit = byteArray.readByte();
            };
x            instrumentId = byteArray.readStringWithLength();
x            price = byteArray.readNumberWithDigit(priceDigit);
x            change = byteArray.readNumberWithDigit(priceDigit);
x            sequenceId = byteArray.readInt();
x            marketTickerFeedMessage = null;
            volume = int.MIN_VALUE;
x            volumeCount = byteArray.readShortOrByte();
            if (volumeCount > 1){
                multipleFeedMessage = new MultipleFeedMessage();
                firstMessageId = NaN;
                i = 0;
                while (i < volumeCount) {
                    marketTickerFeedMessage = new MarketTickerFeedMessage(source);
                    if (i == 0){
                        firstMessageId = marketTickerFeedMessage.id;
                    };
                    volume = byteArray.readIntOrShortVolume();
                    marketTickerFeedMessage.instrumentType = instrumentType;
                    marketTickerFeedMessage.tickerSubType = tickerSubType;
                    marketTickerFeedMessage.instrumentId = instrumentId;
                    marketTickerFeedMessage.orderSide = orderSide;
                    marketTickerFeedMessage.price = price;
                    marketTickerFeedMessage.priceDigit = priceDigit;
                    marketTickerFeedMessage.change = change;
                    marketTickerFeedMessage.trend = trend;
                    marketTickerFeedMessage.sequenceId = sequenceId;
                    marketTickerFeedMessage.volume = volume;
                    marketTickerFeedMessage.isSum = isSum;
                    marketTickerFeedMessage.firstMessageId = firstMessageId;
                    multipleFeedMessage.add(marketTickerFeedMessage);
                    i++;
                };
                return (multipleFeedMessage);
            };
            marketTickerFeedMessage = new MarketTickerFeedMessage(source);
            volume = byteArray.readIntOrShortVolume();
            marketTickerFeedMessage.instrumentType = instrumentType;
            marketTickerFeedMessage.tickerSubType = tickerSubType;
            marketTickerFeedMessage.instrumentId = instrumentId;
            marketTickerFeedMessage.orderSide = orderSide;
            marketTickerFeedMessage.price = price;
            marketTickerFeedMessage.priceDigit = priceDigit;
            marketTickerFeedMessage.change = change;
            marketTickerFeedMessage.trend = trend;
            marketTickerFeedMessage.sequenceId = sequenceId;
            marketTickerFeedMessage.volume = volume;
            marketTickerFeedMessage.isSum = isSum;
            marketTickerFeedMessage.firstMessageId = marketTickerFeedMessage.id;
            return (marketTickerFeedMessage);
        }
        protected function parseMarketSummary(feedMessage:IBinaryRawMessage, source:Source):Message{
            var byteArray:StreamingByteArray;
            var DIGIT:int;
            var dataFlagArray:Array;
            var hasEquityDataFlag:Boolean;
            var hasDerivativesDataFlag:Boolean;
            var message:MarketStatusFeedMessage;
            var setIndex:Number;
            var setHigh:Number;
            var setLow:Number;
            var setChange:Number;
            var setHighChange:Number;
            var setLowChange:Number;
            var setTotalValue:Number;
            var setTotalVolume:Number;
            var setGainers:int;
            var setLosers:int;
            var setUnchanged:int;
            var setStatus:String;
            var set50Index:Number;
            var set50High:Number;
            var set50Low:Number;
            var set50Change:Number;
            var set50HighChange:Number;
            var set50LowChange:Number;
            var set50TotalValue:Number;
            var set100Index:Number;
            var set100High:Number;
            var set100Low:Number;
            var set100Change:Number;
            var set100HighChange:Number;
            var set100LowChange:Number;
            var set100TotalValue:Number;
            var setHDIndex:Number;
            var setHDHigh:Number;
            var setHDLow:Number;
            var setHDChange:Number;
            var setHDHighChange:Number;
            var setHDLowChange:Number;
            var setHDTotalValue:Number;
            var maiIndex:Number;
            var maiHigh:Number;
            var maiLow:Number;
            var maiChange:Number;
            var maiHighChange:Number;
            var maiLowChange:Number;
            var maiTotalValue:Number;
            var ftseIndex:Number;
            var ftseHigh:Number;
            var ftseLow:Number;
            var ftseChange:Number;
            var ftseHighChange:Number;
            var ftseLowChange:Number;
            var ftseTotalValue:Number;
            var tfexTotalVolume:int;
            var tfexTotalDeal:int;
            var tfexTotalOI:int;
            var totalFuturesVolume:int;
            var totalFuturesDeal:int;
            var totalFuturesOI:int;
            var totalOptionsVolume:int;
            var totalOptionsDeal:int;
            var totalOptionsOI:int;
            var dateAsOfDay:int;
            var dateAsOfMonth:int;
            var dateAsOfYear:int;
            var tfexStatus:String;
            var tfexMetalStatus:String;
            var tfexStockStatus:String;
            var tfexInterestStatus:String;
            var tfexEnergyStatus:String;
            var tfexCurrencyStatus:String;
            
            byteArray = feedMessage.data;
            DIGIT = 2;
            byteArray.readConfigByte();
            dataFlagArray = byteArray.readBooleanArray();
            hasEquityDataFlag = dataFlagArray[1];
            hasDerivativesDataFlag = dataFlagArray[0];
            if (hasEquityDataFlag){
                setIndex = byteArray.readNumberFixedIntWithDigit(DIGIT);
                setHigh = byteArray.readNumberFixedIntWithDigit(DIGIT);
                setLow = byteArray.readNumberFixedIntWithDigit(DIGIT);
                setChange = byteArray.readNumberWithDigit(DIGIT);
                setHighChange = byteArray.readNumberWithDigit(DIGIT);
                setLowChange = byteArray.readNumberWithDigit(DIGIT);
                setTotalValue = byteArray.readNumberFixedIntWithDigit(DIGIT);
                setTotalVolume = byteArray.readLong();
                setGainers = byteArray.readIntOrShort();
                setLosers = byteArray.readIntOrShort();
                setUnchanged = byteArray.readIntOrShort();
                setStatus = byteArray.readStringWithLength();
                set50Index = byteArray.readNumberFixedIntWithDigit(DIGIT);
                set50High = byteArray.readNumberFixedIntWithDigit(DIGIT);
                set50Low = byteArray.readNumberFixedIntWithDigit(DIGIT);
                set50Change = byteArray.readNumberWithDigit(DIGIT);
                set50HighChange = byteArray.readNumberWithDigit(DIGIT);
                set50LowChange = byteArray.readNumberWithDigit(DIGIT);
                set50TotalValue = byteArray.readNumberFixedIntWithDigit(DIGIT);
                set100Index = byteArray.readNumberFixedIntWithDigit(DIGIT);
                set100High = byteArray.readNumberFixedIntWithDigit(DIGIT);
                set100Low = byteArray.readNumberFixedIntWithDigit(DIGIT);
                set100Change = byteArray.readNumberWithDigit(DIGIT);
                set100HighChange = byteArray.readNumberWithDigit(DIGIT);
                set100LowChange = byteArray.readNumberWithDigit(DIGIT);
                set100TotalValue = byteArray.readNumberFixedIntWithDigit(DIGIT);
                setHDIndex = byteArray.readNumberFixedIntWithDigit(DIGIT);
                setHDHigh = byteArray.readNumberFixedIntWithDigit(DIGIT);
                setHDLow = byteArray.readNumberFixedIntWithDigit(DIGIT);
                setHDChange = byteArray.readNumberWithDigit(DIGIT);
                setHDHighChange = byteArray.readNumberWithDigit(DIGIT);
                setHDLowChange = byteArray.readNumberWithDigit(DIGIT);
                setHDTotalValue = byteArray.readNumberFixedIntWithDigit(DIGIT);
                maiIndex = byteArray.readNumberFixedIntWithDigit(DIGIT);
                maiHigh = byteArray.readNumberFixedIntWithDigit(DIGIT);
                maiLow = byteArray.readNumberFixedIntWithDigit(DIGIT);
                maiChange = byteArray.readNumberWithDigit(DIGIT);
                maiHighChange = byteArray.readNumberWithDigit(DIGIT);
                maiLowChange = byteArray.readNumberWithDigit(DIGIT);
                maiTotalValue = byteArray.readNumberFixedIntWithDigit(DIGIT);
                ftseIndex = byteArray.readNumberFixedIntWithDigit(DIGIT);
                ftseHigh = byteArray.readNumberFixedIntWithDigit(DIGIT);
                ftseLow = byteArray.readNumberFixedIntWithDigit(DIGIT);
                ftseChange = byteArray.readNumberWithDigit(DIGIT);
                ftseHighChange = byteArray.readNumberWithDigit(DIGIT);
                ftseLowChange = byteArray.readNumberWithDigit(DIGIT);
                ftseTotalValue = byteArray.readNumberFixedIntWithDigit(DIGIT);
            };
            if (hasDerivativesDataFlag){
                tfexTotalVolume = byteArray.readInt();
                tfexTotalDeal = byteArray.readInt();
                tfexTotalOI = byteArray.readInt();
                totalFuturesVolume = byteArray.readInt();
                totalFuturesDeal = byteArray.readInt();
                totalFuturesOI = byteArray.readInt();
                totalOptionsVolume = byteArray.readInt();
                totalOptionsDeal = byteArray.readInt();
                totalOptionsOI = byteArray.readInt();
                dateAsOfDay = byteArray.readByte();
                dateAsOfMonth = byteArray.readByte();
                dateAsOfYear = byteArray.readShort();
                tfexStatus = byteArray.readStringWithLength();
                tfexMetalStatus = byteArray.readStringWithLength();
                tfexStockStatus = byteArray.readStringWithLength();
                tfexInterestStatus = byteArray.readStringWithLength();
                tfexEnergyStatus = byteArray.readStringWithLength();
                tfexCurrencyStatus = byteArray.readStringWithLength();
            };
            message = new MarketStatusFeedMessage(source);
            message.hasEquityInfo = hasEquityDataFlag;
            message.hasDerivativesInfo = hasDerivativesDataFlag;
            if (hasEquityDataFlag){
                message.setIndex = setIndex;
                message.setChange = setChange;
                message.setHigh = setHigh;
                message.setHighChange = setHighChange;
                message.setLow = setLow;
                message.setLowChange = setLowChange;
                message.setTotalValue = setTotalValue;
                message.setTotalVolume = setTotalVolume;
                message.setGainers = setGainers;
                message.setLosers = setLosers;
                message.setUnchanged = setUnchanged;
                message.setStatus = setStatus;
                message.set50Index = set50Index;
                message.set50Change = set50Change;
                message.set50High = set50High;
                message.set50HighChange = set50HighChange;
                message.set50Low = set50Low;
                message.set50LowChange = set50LowChange;
                message.set50TotalValue = set50TotalValue;
                message.set100Index = set100Index;
                message.set100Change = set100Change;
                message.set100High = set100High;
                message.set100HighChange = set100HighChange;
                message.set100Low = set100Low;
                message.set100LowChange = set100LowChange;
                message.set100TotalValue = set100TotalValue;
                message.setHDIndex = setHDIndex;
                message.setHDChange = setHDChange;
                message.setHDHigh = setHDHigh;
                message.setHDHighChange = setHDHighChange;
                message.setHDLow = setHDLow;
                message.setHDLowChange = setHDLowChange;
                message.setHDTotalValue = setHDTotalValue;
                message.maiIndex = maiIndex;
                message.maiChange = maiChange;
                message.maiHigh = maiHigh;
                message.maiHighChange = maiHighChange;
                message.maiLow = maiLow;
                message.maiLowChange = maiLowChange;
                message.maiTotalValue = maiTotalValue;
                message.ftseIndex = ftseIndex;
                message.ftseChange = ftseChange;
                message.ftseHigh = ftseHigh;
                message.ftseHighChange = ftseHighChange;
                message.ftseLow = ftseLow;
                message.ftseLowChange = ftseLowChange;
                message.ftseIndex = ftseIndex;
                message.ftseChange = ftseChange;
                message.ftseHigh = ftseHigh;
                message.ftseHighChange = ftseHighChange;
                message.ftseLow = ftseLow;
                message.ftseLowChange = ftseLowChange;
                message.ftseTotalValue = ftseTotalValue;
            };
            if (hasDerivativesDataFlag){
                message.tfexTotalVolume = tfexTotalVolume;
                message.tfexTotalDeal = tfexTotalDeal;
                message.tfexTotalOI = tfexTotalOI;
                message.totalFuturesVolume = totalFuturesVolume;
                message.totalFuturesDeal = totalFuturesDeal;
                message.totalFuturesOI = totalFuturesOI;
                message.totalOptionsVolume = totalOptionsVolume;
                message.totalOptionsDeal = totalOptionsDeal;
                message.totalOptionsOI = totalOptionsOI;
                message.dateAsOf = new Date((dateAsOfYear + 2000), (dateAsOfMonth - 1), dateAsOfDay);
                message.tfexStatus = tfexStatus;
                message.tfexMetalStatus = tfexMetalStatus;
                message.tfexStockStatus = tfexStockStatus;
                message.tfexInterestStatus = tfexInterestStatus;
                message.tfexEnergyStatus = tfexEnergyStatus;
                message.tfexCurrencyStatus = tfexCurrencyStatus;
                message.dateAsOfDay = dateAsOfDay;
                message.dateAsOfMonth = dateAsOfMonth;
                message.dateAsOfYear = dateAsOfYear;
            };
            return (message);
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.message.response.orderstatus.*;
    import com.settrade.streaming5.common.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.response.portfolio.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.dealsummary.*;
    import com.settrade.streaming5.message.response.accountInfo.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.message.control.*;

    public class OrderEquityMessageParser implements IMessageParser {

        private static const STATUS_INDEX = 2;
        private static const DATA_COUNT_INDEX = 3;
        private static const DATA_START_INDEX = 5;
        private static const DEAL_SUMMARY_SETTLEMENT_FEE_INDEX = 3;
        private static const DEAL_SUMMARY_DATA_COUNT_INDEX = 4;
        private static const DEAL_SUMMARY_DATA_START_INDEX = 6;

        private static var logger:Logger = new Logger(prototype.constructor);

        public function OrderEquityMessageParser(){
            super();
        }
        public function parseMessage(message:IRawMessage):Message{
            var index:int;
            var subMessageString:String;
            if ((!(message) is StringResponseMessage)){
                throw (new InvalidMessageTypeError(message));
            };
            var stringRawMessage:StringResponseMessage = StringResponseMessage(message);
            var parseMessage:MultipleMessage = new MultipleMessage();
            var responseString:String = stringRawMessage.data;
            var responseArray:Array = responseString.split(Delimiter.LEVEL3);
            if (!this.isValidArray(responseArray)){
                return (new InvalidParseMessage(message));
            };
            var num:int = int(responseArray[1]);
            var i:* = 0;
            while (i < num) {
                index = (i + 2);
                subMessageString = responseArray[index];
                parseMessage.add(this.parseSubMessage(stringRawMessage, subMessageString));
                i++;
            };
            return (parseMessage);
        }
        private function isValidArray(responseArray:Array):Boolean{
            if (responseArray.length < 3){
                logger.error((("Invalid Length: " + responseArray.length) + " expected >=3"));
                return (false);
            };
            if (responseArray[0] != "StreamingResponse"){
                logger.error((("Invalid Field[0]: " + responseArray[0]) + " expected StreamingResponse"));
                return (false);
            };
            return (true);
        }
        private function parseSubMessage(message:StringResponseMessage, data:String):Message{
            var dataArray:Array = data.split(Delimiter.LEVEL2);
            if (!this.isValidSubMessageArray(dataArray, data)){
                return (new InvalidParseMessage(message));
            };
            var serviceType:OrderEquityServiceType = OrderEquityServiceType.lookUpFromId(dataArray[1]);
            switch (serviceType){
                case OrderEquityServiceType.PLACE_OR_CANCEL_ORDER:
                    return (this.parsePlaceOrderOrCancelOrFail(message, dataArray));
                case OrderEquityServiceType.ACCOUNT_INFO:
                    return (this.parseAccountInfo(message, dataArray));
                case OrderEquityServiceType.PORTFOLIO:
                    return (this.parsePortfolio(message, dataArray));
                case OrderEquityServiceType.ORDER_STATUS:
                    return (this.parseOrderStatus(message, dataArray));
                case OrderEquityServiceType.DEAL_SUMMARY:
                    return (this.parseDealSummary(message, dataArray));
                case OrderEquityServiceType.ORDER_STATUS_BY_ORDER_NUMBER:
                    return (this.parseOrderStatusByOrderNumber(message, dataArray));
                default:
                    logger.error(("Invalid Service Type: " + dataArray[1]));
                    return (new InvalidParseMessage(message));
            };
        }
        private function isValidSubMessageArray(responseArray:Array, responseString:String):Boolean{
            if (responseArray.length < 5){
                logger.error((("Invalid Length: " + responseArray.length) + " expected >= 5"));
                return (false);
            };
            if (responseArray[0] != "Streaming"){
                logger.error((("Invalid Field[0]: " + responseArray[0]) + " expected Streaming"));
                return (false);
            };
            return (true);
        }
        private function parseDealSummary(message:StringResponseMessage, dataArray:Array):Message{
            var account:Account;
            var accountNumber:String;
            var settlementFee:Number;
            var dealSummaryEquityResponseMessage:DealSummaryEquityResponseMessage;
            var count:int;
            var index:int;
            var i:int;
            var subDataString:String;
            var subDataArray:Array;
            var subIndex:int;
            var instrumentId:String;
            var volume:int;
            var totalFee:Number;
            var vat:Number;
            var netBuy:Number;
            var netSell:Number;
            var net:Number;
            var dealSummaryTotal:DealSummaryTotalEquity;
            var orderSide:OrderSide;
            var averagePrice:Number;
            var gross:Number;
            var dealSummaryEquity:DealSummaryEquity;
            var alertMessage:String;
            var dealSummaryDerivativesFailResponseMessage:DealSummaryDerivativesFailResponseMessage;
            var status:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(dataArray[STATUS_INDEX]);
            if (status.isSuccess()){
                account = this.getAccountFromDealSummaryRequestMessage(message.requestMessage);
                accountNumber = "";
                if (account != null){
                    accountNumber = account.accountNumber;
                };
                settlementFee = dataArray[DEAL_SUMMARY_SETTLEMENT_FEE_INDEX];
                dealSummaryEquityResponseMessage = new DealSummaryEquityResponseMessage(message.requestMessage, message.source, accountNumber, settlementFee);
                count = dataArray[DEAL_SUMMARY_DATA_COUNT_INDEX];
                index = DEAL_SUMMARY_DATA_START_INDEX;
                i = 0;
                while (i < count) {
                    subDataString = dataArray[(index + i)];
                    subDataArray = subDataString.split(Delimiter.LEVEL1);
                    subIndex = 0;
                    if (i == (count - 1)){
                        var _temp1 = subIndex;
                        subIndex = (subIndex + 1);
                        instrumentId = subDataArray[_temp1];
                        var _temp2 = subIndex;
                        subIndex = (subIndex + 1);
                        volume = int(subDataArray[_temp2]);
                        var _temp3 = subIndex;
                        subIndex = (subIndex + 1);
                        totalFee = Number(subDataArray[_temp3]);
                        var _temp4 = subIndex;
                        subIndex = (subIndex + 1);
                        vat = Number(subDataArray[_temp4]);
                        var _temp5 = subIndex;
                        subIndex = (subIndex + 1);
                        netBuy = Number(subDataArray[_temp5]);
                        var _temp6 = subIndex;
                        subIndex = (subIndex + 1);
                        netSell = Number(subDataArray[_temp6]);
                        var _temp7 = subIndex;
                        subIndex = (subIndex + 1);
                        net = Number(subDataArray[_temp7]);
                        dealSummaryTotal = new DealSummaryTotalEquity(instrumentId, volume, totalFee, vat, netBuy, netSell, net);
                        dealSummaryEquityResponseMessage.dealSummaryTotal = dealSummaryTotal;
                    } else {
                        var _temp8 = subIndex;
                        subIndex = (subIndex + 1);
                        instrumentId = subDataArray[_temp8];
                        var _temp9 = subIndex;
                        subIndex = (subIndex + 1);
                        orderSide = OrderSide.lookUpFromDealSummary(subDataArray[_temp9]);
                        var _temp10 = subIndex;
                        subIndex = (subIndex + 1);
                        volume = int(subDataArray[_temp10]);
                        var _temp11 = subIndex;
                        subIndex = (subIndex + 1);
                        averagePrice = Number(subDataArray[_temp11]);
                        var _temp12 = subIndex;
                        subIndex = (subIndex + 1);
                        gross = Number(subDataArray[_temp12]);
                        var _temp13 = subIndex;
                        subIndex = (subIndex + 1);
                        totalFee = Number(subDataArray[_temp13]);
                        var _temp14 = subIndex;
                        subIndex = (subIndex + 1);
                        vat = Number(subDataArray[_temp14]);
                        var _temp15 = subIndex;
                        subIndex = (subIndex + 1);
                        net = Number(subDataArray[_temp15]);
                        dealSummaryEquity = new DealSummaryEquity(instrumentId, orderSide, volume, averagePrice, gross, totalFee, vat, net);
                        dealSummaryEquityResponseMessage.addDealSummary(dealSummaryEquity);
                    };
                    i++;
                };
                return (dealSummaryEquityResponseMessage);
            };
            alertMessage = dataArray[DATA_START_INDEX];
            dealSummaryDerivativesFailResponseMessage = new DealSummaryDerivativesFailResponseMessage(message.requestMessage, message.source, alertMessage);
            return (dealSummaryDerivativesFailResponseMessage);
        }
        private function parseOrderStatusSubMessage(subDataString:String, accountNumber:String):OrderStatusEquity{
            var subDataArray:Array = subDataString.split(Delimiter.LEVEL1);
            var subIndex:int;
            var _temp1 = subIndex;
            subIndex = (subIndex + 1);
            var orderNumber:String = subDataArray[_temp1];
            var _temp2 = subIndex;
            subIndex = (subIndex + 1);
            var nvdrFlag:String = subDataArray[_temp2];
            var _temp3 = subIndex;
            subIndex = (subIndex + 1);
            var instrumentId:String = subDataArray[_temp3];
            var _temp4 = subIndex;
            subIndex = (subIndex + 1);
            var orderTime:String = subDataArray[_temp4];
            var _temp5 = subIndex;
            subIndex = (subIndex + 1);
            var orderSide:OrderSide = OrderSide.lookUpFromOrder(subDataArray[_temp5]);
            var _temp6 = subIndex;
            subIndex = (subIndex + 1);
            var price:Number = Number(subDataArray[_temp6]);
            var _temp7 = subIndex;
            subIndex = (subIndex + 1);
            var volume:int = int(subDataArray[_temp7]);
            var _temp8 = subIndex;
            subIndex = (subIndex + 1);
            var matchVolume:int = int(subDataArray[_temp8]);
            var _temp9 = subIndex;
            subIndex = (subIndex + 1);
            var balanceVolume:int = int(subDataArray[_temp9]);
            var _temp10 = subIndex;
            subIndex = (subIndex + 1);
            var cancelVolume:int = int(subDataArray[_temp10]);
            var _temp11 = subIndex;
            subIndex = (subIndex + 1);
            var orderStatus:String = subDataArray[_temp11];
            var _temp12 = subIndex;
            subIndex = (subIndex + 1);
            var priceType:PriceType = PriceType.lookUpFromOrder(subDataArray[_temp12]);
            var _temp13 = subIndex;
            subIndex = (subIndex + 1);
            var canCancel = (subDataArray[_temp13] == "Y");
            var _temp14 = subIndex;
            subIndex = (subIndex + 1);
            var canChange = (subDataArray[_temp14] == "Y");
            var _temp15 = subIndex;
            subIndex = (subIndex + 1);
            var tradeDate:String = subDataArray[_temp15];
            var _temp16 = subIndex;
            subIndex = (subIndex + 1);
            var sequenceId:int = int(subDataArray[_temp16]);
            var _temp17 = subIndex;
            subIndex = (subIndex + 1);
            subDataArray[_temp17];
            var _temp18 = subIndex;
            subIndex = (subIndex + 1);
            subDataArray[_temp18];
            var _temp19 = subIndex;
            subIndex = (subIndex + 1);
            var orderNumberSeos:String = subDataArray[_temp19];
            var _temp20 = subIndex;
            subIndex = (subIndex + 1);
            var orderNumberFis:String = subDataArray[_temp20];
            var _temp21 = subIndex;
            subIndex = (subIndex + 1);
            var validity:Validity = Validity.lookUpFromOrder(subDataArray[_temp21]);
            var _temp22 = subIndex;
            subIndex = (subIndex + 1);
            var canChangePriceVolume = (subDataArray[_temp22] == "Y");
            var orderStatusEquity:OrderStatusEquity = new OrderStatusEquity(orderNumber, nvdrFlag, instrumentId, orderTime, orderSide, price, volume, matchVolume, balanceVolume, cancelVolume, orderStatus, priceType, canCancel, canChange, tradeDate, sequenceId, accountNumber, orderNumberSeos, orderNumberFis, validity, canChangePriceVolume);
            return (orderStatusEquity);
        }
        private function parseOrderStatus(message:StringResponseMessage, dataArray:Array):Message{
            var accountNumber:String;
            var orderStatusEquityResponseMessage:OrderStatusEquityResponseMessage;
            var count:int;
            var index:int;
            var i:int;
            var subDataString:String;
            var orderStatusEquity:OrderStatusEquity;
            var alertMessage:String;
            var orderStatusequityFailResponseMessage:OrderStatusEquityFailResponseMessage;
            var status:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(dataArray[STATUS_INDEX]);
            if (status.isSuccess()){
                accountNumber = this.getAccountNumberFromOrderStatusRequestMessage(message.requestMessage);
                orderStatusEquityResponseMessage = new OrderStatusEquityResponseMessage(message.requestMessage, message.source, accountNumber);
                count = dataArray[DATA_COUNT_INDEX];
                index = DATA_START_INDEX;
                i = 0;
                while (i < count) {
                    subDataString = dataArray[(index + i)];
                    orderStatusEquity = this.parseOrderStatusSubMessage(subDataString, accountNumber);
                    orderStatusEquityResponseMessage.addOrderStatus(orderStatusEquity);
                    i++;
                };
                return (orderStatusEquityResponseMessage);
            };
            alertMessage = dataArray[DATA_START_INDEX];
            orderStatusequityFailResponseMessage = new OrderStatusEquityFailResponseMessage(message.requestMessage, message.source, alertMessage);
            return (orderStatusequityFailResponseMessage);
        }
        private function parseOrderStatusByOrderNumber(message:StringResponseMessage, dataArray:Array):Message{
            var accountNumber:String;
            var count:int;
            var index:int;
            var subDataString:String;
            var orderStatusEquity:OrderStatusEquity;
            var orderStatusEquityResponseMessage:OrderStatusByNumberEquityResponseMessage;
            var alertMessage:String;
            var orderStatusequityFailResponseMessage:OrderStatusByNumberEquityFailResponseMessage;
            var status:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(dataArray[STATUS_INDEX]);
            if (status.isSuccess()){
                accountNumber = this.getAccountNumberFromOrderStatusByNumberRequestMessage(message.requestMessage);
                count = dataArray[DATA_COUNT_INDEX];
                index = DATA_START_INDEX;
                subDataString = dataArray[index];
                orderStatusEquity = this.parseOrderStatusSubMessage(subDataString, accountNumber);
                orderStatusEquityResponseMessage = new OrderStatusByNumberEquityResponseMessage(message.requestMessage, message.source, accountNumber, orderStatusEquity);
                return (orderStatusEquityResponseMessage);
            };
            alertMessage = dataArray[DATA_START_INDEX];
            orderStatusequityFailResponseMessage = new OrderStatusByNumberEquityFailResponseMessage(message.requestMessage, message.source, alertMessage);
            return (orderStatusequityFailResponseMessage);
        }
        private function getAccountNumberFromOrderStatusByNumberRequestMessage(message:RequestMessage):String{
            var messageList:Vector.<Message>;
            var subMessage:Message;
            var accountNumber:String = "";
            if (message == null){
                accountNumber = AccountManager.getInstance().currentAccount.accountNumber;
            } else {
                if (message.type.isOrderStatusByNumberEquityRequest()){
                    accountNumber = OrderStatusByNumberEquityRequestMessage(message).orderStatus.accountNumber;
                } else {
                    if ((message is IMultipleMessage)){
                        messageList = IMultipleMessage(message).messageList;
                        for each (subMessage in messageList) {
                            if (subMessage.type.isOrderStatusByNumberEquityRequest()){
                                accountNumber = OrderStatusByNumberEquityRequestMessage(subMessage).orderStatus.accountNumber;
                            };
                        };
                    } else {
                        accountNumber = AccountManager.getInstance().currentAccount.accountNumber;
                    };
                };
            };
            return (accountNumber);
        }
        private function getAccountNumberFromOrderStatusRequestMessage(message:RequestMessage):String{
            var messageList:Vector.<Message>;
            var subMessage:Message;
            var accountNumber:String = "";
            if (message == null){
                accountNumber = AccountManager.getInstance().currentAccount.accountNumber;
            } else {
                if (message.type.isOrderStausEquityRequest()){
                    accountNumber = OrderStatusEquityRequestMessage(message).accountNumber;
                } else {
                    if ((message is IMultipleMessage)){
                        messageList = IMultipleMessage(message).messageList;
                        for each (subMessage in messageList) {
                            if (subMessage.type.isOrderStausEquityRequest()){
                                accountNumber = OrderStatusEquityRequestMessage(subMessage).accountNumber;
                            };
                        };
                    } else {
                        accountNumber = AccountManager.getInstance().currentAccount.accountNumber;
                    };
                };
            };
            return (accountNumber);
        }
        private function parsePortfolio(message:StringResponseMessage, dataArray:Array):Message{
            var account:Account;
            var accountNumber:String;
            var portfolioEquityResponseMessage:PortfolioEquityResponseMessage;
            var count:int;
            var index:int;
            var i:int;
            var subDataString:String;
            var subDataArray:Array;
            var subIndex:int;
            var instrumentId:String;
            var nvdrFlag:String;
            var marketPrice:Number;
            var amount:Number;
            var marketValue:Number;
            var profit:Number;
            var percentProfit:Number;
            var realizeProfit:Number;
            var startVolume:Number;
            var currentVolume:Number;
            var actualVolume:Number;
            var averagePrice:Number;
            var flag:String;
            var portFlag:String;
            var marginRate:Number;
            var liabilities:Number;
            var commissionRate:Number;
            var vatRate:Number;
            var portfolio:PortfolioEquity;
            var alertMessage:String;
            var portfolioEquityFailResponseMessage:PortfolioEquityFailResponseMessage;
            var status:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(dataArray[STATUS_INDEX]);
            if (status.isSuccess()){
                account = this.getAccountFromPortfolioRequestMessage(message.requestMessage);
                accountNumber = "";
                if (account != null){
                    accountNumber = account.accountNumber;
                };
                portfolioEquityResponseMessage = new PortfolioEquityResponseMessage(message.requestMessage, message.source, accountNumber);
                count = dataArray[DATA_COUNT_INDEX];
                index = DATA_START_INDEX;
                i = 0;
                while (i < count) {
                    subDataString = dataArray[(index + i)];
                    subDataArray = subDataString.split(Delimiter.LEVEL1);
                    subIndex = 0;
                    var _temp1 = subIndex;
                    subIndex = (subIndex + 1);
                    instrumentId = subDataArray[_temp1];
                    var _temp2 = subIndex;
                    subIndex = (subIndex + 1);
                    nvdrFlag = subDataArray[_temp2];
                    var _temp3 = subIndex;
                    subIndex = (subIndex + 1);
                    marketPrice = Number(subDataArray[_temp3]);
                    var _temp4 = subIndex;
                    subIndex = (subIndex + 1);
                    amount = Number(subDataArray[_temp4]);
                    var _temp5 = subIndex;
                    subIndex = (subIndex + 1);
                    marketValue = Number(subDataArray[_temp5]);
                    var _temp6 = subIndex;
                    subIndex = (subIndex + 1);
                    profit = Number(subDataArray[_temp6]);
                    var _temp7 = subIndex;
                    subIndex = (subIndex + 1);
                    percentProfit = Number(subDataArray[_temp7]);
                    var _temp8 = subIndex;
                    subIndex = (subIndex + 1);
                    realizeProfit = Number(subDataArray[_temp8]);
                    var _temp9 = subIndex;
                    subIndex = (subIndex + 1);
                    startVolume = Number(subDataArray[_temp9]);
                    var _temp10 = subIndex;
                    subIndex = (subIndex + 1);
                    currentVolume = Number(subDataArray[_temp10]);
                    var _temp11 = subIndex;
                    subIndex = (subIndex + 1);
                    actualVolume = Number(subDataArray[_temp11]);
                    var _temp12 = subIndex;
                    subIndex = (subIndex + 1);
                    averagePrice = Number(subDataArray[_temp12]);
                    var _temp13 = subIndex;
                    subIndex = (subIndex + 1);
                    flag = subDataArray[_temp13];
                    var _temp14 = subIndex;
                    subIndex = (subIndex + 1);
                    portFlag = subDataArray[_temp14];
                    var _temp15 = subIndex;
                    subIndex = (subIndex + 1);
                    marginRate = Number(subDataArray[_temp15]);
                    var _temp16 = subIndex;
                    subIndex = (subIndex + 1);
                    liabilities = Number(subDataArray[_temp16]);
                    var _temp17 = subIndex;
                    subIndex = (subIndex + 1);
                    commissionRate = Number(subDataArray[_temp17]);
                    var _temp18 = subIndex;
                    subIndex = (subIndex + 1);
                    vatRate = Number(subDataArray[_temp18]);
                    portfolio = new PortfolioEquity(instrumentId, nvdrFlag, marketPrice, amount, marketValue, profit, percentProfit, realizeProfit, startVolume, currentVolume, actualVolume, averagePrice, flag, portFlag, marginRate, liabilities, commissionRate, vatRate);
                    portfolioEquityResponseMessage.addPortfolio(portfolio);
                    i++;
                };
                return (portfolioEquityResponseMessage);
            };
            alertMessage = dataArray[DATA_START_INDEX];
            portfolioEquityFailResponseMessage = new PortfolioEquityFailResponseMessage(message.requestMessage, message.source, alertMessage);
            return (portfolioEquityFailResponseMessage);
        }
        private function parseAccountInfo(message:StringResponseMessage, dataArray:Array):Message{
            var subDataStr:String;
            var subDataArray:Array;
            var accountEquity:AccountEquity;
            var account:Account = this.getAccountFromAccountInfoRequestMessage(message.requestMessage);
            if (account.system.isEquity()){
                subDataStr = dataArray[DATA_START_INDEX];
                subDataArray = subDataStr.split(Delimiter.LEVEL1);
                accountEquity = AccountEquity(account);
                if (StreamingAttribute.userRoleEquity.isMarketRep()){
                    return (this.parseAccountInfoMarketRep(message, subDataArray, accountEquity));
                };
                if (accountEquity.orderType.isDgw()){
                    return (this.parseAccountInfoDgw(message, subDataArray, accountEquity));
                };
                return (this.parseAccountInfoDefault(message, subDataArray, accountEquity));
            };
            logger.error("Invalid Account");
            return (new InvalidParseMessage(message, null, message.requestMessage));
        }
        private function parseAccountInfoMarketRep(message:StringResponseMessage, subDataArray:Array, accountEquity:AccountEquity):Message{
            if (subDataArray.length >= 7){
                accountEquity.tradeType = subDataArray[3];
                accountEquity.clientType = subDataArray[5];
                return (this.parseAccountInfoDefault(message, subDataArray, accountEquity));
            };
            logger.error(("Invalid Length for subData: expected >= 7 found " + subDataArray.length));
            return (new InvalidParseMessage(message, null, message.requestMessage));
        }
        private function parseAccountInfoDefault(message:StringResponseMessage, subDataArray:Array, accountEquity:AccountEquity):Message{
            if (accountEquity.isCreditBalanceAccount()){
                return (this.parseAccountInfoCredit(message, subDataArray, accountEquity));
            };
            return (this.parseAccountInfoCash(message, subDataArray, accountEquity));
        }
        private function parseAccountInfoCash(message:StringResponseMessage, subDataArray:Array, accountEquity:AccountEquity):Message{
            var index:*;
            var credit:Number;
            var cash:Number;
            var line:Number;
            var pendingLine:Number;
            if (subDataArray.length >= 3){
                index = 0;
                var _temp1 = index;
                index = (index + 1);
                credit = Number(subDataArray[_temp1]);
                var _temp2 = index;
                index = (index + 1);
                cash = Number(subDataArray[_temp2]);
                var _temp3 = index;
                index = (index + 1);
                line = Number(subDataArray[_temp3]);
                index++;
                index++;
                index++;
                var _temp4 = index;
                index = (index + 1);
                pendingLine = Number(subDataArray[_temp4]);
                return (new AccountInfoEquityCashResponseMessage(message.requestMessage, message.source, accountEquity.accountNumber, accountEquity.orderType, credit, line, cash, pendingLine));
            };
            logger.error(("Invalid Length for subData: expected >= 3 found " + subDataArray.length));
            return (new InvalidParseMessage(message, null, message.requestMessage));
        }
        private function parseAccountInfoCredit(message:StringResponseMessage, subDataArray:Array, accountEquity:AccountEquity):Message{
            var index:*;
            var credit:Number;
            var ee:Number;
            var line:Number;
            var percentMM:Number;
            if (subDataArray.length >= 3){
                index = 0;
                var _temp1 = index;
                index = (index + 1);
                credit = Number(subDataArray[_temp1]);
                var _temp2 = index;
                index = (index + 1);
                ee = Number(subDataArray[_temp2]);
                var _temp3 = index;
                index = (index + 1);
                line = Number(subDataArray[_temp3]);
                index++;
                var _temp4 = index;
                index = (index + 1);
                percentMM = Number(subDataArray[_temp4]);
                return (new AccountInfoEquityCreditResponseMessage(message.requestMessage, message.source, accountEquity.accountNumber, accountEquity.orderType, credit, line, ee, percentMM));
            };
            logger.error(("Invalid Length for subData: expected >= 3 found " + subDataArray.length));
            return (new InvalidParseMessage(message, null, message.requestMessage));
        }
        private function parseAccountInfoDgw(message:StringResponseMessage, subDataArray:Array, accountEquity:AccountEquity):Message{
            if (accountEquity.isCreditBalanceAccount()){
                return (this.parseAccountInfoCreditDgw(message, subDataArray, accountEquity));
            };
            return (this.parseAccountInfoCashDgw(message, subDataArray, accountEquity));
        }
        private function parseAccountInfoCashDgw(message:StringResponseMessage, subDataArray:Array, accountEquity:AccountEquity):Message{
            var index:*;
            var credit:Number;
            var cashStr:String;
            var purchasingPower:Number;
            var hasCash:Boolean;
            var cash:Number;
            var pendingLine:Number;
            if (subDataArray.length >= 3){
                index = 0;
                var _temp1 = index;
                index = (index + 1);
                credit = Number(subDataArray[_temp1]);
                var _temp2 = index;
                index = (index + 1);
                cashStr = subDataArray[_temp2];
                var _temp3 = index;
                index = (index + 1);
                purchasingPower = Number(subDataArray[_temp3]);
                hasCash = !((cashStr == "N/A"));
                cash = Number(cashStr);
                index++;
                index++;
                index++;
                var _temp4 = index;
                index = (index + 1);
                pendingLine = Number(subDataArray[_temp4]);
                return (new AccountInfoEquityCashDgwResponseMessage(message.requestMessage, message.source, accountEquity.accountNumber, accountEquity.orderType, credit, purchasingPower, cash, hasCash, pendingLine));
            };
            logger.error(("Invalid Length for subData: expected >= 3 found " + subDataArray.length));
            return (new InvalidParseMessage(message, null, message.requestMessage));
        }
        private function parseAccountInfoCreditDgw(message:StringResponseMessage, subDataArray:Array, accountEquity:AccountEquity):Message{
            var index:*;
            var credit:Number;
            var ee:Number;
            if (subDataArray.length >= 2){
                index = 0;
                var _temp1 = index;
                index = (index + 1);
                credit = Number(subDataArray[_temp1]);
                index++;
                var _temp2 = index;
                index = (index + 1);
                ee = Number(subDataArray[_temp2]);
                return (new AccountInfoEquityCreditDgwResponseMessage(message.requestMessage, message.source, accountEquity.accountNumber, accountEquity.orderType, credit, ee));
            };
            logger.error(("Invalid Length for subData: expected >= 2 found " + subDataArray.length));
            return (new InvalidParseMessage(message, null, message.requestMessage));
        }
        private function getAccountNumberFromPortfolioRequestMessageSub(message:RequestMessage):String{
            var subMessage:Message;
            var list:Vector.<Message>;
            var subsubMessage:Message;
            var accountNumber:String;
            var messageList:Array = [message];
            while (messageList.length > 0) {
                subMessage = messageList.pop();
                if (subMessage.type.isPortfolioEquityRequest()){
                    accountNumber = PortfolioEquityRequestMessage(subMessage).accountNumber;
                    break;
                };
                if ((subMessage is IMultipleMessage)){
                    list = IMultipleMessage(subMessage).messageList;
                    for each (subsubMessage in list) {
                        messageList.push(subsubMessage);
                    };
                };
            };
            return (accountNumber);
        }
        private function getAccountFromDealSummaryRequestMessage(message:RequestMessage):Account{
            var accountNumber:String = this.getAccountFromDealSummaryRequestMessageSub(message);
            var account:Account = AccountManager.getInstance().currentAccount;
            if (accountNumber != null){
                if (AccountManager.getInstance().hasAccountByAccountNumberAndSystem(accountNumber, System.EQUITY)){
                    account = AccountManager.getInstance().getAccountByAccountNumberAndSystem(accountNumber, System.EQUITY);
                };
            };
            return (account);
        }
        private function getAccountFromDealSummaryRequestMessageSub(message:RequestMessage):String{
            var subMessage:Message;
            var list:Vector.<Message>;
            var subsubMessage:Message;
            var accountNumber:String;
            var messageList:Array = [message];
            while (messageList.length > 0) {
                subMessage = messageList.pop();
                if (subMessage.type.isDealSummaryEquityRequest()){
                    accountNumber = DealSummaryEquityRequestMessage(subMessage).accountNumber;
                    break;
                };
                if ((subMessage is IMultipleMessage)){
                    list = IMultipleMessage(subMessage).messageList;
                    for each (subsubMessage in list) {
                        messageList.push(subsubMessage);
                    };
                };
            };
            return (accountNumber);
        }
        private function getAccountFromPortfolioRequestMessage(message:RequestMessage):Account{
            var accountNumber:String = this.getAccountNumberFromPortfolioRequestMessageSub(message);
            var account:Account = AccountManager.getInstance().currentAccount;
            if (accountNumber != null){
                if (AccountManager.getInstance().hasAccountByAccountNumberAndSystem(accountNumber, System.EQUITY)){
                    account = AccountManager.getInstance().getAccountByAccountNumberAndSystem(accountNumber, System.EQUITY);
                };
            };
            return (account);
        }
        private function getAccountNumberFromAccountInfoRequestMessageSub(message:RequestMessage):String{
            var subMessage:Message;
            var list:Vector.<Message>;
            var subsubMessage:Message;
            var accountNumber:String;
            var messageList:Array = [message];
            while (messageList.length > 0) {
                subMessage = messageList.pop();
                if (subMessage.type.isAccountInfoEquityRequest()){
                    accountNumber = AccountInfoEquityRequestMessage(subMessage).accountNumber;
                    break;
                };
                if ((subMessage is IMultipleMessage)){
                    list = IMultipleMessage(subMessage).messageList;
                    for each (subsubMessage in list) {
                        messageList.push(subsubMessage);
                    };
                };
            };
            return (accountNumber);
        }
        private function getAccountFromAccountInfoRequestMessage(message:RequestMessage):Account{
            var accountNumber:String = this.getAccountNumberFromAccountInfoRequestMessageSub(message);
            var account:Account = AccountManager.getInstance().currentAccount;
            if (accountNumber != null){
                if (AccountManager.getInstance().hasAccountByAccountNumberAndSystem(accountNumber, System.EQUITY)){
                    account = AccountManager.getInstance().getAccountByAccountNumberAndSystem(accountNumber, System.EQUITY);
                };
            };
            return (account);
        }
        private function parsePlaceOrderOrCancelOrFail(message:StringResponseMessage, dataArray:Array):Message{
            var status:OrderResponseStatus;
            var alertMessage:String;
            if (message.requestMessage == null){
                logger.error("Request Message not found");
                return (new InvalidParseMessage(message, null, message.requestMessage));
            };
            if (((message.requestMessage.type.isPlaceOrderEquityRequest()) || (message.requestMessage.type.isPlaceOrderEquityConfirmRequest()))){
                return (this.parsePlaceOrder(message, dataArray));
            };
            if (message.requestMessage.type.isCancelOrderEquityRequest()){
                return (this.parseCancelOrder(message, dataArray));
            };
            status = OrderResponseStatus.lookupFromOrder(dataArray[STATUS_INDEX]);
            if (status.isFailed()){
                alertMessage = dataArray[DATA_START_INDEX];
                return (new FailResponseMessage(message.requestMessage, message.source, alertMessage));
            };
            logger.error("Invalid Message Type");
            return (new InvalidParseMessage(message));
        }
        private function parsePlaceOrder(message:StringResponseMessage, dataArray:Array):Message{
            var orderNumber:String;
            var status:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(dataArray[STATUS_INDEX]);
            var alertMessage:String = dataArray[5];
            var parseMessage:Message;
            if (status.isSuccess()){
                orderNumber = dataArray[6];
                parseMessage = new PlaceOrderEquityResponseMessage(message.requestMessage, message.source, alertMessage, orderNumber);
            } else {
                if (status.isWarning()){
                    parseMessage = new PlaceOrderEquityWarnResponseMessage(message.requestMessage, message.source, alertMessage);
                } else {
                    parseMessage = new PlaceOrderEquityFailResponseMessage(message.requestMessage, message.source, alertMessage);
                };
            };
            return (parseMessage);
        }
        private function parseCancelOrder(message:StringResponseMessage, dataArray:Array):Message{
            var status:OrderResponseStatus = OrderResponseStatus.lookupFromOrder(dataArray[STATUS_INDEX]);
            var alertMessage:String = dataArray[5];
            var parseMessage:Message;
            if (status.isSuccess()){
                parseMessage = new CancelOrderEquityResponseMessage(message.requestMessage, message.source, alertMessage);
            } else {
                parseMessage = new CancelOrderEquityFailResponseMessage(message.requestMessage, message.source, alertMessage);
            };
            return (parseMessage);
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.datacomponent.parser {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.feed.*;
    import com.settrade.streaming5.message.raw.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.message.control.*;

    public class DispatcherPullBinaryMessageParser extends DispatcherBinaryMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        public function DispatcherPullBinaryMessageParser(){
            super();
        }
        override public function parseMessage(message:IRawMessage):Message{
            var requestMessage:* = null;
            var currentMessage:* = null;
            var parseMessage:* = null;
            var message:* = message;
            if ((!(message) is IMultipleRawMessage)){
                throw (new InvalidMessageTypeError(message));
            };
            requestMessage = null;
            if (message.side.isResponse()){
                requestMessage = ResponseMessage(message).requestMessage;
            };
            var multipleMessage:* = new MultipleMessage();
            var multipleTickerMessage:* = new MultipleMarketTickerFeedMessage();
            var rawMessage:* = IMultipleRawMessage(message);
            var messageList:* = rawMessage.messageList;
            for each (currentMessage in messageList) {
                if ((!(currentMessage) is IRawMessage)){
                    throw (new InvalidMessageTypeError(currentMessage));
                };
                try {
                    parseMessage = super.parseMessage(IRawMessage(currentMessage));
                } catch(error:Error) {
                    logger.debug(error.getStackTrace());
                    parseMessage = new InvalidParseMessage(IRawMessage(currentMessage), null, requestMessage);
                };
                if (parseMessage.type.isMarketTickerFeed()){
                    multipleTickerMessage.add(MarketTickerFeedMessage(parseMessage));
                } else {
                    multipleMessage.add(parseMessage);
                };
            };
            if (multipleTickerMessage.messageList.length > 0){
                multipleMessage.add(multipleTickerMessage);
            };
            return (multipleMessage);
        }

    }
}//package com.settrade.streaming5.datacomponent.parser 
﻿package com.settrade.streaming5.enumuration {

    public class System {

        public static const EQUITY:System = new System("Equity", "ITP", "E");
;
        public static const DERIV:System = new System("Derivatives", "DERIV", "D");
;
        public static const REALTIME:System = new System("Realtime", "MM");
;
        public static const RESEARCH:System = new System("Research", "RN");
;
        public static const REALTIME_PRIMARY:System = new System("Realtime Primary", "");
;
        public static const REALTIME_SECONDARY:System = new System("Realtime Secondary", "");
;
        public static const SET:System = new System("Set", "");
;
        public static const EXTERNAL:System = new System("External", "");
;
        public static const NO_SYSTEM:System = new System("No System", "NOSYSTEM");
;
        public static const ALL_SYSTEM:System = new System("All System", "ALL");
;
        public static const ALL:Array = new Array(EQUITY, DERIV, REALTIME, REALTIME_PRIMARY, REALTIME_SECONDARY, NO_SYSTEM, ALL_SYSTEM, SET, EXTERNAL);

        protected var _display:String;
        protected var _value:String;
        protected var _feedName:String;

        public function System(display:String, value:String, feedName:String=""){
            super();
            this._display = display;
            this._value = value;
            this._feedName = feedName;
        }
        public static function lookupByValue(value:String):System{
            var system:System;
            for each (system in ALL) {
                if (system.value == value){
                    return (system);
                };
            };
            return (null);
        }

        public function get display():String{
            return (this._display);
        }
        public function get value():String{
            return (this._value);
        }
        public function get feedName():String{
            return (this._feedName);
        }
        public function toString():String{
            return ((("System[" + this._display) + "]"));
        }
        public function isEquity():Boolean{
            return ((this == EQUITY));
        }
        public function isDeriv():Boolean{
            return ((this == DERIV));
        }
        public function isRealtime():Boolean{
            return ((this == REALTIME));
        }
        public function isRealtimePrimary():Boolean{
            return ((this == REALTIME_PRIMARY));
        }
        public function isRealtimeSecondary():Boolean{
            return ((this == REALTIME_SECONDARY));
        }
        public function isNoSystem():Boolean{
            return ((this == NO_SYSTEM));
        }
        public function isALLSystem():Boolean{
            return ((this == ALL_SYSTEM));
        }
        public function isResearch():Boolean{
            return ((this == RESEARCH));
        }
        public function isExternal():Boolean{
            return ((this == EXTERNAL));
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class StreamingURLLoaderFormat {

        public static const TEXT_TIS_620:String = "TextTis620";
        public static const TEXT_UTF_8:String = "TextUTF8";
        public static const JSON_STRING:String = "JSONString";
        public static const JSON_STRING_TIS_620:String = "JSONStringTis620";

        public function StreamingURLLoaderFormat(){
            super();
        }
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class InstrumentListType {

        public static const NO_TYPE:InstrumentListType = new InstrumentListType("No Type", "");
;
        public static const FAVOURITE:InstrumentListType = new InstrumentListType("Favourite", "favourite");
;
        public static const EQUITY:InstrumentListType = new InstrumentListType("Equity", "equity");
;
        public static const FUTURES:InstrumentListType = new InstrumentListType("Futures", "futures");
;
        public static const FUTURES_UNDERLYING:InstrumentListType = new InstrumentListType("FuturesUnderlying", "futuresAndUnderlying");
;
        public static const OPTIONS:InstrumentListType = new InstrumentListType("Options", "options");
;
        public static const INDEX:InstrumentListType = new InstrumentListType("Index", "index");
;
        public static const INDUSTRY:InstrumentListType = new InstrumentListType("Industry", "industry");
;
        public static const SECTOR:InstrumentListType = new InstrumentListType("Sector", "sector");
;
        public static const MAI_INDUSTRY:InstrumentListType = new InstrumentListType("MaiIndustry", "maiIndustry");
;
        public static const MAI_SECTOR:InstrumentListType = new InstrumentListType("MaiSector", "maiSector");
;
        public static const STOCK_FUTURES_UNDERLYING:InstrumentListType = new InstrumentListType("StockFuturesUnderlying", "stockFuturesUnderlying");
;

        public static var ALL:Array = new Array(FAVOURITE, EQUITY, FUTURES, FUTURES_UNDERLYING, OPTIONS, INDEX, INDUSTRY, SECTOR, MAI_INDUSTRY, MAI_SECTOR);
        private static var feedMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _feedValue:String;

        public function InstrumentListType(name:String, feedValue:String){
            super();
            this._name = name;
            this._feedValue = feedValue;
        }
        private static function initMap(){
            var type:InstrumentListType;
            for each (type in ALL) {
                feedMap[type.feedValue] = type;
            };
        }
        public static function lookUpFromFeed(feedValue:String):InstrumentListType{
            var type:InstrumentListType = feedMap[feedValue];
            if (type == null){
                return (NO_TYPE);
            };
            return (type);
        }

        public function get name():String{
            return (this._name);
        }
        public function get feedValue():String{
            return (this._feedValue);
        }
        public function toString():String{
            return ((("InstrumentListType[name:" + this._name) + "]"));
        }
        public function isFavourite():Boolean{
            return ((this == FAVOURITE));
        }
        public function isEquity():Boolean{
            return ((this == EQUITY));
        }
        public function isFutures():Boolean{
            return ((this == FUTURES));
        }
        public function isFuturesWithUnderlying():Boolean{
            return ((this == FUTURES_UNDERLYING));
        }
        public function isOptions():Boolean{
            return ((this == OPTIONS));
        }
        public function isIndex():Boolean{
            return ((this == INDEX));
        }
        public function isIndustry():Boolean{
            return ((this == INDUSTRY));
        }
        public function isSector():Boolean{
            return ((this == SECTOR));
        }
        public function isMaiIndustry():Boolean{
            return ((this == MAI_INDUSTRY));
        }
        public function isMaiSector():Boolean{
            return ((this == MAI_SECTOR));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class InstrumentInfoType {

        public static const MARKET:InstrumentInfoType = new InstrumentInfoType("Market", 0);
;
        public static const INTRADAY:InstrumentInfoType = new InstrumentInfoType("Intrayday", 1);
;
        public static const STAT:InstrumentInfoType = new InstrumentInfoType("Stat", 2);
;

        protected var _name:String;
        protected var _priority:int;

        public function InstrumentInfoType(name:String, priority:int){
            super();
            this._name = name;
            this._priority = priority;
        }
        public function get name():String{
            return (this._name);
        }
        public function toString():String{
            return ((("InstrumentInfoType[name:" + this._name) + "]"));
        }
        public function compareTo(instrumentInfoType:InstrumentInfoType):int{
            return ((this._priority - instrumentInfoType._priority));
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class TickerSubType {

        public static const NO_TYPE:TickerSubType = new TickerSubType("No Type", -1);
;

        protected var _name:String;
        protected var _feedValue:int;

        public function TickerSubType(name:String, feedValue:int){
            super();
            this._name = name;
            this._feedValue = feedValue;
        }
        public static function lookUpFromFeed(parentType:InstrumentType, feedValue:int):TickerSubType{
            if (parentType.isEquity()){
                return (EquityTickerSubType.lookUpFromFeed(feedValue));
            };
            if (parentType.isDerivatives()){
                return (DerivativesTickerSubType.lookUpFromFeed(feedValue));
            };
            return (NO_TYPE);
        }

        public function get name():String{
            return (this._name);
        }
        public function get feedValue():int{
            return (this._feedValue);
        }
        public function toString():String{
            return ((("TickerSubType[name:" + this._name) + "]"));
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class InitialStatus {

        public static const FLASH_VAR:InitialStatus = new InitialStatus("Initial Flash Var");
;
        public static const REQUEST:InitialStatus = new InitialStatus("Initial Request");
;
        public static const PAGE:InitialStatus = new InitialStatus("Initial Page");
;
        public static const MARKET_PAGE:InitialStatus = new InitialStatus("Initial Market Page");
;
        public static const FEED:InitialStatus = new InitialStatus("Initial Feed");
;
        public static const MANAGER:InitialStatus = new InitialStatus("Initial Manager");
;
        public static const PRE_LOADER:InitialStatus = new InitialStatus("PreLoader");
;
        public static const STREAMING:InitialStatus = new InitialStatus("Initial Streaming");
;
        public static const OPTION_WIZARD:InitialStatus = new InitialStatus("Initial Option Wizard");
;

        var _name:String;

        public function InitialStatus(name:String){
            super();
            this._name = name;
        }
        public function get name():String{
            return (this._name);
        }
        public function toString():String{
            return ((("InitialStatus[name:" + this._name) + "]"));
        }
        public function isFlashVar():Boolean{
            return ((this == FLASH_VAR));
        }
        public function isRequest():Boolean{
            return ((this == REQUEST));
        }
        public function isPage():Boolean{
            return ((this == PAGE));
        }
        public function isFeed():Boolean{
            return ((this == FEED));
        }
        public function isStreaming():Boolean{
            return ((this == STREAMING));
        }
        public function isManager():Boolean{
            return ((this == MANAGER));
        }
        public function isOptionWizard():Boolean{
            return ((this == OPTION_WIZARD));
        }
        public function isPreloader():Boolean{
            return ((this == PRE_LOADER));
        }
        public function isMarketPage():Boolean{
            return ((this == MARKET_PAGE));
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class Trend {

        public static const UP:Trend = new Trend("Up", 0);
;
        public static const NO_CHANGE:Trend = new Trend("No Change", 1);
;
        public static const DOWN:Trend = new Trend("Down", 2);
;
        public static const NO_DATA:Trend = new Trend("No Data", 3);
;

        public static var ALL:Array = new Array(UP, NO_CHANGE, DOWN, NO_DATA);
        private static var feedMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _feedValue:int;

        public function Trend(name:String, feedValue:int){
            super();
            this._name = name;
            this._feedValue = feedValue;
        }
        private static function initMap(){
            var type:Trend;
            for each (type in ALL) {
                feedMap[type.feedValue] = type;
            };
        }
        public static function lookUpFromFeed(feedValue:int):Trend{
            var type:Trend = feedMap[feedValue];
            if (type == null){
                return (NO_DATA);
            };
            return (type);
        }

        public function get name():String{
            return (this._name);
        }
        public function get feedValue():int{
            return (this._feedValue);
        }
        public function isUp():Boolean{
            return ((this == UP));
        }
        public function isDown():Boolean{
            return ((this == DOWN));
        }
        public function isNoChange():Boolean{
            return ((this == NO_CHANGE));
        }
        public function isNoData():Boolean{
            return ((this == NO_DATA));
        }
        public function toString():String{
            return ((("Trend:[name:" + this._name) + "]"));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class TerminalType {

        public static const NO_TYPE:TerminalType;

        public function TerminalType(){
            super();
        }
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class NotificationCategory {

        public static const ORDER:NotificationCategory = new NotificationCategory("Order", "");
;
        public static const ALERT:NotificationCategory = new NotificationCategory("Alert", "");
;
        public static const ANNOUCEMENT:NotificationCategory = new NotificationCategory("Announcement", "ANN");
;
        public static const NEWS:NotificationCategory = new NotificationCategory("News", "NEWS");
;
        public static const RESEARCH:NotificationCategory = new NotificationCategory("Research", "RES");
;
        public static const NO_TYPE:NotificationCategory = new NotificationCategory("No Type", "");
;

        public static var ALL:Array = new Array(ORDER, ALERT, ANNOUCEMENT, NEWS, RESEARCH);
        private static var feedMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _value:String;

        public function NotificationCategory(name:String, value:String){
            super();
            this._name = name;
            this._value = value;
        }
        private static function initMap(){
            var type:NotificationCategory;
            for each (type in ALL) {
                feedMap[type._value] = type;
            };
        }
        public static function lookupFromFeed(feedValue:String):NotificationCategory{
            var type:NotificationCategory = feedMap[feedValue];
            if (type == null){
                return (NO_TYPE);
            };
            return (type);
        }

        public function get name():String{
            return (this._name);
        }
        public function get value():String{
            return (this._value);
        }
        public function isOrder():Boolean{
            return ((this == ORDER));
        }
        public function isAlert():Boolean{
            return ((this == ALERT));
        }
        public function isAnnoucement():Boolean{
            return ((this == ANNOUCEMENT));
        }
        public function isNews():Boolean{
            return ((this == NEWS));
        }
        public function isResearch():Boolean{
            return ((this == RESEARCH));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class MessageType {

        public static const NEW_STUB_REQUEST:MessageType = new MessageType("New Stub Request");
;
        public static const STUB_REQUEST:MessageType = new MessageType("Stub Request");
;
        public static const STUB_RESPONSE:MessageType = new MessageType("Stub Response");
;
        public static const STUB_FEED:MessageType = new MessageType("Stub Feed");
;
        public static const EMPTY:MessageType = new MessageType("Empty");
;
        public static const BINARY_REQUEST:MessageType = new MessageType("Binary Request", true);
;
        public static const BINARY_RESPONSE:MessageType = new MessageType("Binary Response", true);
;
        public static const BINARY_FEED:MessageType = new MessageType("Binary Feed", true);
;
        public static const STRING_RESPONSE:MessageType = new MessageType("String Response", true);
;
        public static const STRING_FEED:MessageType = new MessageType("String Feed", true);
;
        public static const OBJECT_RESPONSE:MessageType = new MessageType("Object Response", true);
;
        public static const URL_REQUEST:MessageType = new MessageType("URL Request", true);
;
        public static const STUB_RAW_RESPONSE:MessageType = new MessageType("Stub Raw Response", true);
;
        public static const STUB_RAW_FEED:MessageType = new MessageType("Stub Raw Feed", true);
;
        public static const MULTIPLE_RAW_FEED:MessageType = new MessageType("MultipleRawFeed", true);
;
        public static const MULTIPLE_RAW_RESPONSE:MessageType = new MessageType("MultipleRawResponse", true);
;
        public static const GENERATE_KEY_REQUEST:MessageType = new MessageType("GenerateKey");
;
        public static const GENERATE_KEY_RESPONSE:MessageType = new MessageType("GenerateKeyResponse");
;
        public static const GENERATE_KEY_FAIL_RESPONSE:MessageType = new MessageType("GenerateKeyFailResponse");
;
        public static const REGISTER_KEY_REQUEST:MessageType = new MessageType("RegisterKeyRequest");
;
        public static const ACCOUNT_LIST_EQUITY_REQUEST:MessageType = new MessageType("AccountListEquityRequest");
;
        public static const ACCOUNT_LIST_EQUITY_RESPONSE:MessageType = new MessageType("AccountListEquityResponse");
;
        public static const ACCOUNT_LIST_MARKETREP_EQUITY_RESPONSE:MessageType = new MessageType("AccountListMarketRepEquityResponse");
;
        public static const USER_CHECK_REQUEST:MessageType = new MessageType("UserCheckRequest");
;
        public static const USER_CHECK_RESPONSE:MessageType = new MessageType("UserCheckResponse");
;
        public static const UNAUTHORIZE_RESPONSE:MessageType = new MessageType("UnauthorizeResponse");
;
        public static const DISPATHCER_DOWN_RESPONSE:MessageType = new MessageType("DispatcherResponse");
;
        public static const INFO_REQUEST:MessageType = new MessageType("InfoRequest");
;
        public static const INFO_FEED:MessageType = new MessageType("InfoFeed");
;
        public static const INFO_STATISTIC_REQUEST:MessageType = new MessageType("InfoStatisticRequest");
;
        public static const INFO_STATISTIC_FEED:MessageType = new MessageType("InfoStatisticFeed");
;
        public static const INFO_STATISTIC_CHART_REQUEST:MessageType = new MessageType("InfoStatisticChartRequest");
;
        public static const INFO_STATISTIC_CHART_FEED:MessageType = new MessageType("InfoStatisticChartFeed");
;
        public static const INFO_ODDLOT_REQUEST:MessageType = new MessageType("InfoOddLotRequest");
;
        public static const INFO_ODDLOT_FEED:MessageType = new MessageType("InfoOddLotFeed");
;
        public static const MARKET_SUMMARY_REQUEST:MessageType = new MessageType("MarketSummaryRequest");
;
        public static const MARKET_SUMMARY_FEED:MessageType = new MessageType("MarketSummaryFeed");
;
        public static const MARKET_TICKER_REQUEST:MessageType = new MessageType("MarketTickerRequest");
;
        public static const MARKET_TICKER_FEED:MessageType = new MessageType("MarketTickerFeed");
;
        public static const INSTRUMENT_TICKER_REQUEST:MessageType = new MessageType("InstrumentTickerRequest");
;
        public static const INSTRUMENT_TICKER_FEED:MessageType = new MessageType("InstrumentTickerFeed");
;
        public static const INSTRUMENT_TICKER_ODDLOT_REQUEST:MessageType = new MessageType("InstrumentTickerOddLotRequest");
;
        public static const INSTRUMENT_TICKER_ODDLOT_FEED:MessageType = new MessageType("InstrumentTickerOddLotFeed");
;
        public static const SNAPSHOT_REQUEST:MessageType = new MessageType("SnapshotRequest");
;
        public static const SNAPSHOT_FEED:MessageType = new MessageType("SnapshotFeed");
;
        public static const ORDER_STATUS_PUSH_REQUEST:MessageType = new MessageType("OrderStatusPushRequest");
;
        public static const ORDER_STATUS_PUSH_RESPONSE:MessageType = new MessageType("OrderStatusPushResponse");
;
        public static const ORDER_STATUS_DERIVATIVES_FEED:MessageType = new MessageType("OrderStatusDerivativesFeed");
;
        public static const ORDER_STATUS_EQUITY_FEED:MessageType = new MessageType("OrderStatusEquityFeed");
;
        public static const ORDER_STATUS_DERIVATIVES_ALL_FEED:MessageType = new MessageType("OrderStatusDerivativesAllFeed");
;
        public static const ORDER_STATUS_EQUITY_ALL_FEED:MessageType = new MessageType("OrderStatusEquityAllFeed");
;
        public static const VOLUME_BY_PRICE_REQUEST:MessageType = new MessageType("VolumeByPriceRequest");
;
        public static const VOLUME_BY_PRICE_RESPONSE:MessageType = new MessageType("VolumeByPriceResponse");
;
        public static const VOLUME_BY_PRICE_DETAIL_REQUEST:MessageType = new MessageType("VolumeByPriceDetailRequest");
;
        public static const VOLUME_BY_PRICE_DETAIL_RESPONSE:MessageType = new MessageType("VolumeByPriceDetailResponse");
;
        public static const INTRADAY_CHART_REQUEST:MessageType = new MessageType("IntradayChartRequest");
;
        public static const INTRADAY_CHART_RESPONSE:MessageType = new MessageType("IntradayChartResponse");
;
        public static const HISTORICAL_CHART_REQUEST:MessageType = new MessageType("HistoricalChartRequest");
;
        public static const HISTORICAL_CHART_RESPONSE:MessageType = new MessageType("HistoricalChartResponse");
;
        public static const HISTORICAL_BY_DATE_REQUEST:MessageType = new MessageType("HistoricalByDateRequest");
;
        public static const HISTORICAL_BY_DATE_RESPONSE:MessageType = new MessageType("HistoricalByDateResponse");
;
        public static const INSTRUMENT_LIST_REQUEST:MessageType = new MessageType("InstrumentListRequest");
;
        public static const INSTRUMENT_LIST_RESPONSE:MessageType = new MessageType("InstrumentListResponse");
;
        public static const OPTIONS_STRIKE_PRICE_LIST_REQUEST:MessageType = new MessageType("OptionsStrikePriceListRequest");
;
        public static const OPTIONS_STRIKE_PRICE_LIST_RESPONE:MessageType = new MessageType("OptionsStrikePriceListResponse");
;
        public static const DISCONNECT_FEED:MessageType = new MessageType("DisconnectFeed");
;
        public static const ADMIN_FEED:MessageType = new MessageType("Admin");
;
        public static const ANNOUNCEMENT_REQUEST:MessageType = new MessageType("AnnouncementRequest");
;
        public static const ANNOUNCEMENT_FEED:MessageType = new MessageType("AnnouncementFeed");
;
        public static const NEWS_REQUEST:MessageType = new MessageType("NewsRequest");
;
        public static const NEWS_RESPONSE:MessageType = new MessageType("NewsResponse");
;
        public static const SET_CALENDAR_REQUEST:MessageType = new MessageType("SetCalendarRequest");
;
        public static const SET_CALENDAR_RESPONSE:MessageType = new MessageType("SetCalendarResponse");
;
        public static const ORDER_PUSH_CHECK_REQUEST:MessageType = new MessageType("OrderPushCheckRequest");
;
        public static const ORDER_PUSH_CHECK_FEED:MessageType = new MessageType("OrderPushCheckFeed");
;
        public static const OPTIONS_GREEK_VALUE_REQUEST:MessageType = new MessageType("OptionsGreekValueRequest");
;
        public static const OPTIONS_GREEK_VALUE_RESPONSE:MessageType = new MessageType("OptionsGreekValueResponse");
;
        public static const OPTIONS_EXPIRE_DATE_REQUEST:MessageType = new MessageType("OptionsExpireDateRequest");
;
        public static const OPTIONS_EXPIRE_DATE_RESPONSE:MessageType = new MessageType("OptionsExpireDateResponse");
;
        public static const OPTIONS_GREEK_DEFAULT_VALUE_REQUEST:MessageType = new MessageType("OptionsGreekDefaultValueRequest");
;
        public static const OPTIONS_GREEK_DEFAULT_VALUE_RESPONSE:MessageType = new MessageType("OptionsGreekDefaultValueResponse");
;
        public static const SYMBOL_SELECTOR_TREE_REQUEST:MessageType = new MessageType("SymbolSelectorTreeRequest");
;
        public static const SYMBOL_SELECTOR_TREE_RESPONSE:MessageType = new MessageType("SymbolSelectorTreeResponse");
;
        public static const SYMBOL_SELECTOR_OPTIONS_REQUEST:MessageType = new MessageType("SymbolSelectorOptionsRequest");
;
        public static const SYMBOL_SELECTOR_OPTIONS_RESPONSE:MessageType = new MessageType("SymbolSelectorOptionsResponse");
;
        public static const PLACE_ORDER_EQUITY_REQUEST:MessageType = new MessageType("PlaceOrderEquityRequest");
;
        public static const PLACE_ORDER_EQUITY_CONFIRM_REQUEST:MessageType = new MessageType("PlaceOrderConfirmEquityRequest");
;
        public static const PLACE_ORDER_EQUITY_RESPONSE:MessageType = new MessageType("PlaceOrderEquityResponse");
;
        public static const PLACE_ORDER_EQUITY_WARN_RESPONSE:MessageType = new MessageType("PlaceOrderEquityWarnResponse");
;
        public static const PLACE_ORDER_EQUITY_FAIL_RESPONSE:MessageType = new MessageType("PlaceOrderEquityFailResponse");
;
        public static const CANCEL_ORDER_EQUITY_REQUEST:MessageType = new MessageType("CancelOrderEquityRequest");
;
        public static const CANCEL_ORDER_EQUITY_RESPONSE:MessageType = new MessageType("CancelOrderEquityResponse");
;
        public static const CANCEL_ORDER_EQUITY_FAIL_RESPONSE:MessageType = new MessageType("CancelOrderEquityFailResponse");
;
        public static const CHANGE_ORDER_EQUITY_REQUEST:MessageType = new MessageType("ChangeOrderEquityRequest");
;
        public static const CHANGE_ORDER_EQUITY_CONFIRM_REQUEST:MessageType = new MessageType("ChangeOrderConfirmEquityRequest");
;
        public static const CHANGE_ORDER_EQUITY_RESPONSE:MessageType = new MessageType("ChangeOrderEquityResponse");
;
        public static const CHANGE_ORDER_EQUITY_WARN_RESPONSE:MessageType = new MessageType("ChangeOrderEquityWarnResponse");
;
        public static const CHANGE_ORDER_EQUITY_FAIL_RESPONSE:MessageType = new MessageType("ChangeOrderEquityFailResponse");
;
        public static const ORDER_STATUS_EQUITY_REQUEST:MessageType = new MessageType("OrderStatusEquityRequest");
;
        public static const ORDER_STATUS_EQUITY_RESPONSE:MessageType = new MessageType("OrderStatusEquityResponse");
;
        public static const ORDER_STATUS_EQUITY_FAIL_RESPONSE:MessageType = new MessageType("OrderStatusEquityFailResponse");
;
        public static const ORDER_STATUS_BY_NUMBER_EQUITY_REQUEST:MessageType = new MessageType("OrderStatusByNumberEquityRequest");
;
        public static const ORDER_STATUS_BY_NUMBER_EQUITY_RESPONSE:MessageType = new MessageType("OrderStatusByNumberEquityResponse");
;
        public static const ORDER_STATUS_BY_NUMBER_EQUITY_FAIL_RESPONSE:MessageType = new MessageType("OrderStatusByNumberEquityFailResponse");
;
        public static const PORTFOLIO_EQUITY_REQUEST:MessageType = new MessageType("PortfolioEquityRequest");
;
        public static const PORTFOLIO_EQUITY_RESPONSE:MessageType = new MessageType("PortfolioEquityResponse");
;
        public static const PORTFOLIO_EQUITY_FAIL_RESPONSE:MessageType = new MessageType("PortfolioEquityFailResponse");
;
        public static const ACCOUNT_INFO_EQUITY_REQUEST:MessageType = new MessageType("AccountInfoEquityRequest");
;
        public static const ACCOUNT_INFO_EQUITY_RESPONSE:MessageType = new MessageType("AccountInfoEquityResponse");
;
        public static const ACCOUNT_INFO_EQUITY_FAIL_RESPONSE:MessageType = new MessageType("AccountInfoEquityFailResponse");
;
        public static const ACCOUNT_INFO_LONG_EQUITY_REQUEST:MessageType = new MessageType("AccountInfoLongEquityRequest");
;
        public static const ACCOUNT_INFO_LONG_EQUITY_RESPONSE:MessageType = new MessageType("AccountInfoLongEquityResponse");
;
        public static const ACCOUNT_INFO_LONG_EQUITY_FAIL_RESPONSE:MessageType = new MessageType("AccountInfoLongEquityFailResponse");
;
        public static const DEAL_SUMMARY_EQUITY_REQUEST:MessageType = new MessageType("DealSummaryEquityRequest");
;
        public static const DEAL_SUMMARY_EQUITY_RESPONSE:MessageType = new MessageType("DealSummaryEquityResponse");
;
        public static const DEAL_SUMMARY_EQUITY_FAIL_RESPONSE:MessageType = new MessageType("DealSummaryEquityFailResponse");
;
        public static const PLACE_ORDER_DERIVATIVES_REQUEST:MessageType = new MessageType("PlaceOrderDerivativesRequest");
;
        public static const PLACE_ORDER_DERIVATIVES_CONFIRM_REQUEST:MessageType = new MessageType("PlaceOrderDerivativesConfirmRequest");
;
        public static const PLACE_ORDER_DERIVATIVES_RESPONSE:MessageType = new MessageType("PlaceOrderDerivativesResponse");
;
        public static const PLACE_ORDER_DERIVATIVES_WARN_RESPONSE:MessageType = new MessageType("PlaceOrderDerivativesWarnResponse");
;
        public static const PLACE_ORDER_DERIVATIVES_FAIL_RESPONSE:MessageType = new MessageType("PlaceOrderDerivativesFailResponse");
;
        public static const CANCEL_ORDER_DERIVATIVES_REQUEST:MessageType = new MessageType("CancelOrderDerivativesRequest");
;
        public static const CANCEL_ORDER_DERIVATIVES_RESPONSE:MessageType = new MessageType("CancelOrderDerivativesResponse");
;
        public static const CANCEL_ORDER_DERIVATIVES_FAIL_RESPONSE:MessageType = new MessageType("CancelOrderDerivativesFailResponse");
;
        public static const CHANGE_ORDER_DERIVATIVES_REQUEST:MessageType = new MessageType("ChangeOrderDerivativesRequest");
;
        public static const CHANGE_ORDER_DERIVATIVES_CONFIRM_REQUEST:MessageType = new MessageType("ChangeOrderDerivativesConfirmRequest");
;
        public static const CHANGE_ORDER_DERIVATIVES_RESPONSE:MessageType = new MessageType("ChangeOrderDerivativesResponse");
;
        public static const CHANGE_ORDER_DERIVATIVES_WARN_RESPONSE:MessageType = new MessageType("ChangeOrderDerivativesWarnResponse");
;
        public static const CHANGE_ORDER_DERIVATIVES_FAIL_RESPONSE:MessageType = new MessageType("ChangeOrderDerivativesFailResponse");
;
        public static const ORDER_STATUS_DERIVATIVES_REQUEST:MessageType = new MessageType("OrderStatusDerivativesRequest");
;
        public static const ORDER_STATUS_DERIVATIVES_RESPONSE:MessageType = new MessageType("OrderStatusDerivativesResponse");
;
        public static const ORDER_STATUS_DERIVATIVES_FAIL_RESPONSE:MessageType = new MessageType("OrderStatusDerivativesFailResponse");
;
        public static const ORDER_STATUS_ALL_DERIVATIVES_REQUEST:MessageType = new MessageType("OrderStatusAllDerivativesRequest");
;
        public static const ORDER_STATUS_ALL_DERIVATIVES_RESPONSE:MessageType = new MessageType("OrderStatusAllDerivativesResponse");
;
        public static const ORDER_STATUS_BY_NUMBER_DERIVAITVES_REQUEST:MessageType = new MessageType("OrderStatusByNumberDerivativesRequest");
;
        public static const ORDER_STATUS_BY_NUMBER_DERIVAITVES_RESPONSE:MessageType = new MessageType("OrderStatusByNumberDerivativesResponse");
;
        public static const ORDER_STATUS_BY_NUMBER_DERIVAITVES_FAIL_RESPONSE:MessageType = new MessageType("OrderStatusByNumberDerivativesFailResponse");
;
        public static const PORTFOLIO_DERIVATIVES_REQUEST:MessageType = new MessageType("PortfolioDerivativesRequest");
;
        public static const PORTFOLIO_DERIVATIVES_RESPONSE:MessageType = new MessageType("PortfolioDerivativesResponse");
;
        public static const PORTFOLIO_DERIVATIVES_FAIL_RESPONSE:MessageType = new MessageType("PortfolioDerivativesFailResponse");
;
        public static const ACCOUNT_INFO_DERIVATIVES_REQUEST:MessageType = new MessageType("AccountInfoDerivativesRequest");
;
        public static const ACCOUNT_INFO_DERIVATIVES_RESPONSE:MessageType = new MessageType("AccountInfoDerivativesResponse");
;
        public static const ACCOUNT_INFO_DERIVATIVES_FAIL_RESPONSE:MessageType = new MessageType("AccountInfoDerivativesFailResponse");
;
        public static const ACCOUNT_INFO_LONG_DERIVATIVES_REQUEST:MessageType = new MessageType("AccountInfoLongDerivativesRequest");
;
        public static const ACCOUNT_INFO_LONG_DERIVATIVES_RESPONSE:MessageType = new MessageType("AccountInfoLongDerivativesResponse");
;
        public static const ACCOUNT_INFO_LONG_DERIVATIVES_FAIL_RESPONSE:MessageType = new MessageType("AccountInfoLongDerivativesFailResponse");
;
        public static const DEAL_SUMMARY_DERIVATIVES_REQUEST:MessageType = new MessageType("DealSummaryDerivativesRequest");
;
        public static const DEAL_SUMMARY_DERIVATIVES_BY_INSTRUMENT_ID_REQUEST:MessageType = new MessageType("DealSummaryDerivativesByInstrumentIdRequest");
;
        public static const DEAL_SUMMARY_DERIVATIVES_BY_PRICE_REQUEST:MessageType = new MessageType("DealSummaryDerivativesByPriceRequest");
;
        public static const DEAL_SUMMARY_DERIVATIVES_RESPONSE:MessageType = new MessageType("DealSummaryDerivativesResponse");
;
        public static const DEAL_SUMMARY_DERIVATIVES_BY_INSTRUMENT_ID_RESPONSE:MessageType = new MessageType("DealSummaryDerivativesByInstrumentIdResponse");
;
        public static const DEAL_SUMMARY_DERIVATIVES_BY_PRICE_RESPONSE:MessageType = new MessageType("DealSummaryDerivativesByPriceResponse");
;
        public static const DEAL_SUMMARY_DERIVATIVES_FAIL_RESPONSE:MessageType = new MessageType("DealSummaryDerivativesFailResponse");
;
        public static const OUTSTANDING_POSITION_DERIVATIVES_REQUEST:MessageType = new MessageType("OutstandingPositionRequest");
;
        public static const OUTSTANDING_POSITION_DERIVATIVES_RESPONSE:MessageType = new MessageType("OutstandingPositionResponse");
;
        public static const OUTSTANDING_POSITION_DERIVATIVES_FAIL_RESPONSE:MessageType = new MessageType("OutstandingPositionFailResponse");
;
        public static const POSITION_CLOSING_DERIVATIVES_REQUEST:MessageType = new MessageType("PositionClosingRequest");
;
        public static const POSITION_CLOSING_DERIVATIVES_RESPONSE:MessageType = new MessageType("PositionClosingResponse");
;
        public static const POSITION_CLOSING_DERIVATIVES_FAIL_RESPONSE:MessageType = new MessageType("PositionClosingFailResponse");
;
        public static const PORTFOLIO_BY_ACCOUNT_RESPONSE:MessageType = new MessageType("PortfolioByAccountResponse");
;
        public static const ALL_PORTFOILIO_INSTRUMENT_LIST_RESPONSE:MessageType = new MessageType("AllPortfolioInstrumentListResponse");
;
        public static const DEAL_SUMMARY_BY_ACCOUNT_RESPONSE:MessageType = new MessageType("DealSummaryByAccountResponse");
;
        public static const ORDER_STATUS_CLICK_RESPONSE:MessageType = new MessageType("OrderStatusClick");
;
        public static const ORDER_STATUS_SEARCH_EQUITY_REQUEST:MessageType = new MessageType("OrderStatusSearchEquityRequest");
;
        public static const ORDER_STATUS_SEARCH_EQUITY_RESPONSE:MessageType = new MessageType("OrderStatusSearchEquityResponse");
;
        public static const ORDER_STATUS_SEARCH_DERIVATIVES_REQUEST:MessageType = new MessageType("OrderStatusSearchDerivativesRequest");
;
        public static const ORDER_STATUS_SEARCH_DERIVATIVES_RESPONSE:MessageType = new MessageType("OrderStatusSearchDerivativesResponse");
;
        public static const BLOCK_TRADE_INIT_REQUEST:MessageType = new MessageType("BlockTradeInitialRequest");
;
        public static const BLOCK_TRADE_INIT_RESPONSE:MessageType = new MessageType("BlockTradeInfoResponse");
;
        public static const BLOCK_TRADE_INFO_REQUEST:MessageType = new MessageType("BlockTradeInfoRequest");
;
        public static const BLOCK_TRADE_INFO_RESPONSE:MessageType = new MessageType("BlockTradeInitialResponse");
;
        public static const BLOCK_TRADE_TRTYPE_REQUEST:MessageType = new MessageType("BlockTradeTrTypeRequest");
;
        public static const BLOCK_TRADE_TRTYPE_RESPONSE:MessageType = new MessageType("BlockTradeTrTypeResponse");
;
        public static const BLOCK_TRADE_REQUEST:MessageType = new MessageType("BlockTradeRequest");
;
        public static const BLOCK_TRADE_CONFIRM_REQUEST:MessageType = new MessageType("BlockTradeConfirmRequest");
;
        public static const BLOCK_TRADE_RESPONSE:MessageType = new MessageType("BlockTradeResponse");
;
        public static const BLOCK_TRADE_WARN_RESPONSE:MessageType = new MessageType("BlockTradeWarnResponse");
;
        public static const BLOCK_TRADE_FAIL_RESPONSE:MessageType = new MessageType("BlockTradeFailResponse");
;
        public static const MULTIPLE:MessageType = new MessageType("Multiple");
;
        public static const MULTIPLE_REQUEST:MessageType = new MessageType("MultipleRequest");
;
        public static const MULTIPLE_FEED:MessageType = new MessageType("MultipleFeed");
;
        public static const MULTIPLE_MARKET_TICKER_FEED:MessageType = new MessageType("MultipleMarketTickerFeed");
;
        public static const MULTIPLE_RESPONSE:MessageType = new MessageType("MultipleResponse");
;
        public static const HTTP_FAIL:MessageType = new MessageType("HttpFail");
;
        public static const INVALID_PARSE:MessageType = new MessageType("InvalidParse");
;
        public static const FAIL_RESPONSE:MessageType = new MessageType("ResponseFail");
;
        public static const EXPIRE_DATE_REQUEST:MessageType = new MessageType("ExpireDateRequest");
;
        public static const EXPIRE_DATE_RESPONSE:MessageType = new MessageType("ExpireDateResponse");
;
        public static const OPTIONS_RECOMMEND_REQUEST:MessageType = new MessageType("OptionsRecommendRequest");
;
        public static const OPTIONS_RECOMMEND_RESPONSE:MessageType = new MessageType("OptionsRecommendResponse");
;
        public static const OPTIONS_HISTORICAL_CHART_REQUEST:MessageType = new MessageType("OptionsHistoricalChartRequest");
;
        public static const OPTIONS_HISTORICAL_CHART_RESPONSE:MessageType = new MessageType("OptionsHistoricalChartResponse");
;
        public static const OPTIONS_COMMISSION_REQUEST:MessageType = new MessageType("OptionsComissionRequest");
;
        public static const OPTIONS_COMMISSION_RESPONSE:MessageType = new MessageType("OptionsComissionResponse");
;
        public static const OPTIONS_COMMISSION_FAIL_RESPONSE:MessageType = new MessageType("OptionsComissionFailResponse");
;
        public static const OPTIONS_INSTRUMENT_LIST_REQUEST:MessageType = new MessageType("OptionsInstrumentListRequest");
;
        public static const OPTIONS_INSTRUMENT_LIST_RESPONSE:MessageType = new MessageType("OptionsInstrumentListResponse");
;
        public static const ACCOUNT_NAME_REQUEST:MessageType = new MessageType("AccountNameRequest");
;
        public static const ACCOUNT_NAME_RESPONSE:MessageType = new MessageType("AccountNameResponse");
;
        public static const FAVOURITE_ADD_REQUEST:MessageType = new MessageType("FavouriteAddRequest");
;
        public static const FAVOURITE_REMOVE_REQUEST:MessageType = new MessageType("FavouriteRemoveRequest");
;
        public static const FAVOURITE_UPDATE_REQUEST:MessageType = new MessageType("FavouriteUpdateRequest");
;
        public static const FAVOURITE_SWAP_REQUEST:MessageType = new MessageType("FavouriteSwapRequest");
;
        public static const FAVOURITE_RESPONSE:MessageType = new MessageType("FavouriteResponse");
;
        public static const SYNC_TIME_REQUEST:MessageType = new MessageType("SyncTimeRequest");
;
        public static const SYNC_TIME_RESPONSE:MessageType = new MessageType("SyncTimeResponse");
;
        public static const STATIC_DATA_REQUEST:MessageType = new MessageType("StaticDataRequest");
;
        public static const STATIC_DATA_RESPONSE:MessageType = new MessageType("StaticDataResponse");
;
        public static const CHANGE_ORDER_PRICE_REQUEST:MessageType = new MessageType("ChangeOrderPriceRequest");
;
        public static const CHANGE_ORDER_PRICE_RESPONSE:MessageType = new MessageType("ChangeOrderPriceResponse");
;
        public static const CHANGE_ORDER_PRICE_FAIL_RESPONSE:MessageType = new MessageType("ChangeOrderPriceFailResponse");
;
        public static const UPDATE_CONFIG_REQUEST:MessageType = new MessageType("UpdateConfigRequest");
;
        public static const UPDATE_CONFIG_RESPONSE:MessageType = new MessageType("UpdateConfigResponse");
;
        public static const FEED_STING_FAIL_RESPONSE:MessageType = new MessageType("FeedStringFailResponse");
;
        public static const NEWS_INFORMATION_REQUEST:MessageType = new MessageType("NewsInformationRequest");
;
        public static const NEWS_INFORMATION_RESPONSE:MessageType = new MessageType("NewsInformationResponse");
;
        public static const RESEARCH_REQUEST:MessageType = new MessageType("ResearchRequest");
;
        public static const RESEARCH_RESPONSE:MessageType = new MessageType("ResearchResponse");
;
        public static const OPPDAY_LIVE_REQUEST:MessageType = new MessageType("OppDayLiveRequest");
;
        public static const OPPDAY_LIVE_RESPONSE:MessageType = new MessageType("OppDayLiveResponse");
;
        public static const OPPDAY_ARCHIVE_REQUEST:MessageType = new MessageType("OppDayArchiveRequest");
;
        public static const OPPDAY_ARCHIVE_RESPONSE:MessageType = new MessageType("OppDayArchiveResponse");
;
        public static const OPPDAY_SEARCH_REQUEST:MessageType = new MessageType("OppDaySearchRequest");
;
        public static const OPPDAY_SEARCH_RESPONSE:MessageType = new MessageType("OppDaySearchResponse");
;
        public static const INSTRUMENT_ID_VALIDATOR_REQUEST:MessageType = new MessageType("instrumentIdValidatorRequest");
;
        public static const INSTRUMENT_ID_VALIDATOR_RESPONSE:MessageType = new MessageType("instrumentIdValidatorResponse");
;
        public static const PIN_CHECK_REQUEST:MessageType = new MessageType("PinCheckRequest");
;
        public static const PIN_CHECK_RESPONSE:MessageType = new MessageType("PinCheckResponse");
;
        public static const PAGE_STAT_REQUEST:MessageType = new MessageType("PageStatisticRequest");
;
        public static const ACCOUNT_LIST_HIERACHY_DERIVATIVES_REQUEST:MessageType = new MessageType("AccountListHierachyDerivativesRequest");
;
        public static const ACCOUNT_LIST_HIERACHY_DERIVATIVES_RESPONSE:MessageType = new MessageType("AccountListHierachyDerivativesResponse");
;
        public static const FAST_QUOTE_DERIVATIVES_REQUEST:MessageType = new MessageType("FastQuoteDerivativesRequest");
;
        public static const FAST_QUOTE_DERIVATIVES_RESPONSE:MessageType = new MessageType("FastQuoteDerivativesResponse");
;
        public static const PLACE_ORDER_DERIVATIVES_REQUEST_NEW_TRADING:MessageType = new MessageType("PlaceOrderDerivativesRequest");
;
        public static const PLACE_ORDER_DERIVATIVES_CONFIRM_REQUEST_NEW_TRADING:MessageType = new MessageType("PlaceOrderDerivativesConfirmRequest");
;
        public static const MULTIPLE_ORDER_SORT_MARKETCAP_EQUITY_REQUEST:MessageType = new MessageType("MultipleOrderSortMarketCapEquityRequest");
;
        public static const MULTIPLE_ORDER_CALCULATE_EQUITY_REQUEST:MessageType = new MessageType("MultipleOrderCalculateEquityRequest");
;
        public static const MULTIPLE_ORDER_GET_LAST_EQUITY_REQUEST:MessageType = new MessageType("MultipleOrderGetLastEquityRequest");
;
        public static const MULTIPLE_ORDER_GET_PERCENT_EQUITY_REQUEST:MessageType = new MessageType("MultipleOrderGetPercentEquityRequest");
;
        public static const MULTIPLE_ORDER_EQUITY_RESPONSE:MessageType = new MessageType("MultipleOrderEquityResponse");
;
        public static const MULTIPLE_ORDER_EXTRACT_EQUITY_REQUEST:MessageType = new MessageType("MultipleOrderExtractEquityRequest");
;
        public static const MULTIPLE_ORDER_EQUITY_WARN_RESPONSE:MessageType = new MessageType("MultipleOrderEquityWarnResponse");
;
        public static const MULTIPLE_ORDER_GET_LAST_DERIVATIVES_REQUEST:MessageType = new MessageType("MultipleOrderGetLastDerivativesRequest");
;
        public static const MULTIPLE_ORDER_GET_LAST_DERIVATIVES_RESPONSE:MessageType = new MessageType("MultipleOrderGetLastDerivativesResponse");
;
        public static const MULTIPLE_ORDER_EXTRACT_DERIVATIVES_REQUEST:MessageType = new MessageType("MultipleOrderExtractDerivativesRequest");
;
        public static const MULTIPLE_ORDER_EXTRACT_DERIVATIVES_RESPONSE:MessageType = new MessageType("MultipleOrderExtractDerivativesResponse");
;
        public static const MULTIPLE_ORDER_DERIVATIVES_WARN_RESPONSE:MessageType = new MessageType("MultipleOrderDerivativesWarnResponse");
;
        public static const PLACE_MULTIPLE_ORDER_EQUITY_REQUEST:MessageType = new MessageType("MultiplePlaceOrderEquityRequest");
;
        public static const PLACE_MULTIPLE_ORDER_EQUITY_RESPONSE:MessageType = new MessageType("MultiplePlaceOrderEquityResponse");
;
        public static const PLACE_MULTIPLE_ORDER_DERIVATIVES_REQUEST:MessageType = new MessageType("MultiplePlaceOrderDerivativesRequest");
;
        public static const PLACE_MULTIPLE_ORDER_DERIVATIVES_RESPONSE:MessageType = new MessageType("MultiplePlaceOrderDerivativesResponse");
;
        public static const NOTIFICATION_STARTUP_REQUEST:MessageType = new MessageType("NotificationStartupRequest");
;
        public static const WIDGET_TEMPLATE_REQUEST:MessageType = new MessageType("WidgetTemplateRequest");
;
        public static const WIDGET_TEMPLATE_RESPONSE:MessageType = new MessageType("WidgetTemplateResponse");
;
        public static const MARGIN_STOCK_REQUEST:MessageType = new MessageType("MarginStockRequest");
;
        public static const MARGIN_STOCK_RESPONSE:MessageType = new MessageType("MarginStockResponse");
;
        public static const SOCKET_STATUS:MessageType = new MessageType("SocketStatus");
;
        public static const INITIAL_STATUS:MessageType = new MessageType("InitialStatus");
;
        public static const FEED_STATUS:MessageType = new MessageType("FeedStatus");
;
        public static const PAGE_STATUS:MessageType = new MessageType("PageStatus");
;
        public static const ACCOUNT_CHANGE:MessageType = new MessageType("AccountChange");
;
        public static const FEED_MANAGER_STATUS:MessageType = new MessageType("FeedManagerStatus");
;
        public static const NOTIFICATION:MessageType = new MessageType("Notification");
;
        public static const WIDGET_LOADED:MessageType = new MessageType("WidgetLoaded");
;
        public static const NOTIFY_PLACE_ORDER:MessageType = new MessageType("NotifyPlaceOrder");
;
        public static const CONFIG_CHANGE:MessageType = new MessageType("ConfigChange");
;
        public static const NOTIFY_PLACE_INSTRUMENT_ID:MessageType = new MessageType("NotifyPlaceInstrumentId");
;
        public static const WIDGET_PAGE_STATUS:MessageType = new MessageType("WidgetPageStatus");
;
        public static const KEYBOARD_SHORTCUT:MessageType = new MessageType("KeyboardShortcut");
;
        public static const CHANGE_LANGUAGE:MessageType = new MessageType("ChangeLanguage");
;
        public static const POPUP_STATE_CHANGE:MessageType = new MessageType("PopupState");
;
        public static const HTML_HOLDER_INSTRUMENT_CHANGE:MessageType = new MessageType("HtmlHolderInstrumentChange");
;
        public static const THEME_CHANGE:MessageType = new MessageType("ThemeChange");
;
        public static const TISCO_SETTLE_INFO_REQUEST:MessageType = new MessageType("TiscoSettleInfoRequest");
;
        public static const TISCO_SETTLE_INFO_RESPONSE:MessageType = new MessageType("TiscoSettleInfoResponse");
;
        public static const TISCO_STOCK_INFO_REQUEST:MessageType = new MessageType("TiscoStockInfoRequest");
;
        public static const TISCO_STOCK_INFO_RESPONSE:MessageType = new MessageType("TiscoStockInfoResponse");
;
        public static const TISCO_VOL_FOCUS_LIST_REQUEST:MessageType = new MessageType("TiscoVolFocusListRequest");
;
        public static const TISCO_VOL_FOCUS_LIST_RESPONSE:MessageType = new MessageType("TiscoVolFocusListResponse");
;
        public static const DBSV_TECHNICAL_INSIGHT_REQUEST:MessageType = new MessageType("DBSVTechnicalInsightRequest");
;
        public static const DBSV_TECHNICAL_INSIGHT_RESPONSE:MessageType = new MessageType("DBSVTechnicalInsightResponse");
;
        public static const DBSV_VALUE_ANALYZER_REQUEST:MessageType = new MessageType("DBSVValueAnalyzerRequest");
;
        public static const DBSV_VALUE_ANALYZER_RESPONSE:MessageType = new MessageType("DBSVValueAnalyzerResponse");
;
        public static const DBSV_SUPPORT_AND_RESISTANCE_REQUEST:MessageType = new MessageType("DBSVSupportAndResistanceRequest");
;
        public static const DBSV_SUPPORT_AND_RESISTANCE_RESPONSE:MessageType = new MessageType("DBSVSupportAndResistanceResponse");
;
        public static const DBSV_BULLISH_BEARISH_SPECIFIC_TAB_REQUEST:MessageType = new MessageType("DBSVBullishBearishSpecificTabRequest");
;
        public static const DBSV_BULLISH_BEARISH_SPECIFIC_TAB_RESPONSE:MessageType = new MessageType("DBSVBullishBearishSpecificTabResponse");
;
        public static const DBSV_START_DATE_END_DATE_REQUEST:MessageType = new MessageType("DBSVStartDateEndDateRequest");
;
        public static const DBSV_START_DATE_END_DATE_RESPONSE:MessageType = new MessageType("DBSVStartDateEndDateResponse");
;

        protected var _name:String;
        protected var _isRawMessage:Boolean;

        public function MessageType(name:String, isRawMessage:Boolean=false){
            super();
            this._name = name;
            this._isRawMessage = isRawMessage;
        }
        public function get name():String{
            return (this._name);
        }
        public function get isRawMessage():Boolean{
            return (this._isRawMessage);
        }
        public function toString():String{
            return ((("MessageType:[name=" + this._name) + "]"));
        }
        public function isStubRequest():Boolean{
            return ((this == STUB_REQUEST));
        }
        public function isStubResponse():Boolean{
            return ((this == STUB_RESPONSE));
        }
        public function isStubFeed():Boolean{
            return ((this == STUB_FEED));
        }
        public function isBinaryResponse():Boolean{
            return ((this == BINARY_RESPONSE));
        }
        public function isBinaryFeed():Boolean{
            return ((this == BINARY_FEED));
        }
        public function isStringResponse():Boolean{
            return ((this == STRING_RESPONSE));
        }
        public function isStringFeed():Boolean{
            return ((this == STRING_FEED));
        }
        public function isStubRawResponse():Boolean{
            return ((this == STUB_RAW_RESPONSE));
        }
        public function isStubRawFeed():Boolean{
            return ((this == STUB_RAW_FEED));
        }
        public function isSocketStatus():Boolean{
            return ((this == SOCKET_STATUS));
        }
        public function isGenerateKeyRequest():Boolean{
            return ((this == GENERATE_KEY_REQUEST));
        }
        public function isGenerateKeyResponse():Boolean{
            return ((this == GENERATE_KEY_RESPONSE));
        }
        public function isGenerateKeyFailResponse():Boolean{
            return ((this == GENERATE_KEY_FAIL_RESPONSE));
        }
        public function isMarketTickerRequest():Boolean{
            return ((this == MARKET_TICKER_REQUEST));
        }
        public function isMarketTickerFeed():Boolean{
            return ((this == MARKET_TICKER_FEED));
        }
        public function isMultipleRequest():Boolean{
            return ((this == MULTIPLE_REQUEST));
        }
        public function isInfoRequest():Boolean{
            return ((this == INFO_REQUEST));
        }
        public function isInfoFeed():Boolean{
            return ((this == INFO_FEED));
        }
        public function isInstrumentTickerRequest():Boolean{
            return ((this == INSTRUMENT_TICKER_REQUEST));
        }
        public function isInstrumentTickerFeed():Boolean{
            return ((this == INSTRUMENT_TICKER_FEED));
        }
        public function isInstrumentTickerOddLotFeed():Boolean{
            return ((this == INSTRUMENT_TICKER_ODDLOT_FEED));
        }
        public function isFeedStatus():Boolean{
            return ((this == FEED_STATUS));
        }
        public function isPlaceOrderEquityRequest():Boolean{
            return ((this == PLACE_ORDER_EQUITY_REQUEST));
        }
        public function isPlaceOrderEquityResponse():Boolean{
            return ((this == PLACE_ORDER_EQUITY_RESPONSE));
        }
        public function isCancelOrderEquityRequest():Boolean{
            return ((this == CANCEL_ORDER_EQUITY_REQUEST));
        }
        public function isCancelOrderEquityResponse():Boolean{
            return ((this == CANCEL_ORDER_EQUITY_RESPONSE));
        }
        public function isHttpFailedResponse():Boolean{
            return ((this == HTTP_FAIL));
        }
        public function isInvalidParse():Boolean{
            return ((this == INVALID_PARSE));
        }
        public function isPlaceOrderDerivativesRequest():Boolean{
            return ((this == PLACE_ORDER_DERIVATIVES_REQUEST));
        }
        public function isPlaceOrderDerivativesConfirmRequest():Boolean{
            return ((this == PLACE_ORDER_DERIVATIVES_CONFIRM_REQUEST));
        }
        public function isPlaceOrderDerivativesResponse():Boolean{
            return ((this == PLACE_ORDER_DERIVATIVES_RESPONSE));
        }
        public function isCancelOrderDerivativesRequest():Boolean{
            return ((this == CANCEL_ORDER_DERIVATIVES_REQUEST));
        }
        public function isCancelOrderDerivativesResponse():Boolean{
            return ((this == CANCEL_ORDER_DERIVATIVES_RESPONSE));
        }
        public function isOrderStausEquityRequest():Boolean{
            return ((this == ORDER_STATUS_EQUITY_REQUEST));
        }
        public function isAccountInfoEquityRequest():Boolean{
            return ((this == ACCOUNT_INFO_EQUITY_REQUEST));
        }
        public function isSnapshotFeed():Boolean{
            return ((this == SNAPSHOT_FEED));
        }
        public function isUserCheckRequest():Boolean{
            return ((this == USER_CHECK_REQUEST));
        }
        public function isPortfolioEquityRequest():Boolean{
            return ((this == PORTFOLIO_EQUITY_REQUEST));
        }
        public function isPortfolioDerivativesRequest():Boolean{
            return ((this == PORTFOLIO_DERIVATIVES_REQUEST));
        }
        public function isDealSummaryEquityRequest():Boolean{
            return ((this == DEAL_SUMMARY_EQUITY_REQUEST));
        }
        public function isDealSummaryDerivativesRequest():Boolean{
            return ((this == DEAL_SUMMARY_DERIVATIVES_REQUEST));
        }
        public function isOrderStausDerivativesRequest():Boolean{
            return ((this == ORDER_STATUS_DERIVATIVES_REQUEST));
        }
        public function isAccountInfoDerivativesRequest():Boolean{
            return ((this == ACCOUNT_INFO_DERIVATIVES_REQUEST));
        }
        public function isOrderStatusByNumberDerivativesRequest():Boolean{
            return ((this == ORDER_STATUS_BY_NUMBER_DERIVAITVES_REQUEST));
        }
        public function isMultipleTickerFeed():Boolean{
            return ((this == MULTIPLE_MARKET_TICKER_FEED));
        }
        public function isPlaceOrderEquityConfirmRequest():Boolean{
            return ((this == PLACE_ORDER_EQUITY_CONFIRM_REQUEST));
        }
        public function isOrderStatusByNumberEquityRequest():Boolean{
            return ((this == ORDER_STATUS_BY_NUMBER_EQUITY_REQUEST));
        }
        public function isDealSummaryDerivativesByPriceRequest():Boolean{
            return ((this == DEAL_SUMMARY_DERIVATIVES_BY_PRICE_REQUEST));
        }
        public function isDealSummaryDerivativesByInstrumentIdRequest():Boolean{
            return ((this == DEAL_SUMMARY_DERIVATIVES_BY_INSTRUMENT_ID_REQUEST));
        }
        public function isObjectResponse():Boolean{
            return ((this == OBJECT_RESPONSE));
        }
        public function isOutStandingPositionDerivativesRequest():Boolean{
            return ((this == OUTSTANDING_POSITION_DERIVATIVES_REQUEST));
        }
        public function isPositionClosingDerivativesRequest():Boolean{
            return ((this == POSITION_CLOSING_DERIVATIVES_REQUEST));
        }
        public function isAccountNameRequest():Boolean{
            return ((this == ACCOUNT_NAME_REQUEST));
        }
        public function isOrderStatusAllDerivativesRequest():Boolean{
            return ((this == ORDER_STATUS_ALL_DERIVATIVES_REQUEST));
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class FeedManagerState {

        public static const NO_STATE:FeedManagerState = new FeedManagerState(FeedState.NO_STATE, System.NO_SYSTEM);
;
        public static const INITIAL_PUSH_PRIMARY:FeedManagerState = new FeedManagerState(FeedState.INITIAL_PUSH, System.REALTIME_PRIMARY);
;
        public static const PUSH_PRIMARY:FeedManagerState = new FeedManagerState(FeedState.PUSH, System.REALTIME_PRIMARY);
;
        public static const PULL_PRIMARY:FeedManagerState = new FeedManagerState(FeedState.PULL, System.REALTIME_PRIMARY);
;
        public static const FORCED_PULL_PRIMARY:FeedManagerState = new FeedManagerState(FeedState.FORCED_PULL, System.REALTIME_PRIMARY);
;
        public static const INITIAL_PUSH_SECONDARY:FeedManagerState = new FeedManagerState(FeedState.INITIAL_PUSH, System.REALTIME_SECONDARY);
;
        public static const PUSH_SECONDARY:FeedManagerState = new FeedManagerState(FeedState.PUSH, System.REALTIME_SECONDARY);
;
        public static const PULL_SECONDARY:FeedManagerState = new FeedManagerState(FeedState.PULL, System.REALTIME_SECONDARY);
;
        public static const FORCED_PULL_SECONDARY:FeedManagerState = new FeedManagerState(FeedState.FORCED_PULL, System.REALTIME_SECONDARY);
;
        public static const BUFFER_PRIMARY:FeedManagerState = new FeedManagerState(FeedState.BUFFER, System.REALTIME_PRIMARY);
;
        public static const BUFFER_SECONDARY:FeedManagerState = new FeedManagerState(FeedState.BUFFER, System.REALTIME_SECONDARY);
;
        public static const OFFLINE:FeedManagerState = new FeedManagerState(FeedState.OFFLINE, System.NO_SYSTEM);
;

        protected var _state:FeedState;
        protected var _tier:System;

        public function FeedManagerState(state:FeedState, tier:System){
            super();
            this._state = state;
            this._tier = tier;
        }
        public function get state():FeedState{
            return (this._state);
        }
        public function get tier():System{
            return (this._tier);
        }
        public function isInitialPushPrimary():Boolean{
            return ((this == INITIAL_PUSH_PRIMARY));
        }
        public function isPush():Boolean{
            return (((this.isPushPrimary()) || (this.isPushSecondary())));
        }
        public function isPull():Boolean{
            return (((((((this.isPullPrimary()) || (this.isPullSecondary()))) || (this.isForcedPullPrimary()))) || (this.isForcedPullSecondary())));
        }
        public function isPushPrimary():Boolean{
            return ((this == PUSH_PRIMARY));
        }
        public function isPullPrimary():Boolean{
            return ((this == PULL_PRIMARY));
        }
        public function isForcedPullPrimary():Boolean{
            return ((this == FORCED_PULL_PRIMARY));
        }
        public function isInitialPushSecondary():Boolean{
            return ((this == INITIAL_PUSH_SECONDARY));
        }
        public function isPushSecondary():Boolean{
            return ((this == PUSH_SECONDARY));
        }
        public function isPullSecondary():Boolean{
            return ((this == PULL_SECONDARY));
        }
        public function isForcedPullSecondary():Boolean{
            return ((this == FORCED_PULL_SECONDARY));
        }
        public function isBufferSecondary():Boolean{
            return ((this == BUFFER_SECONDARY));
        }
        public function isOffline():Boolean{
            return ((this == OFFLINE));
        }
        public function toString():String{
            return ((((("FeedManagerState[State: " + this.state) + ", Tier: ") + this.tier) + "]"));
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.net.*;

    public class UrlPath {

        public static var ORDER_SEND_EQUITY:UrlPath = new UrlPath("OrderSendEquity", System.EQUITY, URLLoaderDataFormat.TEXT, MessageSide.RESPONSE, MessageFormat.ORDER_EQUITY, false);
;
        public static var ORDER_DATA_EQUITY:UrlPath = new UrlPath("OrderDataEquity", System.EQUITY, URLLoaderDataFormat.TEXT, MessageSide.RESPONSE, MessageFormat.ORDER_EQUITY, false);
;
        public static var ORDER_SEND_DERIVATIVES:UrlPath = new UrlPath("OrderSendDerivatives", System.DERIV, URLLoaderDataFormat.TEXT, MessageSide.RESPONSE, MessageFormat.ORDER_DERIVATIVES, false);
;
        public static var ORDER_DATA_DERIVATIVES:UrlPath = new UrlPath("OrderDataDerivatives", System.DERIV, URLLoaderDataFormat.TEXT, MessageSide.RESPONSE, MessageFormat.ORDER_DERIVATIVES);
;
        public static var GENERATE_KEY:UrlPath = new UrlPath("GenerateKey", System.REALTIME, URLLoaderDataFormat.TEXT, MessageSide.RESPONSE, MessageFormat.STRING_GENERATE_KEY, false);
;
        public static var DATA_PROVIDER:UrlPath = new UrlPath("DataProvider", System.REALTIME, URLLoaderDataFormat.TEXT, MessageSide.RESPONSE, MessageFormat.DISPATCHER_STRING, false);
;
        public static var DATA_PROVIDER_JSON:UrlPath = new UrlPath("DataProviderAjax", System.REALTIME, StreamingURLLoaderFormat.JSON_STRING, MessageSide.RESPONSE, MessageFormat.DATA_PROVIDER_JSON, false);
;
        public static var DATA_PROVIDER_BINARY:UrlPath = new UrlPath("DataProviderBinary", System.REALTIME, URLLoaderDataFormat.BINARY, MessageSide.FEED, MessageFormat.DISPATCHER_BINARY_PULL, true, true);
;
        public static var DATA_PROVIDER_BINARY_RESPONSE:UrlPath = new UrlPath("DataProviderBinaryResponse", System.REALTIME, URLLoaderDataFormat.BINARY, MessageSide.RESPONSE, MessageFormat.DISPATCHER_BINARY, false, true);
;
        public static var REGISTER_ORDER_PUSH:UrlPath = new UrlPath("RegisterOrderPush", System.REALTIME, URLLoaderDataFormat.TEXT, MessageSide.RESPONSE, MessageFormat.EMPTY);
;
        public static var FAVOURITE:UrlPath = new UrlPath("Favourite", System.REALTIME, URLLoaderDataFormat.TEXT, MessageSide.RESPONSE, MessageFormat.DISPATCHER_STRING);
;
        public static var SETTING:UrlPath = new UrlPath("Setting", System.REALTIME, URLLoaderDataFormat.TEXT, MessageSide.RESPONSE, MessageFormat.DISPATCHER_STRING);
;
        public static var NEWS:UrlPath = new UrlPath("News", System.REALTIME, StreamingURLLoaderFormat.JSON_STRING_TIS_620, MessageSide.RESPONSE, MessageFormat.DATA_PROVIDER_JSON, false);
;
        public static var TEMPLATE:UrlPath = new UrlPath("Template", System.REALTIME, URLLoaderDataFormat.TEXT, MessageSide.RESPONSE, MessageFormat.DISPATCHER_STRING);
;
        public static var OPTIONS_WIZARD_DATA_PROVIDER_STRING:UrlPath = new UrlPath("OptionsWizardDataProviderString", System.REALTIME, URLLoaderDataFormat.TEXT, MessageSide.RESPONSE, MessageFormat.DISPATCHER_STRING, false);
;
        public static var OPTIONS_WIZARD_RECOMMEND:UrlPath = new UrlPath("OptionsWizardRecommend", System.REALTIME, URLLoaderDataFormat.TEXT, MessageSide.RESPONSE, MessageFormat.DISPATCHER_STRING, false);
;
        public static var OPTIONS_WIZARD_DATA_PROVIDER_BINARY:UrlPath = new UrlPath("OptionsWizardDataProviderBinary", System.REALTIME, URLLoaderDataFormat.BINARY, MessageSide.RESPONSE, MessageFormat.DISPATCHER_BINARY, false, true);
;
        public static var OPTIONS_COMMISSION:UrlPath = new UrlPath("OptionsWizardDataProviderBinary", System.DERIV, URLLoaderDataFormat.TEXT, MessageSide.RESPONSE, MessageFormat.STRING_OPTIONS_COMM, false);
;
        public static var ACCOUNT_NAME:UrlPath = new UrlPath("AccountName", System.REALTIME, URLLoaderDataFormat.TEXT, MessageSide.RESPONSE, MessageFormat.ACCOUNT_NAME, false);
;
        public static var ACCOUNT_LIST:UrlPath = new UrlPath("AccountList", System.EQUITY, StreamingURLLoaderFormat.JSON_STRING, MessageSide.RESPONSE, MessageFormat.ACCOUNT_LIST, false);
;
        public static var SYNC_TIME:UrlPath = new UrlPath("SyncTime", System.REALTIME, URLLoaderDataFormat.TEXT, MessageSide.RESPONSE, MessageFormat.SYNC_TIME, false);
;
        public static var STUB:UrlPath = new UrlPath("Stub", System.EQUITY, URLLoaderDataFormat.TEXT, MessageSide.RESPONSE, MessageFormat.STUB);
;
        public static var USER_CHECK:UrlPath = new UrlPath("UserCheck", System.REALTIME, URLLoaderDataFormat.TEXT, MessageSide.RESPONSE, MessageFormat.USER_CHECK);
;
        public static var STATIC_DATA:UrlPath = new UrlPath("StaticData", System.REALTIME, URLLoaderDataFormat.TEXT, MessageSide.RESPONSE, MessageFormat.STATIC_DATA);
;
        public static var RESEARCH:UrlPath = new UrlPath("Research", System.RESEARCH, StreamingURLLoaderFormat.TEXT_UTF_8, MessageSide.RESPONSE, MessageFormat.DISPATCHER_STRING);
;
        public static var INSTRUMENT_ID_VALIDATOR:UrlPath = new UrlPath("InstrumentIdValidator", System.REALTIME, StreamingURLLoaderFormat.TEXT_TIS_620, MessageSide.RESPONSE, MessageFormat.INSTRUMENT_ID_VALIDATOR);
;
        public static var OPPDAY_LIVE:UrlPath = new UrlPath("OppDayLive", System.SET, URLLoaderDataFormat.BINARY, MessageSide.RESPONSE, MessageFormat.OPPDAY, false, false);
;
        public static var OPPDAY_ARCHIVE:UrlPath = new UrlPath("OppDayArchive", System.SET, URLLoaderDataFormat.BINARY, MessageSide.RESPONSE, MessageFormat.OPPDAY, false, false);
;
        public static var OPPDAY_SEARCH:UrlPath = new UrlPath("OppDaySearch", System.SET, URLLoaderDataFormat.BINARY, MessageSide.RESPONSE, MessageFormat.OPPDAY, false, false);
;
        public static var ORDER_DATA_AJAX_EQUITY:UrlPath = new UrlPath("OrderStatusSearchEquity", System.EQUITY, StreamingURLLoaderFormat.JSON_STRING, MessageSide.RESPONSE, MessageFormat.ORDER_AJAX_EQUITY, false);
;
        public static var ORDER_DATA_AJAX_DERIVATIVES:UrlPath = new UrlPath("OrderStatusSearchDerivatives", System.DERIV, StreamingURLLoaderFormat.JSON_STRING, MessageSide.RESPONSE, MessageFormat.ORDER_AJAX_DERIVATIVES, false);
;
        public static var ACCOUNT_INFO_JSON_EQUITY:UrlPath = new UrlPath("AccountInfoJsonEquity", System.EQUITY, StreamingURLLoaderFormat.JSON_STRING, MessageSide.RESPONSE, MessageFormat.ACCOUNT_INFO_JSON, false);
;
        public static var ACCOUNT_INFO_JSON_DERIVATIVES:UrlPath = new UrlPath("AccountInfoJsonDerivatives", System.DERIV, StreamingURLLoaderFormat.JSON_STRING_TIS_620, MessageSide.RESPONSE, MessageFormat.ACCOUNT_INFO_JSON, false);
;
        public static var CHANGE_EQUITY:UrlPath = new UrlPath("ChnageOrderEquity", System.EQUITY, StreamingURLLoaderFormat.JSON_STRING, MessageSide.RESPONSE, MessageFormat.CHANGE_EQUITY, false);
;
        public static var CHANGE_DERIVATIVES:UrlPath = new UrlPath("ChnageOrderDerivatives", System.DERIV, StreamingURLLoaderFormat.JSON_STRING, MessageSide.RESPONSE, MessageFormat.CHANGE_DERIVATIVES, false);
;
        public static var PAGE_STAT:UrlPath = new UrlPath("PageStatistic", System.REALTIME, StreamingURLLoaderFormat.TEXT_UTF_8, MessageSide.RESPONSE, MessageFormat.EMPTY, false);
;
        public static var BLOCK_TRADE:UrlPath = new UrlPath("BlockTrade", System.DERIV, StreamingURLLoaderFormat.JSON_STRING, MessageSide.RESPONSE, MessageFormat.BLOCK_TRADE, false);
;
        public static var BLOCK_TRADE_INFO:UrlPath = new UrlPath("BlockTradeInfo", System.DERIV, StreamingURLLoaderFormat.JSON_STRING, MessageSide.RESPONSE, MessageFormat.BLOCK_TRADE_INFO, false);
;
        public static var ACCOUNT_LIST_HIERACHY_DERIVATIVES:UrlPath = new UrlPath("AccountListHierachyDerivatives", System.DERIV, StreamingURLLoaderFormat.JSON_STRING, MessageSide.RESPONSE, MessageFormat.ACCOUNT_LIST_HIERACHY_DERIVAITVES, false);
;
        public static var FAST_QUOTE_DERIVATIVES:UrlPath = new UrlPath("FastQuoteDerivatives", System.DERIV, StreamingURLLoaderFormat.JSON_STRING, MessageSide.RESPONSE, MessageFormat.FAST_QUOTE_DERIVATIVES, false);
;
        public static var MULTIPLE_ORDER_FAVOURITE_EQUITY:UrlPath = new UrlPath("MultipleOrderFavouriteEquity", System.EQUITY, StreamingURLLoaderFormat.TEXT_TIS_620, MessageSide.RESPONSE, MessageFormat.MULTIPLE_ORDER_FAVOURITE_EQUITY, false);
;
        public static var MULTIPLE_ORDER_EXTRACT_EQUITY:UrlPath = new UrlPath("MultipleOrderExtractEquity", System.EQUITY, StreamingURLLoaderFormat.TEXT_TIS_620, MessageSide.RESPONSE, MessageFormat.MULTIPLE_ORDER_FAVOURITE_EQUITY, false);
;
        public static var MULTIPLE_ORDER_EQUITY:UrlPath = new UrlPath("MultipleOrderEquity", System.EQUITY, StreamingURLLoaderFormat.TEXT_TIS_620, MessageSide.RESPONSE, MessageFormat.MULTIPLE_ORDER_EQUITY, false);
;
        public static var MULTIPLE_ORDER_FAVOURITE_DERIVATIVES:UrlPath = new UrlPath("MultipleOrderFavouriteDerivatives", System.DERIV, StreamingURLLoaderFormat.TEXT_TIS_620, MessageSide.RESPONSE, MessageFormat.MULTIPLE_ORDER_FAVOURITE_DERIVATIVES, false);
;
        public static var MULTIPLE_ORDER_EXTRACT_DERIVATIVES:UrlPath = new UrlPath("MultipleOrderExtractDerivatives", System.DERIV, StreamingURLLoaderFormat.TEXT_TIS_620, MessageSide.RESPONSE, MessageFormat.MULTIPLE_ORDER_FAVOURITE_DERIVATIVES, false);
;
        public static var MULTIPLE_ORDER_DERIVATIVES:UrlPath = new UrlPath("MultipleOrderDerivatives", System.DERIV, StreamingURLLoaderFormat.TEXT_TIS_620, MessageSide.RESPONSE, MessageFormat.MULTIPLE_ORDER_DERIVATIVES, false);
;
        public static var NOTIFICATION_STARTUP:UrlPath = new UrlPath("NotificationStartup", System.EQUITY, URLLoaderDataFormat.BINARY, MessageSide.FEED, MessageFormat.DISPATCHER_BINARY_PULL, false, true);
;
        public static var MARGIN_STOCK:UrlPath = new UrlPath("MarginStock", System.EQUITY, URLLoaderDataFormat.TEXT, MessageSide.RESPONSE, MessageFormat.DISPATCHER_STRING);
;
        public static var TISCO_CUSTOMIZED_EQUITY:UrlPath = new UrlPath("TiscoCustomizedEquity", System.EQUITY, StreamingURLLoaderFormat.JSON_STRING, MessageSide.RESPONSE, MessageFormat.TISCO_JSON);
;
        public static var TISCO_CUSTOMIZED_REALTIME:UrlPath = new UrlPath("TiscoCustomizedRealtime", System.REALTIME, StreamingURLLoaderFormat.JSON_STRING, MessageSide.RESPONSE, MessageFormat.TISCO_JSON);
;
        public static var DBSV_CUSTOMIZED_TECHNICAL_INSIGHT:UrlPath = new UrlPath("DBSVCustomizedTechnicalInsight", System.EXTERNAL, StreamingURLLoaderFormat.TEXT_UTF_8, MessageSide.RESPONSE, MessageFormat.DBSV_XML);
;
        public static var DBSV_CUSTOMIZED_VALUE_ANALYZER:UrlPath = new UrlPath("DBSVCustomizedValueAnalyzer", System.EXTERNAL, StreamingURLLoaderFormat.TEXT_UTF_8, MessageSide.RESPONSE, MessageFormat.DBSV_XML);
;
        public static var DBSV_CUSTOMIZED_SUPPORT_AND_RESISTANCE:UrlPath = new UrlPath("DBSVCustomizedSupportAndResistance", System.EXTERNAL, StreamingURLLoaderFormat.TEXT_UTF_8, MessageSide.RESPONSE, MessageFormat.DBSV_XML);
;
        public static var DBSV_BULLISH_BEARISH_SPECIFIC_TAB:UrlPath = new UrlPath("DBSVBullishBearishSpecificTab", System.EXTERNAL, StreamingURLLoaderFormat.JSON_STRING, MessageSide.RESPONSE, MessageFormat.DBSV_JSON);
;
        public static var DBSV_CUSTOMIZED_START_DATE_END_DATE:UrlPath = new UrlPath("DBSVStartDateEndDate", System.EXTERNAL, StreamingURLLoaderFormat.TEXT_UTF_8, MessageSide.RESPONSE, MessageFormat.DBSV_XML);
;
        public static var DBSV_CUSTOMIZED_CHART_API:UrlPath = new UrlPath("DBSVChartApi", System.EXTERNAL, StreamingURLLoaderFormat.TEXT_UTF_8, MessageSide.RESPONSE, MessageFormat.DBSV_XML);
;

        protected var _system:System;
        protected var _path:String;
        protected var _name:String;
        protected var _dataFormat:String;
        protected var _messageFormat:MessageFormat;
        protected var _targetSide:MessageSide;
        protected var _isSingleRequest:Boolean;
        protected var _isSeperateBinary:Boolean;

        public function UrlPath(name:String, system:System, dataFormat:String, targetSide:MessageSide, messageFormat:MessageFormat, iSingleRequest:Boolean=true, isSeperateBinary:Boolean=false, path:String=""){
            super();
            this._system = system;
            this._name = name;
            this._dataFormat = dataFormat;
            this._isSingleRequest = iSingleRequest;
            this._targetSide = targetSide;
            this._path = path;
            this._messageFormat = messageFormat;
            this._isSeperateBinary = isSeperateBinary;
        }
        public function get system():System{
            return (this._system);
        }
        public function get path():String{
            return (this._path);
        }
        public function set path(value:String):void{
            this._path = value;
        }
        public function get name():String{
            return (this._name);
        }
        public function get isSingleRequest():Boolean{
            return (this._isSingleRequest);
        }
        public function get dataFormat():String{
            return (this._dataFormat);
        }
        public function get targetSide():MessageSide{
            return (this._targetSide);
        }
        public function get messageFormat():MessageFormat{
            return (this._messageFormat);
        }
        public function get isSeperateBinary():Boolean{
            return (this._isSeperateBinary);
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class OrderSide {

        public static const NO_SIDE:OrderSide = new OrderSide("No Side", -1, "");
;
        public static const ALL_SIDE:OrderSide = new OrderSide("All", -1, "A");
;
        public static const BUY:OrderSide = new OrderSide("Buy", 0, "B");
;
        public static const SELL:OrderSide = new OrderSide("Sell", 1, "S");
;
        public static const SHORT:OrderSide = new OrderSide("Short", 2, "H");
;
        public static const COVER:OrderSide = new OrderSide("Cover", 3, "C");
;

        public static var ALL:Array = new Array(NO_SIDE, BUY, SELL, SHORT, COVER);
        private static var feedMap:Dictionary = new Dictionary();
        private static var orderMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _feedValue:int;
        protected var _orderValue:String;

        public function OrderSide(name:String, feedValue:int, orderValue:String){
            super();
            this._name = name;
            this._feedValue = feedValue;
            this._orderValue = orderValue;
        }
        private static function initMap(){
            var type:OrderSide;
            for each (type in ALL) {
                feedMap[type.feedValue] = type;
                orderMap[type.orderValue] = type;
            };
        }
        public static function lookUpFromFeed(feedValue:int):OrderSide{
            var type:OrderSide = feedMap[feedValue];
            if (type == null){
                return (NO_SIDE);
            };
            return (type);
        }
        public static function lookUpFromOrder(orderValue:String):OrderSide{
            var type:OrderSide = orderMap[orderValue];
            if (type == null){
                return (NO_SIDE);
            };
            return (type);
        }
        public static function lookUpFromDealSummary(dealValue:String):OrderSide{
            if (dealValue == "Buy"){
                return (BUY);
            };
            if (dealValue == "Sell"){
                return (SELL);
            };
            return (NO_SIDE);
        }

        public function get name():String{
            return (this._name);
        }
        public function get feedValue():int{
            return (this._feedValue);
        }
        public function get orderValue():String{
            return (this._orderValue);
        }
        public function toString():String{
            return ((("OrderSide[name:" + this._name) + "]"));
        }
        public function isNoSide():Boolean{
            return ((this == NO_SIDE));
        }
        public function isBuy():Boolean{
            return ((this == BUY));
        }
        public function isSell():Boolean{
            return ((this == SELL));
        }
        public function isShort():Boolean{
            return ((this == SHORT));
        }
        public function isCover():Boolean{
            return ((this == COVER));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class DerivativesExpireFlag {

        public static const NO_FLAG:DerivativesExpireFlag = new DerivativesExpireFlag("", 0);
;
        public static const LAST_TRADE_DATE:DerivativesExpireFlag = new DerivativesExpireFlag("LTD", 1);
;
        public static const EXPIRY_DATE:DerivativesExpireFlag = new DerivativesExpireFlag("EXP", 2);
;

        private static var ALL:Array = new Array(NO_FLAG, LAST_TRADE_DATE, EXPIRY_DATE);
        private static var feedMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _feedValue:int;

        public function DerivativesExpireFlag(name:String, feedValue:int){
            super();
            this._name = name;
            this._feedValue = feedValue;
        }
        private static function initMap():void{
            var obj:DerivativesExpireFlag;
            for each (obj in ALL) {
                feedMap[obj.feedValue] = obj;
            };
        }
        public static function lookupFromFeed(feedValue:int):DerivativesExpireFlag{
            var obj:DerivativesExpireFlag = feedMap[feedValue];
            if (obj == null){
                return (NO_FLAG);
            };
            return (obj);
        }

        public function get name():String{
            return (this._name);
        }
        public function get feedValue():int{
            return (this._feedValue);
        }
        public function isLastTradeDate():Boolean{
            return ((this == LAST_TRADE_DATE));
        }
        public function isExpiryDate():Boolean{
            return ((this == EXPIRY_DATE));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class SocketStatus {

        public static var CONNECTED:SocketStatus = new SocketStatus("Connected");
;
        public static var DISCONNECTED:SocketStatus = new SocketStatus("Disconnected");
;
        public static var ERROR:SocketStatus = new SocketStatus("Error");
;
        public static var TIMEOUT:SocketStatus = new SocketStatus("Timeout");
;

        protected var _name:String;

        public function SocketStatus(name:String){
            super();
            this._name = name;
        }
        public function toString():String{
            return ((("SocketStatus[name:" + this._name) + "]"));
        }
        public function get name():String{
            return (this._name);
        }
        public function isConnected():Boolean{
            return ((this == CONNECTED));
        }
        public function isDisconnected():Boolean{
            return ((this == DISCONNECTED));
        }
        public function isError():Boolean{
            return ((this == ERROR));
        }
        public function isTimeout():Boolean{
            return ((this == TIMEOUT));
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class TrusteeId {

        public static const NO_TYPE:TrusteeId = new TrusteeId("No Type", "");
;
        public static const ALL_ID:TrusteeId = new TrusteeId("All", "A");
;
        public static const NORMAL:TrusteeId = new TrusteeId("Normal", "0");
;
        public static const NVDR:TrusteeId = new TrusteeId("NVDR", "2");
;

        private static var ALL:Array = new Array(NO_TYPE, ALL_ID, NORMAL, NVDR);

        protected var _name:String;
        protected var _value:String;

        public function TrusteeId(name:String, value:String){
            super();
            this._name = name;
            this._value = value;
        }
        public function get name():String{
            return (this._name);
        }
        public function get value():String{
            return (this._value);
        }
        public function toString():String{
            return ((("[TrusteeId name=" + this.name) + "]"));
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class WidgetGroup {

        public static const NO_GROUP:WidgetGroup = new WidgetGroup("No Type", "");
;
        public static const GROUP_ONE:WidgetGroup = new WidgetGroup("One", "one");
;
        public static const GROUP_TWO:WidgetGroup = new WidgetGroup("Two", "two");
;
        public static const GROUP_THREE:WidgetGroup = new WidgetGroup("Three", "three");
;

        public static var ALL:Array = new Array(NO_GROUP, GROUP_ONE, GROUP_TWO, GROUP_THREE);
        private static var feedMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _feedValue:String;

        public function WidgetGroup(name:String, feedValue:String){
            super();
            this._name = name;
            this._feedValue = feedValue;
        }
        private static function initMap(){
            var type:WidgetGroup;
            for each (type in ALL) {
                feedMap[type._feedValue] = type;
            };
        }
        public static function lookupFromFeed(feedValue:String):WidgetGroup{
            var type:WidgetGroup = feedMap[feedValue];
            if (type == null){
                return (NO_GROUP);
            };
            return (type);
        }

        public function get name():String{
            return (this._name);
        }
        public function get feedValue():String{
            return (this._feedValue);
        }
        public function toString():String{
            return ((("WidgetGroup[" + this._name) + "]"));
        }
        public function isGroupOne():Boolean{
            return ((this == GROUP_ONE));
        }
        public function isGroupTwo():Boolean{
            return ((this == GROUP_TWO));
        }
        public function isGroupThree():Boolean{
            return ((this == GROUP_THREE));
        }
        public function isGroupNone():Boolean{
            return ((this == NO_GROUP));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class ScreenType {

        public static const NORMAL:ScreenType = new ScreenType("Normal", "normal");
;
        public static const WIDE:ScreenType = new ScreenType("Wide", "wide");
;
        public static const AUTO:ScreenType = new ScreenType("Auto", "auto");
;

        public static var ALL:Array = [NORMAL, WIDE, AUTO];

        protected var _name:String;
        protected var _value:String;

        public function ScreenType(name:String, value:String){
            super();
            this._name = name;
            this._value = value;
        }
        public static function lookup(str:String):ScreenType{
            var screenType:ScreenType;
            for each (screenType in ALL) {
                if (screenType._value == str){
                    return (screenType);
                };
            };
            return (AUTO);
        }

        public function isNormal():Boolean{
            return ((this == NORMAL));
        }
        public function isWide():Boolean{
            return ((this == WIDE));
        }
        public function isAuto():Boolean{
            return ((this == AUTO));
        }
        public function get name():String{
            return (this._name);
        }
        public function get value():String{
            return (this._value);
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class PageStatus {

        public static var COMPLETE:PageStatus = new PageStatus("Complete");
;
        public static var ERROR:PageStatus = new PageStatus("Error");
;

        protected var _name:String;

        public function PageStatus(name:String){
            super();
            this._name = name;
        }
        public function toString():String{
            return ((("PageStatus[name:" + this._name) + "]"));
        }
        public function get name():String{
            return (this._name);
        }
        public function isComplete():Boolean{
            return ((this == COMPLETE));
        }
        public function isError():Boolean{
            return ((this == ERROR));
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class DerivativesWarrantType {

        public static const NO_TYPE:DerivativesWarrantType = new DerivativesWarrantType("No Type", "");
;
        public static const INDEX:DerivativesWarrantType = new DerivativesWarrantType("Index", "I");
;
        public static const STOCK:DerivativesWarrantType = new DerivativesWarrantType("Stock", "S");
;

        public static var ALL:Array = new Array(NO_TYPE, INDEX, STOCK);
        private static var feedMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _feedValue:String;

        public function DerivativesWarrantType(name:String, feedValue:String){
            super();
            this._name = name;
            this._feedValue = feedValue;
        }
        private static function initMap():void{
            var type:DerivativesWarrantType;
            for each (type in ALL) {
                feedMap[type.feedValue] = type;
            };
        }
        public static function lookUpFromFeed(feedValue:String):DerivativesWarrantType{
            var type:DerivativesWarrantType = feedMap[feedValue];
            if (type == null){
                return (NO_TYPE);
            };
            return (type);
        }

        public function get name():String{
            return (this._name);
        }
        public function get feedValue():String{
            return (this._feedValue);
        }
        public function toString():String{
            return ((("DerivativesWarrantType[name:" + this._name) + "]"));
        }
        public function isIndex():Boolean{
            return ((this == INDEX));
        }
        public function isStock():Boolean{
            return ((this == STOCK));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class OptionsType {

        public static const NO_TYPE:OptionsType = new OptionsType("No Type", "");
;
        public static const PUT:OptionsType = new OptionsType("Put", "P");
;
        public static const CALL:OptionsType = new OptionsType("Call", "C");
;
        private static const ALL:Array = new Array(NO_TYPE, PUT, CALL);

        private static var feedMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _id:String;

        public function OptionsType(name:String, id:String){
            super();
            this._name = name;
            this._id = id;
        }
        private static function initMap():void{
            var type:OptionsType;
            for each (type in ALL) {
                feedMap[type.id] = type;
            };
        }
        public static function lookup(id:String):OptionsType{
            var type:OptionsType = feedMap[id];
            if (type == null){
                return (NO_TYPE);
            };
            return (type);
        }

        public function isNoType():Boolean{
            return ((this == NO_TYPE));
        }
        public function isPut():Boolean{
            return ((this == PUT));
        }
        public function isCall():Boolean{
            return ((this == CALL));
        }
        public function get name():String{
            return (this._name);
        }
        public function set name(value:String):void{
            this._name = value;
        }
        public function get id():String{
            return (this._id);
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class WidgetLoadedStatus {

        public static var LOADING:WidgetLoadedStatus = new WidgetLoadedStatus("Loading");
;
        public static var LOADED:WidgetLoadedStatus = new WidgetLoadedStatus("Loaded");
;
        public static var ERROR:WidgetLoadedStatus = new WidgetLoadedStatus("Error");
;
        public static var NO_STATE:WidgetLoadedStatus = new WidgetLoadedStatus("NoState");
;

        protected var _name:String;

        public function WidgetLoadedStatus(name:String){
            super();
            this._name = name;
        }
        public function toString():String{
            return ((("WidgetLoadedStatus[name:" + this._name) + "]"));
        }
        public function get name():String{
            return (this._name);
        }
        public function isLoading():Boolean{
            return ((this == LOADING));
        }
        public function isLoaded():Boolean{
            return ((this == LOADED));
        }
        public function isError():Boolean{
            return ((this == ERROR));
        }
        public function isNoState():Boolean{
            return ((this == NO_STATE));
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class Validity {

        public static const NO_TYPE:Validity = new Validity("No Type", "");
;
        public static const DAY:Validity = new Validity("Day", "Day");
;
        public static const FOK:Validity = new Validity("FOK", "FOK");
;
        public static const IOC:Validity = new Validity("IOC", "IOC");
;
        public static const ODD_LOT:Validity = new Validity("Odd Lot", "Odd Lot");
;

        private static var ALL:Array = new Array(NO_TYPE, DAY, FOK, IOC, ODD_LOT);
        private static var orderMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _orderValue:String;

        public function Validity(name:String, orderValue:String){
            super();
            this._name = name;
            this._orderValue = orderValue;
        }
        private static function initMap():void{
            var type:Validity;
            for each (type in ALL) {
                orderMap[type.orderValue] = type;
            };
        }
        public static function lookUpFromOrder(orderValue:String):Validity{
            var type:Validity = orderMap[orderValue];
            if (type == null){
                return (NO_TYPE);
            };
            return (type);
        }

        public function get name():String{
            return (this._name);
        }
        public function get orderValue():String{
            return (this._orderValue);
        }
        public function isDay():Boolean{
            return ((this == DAY));
        }
        public function isFOK():Boolean{
            return ((this == FOK));
        }
        public function isIOC():Boolean{
            return ((this == IOC));
        }
        public function toString():String{
            return ((("Validity:[name=" + this.name) + "]"));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class StopCondition {

        public static const NO_TYPE:StopCondition = new StopCondition("No Type");
;
        public static const BID_GREATER_STOP:StopCondition = new StopCondition("Bid Greater or Equal");
;
        public static const BID_LESSER_STOP:StopCondition = new StopCondition("Bid Lesser or Equal");
;
        public static const ASK_GREATER_STOP:StopCondition = new StopCondition("Ask Greater or Equal");
;
        public static const ASK_LESSER_STOP:StopCondition = new StopCondition("Ask Lesser or Equal");
;
        public static const LAST_GREATER_STOP:StopCondition = new StopCondition("Last Greater or Equal");
;
        public static const LAST_LESSER_STOP:StopCondition = new StopCondition("Last Lesser or Equal");
;

        protected var _name:String;

        public function StopCondition(name:String){
            super();
            this._name = name;
        }
        public function get name():String{
            return (this._name);
        }
        public function isNoType():Boolean{
            return ((this == NO_TYPE));
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class PriceType {

        public static const NO_TYPE:PriceType = new PriceType("No Type", -1, "");
;
        public static const LIMIT:PriceType = new PriceType("Limit", 0, "");
;
        public static const MP:PriceType = new PriceType("MP", 1, "MP");
;
        public static const ATO:PriceType = new PriceType("ATO", 2, "ATO");
;
        public static const ATC:PriceType = new PriceType("ATC", 3, "ATC");
;
        public static const MP_MKT:PriceType = new PriceType("MP-MKT", 4, "MP-MKT");
;
        public static const MP_MTL:PriceType = new PriceType("MP-MTL", 5, "MP-MTL");
;

        public static var ALL:Array = new Array(LIMIT, MP, ATO, ATC, MP, MP_MKT, MP_MTL);
        private static var feedMap:Dictionary = new Dictionary();
        private static var orderMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _feedValue:int;
        protected var _orderValue:String;

        public function PriceType(name:String, feedValue:int, orderValue:String){
            super();
            this._name = name;
            this._feedValue = feedValue;
            this._orderValue = orderValue;
        }
        private static function initMap(){
            var type:PriceType;
            for each (type in ALL) {
                feedMap[type.feedValue] = type;
                orderMap[type.orderValue] = type;
            };
        }
        public static function lookUpFromFeed(feedValue:int):PriceType{
            var type:PriceType = feedMap[feedValue];
            if (type == null){
                return (NO_TYPE);
            };
            return (type);
        }
        public static function lookUpFromOrder(orderValue:String):PriceType{
            var type:PriceType = orderMap[orderValue];
            if (type == null){
                return (LIMIT);
            };
            return (type);
        }

        public function get name():String{
            return (this._name);
        }
        public function get feedValue():int{
            return (this._feedValue);
        }
        public function get orderValue():String{
            return (this._orderValue);
        }
        public function toString():String{
            return ((("PriceType[name:" + this._name) + "]"));
        }
        public function isLimit():Boolean{
            return ((this == LIMIT));
        }
        public function isMP():Boolean{
            return ((this == MP));
        }
        public function isMPMKT():Boolean{
            return ((this == MP_MKT));
        }
        public function isMPMTL():Boolean{
            return ((this == MP_MTL));
        }
        public function isMPAll():Boolean{
            return (((((this.isMP()) || (this.isMPMKT()))) || (this.isMPMTL())));
        }
        public function isATO():Boolean{
            return ((this == ATO));
        }
        public function isATC():Boolean{
            return ((this == ATC));
        }
        public function isATOATC():Boolean{
            return (((this.isATO()) || (this.isATC())));
        }
        public function isNoType():Boolean{
            return (this.isNoType());
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class NewsType {

        public static const NO_TYPE:NewsType = new NewsType("No Type", "");
;
        public static const ALL:NewsType = new NewsType("All", "ALL");
;
        public static const FINANCE:NewsType = new NewsType("Finance", "FIN");
;
        public static const NEWS:NewsType = new NewsType("News", "NEWS");
;
        public static const IQ:NewsType = new NewsType("IQ News", "IQ");
;

        public static var ALL_LIST:Array = new Array(NO_TYPE, ALL, FINANCE, NEWS, IQ);
        private static var feedMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _feedValue:String;

        public function NewsType(name:String, feedValue:String){
            super();
            this._name = name;
            this._feedValue = feedValue;
        }
        private static function initMap(){
            var type:NewsType;
            for each (type in ALL_LIST) {
                feedMap[type._feedValue] = type;
            };
        }
        public static function lookupFromFeed(feedValue:String):NewsType{
            var type:NewsType = feedMap[feedValue];
            if (type == null){
                return (NO_TYPE);
            };
            return (type);
        }

        public function get name():String{
            return (this._name);
        }
        public function get feedValue():String{
            return (this._feedValue);
        }
        public function toString():String{
            return ((("NewsType[" + this._name) + "]"));
        }
        public function isAll():Boolean{
            return ((this == ALL));
        }
        public function isFinance():Boolean{
            return ((this == FINANCE));
        }
        public function isNews():Boolean{
            return ((this == NEWS));
        }
        public function isIQ():Boolean{
            return ((this == IQ));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class PositionType {

        public static const NO_TYPE:PositionType = new PositionType("No Type");
;
        public static const DEPOSIT:PositionType = new PositionType("Deposit");
;

        protected var _name:String;

        public function PositionType(name:String){
            super();
            this._name = name;
        }
        public function get name():String{
            return (this._name);
        }
        public function set name(value:String):void{
            this._name = value;
        }
        public function isNoType():Boolean{
            return ((this == NO_TYPE));
        }
        public function isDeposit():Boolean{
            return ((this == DEPOSIT));
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class InstrumentInfoStatisticChartType {

        public static const QUARTERLY:InstrumentInfoStatisticChartType = new InstrumentInfoStatisticChartType("Quarterly", "quarterly", 0);
;
        public static const YEARLY:InstrumentInfoStatisticChartType = new InstrumentInfoStatisticChartType("Yearly", "yearly", 1);
;
        public static const NO_TYPE:InstrumentInfoStatisticChartType = new InstrumentInfoStatisticChartType("No Type", "", -1);
;

        public static var ALL:Array = new Array(NO_TYPE, QUARTERLY, YEARLY);
        private static var FEED_VALUE_MAP:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _value:String;
        protected var _feedValue:int;

        public function InstrumentInfoStatisticChartType(name:String, value:String, feedValue:int){
            super();
            this._name = name;
            this._value = value;
            this._feedValue = feedValue;
        }
        private static function initDict(){
            var chartType:InstrumentInfoStatisticChartType;
            for each (chartType in ALL) {
                FEED_VALUE_MAP[chartType.feedValue] = chartType;
            };
        }
        public static function lookUpFromFeed(value:int):InstrumentInfoStatisticChartType{
            var chartType:InstrumentInfoStatisticChartType = FEED_VALUE_MAP[value];
            if (chartType == null){
                return (NO_TYPE);
            };
            return (chartType);
        }

        public function get name():String{
            return (this._name);
        }
        public function get value():String{
            return (this._value);
        }
        public function get feedValue():int{
            return (this._feedValue);
        }
        public function isQuarterly():Boolean{
            return ((this == QUARTERLY));
        }
        public function isYearly():Boolean{
            return ((this == YEARLY));
        }
        public function isNoType():Boolean{
            return ((this == NO_TYPE));
        }
        public function toString():String{
            return ((((("InstrumentInfoStatisticChartType[name:" + this._name) + ", value:") + this._value) + "]"));
        }

        initDict();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class PriceVolumeAlertType {

        public static const NO_TYPE:PriceVolumeAlertType = new PriceVolumeAlertType("No Type", "");
;
        public static const ONCE:PriceVolumeAlertType = new PriceVolumeAlertType("Once", "once");
;
        public static const ALWAYS:PriceVolumeAlertType = new PriceVolumeAlertType("Always", "always");
;

        private static var ALL:Array = new Array(ONCE, ALWAYS);
        private static var feedMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _value:String;

        public function PriceVolumeAlertType(name:String, value:String){
            super();
            this._name = name;
            this._value = value;
        }
        private static function initMap():void{
            var obj:PriceVolumeAlertType;
            for each (obj in ALL) {
                feedMap[obj.value] = obj;
            };
        }
        public static function lookup(value:String):PriceVolumeAlertType{
            var obj:PriceVolumeAlertType = feedMap[value];
            if (obj == null){
                return (NO_TYPE);
            };
            return (obj);
        }

        public function get name():String{
            return (this._name);
        }
        public function get value():String{
            return (this._value);
        }
        public function isOnce():Boolean{
            return ((this == ONCE));
        }
        public function isAlways():Boolean{
            return ((this == ALWAYS));
        }
        public function toString():String{
            return ((((("[PriceVolumeAlertType name=" + this.name) + " value=") + this.value) + "]"));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class OrderFilterStatus {

        public static const NO_TYPE:OrderFilterStatus = new OrderFilterStatus("No Type", "", "");
;
        public static const ALL_STATUS:OrderFilterStatus = new OrderFilterStatus("All", "A", "A");
;
        public static const QUEUING:OrderFilterStatus = new OrderFilterStatus("Queuing", "U", "Q");
;
        public static const CANCELLED:OrderFilterStatus = new OrderFilterStatus("Cancelled", "C", "C");
;
        public static const MATCHED:OrderFilterStatus = new OrderFilterStatus("Matched", "M", "M");
;
        public static const REJECTED:OrderFilterStatus = new OrderFilterStatus("Rejected", "R", "R");
;
        public static const EXPIRED:OrderFilterStatus = new OrderFilterStatus("Expired", "E", "E");
;

        private static var ALL:Array = new Array(NO_TYPE, ALL_STATUS, QUEUING, CANCELLED, MATCHED, REJECTED, EXPIRED);

        protected var _name:String;
        protected var _value:String;
        protected var _derivativesValue:String;

        public function OrderFilterStatus(name:String, value:String, derivativesValue:String){
            super();
            this._name = name;
            this._value = value;
            this._derivativesValue = derivativesValue;
        }
        public function get name():String{
            return (this._name);
        }
        public function get value():String{
            return (this._value);
        }
        public function get derivativesValue():String{
            return (this._derivativesValue);
        }
        public function toString():String{
            return ((("[OrderFilterStatus name=" + this.name) + "]"));
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class MarketType {

        public static const NO_TYPE:MarketType = new MarketType("No Type", "");
;
        public static const INDEX:MarketType = new MarketType("Index", "TXI");
;
        public static const STOCK:MarketType = new MarketType("Stock", "TXS");
;
        public static const METAL:MarketType = new MarketType("Metal", "TXM");
;
        public static const INTEREST_RATE:MarketType = new MarketType("Interest Rate", "TXR");
;
        public static const ENERGY:MarketType = new MarketType("Energy", "TXE");
;
        public static const CURRENCY:MarketType = new MarketType("Currency", "TXC");
;

        public static var ALL:Array = new Array(NO_TYPE, INDEX, STOCK, METAL, INTEREST_RATE, ENERGY, CURRENCY);
        private static var feedMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _feedValue:String;

        public function MarketType(name:String, feedValue:String){
            super();
            this._name = name;
            this._feedValue = feedValue;
        }
        private static function initMap():void{
            var type:MarketType;
            for each (type in ALL) {
                feedMap[type.feedValue] = type;
            };
        }
        public static function lookUpFromFeed(feedValue:String):MarketType{
            var type:MarketType = feedMap[feedValue];
            if (type == null){
                return (NO_TYPE);
            };
            return (type);
        }

        public function get name():String{
            return (this._name);
        }
        public function get feedValue():String{
            return (this._feedValue);
        }
        public function toString():String{
            return ((("MarketType[name:" + this._name) + "]"));
        }
        public function isIndex():Boolean{
            return ((this == INDEX));
        }
        public function isStock():Boolean{
            return ((this == STOCK));
        }
        public function isMetal():Boolean{
            return ((this == METAL));
        }
        public function isInterestRate():Boolean{
            return ((this == INTEREST_RATE));
        }
        public function isEnergy():Boolean{
            return ((this == ENERGY));
        }
        public function isCurrency():Boolean{
            return ((this == CURRENCY));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class OrderDerivativesServiceType {

        public static const NO_TYPE:OrderDerivativesServiceType = new OrderDerivativesServiceType("No Type", "");
;
        public static const PLACE_OR_CANCEL_ORDER:OrderDerivativesServiceType = new OrderDerivativesServiceType("Place or Cancel Order", "PlaceOrder");
;
        public static const ACCOUNT_INFO:OrderDerivativesServiceType = new OrderDerivativesServiceType("Account Information", "AccountInfo");
;
        public static const PORTFOLIO:OrderDerivativesServiceType = new OrderDerivativesServiceType("Portfolio", "PortInfo");
;
        public static const ORDER_STATUS:OrderDerivativesServiceType = new OrderDerivativesServiceType("Order Info", "OrderInfo");
;
        public static const DEAL_SUMMARY:OrderDerivativesServiceType = new OrderDerivativesServiceType("Deal Summary", "DealSummary");
;
        public static const DEAL_SUMMARY_SERIES:OrderDerivativesServiceType = new OrderDerivativesServiceType("Deal Summary Series", "DealSummarySeries");
;
        public static const DEAL_SUMMARY_PRICE:OrderDerivativesServiceType = new OrderDerivativesServiceType("Deal Summary Price", "DealSummaryPrice");
;
        public static const ORDER_STATUS_BY_ORDER_NUMBER:OrderDerivativesServiceType = new OrderDerivativesServiceType("OrderByOrderNo", "OrderByOrderNo");
;
        public static const POSITION_CLOSING:OrderDerivativesServiceType = new OrderDerivativesServiceType("PositionClosing", "PositionClosing");
;
        public static const OUTSTANDING_POSITION:OrderDerivativesServiceType = new OrderDerivativesServiceType("OutstandingPosition", "OutstandingPosition");
;

        public static var ALL:Array = new Array(NO_TYPE, PLACE_OR_CANCEL_ORDER, ACCOUNT_INFO, PORTFOLIO, ORDER_STATUS, DEAL_SUMMARY, ORDER_STATUS_BY_ORDER_NUMBER, DEAL_SUMMARY_SERIES, DEAL_SUMMARY_PRICE, POSITION_CLOSING, OUTSTANDING_POSITION);
        private static var ID_MAP:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _id:String;

        public function OrderDerivativesServiceType(name:String, id:String){
            super();
            this._name = name;
            this._id = id;
        }
        private static function initDict(){
            var service:OrderDerivativesServiceType;
            for each (service in ALL) {
                ID_MAP[service.id] = service;
            };
        }
        public static function lookUpFromId(id:String):OrderDerivativesServiceType{
            return (OrderDerivativesServiceType(ID_MAP[id]));
        }

        public function get name():String{
            return (this._name);
        }
        public function get id():String{
            return (this._id);
        }
        public function toString():String{
            return ((("OrderDerivativesServiceType[" + this._name) + "]"));
        }

        initDict();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class PriceVolumeAlertConditionType {

        public static const NO_TYPE:PriceVolumeAlertConditionType = new PriceVolumeAlertConditionType("No Type", "", "");
;
        public static const PRICE_MORE:PriceVolumeAlertConditionType = new PriceVolumeAlertConditionType("Price More", "PriceMore", ">");
;
        public static const PRICE_MORE_EQUAL:PriceVolumeAlertConditionType = new PriceVolumeAlertConditionType("Price More Equal", "PriceMoreEqual", ">=");
;
        public static const PRICE_LESS:PriceVolumeAlertConditionType = new PriceVolumeAlertConditionType("Price Less", "PriceLess", "<");
;
        public static const PRICE_LESS_EQUAL:PriceVolumeAlertConditionType = new PriceVolumeAlertConditionType("Price Less Equal", "PriceLessEqual", "<=");
;
        public static const VOLUME_MORE:PriceVolumeAlertConditionType = new PriceVolumeAlertConditionType("Volume More", "VolumeMore", ">");
;
        public static const VOLUME_MORE_EQUAL:PriceVolumeAlertConditionType = new PriceVolumeAlertConditionType("Volume More Equal", "VolumeMoreEqual", ">=");
;

        private static var ALL:Array = new Array(PRICE_MORE, PRICE_MORE_EQUAL, PRICE_LESS, PRICE_LESS_EQUAL, VOLUME_MORE, VOLUME_MORE_EQUAL);
        private static var feedMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _value:String;
        protected var _mathematicalSymbol:String;

        public function PriceVolumeAlertConditionType(name:String, value:String, mathematicalSymbol:String){
            super();
            this._name = name;
            this._value = value;
            this._mathematicalSymbol = mathematicalSymbol;
        }
        private static function initMap():void{
            var obj:PriceVolumeAlertConditionType;
            for each (obj in ALL) {
                feedMap[obj.value] = obj;
            };
        }
        public static function lookup(value:String):PriceVolumeAlertConditionType{
            var obj:PriceVolumeAlertConditionType = feedMap[value];
            if (obj == null){
                return (NO_TYPE);
            };
            return (obj);
        }

        public function get name():String{
            return (this._name);
        }
        public function get value():String{
            return (this._value);
        }
        public function get mathematicalSymbol():String{
            return (this._mathematicalSymbol);
        }
        public function isPriceMore():Boolean{
            return ((this == PRICE_MORE));
        }
        public function isPriceMoreEqual():Boolean{
            return ((this == PRICE_MORE_EQUAL));
        }
        public function isPriceLess():Boolean{
            return ((this == PRICE_LESS));
        }
        public function isPriceLessEqual():Boolean{
            return ((this == PRICE_LESS_EQUAL));
        }
        public function isPriceCondition():Boolean{
            return ((((((((this == PRICE_MORE)) || ((this == PRICE_MORE_EQUAL)))) || ((this == PRICE_LESS)))) || ((this == PRICE_LESS_EQUAL))));
        }
        public function isVolumeMore():Boolean{
            return ((this == VOLUME_MORE));
        }
        public function isVolumeMoreEqual():Boolean{
            return ((this == VOLUME_MORE_EQUAL));
        }
        public function isVolumneCondition():Boolean{
            return ((((this == VOLUME_MORE)) || ((this == VOLUME_MORE_EQUAL))));
        }
        public function toString():String{
            return ((((("[PriceVolumeAlertConditionType name=" + this.name) + " value=") + this.value) + "]"));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class OrderType {

        public static const NO_TYPE:OrderType = new OrderType("No Type", "");
;
        public static const SEOS:OrderType = new OrderType("SEOS", "SEOS");
;
        public static const FIS:OrderType = new OrderType("FIS", "FIS");
;
        public static const DGW:OrderType = new OrderType("DGW", "DGW");
;

        private static var ALL:Array = [NO_TYPE, SEOS, FIS, DGW];
        private static var ID_MAP:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _id:String;

        public function OrderType(name:String, id:String){
            super();
            this._name = name;
            this._id = id;
        }
        private static function initDict(){
            var type:OrderType;
            for each (type in ALL) {
                ID_MAP[type.id] = type;
            };
        }
        public static function lookUpFromId(id:String):OrderType{
            var type:OrderType = ID_MAP[id];
            if (type == null){
                return (NO_TYPE);
            };
            return (type);
        }

        public function get name():String{
            return (this._name);
        }
        public function get id():String{
            return (this._id);
        }
        public function toString():String{
            return ((("OrderType[" + this._name) + "]"));
        }
        public function isSeos():Boolean{
            return ((this == SEOS));
        }
        public function isFis():Boolean{
            return ((this == FIS));
        }
        public function isDgw():Boolean{
            return ((this == DGW));
        }

        initDict();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class MessageSide {

        public static const REQUEST:MessageSide = new MessageSide("Request");
;
        public static const RESPONSE:MessageSide = new MessageSide("Response");
;
        public static const FEED:MessageSide = new MessageSide("Feed");
;
        public static const CONTROL:MessageSide = new MessageSide("Control");
;
        public static const NO_SIDE:MessageSide = new MessageSide("No Side");
;

        protected var _name:String;

        public function MessageSide(name:String){
            super();
            this._name = name;
        }
        public function get name():String{
            return (this._name);
        }
        public function isRequest():Boolean{
            return ((this == REQUEST));
        }
        public function isResponse():Boolean{
            return ((this == RESPONSE));
        }
        public function isFeed():Boolean{
            return ((this == FEED));
        }
        public function isControl():Boolean{
            return ((this == CONTROL));
        }
        public function isNoSide():Boolean{
            return ((this == NO_SIDE));
        }
        public function toString():String{
            return ((("MessageSide[name=" + this._name) + "]"));
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class FeedServiceType {

        private static const NO_ID:int = -2147483648;
        private static const NO_STR_ID = "";
        public static const NO_TYPE:FeedServiceType = new FeedServiceType("No Type", NO_ID, NO_STR_ID);
;
        public static const INFO:FeedServiceType = new FeedServiceType("Info", 1, NO_STR_ID);
;
        public static const INFO_STATISTIC:FeedServiceType = new FeedServiceType("Info Statistic", 26, NO_STR_ID);
;
        public static const INFO_STATISTIC_CHART:FeedServiceType = new FeedServiceType("Info Statistic Chart", 29, NO_STR_ID);
;
        public static const INFO_ODDLOT:FeedServiceType = new FeedServiceType("Info OddLot", 27, NO_STR_ID);
;
        public static const SNAPSHOT:FeedServiceType = new FeedServiceType("Snapshot", 2, NO_STR_ID);
;
        public static const INSTRUMNET_TICKER:FeedServiceType = new FeedServiceType("Instrument Ticker", 3, NO_STR_ID);
;
        public static const INSTRUMENT_TICKER_ODDLOT:FeedServiceType = new FeedServiceType("Instrument Ticker OddLot", 28, NO_STR_ID);
;
        public static const MARKET_TICKER:FeedServiceType = new FeedServiceType("Market Ticker", 4, NO_STR_ID);
;
        public static const MARKET_SUMMARY:FeedServiceType = new FeedServiceType("Market Summary", 5, NO_STR_ID);
;
        public static const EQUITY_ORDER:FeedServiceType = new FeedServiceType("Equity Order", 6, NO_STR_ID);
;
        public static const DERIV_ORDER:FeedServiceType = new FeedServiceType("Deriv Order", 7, NO_STR_ID);
;
        public static const VOLUME_BY_PRICE:FeedServiceType = new FeedServiceType("Volume by Price", 10, NO_STR_ID);
;
        public static const VOLUME_BY_PRICE_DETAIL:FeedServiceType = new FeedServiceType("Volume by Price Detail", 11, NO_STR_ID);
;
        public static const INSTRUMENT_LIST:FeedServiceType = new FeedServiceType("InstrumentList", 12, "S5InstrumentList");
;
        public static const NEWS:FeedServiceType = new FeedServiceType("NEWS", 13, "S5NewsInfo");
;
        public static const NOTIFICATION:FeedServiceType = new FeedServiceType("Notification", 14, NO_STR_ID);
;
        public static const INTRADAY_CHART:FeedServiceType = new FeedServiceType("Intraday Chart", 16, NO_STR_ID);
;
        public static const OPTIONS_HISTORICAL_CHART:FeedServiceType = new FeedServiceType("Options Historical Chart", 17, NO_STR_ID);
;
        public static const HISTORICAL_CHART:FeedServiceType = new FeedServiceType("Historical Chart", 18, NO_STR_ID);
;
        public static const OPTIONS_STRIKE_PRICE_LIST:FeedServiceType = new FeedServiceType("Options Strike Price List", 19, NO_STR_ID);
;
        public static const SET_CALENDAR:FeedServiceType = new FeedServiceType("Set Calendar", 20, NO_STR_ID);
;
        public static const HISTORICAL_BY_DATE:FeedServiceType = new FeedServiceType("HistoricalByDate", 21, NO_STR_ID);
;
        public static const ORDER_PUSH_CHECK:FeedServiceType = new FeedServiceType("OrderPushCheck", 22, NO_STR_ID);
;
        public static const ADMIN:FeedServiceType = new FeedServiceType("Admin", 23, NO_STR_ID);
;
        public static const ANNOUNCEMENT:FeedServiceType = new FeedServiceType("Announcement", 30, NO_STR_ID);
;
        public static const DERIV_ORDER_NEW:FeedServiceType = new FeedServiceType("Deriv Order New", 24, NO_STR_ID);
;
        public static const OPTIONS_GREEK_VALUE:FeedServiceType = new FeedServiceType("OptionsGreekValue", 25, NO_STR_ID);
;
        public static const OPTIONS_GREEK_DEFAULT_VALUE:FeedServiceType = new FeedServiceType("OptionsGreekDefaultValue", 31, NO_STR_ID);
;
        public static const STREAMING_OPTIONS_EXPIRE_DATE:FeedServiceType = new FeedServiceType("OptionsExpireDate", NO_ID, "OptionsExpireDate");
;
        public static const OPTIONS_EXPIRE_DATE:FeedServiceType = new FeedServiceType("Options Expire Date", NO_ID, "OptionsExpireDateList");
;
        public static const OPTIONS_RECOMMEND:FeedServiceType = new FeedServiceType("Options Recommend", NO_ID, "RecommendChoice");
;
        public static const OPTIONS_INSTRUMENT_LIST:FeedServiceType = new FeedServiceType("OptionsInstrumentList", NO_ID, "OptionsInitList");
;
        public static const FAVOURITE_MANAGEMENT:FeedServiceType = new FeedServiceType("Favourite Managerment", NO_ID, "FavouriteManagement");
;
        public static const DISCONNECT:FeedServiceType = new FeedServiceType("Disconnect", 9, NO_STR_ID);
;
        public static const RESEARCH:FeedServiceType = new FeedServiceType("Research", NO_ID, "S5ResearchContent");
;
        public static const SYMBOL_SELECTOR_TREE:FeedServiceType = new FeedServiceType("SymbolSelectorTree", NO_ID, "SymbolSelectorTree");
;
        public static const SYMBOL_SELECTOR_OPTIONS:FeedServiceType = new FeedServiceType("SymbolSelectorOptions", NO_ID, "SymbolSelectorOptions");
;
        public static const PIN_CHECK:FeedServiceType = new FeedServiceType("PinCheck", NO_ID, "CheckPin");
;
        public static const SETTING:FeedServiceType = new FeedServiceType("Setting", NO_ID, "Setting");
;
        public static const TEMPLATE:FeedServiceType = new FeedServiceType("Template", NO_ID, "Template");
;
        public static const MARGIN_STOCK:FeedServiceType = new FeedServiceType("MarginStock", NO_ID, "Initial Margin");
;
        public static const TISCO_SETTLEMENT_INFO:FeedServiceType = new FeedServiceType("Tisco Settlement Info", NO_ID, "TiscoSettlementInfo");
;
        public static const TISCO_STOCK_INFO:FeedServiceType = new FeedServiceType("Tisco Stock Info", NO_ID, "getStockInfo");
;
        public static const TISCO_VOL_FOCUS_LIST:FeedServiceType = new FeedServiceType("Tisco Vol Focus List", NO_ID, "getQualifiedStockWithInfo");
;
        public static const DBSV_TECHNICAL_INSIGHT:FeedServiceType = new FeedServiceType("DBSV Technical Insight", NO_ID, "DBSVTechnicalInsight");
;
        public static const DBSV_VALUE_ANALYZER:FeedServiceType = new FeedServiceType("DBSV Value Analyzer", NO_ID, "DBSVValueAnalyzer");
;
        public static const DBSV_SUPPORT_AND_RESISTANCE:FeedServiceType = new FeedServiceType("DBSV Support And Resistance", NO_ID, "DBSVSupportAndResistance");
;
        public static const DBSV_BULLISH_BEARISH_SPECIFIC_TAB:FeedServiceType = new FeedServiceType("DBSV Bullish and Bearish for Specific Tab of Quote", NO_ID, "DBSVBullishBearishSpecificTab");
;
        public static const DBSV_START_DATE_END_DATE_REQUEST:FeedServiceType = new FeedServiceType("DBSV Start Date End Date", NO_ID, "DBSVStartDateEndDate");
;

        public static var ALL:Array = new Array(NO_TYPE, INFO, INFO_STATISTIC, INFO_STATISTIC_CHART, INFO_ODDLOT, SNAPSHOT, INSTRUMNET_TICKER, INSTRUMENT_TICKER_ODDLOT, MARKET_TICKER, MARKET_SUMMARY, EQUITY_ORDER, DERIV_ORDER, VOLUME_BY_PRICE, VOLUME_BY_PRICE_DETAIL, OPTIONS_EXPIRE_DATE, OPTIONS_RECOMMEND, OPTIONS_HISTORICAL_CHART, HISTORICAL_CHART, OPTIONS_STRIKE_PRICE_LIST, OPTIONS_GREEK_VALUE, OPTIONS_GREEK_DEFAULT_VALUE, INTRADAY_CHART, INSTRUMENT_LIST, OPTIONS_INSTRUMENT_LIST, NEWS, FAVOURITE_MANAGEMENT, DISCONNECT, NOTIFICATION, SET_CALENDAR, RESEARCH, HISTORICAL_BY_DATE, SYMBOL_SELECTOR_TREE, SYMBOL_SELECTOR_OPTIONS, ADMIN, ANNOUNCEMENT, DERIV_ORDER_NEW, ORDER_PUSH_CHECK, PIN_CHECK, STREAMING_OPTIONS_EXPIRE_DATE, SETTING, TEMPLATE, MARGIN_STOCK, TISCO_SETTLEMENT_INFO, TISCO_STOCK_INFO, TISCO_VOL_FOCUS_LIST, DBSV_TECHNICAL_INSIGHT, DBSV_VALUE_ANALYZER, DBSV_SUPPORT_AND_RESISTANCE);
        private static var ID_MAP:Dictionary = new Dictionary();
        private static var STR_ID_MAP:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _id:int;
        protected var _strId:String;

        public function FeedServiceType(name:String, id:int, strId:String){
            super();
            this._name = name;
            this._id = id;
            this._strId = strId;
        }
        private static function initDict(){
            var service:FeedServiceType;
            for each (service in ALL) {
                ID_MAP[service.id] = service;
                STR_ID_MAP[service.strId] = service;
            };
        }
        public static function lookUpFromId(id:int):FeedServiceType{
            if (id == NO_ID){
                return (NO_TYPE);
            };
            var feedServiceType:FeedServiceType = ID_MAP[id];
            if (feedServiceType == null){
                return (NO_TYPE);
            };
            return (feedServiceType);
        }
        public static function lookUpFromStrId(id:String):FeedServiceType{
            if (id == NO_STR_ID){
                return (NO_TYPE);
            };
            var feedServiceType:FeedServiceType = STR_ID_MAP[id];
            if (feedServiceType == null){
                return (NO_TYPE);
            };
            return (feedServiceType);
        }

        public function get name():String{
            return (this._name);
        }
        public function get id():int{
            return (this._id);
        }
        public function get strId():String{
            return (this._strId);
        }
        public function toString():String{
            return ((("FeedServiceType[" + this._name) + "]"));
        }

        initDict();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class DerivativesPosition {

        public static const NO_TYPE:DerivativesPosition = new DerivativesPosition("No Type", "", "");
;
        public static const OPEN:DerivativesPosition = new DerivativesPosition("Open", "Open", "O");
;
        public static const CLOSE:DerivativesPosition = new DerivativesPosition("Close", "Close", "C");
;
        public static const AUTO:DerivativesPosition = new DerivativesPosition("Auto", "Auto", "A");
;

        public static var ALL:Array = new Array(NO_TYPE, OPEN, CLOSE, AUTO);
        private static var orderMap:Dictionary = new Dictionary();
        private static var feedMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _orderValue:String;
        protected var _feedValue:String;

        public function DerivativesPosition(name:String, orderValue:String, feedValue:String){
            super();
            this._name = name;
            this._orderValue = orderValue;
            this._feedValue = feedValue;
        }
        private static function initMap(){
            var type:DerivativesPosition;
            for each (type in ALL) {
                orderMap[type.orderValue] = type;
                feedMap[type.feedValue] = type;
            };
        }
        public static function lookupFromOrder(orderValue:String):DerivativesPosition{
            var type:DerivativesPosition = orderMap[orderValue];
            if (type == null){
                return (NO_TYPE);
            };
            return (type);
        }
        public static function lookupFromFeed(feedValue:String):DerivativesPosition{
            var type:DerivativesPosition = feedMap[feedValue];
            if (type == null){
                return (NO_TYPE);
            };
            return (type);
        }

        public function get name():String{
            return (this._name);
        }
        public function set name(value:String):void{
            this._name = value;
        }
        public function get orderValue():String{
            return (this._orderValue);
        }
        public function get feedValue():String{
            return (this._feedValue);
        }
        public function isNoType():Boolean{
            return ((this == NO_TYPE));
        }
        public function isOpen():Boolean{
            return ((this == OPEN));
        }
        public function isClose():Boolean{
            return ((this == CLOSE));
        }
        public function toString():String{
            return ((("DerivativesPosition[" + this._name) + "]"));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class PopupState {

        public static const SHOWING = new PopupState("Showing", "show");
;
        public static const HIDING = new PopupState("Showing", "hide");
;

        protected var _name:String;
        protected var _value:String;

        public function PopupState(name:String, value:String){
            super();
            this._name = name;
            this._value = value;
        }
        public function get name():String{
            return (this._name);
        }
        public function get value():String{
            return (this._value);
        }
        public function toString():String{
            return (this.value);
        }
        public function isShowing():Boolean{
            return ((this == SHOWING));
        }
        public function isHiding():Boolean{
            return ((this == HIDING));
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class DerivativesPriceType {

        public static const NO_TYPE:DerivativesPriceType = new DerivativesPriceType("No Type", "", "");
;
        public static const ALL_TYPE:DerivativesPriceType = new DerivativesPriceType("All", "", "");
;
        public static const LIMIT:DerivativesPriceType = new DerivativesPriceType("Limit", "N", "Limit");
;
        public static const MP:DerivativesPriceType = new DerivativesPriceType("MP", "M", "MP");
;
        public static const ATO:DerivativesPriceType = new DerivativesPriceType("ATO", "", "ATO");
;
        public static const MP_MTL:DerivativesPriceType = new DerivativesPriceType("MP-MTL", "", "MP-MTL");
;
        public static const MP_MKT:DerivativesPriceType = new DerivativesPriceType("MP-MKT", "", "MP-MKT");
;
        public static const TRADE_REPORT:DerivativesPriceType = new DerivativesPriceType("Trade Report", "", "");
;

        public static var ALL:Array = new Array(LIMIT, MP, ATO, MP_MTL, MP_MKT);
        private static var feedMap:Dictionary = new Dictionary();
        private static var orderMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _feedValue:String;
        protected var _orderValue:String;

        public function DerivativesPriceType(name:String, feedValue:String, orderValue:String){
            super();
            this._name = name;
            this._feedValue = feedValue;
            this._orderValue = orderValue;
        }
        private static function initMap(){
            var type:DerivativesPriceType;
            for each (type in ALL) {
                feedMap[type.feedValue] = type;
                orderMap[type.orderValue] = type;
            };
        }
        public static function lookUpFromFeed(feedValue:String):DerivativesPriceType{
            var type:DerivativesPriceType = feedMap[feedValue];
            if (type == null){
                return (NO_TYPE);
            };
            return (type);
        }
        public static function lookUpFromOrder(orderValue:String):DerivativesPriceType{
            var type:DerivativesPriceType = orderMap[orderValue];
            if (type == null){
                return (NO_TYPE);
            };
            return (type);
        }

        public function get name():String{
            return (this._name);
        }
        public function get feedValue():String{
            return (this._feedValue);
        }
        public function get orderValue():String{
            return (this._orderValue);
        }
        public function toString():String{
            return ((("DerivativesPriceType[name:" + this._name) + "]"));
        }
        public function isLimit():Boolean{
            return ((this == LIMIT));
        }
        public function isMP():Boolean{
            return ((this == MP));
        }
        public function isNoType():Boolean{
            return ((this == NO_TYPE));
        }
        public function isAto():Boolean{
            return ((this == ATO));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class KeyboardShortcutType {

        public static const NO_TYPE:KeyboardShortcutType = new KeyboardShortcutType("NoType");
;
        public static const BUY:KeyboardShortcutType = new KeyboardShortcutType("Buy");
;
        public static const SELL:KeyboardShortcutType = new KeyboardShortcutType("Sell");
;
        public static const SELECT_LAST_ORDER:KeyboardShortcutType = new KeyboardShortcutType("SelectLastOrder");
;
        public static const CANCEL_SELECT_ORDER:KeyboardShortcutType = new KeyboardShortcutType("CancelSelectOrder");
;
        public static const CHANGE_SELECT_ORDER:KeyboardShortcutType = new KeyboardShortcutType("ChangeSelectOrder");
;
        public static const CHANGE_ACCOUNT_NUMBER:KeyboardShortcutType = new KeyboardShortcutType("ChangeAccountNumber");
;

        protected var _name:String;

        public function KeyboardShortcutType(name:String){
            super();
            this._name = name;
        }
        public function get name():String{
            return (this._name);
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class DerivativesOrderSide {

        public static const NO_SIDE:DerivativesOrderSide = new DerivativesOrderSide("No Side", "", "");
;
        public static const ALL_SIDE:DerivativesOrderSide = new DerivativesOrderSide("All", "All", "A");
;
        public static const SHORT:DerivativesOrderSide = new DerivativesOrderSide("Short", "Short", "S");
;
        public static const LONG:DerivativesOrderSide = new DerivativesOrderSide("Long", "Long", "L");
;

        public static var ALL:Array = new Array(NO_SIDE, ALL_SIDE, SHORT, LONG);
        private static var orderMap:Dictionary = new Dictionary();
        private static var feedMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _orderValue:String;
        protected var _feedValue:String;

        public function DerivativesOrderSide(name:String, orderValue:String, feedValue:String){
            super();
            this._name = name;
            this._orderValue = orderValue;
            this._feedValue = feedValue;
        }
        private static function initMap(){
            var type:DerivativesOrderSide;
            for each (type in ALL) {
                orderMap[type.orderValue] = type;
                feedMap[type._feedValue] = type;
            };
        }
        public static function lookupFromOrder(orderValue:String):DerivativesOrderSide{
            var type:DerivativesOrderSide = orderMap[orderValue];
            if (type == null){
                return (NO_SIDE);
            };
            return (type);
        }
        public static function lookupFromFeed(feedValue:String):DerivativesOrderSide{
            var type:DerivativesOrderSide = feedMap[feedValue];
            if (type == null){
                return (NO_SIDE);
            };
            return (type);
        }

        public function get name():String{
            return (this._name);
        }
        public function get orderValue():String{
            return (this._orderValue);
        }
        public function get feedValue():String{
            return (this._feedValue);
        }
        public function toString():String{
            return ((("DerivativesOrderSide[" + this._name) + "]"));
        }
        public function isLong():Boolean{
            return ((this == LONG));
        }
        public function isShort():Boolean{
            return ((this == SHORT));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class FeedState {

        public static const NO_STATE:FeedState = new FeedState("No State", "");
;
        public static const PUSH:FeedState = new FeedState("Push", "PUSH");
;
        public static const PULL:FeedState = new FeedState("Pull", "PULL");
;
        public static const BUFFER:FeedState = new FeedState("Buffer for change tier");
;
        public static const INITIAL_PUSH:FeedState = new FeedState("Initial Push");
;
        public static const FORCED_PULL:FeedState = new FeedState("Forced Pull", "FORCEPULL");
;
        public static const OFFLINE:FeedState = new FeedState("Offline");
;

        public static var ALL:Array = new Array(NO_STATE, PUSH, PULL, BUFFER, INITIAL_PUSH, FORCED_PULL, OFFLINE);
        private static var USER_CHECK_MAP:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _strId:String;

        public function FeedState(name:String, strId:String=""){
            super();
            this._name = name;
            this._strId = strId;
        }
        private static function initDict():void{
            var state:FeedState;
            for each (state in ALL) {
                USER_CHECK_MAP[state.strId] = state;
            };
        }
        public static function lookUpFromStrId(id:String):FeedState{
            var feedState:FeedState = USER_CHECK_MAP[id];
            if (feedState == null){
                return (NO_STATE);
            };
            return (feedState);
        }

        public function get name():String{
            return (this._name);
        }
        public function get strId():String{
            return (this._strId);
        }
        public function isBuffer():Boolean{
            return ((this == BUFFER));
        }
        public function isInitialPush():Boolean{
            return ((this == INITIAL_PUSH));
        }
        public function isForcedPull():Boolean{
            return ((this == FORCED_PULL));
        }
        public function isPush():Boolean{
            return ((this == PUSH));
        }
        public function isPull():Boolean{
            return ((this == PULL));
        }
        public function isEnablePush():Boolean{
            return (((this.isPush()) || (this.isInitialPush())));
        }
        public function isEnablePull():Boolean{
            return (((this.isPull()) || (this.isForcedPull())));
        }
        public function isOffline():Boolean{
            return ((this == OFFLINE));
        }
        public function toString():String{
            return ((("FeedState[" + this._name) + "]"));
        }

        initDict();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class FeedResponseStatus {

        public static const NO_STATUS:FeedResponseStatus = new FeedResponseStatus("No Status", "");
;
        public static const SUCCESS:FeedResponseStatus = new FeedResponseStatus("Success", "T");
;
        public static const FAILED:FeedResponseStatus = new FeedResponseStatus("Failed", "F");
;

        public static var ALL:Array = new Array(SUCCESS, FAILED);
        private static var orderMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _id:String;

        public function FeedResponseStatus(name:String, id:String){
            super();
            this._name = name;
            this._id = id;
        }
        private static function initMap(){
            var type:FeedResponseStatus;
            for each (type in ALL) {
                orderMap[type.id] = type;
            };
        }
        public static function lookup(id:String){
            var feedResponseStatus:FeedResponseStatus = FeedResponseStatus(orderMap[id]);
            if (feedResponseStatus == null){
                feedResponseStatus = FeedResponseStatus.NO_STATUS;
            };
            return (feedResponseStatus);
        }

        public function get name():String{
            return (this._name);
        }
        public function get id():String{
            return (this._id);
        }
        public function toString():String{
            return ((("FeedResponseStatus[" + this._name) + "]"));
        }
        public function isSuccess():Boolean{
            return ((this == SUCCESS));
        }
        public function isFailed():Boolean{
            return ((this == FAILED));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class InstrumentSubType {

        public static const NO_TYPE:InstrumentSubType = new InstrumentSubType("No Type", -1);
;
        public static const DEFAULT:InstrumentSubType = new InstrumentSubType("Default", 0);
;
        public static const NORMAL:InstrumentSubType = new InstrumentSubType("Normal", 1);
;
        public static const WARRANT:InstrumentSubType = new InstrumentSubType("Warrant", 2);
;
        public static const DERIVATIVES_WARRANT:InstrumentSubType = new InstrumentSubType("Derivatives Warrant", 3);
;
        public static const ETF:InstrumentSubType = new InstrumentSubType("ETF", 4);
;

        public static var ALL:Array = new Array(NO_TYPE, DEFAULT, NORMAL, WARRANT, DERIVATIVES_WARRANT, ETF);
        private static var feedMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _feedValue:int;

        public function InstrumentSubType(name:String, feedValue:int){
            super();
            this._name = name;
            this._feedValue = feedValue;
        }
        private static function initMap(){
            var type:InstrumentSubType;
            for each (type in ALL) {
                feedMap[type.feedValue] = type;
            };
        }
        public static function lookUpFromFeed(feedValue:int):InstrumentSubType{
            var type:InstrumentSubType = feedMap[feedValue];
            if (type == null){
                return (NO_TYPE);
            };
            return (type);
        }

        public function get name():String{
            return (this._name);
        }
        public function get feedValue():int{
            return (this._feedValue);
        }
        public function toString():String{
            return ((("InstrumentSubType[name:" + this._name) + "]"));
        }
        public function isNoType():Boolean{
            return ((this == NO_TYPE));
        }
        public function isDefault():Boolean{
            return ((this == DEFAULT));
        }
        public function isWarrant():Boolean{
            return ((this == WARRANT));
        }
        public function isDerivativesWarrant():Boolean{
            return ((this == DERIVATIVES_WARRANT));
        }
        public function isNormal():Boolean{
            return ((this == NORMAL));
        }
        public function isETF():Boolean{
            return ((this == ETF));
        }
        public function isAllWarrant():Boolean{
            return (((this.isWarrant()) || (this.isDerivativesWarrant())));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class OrderResponseStatus {

        public static const NO_STATUS:OrderResponseStatus = new OrderResponseStatus("No Status", "");
;
        public static const SUCCESS:OrderResponseStatus = new OrderResponseStatus("Success", "T");
;
        public static const FAILED:OrderResponseStatus = new OrderResponseStatus("Failed", "F");
;
        public static const WARNING:OrderResponseStatus = new OrderResponseStatus("Warning", "W");
;

        public static var ALL:Array = new Array(SUCCESS, FAILED, WARNING);
        private static var orderMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _orderValue:String;

        public function OrderResponseStatus(name:String, orderValue:String){
            super();
            this._name = name;
            this._orderValue = orderValue;
        }
        private static function initMap(){
            var type:OrderResponseStatus;
            for each (type in ALL) {
                orderMap[type.orderValue] = type;
            };
        }
        public static function lookupFromOrder(orderValue:String){
            var orderResponseStatus:OrderResponseStatus = OrderResponseStatus(orderMap[orderValue]);
            if (orderResponseStatus == null){
                orderResponseStatus = OrderResponseStatus.NO_STATUS;
            };
            return (orderResponseStatus);
        }

        public function get name():String{
            return (this._name);
        }
        public function get orderValue():String{
            return (this._orderValue);
        }
        public function toString():String{
            return ((("OrderResponseStatus[" + this._name) + "]"));
        }
        public function isSuccess():Boolean{
            return ((this == SUCCESS));
        }
        public function isFailed():Boolean{
            return ((this == FAILED));
        }
        public function isWarning():Boolean{
            return ((this == WARNING));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class ChartType {

        public static const NO_TYPE:ChartType = new ChartType("No Type", -1);
;
        public static const PRICE:ChartType = new ChartType("Price", 0);
;
        public static const PERCENT:ChartType = new ChartType("Percent", 1);
;
        public static const SCALE:ChartType = new ChartType("Scale", 2);
;
        public static const PRICE_VALUE:ChartType = new ChartType("Price Value", 3);
;

        private static var ALL:Array = new Array(PRICE, PERCENT, SCALE, PRICE_VALUE);
        private static var feedMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _feedValue:int;

        public function ChartType(name:String, feedValue:int){
            super();
            this._name = name;
            this._feedValue = feedValue;
        }
        private static function initMap():void{
            var obj:ChartType;
            for each (obj in ALL) {
                feedMap[obj.feedValue] = obj;
            };
        }
        public static function lookupFromFeed(feedValue:int):ChartType{
            var obj:ChartType = feedMap[feedValue];
            if (obj == null){
                return (NO_TYPE);
            };
            return (obj);
        }

        public function get name():String{
            return (this._name);
        }
        public function get feedValue():int{
            return (this._feedValue);
        }
        public function isPriceValue():Boolean{
            return ((this == PRICE_VALUE));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class Direction {

        public static const UP = new Direction("Up");
;
        public static const DOWN = new Direction("Down");
;
        public static const LEFT = new Direction("Left");
;
        public static const RIGHT = new Direction("Right");
;

        private var _name:String;

        public function Direction(name:String){
            super();
            this._name = name;
        }
        public function get name():String{
            return (this._name);
        }
        public function isDown():Boolean{
            return ((this == DOWN));
        }
        public function isUp():Boolean{
            return ((this == UP));
        }
        public function isLeft():Boolean{
            return ((this == LEFT));
        }
        public function isRight():Boolean{
            return ((this == RIGHT));
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class ApplicationName {

        public static const STREAMING:String = "Streaming5";
        public static const OPTIONS_WIZARD:String = "Options Wizard";

        public function ApplicationName(){
            super();
        }
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class OrderEquityServiceType {

        public static const NO_TYPE:OrderEquityServiceType = new OrderEquityServiceType("No Type", "");
;
        public static const PLACE_OR_CANCEL_ORDER:OrderEquityServiceType = new OrderEquityServiceType("Place or Cancel Order", "PlaceOrder");
;
        public static const ACCOUNT_INFO:OrderEquityServiceType = new OrderEquityServiceType("Account Information", "AccountInfo");
;
        public static const PORTFOLIO:OrderEquityServiceType = new OrderEquityServiceType("Portfolio", "Portfolio");
;
        public static const ORDER_STATUS:OrderEquityServiceType = new OrderEquityServiceType("Order Status", "OrderStatus");
;
        public static const ORDER_STATUS_BY_ORDER_NUMBER:OrderEquityServiceType = new OrderEquityServiceType("Order Status By Order Number", "OrderStatusByOrderNo");
;
        public static const DEAL_SUMMARY:OrderEquityServiceType = new OrderEquityServiceType("Deal Summary", "DealSummary");
;

        public static var ALL:Array = new Array(NO_TYPE, PLACE_OR_CANCEL_ORDER, ACCOUNT_INFO, PORTFOLIO, ORDER_STATUS, DEAL_SUMMARY, ORDER_STATUS_BY_ORDER_NUMBER);
        private static var ID_MAP:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _id:String;

        public function OrderEquityServiceType(name:String, id:String){
            super();
            this._name = name;
            this._id = id;
        }
        private static function initDict(){
            var service:OrderEquityServiceType;
            for each (service in ALL) {
                ID_MAP[service.id] = service;
            };
        }
        public static function lookUpFromId(id:String):OrderEquityServiceType{
            return (OrderEquityServiceType(ID_MAP[id]));
        }

        public function get name():String{
            return (this._name);
        }
        public function get id():String{
            return (this._id);
        }
        public function toString():String{
            return ((("OrderEquityServiceType[" + this._name) + "]"));
        }

        initDict();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class Language {

        public static const NO_TYPE:Language = new Language("No Type", "");
;
        public static const THAI:Language = new Language("Thai", "TH");
;
        public static const ENGLISH:Language = new Language("English", "EN");
;

        public static var ALL:Array = new Array(NO_TYPE, THAI, ENGLISH);
        private static var feedMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _feedValue:String;

        public function Language(name:String, feedValue:String){
            super();
            this._name = name;
            this._feedValue = feedValue;
        }
        private static function initMap(){
            var type:Language;
            for each (type in ALL) {
                feedMap[type._feedValue] = type;
            };
        }
        public static function lookupFromFeed(feedValue:String):Language{
            var type:Language = feedMap[feedValue];
            if (type == null){
                return (NO_TYPE);
            };
            return (type);
        }

        public function get name():String{
            return (this._name);
        }
        public function get feedValue():String{
            return (this._feedValue);
        }
        public function toString():String{
            return ((("Language[" + this._name) + "]"));
        }
        public function isThai():Boolean{
            return ((this == THAI));
        }
        public function isEnglish():Boolean{
            return ((this == ENGLISH));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class CalendarType {

        public static const NO_TYPE:CalendarType = new CalendarType("No Type", "");
;
        public static const XD:CalendarType = new CalendarType("XD", "XD");
;
        public static const XE:CalendarType = new CalendarType("XE", "XE");
;
        public static const XM:CalendarType = new CalendarType("XM", "XM");
;
        public static const XR:CalendarType = new CalendarType("XR", "XR");
;
        public static const XW:CalendarType = new CalendarType("XW", "XW");
;
        public static const XB:CalendarType = new CalendarType("XB", "XB");
;
        public static const XN:CalendarType = new CalendarType("XN", "XN");
;

        private static var ALL:Array = new Array(XD, XE, XM, XR, XW, XB, XN);
        private static var feedMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _feedValue:String;

        public function CalendarType(name:String, feedValue:String){
            super();
            this._name = name;
            this._feedValue = feedValue;
        }
        private static function initMap():void{
            var obj:CalendarType;
            for each (obj in ALL) {
                feedMap[obj.feedValue] = obj;
            };
        }
        public static function lookupFromFeed(feedValue:String):CalendarType{
            var obj:CalendarType = feedMap[feedValue];
            if (obj == null){
                return (NO_TYPE);
            };
            return (obj);
        }

        public function get name():String{
            return (this._name);
        }
        public function get feedValue():String{
            return (this._feedValue);
        }
        public function isXD():Boolean{
            return ((this == XD));
        }
        public function isXE():Boolean{
            return ((this == XE));
        }
        public function isXM():Boolean{
            return ((this == XM));
        }
        public function isXR():Boolean{
            return ((this == XR));
        }
        public function isXW():Boolean{
            return ((this == XW));
        }
        public function isXB():Boolean{
            return ((this == XB));
        }
        public function isXN():Boolean{
            return ((this == XN));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class UserRole {

        public static const NO_TYPE:UserRole = new UserRole("No Type", "");
;
        public static const INVESTOR:UserRole = new UserRole("Investor", "INTERNET");
;
        public static const MARKETREP1:UserRole = new UserRole("MarketRep1", "MARKETREP1");
;
        public static const MARKETREP2:UserRole = new UserRole("MarketRep2", "MARKETREP2");
;

        public static var ALL:Array = new Array(INVESTOR, MARKETREP1, MARKETREP2);
        private static var ID_MAP:Dictionary = new Dictionary();

        var _name:String;
        var _feed:String;

        public function UserRole(name:String, feed:String){
            super();
            this._name = name;
            this._feed = feed;
        }
        private static function initDict():void{
            var role:UserRole;
            for each (role in ALL) {
                ID_MAP[role.feed] = role;
            };
        }
        public static function lookupFromId(id:String):UserRole{
            var role:UserRole = UserRole(ID_MAP[id]);
            if (role == null){
                return (NO_TYPE);
            };
            return (role);
        }

        public function get name():String{
            return (this._name);
        }
        public function get feed():String{
            return (this._feed);
        }
        public function isNoType():Boolean{
            return ((this == NO_TYPE));
        }
        public function isInvestor():Boolean{
            return ((this == INVESTOR));
        }
        public function isMarketRep1():Boolean{
            return ((this == MARKETREP1));
        }
        public function isMarketRep2():Boolean{
            return ((this == MARKETREP2));
        }
        public function isMarketRep():Boolean{
            return (((this.isMarketRep1()) || (this.isMarketRep2())));
        }

        initDict();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class StreamingMode {

        public static const PRO:StreamingMode = new StreamingMode("Pro", "pro");
;
        public static const LITE:StreamingMode = new StreamingMode("Lite", "lite");
;
        public static const MINI:StreamingMode = new StreamingMode("Mini", "mini");
;

        private static var ALL:Array = [PRO, LITE, MINI];

        protected var _name:String;
        protected var _value:String;

        public function StreamingMode(name:String, value:String){
            super();
            this._name = name;
            this._value = value;
        }
        public static function lookUp(str:String):StreamingMode{
            var mode:StreamingMode;
            for each (mode in ALL) {
                if (str == mode.value){
                    return (mode);
                };
            };
            return (LITE);
        }

        public function isPro():Boolean{
            return ((this == PRO));
        }
        public function isLite():Boolean{
            return ((this == LITE));
        }
        public function isMini():Boolean{
            return ((this == MINI));
        }
        public function get name():String{
            return (this._name);
        }
        public function get value():String{
            return (this._value);
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class InstrumentInfoCurrentState {

        public static const PRE_OPEN_1:InstrumentInfoCurrentState = new InstrumentInfoCurrentState("Pre-Open 1", 1, "Proj. Open 1", "Proj. Open 1", "Proj. Open 1");
;
        public static const OPEN_1:InstrumentInfoCurrentState = new InstrumentInfoCurrentState("Open 1", 2, "Open 1", "Open 1", "Open 1");
;
        public static const PRE_OPEN_2:InstrumentInfoCurrentState = new InstrumentInfoCurrentState("Pre-Open 2", 3, "Proj. Open 2", "Proj. Open 2", "Proj. Open 2");
;
        public static const OPEN_2:InstrumentInfoCurrentState = new InstrumentInfoCurrentState("Open 2", 4, "Open 2", "Open 2", "Open 2");
;
        public static const PRE_CLOSE:InstrumentInfoCurrentState = new InstrumentInfoCurrentState("Pre-Close", 5, "Proj. Close", "", "");
;
        public static const CLOSE:InstrumentInfoCurrentState = new InstrumentInfoCurrentState("Close", 6, "Close", "Close", "Close");
;
        public static const SETTLE:InstrumentInfoCurrentState = new InstrumentInfoCurrentState("Settle", 7, "Close", "Settlement", "Settlement");
;
        public static const PREVIOUS_SETTLE:InstrumentInfoCurrentState = new InstrumentInfoCurrentState("Previous Settle", 8, "Close", "P. Settlement", "P. Settlement");
;
        public static const PRE_OPEN_0:InstrumentInfoCurrentState = new InstrumentInfoCurrentState("Pre-Open 0", 9, "Close", "Proj. Open 0", "Proj. Open 0");
;
        public static const OPEN_0:InstrumentInfoCurrentState = new InstrumentInfoCurrentState("Open 0", 10, "Close", "Open 0", "Open 0");
;
        public static const PRE_OPEN:InstrumentInfoCurrentState = new InstrumentInfoCurrentState("Pre-Open", 11, "Proj. Open", "", "");
;
        public static const OPEN:InstrumentInfoCurrentState = new InstrumentInfoCurrentState("Open", 12, "", "", "");
;
        public static const NO_STATE:InstrumentInfoCurrentState = new InstrumentInfoCurrentState("", -1, "", "", "");
;

        public static var ALL:Array = new Array(PRE_OPEN_1, OPEN_1, PRE_OPEN_2, OPEN_2, PRE_CLOSE, CLOSE, SETTLE, PREVIOUS_SETTLE, PRE_OPEN_0, OPEN_0, PRE_OPEN, OPEN, NO_STATE);

        protected var _name:String;
        protected var _displayEquity:String;
        protected var _displayDerivativesMarket:String;
        protected var _displayDerivativesQuote:String;
        protected var _id:int;

        public function InstrumentInfoCurrentState(name:String, id:int, displayEquity:String, displayDerivativesMarket:String, displayDerivativesQuote:String){
            super();
            this._name = name;
            this._displayEquity = displayEquity;
            this._displayDerivativesMarket = displayDerivativesMarket;
            this._displayDerivativesQuote = displayDerivativesQuote;
            this._id = id;
        }
        public static function lookupByName(name:String):InstrumentInfoCurrentState{
            var i:int;
            while (i < ALL.length) {
                if (ALL[i].name == name){
                    return (ALL[i]);
                };
                i++;
            };
            return (NO_STATE);
        }
        public static function lookupById(id:int):InstrumentInfoCurrentState{
            var i:int;
            while (i < ALL.length) {
                if (ALL[i].id == id){
                    return (ALL[i]);
                };
                i++;
            };
            return (NO_STATE);
        }

        public function get name():String{
            return (this._name);
        }
        public function get id():int{
            return (this._id);
        }
        public function get displayEquity():String{
            return (this._displayEquity);
        }
        public function get displayDerivativesMarket():String{
            return (this._displayDerivativesMarket);
        }
        public function get displayDerivativesQuote():String{
            return (this._displayDerivativesQuote);
        }
        public function isPreOpen1():Boolean{
            return ((this == PRE_OPEN_1));
        }
        public function isOpen1():Boolean{
            return ((this == OPEN_1));
        }
        public function isPreOpen2():Boolean{
            return ((this == PRE_OPEN_2));
        }
        public function isOpen2():Boolean{
            return ((this == OPEN_2));
        }
        public function isPreClose():Boolean{
            return ((this == PRE_CLOSE));
        }
        public function isClose():Boolean{
            return ((this == CLOSE));
        }
        public function isSettle():Boolean{
            return ((this == SETTLE));
        }
        public function isPreviousSettle():Boolean{
            return ((this == PREVIOUS_SETTLE));
        }
        public function isPreOpen0():Boolean{
            return ((this == PRE_OPEN_0));
        }
        public function isOpen0():Boolean{
            return ((this == OPEN_0));
        }
        public function isPreOpen():Boolean{
            return ((this == PRE_OPEN));
        }
        public function isOpen():Boolean{
            return ((this == OPEN));
        }
        public function isNoState():Boolean{
            return ((this == NO_STATE));
        }
        public function isAllPreOpenClose():Boolean{
            return (((((((((this.isPreOpen()) || (this.isPreOpen0()))) || (this.isPreOpen1()))) || (this.isPreOpen2()))) || (this.isPreClose())));
        }
        public function toString():String{
            return ((((("InstrumentInfoCurrentState[name:" + this._name) + ", id:") + this._id) + "]"));
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class OptionsGreekValueVolatilityMode {

        public static const NO_TYPE:OptionsGreekValueVolatilityMode = new OptionsGreekValueVolatilityMode("No Type", "");
;
        public static const HISTORICAL:OptionsGreekValueVolatilityMode = new OptionsGreekValueVolatilityMode("Historical", "historical");
;
        public static const IMPLIED:OptionsGreekValueVolatilityMode = new OptionsGreekValueVolatilityMode("Implied", "implied");
;
        public static const MANUAL:OptionsGreekValueVolatilityMode = new OptionsGreekValueVolatilityMode("Manual", "manual");
;
        private static const ALL:Array = new Array(NO_TYPE, HISTORICAL, IMPLIED, MANUAL);

        private static var feedMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _id:String;

        public function OptionsGreekValueVolatilityMode(name:String, id:String){
            super();
            this._name = name;
            this._id = id;
        }
        private static function initMap():void{
            var type:OptionsGreekValueVolatilityMode;
            for each (type in ALL) {
                feedMap[type.id] = type;
            };
        }
        public static function lookup(id:String):OptionsGreekValueVolatilityMode{
            var type:OptionsGreekValueVolatilityMode = feedMap[id];
            if (type == null){
                return (NO_TYPE);
            };
            return (type);
        }

        public function isNoType():Boolean{
            return ((this == NO_TYPE));
        }
        public function isHistorical():Boolean{
            return ((this == HISTORICAL));
        }
        public function isImplied():Boolean{
            return ((this == IMPLIED));
        }
        public function isManual():Boolean{
            return ((this == MANUAL));
        }
        public function get name():String{
            return (this._name);
        }
        public function set name(value:String):void{
            this._name = value;
        }
        public function get id():String{
            return (this._id);
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class InstrumentType {

        public static const NO_TYPE:InstrumentType = new InstrumentType("No Type", -1);
;
        public static const EQUITY:InstrumentType = new InstrumentType("Equity", 0);
;
        public static const FUTURES:InstrumentType = new InstrumentType("Futures", 1);
;
        public static const OPTIONS:InstrumentType = new InstrumentType("Options", 2);
;
        public static const INDEX:InstrumentType = new InstrumentType("Index", 3);
;

        public static var ALL:Array = new Array(NO_TYPE, EQUITY, FUTURES, OPTIONS, INDEX);
        private static var feedMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _feedValue:int;

        public function InstrumentType(name:String, feedValue:int){
            super();
            this._name = name;
            this._feedValue = feedValue;
        }
        private static function initMap(){
            var type:InstrumentType;
            for each (type in ALL) {
                feedMap[type.feedValue] = type;
            };
        }
        public static function lookUpFromFeed(feedValue:int):InstrumentType{
            var type:InstrumentType = feedMap[feedValue];
            if (type == null){
                return (NO_TYPE);
            };
            return (type);
        }

        public function get name():String{
            return (this._name);
        }
        public function get feedValue():int{
            return (this._feedValue);
        }
        public function toString():String{
            return ((("InstrumentType[name:" + this._name) + "]"));
        }
        public function isNoType():Boolean{
            return ((this == NO_TYPE));
        }
        public function isEquity():Boolean{
            return ((this == EQUITY));
        }
        public function isFutures():Boolean{
            return ((this == FUTURES));
        }
        public function isOptions():Boolean{
            return ((this == OPTIONS));
        }
        public function isDerivatives():Boolean{
            return (((this.isFutures()) || (this.isOptions())));
        }
        public function isIndex():Boolean{
            return ((this == INDEX));
        }
        public function isInstrument():Boolean{
            return (((this.isEquity()) || (this.isDerivatives())));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class ConfigType {

        public static const NO_TYPE:ConfigType = new ConfigType("No Type", "");
;
        public static const FAVOURITE:ConfigType = new ConfigType("Favourite", "Favourite", true);
;
        public static const TEMPLATE:ConfigType = new ConfigType("Template", "Template", true);
;
        public static const WIDGET_PAGE:ConfigType = new ConfigType("Widget Page", "UserWidgetPage", true);
;
        public static const WIDGET_PAGE_LIST:ConfigType = new ConfigType("Widget Page List", "UserWidgetPageList", true);
;
        public static const WIDGET_RESET_PROFILE:ConfigType = new ConfigType("Reset Widget Profile", "ResetProfile", true, true);
;
        public static const WIDGET_GROUP:ConfigType = new ConfigType("Widget Group", "");
;
        public static const WIDGET_COMPONENT:ConfigType = new ConfigType("Widget Component", "");
;
        public static const ORDER_ALERT:ConfigType = new ConfigType("Order Alert", "OrderAlertSetting", true);
;
        public static const PRICE_VOLUME_ALERT:ConfigType = new ConfigType("Price Volume Alert", "PriceVolAlertSetting", true);
;
        public static const PRICE_VOLUME_CONDITION:ConfigType = new ConfigType("Price Volume Condition", "PriceVolCondition", true);
;
        public static const SHORTCUT_ACCOUNT:ConfigType = new ConfigType("Shortcut Account", "ShortcutAccount", true);
;
        public static const SHORTCUT_SYMBOL:ConfigType = new ConfigType("Shortcut Symbol", "ShortcutSymbol", true);
;
        public static const SHORTCUT_KEYBOARD:ConfigType = new ConfigType("Shortcut Keyboard", "ShortcutKeyboard");
;
        public static const NOTIFY_LIST:ConfigType = new ConfigType("Notify List", "NotifyList", true);
;
        public static const NOTIFICATION_LAST_VIEW:ConfigType = new ConfigType("Notification Last View", "NotificationLastView", true);
;
        public static const DEFAULT_MARKET:ConfigType = new ConfigType("Default Market", "DefaultMarket", true, true);
;
        public static const TICKER:ConfigType = new ConfigType("Ticker", "Ticker");
;
        public static const STRING:ConfigType = new ConfigType("String", "String");
;
        public static const JSON_OBJ:ConfigType = new ConfigType("JSON", "JSON");
;
        public static const MULTIPLE_ORDER:ConfigType = new ConfigType("MultipleOrder", "MultipleOrder");
;
        public static const MULTIPLE_ORDER_DERIVATIVES:ConfigType = new ConfigType("MultipleOrderDerivatives", "MultipleOrderDerivatives");
;
        public static const ORDER_ENTRY:ConfigType = new ConfigType("OrderEntry", "OrderEntry", true);
;
        public static const PASSWORD_PIN:ConfigType = new ConfigType("PasswordPin", "");
;
        public static const SCREEN:ConfigType = new ConfigType("Screen", "ScreenType", true, true);
;
        public static const SCREEN_PRO:ConfigType = new ConfigType("Screen", "ScreenTypePro", true, true);
;
        public static const APPLICATION_MODE:ConfigType = new ConfigType("Application Mode", "ApplicationType", true, true);
;
        public static const LANGUAGE:ConfigType = new ConfigType("Language", "Language", true);
;
        public static const AUTO_POSITION:ConfigType = new ConfigType("AutoPosition", "AutoPosition", true);
;
        public static const AUTO_ADJUST_SIZE:ConfigType = new ConfigType("AutoAdjustSize", "AutoAdjustType", true, true);
;
        public static const GENERIC:ConfigType = new ConfigType("Generic", "Custom", true);
;
        public static const GENERIC_BOOLEAN:ConfigType = new ConfigType("GenericBoolean", "Custom", true);
;
        public static const GENERIC_STRING:ConfigType = new ConfigType("GenericString", "Custom", true);
;
        public static const GENERIC_DISPLAY_TEXT:ConfigType = new ConfigType("DisplayText", "Custom", true, true);
;
        public static const GENERIC_VERSION:ConfigType = new ConfigType("Version", "Custom", true);
;
        public static const GENERIC_QUALITY:ConfigType = new ConfigType("Quality", "Custom", true, true);
;

        private static var ALL:Array = [FAVOURITE, TEMPLATE, WIDGET_PAGE, ORDER_ALERT, PRICE_VOLUME_ALERT, PRICE_VOLUME_CONDITION, SHORTCUT_ACCOUNT, SHORTCUT_SYMBOL, SHORTCUT_KEYBOARD, NOTIFY_LIST, DEFAULT_MARKET, TICKER, STRING, JSON_OBJ, ORDER_ENTRY, PASSWORD_PIN, NOTIFICATION_LAST_VIEW, LANGUAGE, APPLICATION_MODE, MULTIPLE_ORDER, AUTO_POSITION, AUTO_ADJUST_SIZE, MULTIPLE_ORDER_DERIVATIVES, GENERIC, GENERIC_BOOLEAN, GENERIC_STRING, GENERIC_DISPLAY_TEXT, GENERIC_VERSION];
        private static var ID_MAP:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _id:String;
        protected var _canUpload:Boolean;
        protected var _needReload:Boolean;

        public function ConfigType(name:String, id:String, canUpload:Boolean=false, needReload:Boolean=false){
            super();
            this._name = name;
            this._id = id;
            this._canUpload = canUpload;
            this._needReload = needReload;
        }
        private static function initMap():void{
            var type:ConfigType;
            for each (type in ALL) {
                ID_MAP[type.id] = type;
            };
        }
        public static function lookUp(id:String):ConfigType{
            var type:ConfigType = ID_MAP[id];
            if (type == null){
                return (NO_TYPE);
            };
            return (type);
        }

        public function get name():String{
            return (this._name);
        }
        public function get id():String{
            return (this._id);
        }
        public function get canUpload():Boolean{
            return (this._canUpload);
        }
        public function get needReload():Boolean{
            return (this._needReload);
        }
        public function toString():String{
            return ((("ConfigType[" + this._name) + "]"));
        }
        public function isPriceVolumeAlertConfig():Boolean{
            return ((this == PRICE_VOLUME_ALERT));
        }
        public function isOrderAlertConfig():Boolean{
            return ((this == ORDER_ALERT));
        }
        public function isAutoPositionConfig():Boolean{
            return ((this == AUTO_POSITION));
        }
        public function isPriceVolumeConditionConfig():Boolean{
            return ((this == PRICE_VOLUME_CONDITION));
        }
        public function isPasswordPin():Boolean{
            return ((this == PASSWORD_PIN));
        }
        public function isOrderEntry():Boolean{
            return ((this == ORDER_ENTRY));
        }
        public function isSymbolShortcutConfig():Boolean{
            return ((this == SHORTCUT_SYMBOL));
        }
        public function isLanguage():Boolean{
            return ((this == LANGUAGE));
        }
        public function isUserWidgetPageConfig():Boolean{
            return ((this == WIDGET_PAGE));
        }
        public function isGenericConfig():Boolean{
            return ((((((((((((this == GENERIC)) || ((this == GENERIC_DISPLAY_TEXT)))) || ((this == GENERIC_STRING)))) || ((this == GENERIC_BOOLEAN)))) || ((this == GENERIC_VERSION)))) || ((this == GENERIC_QUALITY))));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class DerivativesValidity {

        public static const NO_TYPE:DerivativesValidity = new DerivativesValidity("No Type", "", -1);
;
        public static const ALL_TYPE:DerivativesValidity = new DerivativesValidity("All Type", "", -1);
;
        public static const DATE:DerivativesValidity = new DerivativesValidity("Date", "Date", 0, "Date");
;
        public static const DAY:DerivativesValidity = new DerivativesValidity("Day", "Day", 1, "Day");
;
        public static const FOK:DerivativesValidity = new DerivativesValidity("FOK", "FoK", 4, "FOK");
;
        public static const AUCTION:DerivativesValidity = new DerivativesValidity("Auction", "", -1, "Auction");
;
        public static const AUTO_M:DerivativesValidity = new DerivativesValidity("Auto-M", "", -1, "Auto-M");
;
        public static const CANCEL:DerivativesValidity = new DerivativesValidity("Cancel", "", -1, "Cancel");
;
        public static const IOC:DerivativesValidity = new DerivativesValidity("IOC", "", -1, "IOC");
;
        public static const SESSION:DerivativesValidity = new DerivativesValidity("Session", "", -1, "Session");
;
        public static const TIME:DerivativesValidity = new DerivativesValidity("Time", "", -1, "Time");
;
        public static const EXPIRE:DerivativesValidity = new DerivativesValidity("Expire", "Expire", 2);
;
        public static const FAK:DerivativesValidity = new DerivativesValidity("FAK", "FaK", 3);
;

        public static var ALL:Array = new Array(NO_TYPE, ALL_TYPE, DATE, DAY, EXPIRE, FOK, FAK, AUCTION, AUTO_M, CANCEL, IOC, SESSION, TIME);
        private static var orderMap:Dictionary = new Dictionary();
        private static var feedMap:Dictionary = new Dictionary();
        private static var newOrderMap:Dictionary = new Dictionary();

        protected var _name:String;
        protected var _orderValue:String;
        protected var _feedValue:int;
        protected var _newOrderValue:String;

        public function DerivativesValidity(name:String, orderValue:String, feedValue:int, newOrderValue:String=""){
            super();
            this._name = name;
            this._orderValue = orderValue;
            this._feedValue = feedValue;
            this._newOrderValue = newOrderValue;
        }
        private static function initMap(){
            var type:DerivativesValidity;
            for each (type in ALL) {
                orderMap[type._orderValue] = type;
                feedMap[type._feedValue] = type;
                newOrderMap[type._newOrderValue] = type;
            };
        }
        public static function lookupFromOrder(orderValue:String):DerivativesValidity{
            var type:DerivativesValidity = orderMap[orderValue];
            if (type == null){
                return (NO_TYPE);
            };
            return (type);
        }
        public static function lookupFromNewOrder(orderValue:String):DerivativesValidity{
            var type:DerivativesValidity = newOrderMap[orderValue];
            if (type == null){
                return (NO_TYPE);
            };
            return (type);
        }
        public static function lookupFromFeed(feedValue:int):DerivativesValidity{
            var type:DerivativesValidity = feedMap[feedValue];
            if (type == null){
                return (NO_TYPE);
            };
            return (type);
        }

        public function get name():String{
            return (this._name);
        }
        public function get orderValue():String{
            return (this._orderValue);
        }
        public function get newOrderValue():String{
            return (this._newOrderValue);
        }
        public function toString():String{
            return ((("DerivativesValidity[" + this._name) + "]"));
        }
        public function isDay():Boolean{
            return ((this == DAY));
        }
        public function isFOK():Boolean{
            return ((this == FOK));
        }
        public function isFAK():Boolean{
            return ((this == FAK));
        }
        public function isDate():Boolean{
            return ((this == DATE));
        }
        public function isTime():Boolean{
            return ((this == TIME));
        }
        public function isSession():Boolean{
            return ((this == SESSION));
        }
        public function isExpire():Boolean{
            return ((this == EXPIRE));
        }
        public function isNoType():Boolean{
            return ((this == NO_TYPE));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class Delimiter {

        public static const LEVEL1 = new Delimiter("Level1", "|");
;
        public static const LEVEL2 = new Delimiter("Level2", "^");
;
        public static const LEVEL3 = new Delimiter("Level3", "~");
;
        public static const LEVEL4 = new Delimiter("Level4", "$");
;
        public static const COMMA = new Delimiter("Comma", ",");
;

        protected var _name:String;
        protected var _value:String;

        public function Delimiter(name:String, value:String){
            super();
            this._name = name;
            this._value = value;
        }
        public function get name():String{
            return (this._name);
        }
        public function get value():String{
            return (this._value);
        }
        public function toString():String{
            return (this.value);
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class MessageFormat {

        public static const STRING:MessageFormat = new MessageFormat("String");
;
        public static const BINARY:MessageFormat = new MessageFormat("Binary");
;
        public static const STRING_GENERATE_KEY:MessageFormat = new MessageFormat("StringGenerateKey");
;
        public static const STRING_OPTIONS_COMM:MessageFormat = new MessageFormat("StringOptionsCommission");
;
        public static const DISPATCHER_BINARY:MessageFormat = new MessageFormat("DispatcherBinary");
;
        public static const DISPATCHER_BINARY_PULL:MessageFormat = new MessageFormat("DispatcherBinaryPull");
;
        public static const DISPATCHER_STRING:MessageFormat = new MessageFormat("DispatcherString");
;
        public static const ORDER_EQUITY:MessageFormat = new MessageFormat("OrderEquity");
;
        public static const ORDER_DERIVATIVES:MessageFormat = new MessageFormat("OrderDerivatives");
;
        public static const EMPTY:MessageFormat = new MessageFormat("Empty");
;
        public static const STUB:MessageFormat = new MessageFormat("Stub");
;
        public static const ACCOUNT_NAME:MessageFormat = new MessageFormat("AccountName");
;
        public static const ACCOUNT_LIST:MessageFormat = new MessageFormat("AccountList");
;
        public static const URL:MessageFormat = new MessageFormat("URL");
;
        public static const SYNC_TIME:MessageFormat = new MessageFormat("SyncTime");
;
        public static const USER_CHECK:MessageFormat = new MessageFormat("UserCheck");
;
        public static const STATIC_DATA:MessageFormat = new MessageFormat("StaticData");
;
        public static const NEWS_INFORMATION:MessageFormat = new MessageFormat("NewsInformtaion");
;
        public static const OPPDAY:MessageFormat = new MessageFormat("OppDay");
;
        public static const INSTRUMENT_ID_VALIDATOR:MessageFormat = new MessageFormat("InstrumentIdValidator");
;
        public static const ORDER_AJAX_EQUITY:MessageFormat = new MessageFormat("OrderAjaxEquity");
;
        public static const ORDER_AJAX_DERIVATIVES:MessageFormat = new MessageFormat("OrderAjaxDerivatives");
;
        public static const CHANGE_EQUITY:MessageFormat = new MessageFormat("ChangeEquity");
;
        public static const CHANGE_DERIVATIVES:MessageFormat = new MessageFormat("ChangeDerivatives");
;
        public static const DATA_PROVIDER_JSON:MessageFormat = new MessageFormat("DataProviderJSON");
;
        public static const BLOCK_TRADE:MessageFormat = new MessageFormat("BlockTrade");
;
        public static const BLOCK_TRADE_INFO:MessageFormat = new MessageFormat("BlockTradeInfo");
;
        public static const ACCOUNT_INFO_JSON:MessageFormat = new MessageFormat("AccountInformationJson");
;
        public static const ACCOUNT_LIST_HIERACHY_DERIVAITVES:MessageFormat = new MessageFormat("AccountListHierachyDerivatives");
;
        public static const FAST_QUOTE_DERIVATIVES:MessageFormat = new MessageFormat("FastQuoteDerivatievs");
;
        public static const MULTIPLE_ORDER_EQUITY:MessageFormat = new MessageFormat("MultipleOrderEquity");
;
        public static const MULTIPLE_ORDER_FAVOURITE_EQUITY:MessageFormat = new MessageFormat("MultipleOrderFavouriteEquity");
;
        public static const MULTIPLE_ORDER_DERIVATIVES:MessageFormat = new MessageFormat("MultipleOrderDerivatives");
;
        public static const MULTIPLE_ORDER_FAVOURITE_DERIVATIVES:MessageFormat = new MessageFormat("MultipleOrderFavouriteDerivatives");
;
        public static const TISCO_JSON:MessageFormat = new MessageFormat("TiscoJson");
;
        public static const DBSV_XML:MessageFormat = new MessageFormat("DBSVXml");
;
        public static const DBSV_JSON:MessageFormat = new MessageFormat("DBSVJson");
;

        protected var _name:String;

        public function MessageFormat(name:String){
            super();
            this._name = name;
        }
        public function get name():String{
            return (this._name);
        }
        public function toString():String{
            return ((("MessageFormat:[name=" + this.name) + "]"));
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class FeedStatus {

        public static const CONNECT:FeedStatus = new FeedStatus("Connect");
;
        public static const DISCONNECT:FeedStatus = new FeedStatus("Disconnect");
;
        public static const FAIL:FeedStatus = new FeedStatus("Fail");
;
        public static const TIMEOUT:FeedStatus = new FeedStatus("Timeout");
;
        public static const HTTP_FAILED:FeedStatus = new FeedStatus("HTTP Failed");
;
        public static const OFFLINE:FeedStatus = new FeedStatus("Offline");
;

        protected var _name:String;

        public function FeedStatus(name:String){
            super();
            this._name = name;
        }
        public function get name():String{
            return (this._name);
        }
        public function isConnect():Boolean{
            return ((this == CONNECT));
        }
        public function isDisconnect():Boolean{
            return ((this == DISCONNECT));
        }
        public function isFail():Boolean{
            return ((this == FAIL));
        }
        public function isHttpFailed():Boolean{
            return ((this == HTTP_FAILED));
        }
        public function isOffline():Boolean{
            return ((this == OFFLINE));
        }
        public function isTimeout():Boolean{
            return ((this == TIMEOUT));
        }
        public function toString():String{
            return ((("FeedStatus[name:" + this._name) + "]"));
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class EquityTickerSubType extends TickerSubType {

        public static const COMMON:EquityTickerSubType = new EquityTickerSubType("Common", 0);
;
        public static const FOREIGN:EquityTickerSubType = new EquityTickerSubType("Foreign", 1);
;
        public static const ETF:EquityTickerSubType = new EquityTickerSubType("ETF", 2);
;
        public static const DERIVATIVES_WARRANT:EquityTickerSubType = new EquityTickerSubType("Derivatives Warrant", 3);
;
        public static const WARRANT:EquityTickerSubType = new EquityTickerSubType("Warrant", 4);
;
        public static const CONVERTIBLE:EquityTickerSubType = new EquityTickerSubType("Convertible", 5);
;
        public static const PREFERRED:EquityTickerSubType = new EquityTickerSubType("Preferred", 6);
;
        public static const UNIT_TRUST:EquityTickerSubType = new EquityTickerSubType("UnitTrust", 7);
;

        public static var ALL:Array = new Array(NO_TYPE, COMMON, FOREIGN, ETF, DERIVATIVES_WARRANT, WARRANT, CONVERTIBLE, PREFERRED, UNIT_TRUST);
        private static var feedMap:Dictionary = new Dictionary();

        public function EquityTickerSubType(name:String, feedValue:int){
            super(name, feedValue);
        }
        private static function initMap(){
            var type:TickerSubType;
            for each (type in ALL) {
                feedMap[type.feedValue] = type;
            };
        }
        public static function lookUpFromFeed(feedValue:int):TickerSubType{
            var type:TickerSubType = feedMap[feedValue];
            if (type == null){
                return (NO_TYPE);
            };
            return (type);
        }

        public function isCommon():Boolean{
            return ((this == COMMON));
        }
        public function isForeign():Boolean{
            return ((this == FOREIGN));
        }
        public function isWarrant():Boolean{
            return ((this == WARRANT));
        }
        public function isDerivativesWarrant():Boolean{
            return ((this == DERIVATIVES_WARRANT));
        }
        public function isETF():Boolean{
            return ((this == ETF));
        }
        public function isConvertible():Boolean{
            return ((this == CONVERTIBLE));
        }
        public function isPreferred():Boolean{
            return ((this == PREFERRED));
        }
        public function isUnitTrust():Boolean{
            return ((this == UNIT_TRUST));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {
    import flash.utils.*;

    public class DerivativesTickerSubType extends TickerSubType {

        public static const INDEX:DerivativesTickerSubType = new DerivativesTickerSubType("Index", 0);
;
        public static const METAL:DerivativesTickerSubType = new DerivativesTickerSubType("Metal", 1);
;
        public static const STOCK:DerivativesTickerSubType = new DerivativesTickerSubType("Stock", 2);
;
        public static const INTEREST:DerivativesTickerSubType = new DerivativesTickerSubType("Interest", 3);
;
        public static const ENERGY:DerivativesTickerSubType = new DerivativesTickerSubType("Energy", 4);
;
        public static const CURRENCY:DerivativesTickerSubType = new DerivativesTickerSubType("Currency", 5);
;

        public static var ALL:Array = new Array(NO_TYPE, INDEX, METAL, STOCK, INTEREST, ENERGY, CURRENCY);
        private static var feedMap:Dictionary = new Dictionary();

        public function DerivativesTickerSubType(name:String, feedValue:int){
            super(name, feedValue);
        }
        private static function initMap(){
            var type:TickerSubType;
            for each (type in ALL) {
                feedMap[type.feedValue] = type;
            };
        }
        public static function lookUpFromFeed(feedValue:int):TickerSubType{
            var type:TickerSubType = feedMap[feedValue];
            if (type == null){
                return (NO_TYPE);
            };
            return (type);
        }

        public function isIndex():Boolean{
            return ((this == INDEX));
        }
        public function isMetal():Boolean{
            return ((this == METAL));
        }
        public function isStock():Boolean{
            return ((this == STOCK));
        }
        public function isInterest():Boolean{
            return ((this == INTEREST));
        }
        public function isEnergy():Boolean{
            return ((this == ENERGY));
        }
        public function isCurrency():Boolean{
            return ((this == CURRENCY));
        }

        initMap();
    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class Source {

        public static const SOCKET:Source = new Source("Socket");
;
        public static const HTTP_RESPONSE:Source = new Source("Http Response");
;
        public static const STUB:Source = new Source("Stub");
;
        public static const NO_SOURCE:Source = new Source("No Source");
;

        protected var _name:String;

        public function Source(name:String){
            super();
            this._name = name;
        }
        public function get name():String{
            return (this._name);
        }
        public function toString():String{
            return ((("Source:[name=" + this._name) + "]"));
        }
        public function isSoucket():Boolean{
            return ((this == SOCKET));
        }
        public function isHttpRequest():Boolean{
            return ((this == HTTP_RESPONSE));
        }
        public function isStub():Boolean{
            return ((this == STUB));
        }
        public function isNoSource():Boolean{
            return ((this == NO_SOURCE));
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.enumuration {

    public class PageName {

        public static const MARKET_WATCH:String = "Market";
        public static const BUY_SELL:String = "Click";
        public static const PORTFOLIO:String = "Portfolio";
        public static const BID_OFFER:String = "Bids Offers";
        public static const TICKER:String = "Ticker";
        public static const QUOTE:String = "Quote";
        public static const NEWS:String = "News";
        public static const RESEARCH:String = "Research";
        public static const BUY_SELL_MKT:String = "Click-Mkt";
        public static const DEAL_SUMMARY:String = "Total Deal";
        public static const ACCOUNT_INFO:String = "A/C Info";
        public static const TRADE_REPORT:String = "Trade Report";
        public static const ORDER_STATUS_SEARCH:String = "Search Order";
        public static const OPTIONS_SUMMARY:String = "Options Sum.";
        public static const TECHNICAL_CHART:String = "Technical";
        public static const PLACE_ORDER_FULL:String = "PlaceOrderFull";
        public static const MULTIPLE_ORDER:String = "MultipleOrder";
        public static const SETTING:String = "Settings";
        public static const TICKER_SETTING:String = "TickerSetting";
        public static const SYMBOL_SELECTOR:String = "SymbolSelector";
        public static const MULTIPLE_PLACE_ORDER:String = "MultiplePlaceOrder";
        public static const POPUP_ORDER:String = "PopUpOrder";
        public static const WIDGET_EDITOR:String = "WidgetEditor";
        public static const ALL:Array = [MARKET_WATCH, BUY_SELL, PORTFOLIO, BID_OFFER, TICKER, QUOTE, NEWS, RESEARCH];

        public static var customizedPageList:Array = new Array();

        public static function getStreamingPageListInvestor():Array{
            return ([MARKET_WATCH, BUY_SELL, PORTFOLIO, BID_OFFER, TICKER, QUOTE, NEWS, RESEARCH, PLACE_ORDER_FULL, MULTIPLE_ORDER, TECHNICAL_CHART]);
        }
        public static function getStreamingPageListMarketRep():Array{
            return ([MARKET_WATCH, BUY_SELL, PORTFOLIO, BID_OFFER, TICKER, QUOTE, NEWS, RESEARCH, BUY_SELL_MKT, DEAL_SUMMARY, ACCOUNT_INFO, TRADE_REPORT, ORDER_STATUS_SEARCH, PLACE_ORDER_FULL, OPTIONS_SUMMARY, MULTIPLE_ORDER, TECHNICAL_CHART]);
        }

    }
}//package com.settrade.streaming5.enumuration 
﻿package com.settrade.streaming5.widget.manager {

    public class WidgetGroupManager {

        private var currentGroupId:int;

        public function WidgetGroupManager(){
            super();
            this.currentGroupId = 0;
        }
        public function getNewGroupId():String{
            return (("Group" + this.currentGroupId++));
        }

    }
}//package com.settrade.streaming5.widget.manager 
﻿package com.settrade.streaming5.widget.enumuration {

    public class GroupMessageType {

        public static const INSTRUMENT_ID:GroupMessageType = new GroupMessageType("InstrumentId");
;
        public static const ACCOUNT:GroupMessageType = new GroupMessageType("Account");
;
        public static const REFRESH:GroupMessageType = new GroupMessageType("Refresh");
;
        public static const INSTRUMENT_ID_AND_PRICE:GroupMessageType = new GroupMessageType("InstrumentIdAndPrice");
;

        private var _name:String;

        public function GroupMessageType(name:String){
            super();
            this._name = name;
        }
        public function get name():String{
            return (this._name);
        }
        public function isInstrument():Boolean{
            return ((this == INSTRUMENT_ID));
        }
        public function isAccount():Boolean{
            return ((this == ACCOUNT));
        }
        public function isRefresh():Boolean{
            return ((this == REFRESH));
        }
        public function isInstrumentAndPrice():Boolean{
            return ((this == INSTRUMENT_ID_AND_PRICE));
        }

    }
}//package com.settrade.streaming5.widget.enumuration 
﻿package com.settrade.streaming5.widget.enumuration {

    public class WidgetPageStatus {

        public static const NO_STATUS:WidgetPageStatus = new WidgetPageStatus("No Status");
;
        public static const INITIAL:WidgetPageStatus = new WidgetPageStatus("Initial");
;
        public static const IDLE:WidgetPageStatus = new WidgetPageStatus("Idle");
;
        public static const START:WidgetPageStatus = new WidgetPageStatus("Start");
;
        public static const PROCESS:WidgetPageStatus = new WidgetPageStatus("Process");
;
        public static const STOP:WidgetPageStatus = new WidgetPageStatus("Stop");
;

        private var _name:String;

        public function WidgetPageStatus(name:String){
            super();
            this._name = name;
        }
        public function get name():String{
            return (this._name);
        }
        public function isNoStatus():Boolean{
            return ((this == NO_STATUS));
        }
        public function isInitial():Boolean{
            return ((this == INITIAL));
        }
        public function isProcess():Boolean{
            return ((this == PROCESS));
        }
        public function isIdle():Boolean{
            return ((this == IDLE));
        }
        public function isStart():Boolean{
            return ((this == START));
        }
        public function isStop():Boolean{
            return ((this == STOP));
        }
        public function toString():String{
            return ((("WidgetPageStatus:[" + this._name) + "]"));
        }

    }
}//package com.settrade.streaming5.widget.enumuration 
﻿package com.settrade.streaming5.widget.enumuration {

    public class WidgetEventPriority {

        public static const WIDGET:int = 0;
        public static const WIDGET_HIGH_PRIORITY:int = 1;
        public static const WIDGET_PAGE:int = 2;
        public static const MANAGER:int = 3;
        public static const MANAGER_HIGH_PRIORITY:int = 4;
        public static const WIDGET_PAGE_POST_PROCESS:int = -1;
        public static const MANAGER_POST_PROCESS:int = -2;

    }
}//package com.settrade.streaming5.widget.enumuration 
﻿package com.settrade.streaming5.widget.event {
    import com.settrade.streaming5.widget.component.*;

    public class FocusWidgetEvent extends WidgetEvent {

        var _component:WidgetComponent;

        public function FocusWidgetEvent(component:WidgetComponent){
            super(FOCUS);
            this._component = component;
        }
        public function get component():WidgetComponent{
            return (this._component);
        }

    }
}//package com.settrade.streaming5.widget.event 
﻿package com.settrade.streaming5.widget.event {
    import com.settrade.streaming5.widget.component.*;

    public class SaveStateEvent extends WidgetEvent {

        var _component:WidgetComponent;
        var _isForced:Boolean;

        public function SaveStateEvent(component:WidgetComponent, isForced:Boolean=false){
            super(SAVE_STATE);
            this._component = component;
            this._isForced = isForced;
        }
        public function get component():WidgetComponent{
            return (this._component);
        }
        public function get isForced():Boolean{
            return (this._isForced);
        }

    }
}//package com.settrade.streaming5.widget.event 
﻿package com.settrade.streaming5.widget.event {
    import com.settrade.streaming5.widget.component.*;

    public class BlurWidgetEvent extends WidgetEvent {

        var _component:WidgetComponent;

        public function BlurWidgetEvent(component:WidgetComponent){
            super(BLUR);
            this._component = component;
        }
        public function get component():WidgetComponent{
            return (this._component);
        }

    }
}//package com.settrade.streaming5.widget.event 
﻿package com.settrade.streaming5.widget.event {
    import com.settrade.streaming5.widget.component.*;

    public class OcclusionComponentEvent extends WidgetEvent {

        var _component:WidgetComponent;

        public function OcclusionComponentEvent(component:WidgetComponent){
            super(Occlusion);
            this._component = component;
        }
        public function get component():WidgetComponent{
            return (this._component);
        }

    }
}//package com.settrade.streaming5.widget.event 
﻿package com.settrade.streaming5.widget.event {
    import com.settrade.streaming5.widget.enumuration.*;

    public class GroupInstrumentIdEvent extends GroupMessageEvent {

        private var _instrumentId:String;

        public function GroupInstrumentIdEvent(groupId:String, instrumentId:String){
            super(groupId, GroupMessageType.INSTRUMENT_ID);
            this._instrumentId = instrumentId;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }

    }
}//package com.settrade.streaming5.widget.event 
﻿package com.settrade.streaming5.widget.event {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.widget.enumuration.*;

    public class GroupInstrumentIdAndPriceEvent extends GroupMessageEvent {

        private var _instrumentId:String;
        private var _orderSide:OrderSide;
        private var _priceType:PriceType;
        private var _price:Number;
        private var _priceDigit:Number;

        public function GroupInstrumentIdAndPriceEvent(groupId:String, instrumentId:String, orderSide:OrderSide, priceType:PriceType, price:Number=NaN, priceDigit:Number=2){
            super(groupId, GroupMessageType.INSTRUMENT_ID_AND_PRICE);
            this._instrumentId = instrumentId;
            this._orderSide = orderSide;
            this._priceType = priceType;
            this._price = price;
            this._priceDigit = priceDigit;
        }
        public function get instrumentId():String{
            return (this._instrumentId);
        }
        public function get orderSide():OrderSide{
            return (this._orderSide);
        }
        public function get priceType():PriceType{
            return (this._priceType);
        }
        public function get price():Number{
            return (this._price);
        }
        public function get priceDigit():Number{
            return (this._priceDigit);
        }

    }
}//package com.settrade.streaming5.widget.event 
﻿package com.settrade.streaming5.widget.event {
    import com.settrade.streaming5.widget.enumuration.*;

    public class GroupMessageEvent extends WidgetEvent {

        private var _groupId:String;
        private var _messageType:GroupMessageType;

        public function GroupMessageEvent(groupId:String, messageType:GroupMessageType){
            super(GROUP_MESSAGE);
            this._groupId = groupId;
            this._messageType = messageType;
        }
        public function get messageType():GroupMessageType{
            return (this._messageType);
        }
        public function get groupId():String{
            return (this._groupId);
        }
        public function set groupId(value:String):void{
            this._groupId = value;
        }

    }
}//package com.settrade.streaming5.widget.event 
﻿package com.settrade.streaming5.widget.event {
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.widget.enumuration.*;

    public class GroupAccountEvent extends GroupMessageEvent {

        private var _account:Account;

        public function GroupAccountEvent(groupId:String, account:Account){
            super(groupId, GroupMessageType.ACCOUNT);
            this._account = account;
        }
        public function get account():Account{
            return (this._account);
        }

    }
}//package com.settrade.streaming5.widget.event 
﻿package com.settrade.streaming5.widget.event {
    import com.settrade.streaming5.widget.enumuration.*;

    public class GroupRefreshEvent extends GroupMessageEvent {

        public function GroupRefreshEvent(groupId:String){
            super(groupId, GroupMessageType.REFRESH);
        }
    }
}//package com.settrade.streaming5.widget.event 
﻿package com.settrade.streaming5.widget.event {
    import flash.events.*;

    public class WidgetEvent extends Event {

        public static const GROUP_MESSAGE:String = "GroupMessage";
        public static const FOCUS:String = "Focus";
        public static const BLUR:String = "Blur";
        public static const SAVE_STATE:String = "SaveState";
        public static const Occlusion:String = "Occlusion";

        public function WidgetEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false){
            super(type, bubbles, cancelable);
        }
    }
}//package com.settrade.streaming5.widget.event 
﻿package com.settrade.streaming5.widget.component {
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.widget.event.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;
    import com.settrade.streaming5.widget.*;

    public class WidgetLiteProviderComponent extends WidgetComponent {

        protected static var _currentAccount:Account = null;
        protected static var _currentInstrumentId:String = "";
        private static var logger:Logger = new Logger(prototype.constructor);

        public function WidgetLiteProviderComponent(widgetId:String=null){
            super(widgetId);
        }
        public static function get currentAccount():Account{
            return (_currentAccount);
        }
        public static function get currentInstrumentId():String{
            return (_currentInstrumentId);
        }

        override protected function onReceiveInstrumentChange(e:GroupInstrumentIdEvent):void{
            logger.info(("onReceiveInstrumentChange:::::::" + e.instrumentId));
            if (StreamingAttribute.applicationMode.isLite()){
                _currentInstrumentId = e.instrumentId;
            };
        }
        override protected function onReceiveAccountChange(e:GroupAccountEvent):void{
            if (StreamingAttribute.applicationMode.isLite()){
                logger.info(("onReceiveAccountChange:::::::" + e.account.accountNumber));
                _currentAccount = e.account;
            };
        }
        private function onReceiveNotifyPlaceOrderInstrumentIdLite(e:MessageControlEvent):void{
            var message:NotifyPlaceInstrumentIdMessage = NotifyPlaceInstrumentIdMessage(e.message);
            logger.info(("onReceivePlaceInstrumentId:::::::" + message.instrumentId));
            _currentInstrumentId = message.instrumentId;
        }
        private function onReceiveNotifyPlaceOrderLite(e:MessageControlEvent):void{
            var message:NotifyPlaceOrderMessage = NotifyPlaceOrderMessage(e.message);
            logger.info(("onReceivePlaceOrder:::::::" + message.instrumentId));
            _currentInstrumentId = message.instrumentId;
        }
        override public function stopService():void{
            this.removeEventListener(MessageControlEvent.NOTIFY_PLACE_INSTRUMENT_ID, this.onReceiveNotifyPlaceOrderInstrumentIdLite);
            this.removeEventListener(MessageControlEvent.NOTIFY_PLACE_ORDER, this.onReceiveNotifyPlaceOrderLite);
        }
        override public function startService():void{
            var widgetPage:WidgetPage;
            var groupArray:Array;
            var widgetComponent:WidgetComponent;
            this.addEventListener(MessageControlEvent.NOTIFY_PLACE_INSTRUMENT_ID, this.onReceiveNotifyPlaceOrderInstrumentIdLite);
            this.addEventListener(MessageControlEvent.NOTIFY_PLACE_ORDER, this.onReceiveNotifyPlaceOrderLite);
            if (StreamingAttribute.applicationMode.isLite()){
                if ((parentPage is WidgetPage)){
                    widgetPage = WidgetPage(parentPage);
                    groupArray = widgetPage.getWidgetByGroupId(this.group);
                    if (_currentAccount != null){
                        for each (widgetComponent in groupArray) {
                            if (widgetComponent.widgetAttribute.getPolicy(WidgetAttribute.ACCOUNT)){
                                logger.info(("notifyChangeAccount::" + _currentAccount.accountNumber));
                                super.notifyChangeAccount(_currentAccount);
                                break;
                            };
                        };
                    };
                    if (((!((_currentInstrumentId == ""))) && (!((_currentInstrumentId == null))))){
                        for each (widgetComponent in groupArray) {
                            if (widgetComponent.widgetAttribute.getPolicy(WidgetAttribute.SYMBOL)){
                                logger.info(("notifyChangeInstrumentId::" + _currentInstrumentId));
                                super.notifyChangeInstrumentId(_currentInstrumentId);
                                break;
                            };
                        };
                    };
                };
            };
        }

    }
}//package com.settrade.streaming5.widget.component 
﻿package com.settrade.streaming5.widget.component.common.accountSelector.content.form {
    import fl.controls.*;
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.utils.adapter.*;
    import com.settrade.log.logger.*;
    import flash.ui.*;

    public class AccountSelectorFormMktRep extends MovieClip {

        private static var logger:Logger = new Logger(prototype.constructor);

        protected var marketBox:ComboBox;
        protected var accountBox:TextInput;
        protected var _isEquityOnly:Boolean = false;
        protected var _isDerivOnly:Boolean = false;

        public function AccountSelectorFormMktRep(){
            super();
            this.getReference();
            this.initialComponent();
            this.applyTextInputStyle(this.accountBox);
            this.applyComboBoxStyle(this.marketBox);
            this.marketBox.addEventListener(Event.CHANGE, this.onMarketBoxChange);
            this.accountBox.addEventListener(Event.CHANGE, this.onChange);
            this.accountBox.addEventListener(FocusEvent.FOCUS_OUT, this.onFocusOut);
            this.accountBox.addEventListener(KeyboardEvent.KEY_DOWN, this.onKeyDown);
            AccountShortcutAdapter.getInstance().apply(this.accountBox);
        }
        private function onChange(e:Event):void{
            e.stopPropagation();
        }
        private function onFocusOut(e:FocusEvent):void{
            logger.trace("onFocusOut!!!!!!");
            this.onConfirmChange(e);
        }
        private function onKeyDown(e:KeyboardEvent):void{
            logger.trace("onKeyDown!!!!!!");
            if ((((e.keyCode == Keyboard.ENTER)) || ((e.keyCode == Keyboard.TAB)))){
                this.onConfirmChange(e);
            };
        }
        private function onMarketBoxChange(e:Event):void{
            this.accountBox.text = "";
            this.dispatchEvent(new Event(Event.CHANGE));
        }
        private function onConfirmChange(e:Event):void{
            logger.trace("onConfirmChange!!!!!!");
            this.dispatchEvent(new Event(Event.CHANGE));
        }
        private function initialComponent():void{
            if (StreamingAttribute.userRoleEquity.isMarketRep()){
                this.marketBox.addItem({
                    label:"Equity",
                    data:System.EQUITY
                });
            };
            if (StreamingAttribute.userRoleDerivatives.isMarketRep()){
                this.marketBox.addItem({
                    label:"Derivatives",
                    data:System.DERIV
                });
            };
        }
        private function getReference():void{
            this.marketBox = ComboBox(this.getChildByName("marketBox"));
            this.accountBox = TextInput(this.getChildByName("accountBox"));
        }
        protected function applyTextInputStyle(textInput:TextInput):void{
            textInput.setStyle("textFormat", ThemeManager.defaultTextInputFont);
            textInput.setStyle("textPadding", 1);
        }
        protected function applyComboBoxStyle(comboBox:ComboBox):void{
            comboBox.textField.setStyle("textFormat", ThemeManager.defaultDropdownFont);
            comboBox.textField.setStyle("embedFonts", true);
            comboBox.textField.setStyle("textPadding", -1);
            comboBox.dropdown.setRendererStyle("textFormat", ThemeManager.defaultDropdownFont);
            comboBox.dropdown.setRendererStyle("embedFonts", true);
        }
        public function get system():System{
            return (System(this.marketBox.selectedItem.data));
        }
        public function get accountNumber():String{
            return (this.accountBox.text);
        }
        public function set accountNumber(accountNumber:String):void{
            this.accountBox.text = accountNumber;
        }
        public function set system(system:System):void{
            var i:int;
            while (i < this.marketBox.length) {
                if (this.marketBox.getItemAt(i).data == system){
                    this.marketBox.selectedIndex = i;
                    return;
                };
                i++;
            };
        }
        public function get account():Account{
            if (this.accountNumber == ""){
                switch (this.system){
                    case System.EQUITY:
                        return (Account.EMPTY_ACCOUNT_EQUITY);
                    case System.DERIV:
                        return (Account.EMPTY_ACCOUNT_DERIVATIVES);
                };
                return (null);
            };
            return (AccountManager.getInstance().getAndAddAccountByAccountNumberAndSystemMktRep(this.accountNumber, this.system));
        }
        public function set account(account:Account):void{
            this.system = account.system;
            this.accountNumber = account.accountNumber;
        }
        public function get isEquityOnly():Boolean{
            return (this._isEquityOnly);
        }
        public function set isEquityOnly(value:Boolean):void{
            var i:int;
            this._isEquityOnly = value;
            logger.debug(("3 :: " + this._isEquityOnly.toString()));
            if (this._isEquityOnly == true){
                i = 0;
                while (i < this.marketBox.length) {
                    if (this.marketBox.getItemAt(i).label == "Derivatives"){
                        this.marketBox.removeItemAt(i);
                    };
                    i++;
                };
            };
        }
        public function get isDerivOnly():Boolean{
            return (this._isDerivOnly);
        }
        public function set isDerivOnly(value:Boolean):void{
            var i:int;
            this._isDerivOnly = value;
            if (this._isDerivOnly == true){
                i = 0;
                while (i < this.marketBox.length) {
                    if (this.marketBox.getItemAt(i).label == "Equity"){
                        this.marketBox.removeItemAt(i);
                    };
                    i++;
                };
            };
        }

    }
}//package com.settrade.streaming5.widget.component.common.accountSelector.content.form 
﻿package com.settrade.streaming5.widget.component.common.accountSelector.content.form {
    import flash.display.*;

    public class AccountSelectorFormInvestor extends MovieClip {

        public function AccountSelectorFormInvestor(){
            super();
        }
    }
}//package com.settrade.streaming5.widget.component.common.accountSelector.content.form 
﻿package com.settrade.streaming5.widget.component.common.accountSelector.content {
    import flash.display.*;
    import flash.events.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.widget.component.common.accountSelector.content.form.*;

    public class AccountSelectorForm extends MovieClip {

        private static var logger:Logger = new Logger(prototype.constructor);

        protected var currentContent:MovieClip;
        protected var mktRepForm:AccountSelectorFormMktRep;
        protected var investorForm:AccountSelectorFormInvestor;
        protected var _isEquityOnly:Boolean = false;
        protected var _isDerivOnly:Boolean = false;

        public function AccountSelectorForm(){
            super();
            this.getReference();
            this.toggle();
            this.mktRepForm.addEventListener(Event.CHANGE, this.onChangeAccount);
            this.investorForm.addEventListener(Event.CHANGE, this.onChangeAccount);
        }
        private function onChangeAccount(e:Event):void{
            this.dispatchEvent(e);
        }
        private function toggle():void{
            if (StreamingAttribute.isMarketRep){
                this.currentContent = this.mktRepForm;
                this.mktRepForm.visible = true;
                this.investorForm.visible = false;
            } else {
                this.currentContent = this.investorForm;
                this.mktRepForm.visible = false;
                this.investorForm.visible = true;
            };
        }
        private function getReference():void{
            this.mktRepForm = AccountSelectorFormMktRep(this.getChildByName("mktRepForm"));
            this.investorForm = AccountSelectorFormInvestor(this.getChildByName("investorForm"));
        }
        public function get account():Account{
            return (this.currentContent.account);
        }
        public function set account(account:Account):void{
            logger.debug("Test 3");
            this.currentContent.account = account;
        }
        public function get isEquityOnly():Boolean{
            return (this._isEquityOnly);
        }
        public function set isEquityOnly(value:Boolean):void{
            this._isEquityOnly = value;
            logger.debug("2");
            this.mktRepForm.isEquityOnly = this._isEquityOnly;
        }
        public function get isDerivOnly():Boolean{
            return (this._isDerivOnly);
        }
        public function set isDerivOnly(value:Boolean):void{
            this._isDerivOnly = value;
            this.mktRepForm.isDerivOnly = this._isDerivOnly;
        }
        public function onChangeTheme():void{
        }

    }
}//package com.settrade.streaming5.widget.component.common.accountSelector.content 
﻿package com.settrade.streaming5.widget.component.common.accountSelector.content {
    import flash.display.*;
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.common.*;
    import flash.text.*;

    public class AccountSelectorDisplay extends MovieClip {

        protected var _account:Account;
        protected var text:TextField;
        protected var acc:TextField;

        public function AccountSelectorDisplay(){
            super();
            this._account = null;
            this.getReference();
        }
        private function getReference():void{
            this.text = TextField(this.getChildByName("text"));
            this.acc = TextField(this.getChildByName("acc"));
        }
        public function redraw():void{
            if (this._account != null){
                this.text.text = this._account.accountNumber;
            };
        }
        public function get account():Account{
            return (this._account);
        }
        public function set account(value:Account):void{
            this._account = value;
            this.redraw();
        }
        public function onChangeTheme():void{
            this.acc.textColor = ThemeManager.LABEL_COLOR;
            this.text.textColor = ThemeManager.LABEL_COLOR;
        }

    }
}//package com.settrade.streaming5.widget.component.common.accountSelector.content 
﻿package com.settrade.streaming5.widget.component.common.accountSelector.content {
    import fl.controls.*;
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.service.*;
    import flash.text.*;
    import com.settrade.log.logger.*;

    public class AccountSelectorPro extends MovieClip {

        public static const UNAUTHORIZED_ACCESS:String = "MultiOrderUnauthorizedAccess";

        private static var logger:Logger = new Logger(prototype.constructor);

        protected var accountNoBox:ComboBox;
        protected var acc:TextField;
        private var accountInformationService:AccountInformationService;
        private var alertService:AlertService;
        private var accountManager:AccountManager;
        private var accountService:AccountService;
        private var currentAccount:Account;
        private var currentSystem:System;

        public function AccountSelectorPro(){
            super();
            this.getReference();
            logger.info("Load account list");
            this.accountService = AccountService.getInstance();
            this.accountNoBox.setStyle("textFormat", ThemeManager.defaultDropdownFont);
            this.accountNoBox.setStyle("embedFonts", true);
            this.accountNoBox.textField.setStyle("textFormat", ThemeManager.defaultDropdownFont);
            this.accountNoBox.textField.setStyle("embedFonts", true);
            this.accountNoBox.dropdown.setRendererStyle("textFormat", ThemeManager.defaultDropdownFont);
            this.accountNoBox.dropdown.setRendererStyle("embedFonts", true);
            this.accountNoBox.addEventListener(Event.CHANGE, this.onAccountNoBoxChange);
            this.accountNoBox.tabEnabled = false;
            this.accountNoBox.focusEnabled = false;
        }
        private function onAccountNoBoxChange(e:Event):void{
            this.notifySelectedAccount();
        }
        public function notifySelectedAccount():void{
            logger.trace("onConfirmChange!!!!!!");
            this.dispatchEvent(new Event(Event.CHANGE));
        }
        private function getReference():void{
            this.accountNoBox = ComboBox(this.getChildByName("accountNoProBox"));
            this.acc = TextField(this.getChildByName("acc"));
        }
        public function getAllAccount(filterFunction:Function):void{
            var account:Account;
            var strLabel:String;
            var canAddedIntoList:Boolean;
            var accountList:* = this.accountService.getAllAccount();
            this.accountNoBox.visible = true;
            this.accountNoBox.removeAll();
            if (this.currentAccount == null){
                this.currentAccount = this.accountService.getCurrentAccount();
                this.currentSystem = this.accountService.getCurrentAccount().system;
            };
            logger.info(("current account is " + this.currentAccount.accountNumber));
            var i:int;
            while (i < accountList.length) {
                account = accountList[i];
                strLabel = account.accountNumber;
                canAddedIntoList = false;
                if (filterFunction != null){
                    if (filterFunction(account)){
                        this.accountNoBox.addItem({
                            label:strLabel,
                            data:account
                        });
                        canAddedIntoList = true;
                    };
                } else {
                    this.accountNoBox.addItem({
                        label:strLabel,
                        data:account
                    });
                    canAddedIntoList = true;
                };
                if ((((((this.currentAccount.accountNumber == account.accountNumber)) && ((this.currentAccount.system == account.system)))) && ((canAddedIntoList == true)))){
                    this.accountNoBox.selectedIndex = (this.accountNoBox.length - 1);
                };
                i++;
            };
            if (this.accountNoBox.length == 0){
                this.parent.dispatchEvent(new Event(UNAUTHORIZED_ACCESS));
            } else {
                if (this.accountNoBox.selectedIndex == -1){
                    this.accountNoBox.selectedIndex = 0;
                };
                this.notifySelectedAccount();
            };
        }
        public function get account():Account{
            var emptyAccount:Account = new Account("", System.NO_SYSTEM);
            if (this.accountNoBox.selectedItem == null){
                return (emptyAccount);
            };
            return (this.accountNoBox.selectedItem.data);
        }
        public function set account(value:Account):void{
            var i:int;
            while (i < this.accountNoBox.length) {
                if ((((this.accountNoBox.getItemAt(i).data.accountNumber == value.accountNumber)) && ((this.accountNoBox.getItemAt(i).data.system == value.system)))){
                    this.accountNoBox.selectedIndex = i;
                    return;
                };
                i++;
            };
        }
        public function onChangeTheme():void{
            this.acc.textColor = ThemeManager.LABEL_COLOR;
        }

    }
}//package com.settrade.streaming5.widget.component.common.accountSelector.content 
﻿package com.settrade.streaming5.widget.component.common.accountSelector {
    import flash.events.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.widget.component.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.widget.component.common.accountSelector.content.*;

    public class AccountSelectorComponent extends StreamingComponent {

        public static const DISPLAY:int = 0;
        public static const FORM:int = 1;
        public static const PRO:int = 2;

        private static var logger:Logger = new Logger(prototype.constructor);

        protected var currentMode:int;
        protected var display:AccountSelectorDisplay;
        protected var form:AccountSelectorForm;
        protected var pro:AccountSelectorPro;
        protected var _accountFilterFunction:Function = null;
        protected var _isEquityOnly:Boolean = false;
        protected var _isDerivOnly:Boolean = false;

        public function AccountSelectorComponent(){
            super();
            this.getReference();
            this.currentMode = FORM;
            this.toggleMode();
            this.form.addEventListener(Event.CHANGE, this.onChangeAccount);
            this.pro.addEventListener(Event.CHANGE, this.onChangeAccount);
            this.pro.addEventListener(Event.DEACTIVATE, this.onDeactivate);
        }
        private function onChangeAccount(e:Event):void{
            this.dispatchEvent(e);
            logger.debug("Test Notify Account 2");
        }
        private function onDeactivate(e:Event):void{
            this.dispatchEvent(e);
        }
        private function getReference():void{
            this.display = AccountSelectorDisplay(this.getChildByName("display"));
            this.form = AccountSelectorForm(this.getChildByName("form"));
            this.pro = AccountSelectorPro(this.getChildByName("pro"));
        }
        public function changeMode(mode:int):void{
            if (this.currentMode != mode){
                this.syncAccount();
                this.currentMode = mode;
                this.toggleMode();
            };
        }
        private function toggleMode():void{
            switch (this.currentMode){
                case DISPLAY:
                    this.display.visible = true;
                    this.form.visible = false;
                    this.pro.visible = false;
                    break;
                case FORM:
                    this.display.visible = false;
                    this.form.visible = true;
                    this.pro.visible = false;
                    break;
                case PRO:
                    this.display.visible = false;
                    this.form.visible = false;
                    this.pro.visible = true;
                    this.pro.getAllAccount(this._accountFilterFunction);
                    break;
            };
        }
        private function get currentContent():Object{
            switch (this.currentMode){
                case DISPLAY:
                    return (this.display);
                case FORM:
                    return (this.form);
                case PRO:
                    return (this.pro);
            };
            return (this.display);
        }
        private function syncAccount():void{
            var account:Account = this.currentContent.account;
            switch (this.currentMode){
                case DISPLAY:
                    this.form.account = account;
                    break;
                case FORM:
                    this.display.account = account;
                    break;
                case PRO:
                    this.pro.account = account;
                    break;
            };
        }
        public function get account():Account{
            return (this.currentContent.account);
        }
        public function set account(account:Account):void{
            this.currentContent.account = account;
        }
        public function set accountFilterFunction(value:Function):void{
            this._accountFilterFunction = value;
        }
        public function get isEquityOnly():Boolean{
            return (this._isEquityOnly);
        }
        public function set isEquityOnly(value:Boolean):void{
            this._isEquityOnly = value;
            logger.debug("1");
            this.form.isEquityOnly = this._isEquityOnly;
        }
        public function get isDerivOnly():Boolean{
            return (this._isDerivOnly);
        }
        public function set isDerivOnly(value:Boolean):void{
            this._isDerivOnly = value;
            this.form.isDerivOnly = this._isDerivOnly;
        }
        public function onChangeTheme():void{
            this.display.onChangeTheme();
            this.pro.onChangeTheme();
            this.form.onChangeTheme();
        }

    }
}//package com.settrade.streaming5.widget.component.common.accountSelector 
﻿package com.settrade.streaming5.widget.component {

    public class WidgetAttribute {

        public static const UNAVAILABLE:WidgetAttribute = new WidgetAttribute("Unavailable", "", 1, 1, "", " com.settrade.streaming5.widget.component.standard.unavailable.UnavailableWidget", "", false, false, false, new Array());
;
        public static const SYMBOL:uint = 1;
        public static const ACCOUNT:uint = 2;

        const GROUP_POLICY:uint;

        protected var _widgetId:String;
        protected var _width:int;
        protected var _height:int;
        protected var _path:String;
        protected var _classPath:String;
        protected var _thumbnailPath:String;
        protected var _groupPolicy:uint;
        protected var _displayName:String;
        protected var _canDisplayWidget:Boolean;
        protected var _tag:Array;
        protected var _info:String;
        protected var _isHtmlComponent:Boolean;
        protected var _htmlComponentUrl:String;
        private var _groupPolicyOrder:Array;

        public function WidgetAttribute(widgetId:String, displayName:String, width:int, height:int, path:String, classPath:String, thumbnailPath:String, canChangeAccount:Boolean, canChangeSymbol:Boolean, canDisplayWidget:Boolean, tag:Array, info:String="", isHtmlComponent:Boolean=false, htmlComponentUrl:String=""){
            this.GROUP_POLICY = (SYMBOL | ACCOUNT);
            this._groupPolicyOrder = [SYMBOL, ACCOUNT];
            super();
            this._widgetId = widgetId;
            this._width = width;
            this._height = height;
            this._path = path;
            this._classPath = classPath;
            this._thumbnailPath = thumbnailPath;
            this._displayName = displayName;
            this._canDisplayWidget = canDisplayWidget;
            if (tag != null){
                this._tag = tag.slice(0);
            } else {
                this._tag = new Array();
            };
            this._info = info;
            this._isHtmlComponent = isHtmlComponent;
            if (htmlComponentUrl.indexOf("?") == -1){
                this._htmlComponentUrl = (htmlComponentUrl + "?channel=streaming5");
            } else {
                this._htmlComponentUrl = (htmlComponentUrl + "&channel=streaming5");
            };
            this._groupPolicy = this.generateGroupPolicy([canChangeSymbol, canChangeAccount]);
        }
        public function get widgetId():String{
            return (this._widgetId);
        }
        public function get width():int{
            return (this._width);
        }
        public function get height():int{
            return (this._height);
        }
        public function get path():String{
            return (this._path);
        }
        public function get classPath():String{
            return (this._classPath);
        }
        public function get thumbnailPath():String{
            return (this._thumbnailPath);
        }
        public function get groupPolicy():uint{
            return (this._groupPolicy);
        }
        public function get displayName():String{
            return (this._displayName);
        }
        public function get canDisplayWidget():Boolean{
            return (this._canDisplayWidget);
        }
        public function get tag():Array{
            return (this._tag);
        }
        public function get info():String{
            return (this._info);
        }
        public function set info(value:String):void{
            this._info = value;
        }
        public function get isHtmlComponent():Boolean{
            return (this._isHtmlComponent);
        }
        public function set isHtmlComponent(value:Boolean):void{
            this._isHtmlComponent = value;
        }
        public function get htmlComponentUrl():String{
            return (this._htmlComponentUrl);
        }
        public function set htmlComponentUrl(value:String):void{
            this._htmlComponentUrl = value;
        }
        public function getPolicy(policy:uint):Boolean{
            return (((this.GROUP_POLICY & policy) == policy));
        }
        private function generateGroupPolicy(policyArray:Array):uint{
            var groupPolicy:uint;
            var i:uint;
            while (i < policyArray.length) {
                groupPolicy = (groupPolicy | (this.convertBooleanToInt(policyArray[i]) * this._groupPolicyOrder[i]));
                i++;
            };
            return (groupPolicy);
        }
        private function convertBooleanToInt(bool:Boolean):uint{
            return (((bool) ? 1 : 0));
        }

    }
}//package com.settrade.streaming5.widget.component 
﻿package com.settrade.streaming5.widget.component {
    import com.settrade.streaming5.language.*;
    import flash.display.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.page.*;
    import com.settrade.streaming5.dispatcher.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;

    public class StreamingComponent extends MovieClip implements IStreamingComponent, ILanguageChangeable {

        private static var logger:Logger = new Logger(prototype.constructor);

        var dispatcher:MessageDispatcher;

        public function StreamingComponent(){
            super();
            this.dispatcher = MessageDispatcher.getInstance();
            this.addEventListener(MessageControlEvent.CHANGE_LANGUAGE, this.onReceiveChangeLanguage);
        }
        override public function addEventListener(type:String, listener:Function, useCapture:Boolean=false, priority:int=0, useWeakReference:Boolean=false):void{
            if (MessageEvent.isMessageEvent(type)){
                this.dispatcher.addEventListener(type, listener, useCapture, priority, useWeakReference);
                return;
            };
            super.addEventListener(type, listener, useCapture, priority, useWeakReference);
        }
        override public function removeEventListener(type:String, listener:Function, useCapture:Boolean=false):void{
            if (MessageEvent.isMessageEvent(type)){
                this.dispatcher.removeEventListener(type, listener, useCapture);
                return;
            };
            super.removeEventListener(type, listener, useCapture);
        }
        public function startService():void{
        }
        public function stopService():void{
        }
        public function synchronousStartService():void{
        }
        public function synchronousStopService():void{
        }
        public function changeLanguage(language:ILanguageConfig):void{
        }
        public function changeTheme():void{
        }
        private function onReceiveChangeLanguage(e:MessageControlEvent):void{
            var message:ChangeLanguageMessage = ChangeLanguageMessage(e.message);
            this.changeLanguage(message.language);
        }

    }
}//package com.settrade.streaming5.widget.component 
﻿package com.settrade.streaming5.widget.component {
    import com.settrade.streaming5.language.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import com.settrade.streaming5.widget.config.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.widget.event.*;
    import com.settrade.streaming5.widget.enumuration.*;
    import com.settrade.log.logger.*;

    public class WidgetComponent extends StreamingComponent {

        private static var logger:Logger = new Logger(prototype.constructor);

        private var _widgetId:String;
        private var _widgetAttribute:WidgetAttribute;
        private var _config:WidgetComponentConfig;
        private var _group:String;
        private var _isPrimary:Boolean;
        private var _parentPage:EventDispatcher;
        protected var isFocus:Boolean;

        public function WidgetComponent(widgetId:String=null){
            super();
            this._group = null;
            this._parentPage = null;
            this._isPrimary = false;
            this.isFocus = false;
            this.addEventListener(MouseEvent.CLICK, this.onClickWidgetComponent);
            this.addEventListener(MouseEvent.MOUSE_DOWN, this.onClickWidgetComponent);
        }
        public function destroy():void{
            this.removeEventListener(MouseEvent.CLICK, this.onClickWidgetComponent);
            this.removeEventListener(MouseEvent.MOUSE_DOWN, this.onClickWidgetComponent);
            this.removeEventListener(MessageControlEvent.THEME_CHANGE, this.onReceiveChangeTheme);
            this._parentPage.removeEventListener(WidgetEvent.GROUP_MESSAGE, this.onReceiveGroupMessageEventCheck, false);
            this._parentPage.removeEventListener(WidgetEvent.FOCUS, this.onFocusCheck, false);
            this._parentPage.removeEventListener(WidgetEvent.BLUR, this.onBlurCheck, false);
            this._parentPage.removeEventListener(WidgetEvent.Occlusion, this.onOcclusion, false);
            this._group = null;
            this._parentPage = null;
            this._isPrimary = false;
            this.isFocus = false;
        }
        public function loadWidgetAttribute(widgetId:String):void{
            this.addEventListener(MessageControlEvent.THEME_CHANGE, this.onReceiveChangeTheme);
            this._widgetId = widgetId;
            this._widgetAttribute = WidgetAttributeManager.getInstance().getWidgetAttributeByWidgetId(widgetId);
            this.onLoadWidgetAttribute(this._widgetAttribute);
            this.changeTheme();
        }
        public function get widgetId():String{
            return (this._widgetId);
        }
        public function set widgetId(value:String):void{
            this._widgetId = value;
        }
        public function get group():String{
            return (this._group);
        }
        public function set group(value:String):void{
            this._group = value;
        }
        public function get isPrimary():Boolean{
            return (this._isPrimary);
        }
        public function set isPrimary(value:Boolean):void{
            this._isPrimary = value;
        }
        public function get parentPage():EventDispatcher{
            return (this._parentPage);
        }
        public function set parentPage(value:EventDispatcher):void{
            if (this._parentPage != null){
                this._parentPage.removeEventListener(WidgetEvent.GROUP_MESSAGE, this.onReceiveGroupMessageEventCheck);
                this._parentPage.removeEventListener(WidgetEvent.FOCUS, this.onFocusCheck);
                this._parentPage.removeEventListener(WidgetEvent.BLUR, this.onBlurCheck);
                this._parentPage.removeEventListener(WidgetEvent.Occlusion, this.onOcclusion);
            };
            this._parentPage = value;
            this._parentPage.addEventListener(WidgetEvent.GROUP_MESSAGE, this.onReceiveGroupMessageEventCheck, false, WidgetEventPriority.WIDGET);
            this._parentPage.addEventListener(WidgetEvent.FOCUS, this.onFocusCheck, false, WidgetEventPriority.WIDGET);
            this._parentPage.addEventListener(WidgetEvent.BLUR, this.onBlurCheck, false, WidgetEventPriority.WIDGET);
            this._parentPage.addEventListener(WidgetEvent.Occlusion, this.onOcclusion, false, WidgetEventPriority.WIDGET);
        }
        public function get widgetAttribute():WidgetAttribute{
            return (WidgetAttributeManager.getInstance().getWidgetAttributeByWidgetId(this.widgetId));
        }
        public function focus():void{
            var event:FocusWidgetEvent;
            if (!this.isFocus){
                event = new FocusWidgetEvent(this);
                this.dispatchParentEvent(event);
                this.isFocus = true;
            };
        }
        public function blur():void{
            var event:BlurWidgetEvent;
            if (this.isFocus){
                event = new BlurWidgetEvent(this);
                this.dispatchParentEvent(event);
                this.isFocus = false;
            };
        }
        public function notifyChangeInstrumentId(instrumentId:String):void{
            this.dispatchParentEvent(new GroupInstrumentIdEvent(this._group, instrumentId));
        }
        public function notifyChangeAccount(account:Account):void{
            this.dispatchParentEvent(new GroupAccountEvent(this._group, account));
        }
        public function notifyRefresh():void{
            this.dispatchParentEvent(new GroupRefreshEvent(this._group));
        }
        public function notifyChangeInstrumentIdAndPrice(instrumentId:String, orderSide:OrderSide, priceType:PriceType, price:Number, priceDigit:Number):void{
            this.dispatchParentEvent(new GroupInstrumentIdAndPriceEvent(this._group, instrumentId, orderSide, priceType, price, priceDigit));
        }
        public function notifyOcclusionComponent():void{
            this.dispatchParentEvent(new OcclusionComponentEvent(this));
        }
        public function notifySaveState():void{
            this.updateCustomConfig(this.getCustomConfig());
            this.dispatchParentEvent(new SaveStateEvent(this));
        }
        public function notifyForcedSaveState():void{
            this.updateCustomConfig(this.getCustomConfig());
            this.dispatchParentEvent(new SaveStateEvent(this, true));
        }
        public function get config():WidgetComponentConfig{
            return (this._config);
        }
        public function set config(value:WidgetComponentConfig):void{
            this._config = value;
            this.onLoadConfig(value.componentConfig);
        }
        public function updateCustomConfig(object:CustomConfig):void{
            this.config.componentConfig = object;
        }
        override public function changeLanguage(language:ILanguageConfig):void{
            super.changeLanguage(language);
            this.onChangeLanguage(language);
        }
        override public function changeTheme():void{
            this.onChangeTheme();
        }
        protected function onLoadWidgetAttribute(widgetAttribute:WidgetAttribute):void{
        }
        protected function onReceiveInstrumentChange(e:GroupInstrumentIdEvent):void{
        }
        protected function onReceiveAccountChange(e:GroupAccountEvent):void{
        }
        protected function onReceiveRefresh(e:GroupRefreshEvent):void{
        }
        protected function onReceiveInstrumentAndPriceChange(e:GroupInstrumentIdAndPriceEvent):void{
        }
        protected function onFocus(e:FocusWidgetEvent):void{
        }
        protected function onBlur(e:BlurWidgetEvent):void{
        }
        protected function onOcclusion(e:OcclusionComponentEvent):void{
        }
        protected function onLoadConfig(config:CustomConfig):void{
        }
        protected function onChangeLanguage(language:ILanguageConfig):void{
        }
        protected function onChangeTheme():void{
        }
        protected function getCustomConfig():CustomConfig{
            var config:CustomConfig = new CustomConfig(ConfigType.JSON_OBJ);
            return (config);
        }
        private function dispatchParentEvent(event:Event):void{
            if (this._parentPage != null){
                this._parentPage.dispatchEvent(event);
            };
        }
        private function onFocusCheck(e:FocusWidgetEvent):void{
            if (e.component == this){
                this.onFocus(e);
            } else {
                this.blur();
            };
        }
        private function onBlurCheck(e:BlurWidgetEvent):void{
            if (e.component == this){
                this.onBlur(e);
            };
        }
        private function onReceiveGroupMessageEventCheck(e:GroupMessageEvent):void{
            logger.info(((((((("Receive Group Message::" + e.messageType.name) + ",Group Id") + e.groupId) + ",this=") + this.config.widgetId) + ",") + this.group));
            if (e.groupId == this._group){
                if (e.messageType.isInstrument()){
                    this.onReceiveInstrumentChange(GroupInstrumentIdEvent(e));
                } else {
                    if (e.messageType.isAccount()){
                        logger.debug("ReceiveAccountChange");
                        this.onReceiveAccountChange(GroupAccountEvent(e));
                    } else {
                        if (e.messageType.isRefresh()){
                            this.onReceiveRefresh(GroupRefreshEvent(e));
                        } else {
                            if (e.messageType.isInstrumentAndPrice()){
                                logger.info("Receive instrument and price change");
                                this.onReceiveInstrumentAndPriceChange(GroupInstrumentIdAndPriceEvent(e));
                            };
                        };
                    };
                };
            };
        }
        private function onClickWidgetComponent(e:MouseEvent):void{
            this.focus();
        }
        private function onReceiveChangeTheme(e:MessageControlEvent):void{
            logger.info(((("Receive Change Theme - " + this.widgetId) + ", ") + this));
            this.changeTheme();
        }
        public function sendStatistics():void{
            if (this._widgetAttribute.tag.length > 0){
                JavascriptInterface.sendStatisticEvent(this._widgetAttribute.tag[0], this._widgetAttribute.displayName, this._widgetId);
            } else {
                JavascriptInterface.sendStatisticEvent("Unknow", this._widgetAttribute.displayName, this._widgetId);
            };
        }

    }
}//package com.settrade.streaming5.widget.component 
﻿package com.settrade.streaming5.widget.component.standard.unavailable {
    import com.settrade.streaming5.widget.component.*;

    public class UnavailableWidget extends WidgetComponent {

        public function UnavailableWidget(widgetId:String=""){
            super(widgetId);
        }
    }
}//package com.settrade.streaming5.widget.component.standard.unavailable 
﻿package com.settrade.streaming5.widget.component.standard.notification {
    import fl.controls.*;
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import flash.events.*;
    import com.settrade.streaming5.message.control.notification.*;
    import com.settrade.streaming5.dispatcher.*;
    import com.settrade.streaming5.message.control.*;
    import fl.containers.*;

    public class NotificationList extends MovieClip {

        public var scrollPane:ScrollPane;
        public var closeButton:SimpleButton;
        protected var _displayPane:MovieClip;

        public function NotificationList(){
            super();
            this._displayPane = new MovieClip();
            this.scrollPane.source = this._displayPane;
            this.scrollPane.horizontalScrollPolicy = ScrollPolicy.OFF;
            this.scrollPane.tabEnabled = false;
            this.scrollPane.focusEnabled = false;
            this.closeButton.addEventListener(MouseEvent.CLICK, this.onCloseButtonMouseClick);
        }
        public function loadNotificationList(inputNotificationList:Array, newNotificationCount:int):void{
            var notification:NotificationMessage;
            var notificationRow:NotificationRow;
            var notificationList:Array = inputNotificationList.slice();
            notificationList.reverse();
            this._displayPane.removeChildren();
            var i:* = 0;
            while (i < notificationList.length) {
                notification = notificationList[i];
                notificationRow = new NotificationRow(notification, (i < newNotificationCount));
                notificationRow.y = (i * notificationRow.height);
                if (notificationList.length > 4){
                    notificationRow.shrinkRow();
                };
                this._displayPane.addChild(notificationRow);
                i++;
            };
            if (notificationList.length == 0){
                notificationRow = new NotificationRow(null);
                notificationRow.setEmptyRow();
                this._displayPane.addChild(notificationRow);
            };
            this.scrollPane.refreshPane();
        }
        private function onCloseButtonMouseClick(e:MouseEvent):void{
            this.visible = false;
            var message:PopupStateChangeMessage = new PopupStateChangeMessage(PopupState.HIDING, this);
            MessageDispatcher.getInstance().notifyControlMessage(message);
        }

    }
}//package com.settrade.streaming5.widget.component.standard.notification 
﻿package com.settrade.streaming5.widget.component.standard.notification {
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import com.settrade.streaming5.message.control.notification.*;
    import com.settrade.streaming5.message.response.orderstatus.*;
    import flash.text.*;

    public class NotificationRow extends MovieClip {

        const NOTI_TYPE_ORDER:int = 1;
        const NOTI_TYPE_ALERT:int = 2;
        const NOTI_TYPE_ANNOUNCEMENT:int = 3;
        const NOTI_TYPE_RESEARCH:int = 4;
        const NOTI_TYPE_NEWS:int = 5;

        public var type:NotificationTypeSymbol;
        public var bg:MovieClip;
        public var text:TextField;
        public var time:TextField;
        var _notification:NotificationMessage;

        public function NotificationRow(notification:NotificationMessage, isNew:Boolean=false){
            super();
            this.notification = notification;
            this.mouseChildren = false;
            this.addEventListener(MouseEvent.CLICK, this.onClick);
            this.text.embedFonts = false;
            if (isNew){
                this.bg.gotoAndPlay("Blink");
            } else {
                this.bg.gotoAndStop("Inactive");
            };
        }
        public function blink():void{
            this.bg.gotoAndPlay("blink");
        }
        public function setEmptyRow():void{
            this.bg.gotoAndStop("Empty");
        }
        private function setNotificationRowText():void{
            if (this._notification == null){
                this.text.text = "";
            } else {
                this.text.text = this.notification.toNotificationString();
            };
        }
        private function setNotificationRowType():void{
            if (this._notification == null){
                this.buttonMode = false;
                this.type.gotoAndStop(NotificationCategory.NO_TYPE.name);
            } else {
                if (((((((((this._notification.category.isOrder()) || (this._notification.category.isAlert()))) || (this._notification.category.isNews()))) || (this._notification.category.isResearch()))) || (this._notification.category.isAnnoucement()))){
                    this.useHandCursor = true;
                    this.buttonMode = true;
                } else {
                    this.useHandCursor = false;
                    this.buttonMode = false;
                };
                this.type.gotoAndStop(this._notification.category.name);
            };
        }
        private function setNotificationTime():void{
            if (this._notification == null){
                this.time.text = "";
            } else {
                this.time.text = this.notification.time;
            };
        }
        public function shrinkRow():void{
            this.bg.width = 285;
        }
        public function get notification():NotificationMessage{
            return (this._notification);
        }
        public function set notification(value:NotificationMessage):void{
            this._notification = value;
            this.setNotificationRowText();
            this.setNotificationRowType();
            this.setNotificationTime();
        }
        private function onClick(e:MouseEvent):void{
            if (this._notification == null){
                return;
            };
            switch (this._notification.category){
                case NotificationCategory.ALERT:
                    this.onClickPriceVolumeAlert();
                    return;
                case NotificationCategory.ORDER:
                    this.onClickOrderAlert();
                    return;
                case NotificationCategory.NEWS:
                    this.onClickNews();
                    return;
                case NotificationCategory.RESEARCH:
                    this.onClickResearch();
                    return;
                case NotificationCategory.ANNOUCEMENT:
                    this.onClickAnnouncement();
                    return;
                default:
                    return;
            };
        }
        private function onClickNews():void{
            JavascriptInterface.openRealtimeNews(NewsNotificationMessage(this._notification).notificationId.toString(), NewsNotificationMessage(this._notification).link);
        }
        private function onClickResearch():void{
            JavascriptInterface.openResearch(ResearchNotificationMessage(this._notification).link);
        }
        private function onClickOrderAlert():void{
            var order:IOrderStatus = OrderNotificationMessage(this._notification).orderStatus;
            if (order.system.isEquity()){
                JavascriptInterface.openEquityDetailWindow(OrderStatusEquity(order));
            } else {
                if (order.system.isDeriv()){
                    JavascriptInterface.openDerivativesDetailWindow(OrderStatusDerivatives(order));
                };
            };
        }
        private function onClickPriceVolumeAlert():void{
            AlertService.getInstance().alertBuySellNotification(PriceVolumeNotificationMessage(this._notification));
        }
        private function onClickAnnouncement():void{
            JavascriptInterface.openAnnouncement(AnnoucementNotificationMessage(this._notification).notificationId.toString());
        }

    }
}//package com.settrade.streaming5.widget.component.standard.notification 
﻿package com.settrade.streaming5.widget.component.standard.notification {
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import flash.events.*;
    import com.settrade.streaming5.message.control.notification.*;
    import com.settrade.streaming5.manager.*;
    import flash.utils.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.dispatcher.*;
    import com.settrade.streaming5.message.control.*;

    public class NotificationBox extends MovieClip {

        const NOTI_TYPE_ORDER:int = 1;
        const NOTI_TYPE_ALERT:int = 2;
        const NOTI_TYPE_ANNOUNCEMENT:int = 3;
        const NOTI_TYPE_RESEARCH:int = 4;
        const NOTI_TYPE_NEWS:int = 5;
        const TIMER_DELAY:int = 5000;

        public var notificationList:NotificationList;
        public var mailBox:MovieClip;
        public var notificationPushBox:MovieClip;
        private var _activeNotificationCount:int;
        private var _activeNotificationTimer:Timer;
        protected var _notificationListArray:Array;

        public function NotificationBox(){
            super();
            this.setActiveNotificationCount(0);
            this._notificationListArray = new Array();
            this.notificationPushBox.gotoAndStop(1);
            this.notificationPushBox.box.type.gotoAndStop(this.NOTI_TYPE_ORDER);
            this.notificationPushBox.box.text.embedFonts = false;
            removeChild(this.notificationPushBox);
            this._activeNotificationTimer = new Timer(this.TIMER_DELAY, 1);
            this._activeNotificationTimer.addEventListener(TimerEvent.TIMER, this.onTimerTick);
            this.mailBox.addEventListener(MouseEvent.CLICK, this.onMailBoxMouseClick);
        }
        public function updateNotificationCount(add:int):void{
            this.mailBox.count.text = (this._activeNotificationCount + add);
        }
        private function addActiveNotificationCount(count:int):void{
            this.setActiveNotificationCount((this._activeNotificationCount + count));
        }
        private function setActiveNotificationCount(count:int):void{
            this._activeNotificationCount = count;
            this.mailBox.count.text = count;
            if (count == 0){
                this.mailBox.count.visible = false;
                this.mailBox.countHolder.visible = false;
            } else {
                this.mailBox.count.visible = true;
                this.mailBox.countHolder.visible = true;
            };
        }
        public function showActiveNotification(notificationMessage:NotificationMessage):void{
            this._notificationListArray.push(notificationMessage);
            this.addActiveNotificationCount(1);
            if (this.notificationList.visible){
                this.notificationList.loadNotificationList(this._notificationListArray, this._activeNotificationCount);
                this.setActiveNotificationCount(0);
            } else {
                this.showNotificationPushBox();
                this.setNotificationPushBoxText(notificationMessage.toNotificationString());
                this.setNotificationPushBoxTime(notificationMessage.time);
                this.setNotificationPushBoxType(notificationMessage.category);
                this._activeNotificationTimer.reset();
                this._activeNotificationTimer.start();
            };
        }
        private function setNotificationPushBoxText(text:String):void{
            this.notificationPushBox.box.text.text = text;
        }
        private function setNotificationPushBoxTime(time:String):void{
            this.notificationPushBox.box.time.text = time;
        }
        private function setNotificationPushBoxType(category:NotificationCategory):void{
            this.notificationPushBox.box.type.gotoAndStop(category.name);
        }
        private function showNotificationPushBox():void{
            addChild(this.notificationPushBox);
            this.notificationPushBox.gotoAndPlay("fadeIn");
            var message:PopupStateChangeMessage = new PopupStateChangeMessage(PopupState.SHOWING, this.notificationPushBox);
            MessageDispatcher.getInstance().notifyControlMessage(message);
        }
        private function hideNotificationPushBox():void{
            this.notificationPushBox.gotoAndPlay("fadeOut");
            var message:PopupStateChangeMessage = new PopupStateChangeMessage(PopupState.HIDING, this.notificationPushBox);
            MessageDispatcher.getInstance().notifyControlMessage(message);
        }
        private function showNotificationList():void{
            this.notificationList.visible = true;
            this.notificationList.loadNotificationList(this._notificationListArray, this._activeNotificationCount);
            this.setActiveNotificationCount(0);
            if (stage != null){
                stage.addEventListener(MouseEvent.MOUSE_DOWN, this.onStageMouseClick);
            };
            var message:PopupStateChangeMessage = new PopupStateChangeMessage(PopupState.SHOWING, this.notificationList);
            MessageDispatcher.getInstance().notifyControlMessage(message);
        }
        private function hideList():void{
            this.notificationList.visible = false;
            if (stage != null){
                stage.removeEventListener(MouseEvent.MOUSE_DOWN, this.onStageMouseClick);
            };
            var message:PopupStateChangeMessage = new PopupStateChangeMessage(PopupState.HIDING, this.notificationList);
            MessageDispatcher.getInstance().notifyControlMessage(message);
        }
        private function onTimerTick(e:TimerEvent):void{
            this.hideNotificationPushBox();
        }
        private function onMailBoxMouseClick(e:MouseEvent):void{
            if (!this.notificationList.visible){
                this.hideNotificationPushBox();
                this.showNotificationList();
                SettingService.getInstance().updateConfig([SettingManager.getInstance().getConfig(ConfigType.NOTIFICATION_LAST_VIEW)]);
            } else {
                this.hideList();
            };
        }
        private function onStageMouseClick(e:MouseEvent):void{
            if (!this.contains(DisplayObject(e.target))){
                this.hideList();
            };
        }

    }
}//package com.settrade.streaming5.widget.component.standard.notification 
﻿package com.settrade.streaming5.widget.config {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.config.*;
    import com.settrade.streaming5.message.request.multipleorder.*;

    public class MultipleOrderListDerivativesConfig extends Config {

        public var name:String;
        public var orderList:Array;

        public function MultipleOrderListDerivativesConfig(){
            super(ConfigType.MULTIPLE_ORDER_DERIVATIVES);
            this.name = "";
            this.orderList = [];
        }
        public static function fromJsonObject(object:Object):MultipleOrderListDerivativesConfig{
            var subObject:Object;
            var side:DerivativesOrderSide;
            var instrumentId:String;
            var position:DerivativesPosition;
            var volume:String;
            var price:String;
            var type:DerivativesPriceType;
            var valid:DerivativesValidity;
            var icebergVolume:String;
            var order:MultipleOrderDerivatives;
            var config:MultipleOrderListDerivativesConfig = new (MultipleOrderListDerivativesConfig)();
            config.name = object.name;
            for each (subObject in object.list) {
                side = DerivativesOrderSide.lookupFromOrder(subObject.side);
                instrumentId = subObject.id;
                position = DerivativesPosition.lookupFromOrder(subObject.pos);
                volume = subObject.volume;
                price = subObject.price;
                type = DerivativesPriceType.lookUpFromOrder(subObject.type);
                valid = DerivativesValidity.lookupFromNewOrder(subObject.valid);
                icebergVolume = subObject.iv;
                order = new MultipleOrderDerivatives(side, position, instrumentId, volume, price, type, valid, icebergVolume);
                config.orderList.push(order);
            };
            return (config);
        }

        override public function toJsonObject():Object{
            var order:MultipleOrderDerivatives;
            var subObject:Object;
            var obj:Object = new Object();
            obj.name = this.name;
            var list:Array = [];
            for each (order in this.orderList) {
                subObject = new Object();
                subObject.id = order.instrumentId;
                subObject.side = order.orderSide.orderValue;
                subObject.pos = order.position.orderValue;
                subObject.volume = order.volume;
                subObject.price = order.price;
                subObject.type = order.priceType.orderValue;
                subObject.valid = order.validity.newOrderValue;
                subObject.iv = order.icebergVolume;
                list.push(subObject);
            };
            obj.list = list;
            return (obj);
        }

    }
}//package com.settrade.streaming5.widget.config 
﻿package com.settrade.streaming5.widget.config {
    import com.settrade.streaming5.enumuration.*;

    public dynamic class TickerConfig extends CustomConfig {

        public var isCriteria:Boolean;
        public var isFavourite:Boolean;
        public var favouriteIndex:int;
        public var isValue:Boolean;
        public var value:Number;
        public var isVolume:Boolean;
        public var volume:Number;
        public var isSet:Boolean;
        public var isMarketBy:Boolean;
        public var listName:String;
        public var boardType:String;
        public var boardSubType:String;
        public var isSecuritiesType:Boolean;
        public var isSecuritiesTypeAll:Boolean;
        public var isSecuritiesTypeCommon:Boolean;
        public var isSecuritiesTypeForeign:Boolean;
        public var isSecuritiesTypeEtf:Boolean;
        public var isSecuritiesTypeDerivativesWarrant:Boolean;
        public var isSecuritiesTypeWarrant:Boolean;
        public var isSecuritiesTypeConvertible:Boolean;
        public var isSecuritiesTypePreferred:Boolean;
        public var isSecuritiesTypeUnitTrust:Boolean;
        public var isTfex:Boolean;
        public var isTfexAll:Boolean;
        public var isFutures:Boolean;
        public var isFuturesAll:Boolean;
        public var isFuturesEquityIndex:Boolean;
        public var isFuturesMetal:Boolean;
        public var isFuturesEnergy:Boolean;
        public var isFuturesCurrency:Boolean;
        public var isFuturesInterestRate:Boolean;
        public var isFuturesSingleStock:Boolean;
        public var isOptions:Boolean;
        public var isTickerSum:Boolean;

        public function TickerConfig(){
            super(ConfigType.TICKER);
            this.isCriteria = true;
            this.isFavourite = false;
            this.isValue = false;
            this.isVolume = false;
            this.isSet = true;
            this.isMarketBy = false;
            this.isSecuritiesType = true;
            this.isSecuritiesTypeAll = false;
            this.isSecuritiesTypeCommon = true;
            this.isSecuritiesTypeForeign = true;
            this.isSecuritiesTypeDerivativesWarrant = true;
            this.isSecuritiesTypeWarrant = true;
            this.isSecuritiesTypeConvertible = true;
            this.isSecuritiesTypePreferred = true;
            this.isSecuritiesTypeUnitTrust = true;
            this.isSecuritiesTypeEtf = true;
            this.isTfex = true;
            this.isTfexAll = false;
            this.isFutures = true;
            this.isFuturesAll = false;
            this.isFuturesEquityIndex = true;
            this.isFuturesMetal = true;
            this.isFuturesEnergy = true;
            this.isFuturesCurrency = true;
            this.isFuturesInterestRate = true;
            this.isFuturesSingleStock = true;
            this.isOptions = true;
            this.isTickerSum = false;
        }
        public static function fromJsonObject(json:Object):TickerConfig{
            var config:* = null;
            var attribute:* = null;
            var key:* = null;
            var json:* = json;
            config = new (TickerConfig)();
            attribute = json.attr;
            for (key in attribute) {
                config[key] = attribute[key];
            };
            return (config);
            var _slot1:* = error;
            trace(_slot1.getStackTrace());
            return (new (TickerConfig)());
        }

        override public function toJsonObject():Object{
            var obj:Object = new Object();
            obj.type = type.id;
            obj.attr = new Object();
            obj.attr.isCriteria = this.isCriteria;
            obj.attr.isFavourite = this.isFavourite;
            obj.attr.favouriteIndex = this.favouriteIndex;
            obj.attr.isValue = this.isValue;
            obj.attr.value = this.value;
            obj.attr.isVolume = this.isVolume;
            obj.attr.volume = this.volume;
            obj.attr.isSet = this.isSet;
            obj.attr.isMarketBy = this.isMarketBy;
            obj.attr.listName = this.listName;
            obj.attr.boardType = this.boardType;
            obj.attr.boardSubType = this.boardSubType;
            obj.attr.isSecuritiesType = this.isSecuritiesType;
            obj.attr.isSecuritiesTypeAll = this.isSecuritiesTypeAll;
            obj.attr.isSecuritiesTypeCommon = this.isSecuritiesTypeCommon;
            obj.attr.isSecuritiesTypeForeign = this.isSecuritiesTypeForeign;
            obj.attr.isSecuritiesTypeEtf = this.isSecuritiesTypeEtf;
            obj.attr.isSecuritiesTypeDerivativesWarrant = this.isSecuritiesTypeDerivativesWarrant;
            obj.attr.isSecuritiesTypeWarrant = this.isSecuritiesTypeWarrant;
            obj.attr.isSecuritiesTypeConvertible = this.isSecuritiesTypeConvertible;
            obj.attr.isSecuritiesTypePreferred = this.isSecuritiesTypePreferred;
            obj.attr.isSecuritiesTypeUnitTrust = this.isSecuritiesTypeUnitTrust;
            obj.attr.isTfex = this.isTfex;
            obj.attr.isTfexAll = this.isTfexAll;
            obj.attr.isFutures = this.isFutures;
            obj.attr.isFuturesAll = this.isFuturesAll;
            obj.attr.isFuturesEquityIndex = this.isFuturesEquityIndex;
            obj.attr.isFuturesMetal = this.isFuturesMetal;
            obj.attr.isFuturesEnergy = this.isFuturesEnergy;
            obj.attr.isFuturesCurrency = this.isFuturesCurrency;
            obj.attr.isFuturesInterestRate = this.isFuturesInterestRate;
            obj.attr.isFuturesSingleStock = this.isFuturesSingleStock;
            obj.attr.isOptions = this.isOptions;
            obj.attr.isTickerSum = this.isTickerSum;
            return (obj);
        }
        public function toString():String{
            return ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("[TickerConfig isCriteria=" + this.isCriteria) + " isFavourite=") + this.isFavourite) + " favouriteIndex=") + this.favouriteIndex) + " isValue=") + this.isValue) + " value=") + this.value) + " isVolume=") + this.isVolume) + " volume=") + this.volume) + " isSet=") + this.isSet) + " isMarketBy=") + this.isMarketBy) + " listName=") + this.listName) + " boardType=") + this.boardType) + " boardSubType=") + this.boardSubType) + " isSecuritiesType=") + this.isSecuritiesType) + " isSecuritiesTypeAll=") + this.isSecuritiesTypeAll) + " isSecuritiesTypeCommon=") + this.isSecuritiesTypeCommon) + " isSecuritiesTypeForeign=") + this.isSecuritiesTypeForeign) + " isSecuritiesTypeEtf=") + this.isSecuritiesTypeEtf) + " isSecuritiesTypeDerivativesWarrant=") + this.isSecuritiesTypeDerivativesWarrant) + " isSecuritiesTypeWarrant=") + this.isSecuritiesTypeWarrant) + " isSecuritiesTypeConvertible=") + this.isSecuritiesTypeConvertible) + " isSecuritiesTypePreferred=") + this.isSecuritiesTypePreferred) + " isSecuritiesTypeUnitTrust=") + this.isSecuritiesTypeUnitTrust) + " isTfex=") + this.isTfex) + " isTfexAll=") + this.isTfexAll) + " isFutures=") + this.isFutures) + " isFuturesAll=") + this.isFuturesAll) + " isFuturesEquityIndex=") + this.isFuturesEquityIndex) + " isFuturesMetal=") + this.isFuturesMetal) + " isFuturesEnergy=") + this.isFuturesEnergy) + " isFuturesCurrency=") + this.isFuturesCurrency) + " isFuturesInterestRate=") + this.isFuturesInterestRate) + " isFuturesSingleStock=") + this.isFuturesSingleStock) + " isOptions=") + this.isOptions) + "isTickerSum=") + this.isTickerSum) + "]"));
        }
        public function propertyIsEnumerable(name:String):Boolean{
            return (true);
        }

    }
}//package com.settrade.streaming5.widget.config 
﻿package com.settrade.streaming5.widget.config {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.config.*;
    import __AS3__.vec.*;

    public class WidgetPageConfig extends Config {

        public static const EMPTY_PAGE:WidgetPageConfig = new WidgetPageConfig("", "", 3, 4);
;

        protected var _id:String;
        protected var _name:String;
        protected var _width:uint;
        protected var _height:uint;
        protected var _version:String;
        protected var _widgetGroupConfigList:Vector.<WidgetGroupConfig>;

        public function WidgetPageConfig(id:String, name:String, width:uint, height:uint, version:String="0"){
            super(ConfigType.WIDGET_PAGE);
            this._id = id;
            this._name = name;
            this._width = width;
            this._height = height;
            this._version = version;
            this._widgetGroupConfigList = new Vector.<WidgetGroupConfig>();
        }
        public static function fromJsonString(jsonString:String):WidgetPageConfig{
            return (fromJsonObject(JSON.parse(jsonString)));
        }
        public static function fromJsonObject(jsonObject:Object):WidgetPageConfig{
            var widgetGroupConfig:Object;
            var version:String = jsonObject.version;
            version = (((version == null)) ? "0" : version);
            var config:WidgetPageConfig = new WidgetPageConfig(jsonObject.id, jsonObject.name, jsonObject.width, jsonObject.height, version);
            for each (widgetGroupConfig in jsonObject.widgetGroup) {
                config.addWidgetGroupConfig(WidgetGroupConfig.fromJsonObject(widgetGroupConfig));
            };
            return (config);
        }

        public function get width():uint{
            return (this._width);
        }
        public function get height():uint{
            return (this._height);
        }
        public function addSingleWidgetComponent(widgetComponent:WidgetComponentConfig):void{
            var widgetGroupConfig:WidgetGroupConfig = new WidgetGroupConfig();
            widgetGroupConfig.add(widgetComponent);
            widgetGroupConfig.widgetGroup = WidgetGroup.NO_GROUP;
            this._widgetGroupConfigList.push(widgetGroupConfig);
        }
        public function addWidgetGroupConfig(widgetGroupConfig:WidgetGroupConfig):void{
            this._widgetGroupConfigList.push(widgetGroupConfig);
        }
        public function removeWidgetGroupConfig(widgetGroupConfig:WidgetGroupConfig):void{
            this._widgetGroupConfigList.splice(this._widgetGroupConfigList.indexOf(widgetGroupConfig), 1);
        }
        public function importWidgetPageConfig(widgetPageConfig:WidgetPageConfig):void{
            this._id = widgetPageConfig._id;
            this._name = widgetPageConfig._name;
            this._width = widgetPageConfig._width;
            this._height = widgetPageConfig._height;
            this._version = widgetPageConfig._version;
            this._widgetGroupConfigList = widgetPageConfig._widgetGroupConfigList;
        }
        public function get widgetGroupConfigList():Array{
            var widget:WidgetGroupConfig;
            var tmp:Array = new Array();
            for each (widget in this._widgetGroupConfigList) {
                tmp.push(widget);
            };
            return (tmp);
        }
        public function set width(value:uint):void{
            this._width = value;
        }
        public function set height(value:uint):void{
            this._height = value;
        }
        public function get id():String{
            return (this._id);
        }
        public function set id(value:String):void{
            this._id = value;
        }
        public function get name():String{
            return (this._name);
        }
        public function set name(value:String):void{
            this._name = value;
        }
        public function get version():String{
            return (this._version);
        }
        public function set version(value:String):void{
            this._version = value;
        }
        override public function toJsonObject():Object{
            var widgetGroupConfig:WidgetGroupConfig;
            var obj:Object = new Object();
            obj.name = this._name;
            obj.id = this._id;
            obj.width = this._width;
            obj.height = this._height;
            obj.version = this._version;
            var groups:Array = new Array();
            for each (widgetGroupConfig in this._widgetGroupConfigList) {
                groups.push(widgetGroupConfig.toJsonObject());
            };
            obj.widgetGroup = groups;
            return (obj);
        }
        public function clone():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var clone:WidgetPageConfig = new WidgetPageConfig(this.id, this.name, this.width, this.height, this.version);
            for each (group in this.widgetGroupConfigList) {
                clone.addWidgetGroupConfig(group.clone());
            };
            return (clone);
        }
        public function equals(config:WidgetPageConfig):Boolean{
            if (((((((((((!((this._id == config._id))) || (!((this._name == config._name))))) || (!((this._width == config._width))))) || (!((this._height == config._height))))) || (!((this._version == config._version))))) || (!((this._widgetGroupConfigList.length == config._widgetGroupConfigList.length))))){
                return (false);
            };
            var i:* = 0;
            while (i < this._widgetGroupConfigList.length) {
                if (!this._widgetGroupConfigList[i].equals(config._widgetGroupConfigList[i])){
                    return (false);
                };
                i++;
            };
            return (true);
        }

    }
}//package com.settrade.streaming5.widget.config 
﻿package com.settrade.streaming5.widget.config {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.config.*;

    public class WidgetComponentConfig extends Config {

        protected var _widgetId:String;
        protected var _x:uint;
        protected var _y:uint;
        protected var _componentConfig:CustomConfig;

        public function WidgetComponentConfig(widgetId:String, x:uint, y:uint, componentConfig:CustomConfig=null){
            super(ConfigType.WIDGET_COMPONENT);
            this._widgetId = widgetId;
            this._x = x;
            this._y = y;
            this._componentConfig = componentConfig;
        }
        public static function fromJsonObject(jsonObject:Object):WidgetComponentConfig{
            return (new WidgetComponentConfig(jsonObject.id, jsonObject.x, jsonObject.y, CustomConfig.fromJsonObject(jsonObject)));
        }

        public function get name():String{
            return (((this._x + ",") + this._y));
        }
        public function get widgetId():String{
            return (this._widgetId);
        }
        public function get x():uint{
            return (this._x);
        }
        public function get y():uint{
            return (this._y);
        }
        public function get componentConfig():CustomConfig{
            return (this._componentConfig);
        }
        public function set widgetId(value:String):void{
            this._widgetId = value;
        }
        public function set x(value:uint):void{
            this._x = value;
        }
        public function set y(value:uint):void{
            this._y = value;
        }
        public function set componentConfig(value:CustomConfig):void{
            this._componentConfig = value;
        }
        override public function toJsonObject():Object{
            var jsonComponentConfig:Object;
            var obj:Object = new Object();
            obj.id = this._widgetId;
            obj.x = this._x;
            obj.y = this._y;
            if (this._componentConfig != null){
                jsonComponentConfig = this._componentConfig.toJsonObject();
                obj.type = jsonComponentConfig.type;
                obj.attr = jsonComponentConfig.attr;
            } else {
                obj.type = "";
                obj.attr = "";
            };
            return (obj);
        }
        public function toSourceCode():String{
            return ((((((("new WidgetComponentConfig(\"" + this._widgetId) + "\",") + this._x) + ",") + this._y) + ");\n"));
        }
        public function clone():WidgetComponentConfig{
            return (new WidgetComponentConfig(this.widgetId, this.x, this.y, this.componentConfig));
        }
        public function equals(src:WidgetComponentConfig):Boolean{
            return ((((((this.widgetId == src.widgetId)) && ((this.x == src.x)))) && ((this.y == src.y))));
        }

    }
}//package com.settrade.streaming5.widget.config 
﻿package com.settrade.streaming5.widget.config {
    import com.settrade.streaming5.enumuration.*;

    public class MultipleWidgetPageConfig extends CustomConfig {

        protected var _widgetPageConfigList:Array;

        public function MultipleWidgetPageConfig(){
            super(ConfigType.WIDGET_PAGE_LIST);
            this._widgetPageConfigList = new Array();
        }
        public static function fromJsonObject(object:Object):MultipleWidgetPageConfig{
            var config:* = null;
            var object:* = object;
            config = new (MultipleWidgetPageConfig)();
            for each (object in object.widgetPageList) {
                config.widgetPageConfigList.push(WidgetPageConfig.fromJsonObject(object));
            };
            return (config);
            var _slot1:* = error;
            return (new (MultipleWidgetPageConfig)());
        }

        public function addWidgetPageConfig(widgetPageConfig:WidgetPageConfig):void{
            this._widgetPageConfigList.push(widgetPageConfig);
        }
        override public function toJsonObject():Object{
            var widgetPageConfig:WidgetPageConfig;
            var object:Object = new Object();
            var widgetpageConfigList:Array = new Array();
            for each (widgetPageConfig in this._widgetPageConfigList) {
                widgetpageConfigList.push(widgetPageConfig.toJsonObject());
            };
            object.widgetPageList = widgetpageConfigList;
            return (object);
        }
        public function get widgetPageConfigList():Array{
            return (this._widgetPageConfigList);
        }
        public function set widgetPageConfigList(value:Array):void{
            this._widgetPageConfigList = value;
        }

    }
}//package com.settrade.streaming5.widget.config 
﻿package com.settrade.streaming5.widget.config {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.log.logger.*;

    public dynamic class MultipleOrderConfig extends CustomConfig {

        private static var logger:Logger = new Logger(prototype.constructor);

        public var account:Account;
        public var equityList:Array;
        public var derivativesList:Array;

        public function MultipleOrderConfig(){
            super(ConfigType.MULTIPLE_ORDER);
            this.equityList = [];
            this.derivativesList = [];
            this.account = null;
        }
        public static function fromJsonObject(object:Object):MultipleOrderConfig{
            var config:* = null;
            var attribute:* = null;
            var sub:* = null;
            var name:* = null;
            var systemStr:* = null;
            var system:* = null;
            var object:* = object;
            config = new (MultipleOrderConfig)();
            attribute = JSON.parse(object.attr);
            if (attribute.acc != null){
                name = attribute.acc.name;
                systemStr = attribute.acc.sys;
                system = (((systemStr == "E")) ? System.EQUITY : (((systemStr == "D")) ? System.DERIV : System.NO_SYSTEM));
                config.account = AccountManager.getInstance().getAccountByAccountNumberAndSystem(name, system);
            };
            for each (sub in attribute.eq) {
                config.equityList.push(MultipleOrderListEquityConfig.fromJsonObject(sub));
            };
            for each (sub in attribute.dv) {
                config.derivativesList.push(MultipleOrderListDerivativesConfig.fromJsonObject(sub));
            };
            return (config);
            var _slot1:* = error;
            logger.error(_slot1.getStackTrace());
            return (new (MultipleOrderConfig)());
        }

        override public function toJsonObject():Object{
            var config:MultipleOrderListEquityConfig;
            var dv:Array;
            var configd:MultipleOrderListDerivativesConfig;
            var object:Object = new Object();
            object.type = type.id;
            object.attr = new Object();
            if (this.account != null){
                object.attr.acc = new Object();
                object.attr.acc.name = this.account.accountNumber;
                object.attr.acc.sys = this.account.system.feedName;
            };
            var eq:Array = [];
            for each (config in this.equityList) {
                eq.push(config.toJsonObject());
            };
            dv = [];
            for each (configd in this.derivativesList) {
                dv.push(configd.toJsonObject());
            };
            object.attr.eq = eq;
            object.attr.dv = dv;
            return (object);
        }

    }
}//package com.settrade.streaming5.widget.config 
﻿package com.settrade.streaming5.widget.config {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.config.*;
    import com.settrade.log.logger.*;

    public dynamic class CustomConfig extends Config {

        private static var logger:Logger = new Logger(prototype.constructor);

        public function CustomConfig(type:ConfigType){
            super(type);
        }
        public static function fromJsonObject(json:Object):CustomConfig{
            var type:ConfigType;
            var _local3:CustomConfig;
            var _local4:Object;
            var key:String;
            if ((((((json.type == null)) || ((json.attr == null)))) || ((json.attr.length == 0)))){
                return (null);
            };
            type = ConfigType.lookUp(json.type);
            switch (type){
                case ConfigType.TICKER:
                    return (TickerConfig.fromJsonObject(json));
                case ConfigType.MULTIPLE_ORDER:
                    return (MultipleOrderConfig.fromJsonObject(json));
                default:
                    _local3 = new CustomConfig(type);
                    _local4 = JSON.parse(json.attr);
                    for (key in _local4) {
                        _local3[key] = _local4[key];
                    };
                    return (_local3);
            };
        }

        override public function toJsonObject():Object{
            var key:String;
            var obj:Object = new Object();
            obj.type = type.id;
            obj.attr = new Object();
            for (key in this) {
                if (key != "type"){
                    obj.attr[key] = this[key];
                };
            };
            return (obj);
        }
        override public function toJsonString():String{
            return (JSON.stringify(this.toJsonObject()));
        }

    }
}//package com.settrade.streaming5.widget.config 
﻿package com.settrade.streaming5.widget.config {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.config.*;
    import com.settrade.streaming5.message.request.multipleorder.*;

    public class MultipleOrderListEquityConfig extends Config {

        public var name:String;
        public var orderList:Array;

        public function MultipleOrderListEquityConfig(){
            super(ConfigType.MULTIPLE_ORDER);
            this.name = "";
            this.orderList = [];
        }
        public static function fromJsonObject(object:Object):MultipleOrderListEquityConfig{
            var subObject:Object;
            var instrumentId:String;
            var side:OrderSide;
            var nvdr:Boolean;
            var volume:Number;
            var price:Number;
            var priceType:PriceType;
            var validity:Validity;
            var icebergVolume:Number;
            var order:MultipleOrderEquity;
            var config:MultipleOrderListEquityConfig = new (MultipleOrderListEquityConfig)();
            config.name = object.name;
            for each (subObject in object.list) {
                instrumentId = subObject.id;
                side = OrderSide.lookUpFromOrder(subObject.side);
                nvdr = Boolean(subObject.nvdr);
                volume = Number(subObject.volume);
                price = Number(subObject.price);
                priceType = PriceType.lookUpFromOrder(subObject.type);
                validity = Validity.lookUpFromOrder(subObject.valid);
                icebergVolume = Number(subObject.iv);
                order = new MultipleOrderEquity(side, instrumentId, nvdr, volume, price, priceType, validity, icebergVolume);
                config.orderList.push(order);
            };
            return (config);
        }

        override public function toJsonObject():Object{
            var order:MultipleOrderEquity;
            var subObject:Object;
            var obj:Object = new Object();
            obj.name = this.name;
            var list:Array = [];
            for each (order in this.orderList) {
                subObject = new Object();
                subObject.id = order.instrumentId;
                subObject.side = order.orderSide.orderValue;
                subObject.nvdr = order.nvdrFlag;
                subObject.volume = order.volume;
                subObject.price = order.price;
                subObject.type = order.priceType.orderValue;
                subObject.valid = order.validity.orderValue;
                subObject.iv = order.icebergVolume;
                list.push(subObject);
            };
            obj.list = list;
            return (obj);
        }

    }
}//package com.settrade.streaming5.widget.config 
﻿package com.settrade.streaming5.widget.config {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.config.*;
    import __AS3__.vec.*;

    public class WidgetGroupConfig extends Config {

        protected var _primary:WidgetComponentConfig;
        protected var _widgetGroup:WidgetGroup;
        protected var _componentList:Vector.<WidgetComponentConfig>;

        public function WidgetGroupConfig(){
            super(ConfigType.WIDGET_GROUP);
            this._primary = null;
            this._widgetGroup = WidgetGroup.NO_GROUP;
            this._componentList = new Vector.<WidgetComponentConfig>();
        }
        public static function fromJsonObject(jsonObject:Object):WidgetGroupConfig{
            var componentConfigObj:Object;
            var component:WidgetComponentConfig;
            var widgetGroup:WidgetGroup;
            var config:WidgetGroupConfig = new (WidgetGroupConfig)();
            var primaryX = -1;
            var primaryY = -1;
            if (((!((jsonObject.px == null))) && (!((jsonObject.py == null))))){
                primaryX = jsonObject.px;
                primaryY = jsonObject.py;
            };
            for each (componentConfigObj in jsonObject.widget) {
                component = WidgetComponentConfig.fromJsonObject(componentConfigObj);
                config.add(component, (((component.x == primaryX)) && ((component.y == primaryY))));
            };
            if (jsonObject.group != null){
                widgetGroup = WidgetGroup.lookupFromFeed(jsonObject.group);
                config.widgetGroup = widgetGroup;
            };
            return (config);
        }

        public function add(componentConfig:WidgetComponentConfig, isPrimary:Boolean=false){
            if (isPrimary){
                this._primary = componentConfig;
            };
            this._componentList.push(componentConfig);
        }
        public function get primary():WidgetComponentConfig{
            return (this._primary);
        }
        public function get componentList():Array{
            var component:WidgetComponentConfig;
            var tmp:Array = new Array();
            for each (component in this._componentList) {
                tmp.push(component);
            };
            return (tmp);
        }
        public function set primary(value:WidgetComponentConfig):void{
            this._primary = value;
        }
        public function get widgetGroup():WidgetGroup{
            return (this._widgetGroup);
        }
        public function set widgetGroup(value:WidgetGroup):void{
            this._widgetGroup = value;
        }
        public function remove(componentConfig:WidgetComponentConfig){
            if (this._primary == componentConfig){
                this._primary = null;
            };
            this._componentList.splice(this._componentList.indexOf(componentConfig), 1);
        }
        override public function toJsonObject():Object{
            var component:WidgetComponentConfig;
            var obj:Object = new Object();
            if (this._primary != null){
                obj.px = this._primary.x;
                obj.py = this._primary.y;
            } else {
                obj.px = -1;
                obj.py = -1;
            };
            var member:Array = new Array();
            for each (component in this._componentList) {
                member.push(component.toJsonObject());
            };
            obj.widget = member;
            obj.group = this._widgetGroup.feedValue;
            return (obj);
        }
        public function toSourceCode():String{
            var component:WidgetComponentConfig;
            var str:* = "new WidgetGroupConfig();\n";
            for each (component in this._componentList) {
                str = (str + ("component = " + component.toSourceCode()));
                str = (str + (("group.add(component," + (component == this._primary)) + ");\n"));
            };
            str = (str + (("group.widgetGroup = WidgetGroup.lookupFromFeed(\"" + this._widgetGroup.feedValue) + "\");\n"));
            return (str);
        }
        public function clone():WidgetGroupConfig{
            var component:WidgetComponentConfig;
            var componentClone:WidgetComponentConfig;
            var isPrimary:Boolean;
            var clone:WidgetGroupConfig = new WidgetGroupConfig();
            for each (component in this.componentList) {
                componentClone = component.clone();
                isPrimary = ((!((this.primary == null))) && (componentClone.equals(this.primary)));
                clone.add(componentClone, isPrimary);
            };
            clone.widgetGroup = this._widgetGroup;
            return (clone);
        }
        public function equals(config:WidgetGroupConfig):Boolean{
            if ((((((this._primary == null)) && (!((config._primary == null))))) || (((!((this._primary == null))) && ((config._primary == null)))))){
                return (false);
            };
            if (this._componentList.length != config._componentList.length){
                return (false);
            };
            if (((((!((this._primary == null))) && (!((config._primary == null))))) && (!(this._primary.equals(config._primary))))){
                return (false);
            };
            var i:* = 0;
            while (i < this._componentList.length) {
                if (!this._componentList[i].equals(config._componentList[i])){
                    return (false);
                };
                i++;
            };
            if (((((!((this._widgetGroup == null))) && (!((config._widgetGroup == null))))) && (!((this._widgetGroup == config._widgetGroup))))){
                return (false);
            };
            return (true);
        }

    }
}//package com.settrade.streaming5.widget.config 
﻿package com.settrade.streaming5.widget {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import com.settrade.streaming5.widget.config.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.manager.*;
    import flash.utils.*;
    import com.settrade.streaming5.common.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.page.*;
    import com.settrade.streaming5.widget.component.*;
    import com.settrade.streaming5.widget.event.*;
    import com.settrade.streaming5.widget.enumuration.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.widget.manager.*;
    import com.settrade.streaming5.message.control.*;
    import com.settrade.streaming5.widget.component.standard.unavailable.*;

    public class WidgetPage extends StreamingMovieClip {

        public static var SAVE_STATE_TIME:uint = 5000;
        private static var logger:Logger = new Logger(prototype.constructor);

        private const CANVAS_MARGIN:Number = 0;
        private const INNER_MARGIN_X:Number = 1.5;
        private const INNER_MARGIN_Y:Number = 1;
        private const WIDGET_WIDTH:Number = 419;
        private const WIDGET_HEIGHT:Number = 153;
        private const BACKGROUND_COLOR:uint = 0x333333;
        private const WIDGET_BACKGROUND_COLOR:uint = 0;
        private const INIT:String = "Init";
        private const INIT_COMPLETE:String = "InitComplete";
        private const START:String = "Start";
        private const START_COMPLETE:String = "StartComplete";
        private const STOP:String = "Stop";
        private const STOP_COMPLETE:String = "StopComplete";

        private var _widgetPageConfig:WidgetPageConfig;
        private var isStart:Boolean;
        private var isInit:Boolean;
        private var status:WidgetPageStatus;
        private var widgetList:Vector.<WidgetComponent>;
        private var widgetGrid:Array;
        private var widgetMap:Dictionary;
        private var groupManager:WidgetGroupManager;
        private var widgetComponentProvider:WidgetComponentProvider;
        private var widgetAttributeManager:WidgetAttributeManager;
        private var serviceLockManager:ServiceLockManager;
        private var saveStateTimer:Timer;
        private var settingService:SettingService;
        private var loadWidgetList:Array;

        public function WidgetPage(widgetPageConfig:WidgetPageConfig=null){
            super();
            var config:* = widgetPageConfig;
            if (widgetPageConfig == null){
                config = WidgetPageConfig.EMPTY_PAGE;
            };
            logger.trace((((("New widget page " + widgetPageConfig.id) + "(") + widgetPageConfig.name) + ")"));
            this.isStart = false;
            this.isInit = false;
            this.status = WidgetPageStatus.NO_STATUS;
            this.serviceLockManager = ServiceLockManager.getInstance();
            this.widgetComponentProvider = WidgetComponentProvider.getInstance();
            this.widgetAttributeManager = WidgetAttributeManager.getInstance();
            this.settingService = SettingService.getInstance();
            this.saveStateTimer = new Timer(SAVE_STATE_TIME, 1);
            this.saveStateTimer.addEventListener(TimerEvent.TIMER_COMPLETE, this.onSaveStateTimer);
            this.addInnerListener();
            this.initialPageFromConfig(config);
        }
        override public function startService():void{
            logger.info(("Start Service:::" + this._widgetPageConfig.name));
            this.isStart = true;
            this.toggleAction(this.START);
        }
        override public function stopService():void{
            this.isStart = false;
            this.toggleAction(this.STOP);
        }
        override public function synchronousStartService():void{
            var widget:* = null;
            for each (widget in this.widgetList) {
                try {
                    widget.synchronousStartService();
                } catch(error:Error) {
                    logger.debug(error.getStackTrace());
                    logger.error(((("Error on Start Widget:" + widget.widgetId) + ":") + widget.name));
                };
            };
        }
        override public function synchronousStopService():void{
            var widget:* = null;
            for each (widget in this.widgetList) {
                try {
                    widget.synchronousStopService();
                } catch(error:Error) {
                    logger.debug(error.getStackTrace());
                    logger.error(((("Error on Start Widget:" + widget.widgetId) + ":") + widget.name));
                };
            };
        }
        private function onStartService():void{
            var widget:* = null;
            var groupAccountEvent:* = null;
            var groupInstrumentIdEvent:* = null;
            var timerHelper:* = new TimerHelper("WidgetStartServiceTimer");
            this.lock();
            for each (widget in this.widgetList) {
                timerHelper.stop(("Start:StartService:" + widget.widgetId));
                UsageLogService.getInstance().startLog(widget);
                try {
                    widget.startService();
                    widget.sendStatistics();
                } catch(error:Error) {
                    logger.debug(error.getStackTrace());
                    logger.error(((("Error on Start Widget:" + widget.widgetId) + ":") + widget.name));
                };
                timerHelper.stop(("Complete:StartService:" + widget.widgetId));
            };
            if (StreamingAttribute.applicationMode.isPro()){
                if (GlobalGroupEventManager.getInstance().hasEvent(GroupMessageType.ACCOUNT)){
                    groupAccountEvent = GroupAccountEvent(GlobalGroupEventManager.getInstance().getGroupMessageByEventType(GroupMessageType.ACCOUNT));
                    this.dispatchEvent(new GroupAccountEvent(groupAccountEvent.groupId, groupAccountEvent.account));
                };
                if (GlobalGroupEventManager.getInstance().hasEvent(GroupMessageType.INSTRUMENT_ID)){
                    groupInstrumentIdEvent = GroupInstrumentIdEvent(GlobalGroupEventManager.getInstance().getGroupMessageByEventType(GroupMessageType.INSTRUMENT_ID));
                    this.dispatchEvent(new GroupInstrumentIdEvent(groupInstrumentIdEvent.groupId, groupInstrumentIdEvent.instrumentId));
                };
            };
            this.unlock();
            timerHelper.summarize();
            this.toggleAction(this.START_COMPLETE);
        }
        private function onStopService():void{
            var widget:* = null;
            logger.info("On Stop Service");
            this.lock();
            for each (widget in this.widgetList) {
                UsageLogService.getInstance().stopLog(widget);
                try {
                    widget.stopService();
                } catch(error:Error) {
                    logger.debug(error.getStackTrace());
                    logger.error(((("Error on Stop Widget:" + widget.widgetId) + ":") + widget.name));
                };
            };
            this.unlock();
            this.toggleAction(this.STOP_COMPLETE);
        }
        public function getWidgetByName(name:String):WidgetComponent{
            return (this.widgetMap[name]);
        }
        public function hasWidgetByname(name:String):Boolean{
            return (!((this.getWidgetByName(name) == null)));
        }
        public function initialPageFromConfig(config:WidgetPageConfig):void{
            this._widgetPageConfig = config;
            this.isInit = true;
            this.toggleAction(this.INIT);
        }
        private function requestSaveState():void{
            this.saveStateTimer.reset();
            this.saveStateTimer.start();
        }
        private function forceSaveState():void{
            this.saveStateTimer.reset();
            this.saveState();
        }
        private function saveState():void{
            this.settingService.updateConfig([this._widgetPageConfig]);
        }
        private function toggleActionNoStatus(action:String):void{
            switch (action){
                case this.INIT:
                    this.changeState(WidgetPageStatus.INITIAL);
                    break;
            };
        }
        private function toggleActionInitial(action:String):void{
            switch (action){
                case this.INIT_COMPLETE:
                    this.changeState(WidgetPageStatus.IDLE);
                    break;
            };
        }
        private function toggleActionIdle(action:String):void{
            switch (action){
                case this.START:
                    this.changeState(WidgetPageStatus.START);
                    break;
                case this.INIT:
                    this.changeState(WidgetPageStatus.INITIAL);
                    break;
            };
        }
        private function toggleActionStart(action:String):void{
            switch (action){
                case this.START_COMPLETE:
                    this.changeState(WidgetPageStatus.PROCESS);
                    break;
            };
        }
        private function toggleActionProcess(action:String):void{
            switch (action){
                case this.INIT:
                case this.STOP:
                    this.changeState(WidgetPageStatus.STOP);
                    break;
            };
        }
        private function toggleActionStop(action:String):void{
            switch (action){
                case this.STOP_COMPLETE:
                    this.changeState(WidgetPageStatus.IDLE);
                    break;
            };
        }
        private function toggleAction(action:String):void{
            logger.info(("Toggle Action: " + action));
            switch (this.status){
                case WidgetPageStatus.NO_STATUS:
                    this.toggleActionNoStatus(action);
                    break;
                case WidgetPageStatus.INITIAL:
                    this.toggleActionInitial(action);
                    break;
                case WidgetPageStatus.IDLE:
                    this.toggleActionIdle(action);
                    break;
                case WidgetPageStatus.START:
                    this.toggleActionStart(action);
                    break;
                case WidgetPageStatus.PROCESS:
                    this.toggleActionProcess(action);
                    break;
                case WidgetPageStatus.STOP:
                    this.toggleActionStop(action);
                    break;
            };
        }
        private function changeState(newState:WidgetPageStatus):void{
            logger.info(((("Change State From " + this.status) + " to ") + newState));
            var oldState:WidgetPageStatus = this.status;
            this.status = newState;
            switch (this.status){
                case WidgetPageStatus.INITIAL:
                    this.initialPage();
                    break;
                case WidgetPageStatus.IDLE:
                    if (this.isInit){
                        this.toggleAction(this.INIT);
                    };
                    if (this.isStart){
                        this.toggleAction(this.START);
                    };
                    break;
                case WidgetPageStatus.START:
                    this.onStartService();
                    break;
                case WidgetPageStatus.PROCESS:
                    if (!this.isStart){
                        this.toggleAction(this.STOP);
                    };
                    if (this.isInit){
                        this.toggleAction(this.STOP);
                    };
                    break;
                case WidgetPageStatus.STOP:
                    this.onStopService();
                    break;
            };
            WidgetPageStatusService.getInstance().notifyWidgetPageStatus(this.widgetPageConfig.id, oldState, newState);
        }
        public function get pageWidth():uint{
            return (this._widgetPageConfig.width);
        }
        public function get pageHeight():uint{
            return (this._widgetPageConfig.height);
        }
        public function get widgetPageConfig():WidgetPageConfig{
            return (this._widgetPageConfig);
        }
        private function initialPage():void{
            var widget:WidgetComponent;
            logger.info("Initial Page");
            if (this.widgetList != null){
                for each (widget in this.widgetList) {
                    widget.stop();
                    widget.parent.removeChild(widget);
                    widget.destroy();
                };
            };
            logger.info("Complete Clean");
            this.widgetList = new Vector.<WidgetComponent>();
            this.widgetMap = new Dictionary(true);
            this.groupManager = new WidgetGroupManager();
            this.loadWidgetList = new Array();
            this.initialGrid();
            this.initialComponent();
            this.drawBackgroundRect();
            this.pollInitialComplete();
        }
        private function initialComponent():void{
            var widgetGroupConfig:WidgetGroupConfig;
            var widgetComponentConfig:WidgetComponentConfig;
            for each (widgetGroupConfig in this._widgetPageConfig.widgetGroupConfigList) {
                for each (widgetComponentConfig in widgetGroupConfig.componentList) {
                    this.loadWidgetList.push(widgetComponentConfig.name);
                };
            };
            for each (widgetGroupConfig in this._widgetPageConfig.widgetGroupConfigList) {
                for each (widgetComponentConfig in widgetGroupConfig.componentList) {
                    this.loadWidget(widgetComponentConfig);
                };
            };
        }
        private function initialGroup():void{
            var widgetGroupConfig:WidgetGroupConfig;
            var nameList:Array;
            var widgetComponentConfig:WidgetComponentConfig;
            var primaryName:String;
            var groupName:String;
            logger.info("Initial Group");
            for each (widgetGroupConfig in this._widgetPageConfig.widgetGroupConfigList) {
                nameList = new Array();
                for each (widgetComponentConfig in widgetGroupConfig.componentList) {
                    nameList.push(widgetComponentConfig.name);
                };
                primaryName = ((widgetGroupConfig.primary)==null) ? null : widgetGroupConfig.primary.name;
                groupName = widgetGroupConfig.widgetGroup.feedValue;
                this.groupWidget(nameList, primaryName, groupName);
            };
        }
        private function loadWidget(widgetComponentConfig:WidgetComponentConfig):void{
            var widgetId:* = null;
            var name:* = null;
            var widgetComponentConfig:* = widgetComponentConfig;
            widgetId = widgetComponentConfig.widgetId;
            name = widgetComponentConfig.name;
            var indexX:* = widgetComponentConfig.x;
            var indexY:* = widgetComponentConfig.y;
            if (!this.widgetAttributeManager.hasWidgetAttributeByWidgetId(widgetId)){
                logger.error((("Unavailable Widget[" + widgetId) + "]"));
                this.addWidget(new UnavailableWidget(widgetId), widgetComponentConfig);
                this.loadWidgetList.splice(this.loadWidgetList.indexOf(name), 1);
                this.pollInitialComplete();
            } else {
                if (this.widgetComponentProvider.canCreate(widgetId)){
                    logger.info(("Create widget " + widgetId));
                    this.addWidget(this.widgetComponentProvider.getWidgetComponent(widgetId), widgetComponentConfig);
                    this.loadWidgetList.splice(this.loadWidgetList.indexOf(name), 1);
                    this.pollInitialComplete();
                } else {
                    addEventListener(MessageControlEvent.WIDGET_LOADED, function (e:MessageControlEvent){
                        var message:WidgetLoadedMessage = WidgetLoadedMessage(e.message);
                        if (message.widgetId == widgetId){
                            if (message.status.isLoaded()){
                                logger.info(("Loaded, Create widget " + widgetId));
                                addWidget(widgetComponentProvider.getWidgetComponent(widgetId), widgetComponentConfig);
                                loadWidgetList.splice(loadWidgetList.indexOf(name), 1);
                                pollInitialComplete();
                            } else {
                                if (message.status.isError()){
                                    addWidget(new UnavailableWidget(widgetId), widgetComponentConfig);
                                    loadWidgetList.splice(loadWidgetList.indexOf(name), 1);
                                    pollInitialComplete();
                                };
                            };
                        };
                    });
                    this.widgetComponentProvider.loadWidgetComponentFromRemote(widgetId);
                };
            };
        }
        private function pollInitialComplete():void{
            if (this.loadWidgetList.length == 0){
                this.initialGroup();
                this.isInit = false;
                this.toggleAction(this.INIT_COMPLETE);
            };
        }
        protected function addWidget(widget:WidgetComponent, widgetComponentConfig:WidgetComponentConfig):void{
            var name:String = widgetComponentConfig.name;
            var indexX:uint = widgetComponentConfig.x;
            var indexY:uint = widgetComponentConfig.y;
            logger.trace((((((("About to add widget " + widgetComponentConfig.widgetId) + "(") + widgetComponentConfig.name) + ") to page [") + this._widgetPageConfig.name) + "]"));
            if (this.hasWidgetByname(name)){
                logger.error("Duplicate Widget Name");
            } else {
                if (!this.isValidPosition(widget, indexX, indexY)){
                    logger.error(((("Invalid Position:" + this._widgetPageConfig.id) + " Widget:") + widgetComponentConfig.name));
                } else {
                    logger.trace((((((("Add Widget [" + widget.widgetId) + "] to (") + indexX) + ",") + indexY) + ")"));
                    widget.name = name;
                    widget.group = this.groupManager.getNewGroupId();
                    widget.parentPage = this;
                    widget.isPrimary = true;
                    widget.config = widgetComponentConfig;
                    this.widgetList.push(widget);
                    this.widgetMap[name] = widget;
                    widget.changeLanguage(LanguageManager.currentLanguageConfig);
                    this.addWidgetToGrid(widget, indexX, indexY);
                    this.addWidgetToPage(widget, widgetComponentConfig);
                };
            };
        }
        protected function addWidgetToPage(widget:WidgetComponent, widgetComponentConfig:WidgetComponentConfig):void{
            widget.x = this.calculatePositionX(widgetComponentConfig.x);
            widget.y = this.calculatePositionY(widgetComponentConfig.y);
            addChildAt(widget, 0);
        }
        private function groupWidget(nameList:Array, primary:String=null, groupName:String=""):void{
            var name:String;
            var widget:WidgetComponent;
            if (groupName.length == 0){
                groupName = this.groupManager.getNewGroupId();
            };
            for each (name in nameList) {
                logger.info(((((("Page:" + this._widgetPageConfig.name) + ",Name::::::::::") + name) + ",Primary:::::::::") + primary));
                widget = this.getWidgetByName(name);
                if (widget != null){
                    if (((!((primary == null))) && (!((primary == name))))){
                        widget.isPrimary = false;
                    } else {
                        widget.isPrimary = true;
                    };
                    logger.info(((("widget:" + widget.widgetId) + ",isPrimary") + widget.isPrimary));
                    widget.group = groupName;
                };
            };
        }
        private function drawBackgroundRect():void{
            var y:uint;
            this.graphics.clear();
            this.graphics.beginFill(this.BACKGROUND_COLOR);
            this.graphics.drawRect(0, 0, this.calculateBackgroundWidth(), this.calculateBackgroundHeight());
            this.graphics.endFill();
            this.graphics.beginFill(this.WIDGET_BACKGROUND_COLOR);
            var x:uint;
            while (x < this.pageWidth) {
                y = 0;
                while (y < this.pageHeight) {
                    this.graphics.drawRect((x * (this.WIDGET_WIDTH + this.INNER_MARGIN_X)), (y * (this.WIDGET_HEIGHT + this.INNER_MARGIN_Y)), this.WIDGET_WIDTH, this.WIDGET_HEIGHT);
                    y++;
                };
                x++;
            };
            this.graphics.endFill();
        }
        private function isValidPosition(widget:WidgetComponent, indexX:uint, indexY:uint):Boolean{
            var j:uint;
            var widgetWidth:uint = widget.widgetAttribute.width;
            var widgetHeight:uint = widget.widgetAttribute.height;
            if (((((indexX + widgetWidth) > this.pageWidth)) || (((indexY + widgetHeight) > this.pageHeight)))){
                logger.error("Out Of Bound");
                return (false);
            };
            var i:uint;
            while (i < widgetWidth) {
                j = 0;
                while (j < widgetHeight) {
                    if (this.hasWidgetInGrid((i + indexX), (j + indexY))){
                        logger.error(((("Widget Found At " + (i + indexX)) + ",") + (j + indexY)));
                        return (false);
                    };
                    j++;
                };
                i++;
            };
            return (true);
        }
        private function hasWidgetInGrid(indexX:uint, indexY:uint):Boolean{
            return (this.widgetGrid[indexX][indexY]);
        }
        private function addWidgetToGrid(widget:WidgetComponent, indexX:uint, indexY:uint):void{
            var j:uint;
            var widgetWidth:uint = widget.widgetAttribute.width;
            var widgetHeight:uint = widget.widgetAttribute.height;
            var i:uint;
            while (i < widgetWidth) {
                j = 0;
                while (j < widgetHeight) {
                    this.widgetGrid[(indexX + i)][(indexY + j)] = widget;
                    j++;
                };
                i++;
            };
        }
        private function lock():void{
            this.serviceLockManager.lock(this);
        }
        private function unlock():void{
            this.serviceLockManager.unlock(this);
        }
        private function addInnerListener():void{
            this.addEventListener(WidgetEvent.GROUP_MESSAGE, this.onPreReceiveGroupMessage, false, WidgetEventPriority.WIDGET_PAGE);
            this.addEventListener(WidgetEvent.GROUP_MESSAGE, this.onPostReceiveGroupMessage, false, WidgetEventPriority.WIDGET_PAGE_POST_PROCESS);
            this.addEventListener(WidgetEvent.FOCUS, this.onFocus, false, WidgetEventPriority.WIDGET_PAGE);
            this.addEventListener(WidgetEvent.SAVE_STATE, this.onSaveState, false, WidgetEventPriority.WIDGET_PAGE);
            this.addEventListener(MessageControlEvent.NOTIFY_PLACE_INSTRUMENT_ID, this.onPreReceiveNotifyPlaceInstrumentIdMessage, false, WidgetEventPriority.WIDGET_PAGE);
            this.addEventListener(MessageControlEvent.NOTIFY_PLACE_INSTRUMENT_ID, this.onPostReceiveNotifyPlaceInstrumentIdMessage, false, WidgetEventPriority.WIDGET_PAGE_POST_PROCESS);
        }
        private function removeInnerListener():void{
            this.removeEventListener(WidgetEvent.GROUP_MESSAGE, this.onPreReceiveGroupMessage);
            this.removeEventListener(WidgetEvent.GROUP_MESSAGE, this.onPostReceiveGroupMessage);
            this.removeEventListener(WidgetEvent.FOCUS, this.onFocus);
            this.removeEventListener(WidgetEvent.SAVE_STATE, this.onSaveState);
            this.removeEventListener(MessageControlEvent.NOTIFY_PLACE_INSTRUMENT_ID, this.onPreReceiveNotifyPlaceInstrumentIdMessage);
            this.removeEventListener(MessageControlEvent.NOTIFY_PLACE_INSTRUMENT_ID, this.onPostReceiveNotifyPlaceInstrumentIdMessage);
        }
        protected function onPreReceiveGroupMessage(e:WidgetEvent):void{
            var groupEvent:GroupMessageEvent;
            logger.info(("ReceiveGroupMessage::::" + e));
            if (StreamingAttribute.applicationMode.isPro()){
                groupEvent = GroupMessageEvent(e);
                if (WidgetGroup.lookupFromFeed(groupEvent.groupId).isGroupOne()){
                    GlobalGroupEventManager.getInstance().addOrUpdateEvent(groupEvent);
                };
            };
            this.lock();
        }
        protected function onPostReceiveGroupMessage(e:WidgetEvent):void{
            this.unlock();
        }
        protected function onPreReceiveNotifyPlaceInstrumentIdMessage(e:MessageControlEvent):void{
            this.lock();
        }
        protected function onPostReceiveNotifyPlaceInstrumentIdMessage(e:MessageControlEvent):void{
            this.unlock();
        }
        protected function onFocus(e:FocusWidgetEvent):void{
            this.bringToFront(e.component);
        }
        protected function onSaveStateTimer(e:TimerEvent):void{
            this.saveState();
        }
        protected function onSaveState(e:SaveStateEvent):void{
            if (e.isForced){
                this.forceSaveState();
            } else {
                this.requestSaveState();
            };
        }
        private function calculateBackgroundWidth():Number{
            return ((((this.CANVAS_MARGIN * 2) + (this.WIDGET_WIDTH * this.pageWidth)) + (this.INNER_MARGIN_X * (this.pageWidth - 1))));
        }
        private function calculateBackgroundHeight():Number{
            return ((((this.CANVAS_MARGIN * 2) + (this.WIDGET_HEIGHT * this.pageHeight)) + (this.INNER_MARGIN_Y * (this.pageHeight - 1))));
        }
        private function initialGrid():void{
            this.widgetGrid = new Array(this.pageWidth);
            var i:int;
            while (i < this.pageWidth) {
                this.widgetGrid[i] = new Array(this.pageHeight);
                i++;
            };
        }
        protected function calculatePositionX(index:uint):Number{
            if (index >= this.pageWidth){
                return (NaN);
            };
            return ((this.CANVAS_MARGIN + ((this.WIDGET_WIDTH + this.INNER_MARGIN_X) * index)));
        }
        protected function calculatePositionY(index:uint):Number{
            if (index >= this.pageHeight){
                return (NaN);
            };
            return ((this.CANVAS_MARGIN + ((this.WIDGET_HEIGHT + this.INNER_MARGIN_Y) * index)));
        }
        public function getWidgetByGroupId(groupId:String):Array{
            var widget:WidgetComponent;
            var tmp:Array = new Array();
            for each (widget in this.widgetList) {
                if (widget.group == groupId){
                    tmp.push(widget);
                };
            };
            return (tmp);
        }

    }
}//package com.settrade.streaming5.widget 
﻿package com.settrade.streaming5.initializer {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.config.generic.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.dispatcher.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;

    public class RequestInitializer {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:RequestInitializer;

        protected var dispatcher:MessageDispatcher;
        protected var instrumentListService:InstrumentListService;
        protected var accountListService:AccountListEquityService;
        protected var messageList:Array;

        public function RequestInitializer(){
            super();
            this.dispatcher = MessageDispatcher.getInstance();
            this.instrumentListService = InstrumentListService.getInstance();
            this.accountListService = AccountListEquityService.getInstance();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():RequestInitializer{
            if (instance == null){
                instance = new (RequestInitializer)();
            };
            return (instance);
        }

        public function initialize():void{
            var versionConfig:VersionConfig;
            this.dispatcher.addEventListener(MessageReceiveEvent.INSTRUMENT_LIST, this.onReceiveMessage);
            this.dispatcher.addEventListener(MessageReceiveEvent.ACCOUNT_LIST_EQUITY, this.onReceiveAccountList);
            this.dispatcher.addEventListener(MessageFailEvent.FAIL, this.onReceiveMessage);
            this.messageList = new Array();
            this.messageList.push(this.instrumentListService.getAllInstrumentList());
            if (((((StreamingAttribute.systemMarket.isALLSystem()) || (StreamingAttribute.systemMarket.isEquity()))) && (!(StreamingAttribute.isInitialEquityAccount)))){
                this.messageList.push(this.accountListService.getAccountList());
            };
            if (StreamingAttribute.isChangeVersion){
                versionConfig = VersionConfig(GenericSettingManager.getInstance().getConfig(ConfigType.GENERIC_VERSION));
                versionConfig.version = StreamingAttribute.version;
                SettingService.getInstance().updateConfig([versionConfig]);
            };
        }
        private function onReceiveAccountList(e:MessageEvent):void{
            var accountManager:AccountManager = AccountManager.getInstance();
            accountManager.importAccountEquity(e.message);
            TurnoverListManager.getInstance().importTurnoverList(e.message);
            this.onReceiveMessage(e);
        }
        public function removeMessage(id:Number):void{
            var index:int = this.messageList.indexOf(id);
            if (index != -1){
                this.messageList.splice(index, 1);
            };
        }
        public function onReceiveMessage(event:MessageEvent){
            var message:Message = event.message;
            if (message.side.isResponse()){
                this.removeMessage(ResponseMessage(message).requestId);
            } else {
                if ((message is IFailMessage)){
                    this.removeMessage(IFailMessage(message).requestId);
                };
            };
            if (this.messageList.length == 0){
                this.dispatcher.removeEventListener(MessageReceiveEvent.ACCOUNT_LIST_EQUITY, this.onReceiveAccountList);
                this.dispatcher.removeEventListener(MessageReceiveEvent.INSTRUMENT_LIST, this.onReceiveMessage);
                this.dispatcher.removeEventListener(MessageFailEvent.FAIL, this.onReceiveMessage);
                this.dispatcher.notifyControlMessage(new InitialStatusMessage(InitialStatus.REQUEST));
            };
        }

    }
}//package com.settrade.streaming5.initializer 
﻿package com.settrade.streaming5.initializer {
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import flash.events.*;
    import com.settrade.streaming5.dispatcher.*;
    import flash.net.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;

    public class PreloaderInitializer {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:PreloaderInitializer;

        protected var dispatcher:MessageDispatcher;

        public function PreloaderInitializer(){
            super();
            this.dispatcher = MessageDispatcher.getInstance();
        }
        public static function getInstance():PreloaderInitializer{
            if (instance == null){
                instance = new (PreloaderInitializer)();
            };
            return (instance);
        }

        public function initialize():void{
            var loader:Loader = new Loader();
            var url:URLRequest = new URLRequest("Preload.swf");
            loader.contentLoaderInfo.addEventListener(HTTPStatusEvent.HTTP_STATUS, this.onCompletePreload);
            loader.load(url);
        }
        private function onCompletePreload(e:Event):void{
            this.dispatcher.notifyControlMessage(new InitialStatusMessage(InitialStatus.PRE_LOADER));
        }

    }
}//package com.settrade.streaming5.initializer 
﻿package com.settrade.streaming5.initializer {
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.connection.*;
    import com.settrade.streaming5.dispatcher.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;

    public class StreamingInitailizer {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:StreamingInitailizer;

        protected var dispatcher:MessageDispatcher;
        protected var flashVarInitializer:FlashVarInitializer;
        protected var feedInitializer:FeedInitializer;
        protected var requestInitializer:RequestInitializer;
        protected var pageInitializer:PageInitializer;
        protected var managerInitializer:ManagerInitializer;
        protected var preloaderInitializer:PreloaderInitializer;
        protected var isInitialFlashVar:Boolean;
        protected var isInitialFeed:Boolean;
        protected var isInitialRequest:Boolean;
        protected var isInitialPage:Boolean;
        protected var isInitialManager:Boolean;
        protected var isInitialPreloader:Boolean;
        protected var initilizeTimer:TimerHelper;

        public function StreamingInitailizer(){
            super();
            ConnectionFactory.getInstance().connectionManager = ConnectionManager.getInstance();
            this.dispatcher = MessageDispatcher.getInstance();
            this.dispatcher.addEventListener(MessageControlEvent.INITIAL_STATUS, this.onInitialFlashVars);
            this.flashVarInitializer = FlashVarInitializer.getInstance();
            this.feedInitializer = FeedInitializer.getInstance();
            this.requestInitializer = RequestInitializer.getInstance();
            this.pageInitializer = PageInitializer.getInstance();
            this.managerInitializer = ManagerInitializer.getInstance();
            this.preloaderInitializer = PreloaderInitializer.getInstance();
            this.isInitialFlashVar = false;
            this.isInitialFeed = false;
            this.isInitialRequest = false;
            this.isInitialPage = false;
            this.isInitialManager = false;
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():StreamingInitailizer{
            if (instance == null){
                instance = new (StreamingInitailizer)();
            };
            return (instance);
        }

        public function set source(source:MovieClip){
            this.flashVarInitializer.source = source;
        }
        public function set stage(stage:Stage){
            this.managerInitializer.stage = stage;
        }
        public function set pageHolder(source:MovieClip){
            this.pageInitializer.source = source;
        }
        public function set alertHolder(source:MovieClip){
            this.managerInitializer.alertHolder = source;
        }
        public function set placeOrderHolder(source:MovieClip){
            this.pageInitializer.placeOrderHolder = source;
        }
        public function set settingHolder(source:MovieClip){
            this.pageInitializer.settingHolder = source;
        }
        public function set editorHolder(source:MovieClip){
            this.pageInitializer.editorHolder = source;
        }
        public function get source():MovieClip{
            return (this.flashVarInitializer.source);
        }
        public function get pageHolder():MovieClip{
            return (this.pageInitializer.source);
        }
        public function get placeOrderHolder():MovieClip{
            return (this.pageInitializer.placeOrderHolder);
        }
        public function initialize(){
            this.initilizeTimer = new TimerHelper("InitializerTimer");
            if (((!((this.source == null))) && (!((this.pageHolder == null))))){
                this.initilizeTimer.stop("Start InitialFlashVars");
                this.flashVarInitializer.initialize();
            } else {
                logger.fatal("Do not have source or page holder.");
            };
        }
        public function onInitialFlashVars(e:MessageEvent){
            var message:InitialStatusMessage = InitialStatusMessage(e.message);
            if (message.status.isFlashVar()){
                this.initilizeTimer.stop("Complete InitialFlashVars");
                this.isInitialFlashVar = true;
                this.initilizeTimer.stop("Start InitialFeed");
                this.initilizeTimer.stop("Start InitialRequest");
                this.initilizeTimer.stop("Start InitialManager");
                this.dispatcher.removeEventListener(MessageControlEvent.INITIAL_STATUS, this.onInitialFlashVars);
                this.dispatcher.addEventListener(MessageControlEvent.INITIAL_STATUS, this.onInitialFeed);
                this.dispatcher.addEventListener(MessageControlEvent.INITIAL_STATUS, this.onInitialRequest);
                this.dispatcher.addEventListener(MessageControlEvent.INITIAL_STATUS, this.onInitialManager);
                this.feedInitializer.initialize();
                this.requestInitializer.initialize();
                this.managerInitializer.initialize();
            };
        }
        private function onInitialManager(e:MessageEvent):void{
            var message:InitialStatusMessage = InitialStatusMessage(e.message);
            if (message.status.isManager()){
                this.initilizeTimer.stop("Complete InitialManager");
                this.isInitialManager = true;
                this.dispatcher.removeEventListener(MessageControlEvent.INITIAL_STATUS, this.onInitialManager);
                this.initialDataComplete();
            };
        }
        public function onInitialFeed(e:MessageEvent){
            var message:InitialStatusMessage = InitialStatusMessage(e.message);
            if (message.status.isFeed()){
                this.initilizeTimer.stop("Complete InitialFeed");
                this.isInitialFeed = true;
                this.dispatcher.removeEventListener(MessageControlEvent.INITIAL_STATUS, this.onInitialFeed);
                this.initialDataComplete();
            };
        }
        public function onInitialRequest(e:MessageEvent){
            var message:InitialStatusMessage = InitialStatusMessage(e.message);
            if (message.status.isRequest()){
                this.initilizeTimer.stop("Complete InitialRequest");
                this.isInitialRequest = true;
                this.dispatcher.removeEventListener(MessageControlEvent.INITIAL_STATUS, this.onInitialRequest);
                this.dispatcher.addEventListener(MessageControlEvent.INITIAL_STATUS, this.onInitialPage);
                this.dispatcher.addEventListener(MessageControlEvent.INITIAL_STATUS, this.onInitialMarketPage);
                this.pageInitializer.initialize();
            };
        }
        public function onInitialPreloader(e:MessageEvent){
            var message:InitialStatusMessage = InitialStatusMessage(e.message);
            if (message.status.isPreloader()){
                this.initilizeTimer.stop("Complete InitialPreloader");
                this.isInitialPreloader = true;
                this.dispatcher.removeEventListener(MessageControlEvent.INITIAL_STATUS, this.onInitialPreloader);
                this.dispatcher.addEventListener(MessageControlEvent.INITIAL_STATUS, this.onInitialPage);
                this.dispatcher.addEventListener(MessageControlEvent.INITIAL_STATUS, this.onInitialMarketPage);
                this.initilizeTimer.stop("Start InitialPage");
                this.pageInitializer.initialize();
            };
        }
        private function onInitialMarketPage(e:MessageControlEvent):void{
            var message:InitialStatusMessage = InitialStatusMessage(e.message);
            if (message.status.isMarketPage()){
                this.initilizeTimer.stop("Complete InitialMarketPage");
                this.isInitialPage = true;
                this.dispatcher.removeEventListener(MessageControlEvent.INITIAL_STATUS, this.onInitialMarketPage);
            };
        }
        private function onInitialPage(e:MessageEvent):void{
            var message:InitialStatusMessage = InitialStatusMessage(e.message);
            if (message.status.isPage()){
                this.initilizeTimer.stop("Complete InitialPage");
                this.isInitialPage = true;
                this.dispatcher.removeEventListener(MessageControlEvent.INITIAL_STATUS, this.onInitialPage);
                this.initialDataComplete();
            };
        }
        public function initialDataComplete():void{
            if (((((((((this.isInitialRequest) && (this.isInitialPage))) && (this.isInitialFlashVar))) && (this.isInitialFeed))) && (this.isInitialManager))){
                this.initilizeTimer.stop("Complete InitialStreaming");
                this.initilizeTimer.summarize();
                this.dispatcher.notifyControlMessage(new InitialStatusMessage(InitialStatus.STREAMING));
            };
        }

    }
}//package com.settrade.streaming5.initializer 
﻿package com.settrade.streaming5.initializer {
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.widget.config.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.manager.*;
    import flash.utils.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.dispatcher.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;
    import com.settrade.streaming5.widget.*;

    public class PageInitializer {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:PageInitializer;

        protected var dispatcher:MessageDispatcher;
        protected var pageManager:PageManager;
        protected var _source:MovieClip;
        protected var _placeOrderHolder:MovieClip;
        protected var _settingHolder:MovieClip;
        protected var _editorHolder:MovieClip;
        protected var pageMap:Dictionary;
        protected var pageList:Array;
        protected var sourceMap:Dictionary;

        public function PageInitializer(){
            super();
            this.dispatcher = MessageDispatcher.getInstance();
            this.pageManager = PageManager.getInstance();
            this.initDictionary();
            this.initSourceMap();
            this.initArray();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():PageInitializer{
            if (instance == null){
                instance = new (PageInitializer)();
            };
            return (instance);
        }

        private function initDictionary():void{
            this.pageMap = new Dictionary();
            this.pageMap[PageName.SETTING] = "SettingPage.swf";
            this.pageMap[PageName.TICKER_SETTING] = "SettingTickerPage.swf";
            this.pageMap[PageName.SYMBOL_SELECTOR] = "SymbolSelector.swf";
            this.pageMap[PageName.MULTIPLE_PLACE_ORDER] = "MultiplePlaceOrder.swf";
            this.pageMap[PageName.POPUP_ORDER] = "PopUpOrder.swf";
            this.pageMap[PageName.WIDGET_EDITOR] = "WidgetPageEditorPage.swf";
        }
        private function initSourceMap():void{
            this.sourceMap = new Dictionary();
            this.sourceMap[PageName.SETTING] = this._settingHolder;
            this.sourceMap[PageName.TICKER_SETTING] = this._settingHolder;
            this.sourceMap[PageName.SYMBOL_SELECTOR] = this._settingHolder;
            this.sourceMap[PageName.MULTIPLE_PLACE_ORDER] = this._settingHolder;
            this.sourceMap[PageName.POPUP_ORDER] = this._settingHolder;
            this.sourceMap[PageName.WIDGET_EDITOR] = this._editorHolder;
        }
        private function initArray():void{
            var name:String;
            this.pageList = new Array();
            for (name in this.pageMap) {
                this.pageList.push(name);
            };
        }
        public function initialize():void{
            var name:String;
            var url:String;
            var source:MovieClip;
            var firstPageWidgetPageConfig:WidgetPageConfig;
            this.initSourceMap();
            this.dispatcher.addEventListener(MessageControlEvent.PAGE_STATUS, this.onPageStatusHandler);
            if (StreamingAttribute.applicationMode.isPro()){
                this.dispatcher.addEventListener(MessageControlEvent.WIDGET_PAGE_STATUS, this.onReceiveFirstPageLoadedComplete);
            } else {
                this.dispatcher.addEventListener(MessageControlEvent.WIDGET_PAGE_STATUS, this.onReceiveMarketWatchComplete);
            };
            for (name in this.pageMap) {
                if (((!(StreamingAttribute.applicationMode.isPro())) && ((this.pageMap[name] == PageName.WIDGET_EDITOR)))){
                } else {
                    url = this.pageMap[name];
                    source = this.sourceMap[name];
                    this.pageManager.load(name, url, source);
                };
            };
            if (StreamingAttribute.applicationMode.isPro()){
                firstPageWidgetPageConfig = WidgetProPageManager.getInstance().getPageConfigAtIndex(0);
                if (firstPageWidgetPageConfig != null){
                    this.pageManager.loadInternalPage(firstPageWidgetPageConfig.id, new WidgetPage(firstPageWidgetPageConfig), this._source);
                } else {
                    this.dispatcher.notifyControlMessage(new InitialStatusMessage(InitialStatus.MARKET_PAGE));
                };
            } else {
                if (WidgetPageManager.getInstance().getPageConfig(PageName.MARKET_WATCH) != null){
                    this.pageManager.loadInternalPage(PageName.MARKET_WATCH, new WidgetPage(WidgetPageManager.getInstance().getPageConfig(PageName.MARKET_WATCH)), this._source);
                } else {
                    this.dispatcher.notifyControlMessage(new InitialStatusMessage(InitialStatus.MARKET_PAGE));
                };
            };
            this.dispatcher.notifyControlMessage(new InitialStatusMessage(InitialStatus.PAGE));
        }
        private function onReceiveMarketWatchComplete(e:MessageControlEvent):void{
            var pageList:Array;
            var pageName:String;
            var message:WidgetPageStatusMessage = WidgetPageStatusMessage(e.message);
            logger.info(("receive widget page status for " + message.pageName));
            if ((((message.pageName == PageName.MARKET_WATCH)) && (message.newStatus.isIdle()))){
                pageList = [];
                if (PageName.customizedPageList.length > 0){
                    pageList = PageName.customizedPageList;
                    pageList.push(PageName.MULTIPLE_ORDER);
                    pageList.push(PageName.PLACE_ORDER_FULL);
                } else {
                    if (StreamingAttribute.isMarketRep){
                        logger.info("Initial All MarketRep Page");
                        pageList = PageName.getStreamingPageListMarketRep();
                    } else {
                        logger.info("Initial All Investor Page");
                        pageList = PageName.getStreamingPageListInvestor();
                    };
                };
                for each (pageName in pageList) {
                    if (pageName != PageName.MARKET_WATCH){
                        this.pageManager.loadInternalPage(pageName, new WidgetPage(WidgetPageManager.getInstance().getPageConfig(pageName)), this._source);
                    };
                };
                this.dispatcher.removeEventListener(MessageControlEvent.WIDGET_PAGE_STATUS, this.onReceiveMarketWatchComplete);
                this.dispatcher.notifyControlMessage(new InitialStatusMessage(InitialStatus.MARKET_PAGE));
            };
        }
        private function onReceiveFirstPageLoadedComplete(e:MessageControlEvent):void{
            var firstPageName:String;
            var message:WidgetPageStatusMessage = WidgetPageStatusMessage(e.message);
            var firstPageWidgetPageConfig:WidgetPageConfig = WidgetProPageManager.getInstance().getPageConfigAtIndex(0);
            logger.info(("receive first page loaded " + firstPageWidgetPageConfig));
            if (firstPageWidgetPageConfig != null){
                firstPageName = firstPageWidgetPageConfig.id;
                logger.info(((("received page name : " + message.pageName) + ", first page name : ") + firstPageName));
                logger.info(("page status " + message.newStatus.toString()));
                if ((((message.pageName == firstPageName)) && (message.newStatus.isIdle()))){
                    this.dispatcher.removeEventListener(MessageControlEvent.WIDGET_PAGE_STATUS, this.onReceiveFirstPageLoadedComplete);
                    logger.info("Initial all page");
                    WidgetProPageManager.getInstance().initialAllPage();
                    this.dispatcher.notifyControlMessage(new InitialStatusMessage(InitialStatus.MARKET_PAGE));
                };
            };
        }
        private function onPageStatusHandler(e:MessageControlEvent):void{
            var message:PageStatusMessage = PageStatusMessage(e.message);
            var index:int = this.pageList.indexOf(message.pageName);
            if (index != -1){
                this.pageList.splice(index, 1);
            };
            if (this.pageList.length == 0){
            };
        }
        public function get source():MovieClip{
            return (this._source);
        }
        public function set source(value:MovieClip):void{
            this._source = value;
        }
        public function set placeOrderHolder(value:MovieClip):void{
        }
        public function get placeOrderHolder():MovieClip{
            return (null);
        }
        public function get settingHolder():MovieClip{
            return (this._settingHolder);
        }
        public function set settingHolder(value:MovieClip):void{
            this._settingHolder = value;
        }
        public function get editorHolder():MovieClip{
            return (this._editorHolder);
        }
        public function set editorHolder(value:MovieClip):void{
            this._editorHolder = value;
        }

    }
}//package com.settrade.streaming5.initializer 
﻿package com.settrade.streaming5.initializer {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.dispatcher.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;

    public class FeedInitializer {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:FeedInitializer;

        protected var dispatcher:MessageDispatcher;
        protected var feedManager:FeedManager;

        public function FeedInitializer(){
            super();
            this.dispatcher = MessageDispatcher.getInstance();
            this.feedManager = FeedManager.getInstance();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():FeedInitializer{
            if (instance == null){
                instance = new (FeedInitializer)();
            };
            return (instance);
        }

        public function startService():void{
            this.dispatcher.addEventListener(MessageControlEvent.FEED_STATUS, this.onReceiveFeedStatus);
        }
        public function stopService():void{
            this.dispatcher.removeEventListener(MessageControlEvent.FEED_STATUS, this.onReceiveFeedStatus);
        }
        public function initialize():void{
            this.startService();
            this.feedManager.startService();
        }
        private function onReceiveFeedStatus(e:MessageControlEvent):void{
            var message:FeedStatusMessage = FeedStatusMessage(e.message);
            if (message.status.isConnect()){
                this.dispatcher.notifyControlMessage(new InitialStatusMessage(InitialStatus.FEED));
                this.stopService();
            };
        }

    }
}//package com.settrade.streaming5.initializer 
﻿package com.settrade.streaming5.initializer {
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.dispatcher.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;

    public class ManagerInitializer {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:ManagerInitializer;

        protected var dispatcher:MessageDispatcher;
        protected var marketTickerManager:MarketTickerManager;
        protected var instrumentTickerManager:InstrumentTickerManager;
        protected var instrumentListManager:InstrumentListManager;
        protected var instrumentInfoManager:InstrumentInfoManager;
        protected var orderManager:OrderManager;
        protected var accountInfoManager:AccountInfoManager;
        protected var allPortfolioManager:AllPortfolioManager;
        protected var allDealSummaryManager:AllDealSummaryManager;
        protected var orderClickManager:OrderClickManager;
        protected var priceVolumeAlertManager:PriceVolumeAlertManager;
        protected var orderAlertManager:OrderAlertManager;
        protected var alertService:AlertService;
        protected var notificationManager:NotificationManager;
        protected var volumeByPriceManager:VolumeByPriceManager;
        protected var pinManager:PinManager;
        protected var languageManager:LanguageManager;
        protected var titleHostManager:TitleHostManager;
        protected var orderLogManager:OrderLogManager;
        protected var keyboardShortcutManager:KeyboardShortcutManager;

        public function ManagerInitializer(){
            super();
            this.dispatcher = MessageDispatcher.getInstance();
            this.marketTickerManager = MarketTickerManager.getInstance();
            this.instrumentTickerManager = InstrumentTickerManager.getInstance();
            this.instrumentListManager = InstrumentListManager.getInstance();
            this.orderManager = OrderManager.getInstance();
            this.accountInfoManager = AccountInfoManager.getInstance();
            this.instrumentInfoManager = InstrumentInfoManager.getInstance();
            this.allPortfolioManager = AllPortfolioManager.getInstance();
            this.allDealSummaryManager = AllDealSummaryManager.getInstance();
            this.orderClickManager = OrderClickManager.getInstance();
            this.priceVolumeAlertManager = PriceVolumeAlertManager.getInstance();
            this.orderAlertManager = OrderAlertManager.getInstance();
            this.alertService = AlertService.getInstance();
            this.notificationManager = NotificationManager.getInstance();
            this.volumeByPriceManager = VolumeByPriceManager.getInstance();
            this.pinManager = PinManager.getInstance();
            this.languageManager = LanguageManager.getInstance();
            this.titleHostManager = TitleHostManager.getInstance();
            this.orderLogManager = OrderLogManager.getInstance();
            this.keyboardShortcutManager = KeyboardShortcutManager.getInstance();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():ManagerInitializer{
            if (instance == null){
                instance = new (ManagerInitializer)();
            };
            return (instance);
        }

        public function initialize():void{
            this.marketTickerManager.startService();
            this.instrumentTickerManager.startService();
            this.instrumentListManager.startService();
            this.orderManager.startService();
            this.accountInfoManager.startService();
            this.allPortfolioManager.startService();
            this.allDealSummaryManager.startService();
            this.orderClickManager.startService();
            this.priceVolumeAlertManager.startService();
            this.orderAlertManager.startService();
            this.volumeByPriceManager.startService();
            this.pinManager.startService();
            this.titleHostManager.startService();
            this.orderLogManager.startService();
            this.keyboardShortcutManager.startService();
            this.notificationManager.startService();
            this.languageManager.startService();
            JavascriptInterface.initChangeInstrumentIdCallback();
            this.dispatcher.notifyControlMessage(new InitialStatusMessage(InitialStatus.MANAGER));
        }
        public function set stage(value:Stage):void{
            this.keyboardShortcutManager.stage = value;
        }
        public function set alertHolder(value:MovieClip):void{
            this.alertService.setRootRef(value);
        }

    }
}//package com.settrade.streaming5.initializer 
﻿package com.settrade.streaming5.initializer {
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.message.*;
    import flash.events.*;
    import com.settrade.streaming5.widget.config.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.config.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.message.response.instrumentlist.*;
    import com.settrade.streaming5.datacomponent.parser.*;
    import com.settrade.streaming5.config.generic.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.streaming5.dispatcher.*;
    import flash.net.*;
    import com.settrade.streaming5.connection.helper.http.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;
    import com.settrade.streaming5.widget.*;

    public final class FlashVarInitializer {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:FlashVarInitializer;

        protected var dispatcher:MessageDispatcher;
        protected var _source:MovieClip;
        protected var _preloader:Loader;
        protected var _logoUrl:String;
        protected var _needReloadTheme:Boolean = false;

        public function FlashVarInitializer(){
            super();
            this.dispatcher = MessageDispatcher.getInstance();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():FlashVarInitializer{
            if (instance == null){
                instance = new (FlashVarInitializer)();
            };
            return (instance);
        }

        public function getFlashVars(name:String):String{
            var obj:Object = LoaderInfo(this.source.root.loaderInfo).parameters[name];
            if (obj == null){
                logger.warn(("Cannot get Attribute: " + name));
                return (null);
            };
            return (obj.toString());
        }
        public function initialize():void{
            var equityRole:UserRole;
            var derivativesRole:UserRole;
            var accountInfoObject:Object;
            var accountListMessage:Message;
            var activeList:Array;
            var allSymbolList:Array;
            var securityTypeList:Array;
            var marketList:Array;
            var sectorList:Array;
            var sectorListName:String;
            var industryList:Array;
            var industryListName:String;
            var maiIndustryList:Array;
            var maiIndustryListName:String;
            var dwByUnderlyingList:Array;
            var dwByUnderlyingListName:String;
            var tfexActiveList:Array;
            var allUnderlyingsList:Array;
            var optionsActiveList:Array;
            var brokerFavouriteList:Array;
            var brokerFavouriteListName:String;
            var brokerFavouriteListNameObj:InstrumentListName;
            var stockFuturesUnderlyingInstrumentList:InstrumentList;
            var canUseAutoPositionObj:Object;
            var autoPositionConfig:AutoPositionConfig;
            var newsSourceListJSON:Object;
            var newsSource:Object;
            var attributeMap:Object;
            var defaultMarketObject:Object;
            var defaultMarket:System;
            var defaultAccount:String;
            var enableDefaultAccount:Boolean;
            var favouriteList:Array;
            var favourite:Object;
            var defaultWidgetPageList:Array;
            var themeObject:Object;
            var widgetList:Array;
            var widgetPageList:Array;
            var template:Object;
            var orderAlert:Object;
            var priceVolAlert:Object;
            var priceVolCondition:Object;
            var shortcutAccount:Object;
            var shortcutSymbol:Object;
            var notifyList:Object;
            var orderEntry:Object;
            var notificationLastView:Object;
            var languageObject:Object;
            var language:Language;
            var autoAdjustSize:Object;
            var customStr:String;
            var genericSetting:Object;
            var displayText:Object;
            var displayTextConfig:DisplayTextConfig;
            var versionConfig:VersionConfig;
            var qualityConfig:QualityConfig;
            var preloadUrlStr:String;
            var logoUrlStr:String;
            var watermarkUrlStr:String;
            var theme:Object;
            var preloadUrl:URLRequest;
            var pageList:Array;
            var pageConfig:WidgetPageConfig;
            var i:uint;
            var widgetPageConfig:WidgetPageConfig;
            var groupConfig:WidgetGroupConfig;
            var widgetComponentConfig:WidgetComponentConfig;
            var lastOpenVersion:Object;
            var quality:Object;
            var requestHelper:RequestHelper = RequestHelper.getInstance();
            var sequentialRequestHelper:SequentialRequestHelper = SequentialRequestHelper.getInstance();
            var feedManager:FeedManager = FeedManager.getInstance();
            var pullManager:PullManager = PullManager.getInstance();
            var accountManager:AccountManager = AccountManager.getInstance();
            var instrumentListNameManager:InstrumentListNameManager = InstrumentListNameManager.getInstance();
            var favouriteListManager:FavouriteListManager = FavouriteListManager.getInstance();
            var widgetListManager:WidgetAttributeManager = WidgetAttributeManager.getInstance();
            var widgetPageManager:WidgetPageManager = WidgetPageManager.getInstance();
            var widgetProPageManager:WidgetProPageManager = WidgetProPageManager.getInstance();
            var settingManager:SettingManager = SettingManager.getInstance();
            var genericSettingManager:GenericSettingManager = GenericSettingManager.getInstance();
            var userRef:String = this.getFlashVars("fvUserref");
            var brokerId:String = this.getFlashVars("fvBrokerId");
            var openTime:Number = Number(this.getFlashVars("fvOpenTime"));
            var realtimeClientType:String = this.getFlashVars("fvRealtimeClientType");
            var canChangePIN:String = this.getFlashVars("fvCanChangePIN");
            var canChangePassword:String = this.getFlashVars("fvCanChangePassword");
            var applicationType:String = this.getFlashVars("fvApplicationType");
            var screenType:String = this.getFlashVars("fvScreenType");
            var itpHost:String = this.getFlashVars("fvITPHost");
            var itpdHost:String = this.getFlashVars("fvITPDHost");
            var researchHost:String = this.getFlashVars("fvResearchHost");
            var secondaryHost:String = this.getFlashVars("fvSecondaryHost");
            var primaryHost:String = this.getFlashVars("fvPrimaryHost");
            var setHost:String = this.getFlashVars("fvSETHost");
            var systemMarketStr:String = this.getFlashVars("fvSystemMarket");
            var subBrokerStr:String = this.getFlashVars("fvSubBroker");
            var goldOnlyStr:String = this.getFlashVars("fvGoldOnly");
            var fileLastModified:String = this.getFlashVars("fvFileLastModified");
            var generateKeyURL:String = this.getFlashVars("fvGenerateKeyURL");
            var dataProviderURL:String = this.getFlashVars("fvDataProviderBinURL");
            var orderEquityURL:String = this.getFlashVars("fvOrderEquityURL");
            var orderDerivativesURL:String = this.getFlashVars("fvOrderDerivativesURL");
            var orderDataDerivativesURL:String = this.getFlashVars("fvOrderDataDerivativesURL");
            var dataProviderStrURL:String = this.getFlashVars("fvDataProviderStrURL");
            var orderPushURL:String = this.getFlashVars("fvOrderPushRegisterURL");
            var templateURL:String = this.getFlashVars("fvGetWidgetTemplateURL");
            var settingURL:String = this.getFlashVars("fvSettingURL");
            var syncTimeURL:String = this.getFlashVars("fvSyncTimeURL");
            var userCheckURL:String = this.getFlashVars("fvUserCheckURL");
            var accountListURL:String = this.getFlashVars("fvGetEquityAccountInfoURL");
            var staticDataURL:String = this.getFlashVars("fvGetStaticDataURL");
            var researchDataURL:String = this.getFlashVars("fvResearchDataURL");
            var getAccountNameURL:String = this.getFlashVars("fvGetAccountNameURL");
            var stockValidationURL:String = this.getFlashVars("fvStockValidationURL");
            var orderEquityMktURL:String = this.getFlashVars("fvOrderEquityMktURL");
            var orderDerivativesMktURL:String = this.getFlashVars("fvOrderDerivativesMktURL");
            var orderSearchEquityURL:String = this.getFlashVars("fvOrderEquityMktSearchURL");
            var orderSearchDerivativesURL:String = this.getFlashVars("fvOrderDerivativesAjaxOrderStatusMktURL");
            var changeEquityURL:String = this.getFlashVars("fvOrderEquityAjaxChangeURL");
            var changeEquityMktURL:String = this.getFlashVars("fvOrderEquityAjaxChangeMktURL");
            var changeDerivativesURL:String = this.getFlashVars("fvOrderDerivativesAjaxChangeURL");
            var changeDerivativesMktURL:String = this.getFlashVars("fvOrderDerivativesAjaxChangeMktURL");
            var pageStatURL:String = this.getFlashVars("fvPageStatURL");
            var dataProviderJsonURL:String = this.getFlashVars("fvDataProviderJsonURL");
            var blockTradeURL:String = this.getFlashVars("fvOrderDerivativesAjaxBlockTradeMktURL");
            var accountInformationJsonEquityURL:String = this.getFlashVars("fvOrderEquityAjaxAccInfoURL");
            var accountInformationJsonDerivativesMktURL:String = this.getFlashVars("fvOrderDerivativesAjaxAccInfoURL");
            var orderDerivativesAjaxListAccountMktURL:String = this.getFlashVars("fvOrderDerivativesAjaxListAccountMktURL");
            var fastQuoteDerivativesURL:String = this.getFlashVars("fvFastQuoteURL");
            var orderDerivativesAjaxBlockTradeInfoURL:String = this.getFlashVars("fvOrderDerivativesAjaxBlockTradeInfoURL");
            var notificationStartupURL:String = this.getFlashVars("fvNotificationStartupURL");
            var newsURL:String = this.getFlashVars("fvGetNewsURL");
            var accountInfoListStr:String = this.getFlashVars("fvAccountInfoList");
            var accountInfoListDStr:String = this.getFlashVars("fvAccountDInfoList");
            var equityRoleStr:String = this.getFlashVars("fvITPRole");
            var derivativesRoleStr:String = this.getFlashVars("fvITPDRole");
            var refreshRate:Number = Number(this.getFlashVars("fvRefreshRate"));
            var enableDefaultAccountStr:String = this.getFlashVars("fvIsEnableDefaultAccount");
            var oppDayLiveURL:String = this.getFlashVars("fvOppDayLiveURL");
            var oppDayArchiveURL:String = this.getFlashVars("fvOppDayArchiveURL");
            var oppDaySearchURL:String = this.getFlashVars("fvOppDaySearchURL");
            var multipleOrderEquityURL:String = this.getFlashVars("fvMultiOrderURL");
            var multipleOrderEquityMktURL:String = this.getFlashVars("fvMultiOrderMktURL");
            var multipleOrderFavouriteEquityURL:String = this.getFlashVars("fvMultiOrderFavouriteURL");
            var multipleOrderExtractEquityURL:String = this.getFlashVars("fvMultiOrderExtractDataURL");
            var multipleOrderDerivativesURL:String = this.getFlashVars("fvDerivativesMultiOrderURL");
            var multipleOrderMktDerivativesURL:String = this.getFlashVars("fvDerivativesMultiOrderMktURL");
            var multipleOrderFavouriteDerivativesURL:String = this.getFlashVars("fvDerivativesMultiOrderFavouriteURL");
            var multiOrderExtractDataDerivativesURL:String = this.getFlashVars("fvDerivativesMultiOrderExtractDataURL");
            var marginStockURL:String = this.getFlashVars("fvMarginStock");
            var marginStockMktRepURL:String = this.getFlashVars("fvMarginStockMktRep");
            var activeListStr:String = this.getFlashVars("fvActiveList");
            var allSymbolListStr:String = this.getFlashVars("fvAllSymbolList");
            var securityTypeListStr:String = this.getFlashVars("fvSecurityTypeList");
            var marketListStr:String = this.getFlashVars("fvMarketList");
            var sectorListStr:String = this.getFlashVars("fvSectorList");
            var industryListStr:String = this.getFlashVars("fvIndustryList");
            var maiIndustryListStr:String = this.getFlashVars("fvMaiIndustryList");
            var dwByUnderlyingListStr:String = this.getFlashVars("fvDwByUnderlyingList");
            var tfexActiveListStr:String = this.getFlashVars("fvTfexActiveList");
            var allUnderlyingsListStr:String = this.getFlashVars("fvAllUnderlyings");
            var optionsActiveListStr:String = this.getFlashVars("fvOptionsActiveList");
            var brokerFavouriteListStr:String = this.getFlashVars("fvBrokerFavouriteList");
            var stockFuturesUnderlyingListStr:String = this.getFlashVars("fvStockFuturesUnderlying");
            var attributeMapStr:String = this.getFlashVars("fvAttributeMap");
            var saveWidgetIntervalStr:String = this.getFlashVars("fvSaveWidgetInterval");
            var setNetStr:String = this.getFlashVars("fvSETNET3");
            var canUseBlockTradeStr:String = this.getFlashVars("fvCanUseBlockTrade");
            var canUseAutoPositionStr:String = this.getFlashVars("fvCanUseAutoPosition");
            var canUseTechnicalChartStr:String = this.getFlashVars("fvCanUseTechnicalChart");
            var orderPushStatusFISStr:* = this.getFlashVars("fvOrderPushStatusFIS");
            var orderPushStatusDGWStr:* = this.getFlashVars("fvOrderPushStatusDGW");
            var showDepositBoxStr:String = this.getFlashVars("fvShowDepositBox");
            var canShowThaiNewsStr:String = this.getFlashVars("fvCanShowThaiNews");
            var canShowMoreNewsStr:String = this.getFlashVars("fvCanShowMoreNews");
            var newsSourceListStr:String = this.getFlashVars("fvNewsSource");
            var version:String = this.getFlashVars("fvVersion");
            var isWmodeTransparentStr:String = this.getFlashVars("fvWmodeTransparentFlag");
            if (userRef != null){
                StreamingAttribute.userRef = userRef;
            };
            if (brokerId != null){
                StreamingAttribute.brokerId = brokerId;
            };
            if (!isNaN(openTime)){
                StreamingAttribute.openTime = openTime;
            };
            if (realtimeClientType != null){
                StreamingAttribute.realtimeClientType = realtimeClientType;
            };
            if (equityRoleStr != null){
                equityRole = UserRole.lookupFromId(equityRoleStr);
                StreamingAttribute.userRoleEquity = equityRole;
            };
            if (derivativesRoleStr != null){
                derivativesRole = UserRole.lookupFromId(derivativesRoleStr);
                StreamingAttribute.userRoleDerivatives = derivativesRole;
            };
            if (canChangePIN != null){
                StreamingAttribute.canChangePIN = (canChangePIN == "T");
            };
            if (canChangePassword != null){
                StreamingAttribute.canChangePassword = (canChangePassword == "T");
            };
            if (systemMarketStr != null){
                if (systemMarketStr == "E"){
                    StreamingAttribute.systemMarket = System.EQUITY;
                } else {
                    if (systemMarketStr == "D"){
                        StreamingAttribute.systemMarket = System.DERIV;
                    } else {
                        if (systemMarketStr == "A"){
                            StreamingAttribute.systemMarket = System.ALL_SYSTEM;
                        };
                    };
                };
            };
            if (subBrokerStr != null){
                StreamingAttribute.isSubBroker = (subBrokerStr == "T");
            };
            if (goldOnlyStr != null){
                StreamingAttribute.isGoldOnly = (goldOnlyStr == "T");
            };
            if (applicationType != null){
                StreamingAttribute.applicationMode = StreamingMode.lookUp(applicationType);
                settingManager.addOrUpdateConfig(new ApplicationModeConfig(StreamingAttribute.applicationMode));
            };
            if (fileLastModified != null){
                StreamingAttribute.lastModified = fileLastModified;
            } else {
                StreamingAttribute.lastModified = new Date().getTime().toString();
            };
            if (itpHost != null){
                requestHelper.addConnector(System.EQUITY, itpHost);
                sequentialRequestHelper.addConnector(System.EQUITY, itpHost);
            };
            if (itpdHost != null){
                requestHelper.addConnector(System.DERIV, itpdHost);
                sequentialRequestHelper.addConnector(System.DERIV, itpdHost);
            };
            if (researchHost != null){
                requestHelper.addConnector(System.RESEARCH, researchHost);
                sequentialRequestHelper.addConnector(System.RESEARCH, researchHost);
            };
            if (secondaryHost != null){
                feedManager.addHost(secondaryHost, System.REALTIME_SECONDARY);
                requestHelper.addConnector(System.REALTIME, secondaryHost);
                requestHelper.addConnector(System.REALTIME_SECONDARY, secondaryHost);
                sequentialRequestHelper.addConnector(System.REALTIME, secondaryHost);
            };
            if (primaryHost != null){
                feedManager.addHost(primaryHost, System.REALTIME_PRIMARY);
                requestHelper.addConnector(System.REALTIME, primaryHost);
                requestHelper.setCurrentConnector(System.REALTIME, primaryHost);
                requestHelper.addConnector(System.REALTIME_PRIMARY, primaryHost);
                sequentialRequestHelper.addConnector(System.REALTIME, primaryHost);
                sequentialRequestHelper.setCurrentConnector(System.REALTIME, primaryHost);
            };
            if (setHost != null){
                requestHelper.addConnector(System.SET, setHost);
                sequentialRequestHelper.addConnector(System.SET, setHost);
            };
            requestHelper.addConnector(System.EXTERNAL, "");
            sequentialRequestHelper.addConnector(System.EXTERNAL, "");
            if (generateKeyURL != null){
                UrlPath.GENERATE_KEY.path = generateKeyURL;
            };
            if (dataProviderURL != null){
                UrlPath.DATA_PROVIDER_BINARY.path = dataProviderURL;
                UrlPath.DATA_PROVIDER_BINARY_RESPONSE.path = dataProviderURL;
            };
            if (StreamingAttribute.userRoleEquity.isMarketRep()){
                if (orderEquityMktURL != null){
                    UrlPath.ORDER_SEND_EQUITY.path = orderEquityMktURL;
                    UrlPath.ORDER_DATA_EQUITY.path = orderEquityMktURL;
                };
            } else {
                if (orderEquityURL != null){
                    UrlPath.ORDER_SEND_EQUITY.path = orderEquityURL;
                    UrlPath.ORDER_DATA_EQUITY.path = orderEquityURL;
                };
            };
            if (orderDataDerivativesURL != null){
                UrlPath.ORDER_DATA_DERIVATIVES.path = orderDataDerivativesURL;
            };
            if (StreamingAttribute.userRoleDerivatives.isMarketRep()){
                if (orderDerivativesMktURL != null){
                    UrlPath.ORDER_SEND_DERIVATIVES.path = orderDerivativesMktURL;
                };
            } else {
                if (orderDerivativesURL != null){
                    UrlPath.ORDER_SEND_DERIVATIVES.path = orderDerivativesURL;
                };
            };
            if (orderDataDerivativesURL != null){
                UrlPath.ORDER_DATA_DERIVATIVES.path = orderDataDerivativesURL;
            };
            if (StreamingAttribute.userRoleEquity.isMarketRep()){
                if (changeEquityMktURL != null){
                    UrlPath.CHANGE_EQUITY.path = changeEquityMktURL;
                };
            } else {
                if (changeEquityURL != null){
                    UrlPath.CHANGE_EQUITY.path = changeEquityURL;
                };
            };
            if (StreamingAttribute.userRoleDerivatives.isMarketRep()){
                if (changeDerivativesMktURL != null){
                    UrlPath.CHANGE_DERIVATIVES.path = changeDerivativesMktURL;
                };
            } else {
                if (changeDerivativesURL != null){
                    UrlPath.CHANGE_DERIVATIVES.path = changeDerivativesURL;
                };
            };
            if (accountInformationJsonEquityURL != null){
                UrlPath.ACCOUNT_INFO_JSON_EQUITY.path = accountInformationJsonEquityURL;
            };
            if (accountInformationJsonDerivativesMktURL != null){
                UrlPath.ACCOUNT_INFO_JSON_DERIVATIVES.path = accountInformationJsonDerivativesMktURL;
            };
            if (orderPushURL != null){
                UrlPath.REGISTER_ORDER_PUSH.path = orderPushURL;
            };
            if (dataProviderStrURL != null){
                UrlPath.DATA_PROVIDER.path = dataProviderStrURL;
            };
            if (getAccountNameURL != null){
                UrlPath.ACCOUNT_NAME.path = getAccountNameURL;
            };
            if (accountListURL != null){
                UrlPath.ACCOUNT_LIST.path = accountListURL;
            };
            if (templateURL != null){
                UrlPath.TEMPLATE.path = templateURL;
            };
            if (settingURL != null){
                UrlPath.SETTING.path = settingURL;
            };
            if (syncTimeURL != null){
                UrlPath.SYNC_TIME.path = syncTimeURL;
            };
            if (userCheckURL != null){
                UrlPath.USER_CHECK.path = userCheckURL;
            };
            if (staticDataURL != null){
                UrlPath.STATIC_DATA.path = staticDataURL;
            };
            if (researchDataURL != null){
                UrlPath.RESEARCH.path = researchDataURL;
            };
            if (oppDayLiveURL != null){
                UrlPath.OPPDAY_LIVE.path = oppDayLiveURL;
            };
            if (oppDayArchiveURL != null){
                UrlPath.OPPDAY_ARCHIVE.path = oppDayArchiveURL;
            };
            if (oppDaySearchURL != null){
                UrlPath.OPPDAY_SEARCH.path = oppDaySearchURL;
            };
            if (stockValidationURL != null){
                UrlPath.INSTRUMENT_ID_VALIDATOR.path = stockValidationURL;
            };
            if (orderSearchEquityURL != null){
                UrlPath.ORDER_DATA_AJAX_EQUITY.path = orderSearchEquityURL;
            };
            if (orderSearchDerivativesURL != null){
                UrlPath.ORDER_DATA_AJAX_DERIVATIVES.path = orderSearchDerivativesURL;
            };
            if (blockTradeURL != null){
                UrlPath.BLOCK_TRADE.path = blockTradeURL;
            };
            if (pageStatURL != null){
                UrlPath.PAGE_STAT.path = pageStatURL;
            };
            if (dataProviderJsonURL != null){
                UrlPath.DATA_PROVIDER_JSON.path = dataProviderJsonURL;
            };
            if (orderDerivativesAjaxListAccountMktURL != null){
                UrlPath.ACCOUNT_LIST_HIERACHY_DERIVATIVES.path = orderDerivativesAjaxListAccountMktURL;
            };
            if (fastQuoteDerivativesURL != null){
                UrlPath.FAST_QUOTE_DERIVATIVES.path = fastQuoteDerivativesURL;
            };
            if (orderDerivativesAjaxBlockTradeInfoURL != null){
                UrlPath.BLOCK_TRADE_INFO.path = orderDerivativesAjaxBlockTradeInfoURL;
            };
            if (StreamingAttribute.userRoleEquity.isMarketRep()){
                if (multipleOrderEquityMktURL != null){
                    UrlPath.MULTIPLE_ORDER_EQUITY.path = multipleOrderEquityMktURL;
                };
            } else {
                if (multipleOrderEquityURL != null){
                    UrlPath.MULTIPLE_ORDER_EQUITY.path = multipleOrderEquityURL;
                };
            };
            if (multipleOrderFavouriteEquityURL != null){
                UrlPath.MULTIPLE_ORDER_FAVOURITE_EQUITY.path = multipleOrderFavouriteEquityURL;
            };
            if (multipleOrderExtractEquityURL != null){
                UrlPath.MULTIPLE_ORDER_EXTRACT_EQUITY.path = multipleOrderExtractEquityURL;
            };
            if (StreamingAttribute.userRoleDerivatives.isMarketRep()){
                if (multipleOrderMktDerivativesURL != null){
                    UrlPath.MULTIPLE_ORDER_DERIVATIVES.path = multipleOrderMktDerivativesURL;
                };
            } else {
                if (multipleOrderDerivativesURL != null){
                    UrlPath.MULTIPLE_ORDER_DERIVATIVES.path = multipleOrderDerivativesURL;
                };
            };
            if (multipleOrderFavouriteDerivativesURL != null){
                UrlPath.MULTIPLE_ORDER_FAVOURITE_DERIVATIVES.path = multipleOrderFavouriteDerivativesURL;
            };
            if (multiOrderExtractDataDerivativesURL != null){
                UrlPath.MULTIPLE_ORDER_EXTRACT_DERIVATIVES.path = multiOrderExtractDataDerivativesURL;
            };
            if (notificationStartupURL != null){
                UrlPath.NOTIFICATION_STARTUP.path = notificationStartupURL;
            };
            if (newsURL != null){
                UrlPath.NEWS.path = newsURL;
            };
            if (StreamingAttribute.isMarketRep){
                if (marginStockMktRepURL != null){
                    UrlPath.MARGIN_STOCK.path = marginStockMktRepURL;
                };
            } else {
                if (marginStockURL != null){
                    UrlPath.MARGIN_STOCK.path = marginStockURL;
                };
            };
            var tiscoCustomizedSettleInfoURL:String = this.getFlashVars("fvTiscoSettleInfo");
            if (tiscoCustomizedSettleInfoURL != null){
                UrlPath.TISCO_CUSTOMIZED_EQUITY.path = tiscoCustomizedSettleInfoURL;
            };
            var tiscoCustomizedServiceURL:String = this.getFlashVars("fvTiscoCustomizedService");
            if (tiscoCustomizedServiceURL != null){
                UrlPath.TISCO_CUSTOMIZED_REALTIME.path = tiscoCustomizedServiceURL;
            };
            var dbsvTechincalInsightURL:String = this.getFlashVars("fvDbsvTechnicalInsight");
            if (dbsvTechincalInsightURL != null){
                UrlPath.DBSV_CUSTOMIZED_TECHNICAL_INSIGHT.path = dbsvTechincalInsightURL;
            };
            var dbsvValueAnalyzerURL:String = this.getFlashVars("fvDbsvValueAnalyzer");
            if (dbsvValueAnalyzerURL != null){
                UrlPath.DBSV_CUSTOMIZED_VALUE_ANALYZER.path = dbsvValueAnalyzerURL;
            };
            var dbsvSupportAndResistanceURL:String = this.getFlashVars("fvDbsvSupportAndResistance");
            if (dbsvSupportAndResistanceURL != null){
                UrlPath.DBSV_CUSTOMIZED_SUPPORT_AND_RESISTANCE.path = dbsvSupportAndResistanceURL;
            };
            var dbsvBullishBearishSpecificTabURL:String = this.getFlashVars("fvDbsvBullishBearishSpecificTab");
            if (dbsvBullishBearishSpecificTabURL != null){
                UrlPath.DBSV_BULLISH_BEARISH_SPECIFIC_TAB.path = dbsvBullishBearishSpecificTabURL;
            };
            var dbsvStartDateEndDateURL:String = this.getFlashVars("fvDbsvStartDateEndDate");
            if (dbsvStartDateEndDateURL != null){
                UrlPath.DBSV_CUSTOMIZED_START_DATE_END_DATE.path = dbsvStartDateEndDateURL;
            };
            var dbsvChartApiURL:String = this.getFlashVars("fvDbsvChartApi");
            if (dbsvChartApiURL != null){
                UrlPath.DBSV_CUSTOMIZED_CHART_API.path = dbsvChartApiURL;
            };
            if (!isNaN(refreshRate)){
                pullManager.refreshRate = refreshRate;
            };
            if (((!((accountInfoListStr == null))) && (!((accountInfoListStr == ""))))){
                accountInfoObject = JSON.parse(accountInfoListStr);
                accountListMessage = new AccountListMessageParser().parseMessage(new ObjectResponseMessage(System.NO_SYSTEM, null, Source.NO_SOURCE, MessageFormat.ACCOUNT_LIST, accountInfoObject));
                accountManager.importAccountEquity(accountListMessage);
                TurnoverListManager.getInstance().importTurnoverList(accountListMessage);
                StreamingAttribute.isInitialEquityAccount = true;
            } else {
                StreamingAttribute.isInitialEquityAccount = false;
            };
            if (((!((accountInfoListDStr == null))) && (!((accountInfoListDStr == ""))))){
                accountManager.addAccount(new Account(accountInfoListDStr, System.DERIV));
            };
            if (activeListStr != null){
                activeList = this.parseActiveList(activeListStr);
                instrumentListNameManager.activeList = activeList;
            };
            if (allSymbolListStr != null){
                allSymbolList = this.parseAllSymbolList(allSymbolListStr);
                instrumentListNameManager.allSymbolList = allSymbolList;
            };
            if (securityTypeListStr != null){
                securityTypeList = this.parseSecurityTypeList(securityTypeListStr);
                instrumentListNameManager.securityList = securityTypeList;
            };
            if (marketListStr != null){
                marketList = this.parseMarketList(marketListStr);
                instrumentListNameManager.marketList = marketList;
            };
            if (sectorListStr != null){
                sectorList = this.parseSectorList(sectorListStr);
                sectorListName = this.parseSectorListName(sectorListStr);
                if (sectorList.length > 0){
                    instrumentListNameManager.twoLevelListDictionary[sectorListName] = sectorList;
                    instrumentListNameManager.twoLevelListNameArray.push(new InstrumentListName(sectorListName, ""));
                };
            };
            if (industryListStr != null){
                industryList = this.parseIndustryList(industryListStr);
                industryListName = this.parseIndustryListName(industryListStr);
                if (industryList.length > 0){
                    instrumentListNameManager.twoLevelListDictionary[industryListName] = industryList;
                    instrumentListNameManager.twoLevelListNameArray.push(new InstrumentListName(industryListName, ""));
                };
            };
            if (maiIndustryListStr != null){
                maiIndustryList = this.parseMaiIndustryList(maiIndustryListStr);
                maiIndustryListName = this.parseMaiIndustryListName(maiIndustryListStr);
                if (maiIndustryList.length > 0){
                    instrumentListNameManager.twoLevelListDictionary[maiIndustryListName] = maiIndustryList;
                    instrumentListNameManager.twoLevelListNameArray.push(new InstrumentListName(maiIndustryListName, ""));
                };
            };
            if (dwByUnderlyingListStr != null){
                dwByUnderlyingList = this.parseDwByUnderlyingList(dwByUnderlyingListStr);
                dwByUnderlyingListName = this.parseDwByUnderlyingListName(dwByUnderlyingListStr);
                if (dwByUnderlyingList.length > 0){
                    instrumentListNameManager.twoLevelListDictionary[dwByUnderlyingListName] = dwByUnderlyingList;
                    instrumentListNameManager.twoLevelListNameArray.push(new InstrumentListName(dwByUnderlyingListName, ""));
                };
            };
            if (tfexActiveListStr != null){
                tfexActiveList = this.parseTfexActiveList(tfexActiveListStr);
                instrumentListNameManager.tfexActiveList = tfexActiveList;
            };
            if (allUnderlyingsListStr != null){
                allUnderlyingsList = this.parseAllUnderlyingsList(allUnderlyingsListStr);
                instrumentListNameManager.allUnderlyingsList = allUnderlyingsList;
            };
            if (optionsActiveListStr != null){
                optionsActiveList = this.parseOptionsActiveList(optionsActiveListStr);
                instrumentListNameManager.optionsActiveList = optionsActiveList;
            };
            if (brokerFavouriteListStr != null){
                brokerFavouriteList = this.parseBrokerFavouriteList(brokerFavouriteListStr);
                brokerFavouriteListName = this.parseBrokerFavouriteListName(brokerFavouriteListStr);
                instrumentListNameManager.twoLevelListDictionary[brokerFavouriteListName] = brokerFavouriteList;
                brokerFavouriteListNameObj = new InstrumentListName(brokerFavouriteListName, "");
                instrumentListNameManager.brokerFavouriteName = brokerFavouriteListNameObj;
            };
            if (stockFuturesUnderlyingListStr != null){
                stockFuturesUnderlyingInstrumentList = this.parseStockFuturesUnderlyingList(stockFuturesUnderlyingListStr);
                if (stockFuturesUnderlyingInstrumentList != null){
                    InstrumentListManager.getInstance().addInstrumentList(stockFuturesUnderlyingInstrumentList);
                    logger.debug("Add Stock futures underlying instrument list");
                };
            };
            if (setNetStr != null){
                StreamingAttribute.setNetMode = setNetStr;
            };
            if (canUseBlockTradeStr != null){
                StreamingAttribute.canUseBlockTrade = (canUseBlockTradeStr == "T");
            };
            if (canUseAutoPositionStr != null){
                canUseAutoPositionObj = JSON.parse(canUseAutoPositionStr);
                autoPositionConfig = AutoPositionConfig.fromJsonObject(canUseAutoPositionObj);
                settingManager.addOrUpdateConfig(autoPositionConfig);
            };
            if (canUseTechnicalChartStr != null){
                StreamingAttribute.canUseTechnicalChart = (canUseTechnicalChartStr == "T");
            };
            if (saveWidgetIntervalStr != null){
                WidgetPage.SAVE_STATE_TIME = uint(saveWidgetIntervalStr);
            };
            if (orderPushStatusFISStr != null){
                StreamingAttribute.isOrderPushFIS = (orderPushStatusFISStr == "T");
            };
            if (orderPushStatusDGWStr != null){
                StreamingAttribute.isOrderPushDGW = (orderPushStatusDGWStr == "T");
            };
            if (showDepositBoxStr != null){
                StreamingAttribute.showDepositBox = (showDepositBoxStr == "T");
            };
            if (canShowThaiNewsStr != null){
                StreamingAttribute.canShowThaiNews = (canShowThaiNewsStr == "T");
            };
            if (canShowMoreNewsStr != null){
                StreamingAttribute.canShowMoreNews = (canShowMoreNewsStr == "T");
            };
            if (newsSourceListStr != null){
                newsSourceListJSON = JSON.parse(newsSourceListStr);
                for each (newsSource in newsSourceListJSON) {
                    StreamingAttribute.newsSourceList.push(newsSource);
                };
            };
            if (version != null){
                StreamingAttribute.version = version;
            };
            if (isWmodeTransparentStr != null){
                StreamingAttribute.isWmodeTransparent = (isWmodeTransparentStr == "T");
            };
            if (screenType != null){
                settingManager.addOrUpdateConfig(new ScreenConfig(ScreenType.lookup(screenType)));
            };
            if (attributeMapStr != null){
                attributeMap = JSON.parse(attributeMapStr);
                defaultMarketObject = attributeMap.defaultMarket;
                defaultMarket = (((defaultMarketObject.defaultMarket == "D")) ? System.DERIV : System.EQUITY);
                defaultAccount = defaultMarketObject.defaultAccount;
                enableDefaultAccount = Boolean(defaultMarketObject.isEnableDefaultAccount);
                StreamingAttribute.defaultMarket = defaultMarket;
                StreamingAttribute.defaultAccount = defaultAccount;
                if (defaultMarket.isDeriv()){
                    if (enableDefaultAccount){
                        accountManager.setCurrentAccountByAccountNumberAndSystem(defaultAccount, System.DERIV, false);
                    } else {
                        accountManager.setCurrentAccountByAccountNumberAndSystem(accountInfoListDStr, System.DERIV, false);
                    };
                } else {
                    if (enableDefaultAccount){
                        accountManager.setCurrentAccountByAccountNumberAndSystem(defaultAccount, System.EQUITY, false);
                    };
                };
                favouriteList = attributeMap.favouriteList;
                for each (favourite in favouriteList) {
                    favouriteListManager.addOrUpdateFavouriteList(favourite.listName, favourite.symbolList);
                };
                defaultWidgetPageList = new Array();
                themeObject = attributeMap.theme;
                if (themeObject != null){
                    preloadUrlStr = themeObject.preloadUrl;
                    logoUrlStr = themeObject.logoUrl;
                    watermarkUrlStr = themeObject.watermarkUrl;
                    theme = themeObject.theme;
                    if (((!((preloadUrlStr == null))) && (!((preloadUrlStr == ""))))){
                        preloadUrl = new URLRequest(preloadUrlStr);
                        this._preloader.load(preloadUrl);
                    } else {
                        this._preloader.dispatchEvent(new Event("NO_PRELOADER"));
                    };
                    if (((!((logoUrlStr == null))) && (!((logoUrlStr == ""))))){
                        this._logoUrl = logoUrlStr;
                    };
                    if (((!((watermarkUrlStr == null))) && (!((watermarkUrlStr == ""))))){
                        StreamingAttribute.watermarkUrl = watermarkUrlStr;
                    };
                    if (theme != null){
                        ThemeManager.importTheme(theme);
                        this._needReloadTheme = true;
                        StreamingAttribute.isCustomizedThemeStreaming = true;
                    };
                    defaultWidgetPageList = themeObject.defaultUserWidgetPage;
                } else {
                    this._preloader.dispatchEvent(new Event("NO_PRELOADER"));
                };
                widgetList = attributeMap.widgetList;
                widgetListManager.initConfigurationMap(widgetList);
                widgetPageList = attributeMap.userWidgetPage;
                if (StreamingAttribute.applicationMode.isLite()){
                    if ((((defaultWidgetPageList == null)) || (((!((defaultWidgetPageList == null))) && ((defaultWidgetPageList.length == 0)))))){
                        logger.info("There is no default widget page list, load default");
                        widgetPageManager.initConfigMap();
                    } else {
                        logger.info(("There are default widget page list with count : " + defaultWidgetPageList.length));
                        widgetPageManager.initPageConfig(defaultWidgetPageList);
                        i = 0;
                        while (i < defaultWidgetPageList.length) {
                            widgetPageConfig = WidgetPageConfig.fromJsonObject(defaultWidgetPageList[i]);
                            PageName.customizedPageList.push(widgetPageConfig.name);
                            WidgetPageManager.customizedPageList.push(widgetPageConfig);
                            i++;
                        };
                        WidgetPageManager.customizedPageList.push(WidgetPageManager.SETTINGS);
                    };
                    widgetPageManager.initPageConfig(widgetPageList);
                    pageList = widgetPageManager.getAllPageConfig();
                    for each (pageConfig in pageList) {
                        if (StreamingAttribute.screenType.isWide()){
                            pageConfig.width = 3;
                            pageConfig.height = 4;
                            for each (groupConfig in pageConfig.widgetGroupConfigList) {
                                for each (widgetComponentConfig in groupConfig.componentList) {
                                    if (widgetComponentConfig.widgetId == "Place_Singleton_3_2"){
                                        widgetComponentConfig.widgetId = "Place_Singleton_3_1";
                                    } else {
                                        if (widgetComponentConfig.widgetId == "OrderSearch_3_5"){
                                            widgetComponentConfig.widgetId = "OrderSearch_3_4";
                                        } else {
                                            if (widgetComponentConfig.widgetId == "Place_Singleton_3_5"){
                                                widgetComponentConfig.widgetId = "Place_Singleton_3_4";
                                            } else {
                                                if (widgetComponentConfig.widgetId == "Multi_3_5"){
                                                    widgetComponentConfig.widgetId = "Multi_3_4";
                                                };
                                            };
                                        };
                                    };
                                    if (pageConfig.id == PageName.BUY_SELL_MKT){
                                        if (widgetComponentConfig.widgetId == "Port_3_2"){
                                            widgetComponentConfig.widgetId = "Port_3_1";
                                        };
                                    };
                                };
                            };
                        } else {
                            if (StreamingAttribute.screenType.isNormal()){
                                pageConfig.width = 3;
                                pageConfig.height = 6;
                                for each (groupConfig in pageConfig.widgetGroupConfigList) {
                                    for each (widgetComponentConfig in groupConfig.componentList) {
                                        if (widgetComponentConfig.widgetId == "Place_Singleton_3_1"){
                                            widgetComponentConfig.widgetId = "Place_Singleton_3_2";
                                        } else {
                                            if (widgetComponentConfig.widgetId == "OrderSearch_3_4"){
                                                widgetComponentConfig.widgetId = "OrderSearch_3_5";
                                            } else {
                                                if (widgetComponentConfig.widgetId == "Place_Singleton_3_4"){
                                                    widgetComponentConfig.widgetId = "Place_Singleton_3_5";
                                                } else {
                                                    if (widgetComponentConfig.widgetId == "Multi_3_4"){
                                                        widgetComponentConfig.widgetId = "Multi_3_5";
                                                    };
                                                };
                                            };
                                        };
                                        if (pageConfig.id == PageName.BUY_SELL_MKT){
                                            if (widgetComponentConfig.widgetId == "Port_3_1"){
                                                widgetComponentConfig.widgetId = "Port_3_2";
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } else {
                    if (widgetPageList.length > 0){
                        pageConfig = WidgetPageConfig.fromJsonObject(widgetPageList[0]);
                        if (((!((pageConfig.width == StreamingAttribute.widgetGridSize.width))) || (!((pageConfig.height == StreamingAttribute.widgetGridSize.height))))){
                            widgetPageList.length = 0;
                        };
                    };
                    if (widgetPageList.length == 0){
                        StreamingAttribute.isChangeModeToPro = true;
                    };
                    widgetProPageManager.initialWidgetProPage(widgetPageList);
                };
                template = attributeMap.template;
                orderAlert = attributeMap.orderAlert;
                priceVolAlert = attributeMap.priceVolAlert;
                priceVolCondition = attributeMap.priceVolCondition;
                shortcutAccount = attributeMap.shortcutAccount;
                shortcutSymbol = attributeMap.shortcutSymbol;
                notifyList = attributeMap.notifyList;
                orderEntry = attributeMap.orderEntry;
                notificationLastView = attributeMap.notificationLastView;
                languageObject = attributeMap.language;
                language = Language.lookupFromFeed(attributeMap.language);
                autoAdjustSize = attributeMap.autoAdjustType;
                if (StreamingAttribute.applicationMode.isPro()){
                    language = Language.ENGLISH;
                };
                LanguageManager.getInstance().setCurrentLanuage(language);
                settingManager.addOrUpdateConfig(TemplateConfig.fromJsonObject(template));
                settingManager.addOrUpdateConfig(OrderAlertConfig.fromJsonObject(orderAlert));
                settingManager.addOrUpdateConfig(PriceVolumeAlertConfig.fromJsonObject(priceVolAlert));
                settingManager.addOrUpdateConfig(PriceVolumeConditionConfig.fromJsonObject(priceVolCondition));
                settingManager.addOrUpdateConfig(ShortcutInstrumentIdConfig.fromJsonObject(shortcutSymbol));
                settingManager.addOrUpdateConfig(ShortcutAccountConfig.fromJsonObject(shortcutAccount));
                settingManager.addOrUpdateConfig(NotifyListConfig.fromJsonObject(notifyList));
                settingManager.addOrUpdateConfig(OrderEntryConfig.fromJsonObject(orderEntry));
                settingManager.addOrUpdateConfig(NotificationLastViewConfig.fromJsonObject(notificationLastView));
                settingManager.addOrUpdateConfig(LanguageChangeConfig.fromJsonObject(languageObject));
                settingManager.addOrUpdateConfig(DefaultAccountConfig.fromJsonObject(defaultMarketObject));
                settingManager.addOrUpdateConfig(AutoAdjustSizeConfig.fromJsonObject(autoAdjustSize));
                customStr = String(attributeMap.custom);
                genericSetting = null;
                if (((!((customStr == null))) && ((customStr.length > 0)))){
                    genericSetting = JSON.parse(customStr);
                };
                displayText = null;
                if (genericSetting != null){
                    displayText = genericSetting.DisplayText;
                };
                genericSettingManager.addOrUpdateConfig(DisplayTextConfig.fromJsonObject(displayText));
                if (genericSetting != null){
                    lastOpenVersion = genericSetting.Version;
                    quality = genericSetting.Quality;
                    genericSettingManager.addOrUpdateConfig(VersionConfig.fromJsonObject(lastOpenVersion));
                    genericSettingManager.addOrUpdateConfig(QualityConfig.fromJsonObject(quality));
                };
                displayTextConfig = DisplayTextConfig(genericSettingManager.getConfig(ConfigType.GENERIC_DISPLAY_TEXT));
                if (!this._needReloadTheme){
                    ThemeManager.GAINER_COLOR = displayTextConfig.gainerColor;
                    ThemeManager.UNCHANGED_COLOR = displayTextConfig.unchangeColor;
                    ThemeManager.UNCHANGED_VOLUME_COLOR = displayTextConfig.unchangeColor;
                    ThemeManager.LOSER_COLOR = displayTextConfig.loserColor;
                    ThemeManager.BUY_VOLUME_COLOR = displayTextConfig.buyColor;
                    ThemeManager.SELL_VOLUME_COLOR = displayTextConfig.sellColor;
                };
                ThemeManager.initialTextFormatWithFontSize(displayTextConfig.fontSize);
                versionConfig = VersionConfig(genericSettingManager.getConfig(ConfigType.GENERIC_VERSION));
                StreamingAttribute.isChangeVersion = VersionUtil.isChangeVersion(versionConfig.version, StreamingAttribute.version);
                StreamingAttribute.isChangeMajorVersion = VersionUtil.isChangeMajorVersion(versionConfig.version, StreamingAttribute.version);
                qualityConfig = QualityConfig(genericSettingManager.getConfig(ConfigType.GENERIC_QUALITY));
                this.source.stage.frameRate = qualityConfig.frameRate;
                logger.trace((ThemeManager.defaultFont.size + ""));
            };
            this.dispatcher.notifyControlMessage(new InitialStatusMessage(InitialStatus.FLASH_VAR));
        }
        private function parseSectorList(sectorListStr:String):Array{
            var listItem:String;
            var instrumentListName:InstrumentListName;
            var jsonActiveList:Object = JSON.parse(sectorListStr).data;
            if (jsonActiveList.length == 0){
                return (new Array());
            };
            var result:Array = new Array();
            for each (listItem in jsonActiveList) {
                instrumentListName = new InstrumentListName(listItem, "");
                result.push(instrumentListName);
            };
            return (result);
        }
        private function parseSectorListName(sectorListStr:String):String{
            return (JSON.parse(sectorListStr).name);
        }
        private function parseIndustryList(industryListStr:String):Array{
            var listItem:String;
            var instrumentListName:InstrumentListName;
            var jsonActiveList:Object = JSON.parse(industryListStr).data;
            if (jsonActiveList.length == 0){
                return (new Array());
            };
            var result:Array = new Array();
            for each (listItem in jsonActiveList) {
                instrumentListName = new InstrumentListName(listItem, "");
                result.push(instrumentListName);
            };
            return (result);
        }
        private function parseIndustryListName(industryListStr:String):String{
            return (JSON.parse(industryListStr).name);
        }
        private function parseMaiIndustryList(maiIndustryListStr:String):Array{
            var listItem:String;
            var instrumentListName:InstrumentListName;
            var jsonActiveList:Object = JSON.parse(maiIndustryListStr).data;
            if (jsonActiveList.length == 0){
                return (new Array());
            };
            var result:Array = new Array();
            for each (listItem in jsonActiveList) {
                instrumentListName = new InstrumentListName(listItem, "");
                result.push(instrumentListName);
            };
            return (result);
        }
        private function parseMaiIndustryListName(maiIndustryListStr:String):String{
            return (JSON.parse(maiIndustryListStr).name);
        }
        private function parseOptionsActiveList(optionsActiveListStr:String):Array{
            var listItem:Object;
            var instrumentListName:InstrumentListName;
            var jsonActiveList:Object = JSON.parse(optionsActiveListStr);
            if (jsonActiveList.length == 0){
                return (new Array());
            };
            var result:Array = new Array();
            for each (listItem in jsonActiveList) {
                instrumentListName = new InstrumentListName(listItem.mainListName, listItem.boardType);
                result.push(instrumentListName);
            };
            return (result);
        }
        private function parseAllUnderlyingsList(allUnderlyingsListStr:String):Array{
            var listItem:String;
            var instrumentListName:InstrumentListName;
            var jsonActiveList:Object = JSON.parse(allUnderlyingsListStr);
            if (jsonActiveList.length == 0){
                return (new Array());
            };
            var result:Array = new Array();
            for each (listItem in jsonActiveList) {
                instrumentListName = new InstrumentListName(listItem, "");
                result.push(instrumentListName);
            };
            return (result);
        }
        private function parseTfexActiveList(tfexActiveListStr:String):Array{
            var listItem:Object;
            var listName:String;
            var instrumentListName:InstrumentListName;
            var listItemArray:Array;
            var listItemString:String;
            var jsonActiveList:Object = JSON.parse(tfexActiveListStr);
            if (jsonActiveList.length == 0){
                return (new Array());
            };
            var result:Array = new Array();
            for each (listItem in jsonActiveList) {
                listName = listItem.name;
                instrumentListName = new InstrumentListName(listName, "");
                result.push(instrumentListName);
                listItemArray = new Array();
                for each (listItemString in listItem.data) {
                    instrumentListName = new InstrumentListName(listItemString, "");
                    listItemArray.push(instrumentListName);
                };
                if (listItemArray.length > 0){
                    InstrumentListNameManager.getInstance().twoLevelListDictionary[listName] = listItemArray;
                    InstrumentListNameManager.getInstance().twoLevelListNameArray.push(new InstrumentListName(listName, ""));
                };
            };
            return (result);
        }
        private function parseSecurityTypeList(securityListStr:String):Array{
            var listItem:String;
            var instrumentListName:InstrumentListName;
            var jsonActiveList:Object = JSON.parse(securityListStr);
            if (jsonActiveList.length == 0){
                return (new Array());
            };
            var result:Array = new Array();
            for each (listItem in jsonActiveList) {
                instrumentListName = new InstrumentListName(listItem, "");
                result.push(instrumentListName);
            };
            return (result);
        }
        private function parseMarketList(marketListStr:String):Array{
            var listItem:String;
            var instrumentListName:InstrumentListName;
            var jsonActiveList:Object = JSON.parse(marketListStr);
            if (jsonActiveList.length == 0){
                return (new Array());
            };
            var result:Array = new Array();
            for each (listItem in jsonActiveList) {
                instrumentListName = new InstrumentListName(listItem, "");
                result.push(instrumentListName);
            };
            return (result);
        }
        private function parseActiveList(activeListStr:String):Array{
            var listItem:Object;
            var instrumentListName:InstrumentListName;
            var jsonActiveList:Object = JSON.parse(activeListStr);
            if (jsonActiveList.length == 0){
                return (new Array());
            };
            var result:Array = new Array();
            for each (listItem in jsonActiveList) {
                instrumentListName = new InstrumentListName(listItem.mainListName, listItem.boardType);
                result.push(instrumentListName);
            };
            return (result);
        }
        private function parseAllSymbolList(marketListStr:String):Array{
            var listItem:Object;
            var instrumentListName:InstrumentListName;
            var jsonActiveList:Object = JSON.parse(marketListStr);
            if (jsonActiveList.length == 0){
                return (new Array());
            };
            var result:Array = new Array();
            for each (listItem in jsonActiveList) {
                instrumentListName = new InstrumentListName(listItem.mainListName, listItem.boardType);
                result.push(instrumentListName);
            };
            return (result);
        }
        private function parseFavouriteList(favouriteListStr:String):Array{
            var listName:String;
            var instrumentListName:InstrumentListName;
            if (favouriteListStr.length == 0){
                return (new Array());
            };
            var result:Array = new Array();
            var token:Array = favouriteListStr.split(Delimiter.LEVEL2);
            for each (listName in token) {
                instrumentListName = new InstrumentListName(listName, null);
                result.push(instrumentListName);
            };
            return (result);
        }
        private function parseDwByUnderlyingList(dwByUnderlyingListStr:String):Array{
            var listItem:String;
            var instrumentListName:InstrumentListName;
            var jsonActiveList:Object = JSON.parse(dwByUnderlyingListStr).data;
            if (jsonActiveList.length == 0){
                return (new Array());
            };
            var result:Array = new Array();
            for each (listItem in jsonActiveList) {
                instrumentListName = new InstrumentListName(listItem, "");
                result.push(instrumentListName);
            };
            return (result);
        }
        private function parseDwByUnderlyingListName(dwByUnderlyingListStr:String):String{
            return (JSON.parse(dwByUnderlyingListStr).name);
        }
        private function parseBrokerFavouriteList(brokerFavouriteListStr:String):Array{
            var listName:String;
            var listToken:Array;
            var instrumentListName:InstrumentListName;
            if (brokerFavouriteListStr.length == 0){
                return (new Array());
            };
            var result:Array = new Array();
            var token:Array = brokerFavouriteListStr.split(Delimiter.LEVEL2);
            token.splice(0, 1);
            for each (listName in token) {
                listToken = listName.split(Delimiter.LEVEL3);
                instrumentListName = new InstrumentListName(listToken[0], listToken[1]);
                result.push(instrumentListName);
            };
            return (result);
        }
        private function parseBrokerFavouriteListName(brokerFavouriteListStr:String):String{
            var result:Array = new Array();
            var token:Array = brokerFavouriteListStr.split(Delimiter.LEVEL2);
            if (token.length > 0){
                return (token[0]);
            };
            return ("");
        }
        private function parseStockFuturesUnderlyingList(stockFuturesUnderlyingListStr:String):InstrumentList{
            var listItem:String;
            var instrumentList:InstrumentList;
            var instrumentToken:InstrumentToken;
            var jsonActiveList:Object = JSON.parse(stockFuturesUnderlyingListStr);
            if (jsonActiveList.length == 0){
                return (null);
            };
            var result:Array = new Array();
            for each (listItem in jsonActiveList) {
                instrumentToken = new InstrumentToken(listItem);
                result.push(instrumentToken);
            };
            instrumentList = new InstrumentList(InstrumentListType.STOCK_FUTURES_UNDERLYING, result);
            return (instrumentList);
        }
        public function get source():MovieClip{
            return (this._source);
        }
        public function set source(value:MovieClip):void{
            this._source = value;
        }
        public function set preloader(value:Loader):void{
            this._preloader = value;
        }
        public function get logoUrl():String{
            return (this._logoUrl);
        }
        public function set logoUrl(value:String):void{
            this._logoUrl = value;
        }
        public function get needReloadTheme():Boolean{
            return (this._needReloadTheme);
        }

    }
}//package com.settrade.streaming5.initializer 
﻿package com.settrade.streaming5.common {

    public class InstrumentListName {

        protected var _listName:String;
        protected var _boardType:String;

        public function InstrumentListName(listName:String, boardType:String){
            super();
            this._listName = listName;
            this._boardType = boardType;
        }
        public function get listName():String{
            return (this._listName);
        }
        public function get boardType():String{
            return (this._boardType);
        }

    }
}//package com.settrade.streaming5.common 
﻿package com.settrade.streaming5.common {
    import com.settrade.streaming5.enumuration.*;
    import flash.geom.*;

    public class StreamingAttribute {

        private static const SCREEN1_NAME:String = "gen5sc1";

        public static var applicationName:String = ApplicationName.STREAMING;
        public static var userRef:String = "";
        public static var brokerId:String = "";
        public static var openTime:Number = 0;
        public static var userRoleEquity:UserRole = UserRole.NO_TYPE;
        public static var userRoleDerivatives:UserRole = UserRole.NO_TYPE;
        public static var isInitialEquityAccount:Boolean = false;
        public static var canUseMarketMaker:Boolean = false;
        public static var defaultMarket:System = System.EQUITY;
        public static var defaultAccount:String = "";
        public static var realtimeClientType:String = "";
        public static var fusionChartPath:String = "../../../ChartsFlexV1_3/fusioncharts";
        public static var screenType:ScreenType = ScreenType.WIDE;
        public static var widgetGridSize:Rectangle = new Rectangle();
        public static var applicationMode:StreamingMode = StreamingMode.LITE;
        public static var isSubBroker:Boolean = false;
        public static var isGoldOnly:Boolean = false;
        public static var systemMarket:System = System.ALL_SYSTEM;
        public static var canChangePIN:Boolean = false;
        public static var canChangePassword:Boolean = false;
        public static var setNetMode:String = "";
        public static var canUseBlockTrade:Boolean = false;
        public static var canUseTechnicalChart:Boolean = false;
        public static var showDepositBox:Boolean = false;
        public static var isOrderPushFIS:Boolean = false;
        public static var isOrderPushDGW:Boolean = false;
        public static var buildTime:String = "";
        public static var terminalType:String = "streaming";
        public static var canShowThaiNews:Boolean = false;
        public static var canShowMoreNews:Boolean = false;
        public static var newsSourceList:Array = new Array();
        public static var lastModified = "";
        public static var clickFrameRate:int = 24;
        public static var version:String = "5.0.0";
        public static var isChangeVersion:Boolean = false;
        public static var isChangeMajorVersion:Boolean = false;
        public static var isChangeModeToPro:Boolean = false;
        public static var isWmodeTransparent:Boolean = false;
        public static var watermarkUrl:String = "";
        public static var isCustomizedThemeStreaming:Boolean = false;
        public static var newWidgetList:Array = new Array();

        public static function get isMarketRep():Boolean{
            return (((userRoleEquity.isMarketRep()) || (userRoleDerivatives.isMarketRep())));
        }
        public static function get isPrimaryScreen():Boolean{
            return ((realtimeClientType == SCREEN1_NAME));
        }

    }
}//package com.settrade.streaming5.common 
﻿package com.settrade.streaming5.common {
    import com.settrade.streaming5.enumuration.*;

    public class Account {

        public static const ALL:Account = new Account("", System.ALL_SYSTEM);
;
        public static const EMPTY_ACCOUNT_EQUITY:Account = new Account("", System.EQUITY);
;
        public static const EMPTY_ACCOUNT_DERIVATIVES:Account = new Account("", System.DERIV);
;
        public static const ALL_DERIVATIVES:Account = new Account("_ALL", System.DERIV);
;

        protected var _accountNumber:String;
        protected var _system:System;

        public function Account(accountNumber:String, system:System){
            super();
            this._accountNumber = accountNumber;
            this._system = system;
        }
        public function canChangeOrderPrice():Boolean{
            return (true);
        }
        public function get accountNumber():String{
            return (this._accountNumber);
        }
        public function get system():System{
            return (this._system);
        }
        public function toString():String{
            return ((((("[Account accountNumber=" + this.accountNumber) + " system=") + this.system) + "]"));
        }

    }
}//package com.settrade.streaming5.common 
﻿package com.settrade.streaming5.common {
    import com.settrade.log.logger.*;

    public class StreamingCoreAttribute {

        public static const VERSION = "0.3QA";
        public static const API_VERSION:String = "1";

        private static var logger:Logger = new Logger(prototype.constructor);

        public function StreamingCoreAttribute(){
            super();
        }
        public static function printStreamingCoreAttributeLog():void{
            logger.info(("Streaming Core Version: " + VERSION));
        }

    }
}//package com.settrade.streaming5.common 
﻿package com.settrade.streaming5.common {
    import com.settrade.streaming5.enumuration.*;

    public class AccountEquity extends Account {

        protected var _orderType:OrderType;
        protected var _tradeType:String;
        protected var _canTrade:Boolean;
        protected var _canUseMultipleOrder:Boolean;
        protected var _sblFlag:Boolean;
        protected var _clientType:String;

        public function AccountEquity(accountNumber:String, orderType:OrderType, tradeType:String, canTrade:Boolean, canUseMultipleOrder:Boolean, sblFlag:Boolean, clientType:String){
            super(accountNumber, System.EQUITY);
            this._orderType = orderType;
            this._tradeType = tradeType;
            this._canTrade = canTrade;
            this._canUseMultipleOrder = canUseMultipleOrder;
            this._sblFlag = sblFlag;
            this._clientType = clientType;
        }
        override public function canChangeOrderPrice():Boolean{
            return ((((this._orderType == null)) ? false : ((this._orderType.isSeos()) || (this._orderType.isFis()))));
        }
        public function isCreditBalanceAccount():Boolean{
            return ((this._tradeType == "CREDIT_BALANCE"));
        }
        public function get orderType():OrderType{
            return (this._orderType);
        }
        public function get tradeType():String{
            return (this._tradeType);
        }
        public function get canTrade():Boolean{
            return (this._canTrade);
        }
        public function get canUseMultipleOrder():Boolean{
            return (this._canUseMultipleOrder);
        }
        public function get sblFlag():Boolean{
            return (this._sblFlag);
        }
        public function get clientType():String{
            return (this._clientType);
        }
        public function set tradeType(value:String):void{
            this._tradeType = value;
        }
        public function set clientType(value:String):void{
            this._clientType = value;
        }
        override public function toString():String{
            return ((((((((((((("[AccountEquity orderType=" + this.orderType) + " tradeType=") + this.tradeType) + " canTrade=") + this.canTrade) + " canUseMultipleOrder=") + this.canUseMultipleOrder) + " sblFlag=") + this.sblFlag) + " clientType=") + this.clientType) + "]"));
        }

    }
}//package com.settrade.streaming5.common 
﻿package com.settrade.streaming5.common.stat {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.connection.common.*;

    public class UrlLoaderStat {

        protected var _path:UrlPath;
        protected var _last:Number;
        protected var _max:Number;
        protected var _min:Number;
        protected var _newM:Number;
        protected var _newS:Number;
        protected var _oldM:Number;
        protected var _oldS:Number;
        protected var _n:Number;

        public function UrlLoaderStat(path:UrlPath){
            super();
            this._path = path;
            this._last = 0;
            this._newM = 0;
            this._newS = 0;
            this._oldM = 0;
            this._oldS = 0;
            this._n = 0;
            this._max = NaN;
            this._min = NaN;
        }
        public static function createByLoader(loader:StreamingURLLoader):UrlLoaderStat{
            var stat:UrlLoaderStat = new UrlLoaderStat(loader.path);
            stat.update(loader);
            return (stat);
        }

        public function update(loader:StreamingURLLoader):void{
            this._last = (new Date().getTime() - loader.requestTime.getTime());
            this._max = ((((isNaN(this._max)) || ((this._max < this._last)))) ? this._last : this._max);
            this._min = ((((isNaN(this._min)) || ((this._min > this._last)))) ? this._last : this._min);
            this._n++;
            if (this._n == 1){
                this._oldM = this._last;
                this._newM = this._last;
                this._oldS = 0;
            } else {
                this._newM = (this._oldM + ((this._last - this._oldM) / this._n));
                this._newS = (this._oldS + ((this._last - this._oldM) * (this._last - this._newM)));
                this._oldM = this._newM;
                this._oldS = this._newS;
            };
        }
        public function toString():String{
            return (((((((((((((this._path.name + ": last = ") + this._last) + ", average = ") + this.average) + ", sd = ") + this.sd) + ", n = ") + this._n) + ", min = ") + this._min) + ", max = ") + this._max));
        }
        public function get variance():Number{
            return ((((this._n > 1)) ? (this._newS / (this._n - 1)) : 0));
        }
        public function get sd():Number{
            return (Math.sqrt(this.variance));
        }
        public function get last():Number{
            return (this._last);
        }
        public function get average():Number{
            return ((((this._n > 0)) ? this._newM : 0));
        }
        public function get n():Number{
            return (this._n);
        }
        public function get path():UrlPath{
            return (this._path);
        }

    }
}//package com.settrade.streaming5.common.stat 
﻿package com.settrade.streaming5.event {
    import com.settrade.streaming5.message.*;
    import flash.events.*;

    public class MessageEvent extends Event {

        protected var _message:Message;

        public function MessageEvent(type:String, message:Message, bubbles:Boolean=false, cancelable:Boolean=false){
            super(type, bubbles, cancelable);
            this._message = message;
        }
        public static function isMessageEvent(type:String){
            return (((((((MessageReceiveEvent.isMessageReceiveEvent(type)) || (MessageSendEvent.isMessageSendEvent(type)))) || (MessageControlEvent.isMessageControlEvent(type)))) || (MessageFailEvent.isMessageFailEvent(type))));
        }

        override public function clone():Event{
            return (new MessageEvent(type, this._message, bubbles, cancelable));
        }
        override public function toString():String{
            return (formatToString("MessageEvent", "type", "bubbles", "cancelable", "eventPhase", "message"));
        }
        public function get message():Message{
            return (this._message);
        }

    }
}//package com.settrade.streaming5.event 
﻿package com.settrade.streaming5.event {
    import com.settrade.streaming5.message.*;
    import __AS3__.vec.*;

    public class MessageControlEvent extends MessageEvent {

        public static const SOCKET_STATUS:String = "SocketStaus";
        public static const INITIAL_STATUS:String = "InitialStatus";
        public static const FEED_STATUS:String = "FeedStatus";
        public static const FEED_MANAGER_STATUS:String = "FeedManagerStatus";
        public static const PAGE_STATUS:String = "PageStatus";
        public static const ACCOUNT_CHANGE:String = "AccountChange";
        public static const NOTIFICATION:String = "Notification";
        public static const WIDGET_LOADED:String = "WidgetLoaded";
        public static const NOTIFY_PLACE_ORDER:String = "NotifyPlaceOrder";
        public static const CONFIG_CHANGE:String = "ConfigChange";
        public static const NOTIFY_PLACE_INSTRUMENT_ID:String = "NotifyPlaceInstrumentId";
        public static const WIDGET_PAGE_STATUS:String = "WidgetPageStatus";
        public static const KEYBOARD_SHORTCUT:String = "KeyboardShoartcut";
        public static const CHANGE_LANGUAGE:String = "ChangeLanguage";
        public static const POPUP_STATE_CHANGE:String = "PopupStateChange";
        public static const HTML_HOLDER_INSTRUMENT_CHANGE:String = "HtmlHolderInstrumentChange";
        public static const THEME_CHANGE:String = "ThemeChange";

        public static var ALL:Vector.<String> = new Vector.<String>();
;

        public function MessageControlEvent(type:String, message:Message, bubbles:Boolean=false, cancelable:Boolean=false){
            super(type, message, bubbles, cancelable);
        }
        public static function isMessageControlEvent(type:String){
            var messageEventType:String;
            for each (messageEventType in ALL) {
                if (messageEventType == type){
                    return (true);
                };
            };
            return (false);
        }

        ALL.push(SOCKET_STATUS, INITIAL_STATUS, FEED_STATUS, FEED_MANAGER_STATUS, PAGE_STATUS, ACCOUNT_CHANGE, NOTIFICATION, WIDGET_LOADED, NOTIFY_PLACE_ORDER, CONFIG_CHANGE, NOTIFY_PLACE_INSTRUMENT_ID, WIDGET_PAGE_STATUS, KEYBOARD_SHORTCUT, CHANGE_LANGUAGE, POPUP_STATE_CHANGE, HTML_HOLDER_INSTRUMENT_CHANGE, THEME_CHANGE);
    }
}//package com.settrade.streaming5.event 
﻿package com.settrade.streaming5.event {
    import com.settrade.streaming5.message.*;
    import __AS3__.vec.*;

    public class MessageFailEvent extends MessageEvent {

        public static const FAIL = "FailMessage";

        public static var ALL:Vector.<String> = new Vector.<String>();
;

        public function MessageFailEvent(type:String, message:Message, bubbles:Boolean=false, cancelable:Boolean=false){
            super(type, message, bubbles, cancelable);
        }
        public static function isMessageFailEvent(type:String){
            var messageEventType:String;
            for each (messageEventType in ALL) {
                if (messageEventType == type){
                    return (true);
                };
            };
            return (false);
        }

        ALL.push(FAIL);
    }
}//package com.settrade.streaming5.event 
﻿package com.settrade.streaming5.event {
    import com.settrade.streaming5.message.*;
    import __AS3__.vec.*;

    public class MessageSendEvent extends MessageEvent {

        public static const STUB:String = "StubRequest";
        public static const GENERATE_KEY:String = "GenerateKeyRequest";
        public static const REGIST_KEY:String = "RegistKeyRequest";
        public static const MARKET_SUMMARY:String = "MarketSummaryRequest";
        public static const MARKET_TICKER:String = "MarketTickerRequest";
        public static const INSTRUMENT_TICKER:String = "InstrumentTickerRequest";
        public static const INSTRUMENT_TICKER_ODDLOT:String = "InstrumentTickerOddLotRequest";
        public static const SNAPSHOT:String = "SnapshotRequest";
        public static const INFO:String = "InfoRequest";
        public static const INFO_STATISTIC:String = "InfoStatisticRequest";
        public static const INFO_STATISTIC_CHART:String = "InfoStatisticChartRequest";
        public static const INFO_ODDLOT:String = "InfoOddLotRequest";
        public static const INTRADAY_CHART:String = "IntradayChartRequest";
        public static const HISTORICAL_CHART:String = "HistoricalChartRequest";
        public static const HISTORICAL_BY_DATE:String = "HistoricalByDateRequest";
        public static const NEWS:String = "NewsRequest";
        public static const SET_CALENDAR:String = "SetCalendarRequest";
        public static const VOLUME_BY_PRICE:String = "VolumeByPriceRequest";
        public static const VOLUME_BY_PRICE_DETAIL:String = "VolumeByPriceDetailRequest";
        public static const MULTIPLE:String = "MultipleRequest";
        public static const PLACE_ORDER_EQUITY:String = "PlaceOrderEquitySend";
        public static const PLACE_ORDER_CONFIRM_EQUITY:String = "PlaceOrderConfirmEquitySend";
        public static const CANCEL_ORDER_EQUITY:String = "CancelOrderEquitySend";
        public static const OPTIONS_EXPIRE_DATE:String = "OptionsExpireDateSend";
        public static const OPTIONS_RECOMMEND:String = "OptionsRecommendSend";
        public static const OPTIONS_COMMISSION:String = "OptionsCommissionSend";
        public static const OPTIONS_HISTORICAL_CHART:String = "OptionsHistoricalChartSend";
        public static const PLACE_ORDER_DERIVATIVES:String = "PlaceOrderDerivativesSend";
        public static const PLACE_ORDER_CONFIRM_DERIVATIVES:String = "PlaceOrderConfirmDerivativesSend";
        public static const ORDER_STATUS_DERIVATIVES:String = "OrderStatusDerivativesSend";
        public static const ORDER_STATUS_ALL_DERIVATIVES:String = "OrderStatusAllDerivativesSend";
        public static const ORDER_STATUS_BY_NUMBER_DERIVATIVES:String = "OrderStatusByNumberDerivativesSend";
        public static const PORTFOLIO_DERIVATIVES:String = "PortfolioDerivativesSend";
        public static const ACCOUNT_INFO_DERIVATIVES:String = "AccountInfoDerivativesSend";
        public static const ACCOUNT_INFO_LONG_DERIVATIVES:String = "AccountInfoLongDerivativesSend";
        public static const DEAL_SUMMARY_DERIVATIVES:String = "DealSummaryDerivativesSend";
        public static const DEAL_SUMMARY_BY_INSTRUMENT_ID_DERIVATIVES:String = "DealSummaryByInstrumentIdDerivativesSend";
        public static const DEAL_SUMMARY_BY_PRICE_DERIVATIVES:String = "DealSummaryByPriceDerivativesSend";
        public static const OUTSTANDING_POSITION_DERIVATIVES:String = "OutstandingPositionDerivativesSend";
        public static const POSITION_CLOSING_DERIVATIVES:String = "PositionClosingDerivativesSend";
        public static const ORDER_STATUS_EQUITY:String = "OrderStatusEquitySend";
        public static const ORDER_STATUS_BY_NUMBER_EQUITY:String = "OrderStatusByNumberEquitySend";
        public static const PORTFOLIO_EQUITY:String = "PortfolioEquitySend";
        public static const ACCOUNT_INFO_EQUITY:String = "AccountInfoEquitySend";
        public static const ACCOUNT_INFO_LONG_EQUITY:String = "AccountInfoLongEquitySend";
        public static const DEAL_SUMMARY_EQUITY:String = "DealSummaryEquitySend";
        public static const CANCEL_ORDER_DERIVATIVES:String = "CancelOrderDerivativesSend";
        public static const INSTRUMENT_LIST:String = "InstrumentListRequest";
        public static const OPTIONS_STRIKE_PRICE_LIST:String = "OptionsStrikePriceListRequest";
        public static const OPTIONS_GREEK_VALUE:String = "OptionsGreekValueResponse";
        public static const OPTIONS_GREEK_DEFAULT_VALUE:String = "OptionsGreekDefaultValueResponse";
        public static const OPTIONS_INSTRUMENT_LIST:String = "OptionsInstrumentListRequest";
        public static const ACCOUNT_NAME:String = "AccountNameRequest";
        public static const ACCOUNT_LIST_EQUITY:String = "AccountListEquityRequest";
        public static const FAVOURITE_ADD:String = "FavouriteAddRequest";
        public static const FAVOURITE_REMOVE:String = "FavouriteRemoveRequest";
        public static const FAVOURITE_UPDATE:String = "FavouriteUpdateRequest";
        public static const FAVOURITE_SWAP:String = "FavouriteSwapRequest";
        public static const SYNC_TIME:String = "SynctimeRequest";
        public static const USER_CHECK:String = "UserCheckRequest";
        public static const ORDER_STATUS_PUSH:String = "OrderStatusPushRequest";
        public static const STATIC_DATA:String = "StaticDataRequest";
        public static const UPDATE_CONFIG:String = "UpdateConfigRequest";
        public static const TEMPLATE:String = "TemplateRequest";
        public static const NEWS_INFORMATION:String = "NewsInformationRequest";
        public static const RESEARCH:String = "ResearchRequest";
        public static const OPPDAY_LIVE:String = "OppdayLiveRequest";
        public static const OPPDAY_ARCHIVE:String = "OppdayArchiveRequest";
        public static const OPPDAY_SEARCH:String = "OppdaySearchRequest";
        public static const INSTRUMENT_ID_VALIDATOR:String = "InstrumentIdValidatorRequest";
        public static const ORDER_STATUS_SEARCH_EQUITY:String = "OrderStatusSearchEquityRequest";
        public static const ORDER_STATUS_SEARCH_DERIVATIVES:String = "OrderStatusSearchDerivativesRequest";
        public static const CHANGE_ORDER_EQUITY:String = "ChangeOrderEquityRequest";
        public static const CHANGE_ORDER_CONFIRM_EQUITY:String = "ChangeOrderConfirmEquityRequest";
        public static const CHANGE_ORDER_DERIVATIVES:String = "ChangeOrderDerivativesRequest";
        public static const CHANGE_ORDER_CONFIRM_DERIVATIVES:String = "ChangeOrderConfirmDerivativesRequest";
        public static const PAGE_STAT:String = "PageStatRequest";
        public static const SYMBOL_SELECTOR_TREE:String = "SymbolSelectorTreeRequest";
        public static const SYMBOL_SELECTOR_OPTIONS:String = "SymbolSelectorOpstionsRequest";
        public static const BLOCK_TRADE:String = "BlockTradeRequest";
        public static const BLOCK_TRADE_INIT:String = "BlockTradeInitRequest";
        public static const BLOCK_TRADE_TRTYPE:String = "BlockTradeTrTypeRequest";
        public static const BLOCK_TRADE_CONFIRM:String = "BlockTradeConfirmRequest";
        public static const BLOCK_TRADE_INFO:String = "BlockTradeInfoRequest";
        public static const ACCOUNT_LIST_HIERACHY_DERIVATIVES:String = "AccountListHeitachyDerivativesRequest";
        public static const FAST_QUOTE_DERIVATIVES:String = "FastQuoteDerivativesRequest";
        public static const ORDER_PUSH_CHECK:String = "OrderPushCheckRequest";
        public static const PIN_CHECK:String = "PinCheckRequest";
        public static const MULTIPLE_ORDER_SORT_MARKETCAP_EQUITY:String = "MultipleOrderSortMarketCapEquityRequest";
        public static const MULTIPLE_ORDER_CALCULATE_EQUITY:String = "MultipleOrderCalculateEquityRequest";
        public static const MULTIPLE_ORDER_GET_LAST_EQUITY:String = "MultipleOrderGetLastEquityRequest";
        public static const MULTIPLE_ORDER_GET_PERCENT_EQUITY:String = "MultipleOrderGetPercentEquityRequest";
        public static const MULTIPLE_ORDER_EXTRACT_EQUITY:String = "MultipleOrderExtractEquityRequest";
        public static const MULTIPLE_ORDER_GET_LAST_DERIVATIVES:String = "MultipleOrderGetLastDerivativesRequest";
        public static const MULTIPLE_ORDER_EXTRACT_DERIVATIVES:String = "MultipleOrderExtractDerivativesRequest";
        public static const PLACE_MULTIPLE_ORDER_EQUITY:String = "PlaceMultipleOrderEquityRequest";
        public static const PLACE_MULTIPLE_ORDER_DERIVATIVES:String = "PlaceMultipleOrderDerivativesRequest";
        public static const NOTIFICATION_STARTUP:String = "NotificationStartupRequest";
        public static const MARGIN_STOCK:String = "MarginStockRequest";
        public static const ANNOUNCEMENT:String = "AnnouncementRequest";
        public static const TISCO_SETTLEMENT_INFO:String = "TiscoSettlementInfoRequest";
        public static const TISCO_STOCK_INFO:String = "TiscoStockInfoRequest";
        public static const TISCO_VOL_FOCUS_LIST:String = "TiscoVolFocusListRequest";
        public static const DBSV_TECHNICAL_INSIGHT:String = "DBSVTechnicalInsightRequest";
        public static const DBSV_VALUE_ANALYZER:String = "DBSVValueAnalyzerRequest";
        public static const DBSV_SUPPORT_AND_RESISTANCE:String = "DBSVSupportAndResistanceRequest";
        public static const DBSV_START_DATE_END_DATE:String = "DBSVStartDateEndDateRequest";
        public static const DBSV_BULLISH_BEARISH_SPECIFIC_TAB:String = "DBSVBullishBearishSpecificTabRequest";

        public static var ALL:Vector.<String> = new Vector.<String>();
;

        public function MessageSendEvent(type:String, message:Message, bubbles:Boolean=false, cancelable:Boolean=false){
            super(type, message, bubbles, cancelable);
        }
        public static function isMessageSendEvent(type:String){
            var messageEventType:String;
            for each (messageEventType in ALL) {
                if (messageEventType == type){
                    return (true);
                };
            };
            return (false);
        }

        ALL.push(STUB);
        ALL.push(GENERATE_KEY, REGIST_KEY, MULTIPLE, ACCOUNT_LIST_EQUITY, SYNC_TIME, USER_CHECK, UPDATE_CONFIG, TEMPLATE, NEWS_INFORMATION, PAGE_STAT, MARGIN_STOCK, ANNOUNCEMENT);
        ALL.push(FAVOURITE_ADD, FAVOURITE_REMOVE, FAVOURITE_UPDATE, FAVOURITE_SWAP);
        ALL.push(MARKET_SUMMARY, MARKET_TICKER, INFO, INFO_STATISTIC, INFO_STATISTIC_CHART, INFO_ODDLOT, VOLUME_BY_PRICE, VOLUME_BY_PRICE_DETAIL, SNAPSHOT, INTRADAY_CHART, HISTORICAL_CHART, INSTRUMENT_LIST, NEWS, SET_CALENDAR, RESEARCH, ORDER_PUSH_CHECK);
        ALL.push(PLACE_ORDER_EQUITY, CANCEL_ORDER_EQUITY, ORDER_STATUS_EQUITY, PORTFOLIO_EQUITY, ACCOUNT_INFO_EQUITY, DEAL_SUMMARY_EQUITY, PLACE_ORDER_CONFIRM_EQUITY, ORDER_STATUS_PUSH, ORDER_STATUS_BY_NUMBER_EQUITY, HISTORICAL_BY_DATE);
        ALL.push(CHANGE_ORDER_EQUITY, CHANGE_ORDER_CONFIRM_EQUITY, CHANGE_ORDER_DERIVATIVES, CHANGE_ORDER_CONFIRM_DERIVATIVES);
        ALL.push(OPTIONS_EXPIRE_DATE, OPTIONS_RECOMMEND, OPTIONS_HISTORICAL_CHART, OPTIONS_COMMISSION, OPTIONS_INSTRUMENT_LIST, ACCOUNT_NAME, STATIC_DATA, OPTIONS_STRIKE_PRICE_LIST, INSTRUMENT_ID_VALIDATOR, OPTIONS_GREEK_VALUE, OPTIONS_GREEK_DEFAULT_VALUE);
        ALL.push(PLACE_ORDER_DERIVATIVES, ORDER_STATUS_DERIVATIVES, PLACE_ORDER_CONFIRM_DERIVATIVES, PORTFOLIO_DERIVATIVES, ACCOUNT_INFO_DERIVATIVES, DEAL_SUMMARY_DERIVATIVES, CANCEL_ORDER_DERIVATIVES, ORDER_STATUS_BY_NUMBER_DERIVATIVES, DEAL_SUMMARY_BY_INSTRUMENT_ID_DERIVATIVES, DEAL_SUMMARY_BY_PRICE_DERIVATIVES, OUTSTANDING_POSITION_DERIVATIVES, POSITION_CLOSING_DERIVATIVES, ORDER_STATUS_ALL_DERIVATIVES);
        ALL.push(OPPDAY_LIVE, OPPDAY_ARCHIVE, OPPDAY_SEARCH);
        ALL.push(ORDER_STATUS_SEARCH_EQUITY, ORDER_STATUS_SEARCH_DERIVATIVES, ACCOUNT_INFO_LONG_DERIVATIVES, ACCOUNT_INFO_LONG_EQUITY);
        ALL.push(SYMBOL_SELECTOR_TREE, SYMBOL_SELECTOR_OPTIONS, PIN_CHECK);
        ALL.push(BLOCK_TRADE, BLOCK_TRADE_INIT, BLOCK_TRADE_TRTYPE, BLOCK_TRADE_INFO);
        ALL.push(ACCOUNT_LIST_HIERACHY_DERIVATIVES);
        ALL.push(FAST_QUOTE_DERIVATIVES);
        ALL.push(MULTIPLE_ORDER_SORT_MARKETCAP_EQUITY, MULTIPLE_ORDER_CALCULATE_EQUITY, MULTIPLE_ORDER_GET_LAST_EQUITY, MULTIPLE_ORDER_GET_PERCENT_EQUITY, PLACE_MULTIPLE_ORDER_EQUITY, NOTIFICATION_STARTUP, MULTIPLE_ORDER_EXTRACT_EQUITY);
        ALL.push(MULTIPLE_ORDER_GET_LAST_DERIVATIVES, MULTIPLE_ORDER_EXTRACT_DERIVATIVES, PLACE_MULTIPLE_ORDER_DERIVATIVES);
        ALL.push(TISCO_SETTLEMENT_INFO, TISCO_STOCK_INFO, TISCO_VOL_FOCUS_LIST);
        ALL.push(DBSV_TECHNICAL_INSIGHT, DBSV_VALUE_ANALYZER, DBSV_SUPPORT_AND_RESISTANCE, DBSV_START_DATE_END_DATE, DBSV_BULLISH_BEARISH_SPECIFIC_TAB);
    }
}//package com.settrade.streaming5.event 
﻿package com.settrade.streaming5.event {
    import com.settrade.streaming5.message.*;
    import __AS3__.vec.*;

    public class MessageReceiveEvent extends MessageEvent {

        public static const STUB_RESPONSE:String = "StubResponseReceive";
        public static const STUB_FEED:String = "StubFeedReceive";
        public static const GENERATE_KEY:String = "GenerateKeyReceive";
        public static const MARKET_SUMMARY:String = "MarketSummaryReceive";
        public static const MARKET_TICKER:String = "MarketTickerReceive";
        public static const INSTRUMENT_TICKER:String = "InstrumentTickerReceive";
        public static const INSTRUMENT_TICKER_ODDLOT:String = "InstrumentTickerOddLotReceive";
        public static const SNAPSHOT:String = "SnapshotReceive";
        public static const VOLUME_BY_PRICE:String = "VolumeByPriceReceive";
        public static const VOLUME_BY_PRICE_DETAIL:String = "VolumeByPriceDetailReceive";
        public static const INFO:String = "InfoReceive";
        public static const INFO_STATISTIC:String = "InfoStatisticReceive";
        public static const INFO_STATISTIC_CHART:String = "InfoStatisticChartReceive";
        public static const INFO_ODDLOT:String = "InfoOddLotReceive";
        public static const INTRADAY_CHART:String = "IntradayChartReceive";
        public static const HISTORICAL_CHART:String = "HistoricalChartReceive";
        public static const HISTORICAL_BY_DATE:String = "HistoricalByDateReceive";
        public static const NEWS:String = "NewsReceive";
        public static const SET_CALENDAR:String = "SetCalendarReceive";
        public static const PLACE_ORDER_EQUITY:String = "PlaceOrderEquityReceive";
        public static const PLACE_ORDER_EQUITY_WARN:String = "PlaceOrderEquityWarnReceive";
        public static const CANCEL_ORDER_EQUITY:String = "CancelOrderEquityReceive";
        public static const ORDER_STATUS_EQUITY:String = "OrderStatusEquityReceive";
        public static const ORDER_STATUS_BY_NUMBER_EQUITY:String = "OrderStatusByNumberEquityReceive";
        public static const PORTFOLIO_EQUITY:String = "PortfolioEquityReceive";
        public static const ACCOUNT_INFO_EQUITY:String = "AccountInfoEquityReceive";
        public static const ACCOUNT_INFO_LONG_EQUITY:String = "AccountInfoLongEquityReceive";
        public static const DEAL_SUMMARY_EQUITY:String = "DealSummaryEquityReceive";
        public static const OPTIONS_EXPIRE_DATE:String = "OptionsExpireDateReceive";
        public static const OPTIONS_RECOMMEND:String = "OptionsRecommendReceive";
        public static const OPTIONS_COMMISSION:String = "OptionsCommssionReceive";
        public static const OPTIONS_HISTORICAL_CHART:String = "OptionsHistoricalChartReceive";
        public static const OPTIONS_STRIKE_PRICE_LIST:String = "OptionsStrikePriceList";
        public static const OPTIONS_GREEK_VALUE:String = "OptionsGreekValueReceive";
        public static const OPTIONS_GREEK_DEFAULT_VALUE:String = "OptionsGreekDefaultValueReceive";
        public static const PLACE_ORDER_DERIVATIVES:String = "PlaceOrderDerivativesReceive";
        public static const PLACE_ORDER_DERIVATIVES_WARN:String = "PlaceOrderDerivativesWarnReceive";
        public static const ORDER_STATUS_DERIVATIVES:String = "OrderStatusDerivativesReceive";
        public static const ORDER_STATUS_ALL_DERIVATIVES:String = "OrderStatusAllDerivativesReceive";
        public static const ORDER_STATUS_BY_NUMBER_DERIVATIVES:String = "OrderStatusByNumberDerivativesReceive";
        public static const PORTFOLIO_DERIVATIVES:String = "PortfolioDerivativesReceive";
        public static const ACCOUNT_INFO_DERIVATIVES:String = "AccountInfoDerivativesReceive";
        public static const ACCOUNT_INFO_LONG_DERIVATIVES:String = "AccountInfoLongDerivativesReceive";
        public static const DEAL_SUMMARY_DERIVATIVES:String = "DealSummaryDerivativesReceive";
        public static const DEAL_SUMMARY_BY_INSTRUMENT_ID_DERIVATIVES:String = "DealSummaryByInstrumentIdDerivativesReceive";
        public static const DEAL_SUMMARY_BY_PRICE_DERIVATIVES:String = "DealSummaryByPriceDerivativesReceive";
        public static const OUTSTANDING_POSITION_DERIVATIVES:String = "OutstandingPositionDerivativesReceive";
        public static const POSITION_CLOSING_DERIVATIVES:String = "PositionClosingDerivativesReceive";
        public static const CANCEL_ORDER_DERIVATIVES:String = "CancelOrderDerivativesReceive";
        public static const ORDER_STATUS_PUSH_DERIVATIVES:String = "OrderStatusPushDerivativesReceive";
        public static const ORDER_STATUS_PUSH_EQUITY:String = "OrderStatusPushEquityReceive";
        public static const ORDER_STATUS_PUSH_ALL_DERIVATIVES:String = "OrderStatusPushAllDerivativesReceive";
        public static const ORDER_STATUS_PUSH_ALL_EQUITY:String = "OrderStatusPushAllEquityReceive";
        public static const INSTRUMENT_LIST:String = "InstrumentListReceive";
        public static const OPTIONS_INSTRUMENT_LIST:String = "OptionsInstrumentListReceive";
        public static const ACCOUNT_NAME:String = "AccountNameReceive";
        public static const ACCOUNT_LIST_EQUITY:String = "AccountListEquityReceive";
        public static const FAVOURITE:String = "FavouriteReceive";
        public static const SYNC_TIME:String = "SyncTimeReceive";
        public static const USER_CHECK:String = "UserCheckReceive";
        public static const UNAUTHORIZE:String = "UnauthosrizeRecevie";
        public static const DISPATHCER_DOWN:String = "DispatcherDownReceive";
        public static const DISCONNECT:String = "DisconnectReceive";
        public static const ORDER_STATUS_PUSH_RESPONSE:String = "OrderStatusPushResponse";
        public static const STATIC_DATA:String = "StaticDataReceive";
        public static const PORTFOLIO_BY_ACCOUNT:String = "PortfolioByAccount";
        public static const ALL_PORTFOLIO_INSTRUMENT_LIST:String = "AllPortfolioInstrumentList";
        public static const DEAL_SUMMARY_BY_ACCOUNT:String = "DealSummaryByAccount";
        public static const ORDER_STATUS_CLICK:String = "OrderStatusClickReceive";
        public static const CHANGE_PRICE:String = "ChangePriceReceive";
        public static const NEWS_INFORMATION:String = "NewsInformationReceive";
        public static const RESEARCH:String = "ResearchReceive";
        public static const OPPDAY_LIVE:String = "OppdayLiveReceive";
        public static const OPPDAY_ARCHIVE:String = "OppdayArchiveReceive";
        public static const OPPDAY_SEARCH:String = "OppdaySearchReceive";
        public static const INSTRUMENT_ID_VALIDATOR:String = "InstrumentIdValidatorReceive";
        public static const ORDER_STATUS_SEARCH_EQUITY:String = "OrderStatusSearchEquityReceive";
        public static const ORDER_STATUS_SEARCH_DERIVATIVES:String = "OrderStatusSearchDerivativesReceive";
        public static const CHANGE_ORDER_EQUITY:String = "ChangeOrderEquityReceive";
        public static const CHANGE_ORDER_EQUITY_WARN:String = "ChangeOrderEquityWarnReceive";
        public static const CHANGE_ORDER_DERIVATIVES:String = "ChangeOrderDerivativesReceive";
        public static const CHANGE_ORDER_DERIVATIVES_WARN:String = "ChangeOrderDerivativesWarnReceive";
        public static const SYMBOL_SELECTOR_TREE:String = "SymbolSelectorTreeReceive";
        public static const SYMBOL_SELECTOR_OPTIONS:String = "SymbolSelectorOpstionsReceive";
        public static const BLOCK_TRADE:String = "BlockTradeReceive";
        public static const BLOCK_TRADE_WARN:String = "BlockTradeWarnReceive";
        public static const BLOCK_TRADE_INIT:String = "BlockTradeInitReceive";
        public static const BLOCK_TRADE_TRTYPE:String = "BlockTradeTrTypeReceive";
        public static const BLOCK_TRADE_INFO:String = "BlockTradeInfoReceive";
        public static const ACCOUNT_LIST_HIERACHY_DERIAVTIVES:String = "AccountListHeitachtDerivativesReceive";
        public static const ADMIN:String = "AdminReceive";
        public static const FAST_QUOTE_DERIVATIVES:String = "FastQuoteDerivativesReceive";
        public static const ORDER_PUSH_CHECK:String = "OrderPushCheckReceive";
        public static const PIN_CHECK:String = "PinCheckReceive";
        public static const MULTIPLE_ORDER_EQUITY:String = "MultipleOrderEquityReceive";
        public static const MULTIPLE_ORDER_WARN_EQUITY:String = "MultipleOrderWarnEquityReceive";
        public static const PLACE_MULTIPLE_ORDER_EQUITY:String = "PlaceMultipleOrderEquityReceive";
        public static const MULTIPLE_ORDER_GET_LAST_DERIVATIVES:String = "MultipleOrderGetLastDerivativesReceive";
        public static const MULTIPLE_ORDER_EXTRACT_DERIVATIVES:String = "MultipleOrderExtractDervativesReceive";
        public static const PLACE_MULTIPLE_ORDER_DERIVATIVES:String = "PlaceMultipleOrderDerivativesReceive";
        public static const MULTIPLE_ORDER_WARN_DERIVATIVES:String = "MultipleOrderWarnDerivativesReceive";
        public static const UPDATE_CONFIG:String = "UpdateConfigReceive";
        public static const TEMPLATE:String = "TemplateReceive";
        public static const MARGIN_STOCK:String = "MarginStockReceive";
        public static const ANNOUNCEMENT:String = "AnnouncementReceive";
        public static const TISCO_SETTLEMENT_INFO:String = "TiscoSettlementInfoReceive";
        public static const TISCO_STOCK_INFO:String = "TiscoStockInfoReceive";
        public static const TISCO_VOL_FOCUS_LIST:String = "TiscoVolFocusListReceive";
        public static const DBSV_TECHNICAL_INSIGHT:String = "DBSVTechnicalInsightReceive";
        public static const DBSV_VALUE_ANALYZER:String = "DBSVValueAnalyzerReceive";
        public static const DBSV_SUPPORT_AND_RESISTANCE:String = "DBSVSupportAndResistanceReceive";
        public static const DBSV_START_DATE_END_DATE:String = "DBSVStartDateEndDateReceive";
        public static const DBSV_BULLISH_BEARISH_SPECIFIC_TAB:String = "DBSVBullishBearishSpecificTabReceive";

        public static var ALL:Vector.<String> = new Vector.<String>();
;

        public function MessageReceiveEvent(type:String, message:Message, bubbles:Boolean=false, cancelable:Boolean=false){
            super(type, message, bubbles, cancelable);
        }
        public static function isMessageReceiveEvent(type:String){
            var messageEventType:String;
            for each (messageEventType in ALL) {
                if (messageEventType == type){
                    return (true);
                };
            };
            return (false);
        }

        ALL.push(STUB_RESPONSE, STUB_FEED);
        ALL.push(GENERATE_KEY, MARKET_SUMMARY, ACCOUNT_LIST_EQUITY, SYNC_TIME, USER_CHECK, UNAUTHORIZE, DISPATHCER_DOWN, NEWS_INFORMATION);
        ALL.push(FAVOURITE);
        ALL.push(MARKET_TICKER, INFO, INFO_STATISTIC, INFO_STATISTIC_CHART, INFO_ODDLOT, INSTRUMENT_TICKER, INSTRUMENT_TICKER_ODDLOT, VOLUME_BY_PRICE, VOLUME_BY_PRICE_DETAIL, SNAPSHOT, ORDER_STATUS_PUSH_DERIVATIVES, ORDER_STATUS_PUSH_EQUITY, INTRADAY_CHART, HISTORICAL_CHART, INSTRUMENT_LIST, DISCONNECT, ORDER_STATUS_PUSH_RESPONSE, NEWS, SET_CALENDAR, RESEARCH, HISTORICAL_BY_DATE, ORDER_STATUS_PUSH_ALL_EQUITY, ORDER_STATUS_PUSH_ALL_DERIVATIVES, ADMIN, ORDER_PUSH_CHECK);
        ALL.push(CHANGE_ORDER_EQUITY, CHANGE_ORDER_EQUITY_WARN, CHANGE_ORDER_DERIVATIVES, CHANGE_ORDER_DERIVATIVES_WARN);
        ALL.push(PLACE_ORDER_EQUITY, CANCEL_ORDER_EQUITY, PLACE_ORDER_EQUITY_WARN, ORDER_STATUS_EQUITY, PORTFOLIO_EQUITY, ACCOUNT_INFO_EQUITY, DEAL_SUMMARY_EQUITY, CANCEL_ORDER_EQUITY, ORDER_STATUS_BY_NUMBER_EQUITY);
        ALL.push(OPTIONS_EXPIRE_DATE, OPTIONS_RECOMMEND, OPTIONS_HISTORICAL_CHART, OPTIONS_COMMISSION, OPTIONS_INSTRUMENT_LIST, ACCOUNT_NAME, STATIC_DATA, OPTIONS_STRIKE_PRICE_LIST, INSTRUMENT_ID_VALIDATOR, OPTIONS_GREEK_VALUE, OPTIONS_GREEK_DEFAULT_VALUE);
        ALL.push(PLACE_ORDER_DERIVATIVES, ORDER_STATUS_DERIVATIVES, PLACE_ORDER_DERIVATIVES_WARN, PORTFOLIO_DERIVATIVES, ACCOUNT_INFO_DERIVATIVES, DEAL_SUMMARY_DERIVATIVES, CANCEL_ORDER_DERIVATIVES, ORDER_STATUS_BY_NUMBER_DERIVATIVES, DEAL_SUMMARY_BY_INSTRUMENT_ID_DERIVATIVES, DEAL_SUMMARY_BY_PRICE_DERIVATIVES, OUTSTANDING_POSITION_DERIVATIVES, POSITION_CLOSING_DERIVATIVES, ORDER_STATUS_ALL_DERIVATIVES);
        ALL.push(PORTFOLIO_BY_ACCOUNT, ALL_PORTFOLIO_INSTRUMENT_LIST, DEAL_SUMMARY_BY_ACCOUNT, ORDER_STATUS_CLICK, CHANGE_PRICE);
        ALL.push(OPPDAY_LIVE, OPPDAY_ARCHIVE, OPPDAY_SEARCH);
        ALL.push(ORDER_STATUS_SEARCH_EQUITY, ORDER_STATUS_SEARCH_DERIVATIVES, ACCOUNT_INFO_LONG_EQUITY, ACCOUNT_INFO_LONG_DERIVATIVES);
        ALL.push(SYMBOL_SELECTOR_TREE, SYMBOL_SELECTOR_OPTIONS, PIN_CHECK);
        ALL.push(BLOCK_TRADE, BLOCK_TRADE_WARN, BLOCK_TRADE_INIT, BLOCK_TRADE_TRTYPE, BLOCK_TRADE_INFO);
        ALL.push(ACCOUNT_LIST_HIERACHY_DERIAVTIVES);
        ALL.push(FAST_QUOTE_DERIVATIVES, UPDATE_CONFIG, TEMPLATE, MARGIN_STOCK, ANNOUNCEMENT);
        ALL.push(MULTIPLE_ORDER_EQUITY, PLACE_MULTIPLE_ORDER_EQUITY, MULTIPLE_ORDER_WARN_EQUITY);
        ALL.push(MULTIPLE_ORDER_GET_LAST_DERIVATIVES, MULTIPLE_ORDER_EXTRACT_DERIVATIVES, PLACE_MULTIPLE_ORDER_DERIVATIVES, MULTIPLE_ORDER_WARN_DERIVATIVES);
        ALL.push(TISCO_SETTLEMENT_INFO, TISCO_STOCK_INFO, TISCO_VOL_FOCUS_LIST);
        ALL.push(DBSV_TECHNICAL_INSIGHT, DBSV_VALUE_ANALYZER, DBSV_SUPPORT_AND_RESISTANCE, DBSV_START_DATE_END_DATE, DBSV_BULLISH_BEARISH_SPECIFIC_TAB);
    }
}//package com.settrade.streaming5.event 
﻿package com.settrade.streaming5.error {
    import com.settrade.streaming5.message.*;

    public class EventConvertError extends StreamingError {

        public function EventConvertError(message:Message){
            super(("Event not found for Message Type: " + message.type.toString()));
        }
    }
}//package com.settrade.streaming5.error 
﻿package com.settrade.streaming5.error {

    public class StreamingError extends Error {

        public function StreamingError(message="", id=0){
            super(message, id);
        }
    }
}//package com.settrade.streaming5.error 
﻿package com.settrade.streaming5.error {
    import com.settrade.streaming5.message.raw.*;

    public class InvalidMessageFormatError extends StreamingError {

        public function InvalidMessageFormatError(message:IRawMessage){
            super(("Invalid Message Format: " + message.messageFormat.toString()));
        }
    }
}//package com.settrade.streaming5.error 
﻿package com.settrade.streaming5.error {
    import com.settrade.streaming5.message.*;

    public class InvalidMessageSideError extends StreamingError {

        public function InvalidMessageSideError(message:IMessage){
            super(("Invalid Message Side: " + message.side.toString()));
        }
    }
}//package com.settrade.streaming5.error 
﻿package com.settrade.streaming5.error {
    import com.settrade.streaming5.message.raw.*;

    public class MessageParseError extends StreamingError {

        protected var _rawMessage:IRawMessage;

        public function MessageParseError(rawMessage:IRawMessage, reason:String){
            super(reason);
            this._rawMessage = rawMessage;
        }
        public function get rawMessage():IRawMessage{
            return (this._rawMessage);
        }

    }
}//package com.settrade.streaming5.error 
﻿package com.settrade.streaming5.error {
    import com.settrade.streaming5.message.*;

    public class InvalidMessageTypeError extends StreamingError {

        public function InvalidMessageTypeError(message:IMessage){
            super(("Invalid Message Type: " + message.type.toString()));
        }
    }
}//package com.settrade.streaming5.error 
﻿package com.settrade.streaming5.error {
    import com.settrade.streaming5.message.raw.response.*;

    public class StringResponseMessageParseError extends MessageParseError {

        public function StringResponseMessageParseError(message:StringResponseMessage){
            var reason:String = ("Cannot parse Data: " + message.data);
            super(message, reason);
        }
    }
}//package com.settrade.streaming5.error 
﻿package com.settrade.streaming5 {
    import fl.controls.*;
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.initializer.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.lab.initializer.*;
    import com.settrade.log.enumuration.*;
    import com.settrade.streaming5.datacomponent.parser.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.page.*;
    import com.settrade.streaming5.dispatcher.*;
    import flash.system.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.newtrading.service.*;
    import com.settrade.streaming5.newtrading.datacomponent.parser.*;
    import com.settrade.streaming5.message.control.*;
    import com.settrade.log.page.*;

    public class Streaming5 extends StreamingMovieClip {

        public var customizedPromotePopup:MovieClip;
        public var editorHolder:MovieClip;
        public var headerPage:HeaderPage;
        public var blocker:MovieClip;
        public var settingHolder:MovieClip;
        public var pageHolder:MovieClip;
        public var preload:PreloadPage;
        public var debugTrigger:MovieClip;
        public var blankButton:Button;
        protected var pageManager:PageManager;
        protected var logger:Logger;
        protected var logConsole:LogConsole;
        protected var logConsolePane:MovalblePane;
        protected var logViewer:LogViewer;
        protected var logViewerPane:MovalblePane;
        protected var objectViewer:ObjectViewer;
        protected var objectViewerPane:MovalblePane;
        protected var registerViewer:RegisterViewer;
        protected var registerViewerPane:MovalblePane;
        protected var customizeController:CustomizeController;
        protected var customizeControllerPane:MovalblePane;
        protected var themeManager:ThemeManager;
        var marketSumService:MarketSummaryService;
        var marketTickerService:MarketTickerService;
        var snapshotService:SnapshotService;
        var infoService:InfoService;
        var instrumentTickerService:InstrumentTickerService;
        var volumeByPriceService:VolumeByPriceService;
        var tmpReference:StreamingClassRefernce;
        var preLoader:Loader;
        var placeOrderPage = null;
        var isInitDebug:Boolean;
        var triggerCount:int = 0;

        public function Streaming5(){
            super();
            addFrameScript(0, this.frame1);
            if (this.root.loaderInfo.parameters["fvDebug"] == "T"){
                this.initialDebugPane();
            };
            this.logger = new Logger("root");
            stage.scaleMode = StageScaleMode.EXACT_FIT;
            stage.align = StageAlign.TOP;
            StreamingAttribute.screenType = ScreenTypeUtils.getScreenType(stage.stageWidth, stage.stageHeight);
            StreamingAttribute.widgetGridSize = ScreenTypeUtils.getScreenSize(stage.stageWidth, stage.stageHeight);
            DefaultWidgetPageProUtils.reInitPages();
            stage.addEventListener(Event.RESIZE, this.resizeHandler);
            this.debugTrigger.addEventListener(MouseEvent.CLICK, this.onDebugTriggerMouseClick);
            this.marketTickerService = MarketTickerService.getInstance();
            this.infoService = InfoService.getInstance();
            this.instrumentTickerService = InstrumentTickerService.getInstance();
            this.snapshotService = SnapshotService.getInstance();
            this.volumeByPriceService = VolumeByPriceService.getInstance();
            this.marketSumService = MarketSummaryService.getInstance();
            addEventListener(MessageControlEvent.INITIAL_STATUS, this.onInitialEvent);
            this.pageManager = PageManager.getInstance();
            this.preload.visible = false;
            this.preLoader = new Loader();
            this.preLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, this.onLoadPreloadComplete);
            this.preLoader.addEventListener("NO_PRELOADER", this.onNoPreloader);
            addChild(this.preLoader);
            FlashVarInitializer.getInstance().preloader = this.preLoader;
            this.initialize();
            this.__setProp_blankButton_Main_BlankButton_0();
        }
        private function initialDebugPane():void{
            if (!this.isInitDebug){
                this.isInitDebug = true;
                this.logConsole = new LogConsole();
                this.logConsole.priority = Priority.TRACE;
                this.logConsolePane = new MovalblePane("Console");
                this.logConsolePane.alpha = 1;
                this.logViewer = new LogViewer();
                this.logViewer.startService();
                this.logViewerPane = new MovalblePane("LogViewer");
                this.logViewerPane.alpha = 1;
                this.objectViewer = new ObjectViewer();
                this.objectViewerPane = new MovalblePane("ObjectViewer");
                this.objectViewerPane.alpha = 0.8;
                this.registerViewer = new RegisterViewer();
                this.registerViewerPane = new MovalblePane("RegisterViewer");
                this.registerViewerPane.alpha = 0.8;
                this.customizeController = new CustomizeController();
                this.customizeControllerPane = new MovalblePane("CustomizeController");
                this.customizeControllerPane.alpha = 0.8;
                this.registerViewerPane.loadContent(this.registerViewer);
                this.objectViewerPane.loadContent(this.objectViewer);
                this.logConsolePane.loadContent(this.logConsole);
                this.logViewerPane.loadContent(this.logViewer);
                this.customizeControllerPane.loadContent(this.customizeController);
                this.adjustPosition();
            };
            this.showDebugPane();
        }
        private function showDebugPane():void{
            this.addChild(this.registerViewerPane);
            this.addChild(this.objectViewerPane);
            this.addChild(this.logConsolePane);
            this.addChild(this.logViewerPane);
            this.addChild(this.customizeControllerPane);
            this.logConsole.startService();
            this.logViewer.startService();
            this.objectViewer.startService();
            this.registerViewer.startService();
            this.customizeController.startService();
        }
        protected function initialize():void{
            StreamingNumberFormatter.derivCostPrecision = 6;
            PlaceOrderDerivativesService.replaceInstance();
            OrderStatusSearchService.replaceInstance();
            MessageParserFactory.addOrReplaceMessageParser(MessageFormat.ORDER_DERIVATIVES, new OrderDerivativesMessageParser());
            MessageParserFactory.addOrReplaceMessageParser(MessageFormat.ORDER_AJAX_DERIVATIVES, new OrderAjaxDerivativesMessageParser());
            MessageParserFactory.addOrReplaceMessageParser(MessageFormat.BLOCK_TRADE, new BlockTradeMessageParser());
            this.logger.info("Initialize Streaming Gen 5");
            var initializer:StreamingInitailizer = StreamingInitailizer.getInstance();
            initializer.source = this;
            initializer.stage = this.stage;
            initializer.pageHolder = this.pageHolder;
            initializer.alertHolder = this;
            initializer.settingHolder = this.settingHolder;
            initializer.editorHolder = this.editorHolder;
            initializer.initialize();
        }
        function onLoadPreloadComplete(evt:Event):void{
            var target_mc:Loader = (evt.currentTarget.loader as Loader);
            target_mc.x = ((stage.stageWidth - 1260) / 2);
            target_mc.y = ((stage.stageHeight - 804) / 2);
        }
        function onNoPreloader(evt:Event):void{
            this.preload.visible = true;
        }
        private function onInitialEvent(e:MessageControlEvent):void{
            var pageId:* = null;
            var logoUrl:* = null;
            var e:* = e;
            var message:* = InitialStatusMessage(e.message);
            if (message.status.isMarketPage()){
                this.pageManager.refreshPage(this.pageHolder);
                this.preload.stop();
                this.removeChild(this.preload);
                this.removeChild(this.preLoader);
                this.removeChild(this.getChildByName("blocker"));
                if (this.root.loaderInfo.parameters["fvCustomField"] == "Lab"){
                    this.logger.info("StartLab");
                    LabInitializer.getInstance().root = this;
                    LabInitializer.getInstance().initialize();
                };
            } else {
                if (message.status.isPage()){
                    if (StreamingAttribute.applicationMode.isPro()){
                        pageId = WidgetProPageManager.getInstance().getPageConfigAtIndex(0).id;
                        this.pageManager.visiblePage(pageId);
                    } else {
                        this.pageManager.visiblePage(PageName.MARKET_WATCH);
                    };
                } else {
                    if (message.status.isFlashVar()){
                        if (StreamingAttribute.applicationMode.isPro()){
                            WidgetProPageManager.getInstance().headerPage = this.headerPage;
                            this.headerPage.initialHeaderPage(WidgetProPageManager.getInstance().getAllPageConfig());
                        } else {
                            if (StreamingAttribute.isChangeMajorVersion){
                                this.customizedPromotePopup.visible = true;
                                this.customizedPromotePopup.closeButton.addEventListener(MouseEvent.CLICK, function (){
                                    customizedPromotePopup.visible = false;
                                    removeChild(customizedPromotePopup);
                                });
                                this.customizedPromotePopup.closeButtonX.addEventListener(MouseEvent.CLICK, function (){
                                    customizedPromotePopup.visible = false;
                                    removeChild(customizedPromotePopup);
                                });
                                this.customizedPromotePopup.moreInfoThButton.addEventListener(MouseEvent.CLICK, function (){
                                    JavascriptInterface.openPopup("http://portal.settrade.com/StaticPage/products/manual/Manual_Settrade_Streaming_Customized.pdf");
                                });
                                this.customizedPromotePopup.moreInfoEnButton.addEventListener(MouseEvent.CLICK, function (){
                                    JavascriptInterface.openPopup("http://portal.settrade.com/StaticPage/products/manual/Manual_Settrade_Streaming_Customized.pdf");
                                });
                            };
                            if (PageName.customizedPageList.length > 0){
                                this.headerPage.initialHeaderPage(WidgetPageManager.customizedPageList);
                            } else {
                                this.headerPage.initialHeaderPage();
                            };
                        };
                        logoUrl = FlashVarInitializer.getInstance().logoUrl;
                        if (logoUrl != null){
                            this.headerPage.setLogo(logoUrl);
                        };
                        if (FlashVarInitializer.getInstance().needReloadTheme){
                            MessageDispatcher.getInstance().notifyControlMessage(new ThemeChangeMessage());
                        };
                    } else {
                        if (message.status.isStreaming()){
                            if (FlashVarInitializer.getInstance().needReloadTheme){
                                MessageDispatcher.getInstance().notifyControlMessage(new ThemeChangeMessage());
                            };
                            this.registMarketTickerPush();
                            this.headerPage.startService();
                            this.logger.info("Start Sync Time");
                            SyncTimeManager.getInstance().startService();
                        };
                    };
                };
            };
        }
        private function registMarketTickerPush():void{
            this.marketSumService.registMarketSummary(this);
        }
        public function resizeHandler(event:Event):void{
        }
        private function initialFrameRateBox():void{
            var box:* = null;
            box = new TextInput();
            box.x = 1000;
            box.text = "10";
            this.addChild(box);
            var btn:* = new Button();
            btn.x = 1100;
            btn.addEventListener(MouseEvent.CLICK, function (e:MouseEvent):void{
                stage.frameRate = int(box.text);
            });
            this.addChild(btn);
        }
        private function onDebugTriggerMouseClick(e:MouseEvent):void{
            this.triggerCount++;
            if (this.triggerCount >= 13){
                this.initialDebugPane();
            };
        }
        public function adjustPosition():void{
            var iWidth:* = stage.stageWidth;
            var iHegiht:* = stage.stageHeight;
            this.logConsolePane.x = 720;
            this.logConsolePane.y = 0;
            this.logConsolePane.width = 540;
            this.logConsolePane.height = 100;
            this.objectViewerPane.x = 720;
            this.objectViewerPane.y = 100;
            this.objectViewerPane.width = 540;
            this.objectViewerPane.height = 100;
            this.registerViewerPane.x = 720;
            this.registerViewerPane.y = 200;
            this.registerViewerPane.width = 540;
            this.registerViewerPane.height = 100;
            this.customizeControllerPane.x = 720;
            this.customizeControllerPane.y = 300;
            this.customizeControllerPane.width = 540;
            this.customizeControllerPane.height = 100;
            this.logViewerPane.x = 720;
            this.logViewerPane.y = 400;
            this.logViewerPane.width = 540;
            this.logViewerPane.height = 200;
            this.logViewer.setFontStyle(ThemeManager.defaultDropdownFont);
            this.objectViewer.setFontStyle(ThemeManager.defaultDropdownFont);
            this.registerViewer.setFontStyle(ThemeManager.defaultDropdownFont);
        }
        function __setProp_blankButton_Main_BlankButton_0(){
            try {
                this.blankButton["componentInspectorSetting"] = true;
            } catch(e:Error) {
            };
            this.blankButton.emphasized = false;
            this.blankButton.enabled = true;
            this.blankButton.label = "";
            this.blankButton.labelPlacement = "right";
            this.blankButton.selected = false;
            this.blankButton.toggle = false;
            this.blankButton.visible = true;
            try {
                this.blankButton["componentInspectorSetting"] = false;
            } catch(e:Error) {
            };
        }
        function frame1(){
            StreamingAttribute.buildTime = "Fri Apr 03 2015 09:36:00 GMT+0700 (SE Asia Standard Time)";
            stop();
        }

        System.useCodePage = true;
    }
}//package com.settrade.streaming5 
﻿package com.settrade.streaming5.config {
    import com.settrade.streaming5.enumuration.*;

    public class ApplicationModeConfig extends Config {

        public var applicationType:StreamingMode;

        public function ApplicationModeConfig(applicationType:StreamingMode=null){
            super(ConfigType.APPLICATION_MODE);
            if (applicationType == null){
                this.applicationType = StreamingMode.LITE;
            } else {
                this.applicationType = applicationType;
            };
        }
        public static function fromJsonObject(object:Object):ApplicationModeConfig{
            return (new ApplicationModeConfig(StreamingMode.lookUp(object.applicationType)));
        }

        override public function toJsonObject():Object{
            var object:Object = super.toJsonObject();
            object.applicationType = this.applicationType.value;
            return (object);
        }

    }
}//package com.settrade.streaming5.config 
﻿package com.settrade.streaming5.config {

    public class ShortcutAccount {

        public var key:String;
        public var account:String;

        public function ShortcutAccount(key:String, account:String){
            super();
            this.key = key;
            this.account = account;
        }
        public static function fromJsonObject(object:Object):ShortcutAccount{
            return (new ShortcutAccount(object.key, object.value));
        }

        public function toJsonObject():Object{
            var object:Object = new Object();
            object.key = this.key;
            object.value = this.account;
            return (object);
        }

    }
}//package com.settrade.streaming5.config 
﻿package com.settrade.streaming5.config {
    import com.settrade.streaming5.enumuration.*;

    public class ShortcutAccountConfig extends Config {

        public var shortCutList:Array;

        public function ShortcutAccountConfig(shortCutList:Array=null){
            super(ConfigType.SHORTCUT_ACCOUNT);
            if (shortCutList == null){
                this.shortCutList = new Array();
            } else {
                this.shortCutList = shortCutList;
            };
        }
        public static function fromJsonObject(object:Object):ShortcutAccountConfig{
            var shortcutAccountConfig:* = null;
            var subObj:* = null;
            var object:* = object;
            if (object == null){
                return (new (ShortcutAccountConfig)());
            };
            shortcutAccountConfig = new (ShortcutAccountConfig)();
            for each (subObj in object) {
                shortcutAccountConfig.add(ShortcutAccount.fromJsonObject(subObj));
            };
            return (shortcutAccountConfig);
            var _slot1:* = error;
            return (new (ShortcutAccountConfig)());
        }

        public function add(shortcutAccount:ShortcutAccount):void{
            this.shortCutList.push(shortcutAccount);
        }
        public function remove(index:int):void{
            this.shortCutList.splice(index, 1);
        }
        public function clear():void{
            this.shortCutList = new Array();
        }
        override public function toJsonObject():Object{
            var shortcutAccount:ShortcutAccount;
            var object:Object = super.toJsonObject();
            object.shortcut = new Array();
            for each (shortcutAccount in this.shortCutList) {
                object.shortcut.push(shortcutAccount.toJsonObject());
            };
            return (object);
        }

    }
}//package com.settrade.streaming5.config 
﻿package com.settrade.streaming5.config {
    import com.settrade.streaming5.enumuration.*;

    public class TemplateConfig extends Config {

        public var color:String;

        public function TemplateConfig(color:String=""){
            super(ConfigType.TEMPLATE);
            this.color = color;
        }
        public static function fromJsonObject(object:Object):TemplateConfig{
            return (new TemplateConfig(object.color));
        }

        override public function toJsonObject():Object{
            var object:Object = super.toJsonObject();
            object.color = this.color;
            return (object);
        }

    }
}//package com.settrade.streaming5.config 
﻿package com.settrade.streaming5.config {
    import com.settrade.streaming5.enumuration.*;

    public class LanguageChangeConfig extends Config {

        public var language:Language;

        public function LanguageChangeConfig(){
            super(ConfigType.LANGUAGE);
            this.language = Language.ENGLISH;
        }
        public static function fromJsonObject(object:Object):LanguageChangeConfig{
            var language:* = null;
            var langaugeConfig:* = null;
            var object:* = object;
            if (object == null){
                return (new (LanguageChangeConfig)());
            };
            language = Language.lookupFromFeed(String(object));
            langaugeConfig = new (LanguageChangeConfig)();
            langaugeConfig.language = language;
            return (langaugeConfig);
            var _slot1:* = error;
            return (new (LanguageChangeConfig)());
        }

        override public function toJsonObject():Object{
            var object:Object = super.toJsonObject();
            object.language = this.language.feedValue;
            return (object);
        }

    }
}//package com.settrade.streaming5.config 
﻿package com.settrade.streaming5.config {
    import com.settrade.streaming5.enumuration.*;

    public class DefaultAccountConfig extends Config {

        public var defaultMarket:System;
        public var defaultAccount:String;
        public var enableDefaultAccount:Boolean;

        public function DefaultAccountConfig(){
            super(ConfigType.DEFAULT_MARKET);
            this.defaultMarket = System.NO_SYSTEM;
            this.defaultAccount = "";
            this.enableDefaultAccount = false;
        }
        public static function fromJsonObject(object:Object):DefaultAccountConfig{
            var defaultAccountConfig:* = null;
            var object:* = object;
            if (object == null){
                return (new (DefaultAccountConfig)());
            };
            defaultAccountConfig = new (DefaultAccountConfig)();
            defaultAccountConfig.defaultMarket = (((object.defaultMarket == "D")) ? System.DERIV : System.EQUITY);
            defaultAccountConfig.defaultAccount = object.defaultAccount;
            defaultAccountConfig.enableDefaultAccount = Boolean(object.isEnableDefaultAccount);
            return (defaultAccountConfig);
            var _slot1:* = error;
            return (new (DefaultAccountConfig)());
        }

        override public function toJsonObject():Object{
            var object:Object = super.toJsonObject();
            object.defaultMarket = this.defaultMarket.feedName;
            object.defaultAccount = this.defaultAccount;
            object.isEnableDefaultAccount = this.enableDefaultAccount;
            return (object);
        }

    }
}//package com.settrade.streaming5.config 
﻿package com.settrade.streaming5.config {
    import com.settrade.streaming5.enumuration.*;

    public class PriceVolumeAlertConfig extends Config {

        public var isEnable:Boolean;
        public var isPopup:Boolean;
        public var isSound:Boolean;
        public var isNotify:Boolean;

        public function PriceVolumeAlertConfig(isEnable:Boolean=false, isPopup:Boolean=false, isSound:Boolean=false, isNotify:Boolean=false){
            super(ConfigType.PRICE_VOLUME_ALERT);
            this.isEnable = isEnable;
            this.isPopup = isPopup;
            this.isSound = isSound;
            this.isNotify = isNotify;
        }
        public static function fromJsonObject(object:Object):PriceVolumeAlertConfig{
            var object:* = object;
            if (object == null){
                return (new (PriceVolumeAlertConfig)());
            };
            return (new PriceVolumeAlertConfig(object.enable, object.popup, object.sound, object.notify));
            var _slot1:* = error;
            return (new (PriceVolumeAlertConfig)());
        }

        override public function toJsonObject():Object{
            var object:Object = super.toJsonObject();
            object.enable = this.isEnable;
            object.popup = this.isPopup;
            object.sound = this.isSound;
            object.notify = this.isNotify;
            return (object);
        }
        public function toString():String{
            return ((((((((("[PriceVolumeAlertConfig isEnable=" + this.isEnable) + " isPopup=") + this.isPopup) + " isSound=") + this.isSound) + " isNotify=") + this.isNotify) + "]"));
        }

    }
}//package com.settrade.streaming5.config 
﻿package com.settrade.streaming5.config {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.common.*;

    public class ScreenConfig extends Config {

        public var screenType:ScreenType;

        public function ScreenConfig(screenType:ScreenType=null, isPro:Boolean=false){
            super(ConfigType.SCREEN);
            if (((StreamingAttribute.applicationMode.isPro()) || (isPro))){
                _type = ConfigType.SCREEN_PRO;
            };
            this.screenType = screenType;
            if (this.screenType == null){
                screenType = ScreenType.AUTO;
            };
        }
        public static function fromJsonObject(object:Object):ScreenConfig{
            return (new ScreenConfig(ScreenType.lookup(object.screenType)));
        }

        override public function toJsonObject():Object{
            var object:Object = super.toJsonObject();
            object.screenType = this.screenType.value;
            return (object);
        }

    }
}//package com.settrade.streaming5.config 
﻿package com.settrade.streaming5.config {
    import com.settrade.streaming5.enumuration.*;

    public class OrderEntryConfig extends Config {

        public var isConfirmationPopup:Boolean;
        public var isAutoFillPrice:Boolean;
        public var isAutoNvdr:Boolean;
        public var isRememberLastOrder:Boolean;

        public function OrderEntryConfig(){
            super(ConfigType.ORDER_ENTRY);
            this.isConfirmationPopup = true;
            this.isAutoFillPrice = false;
            this.isAutoNvdr = false;
            this.isRememberLastOrder = false;
        }
        public static function fromJsonObject(object:Object):OrderEntryConfig{
            var orderEntry:* = null;
            var object:* = object;
            if (object == null){
                return (new (OrderEntryConfig)());
            };
            orderEntry = new (OrderEntryConfig)();
            orderEntry.isAutoNvdr = Boolean(object.nvdr);
            return (orderEntry);
            var _slot1:* = error;
            return (new (OrderEntryConfig)());
        }

        override public function toJsonObject():Object{
            var object:Object = super.toJsonObject();
            object.nvdr = this.isAutoNvdr;
            return (object);
        }

    }
}//package com.settrade.streaming5.config 
﻿package com.settrade.streaming5.config {
    import com.settrade.streaming5.enumuration.*;

    public class AutoPositionConfig extends Config {

        public var isEnable:Boolean;
        public var defaultPosition:DerivativesPosition;
        public var showAutoPositionDisclaimer:String;

        public function AutoPositionConfig(){
            super(ConfigType.AUTO_POSITION);
            this.isEnable = false;
            this.defaultPosition = DerivativesPosition.OPEN;
            this.showAutoPositionDisclaimer = "";
        }
        public static function fromJsonObject(object:Object):AutoPositionConfig{
            var isEnable:* = undefined;
            var defaultPosition:* = null;
            var showAutoPositionDisclaimer:* = null;
            var config:* = null;
            var object:* = object;
            if (object == null){
                return (new (AutoPositionConfig)());
            };
            isEnable = (object.enable == "T");
            defaultPosition = DerivativesPosition.lookupFromFeed(object.defaultPosition);
            showAutoPositionDisclaimer = object.showAutoPositionDisclaimer;
            config = new (AutoPositionConfig)();
            config.isEnable = isEnable;
            config.defaultPosition = defaultPosition;
            config.showAutoPositionDisclaimer = showAutoPositionDisclaimer;
            return (config);
            var _slot1:* = error;
            return (new (AutoPositionConfig)());
        }

        override public function toJsonObject():Object{
            var object:Object = super.toJsonObject();
            object.showAutoPositionDisclaimer = this.showAutoPositionDisclaimer;
            object.defaultPosition = this.defaultPosition.feedValue;
            return (object);
        }

    }
}//package com.settrade.streaming5.config 
﻿package com.settrade.streaming5.config {
    import com.settrade.streaming5.enumuration.*;

    public class NotificationLastViewConfig extends Config {

        public var time:Number;

        public function NotificationLastViewConfig(time:Number=NaN){
            super(ConfigType.NOTIFICATION_LAST_VIEW);
            this.time = time;
        }
        public static function fromJsonObject(object:Object):NotificationLastViewConfig{
            var object:* = object;
            if (object == null){
                return (new (NotificationLastViewConfig)());
            };
            return (new NotificationLastViewConfig(Number(object)));
            var _slot1:* = error;
            return (new (NotificationLastViewConfig)());
        }

    }
}//package com.settrade.streaming5.config 
﻿package com.settrade.streaming5.config {
    import com.settrade.streaming5.enumuration.*;

    public class Config implements IConfig {

        protected var _type:ConfigType;

        public function Config(type:ConfigType){
            super();
            this._type = type;
        }
        public function toJsonObject():Object{
            return (new Object());
        }
        public function toJsonString():String{
            return (JSON.stringify(this.toJsonObject()));
        }
        public function get type():ConfigType{
            return (this._type);
        }

    }
}//package com.settrade.streaming5.config 
﻿package com.settrade.streaming5.config {
    import com.settrade.streaming5.enumuration.*;

    public class PriceVolumeCondition {

        public var isEnable:Boolean;
        public var type:PriceVolumeAlertType;
        public var condition:PriceVolumeAlertConditionType;
        public var instrumentId:String;
        public var value:Number;

        public function PriceVolumeCondition(isEnable:Boolean, type:PriceVolumeAlertType, instrumentId:String, value:Number, condition:PriceVolumeAlertConditionType){
            super();
            this.isEnable = isEnable;
            this.type = type;
            this.instrumentId = instrumentId;
            this.value = value;
            this.condition = condition;
        }
        public static function fromJsonObject(object:Object):PriceVolumeCondition{
            return (new PriceVolumeCondition(object.enable, PriceVolumeAlertType.lookup(object.type), object.symbol, object.value, PriceVolumeAlertConditionType.lookup(object.condition)));
        }

        public function toJsonObject():Object{
            var object:Object = new Object();
            object.enable = this.isEnable;
            object.type = this.type.value;
            object.symbol = this.instrumentId;
            object.value = this.value;
            object.condition = this.condition.value;
            return (object);
        }
        public function toString():String{
            return ((((((((((("[PriceVolumeCondition isEnable=" + this.isEnable) + " type=") + this.type) + " condition=") + this.condition) + " instrumentId=") + this.instrumentId) + " value=") + this.value) + "]"));
        }

    }
}//package com.settrade.streaming5.config 
﻿package com.settrade.streaming5.config {
    import com.settrade.streaming5.enumuration.*;

    public class PriceVolumeConditionConfig extends Config {

        public var index:int;
        public var priceVolumeConditionList:Array;

        public function PriceVolumeConditionConfig(priceVolumeConditionList=null, index=-1){
            super(ConfigType.PRICE_VOLUME_CONDITION);
            this.index = index;
            if (priceVolumeConditionList == null){
                this.priceVolumeConditionList = new Array();
            } else {
                this.priceVolumeConditionList = priceVolumeConditionList;
            };
        }
        public static function fromJsonObject(object:Object):PriceVolumeConditionConfig{
            var priceVolumeConditionConfig:* = null;
            var subObj:* = null;
            var object:* = object;
            if (object == null){
                return (new (PriceVolumeConditionConfig)());
            };
            priceVolumeConditionConfig = new (PriceVolumeConditionConfig)();
            for each (subObj in object) {
                priceVolumeConditionConfig.add(PriceVolumeCondition.fromJsonObject(subObj));
            };
            return (priceVolumeConditionConfig);
            var _slot1:* = error;
            return (new (PriceVolumeConditionConfig)());
        }

        public function add(priceVolumeCondition:PriceVolumeCondition):void{
            this.priceVolumeConditionList.push(priceVolumeCondition);
        }
        public function remove(index:int):void{
            this.priceVolumeConditionList.splice(index, 1);
        }
        public function clear():void{
            this.priceVolumeConditionList = new Array();
        }
        public function getIndexObject(index:int):PriceVolumeConditionConfig{
            return (new PriceVolumeConditionConfig([this.priceVolumeConditionList[index]], index));
        }
        override public function toJsonObject():Object{
            var priceVolumeCondition:PriceVolumeCondition;
            var object:Object = new Object();
            object.index = this.index;
            object.condition = new Array();
            for each (priceVolumeCondition in this.priceVolumeConditionList) {
                object.condition.push(priceVolumeCondition.toJsonObject());
            };
            return (object);
        }
        public function toString():String{
            return ((((("[PriceVolumeConditionConfig index=" + this.index) + " priceVolumeConditionList=") + this.priceVolumeConditionList) + "]"));
        }

    }
}//package com.settrade.streaming5.config 
﻿package com.settrade.streaming5.config {
    import com.settrade.streaming5.enumuration.*;

    public interface IConfig {

        function get type():ConfigType;
        function toJsonObject():Object;
        function toJsonString():String;

    }
}//package com.settrade.streaming5.config 
﻿package com.settrade.streaming5.config {
    import com.settrade.streaming5.enumuration.*;

    public class OrderAlertConfig extends Config {

        public var isEnable:Boolean;
        public var isPopup:Boolean;
        public var isSound:Boolean;
        public var isNotify:Boolean;

        public function OrderAlertConfig(isEnable:Boolean=false, isPopup:Boolean=false, isSound:Boolean=false, isNotify:Boolean=false){
            super(ConfigType.ORDER_ALERT);
            this.isEnable = isEnable;
            this.isPopup = isPopup;
            this.isSound = isSound;
            this.isNotify = isNotify;
        }
        public static function fromJsonObject(object:Object):OrderAlertConfig{
            var object:* = object;
            if (object == null){
                return (new (OrderAlertConfig)());
            };
            return (new OrderAlertConfig(object.enable, object.popup, object.sound, object.notify));
            var _slot1:* = error;
            return (new (OrderAlertConfig)());
        }

        override public function toJsonObject():Object{
            var object:Object = super.toJsonObject();
            object.enable = this.isEnable;
            object.popup = this.isPopup;
            object.sound = this.isSound;
            object.notify = this.isNotify;
            return (object);
        }
        public function toString():String{
            return ((((((((("[OrderAlertConfig isEnable=" + this.isEnable) + " isPopup=") + this.isPopup) + " isSound=") + this.isSound) + " isNotify=") + this.isNotify) + "]"));
        }

    }
}//package com.settrade.streaming5.config 
﻿package com.settrade.streaming5.config {
    import com.settrade.streaming5.enumuration.*;

    public class PasswordPinConfig extends Config {

        public var isSavePin:Boolean;
        public var isSaveFiveMinute:Boolean;
        public var pin:String;

        public function PasswordPinConfig(isSavePin:Boolean=false, isSaveFiveMinute:Boolean=true, pin:String=""){
            super(ConfigType.PASSWORD_PIN);
            this.isSavePin = isSavePin;
            this.isSaveFiveMinute = isSaveFiveMinute;
            this.pin = pin;
        }
    }
}//package com.settrade.streaming5.config 
﻿package com.settrade.streaming5.config.generic {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.config.*;

    public class VersionConfig extends Config {

        public var version:String;

        public function VersionConfig(){
            super(ConfigType.GENERIC_VERSION);
            this.version = "5.0.0";
        }
        public static function fromJsonObject(object:Object):VersionConfig{
            var versionConfig:* = null;
            var object:* = object;
            if (object == null){
                return (new (VersionConfig)());
            };
            versionConfig = new (VersionConfig)();
            versionConfig.version = object.version;
            return (versionConfig);
            var _slot1:* = error;
            return (new (VersionConfig)());
        }

        override public function toJsonObject():Object{
            var object:Object = super.toJsonObject();
            object.version = this.version;
            return (object);
        }

    }
}//package com.settrade.streaming5.config.generic 
﻿package com.settrade.streaming5.config.generic {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.config.*;
    import com.settrade.log.logger.*;

    public class GenericConfig extends Config {

        private static var logger:Logger = new Logger(prototype.constructor);

        protected var _jsonObject:Object;

        public function GenericConfig(){
            super(ConfigType.GENERIC_STRING);
        }
        public static function fromJsonObject(object:Object):GenericConfig{
            var genericConfig:* = null;
            var object:* = object;
            if (object == null){
                logger.trace("generic is null");
                return (new (GenericConfig)());
            };
            genericConfig = new (GenericConfig)();
            genericConfig.jsonObject = object;
            logger.trace("create generic");
            return (genericConfig);
            var _slot1:* = error;
            logger.trace(("generic is error " + _slot1.message));
            return (new (GenericConfig)());
        }

        override public function toJsonObject():Object{
            var object:Object = super.toJsonObject();
            object.custom = this.jsonObject;
            return (object);
        }
        public function get jsonObject():Object{
            return (this._jsonObject);
        }
        public function set jsonObject(value:Object):void{
            this._jsonObject = value;
        }

    }
}//package com.settrade.streaming5.config.generic 
﻿package com.settrade.streaming5.config.generic {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.config.*;

    public class QualityConfig extends Config {

        public var frameRate:int;

        public function QualityConfig(){
            super(ConfigType.GENERIC_QUALITY);
            this.frameRate = 24;
        }
        public static function fromJsonObject(object:Object):QualityConfig{
            var qualityConfig:* = null;
            var object:* = object;
            if (object == null){
                return (new (QualityConfig)());
            };
            qualityConfig = new (QualityConfig)();
            qualityConfig.frameRate = object.frameRate;
            return (qualityConfig);
            var _slot1:* = error;
            return (new (QualityConfig)());
        }

        override public function toJsonObject():Object{
            var object:Object = super.toJsonObject();
            object.frameRate = this.frameRate;
            return (object);
        }

    }
}//package com.settrade.streaming5.config.generic 
﻿package com.settrade.streaming5.config.generic {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.config.*;

    public class DisplayTextConfig extends Config {

        protected var _gainerColor:int;
        protected var _unchangeColor:int;
        protected var _loserColor:int;
        protected var _buyColor:int;
        protected var _sellColor:int;
        protected var _fontSize:int;

        public function DisplayTextConfig(){
            super(ConfigType.GENERIC_DISPLAY_TEXT);
            this.restoreToDefault();
        }
        public static function fromJsonObject(object:Object):DisplayTextConfig{
            var colorSchemeConfig:* = null;
            var object:* = object;
            if (object == null){
                return (new (DisplayTextConfig)());
            };
            colorSchemeConfig = new (DisplayTextConfig)();
            colorSchemeConfig.gainerColor = object.gainerColor;
            colorSchemeConfig.unchangeColor = object.unchangeColor;
            colorSchemeConfig.loserColor = object.loserColor;
            colorSchemeConfig.buyColor = object.buyColor;
            colorSchemeConfig.sellColor = object.sellColor;
            colorSchemeConfig.fontSize = object.fontSize;
            return (colorSchemeConfig);
            var _slot1:* = error;
            return (new (DisplayTextConfig)());
        }

        public function restoreToDefault():void{
            this._gainerColor = 0x2CAE00;
            this._unchangeColor = 14335047;
            this._loserColor = 15801115;
            this._buyColor = 1947104;
            this._sellColor = 14228683;
            this._fontSize = 15;
        }
        override public function toJsonObject():Object{
            var object:Object = super.toJsonObject();
            object.gainerColor = this._gainerColor;
            object.unchangeColor = this._unchangeColor;
            object.loserColor = this._loserColor;
            object.buyColor = this._buyColor;
            object.sellColor = this._sellColor;
            object.fontSize = this._fontSize;
            return (object);
        }
        public function get gainerColor():int{
            return (this._gainerColor);
        }
        public function set gainerColor(value:int):void{
            this._gainerColor = value;
        }
        public function get unchangeColor():int{
            return (this._unchangeColor);
        }
        public function set unchangeColor(value:int):void{
            this._unchangeColor = value;
        }
        public function get loserColor():int{
            return (this._loserColor);
        }
        public function set loserColor(value:int):void{
            this._loserColor = value;
        }
        public function get buyColor():int{
            return (this._buyColor);
        }
        public function set buyColor(value:int):void{
            this._buyColor = value;
        }
        public function get sellColor():int{
            return (this._sellColor);
        }
        public function set sellColor(value:int):void{
            this._sellColor = value;
        }
        public function get fontSize():int{
            return (this._fontSize);
        }
        public function set fontSize(value:int):void{
            this._fontSize = value;
        }

    }
}//package com.settrade.streaming5.config.generic 
﻿package com.settrade.streaming5.config {
    import com.settrade.streaming5.enumuration.*;

    public class ShortcutInstrumentIdConfig extends Config {

        public var shortCutList:Array;

        public function ShortcutInstrumentIdConfig(shortCutList:Array=null){
            super(ConfigType.SHORTCUT_SYMBOL);
            if (shortCutList == null){
                this.shortCutList = new Array();
            } else {
                this.shortCutList = shortCutList;
            };
        }
        public static function fromJsonObject(object:Object):ShortcutInstrumentIdConfig{
            var shortcutInstrumentIdConfig:* = null;
            var subObj:* = null;
            var object:* = object;
            if (object == null){
                return (new (ShortcutInstrumentIdConfig)());
            };
            shortcutInstrumentIdConfig = new (ShortcutInstrumentIdConfig)();
            for each (subObj in object) {
                shortcutInstrumentIdConfig.add(ShortcutInstrumentId.fromJsonObject(subObj));
            };
            return (shortcutInstrumentIdConfig);
            var _slot1:* = error;
            return (new (ShortcutInstrumentIdConfig)());
        }

        public function add(shortcutInstrumentId:ShortcutInstrumentId):void{
            this.shortCutList.push(shortcutInstrumentId);
        }
        public function remove(index:int):void{
            this.shortCutList.splice(index, 1);
        }
        public function clear():void{
            this.shortCutList = new Array();
        }
        override public function toJsonObject():Object{
            var shortcutInstrumentId:ShortcutInstrumentId;
            var object:Object = super.toJsonObject();
            object.shortcut = new Array();
            for each (shortcutInstrumentId in this.shortCutList) {
                object.shortcut.push(shortcutInstrumentId.toJsonObject());
            };
            return (object);
        }

    }
}//package com.settrade.streaming5.config 
﻿package com.settrade.streaming5.config {

    public class ShortcutInstrumentId {

        public var key:String;
        public var instrumentId:String;

        public function ShortcutInstrumentId(key:String, instrumentId:String){
            super();
            this.key = key;
            this.instrumentId = instrumentId;
        }
        public static function fromJsonObject(object:Object):ShortcutInstrumentId{
            return (new ShortcutInstrumentId(object.key, object.value));
        }

        public function toJsonObject():Object{
            var object:Object = new Object();
            object.key = this.key;
            object.value = this.instrumentId;
            return (object);
        }

    }
}//package com.settrade.streaming5.config 
﻿package com.settrade.streaming5.config {
    import com.settrade.streaming5.enumuration.*;

    public class NotifyListConfig extends Config {

        public var announcement:Boolean;
        public var news:Boolean;
        public var newsFavouriteListIndex:int;
        public var research:Boolean;
        public var order:Boolean;
        public var priceVolume:Boolean;

        public function NotifyListConfig(announcement:Boolean=false, news:Boolean=false, research:Boolean=false, order:Boolean=false, priceVolume:Boolean=false, newsFavouriteListIndex:int=0){
            super(ConfigType.NOTIFY_LIST);
            this.announcement = announcement;
            this.news = news;
            this.research = research;
            this.order = order;
            this.priceVolume = priceVolume;
            this.newsFavouriteListIndex = newsFavouriteListIndex;
        }
        public static function fromJsonObject(object:Object):NotifyListConfig{
            var object:* = object;
            if (object == null){
                return (new (NotifyListConfig)());
            };
            return (new NotifyListConfig(object.announcement, object.news, object.research, object.order, object.priceVol, object.newsFavIdx));
            var _slot1:* = error;
            return (new (NotifyListConfig)());
        }

        override public function toJsonObject():Object{
            var object:Object = super.toJsonObject();
            object.announcement = this.announcement;
            object.news = this.news;
            object.research = this.research;
            object.order = this.order;
            object.priceVol = this.priceVolume;
            object.newsFavIdx = this.newsFavouriteListIndex;
            return (object);
        }
        public function toString():String{
            return ((((((((((((("[NotifyListConfig announcement=" + this.announcement) + " news=") + this.news) + " newsFavouriteListIndex=") + this.newsFavouriteListIndex) + " research=") + this.research) + " order=") + this.order) + " priceVolume=") + this.priceVolume) + "]"));
        }

    }
}//package com.settrade.streaming5.config 
﻿package com.settrade.streaming5.config {
    import com.settrade.streaming5.enumuration.*;

    public class AutoAdjustSizeConfig extends Config {

        public var isEnable:Boolean;

        public function AutoAdjustSizeConfig(isEnable:Boolean=false){
            super(ConfigType.AUTO_ADJUST_SIZE);
            this.isEnable = isEnable;
        }
        public static function fromJsonObject(object:Object):AutoAdjustSizeConfig{
            return (new AutoAdjustSizeConfig(Boolean(object)));
        }

        override public function toJsonObject():Object{
            var object:Object = super.toJsonObject();
            object.autoAdjustType = this.isEnable;
            return (object);
        }

    }
}//package com.settrade.streaming5.config 
﻿package com.settrade.streaming5.dispatcher {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.event.*;
    import flash.utils.*;
    import com.settrade.streaming5.error.*;

    public class MessageEventFactory {

        private static var messageReceiveEventMap:Dictionary = new Dictionary();
        private static var messageSendEventMap:Dictionary = new Dictionary();
        public static var messageControlEventMap:Dictionary = new Dictionary();

        public static function getRecieveMessageEvent(message:Message):MessageReceiveEvent{
            var event:MessageReceiveEvent;
            var eventName:String = messageReceiveEventMap[message.type];
            if (eventName != null){
                event = new MessageReceiveEvent(eventName, message);
                return (event);
            };
            throw (new EventConvertError(message));
        }
        public static function getSendMessageEvent(message:Message):MessageSendEvent{
            var event:MessageSendEvent;
            var eventName:String = messageSendEventMap[message.type];
            if (eventName != null){
                event = new MessageSendEvent(eventName, message);
                return (event);
            };
            throw (new EventConvertError(message));
        }
        public static function getControlMessageEvent(message:Message):MessageControlEvent{
            var event:MessageControlEvent;
            var eventName:String = messageControlEventMap[message.type];
            if (eventName != null){
                event = new MessageControlEvent(eventName, message);
                return (event);
            };
            throw (new EventConvertError(message));
        }

        messageReceiveEventMap[MessageType.STUB_RESPONSE] = MessageReceiveEvent.STUB_RESPONSE;
        messageReceiveEventMap[MessageType.STUB_FEED] = MessageReceiveEvent.STUB_FEED;
        messageReceiveEventMap[MessageType.GENERATE_KEY_RESPONSE] = MessageReceiveEvent.GENERATE_KEY;
        messageReceiveEventMap[MessageType.MARKET_SUMMARY_FEED] = MessageReceiveEvent.MARKET_SUMMARY;
        messageReceiveEventMap[MessageType.MARKET_TICKER_FEED] = MessageReceiveEvent.MARKET_TICKER;
        messageReceiveEventMap[MessageType.INSTRUMENT_TICKER_FEED] = MessageReceiveEvent.INSTRUMENT_TICKER;
        messageReceiveEventMap[MessageType.INSTRUMENT_TICKER_ODDLOT_FEED] = MessageReceiveEvent.INSTRUMENT_TICKER_ODDLOT;
        messageReceiveEventMap[MessageType.INFO_FEED] = MessageReceiveEvent.INFO;
        messageReceiveEventMap[MessageType.INFO_STATISTIC_FEED] = MessageReceiveEvent.INFO_STATISTIC;
        messageReceiveEventMap[MessageType.INFO_STATISTIC_CHART_FEED] = MessageReceiveEvent.INFO_STATISTIC_CHART;
        messageReceiveEventMap[MessageType.INFO_ODDLOT_FEED] = MessageReceiveEvent.INFO_ODDLOT;
        messageReceiveEventMap[MessageType.SNAPSHOT_FEED] = MessageReceiveEvent.SNAPSHOT;
        messageReceiveEventMap[MessageType.VOLUME_BY_PRICE_RESPONSE] = MessageReceiveEvent.VOLUME_BY_PRICE;
        messageReceiveEventMap[MessageType.VOLUME_BY_PRICE_DETAIL_RESPONSE] = MessageReceiveEvent.VOLUME_BY_PRICE_DETAIL;
        messageReceiveEventMap[MessageType.PLACE_ORDER_EQUITY_RESPONSE] = MessageReceiveEvent.PLACE_ORDER_EQUITY;
        messageReceiveEventMap[MessageType.PLACE_ORDER_EQUITY_WARN_RESPONSE] = MessageReceiveEvent.PLACE_ORDER_EQUITY_WARN;
        messageReceiveEventMap[MessageType.CANCEL_ORDER_EQUITY_RESPONSE] = MessageReceiveEvent.CANCEL_ORDER_EQUITY;
        messageReceiveEventMap[MessageType.EXPIRE_DATE_RESPONSE] = MessageReceiveEvent.OPTIONS_EXPIRE_DATE;
        messageReceiveEventMap[MessageType.OPTIONS_RECOMMEND_RESPONSE] = MessageReceiveEvent.OPTIONS_RECOMMEND;
        messageReceiveEventMap[MessageType.OPTIONS_HISTORICAL_CHART_RESPONSE] = MessageReceiveEvent.OPTIONS_HISTORICAL_CHART;
        messageReceiveEventMap[MessageType.PLACE_ORDER_DERIVATIVES_RESPONSE] = MessageReceiveEvent.PLACE_ORDER_DERIVATIVES;
        messageReceiveEventMap[MessageType.PLACE_ORDER_DERIVATIVES_WARN_RESPONSE] = MessageReceiveEvent.PLACE_ORDER_DERIVATIVES_WARN;
        messageReceiveEventMap[MessageType.ORDER_STATUS_DERIVATIVES_RESPONSE] = MessageReceiveEvent.ORDER_STATUS_DERIVATIVES;
        messageReceiveEventMap[MessageType.PORTFOLIO_DERIVATIVES_RESPONSE] = MessageReceiveEvent.PORTFOLIO_DERIVATIVES;
        messageReceiveEventMap[MessageType.ACCOUNT_INFO_DERIVATIVES_RESPONSE] = MessageReceiveEvent.ACCOUNT_INFO_DERIVATIVES;
        messageReceiveEventMap[MessageType.DEAL_SUMMARY_DERIVATIVES_RESPONSE] = MessageReceiveEvent.DEAL_SUMMARY_DERIVATIVES;
        messageReceiveEventMap[MessageType.DEAL_SUMMARY_DERIVATIVES_BY_INSTRUMENT_ID_RESPONSE] = MessageReceiveEvent.DEAL_SUMMARY_BY_INSTRUMENT_ID_DERIVATIVES;
        messageReceiveEventMap[MessageType.DEAL_SUMMARY_DERIVATIVES_BY_PRICE_RESPONSE] = MessageReceiveEvent.DEAL_SUMMARY_BY_PRICE_DERIVATIVES;
        messageReceiveEventMap[MessageType.CANCEL_ORDER_DERIVATIVES_RESPONSE] = MessageReceiveEvent.CANCEL_ORDER_DERIVATIVES;
        messageReceiveEventMap[MessageType.ORDER_STATUS_DERIVATIVES_FEED] = MessageReceiveEvent.ORDER_STATUS_PUSH_DERIVATIVES;
        messageReceiveEventMap[MessageType.OPTIONS_COMMISSION_RESPONSE] = MessageReceiveEvent.OPTIONS_COMMISSION;
        messageReceiveEventMap[MessageType.INTRADAY_CHART_RESPONSE] = MessageReceiveEvent.INTRADAY_CHART;
        messageReceiveEventMap[MessageType.OPTIONS_STRIKE_PRICE_LIST_RESPONE] = MessageReceiveEvent.OPTIONS_STRIKE_PRICE_LIST;
        messageReceiveEventMap[MessageType.OPTIONS_GREEK_VALUE_RESPONSE] = MessageReceiveEvent.OPTIONS_GREEK_VALUE;
        messageReceiveEventMap[MessageType.OPTIONS_GREEK_DEFAULT_VALUE_RESPONSE] = MessageReceiveEvent.OPTIONS_GREEK_DEFAULT_VALUE;
        messageReceiveEventMap[MessageType.OPTIONS_EXPIRE_DATE_RESPONSE] = MessageReceiveEvent.OPTIONS_EXPIRE_DATE;
        messageReceiveEventMap[MessageType.HISTORICAL_CHART_RESPONSE] = MessageReceiveEvent.HISTORICAL_CHART;
        messageReceiveEventMap[MessageType.NEWS_RESPONSE] = MessageReceiveEvent.NEWS;
        messageReceiveEventMap[MessageType.INSTRUMENT_LIST_RESPONSE] = MessageReceiveEvent.INSTRUMENT_LIST;
        messageReceiveEventMap[MessageType.OPTIONS_INSTRUMENT_LIST_RESPONSE] = MessageReceiveEvent.OPTIONS_INSTRUMENT_LIST;
        messageReceiveEventMap[MessageType.ACCOUNT_NAME_RESPONSE] = MessageReceiveEvent.ACCOUNT_NAME;
        messageReceiveEventMap[MessageType.ORDER_STATUS_EQUITY_FEED] = MessageReceiveEvent.ORDER_STATUS_PUSH_EQUITY;
        messageReceiveEventMap[MessageType.ORDER_STATUS_EQUITY_RESPONSE] = MessageReceiveEvent.ORDER_STATUS_EQUITY;
        messageReceiveEventMap[MessageType.PORTFOLIO_EQUITY_RESPONSE] = MessageReceiveEvent.PORTFOLIO_EQUITY;
        messageReceiveEventMap[MessageType.ACCOUNT_INFO_EQUITY_RESPONSE] = MessageReceiveEvent.ACCOUNT_INFO_EQUITY;
        messageReceiveEventMap[MessageType.DEAL_SUMMARY_EQUITY_RESPONSE] = MessageReceiveEvent.DEAL_SUMMARY_EQUITY;
        messageReceiveEventMap[MessageType.CANCEL_ORDER_EQUITY_RESPONSE] = MessageReceiveEvent.CANCEL_ORDER_EQUITY;
        messageReceiveEventMap[MessageType.ACCOUNT_LIST_EQUITY_RESPONSE] = MessageReceiveEvent.ACCOUNT_LIST_EQUITY;
        messageReceiveEventMap[MessageType.ACCOUNT_LIST_MARKETREP_EQUITY_RESPONSE] = MessageReceiveEvent.ACCOUNT_LIST_EQUITY;
        messageReceiveEventMap[MessageType.FAVOURITE_RESPONSE] = MessageReceiveEvent.FAVOURITE;
        messageReceiveEventMap[MessageType.SYNC_TIME_RESPONSE] = MessageReceiveEvent.SYNC_TIME;
        messageReceiveEventMap[MessageType.USER_CHECK_RESPONSE] = MessageReceiveEvent.USER_CHECK;
        messageReceiveEventMap[MessageType.UNAUTHORIZE_RESPONSE] = MessageReceiveEvent.UNAUTHORIZE;
        messageReceiveEventMap[MessageType.DISPATHCER_DOWN_RESPONSE] = MessageReceiveEvent.DISPATHCER_DOWN;
        messageReceiveEventMap[MessageType.DISCONNECT_FEED] = MessageReceiveEvent.DISCONNECT;
        messageReceiveEventMap[MessageType.ORDER_STATUS_PUSH_RESPONSE] = MessageReceiveEvent.ORDER_STATUS_PUSH_RESPONSE;
        messageReceiveEventMap[MessageType.STATIC_DATA_RESPONSE] = MessageReceiveEvent.STATIC_DATA;
        messageReceiveEventMap[MessageType.PORTFOLIO_BY_ACCOUNT_RESPONSE] = MessageReceiveEvent.PORTFOLIO_BY_ACCOUNT;
        messageReceiveEventMap[MessageType.ALL_PORTFOILIO_INSTRUMENT_LIST_RESPONSE] = MessageReceiveEvent.ALL_PORTFOLIO_INSTRUMENT_LIST;
        messageReceiveEventMap[MessageType.DEAL_SUMMARY_BY_ACCOUNT_RESPONSE] = MessageReceiveEvent.DEAL_SUMMARY_BY_ACCOUNT;
        messageReceiveEventMap[MessageType.ORDER_STATUS_CLICK_RESPONSE] = MessageReceiveEvent.ORDER_STATUS_CLICK;
        messageReceiveEventMap[MessageType.ORDER_STATUS_BY_NUMBER_EQUITY_RESPONSE] = MessageReceiveEvent.ORDER_STATUS_BY_NUMBER_EQUITY;
        messageReceiveEventMap[MessageType.ORDER_STATUS_BY_NUMBER_DERIVAITVES_RESPONSE] = MessageReceiveEvent.ORDER_STATUS_BY_NUMBER_DERIVATIVES;
        messageReceiveEventMap[MessageType.CHANGE_ORDER_PRICE_RESPONSE] = MessageReceiveEvent.CHANGE_PRICE;
        messageReceiveEventMap[MessageType.NEWS_INFORMATION_RESPONSE] = MessageReceiveEvent.NEWS_INFORMATION;
        messageReceiveEventMap[MessageType.SET_CALENDAR_RESPONSE] = MessageReceiveEvent.SET_CALENDAR;
        messageReceiveEventMap[MessageType.RESEARCH_RESPONSE] = MessageReceiveEvent.RESEARCH;
        messageReceiveEventMap[MessageType.OPPDAY_ARCHIVE_RESPONSE] = MessageReceiveEvent.OPPDAY_ARCHIVE;
        messageReceiveEventMap[MessageType.OPPDAY_LIVE_RESPONSE] = MessageReceiveEvent.OPPDAY_LIVE;
        messageReceiveEventMap[MessageType.OPPDAY_SEARCH_RESPONSE] = MessageReceiveEvent.OPPDAY_SEARCH;
        messageReceiveEventMap[MessageType.INSTRUMENT_ID_VALIDATOR_RESPONSE] = MessageReceiveEvent.INSTRUMENT_ID_VALIDATOR;
        messageReceiveEventMap[MessageType.HISTORICAL_BY_DATE_RESPONSE] = MessageReceiveEvent.HISTORICAL_BY_DATE;
        messageReceiveEventMap[MessageType.ORDER_STATUS_SEARCH_EQUITY_RESPONSE] = MessageReceiveEvent.ORDER_STATUS_SEARCH_EQUITY;
        messageReceiveEventMap[MessageType.ORDER_STATUS_SEARCH_DERIVATIVES_RESPONSE] = MessageReceiveEvent.ORDER_STATUS_SEARCH_DERIVATIVES;
        messageReceiveEventMap[MessageType.CHANGE_ORDER_DERIVATIVES_RESPONSE] = MessageReceiveEvent.CHANGE_ORDER_DERIVATIVES;
        messageReceiveEventMap[MessageType.CHANGE_ORDER_DERIVATIVES_WARN_RESPONSE] = MessageReceiveEvent.CHANGE_ORDER_DERIVATIVES_WARN;
        messageReceiveEventMap[MessageType.CHANGE_ORDER_EQUITY_RESPONSE] = MessageReceiveEvent.CHANGE_ORDER_EQUITY;
        messageReceiveEventMap[MessageType.CHANGE_ORDER_EQUITY_WARN_RESPONSE] = MessageReceiveEvent.CHANGE_ORDER_EQUITY_WARN;
        messageReceiveEventMap[MessageType.SYMBOL_SELECTOR_OPTIONS_RESPONSE] = MessageReceiveEvent.SYMBOL_SELECTOR_OPTIONS;
        messageReceiveEventMap[MessageType.SYMBOL_SELECTOR_TREE_RESPONSE] = MessageReceiveEvent.SYMBOL_SELECTOR_TREE;
        messageReceiveEventMap[MessageType.POSITION_CLOSING_DERIVATIVES_RESPONSE] = MessageReceiveEvent.POSITION_CLOSING_DERIVATIVES;
        messageReceiveEventMap[MessageType.OUTSTANDING_POSITION_DERIVATIVES_RESPONSE] = MessageReceiveEvent.OUTSTANDING_POSITION_DERIVATIVES;
        messageReceiveEventMap[MessageType.BLOCK_TRADE_RESPONSE] = MessageReceiveEvent.BLOCK_TRADE;
        messageReceiveEventMap[MessageType.BLOCK_TRADE_WARN_RESPONSE] = MessageReceiveEvent.BLOCK_TRADE_WARN;
        messageReceiveEventMap[MessageType.BLOCK_TRADE_INIT_RESPONSE] = MessageReceiveEvent.BLOCK_TRADE_INIT;
        messageReceiveEventMap[MessageType.BLOCK_TRADE_TRTYPE_RESPONSE] = MessageReceiveEvent.BLOCK_TRADE_TRTYPE;
        messageReceiveEventMap[MessageType.ACCOUNT_INFO_LONG_EQUITY_RESPONSE] = MessageReceiveEvent.ACCOUNT_INFO_LONG_EQUITY;
        messageReceiveEventMap[MessageType.ACCOUNT_INFO_LONG_DERIVATIVES_RESPONSE] = MessageReceiveEvent.ACCOUNT_INFO_LONG_DERIVATIVES;
        messageReceiveEventMap[MessageType.ORDER_STATUS_EQUITY_ALL_FEED] = MessageReceiveEvent.ORDER_STATUS_PUSH_ALL_EQUITY;
        messageReceiveEventMap[MessageType.ORDER_STATUS_DERIVATIVES_ALL_FEED] = MessageReceiveEvent.ORDER_STATUS_PUSH_ALL_DERIVATIVES;
        messageReceiveEventMap[MessageType.ACCOUNT_LIST_HIERACHY_DERIVATIVES_RESPONSE] = MessageReceiveEvent.ACCOUNT_LIST_HIERACHY_DERIAVTIVES;
        messageReceiveEventMap[MessageType.ADMIN_FEED] = MessageReceiveEvent.ADMIN;
        messageReceiveEventMap[MessageType.FAST_QUOTE_DERIVATIVES_RESPONSE] = MessageReceiveEvent.FAST_QUOTE_DERIVATIVES;
        messageReceiveEventMap[MessageType.BLOCK_TRADE_INFO_RESPONSE] = MessageReceiveEvent.BLOCK_TRADE_INFO;
        messageReceiveEventMap[MessageType.ORDER_PUSH_CHECK_FEED] = MessageReceiveEvent.ORDER_PUSH_CHECK;
        messageReceiveEventMap[MessageType.PIN_CHECK_RESPONSE] = MessageReceiveEvent.PIN_CHECK;
        messageReceiveEventMap[MessageType.MULTIPLE_ORDER_EQUITY_RESPONSE] = MessageReceiveEvent.MULTIPLE_ORDER_EQUITY;
        messageReceiveEventMap[MessageType.MULTIPLE_ORDER_EQUITY_WARN_RESPONSE] = MessageReceiveEvent.MULTIPLE_ORDER_WARN_EQUITY;
        messageReceiveEventMap[MessageType.PLACE_MULTIPLE_ORDER_EQUITY_RESPONSE] = MessageReceiveEvent.PLACE_MULTIPLE_ORDER_EQUITY;
        messageReceiveEventMap[MessageType.ORDER_STATUS_ALL_DERIVATIVES_RESPONSE] = MessageReceiveEvent.ORDER_STATUS_ALL_DERIVATIVES;
        messageReceiveEventMap[MessageType.MULTIPLE_ORDER_GET_LAST_DERIVATIVES_RESPONSE] = MessageReceiveEvent.MULTIPLE_ORDER_GET_LAST_DERIVATIVES;
        messageReceiveEventMap[MessageType.MULTIPLE_ORDER_EXTRACT_DERIVATIVES_RESPONSE] = MessageReceiveEvent.MULTIPLE_ORDER_EXTRACT_DERIVATIVES;
        messageReceiveEventMap[MessageType.PLACE_MULTIPLE_ORDER_DERIVATIVES_RESPONSE] = MessageReceiveEvent.PLACE_MULTIPLE_ORDER_DERIVATIVES;
        messageReceiveEventMap[MessageType.MULTIPLE_ORDER_DERIVATIVES_WARN_RESPONSE] = MessageReceiveEvent.MULTIPLE_ORDER_WARN_DERIVATIVES;
        messageReceiveEventMap[MessageType.UPDATE_CONFIG_RESPONSE] = MessageReceiveEvent.UPDATE_CONFIG;
        messageReceiveEventMap[MessageType.WIDGET_TEMPLATE_RESPONSE] = MessageReceiveEvent.TEMPLATE;
        messageReceiveEventMap[MessageType.MARGIN_STOCK_RESPONSE] = MessageReceiveEvent.MARGIN_STOCK;
        messageReceiveEventMap[MessageType.ANNOUNCEMENT_FEED] = MessageReceiveEvent.ANNOUNCEMENT;
        messageReceiveEventMap[MessageType.TISCO_SETTLE_INFO_RESPONSE] = MessageReceiveEvent.TISCO_SETTLEMENT_INFO;
        messageReceiveEventMap[MessageType.TISCO_STOCK_INFO_RESPONSE] = MessageReceiveEvent.TISCO_STOCK_INFO;
        messageReceiveEventMap[MessageType.TISCO_VOL_FOCUS_LIST_RESPONSE] = MessageReceiveEvent.TISCO_VOL_FOCUS_LIST;
        messageReceiveEventMap[MessageType.DBSV_TECHNICAL_INSIGHT_RESPONSE] = MessageReceiveEvent.DBSV_TECHNICAL_INSIGHT;
        messageReceiveEventMap[MessageType.DBSV_VALUE_ANALYZER_RESPONSE] = MessageReceiveEvent.DBSV_VALUE_ANALYZER;
        messageReceiveEventMap[MessageType.DBSV_SUPPORT_AND_RESISTANCE_RESPONSE] = MessageReceiveEvent.DBSV_SUPPORT_AND_RESISTANCE;
        messageReceiveEventMap[MessageType.DBSV_START_DATE_END_DATE_RESPONSE] = MessageReceiveEvent.DBSV_START_DATE_END_DATE;
        messageReceiveEventMap[MessageType.DBSV_BULLISH_BEARISH_SPECIFIC_TAB_RESPONSE] = MessageReceiveEvent.DBSV_BULLISH_BEARISH_SPECIFIC_TAB;
        messageReceiveEventMap[MessageType.GENERATE_KEY_FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageReceiveEventMap[MessageType.FEED_STING_FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageReceiveEventMap[MessageType.PLACE_ORDER_EQUITY_FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageReceiveEventMap[MessageType.ORDER_STATUS_EQUITY_FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageReceiveEventMap[MessageType.PORTFOLIO_EQUITY_FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageReceiveEventMap[MessageType.ACCOUNT_INFO_EQUITY_FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageReceiveEventMap[MessageType.DEAL_SUMMARY_EQUITY_FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageReceiveEventMap[MessageType.CANCEL_ORDER_EQUITY_FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageReceiveEventMap[MessageType.PLACE_ORDER_DERIVATIVES_FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageReceiveEventMap[MessageType.ORDER_STATUS_DERIVATIVES_FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageReceiveEventMap[MessageType.PORTFOLIO_DERIVATIVES_FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageReceiveEventMap[MessageType.ACCOUNT_INFO_DERIVATIVES_FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageReceiveEventMap[MessageType.DEAL_SUMMARY_DERIVATIVES_FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageReceiveEventMap[MessageType.CANCEL_ORDER_DERIVATIVES_FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageReceiveEventMap[MessageType.ORDER_STATUS_BY_NUMBER_EQUITY_FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageReceiveEventMap[MessageType.ORDER_STATUS_BY_NUMBER_DERIVAITVES_FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageReceiveEventMap[MessageType.CHANGE_ORDER_PRICE_FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageReceiveEventMap[MessageType.CHANGE_ORDER_EQUITY_FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageReceiveEventMap[MessageType.CHANGE_ORDER_DERIVATIVES_FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageReceiveEventMap[MessageType.POSITION_CLOSING_DERIVATIVES_FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageReceiveEventMap[MessageType.OUTSTANDING_POSITION_DERIVATIVES_FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageReceiveEventMap[MessageType.BLOCK_TRADE_FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageReceiveEventMap[MessageType.FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageReceiveEventMap[MessageType.OPTIONS_COMMISSION_FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageReceiveEventMap[MessageType.ACCOUNT_INFO_LONG_EQUITY_FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageReceiveEventMap[MessageType.ACCOUNT_INFO_LONG_DERIVATIVES_FAIL_RESPONSE] = MessageFailEvent.FAIL;
        messageSendEventMap[MessageType.STUB_REQUEST] = MessageSendEvent.STUB;
        messageSendEventMap[MessageType.GENERATE_KEY_REQUEST] = MessageSendEvent.GENERATE_KEY;
        messageSendEventMap[MessageType.REGISTER_KEY_REQUEST] = MessageSendEvent.REGIST_KEY;
        messageSendEventMap[MessageType.MARKET_SUMMARY_REQUEST] = MessageSendEvent.MARKET_SUMMARY;
        messageSendEventMap[MessageType.MARKET_TICKER_REQUEST] = MessageSendEvent.MARKET_TICKER;
        messageSendEventMap[MessageType.INSTRUMENT_TICKER_REQUEST] = MessageSendEvent.INSTRUMENT_TICKER;
        messageSendEventMap[MessageType.INSTRUMENT_TICKER_ODDLOT_REQUEST] = MessageSendEvent.INSTRUMENT_TICKER_ODDLOT;
        messageSendEventMap[MessageType.INFO_REQUEST] = MessageSendEvent.INFO;
        messageSendEventMap[MessageType.INFO_STATISTIC_REQUEST] = MessageSendEvent.INFO_STATISTIC;
        messageSendEventMap[MessageType.INFO_STATISTIC_CHART_REQUEST] = MessageSendEvent.INFO_STATISTIC_CHART;
        messageSendEventMap[MessageType.INFO_ODDLOT_REQUEST] = MessageSendEvent.INFO_ODDLOT;
        messageSendEventMap[MessageType.SNAPSHOT_REQUEST] = MessageSendEvent.SNAPSHOT;
        messageSendEventMap[MessageType.MULTIPLE_REQUEST] = MessageSendEvent.MULTIPLE;
        messageSendEventMap[MessageType.VOLUME_BY_PRICE_REQUEST] = MessageSendEvent.VOLUME_BY_PRICE;
        messageSendEventMap[MessageType.VOLUME_BY_PRICE_DETAIL_REQUEST] = MessageSendEvent.VOLUME_BY_PRICE_DETAIL;
        messageSendEventMap[MessageType.PLACE_ORDER_EQUITY_REQUEST] = MessageSendEvent.PLACE_ORDER_EQUITY;
        messageSendEventMap[MessageType.PLACE_ORDER_EQUITY_CONFIRM_REQUEST] = MessageSendEvent.PLACE_ORDER_CONFIRM_EQUITY;
        messageSendEventMap[MessageType.CANCEL_ORDER_EQUITY_REQUEST] = MessageSendEvent.CANCEL_ORDER_EQUITY;
        messageSendEventMap[MessageType.EXPIRE_DATE_REQUEST] = MessageSendEvent.OPTIONS_EXPIRE_DATE;
        messageSendEventMap[MessageType.OPTIONS_RECOMMEND_REQUEST] = MessageSendEvent.OPTIONS_RECOMMEND;
        messageSendEventMap[MessageType.OPTIONS_HISTORICAL_CHART_REQUEST] = MessageSendEvent.OPTIONS_HISTORICAL_CHART;
        messageSendEventMap[MessageType.PLACE_ORDER_DERIVATIVES_REQUEST] = MessageSendEvent.PLACE_ORDER_DERIVATIVES;
        messageSendEventMap[MessageType.PLACE_ORDER_DERIVATIVES_CONFIRM_REQUEST] = MessageSendEvent.PLACE_ORDER_CONFIRM_DERIVATIVES;
        messageSendEventMap[MessageType.ORDER_STATUS_DERIVATIVES_REQUEST] = MessageSendEvent.ORDER_STATUS_DERIVATIVES;
        messageSendEventMap[MessageType.PORTFOLIO_DERIVATIVES_REQUEST] = MessageSendEvent.PORTFOLIO_DERIVATIVES;
        messageSendEventMap[MessageType.ACCOUNT_INFO_DERIVATIVES_REQUEST] = MessageSendEvent.ACCOUNT_INFO_DERIVATIVES;
        messageSendEventMap[MessageType.DEAL_SUMMARY_DERIVATIVES_REQUEST] = MessageSendEvent.DEAL_SUMMARY_DERIVATIVES;
        messageSendEventMap[MessageType.DEAL_SUMMARY_DERIVATIVES_BY_INSTRUMENT_ID_REQUEST] = MessageSendEvent.DEAL_SUMMARY_BY_PRICE_DERIVATIVES;
        messageSendEventMap[MessageType.DEAL_SUMMARY_DERIVATIVES_BY_PRICE_REQUEST] = MessageSendEvent.DEAL_SUMMARY_BY_PRICE_DERIVATIVES;
        messageSendEventMap[MessageType.CANCEL_ORDER_DERIVATIVES_REQUEST] = MessageSendEvent.CANCEL_ORDER_DERIVATIVES;
        messageSendEventMap[MessageType.OPTIONS_COMMISSION_REQUEST] = MessageSendEvent.OPTIONS_COMMISSION;
        messageSendEventMap[MessageType.INTRADAY_CHART_REQUEST] = MessageSendEvent.INTRADAY_CHART;
        messageSendEventMap[MessageType.OPTIONS_STRIKE_PRICE_LIST_REQUEST] = MessageSendEvent.OPTIONS_STRIKE_PRICE_LIST;
        messageSendEventMap[MessageType.OPTIONS_GREEK_VALUE_REQUEST] = MessageSendEvent.OPTIONS_GREEK_VALUE;
        messageSendEventMap[MessageType.OPTIONS_GREEK_DEFAULT_VALUE_REQUEST] = MessageSendEvent.OPTIONS_GREEK_DEFAULT_VALUE;
        messageSendEventMap[MessageType.OPTIONS_EXPIRE_DATE_REQUEST] = MessageSendEvent.OPTIONS_EXPIRE_DATE;
        messageSendEventMap[MessageType.HISTORICAL_CHART_REQUEST] = MessageSendEvent.HISTORICAL_CHART;
        messageSendEventMap[MessageType.NEWS_REQUEST] = MessageSendEvent.NEWS;
        messageSendEventMap[MessageType.INSTRUMENT_LIST_REQUEST] = MessageSendEvent.INSTRUMENT_LIST;
        messageSendEventMap[MessageType.OPTIONS_INSTRUMENT_LIST_REQUEST] = MessageSendEvent.OPTIONS_INSTRUMENT_LIST;
        messageSendEventMap[MessageType.ACCOUNT_NAME_REQUEST] = MessageSendEvent.ACCOUNT_NAME;
        messageSendEventMap[MessageType.ORDER_STATUS_EQUITY_REQUEST] = MessageSendEvent.ORDER_STATUS_EQUITY;
        messageSendEventMap[MessageType.ORDER_STATUS_PUSH_REQUEST] = MessageSendEvent.ORDER_STATUS_PUSH;
        messageSendEventMap[MessageType.PORTFOLIO_EQUITY_REQUEST] = MessageSendEvent.PORTFOLIO_EQUITY;
        messageSendEventMap[MessageType.ACCOUNT_INFO_EQUITY_REQUEST] = MessageSendEvent.ACCOUNT_INFO_EQUITY;
        messageSendEventMap[MessageType.DEAL_SUMMARY_EQUITY_REQUEST] = MessageSendEvent.DEAL_SUMMARY_EQUITY;
        messageSendEventMap[MessageType.ACCOUNT_LIST_EQUITY_REQUEST] = MessageSendEvent.ACCOUNT_LIST_EQUITY;
        messageSendEventMap[MessageType.FAVOURITE_ADD_REQUEST] = MessageSendEvent.FAVOURITE_ADD;
        messageSendEventMap[MessageType.FAVOURITE_REMOVE_REQUEST] = MessageSendEvent.FAVOURITE_REMOVE;
        messageSendEventMap[MessageType.FAVOURITE_SWAP_REQUEST] = MessageSendEvent.FAVOURITE_SWAP;
        messageSendEventMap[MessageType.FAVOURITE_UPDATE_REQUEST] = MessageSendEvent.FAVOURITE_UPDATE;
        messageSendEventMap[MessageType.SYNC_TIME_REQUEST] = MessageSendEvent.SYNC_TIME;
        messageSendEventMap[MessageType.USER_CHECK_REQUEST] = MessageSendEvent.USER_CHECK;
        messageSendEventMap[MessageType.STATIC_DATA_REQUEST] = MessageSendEvent.STATIC_DATA;
        messageSendEventMap[MessageType.UPDATE_CONFIG_REQUEST] = MessageSendEvent.UPDATE_CONFIG;
        messageSendEventMap[MessageType.WIDGET_TEMPLATE_REQUEST] = MessageSendEvent.TEMPLATE;
        messageSendEventMap[MessageType.ORDER_STATUS_BY_NUMBER_EQUITY_REQUEST] = MessageSendEvent.ORDER_STATUS_BY_NUMBER_EQUITY;
        messageSendEventMap[MessageType.ORDER_STATUS_BY_NUMBER_DERIVAITVES_REQUEST] = MessageSendEvent.ORDER_STATUS_BY_NUMBER_DERIVATIVES;
        messageSendEventMap[MessageType.NEWS_INFORMATION_REQUEST] = MessageSendEvent.NEWS_INFORMATION;
        messageSendEventMap[MessageType.SET_CALENDAR_REQUEST] = MessageSendEvent.SET_CALENDAR;
        messageSendEventMap[MessageType.RESEARCH_REQUEST] = MessageSendEvent.RESEARCH;
        messageSendEventMap[MessageType.OPPDAY_ARCHIVE_REQUEST] = MessageSendEvent.OPPDAY_ARCHIVE;
        messageSendEventMap[MessageType.OPPDAY_LIVE_REQUEST] = MessageSendEvent.OPPDAY_LIVE;
        messageSendEventMap[MessageType.OPPDAY_SEARCH_REQUEST] = MessageSendEvent.OPPDAY_SEARCH;
        messageSendEventMap[MessageType.INSTRUMENT_ID_VALIDATOR_REQUEST] = MessageSendEvent.INSTRUMENT_ID_VALIDATOR;
        messageSendEventMap[MessageType.HISTORICAL_BY_DATE_REQUEST] = MessageSendEvent.HISTORICAL_BY_DATE;
        messageSendEventMap[MessageType.ORDER_STATUS_SEARCH_EQUITY_REQUEST] = MessageSendEvent.ORDER_STATUS_SEARCH_EQUITY;
        messageSendEventMap[MessageType.ORDER_STATUS_SEARCH_DERIVATIVES_REQUEST] = MessageSendEvent.ORDER_STATUS_SEARCH_DERIVATIVES;
        messageSendEventMap[MessageType.CHANGE_ORDER_DERIVATIVES_CONFIRM_REQUEST] = MessageSendEvent.CHANGE_ORDER_CONFIRM_DERIVATIVES;
        messageSendEventMap[MessageType.CHANGE_ORDER_DERIVATIVES_REQUEST] = MessageSendEvent.CHANGE_ORDER_DERIVATIVES;
        messageSendEventMap[MessageType.CHANGE_ORDER_EQUITY_CONFIRM_REQUEST] = MessageSendEvent.CHANGE_ORDER_CONFIRM_EQUITY;
        messageSendEventMap[MessageType.CHANGE_ORDER_EQUITY_REQUEST] = MessageSendEvent.CHANGE_ORDER_EQUITY;
        messageSendEventMap[MessageType.PAGE_STAT_REQUEST] = MessageSendEvent.PAGE_STAT;
        messageSendEventMap[MessageType.SYMBOL_SELECTOR_OPTIONS_REQUEST] = MessageSendEvent.SYMBOL_SELECTOR_OPTIONS;
        messageSendEventMap[MessageType.SYMBOL_SELECTOR_TREE_REQUEST] = MessageSendEvent.SYMBOL_SELECTOR_TREE;
        messageSendEventMap[MessageType.POSITION_CLOSING_DERIVATIVES_RESPONSE] = MessageSendEvent.POSITION_CLOSING_DERIVATIVES;
        messageSendEventMap[MessageType.OUTSTANDING_POSITION_DERIVATIVES_RESPONSE] = MessageSendEvent.OUTSTANDING_POSITION_DERIVATIVES;
        messageSendEventMap[MessageType.BLOCK_TRADE_CONFIRM_REQUEST] = MessageSendEvent.BLOCK_TRADE_CONFIRM;
        messageSendEventMap[MessageType.BLOCK_TRADE_REQUEST] = MessageSendEvent.BLOCK_TRADE;
        messageSendEventMap[MessageType.BLOCK_TRADE_INIT_REQUEST] = MessageSendEvent.BLOCK_TRADE_INIT;
        messageSendEventMap[MessageType.BLOCK_TRADE_TRTYPE_REQUEST] = MessageSendEvent.BLOCK_TRADE_TRTYPE;
        messageSendEventMap[MessageType.ACCOUNT_INFO_LONG_DERIVATIVES_REQUEST] = MessageSendEvent.ACCOUNT_INFO_LONG_DERIVATIVES;
        messageSendEventMap[MessageType.ACCOUNT_INFO_LONG_EQUITY_REQUEST] = MessageSendEvent.ACCOUNT_INFO_LONG_EQUITY;
        messageSendEventMap[MessageType.ACCOUNT_LIST_HIERACHY_DERIVATIVES_REQUEST] = MessageSendEvent.ACCOUNT_LIST_HIERACHY_DERIVATIVES;
        messageSendEventMap[MessageType.FAST_QUOTE_DERIVATIVES_REQUEST] = MessageSendEvent.FAST_QUOTE_DERIVATIVES;
        messageSendEventMap[MessageType.BLOCK_TRADE_INFO_REQUEST] = MessageSendEvent.BLOCK_TRADE_INFO;
        messageSendEventMap[MessageType.ORDER_PUSH_CHECK_REQUEST] = MessageSendEvent.ORDER_PUSH_CHECK;
        messageSendEventMap[MessageType.PIN_CHECK_REQUEST] = MessageSendEvent.PIN_CHECK;
        messageSendEventMap[MessageType.MULTIPLE_ORDER_CALCULATE_EQUITY_REQUEST] = MessageSendEvent.MULTIPLE_ORDER_CALCULATE_EQUITY;
        messageSendEventMap[MessageType.MULTIPLE_ORDER_GET_LAST_EQUITY_REQUEST] = MessageSendEvent.MULTIPLE_ORDER_GET_LAST_EQUITY;
        messageSendEventMap[MessageType.MULTIPLE_ORDER_GET_PERCENT_EQUITY_REQUEST] = MessageSendEvent.MULTIPLE_ORDER_GET_PERCENT_EQUITY;
        messageSendEventMap[MessageType.MULTIPLE_ORDER_SORT_MARKETCAP_EQUITY_REQUEST] = MessageSendEvent.MULTIPLE_ORDER_SORT_MARKETCAP_EQUITY;
        messageSendEventMap[MessageType.MULTIPLE_ORDER_EXTRACT_EQUITY_REQUEST] = MessageSendEvent.MULTIPLE_ORDER_EXTRACT_EQUITY;
        messageSendEventMap[MessageType.PLACE_MULTIPLE_ORDER_EQUITY_REQUEST] = MessageSendEvent.PLACE_MULTIPLE_ORDER_EQUITY;
        messageSendEventMap[MessageType.ORDER_STATUS_ALL_DERIVATIVES_REQUEST] = MessageSendEvent.ORDER_STATUS_ALL_DERIVATIVES;
        messageSendEventMap[MessageType.NOTIFICATION_STARTUP_REQUEST] = MessageSendEvent.NOTIFICATION_STARTUP;
        messageSendEventMap[MessageType.MULTIPLE_ORDER_EXTRACT_DERIVATIVES_REQUEST] = MessageSendEvent.MULTIPLE_ORDER_EXTRACT_DERIVATIVES;
        messageSendEventMap[MessageType.MULTIPLE_ORDER_GET_LAST_DERIVATIVES_REQUEST] = MessageSendEvent.MULTIPLE_ORDER_GET_LAST_DERIVATIVES;
        messageSendEventMap[MessageType.PLACE_MULTIPLE_ORDER_DERIVATIVES_REQUEST] = MessageSendEvent.PLACE_MULTIPLE_ORDER_DERIVATIVES;
        messageSendEventMap[MessageType.MARGIN_STOCK_REQUEST] = MessageSendEvent.MARGIN_STOCK;
        messageSendEventMap[MessageType.ANNOUNCEMENT_REQUEST] = MessageSendEvent.ANNOUNCEMENT;
        messageSendEventMap[MessageType.TISCO_SETTLE_INFO_REQUEST] = MessageSendEvent.TISCO_SETTLEMENT_INFO;
        messageSendEventMap[MessageType.TISCO_STOCK_INFO_REQUEST] = MessageSendEvent.TISCO_STOCK_INFO;
        messageSendEventMap[MessageType.TISCO_VOL_FOCUS_LIST_REQUEST] = MessageSendEvent.TISCO_VOL_FOCUS_LIST;
        messageSendEventMap[MessageType.DBSV_TECHNICAL_INSIGHT_REQUEST] = MessageSendEvent.DBSV_TECHNICAL_INSIGHT;
        messageSendEventMap[MessageType.DBSV_VALUE_ANALYZER_REQUEST] = MessageSendEvent.DBSV_VALUE_ANALYZER;
        messageSendEventMap[MessageType.DBSV_SUPPORT_AND_RESISTANCE_REQUEST] = MessageSendEvent.DBSV_SUPPORT_AND_RESISTANCE;
        messageSendEventMap[MessageType.DBSV_START_DATE_END_DATE_REQUEST] = MessageSendEvent.DBSV_START_DATE_END_DATE;
        messageSendEventMap[MessageType.DBSV_BULLISH_BEARISH_SPECIFIC_TAB_REQUEST] = MessageSendEvent.DBSV_BULLISH_BEARISH_SPECIFIC_TAB;
        messageControlEventMap[MessageType.SOCKET_STATUS] = MessageControlEvent.SOCKET_STATUS;
        messageControlEventMap[MessageType.INITIAL_STATUS] = MessageControlEvent.INITIAL_STATUS;
        messageControlEventMap[MessageType.FEED_STATUS] = MessageControlEvent.FEED_STATUS;
        messageControlEventMap[MessageType.FEED_MANAGER_STATUS] = MessageControlEvent.FEED_MANAGER_STATUS;
        messageControlEventMap[MessageType.PAGE_STATUS] = MessageControlEvent.PAGE_STATUS;
        messageControlEventMap[MessageType.ACCOUNT_CHANGE] = MessageControlEvent.ACCOUNT_CHANGE;
        messageControlEventMap[MessageType.WIDGET_LOADED] = MessageControlEvent.WIDGET_LOADED;
        messageControlEventMap[MessageType.NOTIFY_PLACE_ORDER] = MessageControlEvent.NOTIFY_PLACE_ORDER;
        messageControlEventMap[MessageType.NOTIFICATION] = MessageControlEvent.NOTIFICATION;
        messageControlEventMap[MessageType.CONFIG_CHANGE] = MessageControlEvent.CONFIG_CHANGE;
        messageControlEventMap[MessageType.NOTIFY_PLACE_INSTRUMENT_ID] = MessageControlEvent.NOTIFY_PLACE_INSTRUMENT_ID;
        messageControlEventMap[MessageType.WIDGET_PAGE_STATUS] = MessageControlEvent.WIDGET_PAGE_STATUS;
        messageControlEventMap[MessageType.KEYBOARD_SHORTCUT] = MessageControlEvent.KEYBOARD_SHORTCUT;
        messageControlEventMap[MessageType.CHANGE_LANGUAGE] = MessageControlEvent.CHANGE_LANGUAGE;
        messageControlEventMap[MessageType.POPUP_STATE_CHANGE] = MessageControlEvent.POPUP_STATE_CHANGE;
        messageControlEventMap[MessageType.HTML_HOLDER_INSTRUMENT_CHANGE] = MessageControlEvent.HTML_HOLDER_INSTRUMENT_CHANGE;
        messageControlEventMap[MessageType.THEME_CHANGE] = MessageControlEvent.THEME_CHANGE;
        messageControlEventMap[MessageType.INVALID_PARSE] = MessageFailEvent.FAIL;
        messageControlEventMap[MessageType.HTTP_FAIL] = MessageFailEvent.FAIL;
    }
}//package com.settrade.streaming5.dispatcher 
﻿package com.settrade.streaming5.dispatcher {
    import com.settrade.streaming5.message.*;
    import flash.events.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.log.logger.*;

    public class MessageDispatcher extends EventDispatcher {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:MessageDispatcher = null;

        public function MessageDispatcher(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Message Dispatcher Complete");
        }
        public static function getInstance():MessageDispatcher{
            if (instance == null){
                instance = new (MessageDispatcher)();
            };
            return (instance);
        }

        override public function dispatchEvent(event:Event):Boolean{
            if ((!(event) is MessageEvent)){
                return (false);
            };
            return (super.dispatchEvent(event));
        }
        public function notifySendMessage(message:Message):void{
            this.dispatchEvent(MessageEventFactory.getSendMessageEvent(message));
        }
        public function notifyReceiveMessage(message:Message):void{
            this.dispatchEvent(MessageEventFactory.getRecieveMessageEvent(message));
        }
        public function notifyControlMessage(message:Message):void{
            this.dispatchEvent(MessageEventFactory.getControlMessageEvent(message));
        }

    }
}//package com.settrade.streaming5.dispatcher 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class InstrumentIdValidatorService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:InstrumentIdValidatorService = null;

        public function InstrumentIdValidatorService(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():InstrumentIdValidatorService{
            if (instance == null){
                instance = new (InstrumentIdValidatorService)();
            };
            return (instance);
        }

        public function validateInstrumentId(instrumentId:String):Number{
            var isSubBroker:Boolean = StreamingAttribute.isSubBroker;
            var brokerId:String = StreamingAttribute.brokerId;
            var system:System = StreamingAttribute.systemMarket;
            var message:InstrumentIdValidatorRequestMessage = new InstrumentIdValidatorRequestMessage(instrumentId, isSubBroker, brokerId, system);
            sendAndNotifyMessage(message);
            return (message.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class UserCheckService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:UserCheckService;

        public function UserCheckService(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():UserCheckService{
            if (instance == null){
                instance = new (UserCheckService)();
            };
            return (instance);
        }

        public function userCheck(system:System):Number{
            var message:UserCheckRequestMessage = new UserCheckRequestMessage(system, FeedManager.getInstance().state.state, StreamingAttribute.realtimeClientType);
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function userCheckPrimary():Number{
            return (this.userCheck(System.REALTIME_PRIMARY));
        }
        public function userCheckSecondary():Number{
            return (this.userCheck(System.REALTIME_SECONDARY));
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class RegisterKeyService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:RegisterKeyService;

        public function RegisterKeyService(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():RegisterKeyService{
            if (instance == null){
                instance = new (RegisterKeyService)();
            };
            return (instance);
        }

        public function registerKey(password:String):Number{
            var password:* = password;
            var message:* = null;
            try {
                logger.info(("Register Push: password = " + password));
                message = new RegisterKeyRequestMessage(StreamingAttribute.userRef, StreamingAttribute.brokerId, password, StreamingAttribute.openTime, StreamingAttribute.realtimeClientType);
                sendAndNotifyMessage(message);
            } catch(error:Error) {
                logger.error(error.message);
                logger.debug(error.getStackTrace());
            };
            return (message.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.widget.component.*;
    import com.settrade.streaming5.message.request.pagestat.*;
    import com.settrade.log.logger.*;

    public class UsageLogService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        public static var instance:UsageLogService = null;

        var usageLogManager:UsageLogManager;

        public function UsageLogService(){
            super();
            this.usageLogManager = UsageLogManager.getInstance();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():UsageLogService{
            if (instance == null){
                instance = new (UsageLogService)();
            };
            return (instance);
        }

        public function startLog(widget:WidgetComponent):void{
            this.usageLogManager.startLog(widget);
        }
        public function stopLog(widget:WidgetComponent):void{
            this.usageLogManager.stopLog(widget);
        }
        public function increaseLog(widgetId:String):void{
            this.usageLogManager.increase(widgetId);
        }
        public function sendUsageLog():Number{
            var message:PageStatisticRequestMessage = new PageStatisticRequestMessage();
            message.pageStatisticList = this.usageLogManager.collectPageStatistic();
            sendAndNotifyMessage(message);
            return (message.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class HistoricalChartService extends UniqueLockService {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:HistoricalChartService = null;

        public function HistoricalChartService(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():HistoricalChartService{
            if (instance == null){
                instance = new (HistoricalChartService)();
            };
            return (instance);
        }

        public function getHistoricalChart(instrumentId:String):Number{
            var messageId:Number = sendRequestMessage(instrumentId);
            return (messageId);
        }
        override protected function isValidKey(key:Object):Boolean{
            return (true);
        }
        override protected function createMessage(key:Object):RequestMessage{
            return (new HistoricalChartRequestMessage(String(key)));
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.register.*;
    import com.settrade.streaming5.message.request.intradaychart.*;
    import com.settrade.log.logger.*;

    public class IntradayChartService extends Service implements Lockable {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:IntradayChartService;

        protected var intradayChartRegister:IntradayChartRegister;
        public var isLock:Boolean;
        public var isDirty:Boolean;

        public function IntradayChartService(){
            super();
            this.intradayChartRegister = IntradayChartRegister.getInstance();
            this.isLock = false;
            this.isDirty = false;
        }
        public static function getInstance():IntradayChartService{
            if (instance == null){
                instance = new (IntradayChartService)();
            };
            return (instance);
        }

        public function reRegistIntradayChart(instrumentId:String, chartType:ChartType, source:Object, flushFlag:Boolean=true):void{
            logger.info("Re Regist IntradayChart");
            this.unregistSource(source, false);
            this.registIntradayChart(instrumentId, chartType, source, false);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function registIntradayChart(instrumentId:String, chartType:ChartType, source:Object, flushFlag:Boolean=true):void{
            logger.info("Regist IntradayChart");
            var token:IntradayChartRegisterToken = new IntradayChartRegisterToken(instrumentId, chartType);
            this.intradayChartRegister.regist(token, source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function unregistIntradayChart(instrumentId:String, chartType:ChartType, source:Object, flushFlag:Boolean=true):void{
            logger.info("Unregist IntradayChart");
            var token:IntradayChartRegisterToken = new IntradayChartRegisterToken(instrumentId, chartType);
            this.intradayChartRegister.unregist(token, source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function unregistSource(source:Object, flushFlag:Boolean=true):void{
            logger.info("Unregist Source");
            this.intradayChartRegister.unregistSource(source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        private function sendFromRegister():void{
            var sendMessage:* = null;
            if (this.isLock){
                this.isDirty = true;
            } else {
                try {
                    sendMessage = this.intradayChartRegister.flush();
                    if (sendMessage != null){
                        sendAndNotifyMessage(sendMessage);
                    };
                } catch(error:Error) {
                    logger.error(error.message);
                    logger.debug(error.getStackTrace());
                };
            };
        }
        public function lock():void{
            this.isLock = true;
            this.isDirty = false;
        }
        public function unlock():void{
            this.isLock = false;
            if (this.isDirty){
                this.sendFromRegister();
            };
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.message.request.oppday.*;
    import com.settrade.log.logger.*;

    public class OppDayService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        public static var instance:OppDayService = null;

        private var oppDayManager:OppDayArchiveManager;

        public function OppDayService(){
            super();
            this.oppDayManager = OppDayArchiveManager.getInstance();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():OppDayService{
            if (instance == null){
                instance = new (OppDayService)();
            };
            return (instance);
        }

        public function getOppDayLive():Number{
            var message:OppDayLiveRequestMessage = new OppDayLiveRequestMessage();
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function getOppDayByQuarterAndYearFixedId(quarter:int, year:int, fixedId:Number=NaN):Number{
            var message:OppDayArchiveRequestMessage = new OppDayArchiveRequestMessage(quarter, year);
            if (!isNaN(fixedId)){
                message.id = fixedId;
            };
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function getOppDaySearch(instrumentId:String):Number{
            var message:OppDaySearchRequestMessage = new OppDaySearchRequestMessage(instrumentId);
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function getOppDayArchive():Number{
            return (this.oppDayManager.requestOppDayArchive());
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import flash.events.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.message.response.orderstatus.*;
    import flash.utils.*;
    import com.settrade.streaming5.common.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class AccountInformationDerivativesService extends MessageTypeLockService {

        private static const ORDER_STATUS:int = 1;
        private static const PORFOLIO:int = 2;
        private static const DEAL_SUMMARY:int = 4;
        private static const ACCOUNT_INFOTMATION:int = 8;
        private static const DEAL_SUMMARY_SERIES:int = 16;
        private static const DEAL_SUMMARY_PRICE:int = 32;
        private static const POSITION_CLOSING:int = 64;
        private static const OUTSTANDING_POSITION:int = 128;
        private static const ACCOUNT_INFORMATION_LONG:int = 0x0100;
        private static const ORDER_STATUS_ALL:int = 0x0200;

        private static var logger:Logger = new Logger(prototype.constructor);
        public static var instance:AccountInformationDerivativesService = null;

        protected var accountManager:AccountManager;

        public function AccountInformationDerivativesService(){
            super();
            this.accountManager = AccountManager.getInstance();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():AccountInformationDerivativesService{
            if (instance == null){
                instance = new (AccountInformationDerivativesService)();
            };
            return (instance);
        }

        public function getAllAccountOrderStatus():Number{
            var messageId:Number = sendRequestMessage(Account.ALL_DERIVATIVES, ORDER_STATUS_ALL);
            return (messageId);
        }
        public function getOrderStatus(account:Account=null, needLoadFromCache:Boolean=false):Number{
            var cacheOrderStatusDerivativesResponseMessage:* = null;
            var timer:* = null;
            var messageId:* = NaN;
            var account = account;
            var needLoadFromCache:Boolean = needLoadFromCache;
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            if (!account.system.isDeriv()){
                logger.error("Invalid System");
                return (NaN);
            };
            var canLoadFromCache:* = OrderManager.getInstance().hasOrderStatusByAccount(account);
            if (((needLoadFromCache) && (canLoadFromCache))){
                cacheOrderStatusDerivativesResponseMessage = new OrderStatusDerivativesResponseMessage(new OrderStatusDerivativesRequestMessage(account.accountNumber), null, account.accountNumber);
                cacheOrderStatusDerivativesResponseMessage.orderStatusList = OrderManager.getInstance().getOrderListByAccount(account).slice(0);
                timer = new Timer(100, 1);
                timer.addEventListener(TimerEvent.TIMER, function ():void{
                    notifyReceiveMessage(cacheOrderStatusDerivativesResponseMessage);
                });
                timer.start();
                return (cacheOrderStatusDerivativesResponseMessage.requestId);
            };
            messageId = sendRequestMessage(account, ORDER_STATUS);
            return (messageId);
        }
        public function getPortfolio(account:Account=null):Number{
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            if (!account.system.isDeriv()){
                logger.error("Invalid System");
                return (NaN);
            };
            var messageId:Number = sendRequestMessage(account, PORFOLIO);
            return (messageId);
        }
        public function getAccountInformation(account:Account=null, needLoadFromCache:Boolean=false):Number{
            var cacheAccountInfoDerivativesResponseMessage:* = null;
            var requestId:* = NaN;
            var timer:* = null;
            var messageId:* = NaN;
            var account = account;
            var needLoadFromCache:Boolean = needLoadFromCache;
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            if (!account.system.isDeriv()){
                logger.error("Invalid System");
                return (NaN);
            };
            var canLoadFromCache:* = AccountInfoManager.getInstance().hasAccountInfoByAccount(account);
            if (((needLoadFromCache) && (canLoadFromCache))){
                cacheAccountInfoDerivativesResponseMessage = AccountInfoManager.getInstance().getDerivativesAccountInfoByAccount(account);
                requestId = new Number(cacheAccountInfoDerivativesResponseMessage.requestId);
                timer = new Timer(100, 1);
                timer.addEventListener(TimerEvent.TIMER, function ():void{
                    notifyReceiveMessage(cacheAccountInfoDerivativesResponseMessage);
                });
                timer.start();
                return (requestId);
            };
            messageId = sendRequestMessage(account, ACCOUNT_INFOTMATION);
            return (messageId);
        }
        public function getDealSummary(account:Account):Number{
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            if (!account.system.isDeriv()){
                logger.error("Invalid System");
                return (NaN);
            };
            var messageId:Number = sendRequestMessage(account, DEAL_SUMMARY);
            return (messageId);
        }
        public function getDealSummaryByPrice(account:Account):Number{
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            if (!account.system.isDeriv()){
                logger.error("Invalid System");
                return (NaN);
            };
            var messageId:Number = sendRequestMessage(account, DEAL_SUMMARY_PRICE);
            return (messageId);
        }
        public function getDealSummaryByInstrumentId(account:Account):Number{
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            if (!account.system.isDeriv()){
                logger.error("Invalid System");
                return (NaN);
            };
            var messageId:Number = sendRequestMessage(account, DEAL_SUMMARY_SERIES);
            return (messageId);
        }
        public function getPositionClosing(account:Account):Number{
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            if (!account.system.isDeriv()){
                logger.error("Invalid System");
                return (NaN);
            };
            var messageId:Number = sendRequestMessage(account, POSITION_CLOSING);
            return (messageId);
        }
        public function getOutstandingPosition(account:Account):Number{
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            if (!account.system.isDeriv()){
                logger.error("Invalid System");
                return (NaN);
            };
            var messageId:Number = sendRequestMessage(account, OUTSTANDING_POSITION);
            return (messageId);
        }
        public function getAllAccountInformation(account:Account=null):Number{
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            if (!account.system.isDeriv()){
                logger.error("Invalid System");
                return (NaN);
            };
            var messageId:Number = sendRequestMessage(account, ((ORDER_STATUS | ACCOUNT_INFOTMATION) | PORFOLIO));
            return (messageId);
        }
        public function getAllAccountAndDealInformation(account:Account=null):Number{
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            if (!account.system.isDeriv()){
                logger.error("Invalid System");
                return (NaN);
            };
            var messageId:Number = sendRequestMessage(account, (((ORDER_STATUS | ACCOUNT_INFOTMATION) | PORFOLIO) | DEAL_SUMMARY));
            return (messageId);
        }
        public function getAccountInformationLong(account:Account=null):Number{
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            if (!account.system.isDeriv()){
                logger.error("Invalid System");
                return (NaN);
            };
            var messageId:Number = sendRequestMessage(account, ACCOUNT_INFORMATION_LONG);
            return (messageId);
        }
        override protected function isValidKey(key:Object):Boolean{
            var accountEquity:Account = Account(key);
            return (accountEquity.system.isDeriv());
        }
        override protected function createMessage(key:Object, messageType:int):Vector.<RequestMessage>{
            var account:Account = Account(key);
            var accountNumber:String = account.accountNumber;
            var list:Vector.<RequestMessage> = new Vector.<RequestMessage>();
            if (hasMessageType(messageType, ORDER_STATUS)){
                list.push(new OrderStatusDerivativesRequestMessage(accountNumber));
            };
            if (hasMessageType(messageType, ACCOUNT_INFOTMATION)){
                list.push(new AccountInfoDerivativesRequestMessage(accountNumber));
            };
            if (hasMessageType(messageType, PORFOLIO)){
                list.push(new PortfolioDerivativesRequestMessage(accountNumber));
            };
            if (hasMessageType(messageType, DEAL_SUMMARY)){
                list.push(new DealSummaryDerivativesRequestMessage(accountNumber));
            };
            if (hasMessageType(messageType, DEAL_SUMMARY_PRICE)){
                list.push(new DealSummaryDerivativesByPriceRequestMessage(accountNumber));
            };
            if (hasMessageType(messageType, DEAL_SUMMARY_SERIES)){
                list.push(new DealSummaryDerivativesByInstrumentIdRequestMessage(accountNumber));
            };
            if (hasMessageType(messageType, POSITION_CLOSING)){
                list.push(new PositionClosingDerivativesRequestMessage(accountNumber));
            };
            if (hasMessageType(messageType, OUTSTANDING_POSITION)){
                list.push(new OutstandingPositionDerivativesRequestMessage(accountNumber));
            };
            if (hasMessageType(messageType, ACCOUNT_INFORMATION_LONG)){
                list.push(new AccountInfoLongDerivativesRequestMessage(accountNumber));
            };
            if (hasMessageType(messageType, ORDER_STATUS_ALL)){
                list.push(new OrderStatusAllDerivativesRequestMessage());
            };
            return (list);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.common.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.marketticker.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.register.*;
    import com.settrade.log.logger.*;

    public class MarketTickerService extends Service implements Lockable {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:MarketTickerService;

        protected var marketTickerRegister:MarketTickerRegister;
        public var isLock:Boolean;
        public var isDirty:Boolean;

        public function MarketTickerService(){
            super();
            this.marketTickerRegister = MarketTickerRegister.getInstance();
            this.isLock = false;
            this.isDirty = false;
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():MarketTickerService{
            if (instance == null){
                instance = new (MarketTickerService)();
            };
            return (instance);
        }

        public function registMarketTickerSum(source:Object, flushFlag:Boolean=true):void{
            logger.info("Regist Market Ticker");
            var registList:Vector.<MarketTickerRegisterToken> = this.getRegisterList(true);
            var message:MarketTickerRequestMessage = new MarketTickerRequestMessage(registList);
            this.marketTickerRegister.regist(message, source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function reRegistMarketTickerSum(source:Object, flushFlag:Boolean=true):void{
            logger.info("Re Regist Market Ticker");
            var registList:Vector.<MarketTickerRegisterToken> = this.getRegisterList(true);
            if (registList.length > 0){
                this.unregistMarketTicker(source, false);
            };
            this.registMarketTickerSum(source, false);
            if (flushFlag){
                if (this.isLock){
                    this.isDirty = true;
                } else {
                    this.sendFromRegister();
                };
            };
        }
        private function getRegisterList(isSum:Boolean):Vector.<MarketTickerRegisterToken>{
            var registList:Vector.<MarketTickerRegisterToken> = new Vector.<MarketTickerRegisterToken>();
            if (StreamingAttribute.systemMarket.isALLSystem()){
                registList.push(new MarketTickerRegisterToken(System.EQUITY, isSum));
                registList.push(new MarketTickerRegisterToken(System.DERIV, isSum));
            } else {
                if (StreamingAttribute.systemMarket.isDeriv()){
                    registList.push(new MarketTickerRegisterToken(System.DERIV, isSum));
                } else {
                    if (StreamingAttribute.systemMarket.isEquity()){
                        registList.push(new MarketTickerRegisterToken(System.EQUITY, isSum));
                    };
                };
            };
            return (registList);
        }
        public function registMarketTicker(source:Object, flushFlag:Boolean=true):void{
            logger.info("Regist Market Ticker");
            var registList:Vector.<MarketTickerRegisterToken> = this.getRegisterList(false);
            var message:MarketTickerRequestMessage = new MarketTickerRequestMessage(registList);
            this.marketTickerRegister.regist(message, source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function unregistMarketTicker(source:Object, flushFlag:Boolean=true):void{
            logger.info("Unregist Market Ticker");
            this.marketTickerRegister.unregistSource(source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function reRegistMarketTicker(source:Object, flushFlag:Boolean=true):void{
            logger.info("Re Regist Market Ticker");
            var registList:Vector.<MarketTickerRegisterToken> = this.getRegisterList(false);
            if (registList.length > 0){
                this.unregistMarketTicker(source, false);
            };
            this.registMarketTicker(source, false);
            if (flushFlag){
                if (this.isLock){
                    this.isDirty = true;
                } else {
                    this.sendFromRegister();
                };
            };
        }
        private function sendFromRegister():void{
            var sendMessage:* = null;
            if (this.isLock){
                this.isDirty = true;
            } else {
                try {
                    sendMessage = this.marketTickerRegister.flush();
                    if (sendMessage != null){
                        sendAndNotifyMessage(sendMessage);
                    };
                } catch(error:Error) {
                    logger.error(error.message);
                    logger.debug(error.getStackTrace());
                };
            };
        }
        public function lock():void{
            this.isLock = true;
            this.isDirty = false;
        }
        public function unlock():void{
            this.isLock = false;
            if (this.isDirty){
                this.sendFromRegister();
            };
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.message.*;
    import flash.utils.*;
    import com.settrade.streaming5.message.request.*;

    public class UniqueLockService extends Service implements Lockable {

        private var messageMap:Dictionary;
        private var isLock:Boolean;

        public function UniqueLockService(){
            super();
            this.messageMap = new Dictionary();
            this.isLock = false;
        }
        protected function isValidKey(key:Object):Boolean{
            return (true);
        }
        protected function createMessage(key:Object):RequestMessage{
            return (null);
        }
        public function lock():void{
            this.isLock = true;
        }
        public function unlock():void{
            this.isLock = false;
            this.sendMessageFromQueue();
        }
        protected function sendRequestMessage(key:Object):Number{
            var messageId:Number = this.insertMessageToQueue(key);
            if (!this.isLock){
                this.sendMessageFromQueue();
            };
            return (messageId);
        }
        protected function insertMessageToQueue(key:Object):Number{
            if (!this.isValidKey(key)){
                return (NaN);
            };
            var message:RequestMessage = this.getMessage(key);
            if (message == null){
                message = this.createMessage(key);
                this.messageMap[key] = message;
            };
            return (message.id);
        }
        protected function sendMessageFromQueue():void{
            var message:Message;
            for each (message in this.messageMap) {
                this.sendAndNotifyMessage(message);
            };
            this.messageMap = new Dictionary();
        }
        private function hasMessage(key:Object):Boolean{
            return (!((this.getMessage(key) == null)));
        }
        private function getMessage(key:Object):RequestMessage{
            return (this.messageMap[key]);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.register.*;
    import com.settrade.log.logger.*;

    public class SnapshotService extends Service implements Lockable {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:SnapshotService;

        protected var snapshotRegister:SnapshotRegister;
        public var isLock:Boolean;
        public var isDirty:Boolean;

        public function SnapshotService(){
            super();
            this.snapshotRegister = SnapshotRegister.getInstance();
            this.isLock = false;
            this.isDirty = false;
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():SnapshotService{
            if (instance == null){
                instance = new (SnapshotService)();
            };
            return (instance);
        }

        public function reRegistSnapshot(instrumentList:Array, source:Object, flushFlag:Boolean=true):void{
            logger.info("Re Regist Snapshot");
            if ((((instrumentList.length > 0)) || ((this.snapshotRegister.getRegistList(source).length > 0)))){
                this.unregistSource(source, false);
                this.registSnapshot(instrumentList, source, false);
                if (flushFlag){
                    if (this.isLock){
                        this.isDirty = true;
                    } else {
                        this.sendFromRegister();
                    };
                };
            };
        }
        public function registSnapshot(instrumentList:Array, source:Object, flushFlag:Boolean=true):void{
            var registList:Vector.<String>;
            var instrument:String;
            var isSum:Boolean;
            var message:SnapshotRequestMessage;
            logger.info("Regist Snapshot");
            if (instrumentList.length > 0){
                registList = new Vector.<String>();
                for each (instrument in instrumentList) {
                    registList.push(instrument);
                };
                logger.trace((registList + ""));
                isSum = false;
                message = new SnapshotRequestMessage(registList, new Vector.<String>());
                this.snapshotRegister.regist(message, source);
                if (flushFlag){
                    if (this.isLock){
                        this.isDirty = true;
                    } else {
                        this.sendFromRegister();
                    };
                };
            };
        }
        public function unregistSnapshot(instrumentList:Array, source:Object, flushFlag:Boolean=true):void{
            var unregistList:Vector.<String>;
            var instrument:String;
            var isSum:Boolean;
            var message:SnapshotRequestMessage;
            logger.info("Regist Snapshot");
            if (this.snapshotRegister.getRegistList(source).length > 0){
                unregistList = new Vector.<String>();
                for each (instrument in instrumentList) {
                    unregistList.push(instrument);
                };
                isSum = false;
                message = new SnapshotRequestMessage(new Vector.<String>(), unregistList);
                this.snapshotRegister.unregist(message, source);
                if (flushFlag){
                    if (this.isLock){
                        this.isDirty = true;
                    } else {
                        this.sendFromRegister();
                    };
                };
            };
        }
        public function unregistSource(source:Object, flushFlag:Boolean=true):void{
            logger.info("Unregist Source");
            this.snapshotRegister.unregistSource(source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        private function sendFromRegister():void{
            var sendMessage:* = null;
            if (this.isLock){
                this.isDirty = true;
            } else {
                logger.trace("sendFromRegister");
                try {
                    sendMessage = this.snapshotRegister.flush();
                    if (sendMessage != null){
                        sendAndNotifyMessage(sendMessage);
                    };
                } catch(error:Error) {
                    logger.error(error.message);
                    logger.debug(error.getStackTrace());
                };
            };
        }
        public function lock():void{
            this.isLock = true;
            this.isDirty = false;
        }
        public function unlock():void{
            this.isLock = false;
            if (this.isDirty){
                this.sendFromRegister();
            };
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class PlaceOrderEquityService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        public static var instance:PlaceOrderEquityService = null;

        protected var accountManager:AccountManager;

        public function PlaceOrderEquityService(){
            super();
            this.accountManager = AccountManager.getInstance();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():PlaceOrderEquityService{
            if (instance == null){
                instance = new (PlaceOrderEquityService)();
            };
            return (instance);
        }

        public function placeOrder(instrumentId:String, orderSide:OrderSide, quantity:String, price:String, priceType:PriceType, validity:Validity, pin:String, nvdrFlag:Boolean=false, icebergVolume:String="", account:Account=null, isDeposit:Boolean=false):Number{
            return (this.placeOrderSub(instrumentId, orderSide, quantity, price, priceType, validity, pin, nvdrFlag, icebergVolume, false, account, isDeposit));
        }
        public function placeOrderMM(instrumentId:String, orderSide:OrderSide, quantity:String, price:String, priceType:PriceType, validity:Validity, pin:String, nvdrFlag:Boolean=false, icebergVolume:String="", account:Account=null, isDeposit:Boolean=false):Number{
            return (this.placeOrderSub(instrumentId, orderSide, quantity, price, priceType, validity, pin, nvdrFlag, icebergVolume, true, account, isDeposit));
        }
        private function placeOrderSub(instrumentId:String, orderSide:OrderSide, quantity:String, price:String, priceType:PriceType, validity:Validity, pin:String, nvdrFlag:Boolean=false, icebergVolume:String="", isMarketMaker:Boolean=false, account:Account=null, isDeposit:Boolean=false):Number{
            var message:PlaceOrderEquityRequestMessage;
            var accountEquity:AccountEquity;
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            if (account.system.isEquity()){
                message = new PlaceOrderEquityRequestMessage();
                accountEquity = AccountEquity(account);
                message.instrumentId = instrumentId;
                message.quantity = StreamingNumberFormatter.removeComma(quantity);
                message.price = StreamingNumberFormatter.removeComma(price);
                message.priceType = priceType;
                message.orderSide = orderSide;
                message.validity = validity;
                message.pin = pin;
                message.nvdrFlag = nvdrFlag;
                message.icebergVolume = icebergVolume;
                message.isMarketMaker = isMarketMaker;
                message.isDeposit = isDeposit;
                message.accountNo = accountEquity.accountNumber;
                message.clientType = accountEquity.clientType;
                this.sendAndNotifyMessage(message);
                return (message.id);
            };
            logger.error("Invalid Account for System");
            return (NaN);
        }
        public function confirmedOrder(message:PlaceOrderEquityRequestMessage):Number{
            var confirmMessage:PlaceOrderEquityConfirmRequestMessage = new PlaceOrderEquityConfirmRequestMessage(message);
            sendAndNotifyMessage(confirmMessage);
            return (confirmMessage.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class OptionsStrikePriceListService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var _instance:OptionsStrikePriceListService;

        public function OptionsStrikePriceListService(){
            super();
            if (_instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():OptionsStrikePriceListService{
            if (_instance == null){
                _instance = new (OptionsStrikePriceListService)();
            };
            return (_instance);
        }

        public function getOptionsStrikePriceList(listName:String):Number{
            logger.debug((("Get options strike price list for list name [" + listName) + "]"));
            var message:OptionsStrikePriceListRequestMessage = new OptionsStrikePriceListRequestMessage(listName);
            sendAndNotifyMessage(message);
            return (message.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class InstrumentListService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:InstrumentListService;

        protected var instrumentListNameManager:InstrumentListNameManager;
        protected var instrumentListManager:InstrumentListManager;
        protected var favouriteListManager:FavouriteListManager;
        protected var instrumentListRegisterService:InstrumentListRegisterService;

        public function InstrumentListService(){
            this.instrumentListNameManager = InstrumentListNameManager.getInstance();
            this.instrumentListManager = InstrumentListManager.getInstance();
            this.favouriteListManager = FavouriteListManager.getInstance();
            this.instrumentListRegisterService = InstrumentListRegisterService.getInstance();
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():InstrumentListService{
            if (instance == null){
                instance = new (InstrumentListService)();
            };
            return (instance);
        }

        public function getFavouriteList():Array{
            return (this.favouriteListManager.getFavouriteListName());
        }
        public function getBrokerFavouriteListName():InstrumentListName{
            return (this.instrumentListNameManager.brokerFavouriteName);
        }
        public function getActiveList():Array{
            return (this.instrumentListNameManager.activeList);
        }
        public function getSecurityTypeList():Array{
            return (this.instrumentListNameManager.securityList);
        }
        public function getTfexActiveList():Array{
            return (this.instrumentListNameManager.tfexActiveList);
        }
        public function getAllUnderlyingsList():Array{
            return (this.instrumentListNameManager.allUnderlyingsList);
        }
        public function hasListNameInAllUnderlyingList(listName:String):Boolean{
            var instrumentListName:InstrumentListName;
            for each (instrumentListName in this.instrumentListNameManager.allUnderlyingsList) {
                if (instrumentListName.listName == listName){
                    return (true);
                };
            };
            return (false);
        }
        public function getOptionsActiveList():Array{
            return (this.instrumentListNameManager.optionsActiveList);
        }
        public function getAllSymbolList():Array{
            return (this.instrumentListNameManager.allSymbolList);
        }
        public function getMarketList():Array{
            return (this.instrumentListNameManager.marketList);
        }
        public function getTwoLevelList():Array{
            return (this.instrumentListNameManager.twoLevelListNameArray);
        }
        public function getTwoLevelListByName(name:String):Array{
            return (this.instrumentListNameManager.twoLevelListDictionary[name]);
        }
        public function isTwoLevelList(name:String):Boolean{
            var instrumentListName:InstrumentListName;
            for each (instrumentListName in this.instrumentListNameManager.twoLevelListNameArray) {
                if (instrumentListName.listName == name){
                    return (true);
                };
            };
            return (false);
        }
        public function getOptionsList():Number{
            var message:InstrumentListRequestMessage = new InstrumentListRequestMessage(".all counters", "", "options", "", StreamingAttribute.isGoldOnly, StreamingAttribute.isSubBroker);
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function getFavouriteListByListName(listName:String):Array{
            return (this.favouriteListManager.getFavouriteInstrumentListByListName(listName));
        }
        public function getInstrumentList(listName:String, subListName:String="", boardType:String="", boardSubType:String="", source:Object=null):Number{
            var message:InstrumentListRequestMessage = new InstrumentListRequestMessage(listName, subListName, boardType, boardSubType, StreamingAttribute.isGoldOnly, StreamingAttribute.isSubBroker);
            if (source != null){
                if (this.instrumentListRegisterService.isRegisterInstrumentList(listName)){
                    this.instrumentListRegisterService.reRegistInstrumentList(message, source, false);
                } else {
                    this.unregistSource(source);
                };
            };
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function unregistSource(source:Object):void{
            this.instrumentListRegisterService.unregistSource(source, true);
        }
        public function getAllInstrumentList():Number{
            var mainList:String = ".A";
            var boardType:String = "";
            if (StreamingAttribute.systemMarket.isEquity()){
                mainList = ".a equity index";
                boardType = "";
            } else {
                if (StreamingAttribute.systemMarket.isDeriv()){
                    mainList = ".a deriv index";
                    boardType = "";
                };
            };
            var message:InstrumentListRequestMessage = new InstrumentListRequestMessage(mainList, "", boardType, "", StreamingAttribute.isGoldOnly, StreamingAttribute.isSubBroker);
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function isValidInstrumentId(instrumentId:String):Boolean{
            var instrumentList:Array = this.instrumentListManager.getInstrumentListWithOutException();
            return (!((instrumentList.indexOf(instrumentId) == -1)));
        }
        public function isValidInstrumentIdIncludeException(instrumentId:String):Boolean{
            var instrumentList:Array = this.instrumentListManager.getInstrumentSymbolList();
            return (!((instrumentList.indexOf(instrumentId) == -1)));
        }
        public function getInstrumentType(instrumentId:String):InstrumentType{
            if (this.instrumentListManager.getInstrumentListByInstrumentListType(InstrumentListType.EQUITY).indexOf(instrumentId) > -1){
                return (InstrumentType.EQUITY);
            };
            if ((((this.instrumentListManager.getInstrumentListByInstrumentListType(InstrumentListType.FUTURES).indexOf(instrumentId) > -1)) || ((this.instrumentListManager.getInstrumentListByInstrumentListType(InstrumentListType.FUTURES_UNDERLYING).indexOf(instrumentId) > -1)))){
                return (InstrumentType.FUTURES);
            };
            if (this.instrumentListManager.getInstrumentListByInstrumentListType(InstrumentListType.OPTIONS).indexOf(instrumentId) > -1){
                return (InstrumentType.OPTIONS);
            };
            if ((((((this.instrumentListManager.getInstrumentListByInstrumentListType(InstrumentListType.INDEX).indexOf(instrumentId) > -1)) || ((this.instrumentListManager.getInstrumentListByInstrumentListType(InstrumentListType.INDUSTRY).indexOf(instrumentId) > -1)))) || ((this.instrumentListManager.getInstrumentListByInstrumentListType(InstrumentListType.SECTOR).indexOf(instrumentId) > -1)))){
                return (InstrumentType.INDEX);
            };
            return (InstrumentType.NO_TYPE);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.message.response.orderstatus.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class CancelOrderEquityService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        public static var instance:CancelOrderEquityService = null;

        protected var accountManager:AccountManager;
        protected var orderManager:OrderManager;

        public function CancelOrderEquityService(){
            super();
            this.accountManager = AccountManager.getInstance();
            this.orderManager = OrderManager.getInstance();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():CancelOrderEquityService{
            if (instance == null){
                instance = new (CancelOrderEquityService)();
            };
            return (instance);
        }

        public function cancelOrder(orderNumberList:Array, pin:String, account:AccountEquity=null):Number{
            var orderNumber:String;
            var orderStatus:OrderStatusEquity;
            var cancelOrderEquityMessage:CancelOrderEquityRequestMessage = new CancelOrderEquityRequestMessage();
            for each (orderNumber in orderNumberList) {
                orderStatus = OrderStatusEquity(this.orderManager.getOrderByAccountAndOrderNumber(account, orderNumber));
                cancelOrderEquityMessage.addOrder(orderStatus);
            };
            cancelOrderEquityMessage.pin = pin;
            cancelOrderEquityMessage.accountNo = account.accountNumber;
            cancelOrderEquityMessage.clientType = "";
            sendAndNotifyMessage(cancelOrderEquityMessage);
            return (cancelOrderEquityMessage.id);
        }
        public function cancelOrderByOrderStatusMktRep(orderList:Array):Number{
            var order:OrderStatusEquity;
            var cancelOrderEquityMessage:CancelOrderEquityMultipleAccountRequestMessage = new CancelOrderEquityMultipleAccountRequestMessage();
            for each (order in orderList) {
                cancelOrderEquityMessage.addOrder(order);
            };
            sendAndNotifyMessage(cancelOrderEquityMessage);
            return (cancelOrderEquityMessage.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.register.*;
    import com.settrade.log.logger.*;

    public class VolumeByPriceDetailService extends Service implements Lockable {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:VolumeByPriceDetailService;

        protected var volumeByPriceDetailRegister:VolumeByPriceDetailRegister;
        protected var volumeByPriceManager:VolumeByPriceManager;
        public var isLock:Boolean;
        public var isDirty:Boolean;

        public function VolumeByPriceDetailService(){
            super();
            this.volumeByPriceDetailRegister = VolumeByPriceDetailRegister.getInstance();
            this.volumeByPriceManager = VolumeByPriceManager.getInstance();
            this.isLock = false;
            this.isDirty = false;
        }
        public static function getInstance():VolumeByPriceDetailService{
            if (instance == null){
                instance = new (VolumeByPriceDetailService)();
            };
            return (instance);
        }

        public function reRegistVolumeByPriceDetail(instrumentId:String, source:Object, flushFlag:Boolean=true):void{
            logger.info("Re Regist VolumeByPriceDetail");
            this.unregistSource(source, false);
            this.registVolumeByPriceDetail(instrumentId, source, false);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function registVolumeByPriceDetail(instrumentId:String, source:Object, flushFlag:Boolean=true):void{
            logger.info("Regist VolumeByPriceDetail");
            var token:VolumeByPriceDetailRequestMessage = new VolumeByPriceDetailRequestMessage(instrumentId);
            this.volumeByPriceDetailRegister.regist(token, source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function unregistVolumeByPriceDetail(instrumentId:String, source:Object, flushFlag:Boolean=true):void{
            logger.info("Unregist VolumeByPriceDetail");
            var token:VolumeByPriceDetailRequestMessage = new VolumeByPriceDetailRequestMessage(instrumentId);
            this.volumeByPriceDetailRegister.unregist(token, source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function unregistSource(source:Object, flushFlag:Boolean=true):void{
            logger.info("Unregist Source");
            this.volumeByPriceDetailRegister.unregistSource(source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        private function sendFromRegister():void{
            var sendMessage:* = null;
            if (this.isLock){
                this.isDirty = true;
            } else {
                try {
                    sendMessage = this.volumeByPriceDetailRegister.flush();
                    this.volumeByPriceManager.triggerRegister();
                    if (sendMessage != null){
                        sendAndNotifyMessage(sendMessage);
                    };
                } catch(error:Error) {
                    logger.error(error.message);
                    logger.debug(error.getStackTrace());
                };
            };
        }
        public function lock():void{
            this.isLock = true;
            this.isDirty = false;
        }
        public function unlock():void{
            this.isLock = false;
            if (this.isDirty){
                this.sendFromRegister();
            };
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.message.control.notification.*;
    import com.settrade.streaming5.message.feed.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.config.*;
    import com.settrade.streaming5.message.response.orderstatus.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class NotificationService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:NotificationService = null;

        public function NotificationService(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():NotificationService{
            if (instance == null){
                instance = new (NotificationService)();
            };
            return (instance);
        }

        public function getNotificationStartup():Number{
            var config:NotificationLastViewConfig = NotificationLastViewConfig(SettingManager.getInstance().getConfig(ConfigType.NOTIFICATION_LAST_VIEW));
            var message:NotificationStartupRequestMessage = new NotificationStartupRequestMessage(config.time);
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function notifyPriceOrderAlert(matchCriteria:PriceVolumeCondition, message:InstrumentTickerFeedMessage):void{
            var notifyMessage:PriceVolumeNotificationMessage = new PriceVolumeNotificationMessage(this.getDate(), this.getTime(), matchCriteria, message);
            dispatcher.notifyControlMessage(notifyMessage);
        }
        public function notifyOrderMatchEquity(message:OrderStatusEquityFeedMessage):void{
            if (StreamingAttribute.isMarketRep){
                return;
            };
            var account:Account = AccountManager.getInstance().getAccountByAccountNumberAndSystem(message.accountNumber, System.EQUITY);
            var orderStatus:IOrderStatus = OrderManager.getInstance().getOrderByAccountAndOrderNumber(account, message.orderNumber);
            var notifyMessage:OrderNotificationMessage = new OrderNotificationMessage(this.getDate(), this.getTime(), orderStatus.clone());
            dispatcher.notifyControlMessage(notifyMessage);
        }
        public function notifyOrderMatchDerivatives(message:OrderStatusDerivativesFeedMessage):void{
            if (StreamingAttribute.isMarketRep){
                return;
            };
            var account:Account = AccountManager.getInstance().getAccountByAccountNumberAndSystem(message.accountNumber, System.DERIV);
            var orderStatus:IOrderStatus = OrderManager.getInstance().getOrderByAccountAndOrderNumber(account, message.orderNumber);
            var notifyMessage:OrderNotificationMessage = new OrderNotificationMessage(this.getDate(), this.getTime(), orderStatus.clone());
            dispatcher.notifyControlMessage(notifyMessage);
        }
        private function getTime():String{
            var time:Date = SyncTimeManager.getInstance().getCurrentTime();
            return (((StreamingNumberFormatter.formatIntWithLeadingZero(time.hours, 2) + ":") + StreamingNumberFormatter.formatIntWithLeadingZero(time.minutes, 2)));
        }
        private function getDate():String{
            var time:Date = SyncTimeManager.getInstance().getCurrentTime();
            return ("");
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.message.response.orderstatus.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class ChangeOrderEquityService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        public static var instance:ChangeOrderEquityService = null;

        protected var accountManager:AccountManager;
        protected var orderManager:OrderManager;

        public function ChangeOrderEquityService(){
            super();
            this.accountManager = AccountManager.getInstance();
            this.orderManager = OrderManager.getInstance();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():ChangeOrderEquityService{
            if (instance == null){
                instance = new (ChangeOrderEquityService)();
            };
            return (instance);
        }

        public function changeOrderPrice(orderNumber:String, account:AccountEquity, newPrice:String, pin:String):Number{
            var orderStatus:OrderStatusEquity = OrderStatusEquity(this.orderManager.getOrderByAccountAndOrderNumber(account, orderNumber));
            var message:ChangeOrderEquityRequestMessage = new ChangeOrderEquityRequestMessage(account.accountNumber, orderStatus.orderNumberSeos, newPrice, "", pin, orderStatus.orderNumberFis, orderStatus.tradeDate);
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function changeOrderPriceVolume(orderNumber:String, account:AccountEquity, newPrice:String, newVolume:String, pin:String):Number{
            var orderStatus:OrderStatusEquity = OrderStatusEquity(this.orderManager.getOrderByAccountAndOrderNumber(account, orderNumber));
            var message:ChangeOrderEquityRequestMessage = new ChangeOrderEquityRequestMessage(account.accountNumber, orderStatus.orderNumberSeos, newPrice, newVolume, pin, orderStatus.orderNumberFis, orderStatus.tradeDate);
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function confirmChangeOrder(requestMessage:ChangeOrderEquityRequestMessage):Number{
            var message:ChangeOrderEquityConfirmRequestMessage = new ChangeOrderEquityConfirmRequestMessage(requestMessage);
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function changeOrderPriceVolumeByOrderMktRep(order:OrderStatusEquity, newPrice:String, newVolume:String):Number{
            var message:ChangeOrderEquityRequestMessage = new ChangeOrderEquityRequestMessage(order.accountNumber, order.orderNumber, newPrice, newVolume, "", order.orderNumberSeos, order.tradeDate);
            sendAndNotifyMessage(message);
            return (message.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import flash.events.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.message.response.orderstatus.*;
    import flash.utils.*;
    import com.settrade.streaming5.common.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class AccountInformationEquityService extends MessageTypeLockService {

        private static const ORDER_STATUS:int = 1;
        private static const PORFOLIO:int = 2;
        private static const DEAL_SUMMARY:int = 4;
        private static const ACCOUNT_INFORMATION:int = 8;
        private static const ACCOUNT_INFORMATION_LONG:int = 16;

        private static var logger:Logger = new Logger(prototype.constructor);
        public static var instance:AccountInformationEquityService = null;

        protected var accountManager:AccountManager;

        public function AccountInformationEquityService(){
            super();
            this.accountManager = AccountManager.getInstance();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():AccountInformationEquityService{
            if (instance == null){
                instance = new (AccountInformationEquityService)();
            };
            return (instance);
        }

        public function getOrderStatus(account:Account=null, needLoadFromCache:Boolean=false):Number{
            var cacheOrderStatusEquityResponseMessage:* = null;
            var timer:* = null;
            var messageId:* = NaN;
            var account = account;
            var needLoadFromCache:Boolean = needLoadFromCache;
            logger.info("Get Order Status");
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            if (!account.system.isEquity()){
                logger.error("Invalid System");
                return (NaN);
            };
            var canLoadFromCache:* = OrderManager.getInstance().hasOrderStatusByAccount(account);
            if (((needLoadFromCache) && (canLoadFromCache))){
                cacheOrderStatusEquityResponseMessage = new OrderStatusEquityResponseMessage(new OrderStatusEquityRequestMessage(account.accountNumber), null, account.accountNumber);
                cacheOrderStatusEquityResponseMessage.orderStatusList = OrderManager.getInstance().getOrderListByAccount(account).slice(0);
                timer = new Timer(100, 1);
                timer.addEventListener(TimerEvent.TIMER, function ():void{
                    notifyReceiveMessage(cacheOrderStatusEquityResponseMessage);
                });
                timer.start();
                return (cacheOrderStatusEquityResponseMessage.requestId);
            };
            messageId = sendRequestMessage(account, ORDER_STATUS);
            return (messageId);
        }
        public function getPortfolio(account:Account=null):Number{
            logger.info("Get Portfolio");
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            if (!account.system.isEquity()){
                logger.error("Invalid System");
                return (NaN);
            };
            var messageId:Number = sendRequestMessage(account, PORFOLIO);
            return (messageId);
        }
        public function getDealSummary(account:Account=null):Number{
            logger.info("Get Deal Summary");
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            if (!account.system.isEquity()){
                logger.error("Invalid System");
                return (NaN);
            };
            var messageId:Number = sendRequestMessage(account, DEAL_SUMMARY);
            return (messageId);
        }
        public function getAccountInformation(account:Account=null, needLoadFromCache:Boolean=false):Number{
            var cacheAccountInfoEquityResponseMessage:* = null;
            var requestId:* = NaN;
            var timer:* = null;
            var messageId:* = NaN;
            var account = account;
            var needLoadFromCache:Boolean = needLoadFromCache;
            logger.info("Get Account Information");
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            if (!account.system.isEquity()){
                logger.error("Invalid System");
                return (NaN);
            };
            var canLoadFromCache:* = AccountInfoManager.getInstance().hasAccountInfoByAccount(account);
            if (((needLoadFromCache) && (canLoadFromCache))){
                cacheAccountInfoEquityResponseMessage = AccountInfoManager.getInstance().getEquityAccountInfoByAccount(account);
                requestId = new Number(cacheAccountInfoEquityResponseMessage.requestId);
                timer = new Timer(100, 1);
                timer.addEventListener(TimerEvent.TIMER, function ():void{
                    notifyReceiveMessage(cacheAccountInfoEquityResponseMessage);
                });
                timer.start();
                return (requestId);
            };
            messageId = sendRequestMessage(account, ACCOUNT_INFORMATION);
            return (messageId);
        }
        public function getAllAccountInformation(account:Account=null):Number{
            logger.info("Get All Account Information");
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            if (!account.system.isEquity()){
                logger.error("Invalid System");
                return (NaN);
            };
            var messageId:Number = sendRequestMessage(account, ((ORDER_STATUS | PORFOLIO) | ACCOUNT_INFORMATION));
            return (messageId);
        }
        public function getAllAccountAndDealInformation(account:Account=null):Number{
            logger.info("Get All Account and Deal Information");
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            if (!account.system.isEquity()){
                logger.error("Invalid System");
                return (NaN);
            };
            var messageId:Number = sendRequestMessage(account, (((ORDER_STATUS | PORFOLIO) | ACCOUNT_INFORMATION) | DEAL_SUMMARY));
            return (messageId);
        }
        public function getAccountInformationLong(account:Account=null):Number{
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            if (!account.system.isEquity()){
                logger.error("Invalid System");
                return (NaN);
            };
            var messageId:Number = sendRequestMessage(account, ACCOUNT_INFORMATION_LONG);
            return (messageId);
        }
        override protected function isValidKey(key:Object):Boolean{
            var accountEquity:AccountEquity = AccountEquity(key);
            return (accountEquity.system.isEquity());
        }
        override protected function createMessage(key:Object, messageType:int):Vector.<RequestMessage>{
            var accountEquity:AccountEquity = AccountEquity(key);
            var accountNumber:String = accountEquity.accountNumber;
            var accountType:String = accountEquity.tradeType;
            var list:Vector.<RequestMessage> = new Vector.<RequestMessage>();
            if (hasMessageType(messageType, ORDER_STATUS)){
                list.push(new OrderStatusEquityRequestMessage(accountNumber));
            };
            if (hasMessageType(messageType, ACCOUNT_INFORMATION)){
                list.push(new AccountInfoEquityRequestMessage(accountNumber, accountType));
            };
            if (hasMessageType(messageType, PORFOLIO)){
                list.push(new PortfolioEquityRequestMessage(accountNumber, accountType));
            };
            if (hasMessageType(messageType, DEAL_SUMMARY)){
                list.push(new DealSummaryEquityRequestMessage(accountNumber));
            };
            if (hasMessageType(messageType, ACCOUNT_INFORMATION_LONG)){
                list.push(new AccountInfoLongEquityRequestMessage(accountNumber));
            };
            return (list);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class StaticDataService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        public static var instance:StaticDataService = null;

        protected var accountManager:AccountManager;

        public function StaticDataService(){
            super();
            this.accountManager = AccountManager.getInstance();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():StaticDataService{
            if (instance == null){
                instance = new (StaticDataService)();
            };
            return (instance);
        }

        public function getStaticData(instrumentId:String, system:System):Number{
            var message:StaticDataRequestMessage = new StaticDataRequestMessage(instrumentId, system);
            sendAndNotifyMessage(message);
            return (message.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class VolumeByPriceService extends UniqueLockService {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:VolumeByPriceService;

        public function VolumeByPriceService(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():VolumeByPriceService{
            if (instance == null){
                instance = new (VolumeByPriceService)();
            };
            return (instance);
        }

        public function getVolumeByPrice(instrumentId:String):Number{
            var messageId:Number = sendRequestMessage(instrumentId);
            return (messageId);
        }
        override protected function isValidKey(key:Object):Boolean{
            return (true);
        }
        override protected function createMessage(key:Object):RequestMessage{
            return (new VolumeByPriceRequest(String(key)));
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.enumuration.*;
    import flash.events.*;
    import com.settrade.streaming5.manager.*;
    import flash.utils.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class AccountNameService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:AccountNameService = null;

        protected var accountManager:AccountManager;

        public function AccountNameService(){
            super();
            this.accountManager = AccountManager.getInstance();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():AccountNameService{
            if (instance == null){
                instance = new (AccountNameService)();
            };
            return (instance);
        }

        public function getDerivativesAccountName():Number{
            var accountNumber:String = this.accountManager.currentAccount.accountNumber;
            var system:System = this.accountManager.currentAccount.system;
            var message:AccountNameRequestMessage = new AccountNameRequestMessage(system, accountNumber, true, true, false);
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function getAccountName(account:Account, needLoadFromCache:Boolean=true):Number{
            var cacheAccountNameResponseMessage:* = null;
            var requestId:* = NaN;
            var timer:* = null;
            var accountNumber:* = null;
            var system:* = null;
            var message:* = null;
            var account:* = account;
            var needLoadFromCache:Boolean = needLoadFromCache;
            var canLoadFromCache:* = AccountInfoManager.getInstance().hasAccountName(account);
            if (((needLoadFromCache) && (canLoadFromCache))){
                cacheAccountNameResponseMessage = AccountInfoManager.getInstance().getAccountName(account);
                requestId = new Number(cacheAccountNameResponseMessage.requestId);
                timer = new Timer(100, 1);
                timer.addEventListener(TimerEvent.TIMER, function ():void{
                    notifyReceiveMessage(cacheAccountNameResponseMessage);
                });
                timer.start();
                return (requestId);
            };
            accountNumber = account.accountNumber;
            system = account.system;
            message = new AccountNameRequestMessage(system, accountNumber, true, true, false);
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function getAccountAndTraderName(account:Account):Number{
            var accountNumber:String = account.accountNumber;
            var system:System = account.system;
            var message:AccountNameRequestMessage = new AccountNameRequestMessage(system, accountNumber, true, true, true);
            sendAndNotifyMessage(message);
            return (message.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.widget.enumuration.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;

    public class WidgetPageStatusService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:WidgetPageStatusService;

        public function WidgetPageStatusService(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():WidgetPageStatusService{
            if (instance == null){
                instance = new (WidgetPageStatusService)();
            };
            return (instance);
        }

        public function notifyWidgetPageStatus(pageName:String, oldStatus:WidgetPageStatus, newStatus:WidgetPageStatus){
            var message:WidgetPageStatusMessage = new WidgetPageStatusMessage(pageName, oldStatus, newStatus);
            this.notifyControlMessage(message);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import flash.events.*;
    import flash.utils.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.register.*;
    import com.settrade.log.logger.*;

    public class InstrumentTickerOddLotService extends Service implements Lockable {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:InstrumentTickerOddLotService;

        const PULL_INTERVAL:Number = 5000;

        protected var instrumentTickerRegister:InstrumentTickerOddLotRegister;
        public var isLock:Boolean;
        public var isDirty:Boolean;
        protected var intervalPullTimer:Timer;

        public function InstrumentTickerOddLotService(){
            super();
            this.instrumentTickerRegister = InstrumentTickerOddLotRegister.getInstance();
            this.isLock = false;
            this.isDirty = false;
            this.intervalPullTimer = new Timer(this.PULL_INTERVAL);
            this.intervalPullTimer.addEventListener(TimerEvent.TIMER, this.onIntervalPullTimerTick);
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():InstrumentTickerOddLotService{
            if (instance == null){
                instance = new (InstrumentTickerOddLotService)();
            };
            return (instance);
        }

        public function reRegistTicker(instrumentList:Array, source:Object, flushFlag:Boolean=true):void{
            logger.info("Re Regist Instrument Ticker");
            this.unregistSource(source, false);
            this.registTicker(instrumentList, source, false);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function registTicker(instrumentList:Array, source:Object, flushFlag:Boolean=true):void{
            var instrument:String;
            var sequenceList:Vector.<int>;
            var isSum:Boolean;
            var message:InstrumentTickerOddLotRequestMessage;
            logger.info("Regist Instrument Ticker");
            var registList:Vector.<String> = new Vector.<String>();
            for each (instrument in instrumentList) {
                registList.push(instrument);
            };
            sequenceList = new Vector.<int>();
            logger.trace((registList + ""));
            isSum = false;
            message = new InstrumentTickerOddLotRequestMessage(registList, new Vector.<String>());
            this.instrumentTickerRegister.regist(message, source);
            if (flushFlag){
                this.sendFromRegister();
            };
            this.intervalPullTimer.start();
        }
        public function unregistTicker(instrumentList:Array, source:Object, flushFlag:Boolean=true):void{
            var instrument:String;
            var isSum:Boolean;
            var message:InstrumentTickerOddLotRequestMessage;
            logger.info("Unregist Instrument Ticker");
            var unregistList:Vector.<String> = new Vector.<String>();
            for each (instrument in instrumentList) {
                unregistList.push(instrument);
            };
            isSum = false;
            message = new InstrumentTickerOddLotRequestMessage(new Vector.<String>(), unregistList);
            this.instrumentTickerRegister.unregist(message, source);
            if (flushFlag){
                this.sendFromRegister();
            };
            if (this.instrumentTickerRegister.getAllRegistList().length == 0){
                this.intervalPullTimer.stop();
            };
        }
        public function unregistSource(source:Object, flushFlag:Boolean=true):void{
            logger.info("Unregist Source");
            this.instrumentTickerRegister.unregistSource(source);
            if (flushFlag){
                this.sendFromRegister();
            };
            if (this.instrumentTickerRegister.getAllRegistList().length == 0){
                this.intervalPullTimer.stop();
            };
        }
        private function sendFromRegister():void{
            var sendMessage:* = null;
            if (this.isLock){
                this.isDirty = true;
            } else {
                try {
                    sendMessage = this.instrumentTickerRegister.flush();
                    if (sendMessage != null){
                        sendAndNotifyMessage(sendMessage);
                    };
                } catch(error:Error) {
                    logger.error(error.message);
                    logger.debug(error.getStackTrace());
                };
            };
        }
        public function lock():void{
            this.isLock = true;
            this.isDirty = false;
        }
        public function unlock():void{
            this.isLock = false;
            if (this.isDirty){
                this.sendFromRegister();
            };
        }
        private function onIntervalPullTimerTick(e:TimerEvent):void{
            logger.info("Interval Pull");
            this.sendFromRegister();
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class AccountListHierachyService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:AccountListHierachyService = null;

        public function AccountListHierachyService(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():AccountListHierachyService{
            if (instance == null){
                instance = new (AccountListHierachyService)();
            };
            return (instance);
        }

        public function getAccountListHeirachyDerivatives():Number{
            var message:AccountListHierachyDerivativeRequestMessage = new AccountListHierachyDerivativeRequestMessage();
            sendAndNotifyMessage(message);
            return (message.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.enumuration.*;
    import flash.events.*;
    import flash.utils.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.register.*;
    import com.settrade.streaming5.message.request.info.*;
    import com.settrade.log.logger.*;

    public class InfoOddLotService extends Service implements Lockable {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:InfoOddLotService;

        const PULL_INTERVAL:Number = 5000;

        protected var infoRegister:InfoOddLotRegister;
        public var isLock:Boolean;
        public var isDirty:Boolean;
        protected var intervalPullTimer:Timer;

        public function InfoOddLotService(){
            super();
            this.infoRegister = InfoOddLotRegister.getInstance();
            this.isLock = false;
            this.isDirty = false;
            this.intervalPullTimer = new Timer(this.PULL_INTERVAL);
            this.intervalPullTimer.addEventListener(TimerEvent.TIMER, this.onIntervalPullTimerTick);
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():InfoOddLotService{
            if (instance == null){
                instance = new (InfoOddLotService)();
            };
            return (instance);
        }

        public function reRegistInfo(instrumentList:Array, source:Object, flushFlag:Boolean=true):void{
            logger.info("Re Regist Info");
            this.unregistSource(source, false);
            this.registInfo(instrumentList, source, false);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function registInfo(instrumentList:Array, source:Object, flushFlag:Boolean=true):void{
            var instrument:String;
            var isSum:Boolean;
            var message:InfoRequestMessage;
            logger.info("Regist Info");
            this.isDirty = true;
            var registList:Vector.<InfoRegisterToken> = new Vector.<InfoRegisterToken>();
            for each (instrument in instrumentList) {
                registList.push(new InfoRegisterToken(instrument, InstrumentInfoType.MARKET));
            };
            logger.trace((registList + ""));
            isSum = false;
            message = new InfoRequestMessage(registList, new Vector.<InfoRegisterToken>());
            this.infoRegister.regist(message, source);
            if (flushFlag){
                this.sendFromRegister();
            };
            this.intervalPullTimer.start();
        }
        public function unregistInfo(instrumentList:Array, source:Object, flushFlag:Boolean=true):void{
            var instrument:String;
            var isSum:Boolean;
            var message:InfoRequestMessage;
            logger.info("Regist Info");
            this.isDirty = true;
            var unregistList:Vector.<InfoRegisterToken> = new Vector.<InfoRegisterToken>();
            for each (instrument in instrumentList) {
                unregistList.push(new InfoRegisterToken(instrument, InstrumentInfoType.MARKET));
            };
            isSum = false;
            message = new InfoRequestMessage(new Vector.<InfoRegisterToken>(), unregistList);
            this.infoRegister.unregist(message, source);
            if (flushFlag){
                this.sendFromRegister();
            };
            if (this.infoRegister.getAllRegistList().length == 0){
                this.intervalPullTimer.stop();
            };
        }
        public function unregistSource(source:Object, flushFlag:Boolean=true):void{
            logger.info("Unregist Source");
            this.isDirty = true;
            this.infoRegister.unregistSource(source);
            if (flushFlag){
                this.sendFromRegister();
            };
            if (this.infoRegister.getAllRegistList().length == 0){
                this.intervalPullTimer.stop();
            };
        }
        public function lock():void{
            this.isLock = true;
            this.isDirty = false;
        }
        public function unlock():void{
            this.isLock = false;
            if (this.isDirty){
                this.sendFromRegister();
            };
        }
        private function sendFromRegister():Number{
            var sendMessage:* = null;
            if (this.isLock){
                this.isDirty = true;
                return (NaN);
            };
            logger.trace("sendFromRegister");
            try {
                sendMessage = this.infoRegister.flush();
                if (sendMessage != null){
                    sendAndNotifyMessage(sendMessage);
                };
            } catch(error:Error) {
                logger.error(error.message);
                logger.debug(error.getStackTrace());
            };
            return ((((sendMessage == null)) ? NaN : sendMessage.id));
        }
        private function onIntervalPullTimerTick(e:TimerEvent):void{
            logger.info("Interval Pull");
            this.sendFromRegister();
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class StubService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        public static var instance:StubService = null;

        public function StubService(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():StubService{
            if (instance == null){
                instance = new (StubService)();
            };
            return (instance);
        }

        public function doStub(data:String){
            var message:StubRequestMessage = new StubRequestMessage(System.NO_SYSTEM, data);
            super.notifySendMessage(message);
            sendMessage(message);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.blocktrade.*;
    import com.settrade.log.logger.*;

    public class BlockTradeService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:BlockTradeService = null;

        public function BlockTradeService(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():BlockTradeService{
            if (instance == null){
                instance = new (BlockTradeService)();
            };
            return (instance);
        }

        public function getInitialData():Number{
            var message:BlockTradeInitRequestMessage = new BlockTradeInitRequestMessage();
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function getTrType(instrumentId:String):Number{
            var message:BlockTradeTrTypeRequestMessage = new BlockTradeTrTypeRequestMessage(instrumentId);
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function placeBlockTrade(accountNumberBuyer:String, accountNumberSeller:String, position:DerivativesPosition, instrumentId:String, volume:String, price:String, trType:TrType, cpm:Cpm, brokerCpm:Cpm):Number{
            var message:BlockTradeRequestMessage = new BlockTradeRequestMessage(accountNumberBuyer, accountNumberSeller, position, instrumentId, volume, price, trType, cpm, brokerCpm);
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function confirmBlockTrade(requestMessage:BlockTradeRequestMessage):Number{
            var message:BlockTradeConfirmRequestMessage = new BlockTradeConfirmRequestMessage(requestMessage);
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function getBlockTradeInto():Number{
            var message:BlockTradeInfoRequestMessage = new BlockTradeInfoRequestMessage();
            sendAndNotifyMessage(message);
            return (message.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.config.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.config.generic.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;

    public class SettingService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:SettingService;

        public function SettingService(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():SettingService{
            if (instance == null){
                instance = new (SettingService)();
            };
            return (instance);
        }

        public function updateConfig(configList:Array):Number{
            var config:IConfig;
            var genericConfig:GenericConfig;
            if (!StreamingAttribute.isPrimaryScreen){
                return (NaN);
            };
            var message:UpdateConfigRequestMessage = new UpdateConfigRequestMessage();
            var hasGenericConfig:Boolean;
            for each (config in configList) {
                if (config.type.isGenericConfig()){
                    hasGenericConfig = true;
                } else {
                    if (config.type.canUpload){
                        message.addConfig(config);
                    };
                };
                this.notifyUpdateLocalConfig(config);
                if (config.type.needReload){
                    ConfigReloadPageManager.getInstance().activate(message.id);
                };
            };
            if (hasGenericConfig){
                genericConfig = GenericSettingManager.getInstance().getGenericConfig();
                message.addConfig(genericConfig);
                this.notifyUpdateLocalConfig(genericConfig);
                if (genericConfig.type.needReload){
                    ConfigReloadPageManager.getInstance().activate(message.id);
                };
            };
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function updateGenericConfig():Number{
            return (this.updateConfig([GenericSettingManager.getInstance().getGenericConfig()]));
        }
        public function notifyUpdateLocalConfig(config:IConfig):void{
            dispatcher.notifyControlMessage(new ConfigChangeMessage(config));
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class OrderStatusSearchService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:OrderStatusSearchService = null;

        public function OrderStatusSearchService(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():OrderStatusSearchService{
            if (instance == null){
                instance = new (OrderStatusSearchService)();
            };
            return (instance);
        }

        public function searchOrderEquity(accountNumber:String, orderNumber:String, side:OrderSide, instrumentId:String, trusteeId:TrusteeId, status:OrderFilterStatus):Number{
            var message:OrderStatusSearchEquityRequestMessage = new OrderStatusSearchEquityRequestMessage(accountNumber, orderNumber, side, instrumentId, trusteeId, status);
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function searchOrderDerivatives(accountNumber:String, status:OrderFilterStatus, orderNumber:String, tfexOrderNumber:String, instrumentId:String, side:DerivativesOrderSide, enterId:String, priceType:DerivativesPriceType, validity:DerivativesValidity, stopId:String, validityDate:Date):Number{
            var message:OrderStatusSearchDerivativesRequestMessage = new OrderStatusSearchDerivativesRequestMessage(accountNumber, orderNumber, status, tfexOrderNumber, instrumentId, side, enterId, priceType, validity, stopId, validityDate);
            sendAndNotifyMessage(message);
            return (message.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.log.logger.*;

    public class AccountInformationService {

        private static var logger:Logger = new Logger(prototype.constructor);
        public static var instance:AccountInformationService = null;

        protected var accountManager:AccountManager;
        protected var allPortfolioManager:AllPortfolioManager;
        protected var allDealSummaryManager:AllDealSummaryManager;
        protected var accountInformationEquityService:AccountInformationEquityService;
        protected var accountInformationDerivativesService:AccountInformationDerivativesService;

        public function AccountInformationService(){
            super();
            this.accountManager = AccountManager.getInstance();
            this.allPortfolioManager = AllPortfolioManager.getInstance();
            this.allDealSummaryManager = AllDealSummaryManager.getInstance();
            this.accountInformationEquityService = AccountInformationEquityService.getInstance();
            this.accountInformationDerivativesService = AccountInformationDerivativesService.getInstance();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():AccountInformationService{
            if (instance == null){
                instance = new (AccountInformationService)();
            };
            return (instance);
        }

        public function getPortfolio(account:Account=null):Number{
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            if (account.system.isEquity()){
                return (this.accountInformationEquityService.getPortfolio(account));
            };
            if (account.system.isDeriv()){
                return (this.accountInformationDerivativesService.getPortfolio(account));
            };
            return (NaN);
        }
        public function getAllAccountTotalPortfolio():void{
            this.allPortfolioManager.getAllPortfolio();
        }
        public function getDealSummary(account:Account=null):Number{
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            if (account.system.isEquity()){
                return (this.accountInformationEquityService.getDealSummary(account));
            };
            if (account.system.isDeriv()){
                return (this.accountInformationDerivativesService.getDealSummary(account));
            };
            return (NaN);
        }
        public function getAllAccountTotalDealSummary():void{
            this.allDealSummaryManager.getAllDealSummary();
        }
        public function getOrderStatus(account:Account=null):Number{
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            if (account.system.isEquity()){
                return (this.accountInformationEquityService.getOrderStatus(account));
            };
            if (account.system.isDeriv()){
                return (this.accountInformationDerivativesService.getOrderStatus(account));
            };
            return (NaN);
        }
        public function getAccountInformation(account:Account=null):Number{
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            if (account.system.isEquity()){
                return (this.accountInformationEquityService.getAccountInformation(account));
            };
            if (account.system.isDeriv()){
                return (this.accountInformationDerivativesService.getAccountInformation(account));
            };
            return (NaN);
        }
        public function getAllAccountInformation(account:Account=null):Number{
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            if (account.system.isEquity()){
                return (this.accountInformationEquityService.getAllAccountInformation(account));
            };
            if (account.system.isDeriv()){
                return (this.accountInformationDerivativesService.getAllAccountInformation(account));
            };
            return (NaN);
        }
        public function getAllAccountAndDealInformation(account:Account=null):Number{
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            if (account.system.isEquity()){
                return (this.accountInformationEquityService.getAllAccountAndDealInformation(account));
            };
            if (account.system.isDeriv()){
                return (this.accountInformationDerivativesService.getAllAccountAndDealInformation(account));
            };
            return (NaN);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.enumuration.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.register.*;
    import com.settrade.streaming5.message.request.info.*;
    import com.settrade.log.logger.*;

    public class InfoService extends Service implements Lockable {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:InfoService;

        protected var infoRegister:InfoRegister;
        public var isLock:Boolean;
        public var isDirty:Boolean;

        public function InfoService(){
            super();
            this.infoRegister = InfoRegister.getInstance();
            this.isLock = false;
            this.isDirty = false;
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():InfoService{
            if (instance == null){
                instance = new (InfoService)();
            };
            return (instance);
        }

        public function reRegistInfo(instrumentList:Array, source:Object, flushFlag:Boolean=true):void{
            logger.info("Re Regist Info");
            this.unregistSource(source, false);
            this.registInfo(instrumentList, source, false);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function registInfo(instrumentList:Array, source:Object, flushFlag:Boolean=true):void{
            var instrument:String;
            var isSum:Boolean;
            var message:InfoRequestMessage;
            logger.info("Regist Info");
            this.isDirty = true;
            var registList:Vector.<InfoRegisterToken> = new Vector.<InfoRegisterToken>();
            for each (instrument in instrumentList) {
                registList.push(new InfoRegisterToken(instrument, InstrumentInfoType.MARKET));
            };
            logger.trace((registList + ""));
            isSum = false;
            message = new InfoRequestMessage(registList, new Vector.<InfoRegisterToken>());
            this.infoRegister.regist(message, source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function unregistInfo(instrumentList:Array, source:Object, flushFlag:Boolean=true):void{
            var instrument:String;
            var isSum:Boolean;
            var message:InfoRequestMessage;
            logger.info("Regist Info");
            this.isDirty = true;
            var unregistList:Vector.<InfoRegisterToken> = new Vector.<InfoRegisterToken>();
            for each (instrument in instrumentList) {
                unregistList.push(new InfoRegisterToken(instrument, InstrumentInfoType.MARKET));
            };
            isSum = false;
            message = new InfoRequestMessage(new Vector.<InfoRegisterToken>(), unregistList);
            this.infoRegister.unregist(message, source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function reRegistIntraday(instrumentList:Array, source:Object, flushFlag:Boolean=true):void{
            logger.info("Re Regist Intraday");
            this.isDirty = true;
            this.unregistSource(source, false);
            this.registIntraday(instrumentList, source, false);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function registIntraday(instrumentList:Array, source:Object, flushFlag:Boolean=true):void{
            var instrument:String;
            var isSum:Boolean;
            var message:InfoRequestMessage;
            logger.info("Regist Intraday");
            this.isDirty = true;
            var registList:Vector.<InfoRegisterToken> = new Vector.<InfoRegisterToken>();
            for each (instrument in instrumentList) {
                registList.push(new InfoRegisterToken(instrument, InstrumentInfoType.INTRADAY));
            };
            logger.trace((registList + ""));
            isSum = false;
            message = new InfoRequestMessage(registList, new Vector.<InfoRegisterToken>());
            this.infoRegister.regist(message, source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function unregistIntraday(instrumentList:Array, source:Object, flushFlag:Boolean=true):void{
            var instrument:String;
            var isSum:Boolean;
            var message:InfoRequestMessage;
            logger.info("Unregist Intraday");
            this.isDirty = true;
            var unregistList:Vector.<InfoRegisterToken> = new Vector.<InfoRegisterToken>();
            for each (instrument in instrumentList) {
                unregistList.push(new InfoRegisterToken(instrument, InstrumentInfoType.INTRADAY));
            };
            isSum = false;
            message = new InfoRequestMessage(new Vector.<InfoRegisterToken>(), unregistList);
            this.infoRegister.unregist(message, source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function reRegistStat(instrumentList:Array, source:Object, flushFlag:Boolean=true):void{
            logger.info("Re Regist Info");
            this.isDirty = true;
            this.unregistSource(source, false);
            this.registStat(instrumentList, source, false);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function registStat(instrumentList:Array, source:Object, flushFlag:Boolean=true):void{
            var instrument:String;
            var isSum:Boolean;
            var message:InfoRequestMessage;
            logger.info("Regist Info");
            this.isDirty = true;
            var registList:Vector.<InfoRegisterToken> = new Vector.<InfoRegisterToken>();
            for each (instrument in instrumentList) {
                registList.push(new InfoRegisterToken(instrument, InstrumentInfoType.STAT));
            };
            logger.trace((registList + ""));
            isSum = false;
            message = new InfoRequestMessage(registList, new Vector.<InfoRegisterToken>());
            this.infoRegister.regist(message, source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function unregistStat(instrumentList:Array, source:Object, flushFlag:Boolean=true):void{
            var instrument:String;
            var isSum:Boolean;
            var message:InfoRequestMessage;
            logger.info("Regist Info");
            this.isDirty = true;
            var unregistList:Vector.<InfoRegisterToken> = new Vector.<InfoRegisterToken>();
            for each (instrument in instrumentList) {
                unregistList.push(new InfoRegisterToken(instrument, InstrumentInfoType.STAT));
            };
            isSum = false;
            message = new InfoRequestMessage(new Vector.<InfoRegisterToken>(), unregistList);
            this.infoRegister.unregist(message, source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function unregistSource(source:Object, flushFlag:Boolean=true):void{
            logger.info("Unregist Source");
            this.isDirty = true;
            this.infoRegister.unregistSource(source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function lock():void{
            this.isLock = true;
            this.isDirty = false;
        }
        public function unlock():void{
            this.isLock = false;
            if (this.isDirty){
                this.sendFromRegister();
            };
        }
        private function sendFromRegister():Number{
            var sendMessage:* = null;
            if (this.isLock){
                this.isDirty = true;
                return (NaN);
            };
            logger.trace("sendFromRegister");
            try {
                sendMessage = this.infoRegister.flush();
                if (sendMessage != null){
                    sendAndNotifyMessage(sendMessage);
                };
            } catch(error:Error) {
                logger.error(error.message);
                logger.debug(error.getStackTrace());
            };
            return ((((sendMessage == null)) ? NaN : sendMessage.id));
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.common.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.request.widgettemplate.*;

    public class WidgetTemplateService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:WidgetTemplateService = null;

        public function WidgetTemplateService(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():WidgetTemplateService{
            if (instance == null){
                instance = new (WidgetTemplateService)();
            };
            return (instance);
        }

        public function getWidgetTemplate():Number{
            var message:WidgetTemplateRequestMessage = new WidgetTemplateRequestMessage(StreamingAttribute.userRoleEquity, StreamingAttribute.userRoleDerivatives);
            sendAndNotifyMessage(message);
            return (message.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class ResearchService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:ResearchService;

        public function ResearchService(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():ResearchService{
            if (instance == null){
                instance = new (ResearchService)();
            };
            return (instance);
        }

        public function getResearch(keyword:String=null):Number{
            var message:ResearchRequestMessage = new ResearchRequestMessage(keyword);
            sendAndNotifyMessage(message);
            return (message.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class AccountListEquityService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:AccountListEquityService = null;

        public function AccountListEquityService(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():AccountListEquityService{
            if (instance == null){
                instance = new (AccountListEquityService)();
            };
            return (instance);
        }

        public function getAccountList():Number{
            var message:AccountListEquityRequestMessage = new AccountListEquityRequestMessage();
            sendAndNotifyMessage(message);
            return (message.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.register.*;
    import com.settrade.log.logger.*;

    public class InstrumentTickerService extends Service implements Lockable {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:InstrumentTickerService;

        protected var instrumentTickerRegister:InstrumentTickerRegister;
        public var isLock:Boolean;
        public var isDirty:Boolean;

        public function InstrumentTickerService(){
            super();
            this.instrumentTickerRegister = InstrumentTickerRegister.getInstance();
            this.isLock = false;
            this.isDirty = false;
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():InstrumentTickerService{
            if (instance == null){
                instance = new (InstrumentTickerService)();
            };
            return (instance);
        }

        public function reRegistTicker(instrumentList:Array, source:Object, flushFlag:Boolean=true):void{
            logger.info("Re Regist Instrument Ticker");
            this.unregistSource(source, false);
            this.registTicker(instrumentList, source, false);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function registTicker(instrumentList:Array, source:Object, flushFlag:Boolean=true):void{
            var instrument:String;
            var sequenceList:Vector.<int>;
            var isSum:Boolean;
            var message:InstrumentTickerRequestMessage;
            logger.info("Regist Instrument Ticker");
            var registList:Vector.<String> = new Vector.<String>();
            for each (instrument in instrumentList) {
                registList.push(instrument);
            };
            sequenceList = new Vector.<int>();
            logger.trace((registList + ""));
            isSum = false;
            message = new InstrumentTickerRequestMessage(registList, new Vector.<String>());
            this.instrumentTickerRegister.regist(message, source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function unregistTicker(instrumentList:Array, source:Object, flushFlag:Boolean=true):void{
            var instrument:String;
            var isSum:Boolean;
            var message:InstrumentTickerRequestMessage;
            logger.info("Unregist Instrument Ticker");
            var unregistList:Vector.<String> = new Vector.<String>();
            for each (instrument in instrumentList) {
                unregistList.push(instrument);
            };
            isSum = false;
            message = new InstrumentTickerRequestMessage(new Vector.<String>(), unregistList);
            this.instrumentTickerRegister.unregist(message, source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function unregistSource(source:Object, flushFlag:Boolean=true):void{
            logger.info("Unregist Source");
            this.instrumentTickerRegister.unregistSource(source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        private function sendFromRegister():void{
            var sendMessage:* = null;
            if (this.isLock){
                this.isDirty = true;
            } else {
                try {
                    sendMessage = this.instrumentTickerRegister.flush();
                    if (sendMessage != null){
                        sendAndNotifyMessage(sendMessage);
                    };
                } catch(error:Error) {
                    logger.error(error.message);
                    logger.debug(error.getStackTrace());
                };
            };
        }
        public function lock():void{
            this.isLock = true;
            this.isDirty = false;
        }
        public function unlock():void{
            this.isLock = false;
            if (this.isDirty){
                this.sendFromRegister();
            };
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.message.request.info.*;
    import com.settrade.log.logger.*;

    public class InfoStatisticService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        public static var instance:InfoStatisticService = null;

        public function InfoStatisticService(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():InfoStatisticService{
            if (instance == null){
                instance = new (InfoStatisticService)();
            };
            return (instance);
        }

        public function getInfoStatistic(instrumentId:String):Number{
            var message:InfoStatisticRequestMessage = new InfoStatisticRequestMessage(instrumentId);
            sendAndNotifyMessage(message);
            return (message.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.message.response.orderstatus.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.register.*;
    import com.settrade.log.logger.*;

    public class OrderStatusClickService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:OrderStatusClickService;

        protected var orderStatusClickRegister:OrderClickRegister;
        protected var orderStatusClickManager:OrderClickManager;
        protected var accountInformationService:AccountInformationService;

        public function OrderStatusClickService(){
            super();
            this.orderStatusClickRegister = OrderClickRegister.getInstance();
            this.orderStatusClickManager = OrderClickManager.getInstance();
            this.accountInformationService = AccountInformationService.getInstance();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():OrderStatusClickService{
            if (instance == null){
                instance = new (OrderStatusClickService)();
            };
            return (instance);
        }

        public function reRegistClick(instrumentId:String, account:Account, source:Object):void{
            logger.info("Re Regist Click");
            this.unregistSource(source);
            this.registClick(instrumentId, account, source);
            this.orderStatusClickManager.activate();
        }
        public function registClick(instrumentId:String, account:Account, source:Object):void{
            logger.info("Regist Click");
            this.orderStatusClickRegister.regist(new OrderStatusClickRegisterToken(instrumentId, account), source);
            this.orderStatusClickManager.notifyOrderClickByAccountAndInstrumentId(account, instrumentId);
            this.orderStatusClickManager.activate();
        }
        public function unregistClick(instrumentId:String, account:Account, source:Object):void{
            logger.info("Unregist Click");
            this.orderStatusClickRegister.unregist(new OrderStatusClickRegisterToken(instrumentId, account), source);
            this.orderStatusClickManager.activate();
        }
        public function unregistSource(source:Object):void{
            logger.info("Unregist Source");
            this.orderStatusClickRegister.unregistSource(source);
            this.orderStatusClickManager.activate();
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class MarginStockService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:MarginStockService = null;

        public function MarginStockService(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():MarginStockService{
            if (instance == null){
                instance = new (MarginStockService)();
            };
            return (instance);
        }

        public function getMarginStock(instrumentId:String, accountNumber:String):Number{
            var message:MarginStockRequestMessage = new MarginStockRequestMessage(instrumentId, accountNumber);
            sendAndNotifyMessage(message);
            return (message.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class SynctimeService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        public static var instance:SynctimeService = null;

        public function SynctimeService(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():SynctimeService{
            if (instance == null){
                instance = new (SynctimeService)();
            };
            return (instance);
        }

        public function getTime():Date{
            return (SyncTimeManager.getInstance().getCurrentTime());
        }
        public function syncTime():Number{
            var message:SynctimeRequestMessage = new SynctimeRequestMessage();
            sendAndNotifyMessage(message);
            return (message.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;

    public class AccountService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:AccountService = null;

        protected var accountManager:AccountManager = null;

        public function AccountService(){
            this.accountManager = AccountManager.getInstance();
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():AccountService{
            if (instance == null){
                instance = new (AccountService)();
            };
            return (instance);
        }

        public function getCurrentAccount():Account{
            return (this.accountManager.currentAccount);
        }
        public function changeAccountByAccountNumberAndSystem(accountNumber:String, system:System, flushFlag:Boolean=true):void{
            var oldAccount:Account;
            var newAccount:Account;
            var message:AccountChangeMessage;
            if (this.accountManager.hasAccountByAccountNumberAndSystem(accountNumber, system)){
                oldAccount = this.accountManager.currentAccount;
                this.accountManager.setCurrentAccountByAccountNumberAndSystem(accountNumber, system, flushFlag);
                newAccount = this.accountManager.currentAccount;
                message = new AccountChangeMessage(oldAccount, newAccount);
                notifyControlMessage(message);
            };
        }
        public function getAllAccount():Array{
            return (this.accountManager.accountList.sort(this.compareAccount));
        }
        public function getAccountByAccountNumberAndSystem(accountNumber:String, system:System):Account{
            return (this.accountManager.getAccountByAccountNumberAndSystem(accountNumber, system));
        }
        public function getAccountByAccountNumberAndSystemMarketRep(accountNumber:String, system:System):Account{
            return (this.accountManager.getAndAddAccountByAccountNumberAndSystemMktRep(accountNumber, system));
        }
        public function hasEquityAccount():Boolean{
            var account:Account;
            var accountList:Array = this.getAllAccount();
            for each (account in accountList) {
                if (account.system.isEquity()){
                    return (true);
                };
            };
            return (false);
        }
        public function hasDerivativesAccount():Boolean{
            var account:Account;
            var accountList:Array = this.getAllAccount();
            for each (account in accountList) {
                if (account.system.isDeriv()){
                    return (true);
                };
            };
            return (false);
        }
        private function compareAccount(a:Account, b:Account):int{
            var asystemOrder:int = this.getSystemOrder(a.system);
            var bsystemOrder:int = this.getSystemOrder(b.system);
            if (asystemOrder == bsystemOrder){
                return (a.accountNumber.localeCompare(b.accountNumber));
            };
            return ((asystemOrder - bsystemOrder));
        }
        private function getSystemOrder(system:System):int{
            switch (system){
                case System.EQUITY:
                    return (0);
                case System.DERIV:
                    return (1);
                default:
                    return (2);
            };
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class FavouriteService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:FavouriteService;

        protected var favouriteListManager:FavouriteListManager;

        public function FavouriteService(){
            super();
            this.favouriteListManager = FavouriteListManager.getInstance();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():FavouriteService{
            if (instance == null){
                instance = new (FavouriteService)();
            };
            return (instance);
        }

        public function addFavourite(listName:String, instrumentId:String):Number{
            this.favouriteListManager.addInstrumentToFavouriteListName(listName, instrumentId);
            logger.debug((((("Add Favourite [" + instrumentId) + "] of [") + listName) + "]"));
            return (this.syncFavourite(listName));
        }
        public function removeFavourite(listName:String, instrumentId:String):Number{
            this.favouriteListManager.removeInstrumentFromFavouriteName(listName, instrumentId);
            logger.debug((((("Remove Favourite [" + instrumentId) + "] of [") + listName) + "]"));
            return (this.syncFavourite(listName));
        }
        public function updateFavourite(listName:String, oldInstrumentId:String, newInstrumentId:String):Number{
            this.favouriteListManager.updateInstrumentInFavouriteName(listName, oldInstrumentId, newInstrumentId);
            logger.debug((((((("Update Favourite [" + oldInstrumentId) + "] to [") + newInstrumentId) + "] of [") + listName) + "]"));
            return (this.syncFavourite(listName));
        }
        public function swapFavourite(listName:String, oldInstrumentList:Array, newInstrumentList:Array):Number{
            this.favouriteListManager.addOrUpdateFavouriteList(listName, newInstrumentList);
            logger.debug((("Swap Favourite of [" + listName) + "]"));
            return (this.syncFavourite(listName));
        }
        public function swapInstrument(listName:String, oldInstrumentId:String, newInstrumentId:String):Number{
            this.favouriteListManager.swapInstrumentInFavouriteName(listName, oldInstrumentId, newInstrumentId);
            logger.debug((((((("Swap Favourite between [" + oldInstrumentId) + "] and [") + newInstrumentId) + "] of [") + listName) + "]"));
            return (this.syncFavourite(listName));
        }
        public function changeFavouriteListName(oldListName:String, newListName:String):Number{
            this.favouriteListManager.changeFavouriteListName(oldListName, newListName);
            this.setCurrentSelectedListName(newListName);
            return (this.syncFavourite(newListName));
        }
        public function getCurrentSelectedListName():String{
            return (this.favouriteListManager.currentSelectedListName);
        }
        public function setCurrentSelectedListName(listName:String):void{
            this.favouriteListManager.currentSelectedListName = listName;
        }
        private function syncFavourite(listName:String):Number{
            var message:FavouriteUpdateRequestMessage = new FavouriteUpdateRequestMessage(listName, this.favouriteListManager.getFavouriteListIndexByListName(listName), this.favouriteListManager.getFavouriteInstrumentListByListName(listName));
            sendAndNotifyMessage(message);
            return (message.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class GenerateKeyService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:GenerateKeyService;

        public function GenerateKeyService(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():GenerateKeyService{
            if (instance == null){
                instance = new (GenerateKeyService)();
            };
            return (instance);
        }

        public function generateKey():Number{
            var message:* = null;
            try {
                logger.info("Generate Key");
                message = new GenerateKeyRequestMessage(StreamingAttribute.realtimeClientType);
                sendAndNotifyMessage(message);
            } catch(error:Error) {
                logger.error(error.message);
                logger.debug(error.getStackTrace());
            };
            return (((message)==null) ? NaN : message.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.response.fastquote.*;
    import com.settrade.log.logger.*;

    public class PlaceOrderDerivativesService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:PlaceOrderDerivativesService;

        protected var accountManager:AccountManager;

        public function PlaceOrderDerivativesService(){
            super();
            this.accountManager = AccountManager.getInstance();
        }
        public static function getInstance():PlaceOrderDerivativesService{
            if (instance == null){
                instance = new (PlaceOrderDerivativesService)();
            };
            return (instance);
        }

        public function placeOrder(instrumentId:String, price:String, priceType:DerivativesPriceType, orderSide:DerivativesOrderSide, position:DerivativesPosition, volume:String, validity:DerivativesValidity, pin:String, publishVolume:String="", account:Account=null):Number{
            return (this.placeStopOrder(instrumentId, price, priceType, orderSide, position, volume, validity, pin, publishVolume, StopCondition.NO_TYPE, "", "", account));
        }
        public function placeOrderNewTrading(instrumentId:String, price:String, priceType:DerivativesPriceType, orderSide:DerivativesOrderSide, position:DerivativesPosition, volume:String, validity:DerivativesValidity, pin:String, publishVolume:String, dateTime:Date, state:StateType, account:Account=null):Number{
            logger.error("Unsupport Function");
            return (NaN);
        }
        public function placeStopOrder(instrumentId:String, price:String, priceType:DerivativesPriceType, orderSide:DerivativesOrderSide, position:DerivativesPosition, volume:String, validity:DerivativesValidity, pin:String, publishVolume:String, stopCondition:StopCondition, stopInstrumentId:String, stopPrice:String, account:Account=null):Number{
            if (account == null){
                account = this.accountManager.currentAccount;
            };
            var message:PlaceOrderDerivativesRequestMessage = new PlaceOrderDerivativesRequestMessage();
            message.instrumentId = instrumentId;
            message.price = StreamingNumberFormatter.removeComma(price);
            message.priceType = priceType;
            message.volume = StreamingNumberFormatter.removeComma(volume);
            message.validityType = validity;
            message.position = position;
            message.pin = pin;
            message.orderSide = orderSide;
            message.accountNumber = account.accountNumber;
            message.stopCondition = stopCondition;
            message.stopInstrumentId = stopInstrumentId;
            message.stopPrice = StreamingNumberFormatter.removeComma(stopPrice);
            message.publishVolume = StreamingNumberFormatter.removeComma(publishVolume);
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function placeStopOrderNewTrading(instrumentId:String, price:String, priceType:DerivativesPriceType, orderSide:DerivativesOrderSide, position:DerivativesPosition, volume:String, validity:DerivativesValidity, pin:String, publishVolume:String, stopCondition:StopCondition, stopInstrumentId:String, stopPrice:String, dateTime:Date, state:StateType, account:Account=null):Number{
            logger.error("Unsupport Function");
            return (NaN);
        }
        public function confirmedOrder(message:PlaceOrderDerivativesRequestMessage):Number{
            var confirmMessage:PlaceOrderDerivativesConfirmRequestMessage = new PlaceOrderDerivativesConfirmRequestMessage(message);
            sendAndNotifyMessage(confirmMessage);
            return (confirmMessage.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class NewsService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        public static var instance:NewsService = null;

        public function NewsService(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():NewsService{
            if (instance == null){
                instance = new (NewsService)();
            };
            return (instance);
        }

        public function getNews(language:Language, newsType:NewsType, instrumentId:String):Number{
            var message:NewsRequestMessage = new NewsRequestMessage(language, newsType, instrumentId);
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function getAllNews(language:Language, newsType:NewsType):Number{
            return (this.getNews(language, newsType, "_ALL"));
        }
        public function getNewsInformation(system:System, url:String):Number{
            var message:NewsInformationRequestMessage = new NewsInformationRequestMessage(system, url);
            sendAndNotifyMessage(message);
            return (message.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.message.response.orderstatus.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class CancelOrderDerivativesService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        public static var instance:CancelOrderDerivativesService = null;

        protected var accountManager:AccountManager;
        protected var orderManager:OrderManager;

        public function CancelOrderDerivativesService(){
            super();
            this.accountManager = AccountManager.getInstance();
            this.orderManager = OrderManager.getInstance();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():CancelOrderDerivativesService{
            if (instance == null){
                instance = new (CancelOrderDerivativesService)();
            };
            return (instance);
        }

        public function cancelOrder(orderNumberList:Array, pin:String, account:Account=null):Number{
            var orderNumber:String;
            var orderStatus:OrderStatusDerivatives;
            if (account == null){
                account = Account(this.accountManager.currentAccount);
            };
            var accountNo:String = account.accountNumber;
            var terminaltype:TerminalType = TerminalType.NO_TYPE;
            var message:CancelOrderDerivativesRequestMessage = new CancelOrderDerivativesRequestMessage(accountNo, pin, terminaltype);
            for each (orderNumber in orderNumberList) {
                orderStatus = OrderStatusDerivatives(this.orderManager.getOrderByAccountAndOrderNumber(account, orderNumber));
                message.addOrder(orderStatus);
            };
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function cancelOrderByOrderStatusMktRep(orderList:Array):Number{
            var order:OrderStatusDerivatives;
            var message:CancelOrderDerivativesMultipleAccountRequestMessage = new CancelOrderDerivativesMultipleAccountRequestMessage();
            for each (order in orderList) {
                message.addOrder(order);
            };
            sendAndNotifyMessage(message);
            return (message.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;

    public class NotifyPlaceOrderService extends Service {

        protected static var _instance:NotifyPlaceOrderService = null;
        private static var logger:Logger = new Logger(prototype.constructor);

        public function NotifyPlaceOrderService(){
            super();
            if (_instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():NotifyPlaceOrderService{
            if (_instance == null){
                _instance = new (NotifyPlaceOrderService)();
            };
            return (_instance);
        }

        public function notifyPlaceOrder(instrumentId:String, side:OrderSide, priceType:PriceType, price:Number=NaN, priceDigit:Number=2):void{
            var notifyPlaceOrderMessage:NotifyPlaceOrderMessage = new NotifyPlaceOrderMessage(instrumentId, side, priceType, price, priceDigit);
            this.notifyControlMessage(notifyPlaceOrderMessage);
        }
        public function notifyPlaceInstrumentId(instrumentId:String):void{
            var notifyPlaceInstrumentId:NotifyPlaceInstrumentIdMessage = new NotifyPlaceInstrumentIdMessage(instrumentId);
            this.notifyControlMessage(notifyPlaceInstrumentId);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.info.*;
    import com.settrade.log.logger.*;

    public class InfoStatisticChartService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        public static var instance:InfoStatisticChartService = null;

        public function InfoStatisticChartService(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():InfoStatisticChartService{
            if (instance == null){
                instance = new (InfoStatisticChartService)();
            };
            return (instance);
        }

        public function getInfoStatisticChart(instrumentId:String, chartType:InstrumentInfoStatisticChartType):Number{
            var message:InfoStatisticChartRequestMessage = new InfoStatisticChartRequestMessage(instrumentId, chartType);
            sendAndNotifyMessage(message);
            return (message.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.register.*;
    import com.settrade.log.logger.*;

    public class RegisterService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:RegisterService;

        protected var register:MessageRegister;

        public function RegisterService(){
            super();
            this.register = MessageRegister.getInstance();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():RegisterService{
            if (instance == null){
                instance = new (RegisterService)();
            };
            return (instance);
        }

        public function sendRegisterMessage():Number{
            var message:Message = this.register.flush();
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function sendRegisterMessageOnConnectPush():Number{
            var message:Message = this.register.flushOnConnectPush();
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function sendRegisterMessageInterval():Number{
            var message:Message = this.register.flushOnInterval();
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function unregistComponent(source:Object):void{
            this.register.unregistSource(source);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.register.*;
    import com.settrade.log.logger.*;

    public class InstrumentListRegisterService extends Service implements Lockable {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:InstrumentListRegisterService;

        protected var instrumentListRegister:InstrumentListRegister;
        public var isLock:Boolean;
        public var isDirty:Boolean;

        public function InstrumentListRegisterService(){
            super();
            this.instrumentListRegister = InstrumentListRegister.getInstance();
            this.isLock = false;
            this.isDirty = false;
        }
        public static function getInstance():InstrumentListRegisterService{
            if (instance == null){
                instance = new (InstrumentListRegisterService)();
            };
            return (instance);
        }

        public function isRegisterInstrumentList(listName:String):Boolean{
            var instrumentListName:InstrumentListName;
            var activeList:Array = InstrumentListNameManager.getInstance().activeList;
            for each (instrumentListName in activeList) {
                if (listName == instrumentListName.listName){
                    return (true);
                };
            };
            return (false);
        }
        public function reRegistInstrumentList(message:InstrumentListRequestMessage, source:Object, flushFlag:Boolean=true):void{
            logger.info("Re Regist InstrumentList");
            this.unregistSource(source, false);
            this.registInstrumentList(message, source, false);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function registInstrumentList(message:InstrumentListRequestMessage, source:Object, flushFlag:Boolean=true):void{
            logger.info("Regist InstrumentList");
            this.instrumentListRegister.regist(message, source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function unregistInstrumentList(message:InstrumentListRequestMessage, source:Object, flushFlag:Boolean=true):void{
            logger.info("Unregist InstrumentList");
            this.instrumentListRegister.unregist(message, source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function unregistSource(source:Object, flushFlag:Boolean=true):void{
            logger.info("Unregist Source");
            this.instrumentListRegister.unregistSource(source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        private function sendFromRegister():void{
            var sendMessage:* = null;
            if (this.isLock){
                this.isDirty = true;
            } else {
                try {
                    sendMessage = this.instrumentListRegister.flush();
                    if (sendMessage != null){
                        sendAndNotifyMessage(sendMessage);
                    };
                } catch(error:Error) {
                    logger.error(error.message);
                    logger.debug(error.getStackTrace());
                };
            };
        }
        public function lock():void{
            this.isLock = true;
            this.isDirty = false;
        }
        public function unlock():void{
            this.isLock = false;
            if (this.isDirty){
                this.sendFromRegister();
            };
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.common.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.register.*;
    import com.settrade.log.logger.*;

    public class OrderPushService extends Service implements Lockable {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:OrderPushService;

        protected var orderRegister:OrderRegister;
        public var isLock:Boolean;
        public var isDirty:Boolean;

        public function OrderPushService(){
            super();
            this.orderRegister = OrderRegister.getInstance();
            this.isLock = false;
            this.isDirty = false;
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():OrderPushService{
            if (instance == null){
                instance = new (OrderPushService)();
            };
            return (instance);
        }

        public function registOrderPushAll(source:Object, flushFlag:Boolean=true):void{
            this.registOrderPush([new Account("_ALL", System.DERIV)], source, flushFlag);
            OrderStatusHierachyManager.getInstance().requestAccountHierachy();
        }
        public function reRegistOrderPushAll(source:Object, flushFlag:Boolean=true):void{
            this.reRegistOrderPush([new Account("_ALL", System.DERIV)], source, flushFlag);
            OrderStatusHierachyManager.getInstance().requestAccountHierachy();
        }
        public function unregistOrderPushAll(source:Object, flushFlag:Boolean=true):void{
            this.unregistOrderPush([new Account("_ALL", System.DERIV)], source, flushFlag);
        }
        public function reRegistOrderPush(accountList:Array, source:Object, flushFlag:Boolean=true):void{
            logger.info("Re Regist Order Push");
            this.unregistSource(source, false);
            this.registOrderPush(accountList, source, false);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function registOrderPush(accountList:Array, source:Object, flushFlag:Boolean=true):void{
            var account:Account;
            var isSum:Boolean;
            var message:OrderStatusPushRequestMessage;
            logger.info("Regist Order Push");
            var registList:Vector.<Account> = new Vector.<Account>();
            for each (account in accountList) {
                registList.push(account);
            };
            isSum = false;
            message = new OrderStatusPushRequestMessage(registList, new Vector.<Account>(), StreamingAttribute.realtimeClientType);
            this.orderRegister.regist(message, source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function unregistOrderPush(accountList:Array, source:Object, flushFlag:Boolean=true):void{
            var account:Account;
            var message:OrderStatusPushRequestMessage;
            logger.info("Regist Order Push");
            var unregistList:Vector.<Account> = new Vector.<Account>();
            for each (account in accountList) {
                unregistList.push(account);
            };
            message = new OrderStatusPushRequestMessage(new Vector.<Account>(), unregistList, StreamingAttribute.realtimeClientType);
            this.orderRegister.unregist(message, source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        public function unregistSource(source:Object, flushFlag:Boolean=true):void{
            logger.info("Unregist Source");
            this.orderRegister.unregistSource(source);
            if (flushFlag){
                this.sendFromRegister();
            };
        }
        private function sendFromRegister():Number{
            var sendMessage:* = null;
            if (this.isLock){
                this.isDirty = true;
                return (NaN);
            };
            logger.trace("sendFromRegister");
            try {
                sendMessage = this.orderRegister.flush();
                if (sendMessage != null){
                    sendAndNotifyMessage(sendMessage);
                };
            } catch(error:Error) {
                logger.error(error.message);
                logger.debug(error.getStackTrace());
            };
            return ((((sendMessage == null)) ? NaN : sendMessage.id));
        }
        public function lock():void{
            this.isLock = true;
            this.isDirty = false;
        }
        public function unlock():void{
            this.isLock = false;
            if (this.isDirty){
                this.sendFromRegister();
            };
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class SetCalendarService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:SetCalendarService;

        public function SetCalendarService(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():SetCalendarService{
            if (instance == null){
                instance = new (SetCalendarService)();
            };
            return (instance);
        }

        public function getSetCalendar(month:int, year:int):Number{
            var message:SetCalendarRequestMessage = new SetCalendarRequestMessage(month, year);
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function getSetCalendarDetail(day:int, month:int, year:int):Number{
            var message:SetCalendarRequestMessage = new SetCalendarRequestMessage(month, year, day);
            sendAndNotifyMessage(message);
            return (message.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class OptionsGreekValueService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:OptionsGreekValueService;

        public function OptionsGreekValueService(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():OptionsGreekValueService{
            if (instance == null){
                instance = new (OptionsGreekValueService)();
            };
            return (instance);
        }

        public function getOptionsGreekValue(expireDate:String, underlyingPrice:Number, volatilityMode:OptionsGreekValueVolatilityMode, volatility:Number, remainDay:int, interestRate:Number, dividend:Number):Number{
            var message:OptionsGreekValueRequestMessage = new OptionsGreekValueRequestMessage(expireDate, underlyingPrice, volatilityMode, volatility, remainDay, interestRate, dividend);
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function getOptionsExpireDateList():Number{
            var message:OptionsExpireDateRequestMessage = new OptionsExpireDateRequestMessage();
            sendAndNotifyMessage(message);
            return (message.id);
        }
        public function getOptionsGreekDefaultValue(expireDate:String, volatilityMode:OptionsGreekValueVolatilityMode):Number{
            var message:OptionsGreekDefaultValueRequestMessage = new OptionsGreekDefaultValueRequestMessage(expireDate, volatilityMode);
            sendAndNotifyMessage(message);
            return (message.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class PinCheckService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:PinCheckService = null;

        private var accountManager:AccountManager;

        public function PinCheckService(){
            super();
            this.accountManager = AccountManager.getInstance();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():PinCheckService{
            if (instance == null){
                instance = new (PinCheckService)();
            };
            return (instance);
        }

        public function validatePin(pin:String):Number{
            var accountList:Array = this.accountManager.accountList;
            var market:System = System.NO_SYSTEM;
            if (accountList.length > 0){
                market = Account(accountList[0]).system;
            };
            var message:PinCheckRequestMessage = new PinCheckRequestMessage(market, pin);
            sendAndNotifyMessage(message);
            return (message.id);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.*;
    import com.settrade.streaming5.dispatcher.*;

    public class Service {

        protected var dispatcher:MessageDispatcher;
        protected var connectionFactory:ConnectionFactory;

        public function Service(){
            super();
            this.dispatcher = MessageDispatcher.getInstance();
            this.connectionFactory = ConnectionFactory.getInstance();
        }
        public function sendMessage(message:Message){
            this.connectionFactory.connectionManager.sendMessage(message);
        }
        public function notifySendMessage(message:Message){
            this.dispatcher.notifySendMessage(message);
        }
        public function notifyReceiveMessage(message:Message){
            this.dispatcher.notifyReceiveMessage(message);
        }
        public function notifyControlMessage(message:Message){
            this.dispatcher.notifyControlMessage(message);
        }
        public function sendAndNotifyMessage(message:Message){
            this.sendMessage(message);
            this.notifySendMessage(message);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.message.*;
    import flash.utils.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.*;

    public class MessageTypeLockService extends Service implements Lockable {

        private var messageMap:Dictionary;
        private var messageTypeMap:Dictionary;
        private var isLock:Boolean;

        public function MessageTypeLockService(){
            super();
            this.messageMap = new Dictionary();
            this.messageTypeMap = new Dictionary();
            this.isLock = false;
        }
        protected function isValidKey(key:Object):Boolean{
            return (true);
        }
        protected function createMessage(key:Object, messageType:int):Vector.<RequestMessage>{
            var list:Vector.<RequestMessage> = new Vector.<RequestMessage>();
            return (list);
        }
        public function lock():void{
            this.isLock = true;
        }
        public function unlock():void{
            this.isLock = false;
            this.sendMessageFromQueue();
        }
        protected function sendRequestMessage(key:Object, messageType:int):Number{
            var messageId:Number = this.insertMessageToQueue(key, messageType);
            if (!this.isLock){
                this.sendMessageFromQueue();
            };
            return (messageId);
        }
        protected function insertMessageToQueue(key:Object, messageType:int):Number{
            if (!this.isValidKey(key)){
                return (NaN);
            };
            var queueMessageType:int = this.getMessageType(key);
            var diffMessageType:int = this.logicalDiff(queueMessageType, messageType);
            var currentMessageType = (queueMessageType | messageType);
            var message:MultipleRequestMessage = this.getMessage(key);
            if (message == null){
                message = new MultipleRequestMessage();
                this.messageMap[key] = message;
            };
            this.messageTypeMap[key] = currentMessageType;
            message.addAll(this.createMessage(key, diffMessageType));
            return (message.id);
        }
        protected function sendMessageFromQueue():void{
            var message:Message;
            for each (message in this.messageMap) {
                this.sendAndNotifyMessage(message);
            };
            this.messageMap = new Dictionary();
            this.messageTypeMap = new Dictionary();
        }
        private function hasMessage(key:Object):Boolean{
            return (!((this.getMessage(key) == null)));
        }
        private function getMessage(key:Object):MultipleRequestMessage{
            return (this.messageMap[key]);
        }
        private function hasMessageTypeByKey(key:Object, compareType:int):Boolean{
            return (this.hasMessageType(this.getMessageType(key), compareType));
        }
        private function getMessageType(key:Object):int{
            var messageType:int = this.messageTypeMap[key];
            return (messageType);
        }
        protected function logicalDiff(oldType:int, newType:int):int{
            return ((~(oldType) & newType));
        }
        protected function hasMessageType(messageType:int, compareType:int):Boolean{
            return (((messageType & compareType) == compareType));
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.register.*;
    import com.settrade.log.logger.*;

    public class MarketSummaryService extends Service implements Lockable {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:MarketSummaryService;

        protected var marketSummaryRegister:MarketSummaryRegister;
        public var isLock:Boolean;
        public var isDirty:Boolean;

        public function MarketSummaryService(){
            super();
            this.marketSummaryRegister = MarketSummaryRegister.getInstance();
            this.isLock = false;
            this.isDirty = false;
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():MarketSummaryService{
            if (instance == null){
                instance = new (MarketSummaryService)();
            };
            return (instance);
        }

        public function registMarketSummary(source:Object, flushFlag:Boolean=true):void{
            var source:* = source;
            var flushFlag:Boolean = flushFlag;
            logger.info("Regist Market Summary");
            var message:* = new MarketSummaryRequestMessage();
            this.marketSummaryRegister.regist(message, source);
            if (flushFlag){
                try {
                    this.sendFromRegister();
                } catch(error:Error) {
                    logger.error(error.message);
                    logger.debug(error.getStackTrace());
                };
            };
        }
        public function unRegistMarketSummary(source:Object, flushFlag:Boolean=true):void{
            var source:* = source;
            var flushFlag:Boolean = flushFlag;
            logger.info("Unregist Market Summary");
            var message:* = new MarketSummaryRequestMessage();
            this.marketSummaryRegister.unregist(message, source);
            if (flushFlag){
                try {
                    this.sendFromRegister();
                } catch(error:Error) {
                    logger.error(error.message);
                    logger.debug(error.getStackTrace());
                };
            };
        }
        private function sendFromRegister():void{
            var sendMessage:* = null;
            if (this.isLock){
                this.isDirty = true;
            } else {
                try {
                    sendMessage = this.marketSummaryRegister.flush();
                    if (sendMessage != null){
                        sendAndNotifyMessage(sendMessage);
                    };
                } catch(error:Error) {
                    logger.error(error.message);
                    logger.debug(error.getStackTrace());
                };
            };
        }
        public function lock():void{
            this.isLock = true;
            this.isDirty = false;
        }
        public function unlock():void{
            this.isLock = false;
            if (this.isDirty){
                this.sendFromRegister();
            };
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class OrderPushCheckService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:OrderPushCheckService;

        public function OrderPushCheckService(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():OrderPushCheckService{
            if (instance == null){
                instance = new (OrderPushCheckService)();
            };
            return (instance);
        }

        public function checkOrderPush(account:Account):void{
            var message:OrderPushCheckRequestMessage = new OrderPushCheckRequestMessage(account);
            sendAndNotifyMessage(message);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.message.response.orderstatus.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class OrderInformationService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:OrderInformationService;

        private var orderManager:OrderManager;

        public function OrderInformationService(){
            this.orderManager = OrderManager.getInstance();
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():OrderInformationService{
            if (instance == null){
                instance = new (OrderInformationService)();
            };
            return (instance);
        }

        public function getOrderInformation(account:Account, orderNumber:String):Number{
            var orderStatus:IOrderStatus = this.orderManager.getOrderByAccountAndOrderNumber(account, orderNumber);
            var message:Message;
            if (orderStatus != null){
                if (account.system.isEquity()){
                    message = new OrderStatusByNumberEquityRequestMessage(OrderStatusEquity(orderStatus));
                } else {
                    if (account.system.isDeriv()){
                        message = new OrderStatusByNumberDerivativesRequestMessage(OrderStatusDerivatives(orderStatus));
                    };
                };
            } else {
                logger.error("Order not found");
            };
            sendAndNotifyMessage(message);
            return ((((message == null)) ? NaN : message.id));
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {

    public interface Lockable {

        function lock():void;
        function unlock():void;

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5.service {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.log.logger.*;

    public class ChangeOrderPriceService extends Service {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:ChangeOrderPriceService;

        public function ChangeOrderPriceService(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():ChangeOrderPriceService{
            if (instance == null){
                instance = new (ChangeOrderPriceService)();
            };
            return (instance);
        }

        public function changeOrderPrice(account:Account, orderNumber:String, price:Number, pin:String, priceType:PriceType=null):Number{
            return (NaN);
        }

    }
}//package com.settrade.streaming5.service 
﻿package com.settrade.streaming5 {
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.page.component.dynamiclabel.*;
    import com.settrade.streaming5.widget.config.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.utils.adapter.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.utils.chart.*;
    import com.settrade.streaming5.page.*;
    import com.settrade.streaming5.widget.component.*;
    import com.settrade.streaming5.message.feed.snapshot.*;
    import com.settrade.streaming5.page.component.instrumentticker.*;
    import com.settrade.streaming5.page.component.datagrid.*;
    import com.settrade.streaming5.page.component.chart.quote.*;
    import com.settrade.streaming5.newtrading.service.*;
    import com.settrade.streaming5.page.component.twolevelcombobox.*;
    import com.settrade.streaming5.page.component.chart.*;
    import com.settrade.streaming5.page.component.*;
    import com.settrade.streaming5.page.component.bidoffer.*;
    import com.settrade.streaming5.page.component.tooltip.*;
    import com.settrade.streaming5.page.component.marketticker.*;
    import com.settrade.streaming5.page.component.volumepicker.*;
    import com.settrade.streaming5.page.component.pricepicker.*;
    import com.settrade.streaming5.widget.component.common.accountSelector.*;

    public class StreamingClassRefernce {

        var intradayChartValueXmlGenerator:IntradayChartValueXmlGenerator;
        var intradayBaseChartValueXmlGenerator:IntradayBaseChartValueXmlGenerator;
        var quoteIntradayDisplayValueChart:QuoteIntradayDisplayValueChart;
        var quoteHistoricalDisplayValueChartXmlGenerator:QuoteHistoricalDisplayValueChartXmlGenerator;
        var portfolioColumnChartXmlGenerator:PortfolioColumnChartXmlGenerator;
        var javascriptInterface:JavascriptInterface;
        var tickerFilter:TickerFilter;
        var widgetSizeUtils:WidgetSizeUtils;
        var streamingTimeFormatter:StreamingTimeFormatter;
        var customConfig:CustomConfig;
        var account:Account;
        var accountEquity:AccountEquity;
        var accountInformationDerivativesService:AccountInformationDerivativesService;
        var accountInformationEquityService:AccountInformationEquityService;
        var accountInformationService:AccountInformationService;
        var accountListEquityService:AccountListEquityService;
        var accountNameService:AccountNameService;
        var accountService:AccountService;
        var cancelOrderDerivativesService:CancelOrderDerivativesService;
        var cancelOrderEquityService:CancelOrderEquityService;
        var changeOrderPriceService:ChangeOrderPriceService;
        var changeOrderEquityService:ChangeOrderEquityService;
        var favouriteService:FavouriteService;
        var generateKeyService:GenerateKeyService;
        var historicalChartService:HistoricalChartService;
        var infoService:InfoService;
        var instrumentListService:InstrumentListService;
        var instrumentTickerService:InstrumentTickerService;
        var intradayChartService:IntradayChartService;
        var lockable:Lockable;
        var marketSummaryService:MarketSummaryService;
        var marketTickerService:MarketTickerService;
        var messageTypeLockService:MessageTypeLockService;
        var newsService:NewsService;
        var notificationService:NotificationService;
        var notifyPlaceOrderService:NotifyPlaceOrderService;
        var oppDayService:OppDayService;
        var optionsStrikePriceListService:OptionsStrikePriceListService;
        var orderInformationService:OrderInformationService;
        var orderPushService:OrderPushService;
        var orderStatusClickService:OrderStatusClickService;
        var placeOrderDerivativesService:PlaceOrderDerivativesService;
        var placeOrderEquityService:PlaceOrderEquityService;
        var registerKeyService:RegisterKeyService;
        var registerService:RegisterService;
        var researchService:ResearchService;
        var setCalendarService:SetCalendarService;
        var settingService:SettingService;
        var snapshotService:SnapshotService;
        var staticDataService:StaticDataService;
        var stubService:StubService;
        var synctimeService:SynctimeService;
        var uniqueLockService:UniqueLockService;
        var userCheckService:UserCheckService;
        var volumeByPriceDetailService:VolumeByPriceDetailService;
        var volumeByPriceService:VolumeByPriceService;
        var instrumentIdValidatorService:InstrumentIdValidatorService;
        var blockTradeService:BlockTradeService;
        var orderPushCheckService:OrderPushCheckService;
        var pinCheckService:PinCheckService;
        var orderStatusSearchService:OrderStatusSearchService;
        var optionsGreekValueService:OptionsGreekValueService;
        var infoOddLotService:InfoOddLotService;
        var instrumentTickerOddLotService:InstrumentTickerOddLotService;
        var widgetTemplateService:WidgetTemplateService;
        var infoStatisticService:InfoStatisticService;
        var infoStatisticChartService:InfoStatisticChartService;
        var marginStockService:MarginStockService;
        var widgetComponent:WidgetComponent;
        var streamingDataGrid:StreamingDataGrid;
        var dataRowHeader:DataRowHeader;
        var streamingComboBox:StreamingComboBox;
        var streamingFusionChart:StreamingFusionChart;
        var symbolAutoComplete:SymbolAutoComplete;
        var dynamicLabel:DynamicLabel;
        var dynamicData:DynamicData;
        var bidOffer:BidOffer;
        var tooltip:Tooltip;
        var widgetLiteProviderComponent:WidgetLiteProviderComponent;
        var marketTicker:MarketTicker;
        var instrumentTikcer:InstrumentTicker;
        var accountShortcutAdapter:AccountShortcutAdapter;
        var datePicker:DatePicker;
        var dateTimePicker:DateTimePicker;
        var popUpStreamingMovieClip:PopUpStreamingMovieClip;
        var volumePicker:VolumePicker;
        var pricePicker:PricePicker;
        var accountSelecotr:AccountSelectorComponent;
        var snapshoInitDerivatives:SnapshotInitDerivatives;
        var snapshoInitOptions:SnapshotInitOptions;
        var orderStatusRow:OrderStatusDataRow;
        var dynamicDataRow:DynamicDataRow;
        var portfolioDataRow:PortfolioDataRow;

    }
}//package com.settrade.streaming5 
﻿package com.settrade.streaming5.newtrading.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.connection.common.*;
    import com.settrade.streaming5.message.response.fastquote.*;

    public class PlaceOrderDerivativesRequestMessage extends PlaceOrderDerivativesRequestMessage {

        protected var _dateTime:Date;
        protected var _state:StateType;

        override public function toURLVariable():StreamingURLVariables{
            var validTillDate:String;
            var validTillTime:String;
            var validTillSession:String;
            var stopPrice:String;
            var stopSeriesId:String;
            var stopCondition:String;
            var urlVariables:StreamingOrderURLVariable = new StreamingOrderURLVariable();
            var mode:String = "placePro";
            var seriesId:String = this.instrumentId;
            var side:String = this.convertSide();
            var position:String = this.convertPosition();
            var price:String = this.price;
            var priceType:String = this.convertPriceType();
            var pin:String = this.pin;
            var validityType:String = this.convertValidity();
            var publishVolume:String = this.publishVolume;
            var volume:String = this.volume;
            var accno:String = this.accountNumber;
            urlVariables.add("mode", mode);
            urlVariables.add("seriesId", seriesId);
            urlVariables.add("side", side);
            urlVariables.add("position", position);
            urlVariables.add("price", price);
            urlVariables.add("priceType", priceType);
            urlVariables.add("pin", pin);
            urlVariables.add("validityType", validityType);
            urlVariables.add("publishVolume", publishVolume);
            urlVariables.add("volume", volume);
            urlVariables.add("accountNo", accno);
            urlVariables.add("txtTerminalType", StreamingAttribute.terminalType);
            if (this._validityType.isDate()){
                validTillDate = this.convertDate();
                urlVariables.add("validTillDate", validTillDate);
            } else {
                if (this._validityType.isTime()){
                    validTillTime = this.convertTime();
                    urlVariables.add("validTillTime", validTillTime);
                } else {
                    if (this._validityType.isSession()){
                        validTillSession = this.convertState();
                        urlVariables.add("validTillSession", validTillSession);
                    };
                };
            };
            if (!this.stopCondition.isNoType()){
                stopPrice = this.stopPrice;
                stopSeriesId = this.stopInstrumentId;
                stopCondition = this.convertStopCondition();
                urlVariables.add("stopPrice", stopPrice);
                urlVariables.add("stopSeriesId", stopSeriesId);
                urlVariables.add("stopCondition", stopCondition);
            };
            return (urlVariables);
        }
        private function convertTime():String{
            return (StreamingTimeFormatter.DATE_TIME_FORMAT.format(this._dateTime));
        }
        private function convertDate():String{
            return (StreamingTimeFormatter.DATE_SLASH_FORMAT.format(this._dateTime));
        }
        private function convertStopCondition():String{
            switch (_stopCondition){
                case StopCondition.ASK_GREATER_STOP:
                    return ("1");
                case StopCondition.ASK_LESSER_STOP:
                    return ("2");
                case StopCondition.BID_GREATER_STOP:
                    return ("3");
                case StopCondition.BID_LESSER_STOP:
                    return ("4");
                case StopCondition.LAST_GREATER_STOP:
                    return ("5");
                case StopCondition.LAST_LESSER_STOP:
                    return ("6");
                default:
                    return ("0");
            };
        }
        private function convertValidity():String{
            switch (_validityType){
                case DerivativesValidity.AUCTION:
                    return ("GTA");
                case DerivativesValidity.AUTO_M:
                    return ("AUTO-M");
                case DerivativesValidity.CANCEL:
                    return ("GTC");
                case DerivativesValidity.DATE:
                    return ("GTD");
                case DerivativesValidity.DAY:
                    return ("DAY");
                case DerivativesValidity.FOK:
                    return ("FOK");
                case DerivativesValidity.IOC:
                    return ("IOC");
                case DerivativesValidity.SESSION:
                    return ("GTS");
                case DerivativesValidity.TIME:
                    return ("GTT");
                default:
                    return ("");
            };
        }
        private function convertPriceType():String{
            switch (_priceType){
                case DerivativesPriceType.LIMIT:
                    return ("LIMIT");
                case DerivativesPriceType.ATO:
                    return ("ATO");
                case DerivativesPriceType.MP:
                    return ("MP");
                case DerivativesPriceType.MP_MKT:
                    return ("MP-MKT");
                case DerivativesPriceType.MP_MTL:
                    return ("MP-MTL");
                default:
                    return ("");
            };
        }
        private function convertPosition():String{
            switch (_position){
                case DerivativesPosition.OPEN:
                    return ("O");
                case DerivativesPosition.CLOSE:
                    return ("C");
                case DerivativesPosition.AUTO:
                    return ("A");
                default:
                    return ("");
            };
        }
        private function convertSide():String{
            switch (_orderSide){
                case DerivativesOrderSide.LONG:
                    return ("B");
                case DerivativesOrderSide.SHORT:
                    return ("S");
                default:
                    return ("");
            };
        }
        private function convertState():String{
            return (this.state.value);
        }
        public function get dateTime():Date{
            return (this._dateTime);
        }
        public function set dateTime(value:Date):void{
            this._dateTime = value;
        }
        public function get state():StateType{
            return (this._state);
        }
        public function set state(value:StateType):void{
            this._state = value;
        }

    }
}//package com.settrade.streaming5.newtrading.message.request 
﻿package com.settrade.streaming5.newtrading.message.request {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.connection.common.*;

    public class OrderStatusSearchDerivativesRequestMessage extends OrderStatusSearchDerivativesRequestMessage {

        public function OrderStatusSearchDerivativesRequestMessage(accountNumber:String, orderNumber:String, status:OrderFilterStatus, tfexOrderNumber:String, instrumentId:String, orderSide:DerivativesOrderSide, enterId:String, priceType:DerivativesPriceType, validity:DerivativesValidity, stopId:String){
            super(accountNumber, orderNumber, status, tfexOrderNumber, instrumentId, orderSide, enterId, priceType, validity, stopId, null);
        }
        override public function toURLVariable():StreamingURLVariables{
            var urlVars:StreamingURLVariables = new StreamingURLVariables();
            urlVars.add("accountNo", _accountNumber);
            urlVars.add("txtOrderNo", _orderNumber);
            urlVars.add("status", _status.derivativesValue);
            urlVars.add("txtTFEXOrderNo", _tfexOrderNumber);
            urlVars.add("txtSeriesId", _instrumentId);
            urlVars.add("txtSide", this.convertSide());
            urlVars.add("txtEnterId", _enterId);
            urlVars.add("txtType", this.convertPriceType());
            urlVars.add("txtValidity", this.convertValidity());
            urlVars.add("txtStopId", _stopId);
            return (urlVars);
        }
        private function convertSide():String{
            switch (_orderSide){
                case DerivativesOrderSide.LONG:
                    return ("B");
                case DerivativesOrderSide.SHORT:
                    return ("S");
                default:
                    return ("A");
            };
        }
        private function convertValidity():String{
            switch (_validity){
                case DerivativesValidity.ALL_TYPE:
                    return ("A");
                case DerivativesValidity.AUTO_M:
                    return ("AUTO-M");
                case DerivativesValidity.DAY:
                    return ("DAY");
                case DerivativesValidity.FOK:
                    return ("FOK");
                case DerivativesValidity.IOC:
                    return ("IOC");
                case DerivativesValidity.DATE:
                    return ("GTD");
                case DerivativesValidity.CANCEL:
                    return ("GTC");
                case DerivativesValidity.TIME:
                    return ("GTT");
                case DerivativesValidity.SESSION:
                    return ("GTS");
                case DerivativesValidity.AUCTION:
                    return ("GTA");
                default:
                    return ("");
            };
        }
        private function convertPriceType():String{
            switch (_priceType){
                case DerivativesPriceType.ALL_TYPE:
                    return ("A");
                case DerivativesPriceType.LIMIT:
                    return ("LIMIT");
                case DerivativesPriceType.ATO:
                    return ("ATO");
                case DerivativesPriceType.MP:
                    return ("MP");
                case DerivativesPriceType.MP_MTL:
                    return ("MP-MTL");
                case DerivativesPriceType.MP_MKT:
                    return ("MP-MKT");
                default:
                    return ("");
            };
        }

    }
}//package com.settrade.streaming5.newtrading.message.request 
﻿package com.settrade.streaming5.newtrading.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.response.orderstatus.*;
    import com.settrade.streaming5.datacomponent.parser.*;
    import com.settrade.log.logger.*;

    public class OrderDerivativesMessageParser extends OrderDerivativesMessageParser {

        private static var logger:Logger = new Logger(prototype.constructor);

        public function OrderDerivativesMessageParser(){
            super();
        }
        override protected function parseOrderStatusToken(str:String):OrderStatusDerivatives{
            var token:Array = str.split(Delimiter.LEVEL1);
            var index:int;
            var _temp1 = index;
            index = (index + 1);
            var orderNumber:String = token[_temp1];
            var _temp2 = index;
            index = (index + 1);
            var instrumentId:String = token[_temp2];
            var _temp3 = index;
            index = (index + 1);
            var time:String = token[_temp3];
            var _temp4 = index;
            index = (index + 1);
            var side:DerivativesOrderSide = DerivativesOrderSide.lookupFromOrder(token[_temp4]);
            var _temp5 = index;
            index = (index + 1);
            var priceStr:String = token[_temp5];
            var priceType:DerivativesPriceType = DerivativesPriceType.lookUpFromOrder(priceStr);
            if (priceType.isNoType()){
                priceType = DerivativesPriceType.LIMIT;
            };
            var price:Number = Number(priceStr);
            var _temp6 = index;
            index = (index + 1);
            var volume:Number = Number(token[_temp6]);
            var _temp7 = index;
            index = (index + 1);
            var matchVolume:Number = Number(token[_temp7]);
            var _temp8 = index;
            index = (index + 1);
            var balanceVolume:Number = Number(token[_temp8]);
            var _temp9 = index;
            index = (index + 1);
            var cancelVolume:Number = Number(token[_temp9]);
            var _temp10 = index;
            index = (index + 1);
            var valStr:String = token[_temp10];
            var validity:DerivativesValidity = DerivativesValidity.lookupFromNewOrder(valStr);
            var _temp11 = index;
            index = (index + 1);
            var until:String = token[_temp11];
            var _temp12 = index;
            index = (index + 1);
            var status:String = token[_temp12];
            var _temp13 = index;
            index = (index + 1);
            var canCancel = (token[_temp13] == "Y");
            var _temp14 = index;
            index = (index + 1);
            var canChange = (token[_temp14] == "Y");
            var _temp15 = index;
            index = (index + 1);
            var position:DerivativesPosition = DerivativesPosition.lookupFromOrder(token[_temp15]);
            var _temp16 = index;
            index = (index + 1);
            var enterId:String = token[_temp16];
            var _temp17 = index;
            index = (index + 1);
            var accountNumber:String = token[_temp17];
            var _temp18 = index;
            index = (index + 1);
            var canApprove = (token[_temp18] == "Y");
            var _temp19 = index;
            index = (index + 1);
            var deleteFlag = (token[_temp19] == "Y");
            var _temp20 = index;
            index = (index + 1);
            var priceDigit:int = int(token[_temp20]);
            var _temp21 = index;
            index = (index + 1);
            var tfexOrderNumber:String = token[_temp21];
            var _temp22 = index;
            index = (index + 1);
            var isStopOrder = (token[_temp22] == "Y");
            var _temp23 = index;
            index = (index + 1);
            var date:String = token[_temp23];
            var _temp24 = index;
            index = (index + 1);
            var isStopOrderActivate = (token[_temp24] == "Y");
            var _temp25 = index;
            index = (index + 1);
            var isTradeReport = (token[_temp25] == "Y");
            var _temp26 = index;
            index = (index + 1);
            var version:Number = Number(token[_temp26]);
            var orderStatus:OrderStatusDerivatives = new OrderStatusDerivatives(orderNumber, instrumentId, time, side, price, volume, matchVolume, balanceVolume, cancelVolume, validity, until, status, canCancel, canChange, position, enterId, accountNumber, canApprove, deleteFlag, priceDigit, tfexOrderNumber, isStopOrder, date, false, priceType, canChange, isStopOrderActivate, version);
            return (orderStatus);
        }

    }
}//package com.settrade.streaming5.newtrading.datacomponent.parser 
﻿package com.settrade.streaming5.newtrading.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.datacomponent.parser.*;

    public class OrderAjaxDerivativesMessageParser extends OrderAjaxDerivativesMessageParser {

        override protected function parseValidity(str:String):DerivativesValidity{
            return (DerivativesValidity.lookupFromNewOrder(str));
        }
        override protected function parsePriceType(str:String):DerivativesPriceType{
            var priceType:DerivativesPriceType = DerivativesPriceType.lookUpFromOrder(str);
            return (((priceType.isNoType()) ? DerivativesPriceType.LIMIT : priceType));
        }
        override protected function parseIsStopOrderNotActivate(str:String):Boolean{
            return ((str == "T"));
        }

    }
}//package com.settrade.streaming5.newtrading.datacomponent.parser 
﻿package com.settrade.streaming5.newtrading.datacomponent.parser {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.datacomponent.parser.*;
    import com.settrade.streaming5.message.response.blocktrade.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.streaming5.message.control.*;

    public class BlockTradeMessageParser extends BlockTradeMessageParser {

        override protected function parseTrType(responseMessage:ObjectResponseMessage):Message{
            var data:Object;
            var _local4:Array;
            var _local5:BlockTradeTrTypeResponseMessage;
            data = responseMessage.data;
            var status:OrderResponseStatus = getResponseStatus(data);
            switch (status){
                case OrderResponseStatus.SUCCESS:
                    _local4 = data.trType;
                    _local5 = new BlockTradeTrTypeResponseMessage(responseMessage.requestMessage, responseMessage.source, _local4);
                    return (_local5);
                case OrderResponseStatus.FAILED:
                    return (parseFailMessage(responseMessage));
            };
            return (new InvalidParseMessage(responseMessage, null, responseMessage.requestMessage));
        }

    }
}//package com.settrade.streaming5.newtrading.datacomponent.parser 
﻿package com.settrade.streaming5.newtrading.service {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.newtrading.message.request.*;

    public class OrderStatusSearchService extends OrderStatusSearchService {

        public static function replaceInstance():void{
            instance = new (OrderStatusSearchService)();
        }

        override public function searchOrderDerivatives(accountNumber:String, status:OrderFilterStatus, orderNumber:String, tfexOrderNumber:String, instrumentId:String, side:DerivativesOrderSide, enterId:String, priceType:DerivativesPriceType, validity:DerivativesValidity, stopId:String, validityDate:Date):Number{
            var message:OrderStatusSearchDerivativesRequestMessage = new OrderStatusSearchDerivativesRequestMessage(accountNumber, orderNumber, status, tfexOrderNumber, instrumentId, side, enterId, priceType, validity, stopId);
            sendAndNotifyMessage(message);
            return (message.id);
        }

    }
}//package com.settrade.streaming5.newtrading.service 
﻿package com.settrade.streaming5.newtrading.service {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.message.response.fastquote.*;
    import com.settrade.streaming5.newtrading.message.request.*;

    public class PlaceOrderDerivativesService extends PlaceOrderDerivativesService {

        public static function replaceInstance():void{
            instance = new (PlaceOrderDerivativesService)();
        }

        override public function placeOrder(instrumentId:String, price:String, priceType:DerivativesPriceType, orderSide:DerivativesOrderSide, position:DerivativesPosition, volume:String, validity:DerivativesValidity, pin:String, publishVolume:String="", account:Account=null):Number{
            return (this.placeOrderNewTrading(instrumentId, price, priceType, orderSide, position, volume, validity, pin, publishVolume, null, null, account));
        }
        override public function placeOrderNewTrading(instrumentId:String, price:String, priceType:DerivativesPriceType, orderSide:DerivativesOrderSide, position:DerivativesPosition, volume:String, validity:DerivativesValidity, pin:String, publishVolume:String, dateTime:Date, state:StateType, account:Account=null):Number{
            return (this.placeStopOrderNewTrading(instrumentId, price, priceType, orderSide, position, volume, validity, pin, publishVolume, StopCondition.NO_TYPE, "", "", dateTime, state, account));
        }
        override public function placeStopOrder(instrumentId:String, price:String, priceType:DerivativesPriceType, orderSide:DerivativesOrderSide, position:DerivativesPosition, volume:String, validity:DerivativesValidity, pin:String, publishVolume:String, stopCondition:StopCondition, stopInstrumentId:String, stopPrice:String, account:Account=null):Number{
            return (this.placeStopOrderNewTrading(instrumentId, price, priceType, orderSide, position, volume, validity, pin, publishVolume, StopCondition.NO_TYPE, "", "", null, null, account));
        }
        override public function placeStopOrderNewTrading(instrumentId:String, price:String, priceType:DerivativesPriceType, orderSide:DerivativesOrderSide, position:DerivativesPosition, volume:String, validity:DerivativesValidity, pin:String, publishVolume:String, stopCondition:StopCondition, stopInstrumentId:String, stopPrice:String, dateTime:Date, state:StateType, account:Account=null):Number{
            if (account == null){
                account = accountManager.currentAccount;
            };
            var message:PlaceOrderDerivativesRequestMessage = new PlaceOrderDerivativesRequestMessage();
            message.instrumentId = instrumentId;
            message.price = StreamingNumberFormatter.removeComma(price);
            message.priceType = priceType;
            message.volume = StreamingNumberFormatter.removeComma(volume);
            message.validityType = validity;
            message.position = position;
            message.pin = pin;
            message.orderSide = orderSide;
            message.accountNumber = account.accountNumber;
            message.stopCondition = stopCondition;
            message.stopInstrumentId = stopInstrumentId;
            message.stopPrice = StreamingNumberFormatter.removeComma(stopPrice);
            message.publishVolume = StreamingNumberFormatter.removeComma(publishVolume);
            message.dateTime = dateTime;
            message.state = state;
            sendAndNotifyMessage(message);
            return (message.id);
        }

    }
}//package com.settrade.streaming5.newtrading.service 
﻿package com.settrade.streaming5.connection {
    import com.settrade.streaming5.message.*;

    public interface IMessageSender {

        function sendMessage(_arg1:Message):void;

    }
}//package com.settrade.streaming5.connection 
﻿package com.settrade.streaming5.connection {
    import com.settrade.streaming5.message.*;
    import flash.utils.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.connection.helper.*;
    import com.settrade.streaming5.datacomponent.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;

    public class ConnectionManager implements IMessageReceiver, IMessageSender {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:ConnectionManager = new (ConnectionManager)();
;
        protected static var dataComponent:DataComponent;

        protected var connectionHelperFactory:ConnectionHelperFactory;

        public function ConnectionManager(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            this.connectionHelperFactory = ConnectionHelperFactory.getInstance(this);
            dataComponent = DataComponent.getInstance();
            logger.info("Initial Complete");
        }
        public static function getInstance():IMessageSender{
            return (instance);
        }

        public function receiveMessage(message:Message):void{
            dataComponent.receiveMessage(message);
        }
        public function sendMessage(message:Message):void{
            var requestMessage:RequestMessage;
            var connectionHelper:ConnectionHelper;
            if (message.side.isRequest()){
                if ((message is IMultipleMessage)){
                    this.sendMultipleMessage(IMultipleMessage(message));
                } else {
                    requestMessage = RequestMessage(message);
                    connectionHelper = this.connectionHelperFactory.getConnectionHelper(requestMessage);
                    connectionHelper.sendMessage(message);
                };
            } else {
                throw (new InvalidMessageSideError(message));
            };
        }
        public function sendMultipleMessage(message:IMultipleMessage):void{
            var oMessage:Message;
            var key:Object;
            var curMessage:RequestMessage;
            var connectionHelper:ConnectionHelper;
            var multipleRequestMessage:MultipleRequestMessage;
            var curHelper:ConnectionHelper;
            var curMultiMessage:MultipleRequestMessage;
            var messageList:Vector.<RequestMessage> = new Vector.<RequestMessage>();
            var helperDictionary:Dictionary = new Dictionary();
            for each (oMessage in message.messageList) {
                if (oMessage.side.isRequest()){
                    messageList.push(RequestMessage(oMessage));
                } else {
                    logger.warn(("Drop Message:" + oMessage.type));
                };
            };
            while (messageList.length > 0) {
                curMessage = messageList.pop();
                if ((curMessage is IMultipleMessage)){
                    for each (oMessage in IMultipleMessage(curMessage).messageList) {
                        if (oMessage.side.isRequest()){
                            messageList.push(RequestMessage(oMessage));
                        } else {
                            logger.warn(("Drop Message:" + oMessage.type));
                        };
                    };
                } else {
                    connectionHelper = this.connectionHelperFactory.getConnectionHelper(curMessage);
                    multipleRequestMessage = helperDictionary[connectionHelper];
                    if (multipleRequestMessage == null){
                        multipleRequestMessage = new MultipleRequestMessage(message.id);
                        helperDictionary[connectionHelper] = multipleRequestMessage;
                    };
                    multipleRequestMessage.add(curMessage);
                };
            };
            for (key in helperDictionary) {
                curHelper = ConnectionHelper(key);
                curMultiMessage = helperDictionary[key];
                curHelper.sendMessage(curMultiMessage);
            };
        }

    }
}//package com.settrade.streaming5.connection 
﻿package com.settrade.streaming5.connection {
    import com.settrade.streaming5.message.*;

    public interface IMessageReceiver {

        function receiveMessage(_arg1:Message):void;

    }
}//package com.settrade.streaming5.connection 
﻿package com.settrade.streaming5.connection.helper.stub {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.feed.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.connection.helper.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.message.raw.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.raw.feed.*;

    public class StubHelper extends ConnectionHelper {

        protected static var instance:StubHelper;
        private static var logger:Logger = new Logger(prototype.constructor);

        public function StubHelper(){
            super();
            logger.info("Initial Complete");
        }
        public static function getInstance():StubHelper{
            if (instance == null){
                instance = new (StubHelper)();
            };
            return (instance);
        }

        override public function sendMessage(message:Message):void{
            logger.debug(("Send Message: " + message.type));
            var messageType:MessageType = message.type;
            if (messageType.isStubRequest()){
                this.getStubRequestHandler(StubRequestMessage(message));
            };
        }
        public function getStubRequestHandler(message:StubRequestMessage):void{
            var data:String = message.data;
            var responseMessage:ResponseMessage = new StubResponseMessage(System.NO_SYSTEM, message, Source.STUB, data);
            var rawResponseMessage:* = new StubRawResponseMessage(responseMessage);
            receiver.receiveMessage(rawResponseMessage);
            var feedMessage:StubFeedMessage = new StubFeedMessage(System.NO_SYSTEM, Source.STUB, data);
            var rawFeedMessage:* = new StubRawFeedMessage(feedMessage);
            super.notifyReceiveMessage(rawFeedMessage);
        }

    }
}//package com.settrade.streaming5.connection.helper.stub 
﻿package com.settrade.streaming5.connection.helper {
    import com.settrade.streaming5.enumuration.*;
    import flash.utils.*;
    import com.settrade.streaming5.connection.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.connection.helper.feed.*;
    import com.settrade.streaming5.connection.helper.http.*;
    import com.settrade.streaming5.connection.helper.stub.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;

    public class ConnectionHelperFactory {

        protected static var instance:ConnectionHelperFactory;
        private static var logger:Logger = new Logger(prototype.constructor);

        protected var _receiver:IMessageReceiver;
        protected var stubHelper:StubHelper;
        protected var requestHelper:RequestHelper;
        protected var sequentialRequestHelper:SequentialRequestHelper;
        protected var feedHelper:FeedHelper;
        protected var helperMap:Dictionary;

        public function ConnectionHelperFactory(receiver:IMessageReceiver){
            super();
            this._receiver = receiver;
            this.helperMap = new Dictionary();
            this.initAllHelper();
            this.setHelperReceiver();
            this.createHelperMap();
            logger.info("Initial Complete");
        }
        public static function getInstance(receiver:IMessageReceiver=null):ConnectionHelperFactory{
            if (instance == null){
                instance = new ConnectionHelperFactory(receiver);
            } else {
                if (receiver != null){
                    instance.receiver = receiver;
                };
            };
            return (instance);
        }

        private function initAllHelper(){
            this.stubHelper = StubHelper.getInstance();
            this.requestHelper = RequestHelper.getInstance();
            this.feedHelper = FeedHelper.getInstance();
            this.sequentialRequestHelper = SequentialRequestHelper.getInstance();
        }
        private function setHelperReceiver(){
            this.stubHelper.receiver = this.receiver;
            this.requestHelper.receiver = this.receiver;
            this.feedHelper.receiver = this.receiver;
            this.sequentialRequestHelper.receiver = this.receiver;
        }
        private function createHelperMap(){
            this.helperMap[MessageType.STUB_REQUEST] = this.stubHelper;
            this.helperMap[MessageType.NEW_STUB_REQUEST] = this.stubHelper;
            this.helperMap[MessageType.GENERATE_KEY_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.USER_CHECK_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.REGISTER_KEY_REQUEST] = this.feedHelper;
            this.helperMap[MessageType.MARKET_SUMMARY_REQUEST] = this.feedHelper;
            this.helperMap[MessageType.MARKET_TICKER_REQUEST] = this.feedHelper;
            this.helperMap[MessageType.INFO_REQUEST] = this.feedHelper;
            this.helperMap[MessageType.INFO_STATISTIC_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.INFO_STATISTIC_CHART_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.INFO_ODDLOT_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.INSTRUMENT_TICKER_REQUEST] = this.feedHelper;
            this.helperMap[MessageType.INSTRUMENT_TICKER_ODDLOT_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.SNAPSHOT_REQUEST] = this.feedHelper;
            this.helperMap[MessageType.ORDER_PUSH_CHECK_REQUEST] = this.feedHelper;
            this.helperMap[MessageType.ANNOUNCEMENT_REQUEST] = this.feedHelper;
            this.helperMap[MessageType.VOLUME_BY_PRICE_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.VOLUME_BY_PRICE_DETAIL_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.ORDER_STATUS_PUSH_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.INTRADAY_CHART_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.HISTORICAL_CHART_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.HISTORICAL_BY_DATE_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.INSTRUMENT_LIST_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.NEWS_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.SET_CALENDAR_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.OPTIONS_STRIKE_PRICE_LIST_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.OPTIONS_GREEK_VALUE_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.OPTIONS_GREEK_DEFAULT_VALUE_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.SYMBOL_SELECTOR_OPTIONS_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.SYMBOL_SELECTOR_TREE_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.PIN_CHECK_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.OPTIONS_EXPIRE_DATE_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.PLACE_ORDER_EQUITY_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.PLACE_ORDER_EQUITY_CONFIRM_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.ORDER_STATUS_EQUITY_REQUEST] = this.sequentialRequestHelper;
            this.helperMap[MessageType.PORTFOLIO_EQUITY_REQUEST] = this.sequentialRequestHelper;
            this.helperMap[MessageType.ACCOUNT_INFO_EQUITY_REQUEST] = this.sequentialRequestHelper;
            this.helperMap[MessageType.DEAL_SUMMARY_EQUITY_REQUEST] = this.sequentialRequestHelper;
            this.helperMap[MessageType.CANCEL_ORDER_EQUITY_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.ORDER_STATUS_BY_NUMBER_EQUITY_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.ACCOUNT_INFO_LONG_EQUITY_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.PLACE_ORDER_DERIVATIVES_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.PLACE_ORDER_DERIVATIVES_CONFIRM_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.ORDER_STATUS_DERIVATIVES_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.ORDER_STATUS_ALL_DERIVATIVES_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.PORTFOLIO_DERIVATIVES_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.ACCOUNT_INFO_DERIVATIVES_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.DEAL_SUMMARY_DERIVATIVES_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.DEAL_SUMMARY_DERIVATIVES_BY_INSTRUMENT_ID_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.DEAL_SUMMARY_DERIVATIVES_BY_PRICE_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.CANCEL_ORDER_DERIVATIVES_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.ORDER_STATUS_BY_NUMBER_DERIVAITVES_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.POSITION_CLOSING_DERIVATIVES_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.OUTSTANDING_POSITION_DERIVATIVES_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.ACCOUNT_INFO_LONG_DERIVATIVES_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.EXPIRE_DATE_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.OPTIONS_RECOMMEND_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.OPTIONS_HISTORICAL_CHART_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.OPTIONS_COMMISSION_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.OPTIONS_INSTRUMENT_LIST_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.FAVOURITE_ADD_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.FAVOURITE_REMOVE_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.FAVOURITE_UPDATE_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.FAVOURITE_SWAP_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.ACCOUNT_LIST_EQUITY_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.ACCOUNT_NAME_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.STATIC_DATA_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.SYNC_TIME_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.UPDATE_CONFIG_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.NEWS_INFORMATION_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.RESEARCH_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.OPPDAY_ARCHIVE_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.OPPDAY_LIVE_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.OPPDAY_SEARCH_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.INSTRUMENT_ID_VALIDATOR_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.ORDER_STATUS_SEARCH_EQUITY_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.ORDER_STATUS_SEARCH_DERIVATIVES_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.CHANGE_ORDER_EQUITY_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.CHANGE_ORDER_EQUITY_CONFIRM_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.CHANGE_ORDER_DERIVATIVES_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.CHANGE_ORDER_DERIVATIVES_CONFIRM_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.PAGE_STAT_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.BLOCK_TRADE_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.BLOCK_TRADE_CONFIRM_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.BLOCK_TRADE_TRTYPE_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.BLOCK_TRADE_INIT_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.BLOCK_TRADE_INFO_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.ACCOUNT_LIST_HIERACHY_DERIVATIVES_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.FAST_QUOTE_DERIVATIVES_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.MULTIPLE_ORDER_CALCULATE_EQUITY_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.MULTIPLE_ORDER_GET_LAST_EQUITY_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.MULTIPLE_ORDER_GET_PERCENT_EQUITY_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.MULTIPLE_ORDER_SORT_MARKETCAP_EQUITY_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.MULTIPLE_ORDER_EXTRACT_EQUITY_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.PLACE_MULTIPLE_ORDER_EQUITY_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.MULTIPLE_ORDER_GET_LAST_DERIVATIVES_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.MULTIPLE_ORDER_EXTRACT_DERIVATIVES_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.PLACE_MULTIPLE_ORDER_DERIVATIVES_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.NOTIFICATION_STARTUP_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.WIDGET_TEMPLATE_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.MARGIN_STOCK_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.TISCO_SETTLE_INFO_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.TISCO_STOCK_INFO_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.TISCO_VOL_FOCUS_LIST_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.DBSV_TECHNICAL_INSIGHT_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.DBSV_VALUE_ANALYZER_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.DBSV_SUPPORT_AND_RESISTANCE_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.DBSV_START_DATE_END_DATE_REQUEST] = this.requestHelper;
            this.helperMap[MessageType.DBSV_BULLISH_BEARISH_SPECIFIC_TAB_REQUEST] = this.requestHelper;
        }
        public function getConnectionHelper(message:RequestMessage):ConnectionHelper{
            var connectionHelper:ConnectionHelper;
            connectionHelper = ConnectionHelper(this.helperMap[message.type]);
            if (connectionHelper == null){
                logger.error(("Cannot get Helper for Message Type:" + message.type));
                throw (new InvalidMessageTypeError(message));
            };
            return (connectionHelper);
        }
        public function get receiver():IMessageReceiver{
            return (this._receiver);
        }
        public function set receiver(value:IMessageReceiver):void{
            this._receiver = value;
            this.setHelperReceiver();
        }

    }
}//package com.settrade.streaming5.connection.helper 
﻿package com.settrade.streaming5.connection.helper.http {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import flash.utils.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.connection.helper.*;
    import com.settrade.streaming5.message.raw.request.*;
    import com.settrade.streaming5.connection.serializer.*;
    import com.settrade.streaming5.connection.connector.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;

    public class SequentialRequestHelper extends ConnectionHelper {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:SequentialRequestHelper;

        protected var currentConnectorMap:Dictionary;
        protected var systemHostConnectorMap:Dictionary;
        protected var systemMessageQueue:Dictionary;
        protected var systemReadyState:Dictionary;
        protected var serializer:UrlSerializer;

        public function SequentialRequestHelper(){
            super();
            this.currentConnectorMap = new Dictionary();
            this.systemHostConnectorMap = new Dictionary();
            this.systemMessageQueue = new Dictionary();
            this.systemReadyState = new Dictionary();
            this.serializer = UrlSerializer.getInstance();
        }
        public static function getInstance():SequentialRequestHelper{
            if (instance == null){
                instance = new (SequentialRequestHelper)();
            };
            return (instance);
        }

        override public function sendMessage(message:Message):void{
            var rawMessage:RawRequestMessage;
            if (!message.side.isRequest()){
                throw (new InvalidMessageSideError(message));
            };
            var requestMessage:RequestMessage = RequestMessage(message);
            var rawMessageList:Vector.<RawRequestMessage> = this.serializer.serialize(requestMessage);
            for each (rawMessage in rawMessageList) {
                this.addMessageToQueue(rawMessage);
                this.sendMessageIfReady(rawMessage.system);
            };
        }
        override public function receiveMessage(message:Message):void{
            if (this.getMessageQueue(message.system).length > 0){
                this.sendMessageToConnector(message.system);
            } else {
                this.unlockSystem(message.system);
            };
            super.receiveMessage(message);
        }
        public function sendMessageIfReady(system:System):void{
            if (this.isReadyState(system)){
                this.sendMessageToConnector(system);
            };
        }
        public function sendMessageToConnector(system:System):void{
            this.lockSystem(system);
            var connector:HttpConnector = this.getCurrentConnector(system);
            var message:Message = this.dequeueMessage(system);
            if (connector == null){
                logger.error(("Connector not found: " + system));
            } else {
                if (message == null){
                    logger.error(("Message not found: " + system));
                } else {
                    connector.sendMessage(message);
                };
            };
        }
        public function isReadyState(system:System):Boolean{
            return (this.systemReadyState[system]);
        }
        public function lockSystem(system:System):void{
            this.systemReadyState[system] = false;
        }
        public function unlockSystem(system:System):void{
            this.systemReadyState[system] = true;
        }
        public function addMessageToQueue(message:Message):void{
            var queue:Array = this.getMessageQueue(message.system);
            queue.push(message);
        }
        public function dequeueMessage(system:System):RawRequestMessage{
            return (this.getMessageQueue(system).shift());
        }
        public function getMessageQueue(system:System):Array{
            var messageQueue:Array = (this.systemMessageQueue[system] as Array);
            if (messageQueue == null){
                messageQueue = new Array();
            };
            return (messageQueue);
        }
        public function hasConnector(system:System, host:String):Boolean{
            return (!((this.getConnector(system, host) == null)));
        }
        public function getConnector(system:System, host:String):Connector{
            var systemDictionary:Dictionary = Dictionary(this.systemHostConnectorMap[system]);
            if (systemDictionary == null){
                return (null);
            };
            return (systemDictionary[host]);
        }
        public function addConnector(system:System, host:String):void{
            var systemDictionary:Dictionary;
            var messageQueue:Array;
            var connector:HttpConnector = new HttpConnector(host, system, this);
            if (!this.hasConnector(system, host)){
                systemDictionary = Dictionary(this.systemHostConnectorMap[system]);
                if (systemDictionary == null){
                    systemDictionary = new Dictionary();
                    messageQueue = new Array();
                    this.systemHostConnectorMap[system] = systemDictionary;
                    this.systemMessageQueue[system] = messageQueue;
                    this.systemReadyState[system] = true;
                };
                systemDictionary[host] = connector;
                if (!this.hasCurrentConnector(system)){
                    this.setCurrentConnector(system, host);
                };
                logger.info(((("Insert Connector: " + system) + ":") + host));
            } else {
                logger.error(((("Already has connector: " + system) + ":") + host));
            };
        }
        public function hasCurrentConnector(system:System):Boolean{
            return (!((this.getCurrentConnector(system) == null)));
        }
        public function getCurrentConnector(system:System):HttpConnector{
            return (this.currentConnectorMap[system]);
        }
        public function setCurrentConnector(system:System, host:String):void{
            if (this.hasConnector(system, host)){
                this.currentConnectorMap[system] = this.getConnector(system, host);
                logger.info(((("Set Current Connector: " + system) + ":") + host));
            } else {
                logger.error(((("Connector not found: " + system) + ":") + host));
            };
        }

    }
}//package com.settrade.streaming5.connection.helper.http 
﻿package com.settrade.streaming5.connection.helper.http {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import flash.utils.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.connection.helper.*;
    import com.settrade.streaming5.message.raw.request.*;
    import com.settrade.streaming5.connection.serializer.*;
    import com.settrade.streaming5.connection.connector.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;

    public class RequestHelper extends ConnectionHelper {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:RequestHelper;

        protected var currentConnectorMap:Dictionary;
        protected var systemHostConnectorMap:Dictionary;
        protected var serializer:UrlSerializer;

        public function RequestHelper(){
            super();
            this.currentConnectorMap = new Dictionary();
            this.systemHostConnectorMap = new Dictionary();
            this.serializer = UrlSerializer.getInstance();
        }
        public static function getInstance():RequestHelper{
            if (instance == null){
                instance = new (RequestHelper)();
            };
            return (instance);
        }

        override public function sendMessage(message:Message):void{
            var rawMessage:RawRequestMessage;
            var connector:HttpConnector;
            if (!message.side.isRequest()){
                throw (new InvalidMessageSideError(message));
            };
            var requestMessage:RequestMessage = RequestMessage(message);
            var rawMessageList:Vector.<RawRequestMessage> = this.serializer.serialize(requestMessage);
            for each (rawMessage in rawMessageList) {
                connector = this.getCurrentConnector(rawMessage.system);
                if (connector == null){
                    logger.error(("Connector not found: " + rawMessage.system));
                } else {
                    connector.sendMessage(rawMessage);
                };
            };
        }
        public function hasConnector(system:System, host:String):Boolean{
            return (!((this.getConnector(system, host) == null)));
        }
        public function getConnector(system:System, host:String):Connector{
            var systemDictionary:Dictionary = Dictionary(this.systemHostConnectorMap[system]);
            if (systemDictionary == null){
                return (null);
            };
            return (systemDictionary[host]);
        }
        public function addConnector(system:System, host:String):void{
            var systemDictionary:Dictionary;
            var connector:HttpConnector = new HttpConnector(host, system, this);
            if (!this.hasConnector(system, host)){
                systemDictionary = Dictionary(this.systemHostConnectorMap[system]);
                if (systemDictionary == null){
                    systemDictionary = new Dictionary();
                    this.systemHostConnectorMap[system] = systemDictionary;
                };
                systemDictionary[host] = connector;
                if (!this.hasCurrentConnector(system)){
                    this.setCurrentConnector(system, host);
                };
                logger.info(((("Insert Connector: " + system) + ":") + host));
            } else {
                logger.error(((("Already has connector: " + system) + ":") + host));
            };
        }
        public function hasCurrentConnector(system:System):Boolean{
            return (!((this.getCurrentConnector(system) == null)));
        }
        public function getCurrentConnector(system:System):HttpConnector{
            return (this.currentConnectorMap[system]);
        }
        public function getCurrentHost(system:System):String{
            return (this.getCurrentConnector(system).host);
        }
        public function setCurrentConnector(system:System, host:String):void{
            if (this.hasConnector(system, host)){
                this.currentConnectorMap[system] = this.getConnector(system, host);
                logger.info(((("Set Current Connector: " + system) + ":") + host));
            } else {
                logger.error(((("Connector not found: " + system) + ":") + host));
            };
        }

    }
}//package com.settrade.streaming5.connection.helper.http 
﻿package com.settrade.streaming5.connection.helper.feed {
    import com.settrade.streaming5.message.*;
    import flash.utils.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.connection.helper.*;
    import com.settrade.streaming5.message.raw.request.*;
    import com.settrade.streaming5.connection.serializer.*;
    import com.settrade.streaming5.connection.connector.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;

    public class PushHelper extends ConnectionHelper {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:PushHelper;

        protected var connectorList:Vector.<SocketConnector>;
        protected var connectorHostMap:Dictionary;
        protected var currentConnector:SocketConnector;
        protected var serializer:BinarySerializer;

        public function PushHelper(){
            super();
            this.connectorList = new Vector.<SocketConnector>();
            this.connectorHostMap = new Dictionary();
            this.serializer = BinarySerializer.getInstance();
        }
        public static function getInstance():PushHelper{
            if (instance == null){
                instance = new (PushHelper)();
            };
            return (instance);
        }

        override public function sendMessage(message:Message):void{
            var rawMessage:RawRequestMessage;
            if (!message.side.isRequest()){
                throw (new InvalidMessageSideError(message));
            };
            var requestMessage:RequestMessage = RequestMessage(message);
            var rawMessageList:Vector.<RawRequestMessage> = this.serializer.serialize(requestMessage);
            for each (rawMessage in rawMessageList) {
                this.currentConnector.sendMessage(rawMessage);
            };
        }
        public function hasConnector(host:String, port:int):Boolean{
            return (!((this.getConnector(host, port) == null)));
        }
        public function getConnector(host:String, port:int):SocketConnector{
            var connectionPortMap:Dictionary;
            if (this.connectorHostMap[host] == null){
                return (null);
            };
            connectionPortMap = Dictionary(this.connectorHostMap[host]);
            return (connectionPortMap[port]);
        }
        public function setCurrentConnector(host:String, port:int, isConnected:Boolean=true):void{
            if (this.hasConnector(host, port)){
                if (((!((this.currentConnector == null))) && (this.currentConnector.connected))){
                    this.disconnect();
                };
                this.currentConnector = this.getConnector(host, port);
                if (isConnected){
                    this.connect();
                };
            } else {
                logger.error(((("Host not found: " + host) + ":") + port));
            };
        }
        public function addNewConnection(host:String, port:int):void{
            var connector:SocketConnector;
            var connectorPortMap:*;
            if (this.hasConnector(host, port)){
                logger.warn("Duplicate Connector");
            } else {
                connector = new SocketConnector(host, port, this);
                connectorPortMap = this.connectorHostMap[host];
                if (connectorPortMap == null){
                    connectorPortMap = new Dictionary();
                    this.connectorHostMap[host] = connectorPortMap;
                };
                connectorPortMap[port] = connector;
                this.connectorList.push(connector);
            };
        }
        public function disconnect():void{
            if (((!((this.currentConnector == null))) && (this.currentConnector.connected))){
                this.currentConnector.disconnect();
            };
        }
        public function connect():void{
            if (this.currentConnector != null){
                this.currentConnector.connect();
            };
        }

    }
}//package com.settrade.streaming5.connection.helper.feed 
﻿package com.settrade.streaming5.connection.helper.feed {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.*;
    import com.settrade.streaming5.connection.helper.*;
    import com.settrade.streaming5.dispatcher.*;
    import com.settrade.log.logger.*;

    public class FeedHelper extends ConnectionHelper {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:FeedHelper;

        protected var dispatcher:MessageDispatcher;
        protected var currentHelper:ConnectionHelper;
        protected var pullHelper:PullHelper;
        protected var pushHelper:PushHelper;
        protected var _feedState:FeedState;

        public function FeedHelper(receiver:IMessageReceiver=null){
            super(receiver);
            this._feedState = FeedState.PULL;
            this.pullHelper = PullHelper.getInstance();
            this.pushHelper = PushHelper.getInstance();
            this.pullHelper.receiver = this;
            this.pushHelper.receiver = this;
            this.refreshCurrentState();
            logger.info("Initial Complete");
        }
        public static function getInstance():FeedHelper{
            if (instance == null){
                instance = new (FeedHelper)();
            };
            return (instance);
        }

        override public function sendMessage(message:Message):void{
            this.currentHelper.sendMessage(message);
        }
        private function refreshCurrentState():void{
            if (this.feedState.isEnablePush()){
                this.currentHelper = this.pushHelper;
            } else {
                if (this.feedState.isEnablePull()){
                    this.currentHelper = this.pullHelper;
                };
            };
        }
        public function get feedState():FeedState{
            return (this._feedState);
        }
        public function set feedState(value:FeedState):void{
            this._feedState = value;
            this.refreshCurrentState();
        }

    }
}//package com.settrade.streaming5.connection.helper.feed 
﻿package com.settrade.streaming5.connection.helper.feed {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import flash.utils.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.connection.helper.*;
    import com.settrade.streaming5.message.raw.request.*;
    import com.settrade.streaming5.connection.serializer.*;
    import com.settrade.streaming5.connection.connector.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;

    public class PullHelper extends ConnectionHelper {

        protected static var instance:PullHelper;
        private static var logger:Logger = new Logger(prototype.constructor);

        protected var connectorList:Vector.<HttpConnector>;
        protected var connectorHostMap:Dictionary;
        protected var currentConnector:HttpConnector;
        protected var serializer:UrlSerializer;

        public function PullHelper(){
            super();
            this.connectorList = new Vector.<HttpConnector>();
            this.connectorHostMap = new Dictionary();
            this.serializer = UrlSerializer.getInstance();
        }
        public static function getInstance():PullHelper{
            if (instance == null){
                instance = new (PullHelper)();
            };
            return (instance);
        }

        override public function sendMessage(message:Message):void{
            var rawMessage:RawRequestMessage;
            if (!message.side.isRequest()){
                throw (new InvalidMessageSideError(message));
            };
            var requestMessage:RequestMessage = RequestMessage(message);
            var rawMessageList:Vector.<RawRequestMessage> = this.serializer.serialize(requestMessage);
            for each (rawMessage in rawMessageList) {
                this.currentConnector.sendMessage(rawMessage);
            };
        }
        public function hasConnector(host:String):Boolean{
            return (!((this.connectorHostMap[host] == null)));
        }
        public function getConnector(host:String):HttpConnector{
            return (HttpConnector(this.connectorHostMap[host]));
        }
        public function setCurrentConnector(host:String):void{
            if (this.hasConnector(host)){
                this.currentConnector = this.getConnector(host);
            } else {
                logger.error(("Host not found: " + host));
            };
        }
        public function addNewConnection(host:String):void{
            var connector:HttpConnector;
            if (this.hasConnector(host)){
                logger.error(("Already has connector:" + host));
            } else {
                connector = new HttpConnector(host, System.REALTIME, this);
                this.connectorHostMap[host] = connector;
                this.connectorList.push(connector);
                logger.info(("Insert Connector: " + host));
            };
        }
        public function getCurrentConnector():HttpConnector{
            return (this.currentConnector);
        }

    }
}//package com.settrade.streaming5.connection.helper.feed 
﻿package com.settrade.streaming5.connection.helper {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.*;

    public class ConnectionHelper implements IMessageSender, IMessageReceiver {

        protected var _receiver:IMessageReceiver;

        public function ConnectionHelper(receiver:IMessageReceiver=null){
            super();
            this._receiver = receiver;
        }
        public function notifyReceiveMessage(message:Message):void{
            if (this.receiver != null){
                this.receiver.receiveMessage(message);
            };
        }
        public function sendMessage(message:Message):void{
        }
        public function receiveMessage(message:Message):void{
            this.notifyReceiveMessage(message);
        }
        public function get receiver():IMessageReceiver{
            return (this._receiver);
        }
        public function set receiver(value:IMessageReceiver):void{
            this._receiver = value;
        }

    }
}//package com.settrade.streaming5.connection.helper 
﻿package com.settrade.streaming5.connection.connector {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import flash.events.*;
    import com.settrade.streaming5.manager.*;
    import flash.utils.*;
    import com.settrade.streaming5.connection.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.connection.common.*;
    import com.settrade.streaming5.message.raw.request.*;
    import com.settrade.streaming5.message.raw.response.*;
    import flash.net.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.message.control.*;
    import com.settrade.streaming5.message.raw.feed.*;

    public class HttpConnector extends Connector {

        public static const SOURCE:Source = Source.HTTP_RESPONSE;

        private static var logger:Logger = new Logger(prototype.constructor);

        protected var _system:System;
        protected var _host:String;
        protected var statManager:UrlLoaderStatManager;

        public function HttpConnector(host:String, system:System=null, receiver:IMessageReceiver=null){
            super(receiver);
            this.statManager = UrlLoaderStatManager.getInstance();
            if (system == null){
                this._system = System.NO_SYSTEM;
            } else {
                this._system = system;
            };
            this._host = host;
        }
        private function receiveDataHandler(e:Event):void{
            var e:* = e;
            var loader:* = StreamingURLLoader(e.target);
            try {
                this.statManager.addOrUpdateStatByLoader(loader);
            } catch(e:Error) {
                logger.error(e.name);
            };
            this.readResponse(loader);
            this.destroyUrlLoader(loader);
        }
        private function readResponse(loader:StreamingURLLoader){
            var byteArray:StreamingByteArray;
            var _local6:String;
            var _local7:Object;
            var message:Message;
            var path:UrlPath = loader.path;
            var targetSide:MessageSide = path.targetSide;
            switch (targetSide){
                case MessageSide.FEED:
                    switch (path.dataFormat){
                        case URLLoaderDataFormat.TEXT:
                        case StreamingURLLoaderFormat.TEXT_TIS_620:
                            byteArray = new StreamingByteArray();
                            byteArray.writeBytes(loader.data);
                            byteArray.position = 0;
                            _local6 = byteArray.readMultiByte(byteArray.length, "TIS-620");
                            message = new StringFeedMessage(this.system, SOURCE, path.messageFormat, _local6);
                            break;
                        case StreamingURLLoaderFormat.TEXT_UTF_8:
                            byteArray = new StreamingByteArray();
                            byteArray.writeBytes(loader.data);
                            byteArray.position = 0;
                            _local6 = byteArray.readMultiByte(byteArray.length, "UTF-8");
                            message = new StringFeedMessage(this.system, SOURCE, path.messageFormat, _local6);
                            break;
                        case URLLoaderDataFormat.BINARY:
                            if (path.isSeperateBinary){
                                message = this.separateBinaryFeedMessage(loader);
                            } else {
                                byteArray = new StreamingByteArray();
                                byteArray.writeBytes(loader.data);
                                byteArray.position = 0;
                                message = new BinaryFeedMessage(this.system, SOURCE, path.messageFormat, byteArray);
                            };
                            break;
                        default:
                            logger.error(("Invalid Loader DataFormat: " + loader.dataFormat));
                    };
                    break;
                case MessageSide.RESPONSE:
                    switch (path.dataFormat){
                        case URLLoaderDataFormat.TEXT:
                        case StreamingURLLoaderFormat.TEXT_TIS_620:
                            byteArray = new StreamingByteArray();
                            byteArray.writeBytes(loader.data);
                            byteArray.position = 0;
                            _local6 = byteArray.readMultiByte(byteArray.length, "TIS-620");
                            message = new StringResponseMessage(this.system, loader.requestMessage, SOURCE, path.messageFormat, _local6);
                            break;
                        case StreamingURLLoaderFormat.TEXT_UTF_8:
                            byteArray = new StreamingByteArray();
                            byteArray.writeBytes(loader.data);
                            byteArray.position = 0;
                            _local6 = byteArray.readMultiByte(byteArray.length, "UTF-8");
                            message = new StringResponseMessage(this.system, loader.requestMessage, SOURCE, path.messageFormat, _local6);
                            break;
                        case URLLoaderDataFormat.BINARY:
                            if (path.isSeperateBinary){
                                message = this.separateBinaryResponseMessage(loader);
                            } else {
                                byteArray = new StreamingByteArray();
                                byteArray.writeBytes(loader.data);
                                byteArray.position = 0;
                                message = new BinaryResponseMessage(this.system, loader.requestMessage, SOURCE, path.messageFormat, byteArray);
                            };
                            break;
                        case StreamingURLLoaderFormat.JSON_STRING:
                            byteArray = new StreamingByteArray();
                            byteArray.writeBytes(loader.data);
                            byteArray.position = 0;
                            _local6 = byteArray.readMultiByte(byteArray.length, "UTF-8");
                            _local7 = JSON.parse(_local6);
                            message = new ObjectResponseMessage(this.system, loader.requestMessage, SOURCE, path.messageFormat, _local7);
                            break;
                        case StreamingURLLoaderFormat.JSON_STRING_TIS_620:
                            byteArray = new StreamingByteArray();
                            byteArray.writeBytes(loader.data);
                            byteArray.position = 0;
                            _local6 = byteArray.readMultiByte(byteArray.length, "TIS-620");
                            _local7 = JSON.parse(_local6);
                            message = new ObjectResponseMessage(this.system, loader.requestMessage, SOURCE, path.messageFormat, _local7);
                            break;
                        default:
                            logger.error(("Invalid Loader DataFormat: " + loader.dataFormat));
                    };
                    break;
                default:
                    logger.error(("Invalid Message Side:" + targetSide.toString()));
            };
            if (message != null){
                this.notifyReceiveMessage(message);
            };
        }
        private function separateBinaryFeedMessage(urlLoader:StreamingURLLoader):Message{
            var data:StreamingByteArray;
            var length:int;
            var message:BinaryFeedMessage;
            var byteArray:ByteArray = urlLoader.data;
            var multipleMessage:MultipleRawFeedMessage = new MultipleRawFeedMessage(this.system, SOURCE, urlLoader.path.messageFormat);
            while (byteArray.bytesAvailable > 0) {
                data = new StreamingByteArray();
                length = byteArray.readShort();
                if ((((length < 0)) || ((length > byteArray.bytesAvailable)))){
                    logger.error(((("Invalid Length: " + length) + " ,Byte Available: ") + byteArray.bytesAvailable));
                    break;
                };
                byteArray.readBytes(data, 0, length);
                message = new BinaryFeedMessage(this.system, SOURCE, urlLoader.path.messageFormat, data);
                multipleMessage.add(message);
            };
            return (multipleMessage);
        }
        private function separateBinaryResponseMessage(urlLoader:StreamingURLLoader):Message{
            var data:StreamingByteArray;
            var length:int;
            var message:BinaryResponseMessage;
            var byteArray:ByteArray = urlLoader.data;
            var multipleMessage:MultipleRawResponseMessage = new MultipleRawResponseMessage(this.system, urlLoader.requestMessage, SOURCE, urlLoader.path.messageFormat);
            while (byteArray.bytesAvailable > 0) {
                data = new StreamingByteArray();
                length = byteArray.readShort();
                if ((((length < 0)) || ((length > byteArray.bytesAvailable)))){
                    logger.error(((("Invalid Length: " + length) + " ,Byte Available: ") + byteArray.bytesAvailable));
                    break;
                };
                byteArray.readBytes(data, 0, length);
                message = new BinaryResponseMessage(this.system, urlLoader.requestMessage, SOURCE, urlLoader.path.messageFormat, data);
                multipleMessage.add(message);
            };
            return (multipleMessage);
        }
        private function httpResponseHandler(e:HTTPStatusEvent):void{
            var loader:StreamingURLLoader = StreamingURLLoader(e.target);
            loader.httpStatus = e.status;
            if ((((e.status >= 400)) && ((e.status <= 500)))){
                logger.error(("Http Failed Response: " + e.status));
            };
        }
        private function securityErrorHandler(e:SecurityErrorEvent):void{
            var loader:StreamingURLLoader = StreamingURLLoader(e.target);
            logger.fatal(("HTTP Security Error: " + e.text));
            notifyReceiveMessage(new HttpFailedResponseMessage(loader.httpStatus, loader.requestMessage));
            this.destroyUrlLoader(loader);
        }
        private function ioErrorHandler(e:IOErrorEvent):void{
            var loader:StreamingURLLoader = StreamingURLLoader(e.target);
            logger.error(("HTTP IO Error: " + e.text));
            notifyReceiveMessage(new HttpFailedResponseMessage(loader.httpStatus, loader.requestMessage));
            this.destroyUrlLoader(loader);
        }
        override public function sendMessage(message:Message):void{
            if ((!(message) is URLRequestMessage)){
                throw (new InvalidMessageTypeError(message));
            };
            var urlRequestMessage:URLRequestMessage = URLRequestMessage(message);
            var url:* = (this.host + urlRequestMessage.path.path);
            logger.info(("Send message to url : " + url));
            var urlRequest:URLRequest = new URLRequest(url);
            urlRequest.data = urlRequestMessage.data;
            urlRequest.method = "POST";
            var urlLoader:URLLoader = this.createUrlLoader(urlRequestMessage.path, urlRequestMessage.originalMessage);
            urlLoader.dataFormat = URLLoaderDataFormat.BINARY;
            urlLoader.load(urlRequest);
        }
        protected function createUrlLoader(path:UrlPath, requestMessage:RequestMessage):StreamingURLLoader{
            var streamingUrlLoader:StreamingURLLoader = new StreamingURLLoader();
            streamingUrlLoader.requestMessage = requestMessage;
            streamingUrlLoader.path = path;
            streamingUrlLoader.addEventListener(Event.COMPLETE, this.receiveDataHandler, false, 0, true);
            streamingUrlLoader.addEventListener(HTTPStatusEvent.HTTP_STATUS, this.httpResponseHandler, false, 0, true);
            streamingUrlLoader.addEventListener(IOErrorEvent.IO_ERROR, this.ioErrorHandler, false, 0, true);
            streamingUrlLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.securityErrorHandler, false, 0, true);
            return (streamingUrlLoader);
        }
        protected function destroyUrlLoader(loader:StreamingURLLoader):void{
            loader.removeEventListener(Event.COMPLETE, this.receiveDataHandler);
            loader.removeEventListener(HTTPStatusEvent.HTTP_STATUS, this.httpResponseHandler);
            loader.removeEventListener(IOErrorEvent.IO_ERROR, this.ioErrorHandler);
            loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this.securityErrorHandler);
        }
        public function get host():String{
            return (this._host);
        }
        public function set host(value:String):void{
            this._host = value;
        }
        public function get system():System{
            return (this._system);
        }

    }
}//package com.settrade.streaming5.connection.connector 
﻿package com.settrade.streaming5.connection.connector {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import flash.events.*;
    import flash.utils.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.connection.*;
    import com.settrade.streaming5.connection.common.*;
    import com.settrade.streaming5.message.raw.request.*;
    import flash.net.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;
    import com.settrade.streaming5.message.control.*;
    import com.settrade.streaming5.message.raw.feed.*;

    public class SocketConnector extends Connector {

        public static const SYSTEM:System = System.REALTIME;
        public static const SOURCE:Source = Source.SOCKET;

        private static var logger:Logger = new Logger(prototype.constructor);

        protected const timeout:Number = 10000;

        protected var host:String;
        protected var port:int;
        protected var socket:Socket;
        protected var timeoutTimer:Timer;

        public function SocketConnector(host:String=null, port:int=0, receiver:IMessageReceiver=null){
            super(receiver);
            this.host = host;
            this.port = port;
            this.initSocket();
            this.initTimer();
        }
        private function initSocket():void{
            this.socket = new Socket();
            this.socket.addEventListener(Event.CONNECT, this.connectHandler);
            this.socket.addEventListener(Event.CLOSE, this.closeHandler);
            this.socket.addEventListener(IOErrorEvent.IO_ERROR, this.ioErrorHandler);
            this.socket.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.securityErrorHandler);
            this.socket.addEventListener(ProgressEvent.SOCKET_DATA, this.receiveDataHandler);
        }
        private function initTimer():void{
            this.timeoutTimer = new Timer(this.timeout, 1);
            this.timeoutTimer.addEventListener(TimerEvent.TIMER_COMPLETE, this.timeoutHandler);
        }
        private function receiveDataHandler(e:ProgressEvent):void{
            this.readResponse();
        }
        protected function readResponse():void{
            var rawMessage:*;
            var data:StreamingByteArray;
            var length:int;
            var message:BinaryFeedMessage;
            var messageList:Vector.<BinaryFeedMessage> = new Vector.<BinaryFeedMessage>();
            while (this.socket.bytesAvailable > 0) {
                data = new StreamingByteArray();
                length = this.socket.readShort();
                if ((((length < 0)) || ((length > this.socket.bytesAvailable)))){
                    logger.error(((("Invalid Length: " + length) + " ,Byte Available: ") + this.socket.bytesAvailable));
                    this.onFailedReadSocket();
                } else {
                    this.socket.readBytes(data, 0, length);
                    message = new BinaryFeedMessage(SYSTEM, SOURCE, MessageFormat.DISPATCHER_BINARY, data);
                    messageList.push(message);
                };
            };
            for each (rawMessage in messageList) {
                notifyReceiveMessage(rawMessage);
            };
        }
        protected function onFailedReadSocket():void{
            this.clearReceiveSocket();
        }
        protected function clearReceiveSocket():void{
            this.socket.readBytes(new ByteArray());
        }
        override public function sendMessage(message:Message):void{
            if ((!(message) is BinaryRequestMessage)){
                throw (new InvalidMessageTypeError(message));
            };
            var binaryRequestMessage:BinaryRequestMessage = BinaryRequestMessage(message);
            var byteArray:ByteArray = binaryRequestMessage.data;
            this.socket.writeBytes(byteArray);
            this.socket.writeByte(10);
            this.socket.flush();
        }
        public function connect():void{
            logger.info(((("Connect Socket: " + this.host) + ":") + this.port));
            this.socket.connect(this.host, this.port);
            this.timeoutTimer.start();
        }
        public function disconnect():void{
            this.socket.close();
        }
        private function connectHandler(e:Event):void{
            logger.info(((("Connect Socket Completed: " + this.host) + ":") + this.port));
            this.timeoutTimer.stop();
            notifyReceiveMessage(new SocketStatusMessage(this.host, this.port, SocketStatus.CONNECTED));
        }
        private function closeHandler(e:Event):void{
            this.readResponse();
            logger.info(((("Close Socket Completed: " + this.host) + ":") + this.port));
            this.timeoutTimer.stop();
            notifyReceiveMessage(new SocketStatusMessage(this.host, this.port, SocketStatus.DISCONNECTED));
        }
        private function securityErrorHandler(e:SecurityErrorEvent):void{
            logger.fatal(("Socket Security Error: " + e.text));
            this.timeoutTimer.stop();
            notifyReceiveMessage(new SocketStatusMessage(this.host, this.port, SocketStatus.ERROR));
        }
        private function ioErrorHandler(e:IOErrorEvent):void{
            logger.error(("Socket IO Error: " + e.text));
            this.timeoutTimer.stop();
            notifyReceiveMessage(new SocketStatusMessage(this.host, this.port, SocketStatus.ERROR));
        }
        private function timeoutHandler(e:Event):void{
            logger.error("Connection Timeout");
            this.socket.close();
            notifyReceiveMessage(new SocketStatusMessage(this.host, this.port, SocketStatus.TIMEOUT));
        }
        public function get connected():Boolean{
            return (this.socket.connected);
        }

    }
}//package com.settrade.streaming5.connection.connector 
﻿package com.settrade.streaming5.connection.connector {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.connection.*;

    public class Connector implements IMessageSender {

        protected var _receiver:IMessageReceiver;

        public function Connector(receiver:IMessageReceiver=null){
            super();
            this.receiver = receiver;
        }
        public function sendMessage(message:Message):void{
        }
        public function notifyReceiveMessage(message:Message):void{
            if (this.receiver != null){
                this.receiver.receiveMessage(message);
            };
        }
        public function get receiver():IMessageReceiver{
            return (this._receiver);
        }
        public function set receiver(value:IMessageReceiver):void{
            this._receiver = value;
        }

    }
}//package com.settrade.streaming5.connection.connector 
﻿package com.settrade.streaming5.connection.common {
    import com.settrade.streaming5.enumuration.*;

    public dynamic class StreamingFeedURLVariable extends StreamingURLVariables {

        public function StreamingFeedURLVariable(source:String=null){
            super(source);
        }
        override public function toString():String{
            var id:String;
            var value:*;
            var list:Array;
            var listStr:String;
            var delimeter:String;
            var obj:*;
            var str:String = "";
            for (id in this) {
                value = this[id];
                list = (value as Array);
                listStr = "";
                delimeter = Delimiter.LEVEL3;
                if (id == "service"){
                    delimeter = Delimiter.COMMA;
                };
                for each (obj in list) {
                    listStr = (listStr + (obj + delimeter));
                };
                listStr = listStr.slice(0, -(delimeter.length));
                str = (str + escape(id));
                str = (str + "=");
                str = (str + escape(listStr));
                str = (str + "&");
            };
            str = str.slice(0, -1);
            return (str);
        }

    }
}//package com.settrade.streaming5.connection.common 
﻿package com.settrade.streaming5.connection.common {
    import com.settrade.streaming5.enumuration.*;

    public dynamic class StreamingCancelOrderDerivativesURLVariable extends StreamingURLVariables {

        private static const NON_DUPLICATE_LIST:Array = ["NewMode", "Service"];

        public function StreamingCancelOrderDerivativesURLVariable(source:String=null){
            super(source);
        }
        override public function toString():String{
            var id:String;
            var value:*;
            var list:Array;
            var listStr:String;
            var delimeter:String;
            var obj:*;
            var str:String = "";
            for (id in this) {
                value = this[id];
                list = (value as Array);
                listStr = "";
                delimeter = Delimiter.COMMA;
                if (NON_DUPLICATE_LIST.indexOf(id) == -1){
                    for each (obj in list) {
                        listStr = (listStr + (obj + delimeter));
                    };
                    listStr = listStr.slice(0, -(delimeter.length));
                } else {
                    listStr = list[0];
                };
                str = (str + escape(id));
                str = (str + "=");
                str = (str + escape(listStr));
                str = (str + "&");
            };
            str = str.slice(0, -1);
            return (str);
        }

    }
}//package com.settrade.streaming5.connection.common 
﻿package com.settrade.streaming5.connection.common {
    import flash.net.*;

    public dynamic class StreamingURLVariables extends URLVariables {

        protected var _keyList:Array;

        public function StreamingURLVariables(source:String=null){
            super(source);
            this._keyList = new Array();
        }
        public function add(key:String, value):void{
            var array:Array;
            var valueList:Array = (this[key] as Array);
            if (valueList == null){
                this._keyList.push(key);
                array = new Array();
                array.push(value);
                this[key] = array;
            } else {
                valueList.push(value);
            };
        }
        public function replace(key:String, value):void{
            var valueList:Array = (this[key] as Array);
            if (valueList == null){
                this._keyList.push(key);
            };
            var array:Array = new Array();
            array.push(value);
            this[key] = array;
        }
        public function remove(key:String):void{
            var valueList:Array = (this[key] as Array);
            if (valueList != null){
                this._keyList.splice(this._keyList.indexOf(key), 1);
                delete this[key];
            };
        }
        public function addNonDuplicate(key:String, value):void{
            if (!this.hasValueByKey(key, value)){
                this.add(key, value);
            };
        }
        public function hasValueByKey(key:String, value):Boolean{
            var ivalue:String;
            var valueList:Array = (this[key] as Array);
            if (valueList == null){
                return (false);
            };
            for each (ivalue in valueList) {
                if (ivalue == value){
                    return (true);
                };
            };
            return (false);
        }
        public function addAll(key:String, list:Array):void{
            var value:Object;
            for each (value in list) {
                this.add(key, value.toString());
            };
        }
        public function addAllNonDuplicate(key:String, list:Array):void{
            var value:Object;
            for each (value in list) {
                this.addNonDuplicate(key, value.toString());
            };
        }
        public function hasKey(key:String):Boolean{
            return ((this[key] == null));
        }
        public function merge(variable:StreamingURLVariables){
            var srcKeyList:Array;
            var key:String;
            if (this != variable){
                srcKeyList = variable.keyList;
                for each (key in srcKeyList) {
                    this.addAll(key, variable.getValue(key));
                };
            };
        }
        public function mergeNonDuplicate(variable:StreamingURLVariables){
            var srcKeyList:Array;
            var key:String;
            if (this != variable){
                srcKeyList = variable.keyList;
                for each (key in srcKeyList) {
                    this.addAllNonDuplicate(key, variable.getValue(key));
                };
            };
        }
        public function get keyList():Array{
            return (this._keyList);
        }
        public function getValue(key:String):Array{
            return (this[key]);
        }

    }
}//package com.settrade.streaming5.connection.common 
﻿package com.settrade.streaming5.connection.common {
    import com.settrade.log.logger.*;

    public dynamic class StreamingJSONURLVariables extends StreamingURLVariables {

        private static var logger:Logger = new Logger(prototype.constructor);

        const REQUEST_KEY:String = "setting";

        public function StreamingJSONURLVariables(source:String=null){
            super(source);
        }
        public function addJSONObject(obj:Object):void{
            super.add(this.REQUEST_KEY, obj);
        }
        override public function toString():String{
            var key:String;
            var jsonList:Array;
            var value:*;
            var resultString:String = "";
            for each (key in this.keyList) {
                if (key != this.REQUEST_KEY){
                    for each (value in this[key]) {
                        resultString = (resultString + (((key + "=") + encodeURIComponent(value.toString())) + "&"));
                    };
                };
            };
            jsonList = getValue(this.REQUEST_KEY);
            return ((((resultString + this.REQUEST_KEY) + "=") + encodeURIComponent(JSON.stringify(jsonList))));
        }

    }
}//package com.settrade.streaming5.connection.common 
﻿package com.settrade.streaming5.connection.common {
    import com.settrade.streaming5.enumuration.*;

    public dynamic class StreamingOrderURLVariable extends StreamingURLVariables {

        private static const NON_DUPLICATE_LIST:Array = ["accountNo", "NewMode", "Service"];

        public function StreamingOrderURLVariable(source:String=null){
            super(source);
        }
        override public function toString():String{
            var id:String;
            var value:*;
            var list:Array;
            var listStr:String;
            var delimeter:String;
            var obj:*;
            var str:String = "";
            for (id in this) {
                value = this[id];
                list = (value as Array);
                listStr = "";
                delimeter = Delimiter.COMMA;
                if (NON_DUPLICATE_LIST.indexOf(id) == -1){
                    for each (obj in list) {
                        listStr = (listStr + (obj + delimeter));
                    };
                    listStr = listStr.slice(0, -(delimeter.length));
                } else {
                    listStr = list[0];
                };
                str = (str + escape(id));
                str = (str + "=");
                str = (str + escape(listStr));
                str = (str + "&");
            };
            str = str.slice(0, -1);
            return (str);
        }

    }
}//package com.settrade.streaming5.connection.common 
﻿package com.settrade.streaming5.connection.common {
    import flash.utils.*;

    public class StreamingByteArray extends ByteArray {

        const SHORT_MIN_VALUE:int = -32768;
        const BYTE_MIN_VALUE:int = -128;

        protected var _isLongOrInt:Boolean;
        protected var _isIntOrShort:Boolean;
        protected var _isShortOrByte:Boolean;
        protected var _isIntOrShortVolume:Boolean;

        public function StreamingByteArray(){
            super();
        }
        public static function createFromByteArray(byteArray:ByteArray):StreamingByteArray{
            var streamingByteArray:StreamingByteArray = new (StreamingByteArray)();
            streamingByteArray.writeBytes(byteArray);
            streamingByteArray.position = 0;
            return (streamingByteArray);
        }

        public function readConfigByte():void{
            var configArray:Array = this.readBooleanArray();
            this._isIntOrShortVolume = configArray[3];
            this._isLongOrInt = configArray[2];
            this._isIntOrShort = configArray[1];
            this._isShortOrByte = configArray[0];
        }
        public function readIntOrShortVolume():int{
            if (this._isIntOrShortVolume){
                return (readInt());
            };
            return (this.readShort());
        }
        public function readLongOrInt():Number{
            if (this._isLongOrInt){
                return (this.readLong());
            };
            return (this.readIntAsNumber());
        }
        public function readIntOrShort():int{
            if (this._isIntOrShort){
                return (readInt());
            };
            return (this.readShort());
        }
        public function readShortOrByte():int{
            if (this._isShortOrByte){
                return (this.readShort());
            };
            return (this.readByte());
        }
        public function readIntAsNumber():Number{
            var value:int = super.readInt();
            if (value == int.MIN_VALUE){
                return (NaN);
            };
            return ((value as Number));
        }
        override public function readByte():int{
            var value:int = super.readByte();
            if (value == this.BYTE_MIN_VALUE){
                return (int.MIN_VALUE);
            };
            return (value);
        }
        override public function readShort():int{
            var value:int = super.readShort();
            if (value == this.SHORT_MIN_VALUE){
                return (int.MIN_VALUE);
            };
            return (value);
        }
        public function readLong():Number{
            var byteint:Number = (uint.MAX_VALUE + 1);
            var val1:int = super.readInt();
            var val2:uint = super.readUnsignedInt();
            var val3:Number = (val1 * byteint);
            var val4:Number = val2;
            var val:Number = (val3 + val4);
            if ((((val1 == int.MIN_VALUE)) && ((val2 == uint.MIN_VALUE)))){
                return (NaN);
            };
            return (val);
        }
        public function readNumberWithDigit(digit:int):Number{
            var integer:int = this.readIntOrShort();
            if (integer == int.MIN_VALUE){
                return (NaN);
            };
            return ((Number(integer) / Math.pow(10, digit)));
        }
        public function readNumberFixedLongOrIntWithDigit(digit:int):Number{
            var number:Number = this.readLongOrInt();
            if (isNaN(number)){
                return (NaN);
            };
            return ((number / Math.pow(10, digit)));
        }
        public function readNumberFixedShortWithDigit(digit:int):Number{
            var integer:int = this.readShort();
            if (integer == int.MIN_VALUE){
                return (NaN);
            };
            return ((Number(integer) / Math.pow(10, digit)));
        }
        public function readNumberFixedIntWithDigit(digit:int):Number{
            var integer:int = readInt();
            if (integer == int.MIN_VALUE){
                return (NaN);
            };
            return ((Number(integer) / Math.pow(10, digit)));
        }
        public function readStringWithLength():String{
            var length:int = this.readShortOrByte();
            if (length <= 0){
                return ("");
            };
            var str:String = super.readMultiByte(length, "TIS-620");
            return (str);
        }
        public function readBooleanArray():Array{
            var byteValue:uint = super.readUnsignedByte();
            var bitArray:Array = new Array(8);
            var i:int;
            while (i < 8) {
                bitArray[i] = Boolean((byteValue & 1));
                byteValue = (byteValue >>> 1);
                i++;
            };
            return (bitArray);
        }
        public function readVaryBitArray(inputArray:Array):Array{
            var length:int;
            var result:int;
            var outputArray:Array = new Array((inputArray.length + 1));
            var byteValue:uint = super.readUnsignedByte();
            var i:int;
            while (i < inputArray.length) {
                length = inputArray[i];
                result = (byteValue & this.convertBitLengthToInt(length));
                outputArray[i] = result;
                byteValue = (byteValue >>> length);
                i++;
            };
            outputArray[inputArray.length] = int(byteValue);
            return (outputArray);
        }
        public function toIntegerString():String{
            var byte:int;
            var curPos:* = this.position;
            this.position = 0;
            var data:String = "";
            while (bytesAvailable > 0) {
                byte = readUnsignedByte();
                data = (data + (byte.toString(10) + ","));
            };
            this.position = curPos;
            return (data);
        }
        public function get IntegerString():String{
            return (this.toIntegerString());
        }
        public function get HexString():String{
            var byte:int;
            var str:String;
            var curPos:* = this.position;
            this.position = 0;
            var data:String = "";
            while (bytesAvailable > 0) {
                byte = readUnsignedByte();
                str = byte.toString(16);
                data = (data + (((str.length > 1)) ? str : ("0" + str)));
            };
            this.position = curPos;
            return (data);
        }
        private function convertBitLengthToInt(length:int):int{
            var result:int;
            var i:int;
            while (i < length) {
                result = (result << 1);
                result = (result | 1);
                i++;
            };
            return (result);
        }

    }
}//package com.settrade.streaming5.connection.common 
﻿package com.settrade.streaming5.connection.common {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.request.*;
    import flash.net.*;

    public class StreamingURLLoader extends URLLoader {

        protected var _httpStatus:int;
        protected var _path:UrlPath;
        protected var _requestTime:Date;
        protected var _requestMessage:RequestMessage;

        public function StreamingURLLoader(requestMessage:RequestMessage=null, path:UrlPath=null){
            super();
            this._path = path;
            this._requestMessage = requestMessage;
            this._httpStatus = -1;
            this._requestTime = new Date();
        }
        override public function load(request:URLRequest):void{
            super.load(request);
        }
        public function get requestMessage():RequestMessage{
            return (this._requestMessage);
        }
        public function set requestMessage(value:RequestMessage):void{
            this._requestMessage = value;
        }
        public function get path():UrlPath{
            return (this._path);
        }
        public function set path(value:UrlPath):void{
            this._path = value;
        }
        public function get httpStatus():int{
            return (this._httpStatus);
        }
        public function set httpStatus(value:int):void{
            this._httpStatus = value;
        }
        public function get requestTime():Date{
            return (this._requestTime);
        }

    }
}//package com.settrade.streaming5.connection.common 
﻿package com.settrade.streaming5.connection {
    import com.settrade.log.logger.*;

    public class ConnectionFactory {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:ConnectionFactory;

        protected var _connectionManager:IMessageSender;

        public function ConnectionFactory(){
            super();
            if (instance != null){
                logger.warn("Object should be singleton");
            };
            logger.info("Initial Complete");
        }
        public static function getInstance():ConnectionFactory{
            if (instance == null){
                instance = new (ConnectionFactory)();
            };
            return (instance);
        }

        public function get connectionManager():IMessageSender{
            return (this._connectionManager);
        }
        public function set connectionManager(value:IMessageSender):void{
            this._connectionManager = value;
        }

    }
}//package com.settrade.streaming5.connection 
﻿package com.settrade.streaming5.connection.serializer {
    import com.settrade.streaming5.message.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.raw.request.*;
    import com.settrade.log.logger.*;

    public class BinarySerializer implements ISerializer {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:BinarySerializer = new (BinarySerializer)();
;

        public function BinarySerializer(){
            super();
        }
        public static function getInstance():BinarySerializer{
            if (instance == null){
                instance = new (BinarySerializer)();
            };
            return (instance);
        }

        public function serialize(message:RequestMessage):Vector.<RawRequestMessage>{
            var currentMessage:Message;
            var currentMessageList:Vector.<Message>;
            var messageInList:Message;
            var serializable:IBinarySerializable;
            var rawMessage:BinaryRequestMessage;
            var rawMessageList:Vector.<RawRequestMessage> = new Vector.<RawRequestMessage>();
            var messageList:Vector.<Message> = new Vector.<Message>();
            messageList.push(message);
            while (messageList.length > 0) {
                currentMessage = messageList.pop();
                if ((currentMessage is IMultipleMessage)){
                    currentMessageList = IMultipleMessage(currentMessage).messageList;
                    for each (messageInList in currentMessageList) {
                        messageList.push(messageInList);
                    };
                } else {
                    if ((((currentMessage is IBinarySerializable)) && ((currentMessage is RequestMessage)))){
                        serializable = IBinarySerializable(currentMessage);
                        rawMessage = new BinaryRequestMessage(currentMessage.system, serializable.toBytes(), message);
                        rawMessageList.push(rawMessage);
                    } else {
                        logger.error(("Cannot Serialze Message:" + currentMessage.type));
                    };
                };
            };
            return (rawMessageList);
        }

    }
}//package com.settrade.streaming5.connection.serializer 
﻿package com.settrade.streaming5.connection.serializer {
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.raw.request.*;

    public interface ISerializer {

        function serialize(_arg1:RequestMessage):Vector.<RawRequestMessage>;

    }
}//package com.settrade.streaming5.connection.serializer 
﻿package com.settrade.streaming5.connection.serializer {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.manager.*;
    import flash.utils.*;
    import com.settrade.streaming5.common.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.connection.common.*;
    import com.settrade.streaming5.message.raw.request.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.utils.crypto.*;

    public class UrlSerializer implements ISerializer {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:UrlSerializer = new (UrlSerializer)();
;

        protected var pathMap:Dictionary;

        public function UrlSerializer(){
            super();
            this.initpathMap();
        }
        public static function getInstance():UrlSerializer{
            if (instance == null){
                instance = new (UrlSerializer)();
            };
            return (instance);
        }

        private function initpathMap():void{
            this.pathMap = new Dictionary();
            this.pathMap[MessageType.STUB_REQUEST] = UrlPath.STUB;
            this.pathMap[MessageType.NEW_STUB_REQUEST] = UrlPath.STUB;
            this.pathMap[MessageType.GENERATE_KEY_REQUEST] = UrlPath.GENERATE_KEY;
            this.pathMap[MessageType.USER_CHECK_REQUEST] = UrlPath.USER_CHECK;
            this.pathMap[MessageType.MARKET_SUMMARY_REQUEST] = UrlPath.DATA_PROVIDER_BINARY;
            this.pathMap[MessageType.MARKET_TICKER_REQUEST] = UrlPath.DATA_PROVIDER_BINARY;
            this.pathMap[MessageType.INSTRUMENT_TICKER_REQUEST] = UrlPath.DATA_PROVIDER_BINARY;
            this.pathMap[MessageType.INSTRUMENT_TICKER_ODDLOT_REQUEST] = UrlPath.DATA_PROVIDER_BINARY;
            this.pathMap[MessageType.INFO_REQUEST] = UrlPath.DATA_PROVIDER_BINARY;
            this.pathMap[MessageType.INFO_STATISTIC_REQUEST] = UrlPath.DATA_PROVIDER_BINARY;
            this.pathMap[MessageType.INFO_STATISTIC_CHART_REQUEST] = UrlPath.DATA_PROVIDER_BINARY;
            this.pathMap[MessageType.INFO_ODDLOT_REQUEST] = UrlPath.DATA_PROVIDER_BINARY;
            this.pathMap[MessageType.SNAPSHOT_REQUEST] = UrlPath.DATA_PROVIDER_BINARY;
            this.pathMap[MessageType.ANNOUNCEMENT_REQUEST] = UrlPath.DATA_PROVIDER_BINARY;
            this.pathMap[MessageType.VOLUME_BY_PRICE_REQUEST] = UrlPath.DATA_PROVIDER_BINARY_RESPONSE;
            this.pathMap[MessageType.VOLUME_BY_PRICE_DETAIL_REQUEST] = UrlPath.DATA_PROVIDER_BINARY_RESPONSE;
            this.pathMap[MessageType.INTRADAY_CHART_REQUEST] = UrlPath.DATA_PROVIDER_BINARY_RESPONSE;
            this.pathMap[MessageType.HISTORICAL_CHART_REQUEST] = UrlPath.DATA_PROVIDER_BINARY_RESPONSE;
            this.pathMap[MessageType.HISTORICAL_BY_DATE_REQUEST] = UrlPath.DATA_PROVIDER_BINARY_RESPONSE;
            this.pathMap[MessageType.ORDER_STATUS_PUSH_REQUEST] = UrlPath.REGISTER_ORDER_PUSH;
            this.pathMap[MessageType.INSTRUMENT_LIST_REQUEST] = UrlPath.DATA_PROVIDER;
            this.pathMap[MessageType.NEWS_REQUEST] = UrlPath.NEWS;
            this.pathMap[MessageType.OPTIONS_STRIKE_PRICE_LIST_REQUEST] = UrlPath.DATA_PROVIDER_BINARY_RESPONSE;
            this.pathMap[MessageType.SET_CALENDAR_REQUEST] = UrlPath.DATA_PROVIDER_BINARY_RESPONSE;
            this.pathMap[MessageType.OPTIONS_GREEK_VALUE_REQUEST] = UrlPath.DATA_PROVIDER_BINARY_RESPONSE;
            this.pathMap[MessageType.OPTIONS_GREEK_DEFAULT_VALUE_REQUEST] = UrlPath.DATA_PROVIDER_BINARY_RESPONSE;
            this.pathMap[MessageType.SYMBOL_SELECTOR_OPTIONS_REQUEST] = UrlPath.DATA_PROVIDER_JSON;
            this.pathMap[MessageType.SYMBOL_SELECTOR_TREE_REQUEST] = UrlPath.DATA_PROVIDER_JSON;
            this.pathMap[MessageType.PIN_CHECK_REQUEST] = UrlPath.DATA_PROVIDER_JSON;
            this.pathMap[MessageType.OPTIONS_EXPIRE_DATE_REQUEST] = UrlPath.DATA_PROVIDER_JSON;
            this.pathMap[MessageType.PLACE_ORDER_EQUITY_REQUEST] = UrlPath.ORDER_SEND_EQUITY;
            this.pathMap[MessageType.PLACE_ORDER_EQUITY_CONFIRM_REQUEST] = UrlPath.ORDER_SEND_EQUITY;
            this.pathMap[MessageType.CANCEL_ORDER_EQUITY_REQUEST] = UrlPath.ORDER_SEND_EQUITY;
            this.pathMap[MessageType.ORDER_STATUS_EQUITY_REQUEST] = UrlPath.ORDER_DATA_EQUITY;
            this.pathMap[MessageType.PORTFOLIO_EQUITY_REQUEST] = UrlPath.ORDER_DATA_EQUITY;
            this.pathMap[MessageType.ACCOUNT_INFO_EQUITY_REQUEST] = UrlPath.ORDER_DATA_EQUITY;
            this.pathMap[MessageType.DEAL_SUMMARY_EQUITY_REQUEST] = UrlPath.ORDER_DATA_EQUITY;
            this.pathMap[MessageType.ORDER_STATUS_BY_NUMBER_EQUITY_REQUEST] = UrlPath.ORDER_DATA_EQUITY;
            this.pathMap[MessageType.PLACE_ORDER_DERIVATIVES_REQUEST] = UrlPath.ORDER_SEND_DERIVATIVES;
            this.pathMap[MessageType.PLACE_ORDER_DERIVATIVES_CONFIRM_REQUEST] = UrlPath.ORDER_SEND_DERIVATIVES;
            this.pathMap[MessageType.ORDER_STATUS_DERIVATIVES_REQUEST] = UrlPath.ORDER_DATA_DERIVATIVES;
            this.pathMap[MessageType.ORDER_STATUS_ALL_DERIVATIVES_REQUEST] = UrlPath.ORDER_DATA_DERIVATIVES;
            this.pathMap[MessageType.PORTFOLIO_DERIVATIVES_REQUEST] = UrlPath.ORDER_DATA_DERIVATIVES;
            this.pathMap[MessageType.ACCOUNT_INFO_DERIVATIVES_REQUEST] = UrlPath.ORDER_DATA_DERIVATIVES;
            this.pathMap[MessageType.DEAL_SUMMARY_DERIVATIVES_REQUEST] = UrlPath.ORDER_DATA_DERIVATIVES;
            this.pathMap[MessageType.DEAL_SUMMARY_DERIVATIVES_BY_INSTRUMENT_ID_REQUEST] = UrlPath.ORDER_DATA_DERIVATIVES;
            this.pathMap[MessageType.DEAL_SUMMARY_DERIVATIVES_BY_PRICE_REQUEST] = UrlPath.ORDER_DATA_DERIVATIVES;
            this.pathMap[MessageType.POSITION_CLOSING_DERIVATIVES_REQUEST] = UrlPath.ORDER_DATA_DERIVATIVES;
            this.pathMap[MessageType.OUTSTANDING_POSITION_DERIVATIVES_REQUEST] = UrlPath.ORDER_DATA_DERIVATIVES;
            this.pathMap[MessageType.CANCEL_ORDER_DERIVATIVES_REQUEST] = UrlPath.ORDER_SEND_DERIVATIVES;
            this.pathMap[MessageType.ORDER_STATUS_BY_NUMBER_DERIVAITVES_REQUEST] = UrlPath.ORDER_DATA_DERIVATIVES;
            this.pathMap[MessageType.EXPIRE_DATE_REQUEST] = UrlPath.OPTIONS_WIZARD_DATA_PROVIDER_STRING;
            this.pathMap[MessageType.OPTIONS_INSTRUMENT_LIST_REQUEST] = UrlPath.OPTIONS_WIZARD_DATA_PROVIDER_STRING;
            this.pathMap[MessageType.OPTIONS_RECOMMEND_REQUEST] = UrlPath.OPTIONS_WIZARD_RECOMMEND;
            this.pathMap[MessageType.OPTIONS_HISTORICAL_CHART_REQUEST] = UrlPath.OPTIONS_WIZARD_DATA_PROVIDER_BINARY;
            this.pathMap[MessageType.OPTIONS_COMMISSION_REQUEST] = UrlPath.OPTIONS_COMMISSION;
            this.pathMap[MessageType.ACCOUNT_LIST_EQUITY_REQUEST] = UrlPath.ACCOUNT_LIST;
            this.pathMap[MessageType.ACCOUNT_NAME_REQUEST] = UrlPath.ACCOUNT_NAME;
            this.pathMap[MessageType.FAVOURITE_UPDATE_REQUEST] = UrlPath.SETTING;
            this.pathMap[MessageType.STATIC_DATA_REQUEST] = UrlPath.STATIC_DATA;
            this.pathMap[MessageType.SYNC_TIME_REQUEST] = UrlPath.SYNC_TIME;
            this.pathMap[MessageType.UPDATE_CONFIG_REQUEST] = UrlPath.SETTING;
            this.pathMap[MessageType.RESEARCH_REQUEST] = UrlPath.RESEARCH;
            this.pathMap[MessageType.WIDGET_TEMPLATE_REQUEST] = UrlPath.TEMPLATE;
            this.pathMap[MessageType.OPPDAY_ARCHIVE_REQUEST] = UrlPath.OPPDAY_ARCHIVE;
            this.pathMap[MessageType.OPPDAY_LIVE_REQUEST] = UrlPath.OPPDAY_LIVE;
            this.pathMap[MessageType.OPPDAY_SEARCH_REQUEST] = UrlPath.OPPDAY_SEARCH;
            this.pathMap[MessageType.INSTRUMENT_ID_VALIDATOR_REQUEST] = UrlPath.INSTRUMENT_ID_VALIDATOR;
            this.pathMap[MessageType.ORDER_STATUS_SEARCH_EQUITY_REQUEST] = UrlPath.ORDER_DATA_AJAX_EQUITY;
            this.pathMap[MessageType.ORDER_STATUS_SEARCH_DERIVATIVES_REQUEST] = UrlPath.ORDER_DATA_AJAX_DERIVATIVES;
            this.pathMap[MessageType.CHANGE_ORDER_DERIVATIVES_REQUEST] = UrlPath.CHANGE_DERIVATIVES;
            this.pathMap[MessageType.CHANGE_ORDER_DERIVATIVES_CONFIRM_REQUEST] = UrlPath.CHANGE_DERIVATIVES;
            this.pathMap[MessageType.CHANGE_ORDER_EQUITY_REQUEST] = UrlPath.CHANGE_EQUITY;
            this.pathMap[MessageType.CHANGE_ORDER_EQUITY_CONFIRM_REQUEST] = UrlPath.CHANGE_EQUITY;
            this.pathMap[MessageType.ACCOUNT_INFO_LONG_EQUITY_REQUEST] = UrlPath.ACCOUNT_INFO_JSON_EQUITY;
            this.pathMap[MessageType.ACCOUNT_INFO_LONG_DERIVATIVES_REQUEST] = UrlPath.ACCOUNT_INFO_JSON_DERIVATIVES;
            this.pathMap[MessageType.PAGE_STAT_REQUEST] = UrlPath.PAGE_STAT;
            this.pathMap[MessageType.BLOCK_TRADE_REQUEST] = UrlPath.BLOCK_TRADE;
            this.pathMap[MessageType.BLOCK_TRADE_CONFIRM_REQUEST] = UrlPath.BLOCK_TRADE;
            this.pathMap[MessageType.BLOCK_TRADE_TRTYPE_REQUEST] = UrlPath.BLOCK_TRADE;
            this.pathMap[MessageType.BLOCK_TRADE_INIT_REQUEST] = UrlPath.BLOCK_TRADE;
            this.pathMap[MessageType.BLOCK_TRADE_INFO_REQUEST] = UrlPath.BLOCK_TRADE_INFO;
            this.pathMap[MessageType.ACCOUNT_LIST_HIERACHY_DERIVATIVES_REQUEST] = UrlPath.ACCOUNT_LIST_HIERACHY_DERIVATIVES;
            this.pathMap[MessageType.FAST_QUOTE_DERIVATIVES_REQUEST] = UrlPath.FAST_QUOTE_DERIVATIVES;
            this.pathMap[MessageType.MULTIPLE_ORDER_CALCULATE_EQUITY_REQUEST] = UrlPath.MULTIPLE_ORDER_FAVOURITE_EQUITY;
            this.pathMap[MessageType.MULTIPLE_ORDER_GET_LAST_EQUITY_REQUEST] = UrlPath.MULTIPLE_ORDER_FAVOURITE_EQUITY;
            this.pathMap[MessageType.MULTIPLE_ORDER_GET_PERCENT_EQUITY_REQUEST] = UrlPath.MULTIPLE_ORDER_FAVOURITE_EQUITY;
            this.pathMap[MessageType.MULTIPLE_ORDER_SORT_MARKETCAP_EQUITY_REQUEST] = UrlPath.MULTIPLE_ORDER_FAVOURITE_EQUITY;
            this.pathMap[MessageType.MULTIPLE_ORDER_EXTRACT_EQUITY_REQUEST] = UrlPath.MULTIPLE_ORDER_EXTRACT_EQUITY;
            this.pathMap[MessageType.PLACE_MULTIPLE_ORDER_EQUITY_REQUEST] = UrlPath.MULTIPLE_ORDER_EQUITY;
            this.pathMap[MessageType.MULTIPLE_ORDER_EXTRACT_DERIVATIVES_REQUEST] = UrlPath.MULTIPLE_ORDER_EXTRACT_DERIVATIVES;
            this.pathMap[MessageType.MULTIPLE_ORDER_GET_LAST_DERIVATIVES_REQUEST] = UrlPath.MULTIPLE_ORDER_FAVOURITE_DERIVATIVES;
            this.pathMap[MessageType.PLACE_MULTIPLE_ORDER_DERIVATIVES_REQUEST] = UrlPath.MULTIPLE_ORDER_DERIVATIVES;
            this.pathMap[MessageType.NOTIFICATION_STARTUP_REQUEST] = UrlPath.NOTIFICATION_STARTUP;
            this.pathMap[MessageType.MARGIN_STOCK_REQUEST] = UrlPath.MARGIN_STOCK;
            this.pathMap[MessageType.TISCO_SETTLE_INFO_REQUEST] = UrlPath.TISCO_CUSTOMIZED_EQUITY;
            this.pathMap[MessageType.TISCO_STOCK_INFO_REQUEST] = UrlPath.TISCO_CUSTOMIZED_REALTIME;
            this.pathMap[MessageType.TISCO_VOL_FOCUS_LIST_REQUEST] = UrlPath.TISCO_CUSTOMIZED_REALTIME;
            this.pathMap[MessageType.DBSV_TECHNICAL_INSIGHT_REQUEST] = UrlPath.DBSV_CUSTOMIZED_TECHNICAL_INSIGHT;
            this.pathMap[MessageType.DBSV_VALUE_ANALYZER_REQUEST] = UrlPath.DBSV_CUSTOMIZED_VALUE_ANALYZER;
            this.pathMap[MessageType.DBSV_SUPPORT_AND_RESISTANCE_REQUEST] = UrlPath.DBSV_CUSTOMIZED_SUPPORT_AND_RESISTANCE;
            this.pathMap[MessageType.DBSV_START_DATE_END_DATE_REQUEST] = UrlPath.DBSV_CUSTOMIZED_START_DATE_END_DATE;
            this.pathMap[MessageType.DBSV_BULLISH_BEARISH_SPECIFIC_TAB_REQUEST] = UrlPath.DBSV_BULLISH_BEARISH_SPECIFIC_TAB;
        }
        public function getUrlPath(message:Message):UrlPath{
            if ((message is DynamicURLRequestMessage)){
                return (DynamicURLRequestMessage(message).url);
            };
            return (this.pathMap[message.type]);
        }
        public function serialize(message:RequestMessage):Vector.<RawRequestMessage>{
            var currentMessage:Message;
            var currentMessageList:Vector.<Message>;
            var messageInList:Message;
            var urlPath:UrlPath;
            var rawMessage:URLRequestMessage;
            var urlVariable:StreamingURLVariables;
            var extraQuery:String;
            var baseURLVar:StreamingURLVariables;
            var urlVarDictionary:Dictionary = new Dictionary();
            var rawMessageList:Vector.<RawRequestMessage> = new Vector.<RawRequestMessage>();
            var messageList:Vector.<Message> = new Vector.<Message>();
            messageList.push(message);
            while (messageList.length > 0) {
                currentMessage = messageList.pop();
                if ((currentMessage is IMultipleMessage)){
                    currentMessageList = IMultipleMessage(currentMessage).messageList;
                    for each (messageInList in currentMessageList) {
                        messageList.push(messageInList);
                    };
                } else {
                    if ((((currentMessage is IUrlSerializable)) && ((currentMessage is RequestMessage)))){
                        urlPath = this.getUrlPath(currentMessage);
                        rawMessage = null;
                        if (urlPath == null){
                            logger.error(("Path not found for MessageType:" + currentMessage.type));
                        } else {
                            urlVariable = IUrlSerializable(currentMessage).toURLVariable();
                            extraQuery = ((((StreamingTimeFormatter.DATE_SLASH_FORMAT.format(SyncTimeManager.getInstance().getCurrentTime()) + "_") + StreamingAttribute.brokerId) + "_") + StreamingAttribute.userRef);
                            if (urlPath.isSingleRequest){
                                baseURLVar = StreamingURLVariables(urlVarDictionary[urlPath]);
                                if (baseURLVar == null){
                                    urlVarDictionary[urlPath] = urlVariable;
                                    urlVariable.add("APIVersion", StreamingCoreAttribute.API_VERSION);
                                    urlVariable.add("q", MD5.hash(extraQuery));
                                    rawMessage = new URLRequestMessage(message, urlPath, urlVariable);
                                    rawMessageList.push(rawMessage);
                                } else {
                                    baseURLVar.merge(urlVariable);
                                };
                            } else {
                                urlVariable.add("APIVersion", StreamingCoreAttribute.API_VERSION);
                                urlVariable.add("q", MD5.hash(extraQuery));
                                rawMessage = new URLRequestMessage(message, urlPath, urlVariable);
                                rawMessageList.push(rawMessage);
                            };
                        };
                    } else {
                        logger.error(("Cannot Serialze Message:" + message.type));
                    };
                };
            };
            return (rawMessageList);
        }

    }
}//package com.settrade.streaming5.connection.serializer 
﻿package com.settrade.streaming5.page {
    import com.settrade.streaming5.language.*;
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import com.settrade.streaming5.widget.config.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.manager.*;
    import flash.utils.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.service.*;
    import flash.text.*;
    import com.settrade.streaming5.widget.component.standard.notification.*;
    import com.settrade.streaming5.widget.component.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;
    import com.settrade.streaming5.page.component.headerpage.*;
    import fl.containers.*;

    public class HeaderPage extends StreamingComponent {

        private static var logger:Logger = new Logger(prototype.constructor);

        private const MAXIMUM_MAIN_BUTTON:int = 10;
        private const INVESTORPAGES:Array;
        private const MKTREPPAGES:Array;

        public var mainButton0:MainButton;
        public var logoHeader:UILoader;
        public var logo:MovieClip;
        public var headerBg:MovieClip;
        public var backgroundClip:MovieClip;
        public var connecting:MovieClip;
        public var pushButton:MovieClip;
        public var btn_editMenu:SimpleButton;
        public var dateTime:TextField;
        public var mainButton9:MainButton;
        public var newWidgetBox:MovieClip;
        public var mainButton8:MainButton;
        public var secondScreenIcon:MovieClip;
        public var mainButton7:MainButton;
        public var offlineButton:SimpleButton;
        public var mainButton6:MainButton;
        public var mainButton5:MainButton;
        public var btn_openNewWindow:SimpleButton;
        public var mainButton4:MainButton;
        public var pullButton:MovieClip;
        public var mainButton3:MainButton;
        public var notificationBox:NotificationBox;
        public var mainButton2:MainButton;
        public var mainButton1:MainButton;
        public var tutorial_EditMode:MovieClip;
        protected var currentPage:int;
        private var finishEditingCallback:Function = null;
        private var _dateTimeTimer:Timer;
        protected var pageManager:PageManager;
        protected var syncTimeService:SynctimeService;
        protected var feedManager:FeedManager;
        protected var notificationManager:NotificationManager;
        private var _pageList:Array;

        public function HeaderPage(){
            this.syncTimeService = SynctimeService.getInstance();
            this.feedManager = FeedManager.getInstance();
            this.notificationManager = NotificationManager.getInstance();
            this._pageList = new Array();
            this.INVESTORPAGES = [WidgetPageManager.MARKET_WATCH, WidgetPageManager.BUY_SELL, WidgetPageManager.PORTFOLIO, WidgetPageManager.BID_OFFER, WidgetPageManager.TICKER, WidgetPageManager.QUOTE, WidgetPageManager.NEWS, WidgetPageManager.RESEARCH, WidgetPageManager.TECHNICAL_CHART, WidgetPageManager.SETTINGS];
            this.MKTREPPAGES = [WidgetPageManager.MARKET_WATCH, WidgetPageManager.BUY_SELL, WidgetPageManager.BUY_SELL_MKT, WidgetPageManager.PORTFOLIO, WidgetPageManager.DEAL_SUMMARY, WidgetPageManager.TICKER, WidgetPageManager.QUOTE, WidgetPageManager.ACCOUNT_INFO, WidgetPageManager.NEWS, WidgetPageManager.BID_OFFER, WidgetPageManager.RESEARCH, WidgetPageManager.TRADE_REPORT, WidgetPageManager.ORDER_STATUS_SEARCH, WidgetPageManager.OPTIONS_SUMMARY, WidgetPageManager.TECHNICAL_CHART, WidgetPageManager.SETTINGS];
            super();
            this.btn_editMenu.addEventListener(MouseEvent.CLICK, this.onEditMenu);
            this.pageManager = PageManager.getInstance();
            this.connecting.visible = true;
            this.pushButton.tabEnabled = false;
            this.pullButton.tabEnabled = false;
            this.btn_editMenu.visible = false;
            this.pushButton.addEventListener(MouseEvent.CLICK, this.onPushPullButtonMouseClick);
            this.pullButton.addEventListener(MouseEvent.CLICK, this.onPushPullButtonMouseClick);
            this.notificationManager.setNotificationBoxRef(this.notificationBox);
            this.btn_openNewWindow.addEventListener(MouseEvent.CLICK, this.onOpenNewWindowButtonMouseClick);
            this.currentPage = 0;
            addEventListener(MessageControlEvent.FEED_MANAGER_STATUS, this.onFeedStatusChange);
            addEventListener(MessageControlEvent.THEME_CHANGE, this.onThemeChange);
        }
        public function initialHeaderPage(pageList:Array=null):void{
            if (pageList != null){
                if (StreamingAttribute.applicationMode.isPro()){
                    if (((StreamingAttribute.isMarketRep) && (!(StreamingAttribute.isPrimaryScreen)))){
                        this.btn_editMenu.visible = false;
                    } else {
                        this.btn_editMenu.visible = true;
                        if (StreamingAttribute.isChangeModeToPro){
                            this.tutorial_EditMode.visible = true;
                            this.tutorial_EditMode.btn_close.addEventListener(MouseEvent.CLICK, this.onCloseTutorial);
                            StreamingAttribute.isChangeModeToPro = false;
                        };
                        if (((StreamingAttribute.isChangeVersion) && ((StreamingAttribute.newWidgetList.length > 0)))){
                            this.newWidgetBox.widgetAvailLabel.text = StringUtil.generateStringWithArguments("@args New widgets are available!", StreamingAttribute.newWidgetList.length);
                            this.newWidgetBox.visible = true;
                            this.newWidgetBox.btn_close.addEventListener(MouseEvent.CLICK, this.onCloseNewWidgetBox);
                        };
                    };
                } else {
                    this.btn_editMenu.visible = false;
                    if ((((this._pageList.indexOf(WidgetPageManager.TECHNICAL_CHART) >= 0)) && (!(StreamingAttribute.canUseTechnicalChart)))){
                        this._pageList.splice(this._pageList.indexOf(WidgetPageManager.TECHNICAL_CHART), 1);
                    };
                    if ((((((this._pageList.indexOf(WidgetPageManager.TRADE_REPORT) >= 0)) && (StreamingAttribute.isMarketRep))) && (!(StreamingAttribute.canUseBlockTrade)))){
                        this._pageList.splice(this._pageList.indexOf(WidgetPageManager.TRADE_REPORT), 1);
                    };
                    if ((((((this._pageList.indexOf(WidgetPageManager.SETTINGS) >= 0)) && (StreamingAttribute.isMarketRep))) && (!(StreamingAttribute.isPrimaryScreen)))){
                        this._pageList.splice(this._pageList.indexOf(WidgetPageManager.SETTINGS), 1);
                    };
                };
                this._pageList = pageList;
            } else {
                this.btn_editMenu.visible = false;
                if (StreamingAttribute.isMarketRep){
                    this._pageList = this.MKTREPPAGES;
                } else {
                    this._pageList = this.INVESTORPAGES;
                };
                if ((((this._pageList.indexOf(WidgetPageManager.TECHNICAL_CHART) >= 0)) && (!(StreamingAttribute.canUseTechnicalChart)))){
                    this._pageList.splice(this._pageList.indexOf(WidgetPageManager.TECHNICAL_CHART), 1);
                };
                if ((((((this._pageList.indexOf(WidgetPageManager.TRADE_REPORT) >= 0)) && (StreamingAttribute.isMarketRep))) && (!(StreamingAttribute.canUseBlockTrade)))){
                    this._pageList.splice(this._pageList.indexOf(WidgetPageManager.TRADE_REPORT), 1);
                };
                if ((((((this._pageList.indexOf(WidgetPageManager.SETTINGS) >= 0)) && (StreamingAttribute.isMarketRep))) && (!(StreamingAttribute.isPrimaryScreen)))){
                    this._pageList.splice(this._pageList.indexOf(WidgetPageManager.SETTINGS), 1);
                };
            };
            this.btn_openNewWindow.visible = ((StreamingAttribute.isMarketRep) && (StreamingAttribute.isPrimaryScreen));
            this.secondScreenIcon.visible = ((StreamingAttribute.isMarketRep) && (!(StreamingAttribute.isPrimaryScreen)));
            this.buildHeaderMenu(this._pageList);
            this.startService();
        }
        private function onCloseTutorial(e:MouseEvent):void{
            this.tutorial_EditMode.visible = false;
        }
        private function onCloseNewWidgetBox(e:MouseEvent):void{
            this.newWidgetBox.visible = false;
        }
        public function setFinishEditingCallback(finishEditingCallback:Function){
            this.finishEditingCallback = finishEditingCallback;
        }
        public function setLogo(url:String){
            this.logo.visible = false;
            this.logoHeader.source = url;
        }
        private function onEditMenu(e:MouseEvent):void{
            WidgetProPageManager.getInstance().initialEditMode();
        }
        private function buildHeaderMenu(pageList:Array){
            var mainButton:MainButton;
            var page:WidgetPageConfig;
            this._pageList = pageList;
            var i:int;
            while (i < this.MAXIMUM_MAIN_BUTTON) {
                mainButton = MainButton(this[("mainButton" + i)]);
                if (i < pageList.length){
                    if ((((i < (this.MAXIMUM_MAIN_BUTTON - 1))) || ((((i == (this.MAXIMUM_MAIN_BUTTON - 1))) && ((pageList.length == this.MAXIMUM_MAIN_BUTTON)))))){
                        page = WidgetPageConfig(pageList[i]);
                        mainButton.moreArrow.visible = false;
                        mainButton.removeMoreMenu();
                        mainButton.initialize(i, page.name, page.id, this.activateButton);
                        logger.info(((("build header for menu [" + page.name) + "] id : ") + page.id));
                        if (((StreamingAttribute.isChangeMajorVersion) && ((i == this._pageList.indexOf(WidgetPageManager.SETTINGS))))){
                            mainButton.newBadge();
                        };
                    } else {
                        mainButton.moreArrow.visible = true;
                        mainButton.initMoreMenu(i, pageList.slice((this.MAXIMUM_MAIN_BUTTON - 1)), this.activateButton);
                        if (StreamingAttribute.isChangeMajorVersion){
                            mainButton.newBadge();
                        };
                    };
                } else {
                    mainButton.deinitialize();
                };
                i++;
            };
            if (this.finishEditingCallback != null){
                this.finishEditingCallback();
            };
        }
        public function activateButton(btn:int):void{
            this[("mainButton" + this.currentPage)].gotoAndStop("start");
            if (btn < (this.MAXIMUM_MAIN_BUTTON - 1)){
                this[("mainButton" + btn)].gotoAndStop("end");
                this.currentPage = btn;
            } else {
                this[("mainButton" + (this.MAXIMUM_MAIN_BUTTON - 1))].gotoAndStop("end");
                this.currentPage = (this.MAXIMUM_MAIN_BUTTON - 1);
            };
        }
        private function onFeedStatusChange(e:MessageControlEvent):void{
            var message:FeedManagerStatusMessage = FeedManagerStatusMessage(e.message);
            this.pushButton.visible = message.status.isPush();
            this.pullButton.visible = message.status.isPull();
            this.offlineButton.visible = message.status.isOffline();
            if (((((message.status.isPush()) || (message.status.isPull()))) || (message.status.isOffline()))){
                this.connecting.visible = false;
            };
        }
        private function onThemeChange(e:MessageControlEvent):void{
            ThemeManager.changeClipBackground(getChildByName("backgroundClip"), ThemeManager.HEADERPAGE_BACKGROUND_COLOR, ThemeManager.HEADERPAGE_BACKGROUND_COLOR_OPACITY);
            MovieClip(getChildByName("headerBg")).visible = ThemeManager.HEADERPAGE_BGGRADIENT_ENABLE;
            TextField(getChildByName("dateTime")).textColor = ThemeManager.HEADERPAGE_COLOR;
        }
        private function onPushPullButtonMouseClick(e:MouseEvent):void{
            if (this.feedManager.state.isPush()){
                this.feedManager.changeToPullMode();
            } else {
                if (this.feedManager.state.isPull()){
                    this.feedManager.changeToPushMode();
                    this.connecting.visible = true;
                };
            };
        }
        private function onOpenNewWindowButtonMouseClick(e:MouseEvent):void{
            JavascriptInterface.openStreaming5Screen2();
        }
        override public function startService():void{
            this._dateTimeTimer = new Timer(1000);
            this._dateTimeTimer.addEventListener(TimerEvent.TIMER, this.onDateTimeTimerTick);
            this._dateTimeTimer.start();
            this.activateButton(this.currentPage);
            this.changeLanguage(LanguageManager.currentLanguageConfig);
        }
        override public function stopService():void{
        }
        override public function changeLanguage(language:ILanguageConfig):void{
            var mainButton:MainButton;
            var isEnglish:Boolean = LanguageManager.getInstance().currentLanguage.isEnglish();
            var i:int;
            while ((((i < this._pageList.length)) && ((i < this.MAXIMUM_MAIN_BUTTON)))) {
                mainButton = MainButton(this[("mainButton" + i)]);
                switch (mainButton.currentPageName){
                    case PageName.MARKET_WATCH:
                        mainButton.setLanguage(language.MARKET, isEnglish);
                        break;
                    case PageName.BUY_SELL:
                        mainButton.setLanguage(language.BUY_SELL, isEnglish);
                        break;
                    case PageName.PORTFOLIO:
                        mainButton.setLanguage(language.PORTFOLIO, isEnglish);
                        break;
                    case PageName.BID_OFFER:
                        mainButton.setLanguage(language.BID_OFFER, isEnglish);
                        break;
                    case PageName.TICKER:
                        mainButton.setLanguage(language.TICKER, isEnglish);
                        break;
                    case PageName.QUOTE:
                        mainButton.setLanguage(language.QUOTE, isEnglish);
                        break;
                    case PageName.NEWS:
                        mainButton.setLanguage(language.NEWS, isEnglish);
                        break;
                    case PageName.RESEARCH:
                        mainButton.setLanguage(language.RESEARCH, isEnglish);
                        break;
                    case PageName.SETTING:
                        mainButton.setLanguage(language.SETTINGS, isEnglish);
                        break;
                    case PageName.TECHNICAL_CHART:
                        mainButton.setLanguage(language.TECHNICAL_CHART, isEnglish);
                        break;
                };
                i++;
            };
        }
        private function onDateTimeTimerTick(e:TimerEvent):void{
            this.dateTime.text = StreamingTimeFormatter.HEADER_FORMAT.format(this.syncTimeService.getTime());
        }

    }
}//package com.settrade.streaming5.page 
﻿package com.settrade.streaming5.page {
    import fl.controls.*;
    import flash.events.*;
    import com.settrade.streaming5.event.*;
    import flash.utils.*;
    import __AS3__.vec.*;
    import flash.text.*;
    import fl.data.*;
    import fl.controls.dataGridClasses.*;
    import flash.globalization.*;

    public class ObjectViewer extends StreamingMovieClip {

        private static var dateFormat:DateTimeFormatter = new DateTimeFormatter(LocaleID.DEFAULT);
        private static var typePropertiesCache:Object = {};

        private var restrictedParameter:Array;
        protected var mode:String;
        protected var objectList:DataProvider;
        protected var messageList:DataProvider;
        protected var objectArray:Array;
        protected var objectGrid:DataGrid;
        protected var stringTextArea:TextArea;
        protected var objectSelectBox:DataGrid;
        protected var filterComboBox:ComboBox;
        protected var filterProvider:DataProvider;
        protected var filterType:String;
        protected var typeDictionary:Dictionary;
        protected var iWidth:Number;
        protected var iHeight:Number;

        public function ObjectViewer(){
            this.restrictedParameter = ["pin"];
            super();
            this.objectList = new DataProvider();
            this.objectArray = new Array();
            this.typeDictionary = new Dictionary();
            this.iWidth = 400;
            this.iHeight = 300;
            this.filterType = "";
            this.initComponent();
            this.addEventListener(Event.RESIZE, this.resizeHandler);
            this.arrangeComponent();
            this.toggleMode("object");
        }
        private static function getPropertyNames(instance:Object):Array{
            var prop:* = null;
            var instance:* = instance;
            var className:* = getQualifiedClassName(instance);
            if (typePropertiesCache[className]){
                return (typePropertiesCache[className]);
            };
            var typeDef:* = describeType(instance);
            var props:* = [];
            for each (prop in typeDef.accessor.(((@access == "readwrite")) || ((@access == "readonly")))) {
                props.push(prop.@name);
            };
            return ((typePropertiesCache[className] = props));
        }

        private function toggleMode(mode:String):void{
            if (this.mode != mode){
                this.stopMode(this.mode);
                this.mode = mode;
                this.startMode(this.mode);
            };
        }
        private function startMode(mode:String):void{
            if (mode == "object"){
                this.addChild(this.objectGrid);
            } else {
                if (mode == "string"){
                    this.addChild(this.stringTextArea);
                };
            };
        }
        private function stopMode(mode:String):void{
            if (mode == "object"){
                this.removeChild(this.objectGrid);
            } else {
                if (mode == "string"){
                    this.removeChild(this.stringTextArea);
                };
            };
        }
        public function resize(width:Number, height:Number):void{
            this.iWidth = width;
            this.iHeight = height;
            this.arrangeComponent();
            dispatchEvent(new Event(Event.RESIZE));
        }
        private function initComponent():void{
            this.initObjectGrid();
            this.initObjectSelectBox();
            this.initStringTextArea();
            this.initFilterCombobox();
        }
        private function initStringTextArea():void{
            this.stringTextArea = new TextArea();
            this.stringTextArea.editable = false;
        }
        private function initObjectGrid():void{
            this.objectGrid = new DataGrid();
            var keyColumn:DataGridColumn = new DataGridColumn("Name");
            var valueColumn:DataGridColumn = new DataGridColumn("Value");
            this.objectGrid.addColumn(keyColumn);
            this.objectGrid.addColumn(valueColumn);
            this.objectGrid.doubleClickEnabled = true;
            this.objectGrid.addEventListener(MouseEvent.DOUBLE_CLICK, this.doubleClickDataGridHandler);
        }
        private function initObjectSelectBox():void{
            this.objectSelectBox = new DataGrid();
            var timeColumn:DataGridColumn = new DataGridColumn("Time");
            var typeColumn:DataGridColumn = new DataGridColumn("Type");
            this.objectSelectBox.addColumn(timeColumn);
            this.objectSelectBox.addColumn(typeColumn);
            this.objectSelectBox.dataProvider = this.objectList;
            this.objectSelectBox.addEventListener(Event.CHANGE, this.selectClickHandler);
            this.objectSelectBox.addEventListener(MouseEvent.CLICK, this.selectClickHandler);
            this.objectList.addItem({
                Time:"[AUTO]",
                Type:"[Auto]",
                Data:null
            });
            this.objectSelectBox.selectedIndex = 0;
            this.addChild(this.objectSelectBox);
        }
        private function initFilterCombobox():void{
            this.filterComboBox = new ComboBox();
            this.filterProvider = new DataProvider();
            this.filterComboBox.dataProvider = this.filterProvider;
            this.filterProvider.addItem({
                label:"--ALL--",
                data:""
            });
            this.filterComboBox.addEventListener(Event.CHANGE, this.changeFilterComboBoxHandler);
            this.addChild(this.filterComboBox);
        }
        protected function arrangeComponent():void{
            this.objectSelectBox.setSize((this.iWidth / 2), (this.iHeight - 22));
            this.objectSelectBox.move(0, 22);
            this.objectGrid.setSize((this.iWidth / 2), (this.iHeight - 22));
            this.objectGrid.move((this.iWidth / 2), 22);
            this.stringTextArea.setSize((this.iWidth / 2), (this.iHeight - 22));
            this.stringTextArea.move((this.iWidth / 2), 22);
            this.filterComboBox.setSize(this.iWidth, 22);
            this.filterComboBox.move(0, 0);
        }
        protected function haveType(type:String):Boolean{
            return (!((this.typeDictionary[type] == null)));
        }
        protected function addNewType(type:String):void{
            this.typeDictionary[type] = type;
            this.filterProvider.addItem({
                label:type,
                data:type
            });
            this.filterProvider.sortOn("label");
        }
        public function addObject(object:Object):void{
            var time:Date = new Date();
            var timeStr:String = dateFormat.format(time);
            var className:String = getQualifiedClassName(object);
            if (className.indexOf("::") != -1){
                className = className.substring((className.indexOf("::") + 2));
            };
            this.objectArray.push(object);
            if (!this.haveType(className)){
                this.addNewType(className);
            };
            if (this.isValidObj(object)){
                this.objectList.addItemAt({
                    Time:timeStr,
                    Type:className,
                    Data:object
                }, 1);
            };
        }
        public function showObject(object):void{
            this.objectGrid.removeAll();
            if ((object is Array)){
                this.showArray((object as Array));
            } else {
                if ((object is Vector.<null>)){
                    this.showVector((object as Vector.<null>));
                } else {
                    if ((object is Dictionary)){
                        this.showDictionary((object as Dictionary));
                    } else {
                        if ((object is String)){
                            this.showString((object as String));
                        } else {
                            this.showDefaultObject(object);
                        };
                    };
                };
            };
        }
        public function setFontStyle(format:TextFormat):void{
            this.objectGrid.setRendererStyle("textFormat", format);
            this.objectSelectBox.setRendererStyle("textFormat", format);
            this.filterComboBox.setStyle("textFormat", format);
            this.filterComboBox.dropdown.setRendererStyle("textFormat", format);
        }
        private function showString(string:String):void{
            this.toggleMode("string");
            this.stringTextArea.text = string;
        }
        protected function showDefaultObject(object:Object):void{
            var id:String;
            var name:String;
            var value:Object;
            this.toggleMode("object");
            this.objectGrid.addItem({
                Name:"this",
                Value:object
            });
            var propertyList:Array = getPropertyNames(object);
            for each (id in propertyList) {
                if (this.restrictedParameter.indexOf(id) == -1){
                    name = id;
                    value = object[id];
                    this.objectGrid.addItem({
                        Name:name,
                        Value:value
                    });
                };
            };
        }
        protected function showPrimitive(object):void{
        }
        protected function showArray(array:Array):void{
            var name:String;
            var value:Object;
            this.toggleMode("object");
            this.objectGrid.addItem({
                Name:"this",
                Value:array
            });
            var i:* = 0;
            while (i < array.length) {
                name = (("[" + i) + "]");
                value = array[i];
                this.objectGrid.addItem({
                    Name:name,
                    Value:value
                });
                i++;
            };
        }
        protected function showVector(vector:Vector.<#InvalidMultinameIndex#>):void{
            var name:String;
            var value:Object;
            this.toggleMode("object");
            this.objectGrid.addItem({
                Name:"this",
                Value:vector
            });
            var i:* = 0;
            while (i < vector.length) {
                name = (("[" + i) + "]");
                value = vector[i];
                this.objectGrid.addItem({
                    Name:name,
                    Value:value
                });
                i++;
            };
        }
        protected function showDictionary(dict:Dictionary):void{
            this.toggleMode("object");
        }
        override public function startService():void{
            var eventName:String;
            for each (eventName in MessageSendEvent.ALL) {
                this.addEventListener(eventName, this.messageHandler);
            };
            for each (eventName in MessageReceiveEvent.ALL) {
                this.addEventListener(eventName, this.messageHandler);
            };
            for each (eventName in MessageControlEvent.ALL) {
                this.addEventListener(eventName, this.messageHandler);
            };
            for each (eventName in MessageFailEvent.ALL) {
                this.addEventListener(eventName, this.messageHandler);
            };
        }
        private function selectClickHandler(event:Event):void{
            this.showObject(this.objectSelectBox.selectedItem.Data);
        }
        protected function completeHandler(event:Event){
        }
        protected function resizeHandler(event:Event){
        }
        protected function messageHandler(event:MessageEvent){
            this.addObject(event.message);
            if (this.objectSelectBox.selectedIndex == 0){
                this.showObject(event.message);
            } else {
                this.objectSelectBox.selectedIndex++;
            };
        }
        protected function doubleClickDataGridHandler(event:MouseEvent){
            this.showObject(this.objectGrid.selectedItem.Value);
        }
        override public function set width(value:Number):void{
            this.resize(value, this.iHeight);
        }
        override public function set height(value:Number):void{
            this.resize(this.iWidth, value);
        }
        private function changeFilterComboBoxHandler(event:Event):void{
            this.filterType = this.filterComboBox.selectedItem.data;
            this.refresh();
        }
        protected function isValidObj(object:Object):Boolean{
            var className:String = getQualifiedClassName(object);
            if (className.indexOf("::") != -1){
                className = className.substring((className.indexOf("::") + 2));
            };
            if (((!((this.filterType == ""))) && (!((this.filterType == className))))){
                return (false);
            };
            return (true);
        }
        protected function filterObj():Array{
            var obj:Object;
            var objectList:Array = new Array();
            for each (obj in this.objectArray) {
                if (this.isValidObj(obj)){
                    objectList.push(obj);
                };
            };
            return (objectList);
        }
        public function refresh(){
            var object:Object;
            this.clearObjProvider();
            var filterObjList:Array = this.filterObj();
            for each (object in filterObjList) {
                this.addObject(object);
            };
        }
        protected function clearObjProvider(){
            this.objectList.removeAll();
            this.objectList.addItem({
                Time:"[AUTO]",
                Type:"[Auto]",
                Data:null
            });
        }

        dateFormat.setDateTimePattern("yyyyMMdd_HH:mm:ss");
    }
}//package com.settrade.streaming5.page 
﻿package com.settrade.streaming5.page {
    import fl.controls.*;
    import flash.display.*;
    import flash.events.*;
    import flash.text.*;
    import flash.ui.*;

    public class MovalblePane extends StreamingMovieClip {

        protected const HEADER_COLOR:uint = 2171170;
        protected const HEADER_FONT_COLOR:uint = 0xFFFFFF;
        protected const HEADER_HEIGHT:uint = 20;
        protected const HEADER_RADIUS:uint = 5;
        protected const BODY_LINE_COLOR:uint = 2171170;
        protected const BODY_LINE_SIZE:Number = 2;
        protected const CLOSE_BUTTON_WIDTH:uint = 10;

        protected var displayLabel:Label;
        protected var minimizeButton:Label;
        protected var closeButton:Label;
        protected var headerPane:Sprite;
        protected var bodyPane:Sprite;
        protected var content:MovieClip;
        protected var iWidth:Number;
        protected var iHeight:Number;
        protected var startResizeX:Number;
        protected var startResizeY:Number;
        protected var startResizeWidth:Number;
        protected var startResizeHeight:Number;
        protected var displayName:String;

        public function MovalblePane(displayName:String="new window", width:Number=400, height:Number=200, content:MovieClip=null){
            super();
            this.iWidth = width;
            this.iHeight = height;
            this.displayName = displayName;
            if (content == null){
                this.content = new MovieClip();
            } else {
                this.content = content;
            };
            this.initComponent();
            this.startService();
        }
        private function initComponent():void{
            this.initHeaderPane();
            this.initBodyPane();
            this.initContent();
            this.adjustPosition();
        }
        private function initDisplayLabel():void{
            this.displayLabel = new Label();
            this.displayLabel.text = this.displayName;
            var textFormat:TextFormat = new TextFormat();
            textFormat.color = this.HEADER_FONT_COLOR;
            textFormat.bold = true;
            this.displayLabel.x = 5;
            this.displayLabel.setStyle("textFormat", textFormat);
            this.displayLabel.setStyle("color", 0xFF0000);
            this.headerPane.addChild(this.displayLabel);
        }
        private function initCloseButton():void{
            this.closeButton = new Label();
            this.closeButton.text = "x";
            var textFormat:TextFormat = new TextFormat();
            textFormat.color = this.HEADER_FONT_COLOR;
            textFormat.bold = true;
            this.closeButton.setStyle("textFormat", textFormat);
            this.closeButton.width = this.CLOSE_BUTTON_WIDTH;
            this.closeButton.addEventListener(MouseEvent.CLICK, this.clickCloseButtonHandler);
            this.headerPane.addChild(this.closeButton);
        }
        private function initMinimizeButton():void{
            this.minimizeButton = new Label();
            this.minimizeButton.text = "_";
            var textFormat:TextFormat = new TextFormat();
            textFormat.color = this.HEADER_FONT_COLOR;
            textFormat.bold = true;
            this.minimizeButton.setStyle("textFormat", textFormat);
            this.minimizeButton.width = this.CLOSE_BUTTON_WIDTH;
            this.minimizeButton.addEventListener(MouseEvent.CLICK, this.clickMinimizeCloseButtonHandler);
            this.headerPane.addChild(this.minimizeButton);
        }
        private function initHeaderPane():void{
            this.headerPane = new Sprite();
            this.drawHeaderPane();
            this.headerPane.addEventListener(MouseEvent.MOUSE_DOWN, this.mouseDownHeaderPaneHandler);
            this.headerPane.addEventListener(MouseEvent.MOUSE_UP, this.mouseUpHeaderPaneHandler);
            this.addChild(this.headerPane);
            this.initDisplayLabel();
            this.initCloseButton();
            this.initMinimizeButton();
        }
        private function initBodyPane():void{
            this.bodyPane = new Sprite();
            this.drawBodyPane();
            this.bodyPane.addEventListener(MouseEvent.MOUSE_DOWN, this.mouseDownBodyPaneHandler);
            this.bodyPane.addEventListener(MouseEvent.MOUSE_OVER, this.mouseOverBodyPaneHandler);
            this.bodyPane.addEventListener(MouseEvent.MOUSE_OUT, this.mouseOutBodyPaneHandler);
            this.addChild(this.bodyPane);
        }
        private function initContent():void{
            this.content.y = this.HEADER_HEIGHT;
            this.content.x = this.BODY_LINE_SIZE;
            this.addChild(this.content);
        }
        private function adjustPosition():void{
            var closeX:Number = ((this.iWidth - this.CLOSE_BUTTON_WIDTH) - 3);
            var minimizeX:Number = ((this.iWidth - (2 * this.CLOSE_BUTTON_WIDTH)) - 6);
            var displayNameWidth:Number = ((this.iWidth - (2 * this.CLOSE_BUTTON_WIDTH)) - 6);
            var contentWidth:* = (this.iWidth - (this.BODY_LINE_SIZE * 2.5));
            var contentHeight:* = ((this.iHeight - this.HEADER_HEIGHT) - (this.BODY_LINE_SIZE * 1.5));
            this.minimizeButton.move(minimizeX, this.minimizeButton.y);
            this.closeButton.move(closeX, this.closeButton.y);
            this.displayLabel.width = displayNameWidth;
            this.content.height = contentHeight;
            this.content.width = contentWidth;
        }
        override public function startService():void{
            if ((this.content is StreamingMovieClip)){
                StreamingMovieClip(this.content).startService();
            };
        }
        override public function stopService():void{
            if ((this.content is StreamingMovieClip)){
                StreamingMovieClip(this.content).stopService();
            };
        }
        private function clickMinimizeCloseButtonHandler(e:MouseEvent):void{
            this.parent.removeChild(this);
        }
        private function clickCloseButtonHandler(e:MouseEvent):void{
            this.stopService();
            this.parent.removeChild(this);
        }
        private function mouseUpHeaderPaneHandler(e:MouseEvent):void{
            this.stopDrag();
        }
        private function mouseDownHeaderPaneHandler(e:MouseEvent):void{
            this.parent.setChildIndex(this, (this.parent.numChildren - 1));
            this.startDrag();
        }
        private function mouseMoveStagePaneHandler(e:MouseEvent):void{
            this.doResize(e);
        }
        private function mouseUpStagePaneHandler(e:MouseEvent):void{
            Mouse.cursor = "auto";
            this.doResize(e);
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, this.mouseMoveStagePaneHandler);
            stage.removeEventListener(MouseEvent.MOUSE_UP, this.mouseUpStagePaneHandler);
        }
        private function mouseDownBodyPaneHandler(e:MouseEvent):void{
            this.startResize(e);
            Mouse.cursor = "hand";
            stage.addEventListener(MouseEvent.MOUSE_MOVE, this.mouseMoveStagePaneHandler);
            stage.addEventListener(MouseEvent.MOUSE_UP, this.mouseUpStagePaneHandler);
        }
        private function startResize(e:MouseEvent):void{
            this.startResizeX = e.stageX;
            this.startResizeY = e.stageY;
            this.startResizeWidth = this.iWidth;
            this.startResizeHeight = this.iHeight;
        }
        private function doResize(e:MouseEvent):void{
            this.resize((this.startResizeWidth + (e.stageX - this.startResizeX)), (this.startResizeHeight + (e.stageY - this.startResizeY)));
        }
        private function mouseOverBodyPaneHandler(e:MouseEvent):void{
            Mouse.cursor = "hand";
        }
        private function mouseOutBodyPaneHandler(e:MouseEvent):void{
            Mouse.cursor = "auto";
        }
        private function redrawComponent():void{
            this.drawHeaderPane();
            this.drawBodyPane();
        }
        private function drawHeaderPane():void{
            this.headerPane.graphics.clear();
            this.headerPane.graphics.beginFill(this.HEADER_COLOR);
            this.headerPane.graphics.drawRoundRectComplex(0, 0, this.iWidth, this.HEADER_HEIGHT, this.HEADER_RADIUS, this.HEADER_RADIUS, 0, 0);
            this.headerPane.graphics.endFill();
        }
        private function drawBodyPane():void{
            this.bodyPane.graphics.clear();
            this.bodyPane.graphics.lineStyle(this.BODY_LINE_SIZE, this.BODY_LINE_COLOR);
            this.bodyPane.graphics.moveTo((this.BODY_LINE_SIZE / 2), this.HEADER_HEIGHT);
            this.bodyPane.graphics.lineTo((this.BODY_LINE_SIZE / 2), this.iHeight);
            this.bodyPane.graphics.lineTo((this.iWidth - (this.BODY_LINE_SIZE / 2)), this.iHeight);
            this.bodyPane.graphics.lineTo((this.iWidth - (this.BODY_LINE_SIZE / 2)), this.HEADER_HEIGHT);
        }
        override public function set width(value:Number):void{
            this.resize(value, this.iHeight);
        }
        override public function set height(value:Number):void{
            this.resize(this.iWidth, value);
        }
        public function move(x:Number, y:Number){
            this.x = x;
            this.y = y;
        }
        public function resize(width:Number, height:Number):void{
            if (width < 0){
                width = 0;
            };
            if (height < this.HEADER_HEIGHT){
                height = this.HEADER_HEIGHT;
            };
            this.iWidth = width;
            this.iHeight = height;
            this.redrawComponent();
            this.adjustPosition();
        }
        public function loadContent(content:MovieClip):void{
            this.stopService();
            this.removeChild(this.content);
            this.content = content;
            this.initContent();
            this.adjustPosition();
            this.startService();
        }
        public function setDisplayName(name:String):void{
            this.displayName = name;
            this.displayLabel.text = this.displayName;
        }

    }
}//package com.settrade.streaming5.page 
﻿package com.settrade.streaming5.page {
    import com.settrade.streaming5.enumuration.*;
    import flash.events.*;
    import flash.geom.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;

    public class PopUpStreamingMovieClip extends StreamingMovieClip {

        private static var logger:Logger = new Logger(prototype.constructor);

        private const DIM_COLOR:int = 0xFFFFFF;

        public function PopUpStreamingMovieClip(){
            super();
        }
        override public function synchronousStartService():void{
            this.redraw();
            if (stage != null){
                stage.addEventListener(Event.RESIZE, this.onStageResize);
            };
            var message:PopupStateChangeMessage = new PopupStateChangeMessage(PopupState.SHOWING);
            dispatcher.notifyControlMessage(message);
        }
        override public function synchronousStopService():void{
            this.clearDimBackground();
            if (stage != null){
                stage.removeEventListener(Event.RESIZE, this.onStageResize);
            };
            var message:PopupStateChangeMessage = new PopupStateChangeMessage(PopupState.HIDING);
            dispatcher.notifyControlMessage(message);
        }
        private function onStageResize(e:Event):void{
            this.redraw();
        }
        private function redraw():void{
            this.clearDimBackground();
            this.alignCenter();
            this.redrawDimBackground();
        }
        private function clearDimBackground():void{
            graphics.clear();
        }
        private function redrawDimBackground():void{
            this.clearDimBackground();
            var stageBounds:Rectangle = stage.getBounds(this);
            graphics.beginFill(this.DIM_COLOR, 0.1);
            graphics.drawRect(stageBounds.x, stageBounds.y, (stage.stageWidth - stageBounds.x), (stage.stageHeight - stageBounds.y));
            graphics.endFill();
        }
        private function alignCenter():void{
            var xPos:Number = ((stage.stageWidth - this.width) / 2);
            var yPos:Number = ((stage.stageHeight - this.height) / 2);
            this.x = xPos;
            this.y = yPos;
        }

    }
}//package com.settrade.streaming5.page 
﻿package com.settrade.streaming5.page.component.settingcontent {
    import flash.display.*;
    import flash.events.*;
    import com.settrade.log.logger.*;

    public class SwitchButton extends MovieClip {

        private static var logger:Logger = new Logger(prototype.constructor);

        public var dimOverlay:MovieClip;
        public var hitarea:MovieClip;
        private var _isOn:Boolean = false;
        private var _activate:Boolean = true;

        public function SwitchButton(){
            super();
            addFrameScript(0, this.frame1, 14, this.frame15, 29, this.frame30);
            this.hitarea.addEventListener(MouseEvent.CLICK, this.onClick);
            this.dimOverlay.visible = false;
            gotoAndStop(1);
        }
        public function set activate(value:Boolean):void{
            this.dimOverlay.visible = !(value);
            this._activate = value;
        }
        public function get activate():Boolean{
            return (this._activate);
        }
        private function onClick(e:MouseEvent){
            this._isOn = !(this._isOn);
            if (this._isOn){
                gotoAndStop(2);
            } else {
                gotoAndStop(1);
            };
        }
        public function get isOn():Boolean{
            return (this._isOn);
        }
        public function set isOn(value:Boolean):void{
            this._isOn = value;
            if (this._isOn){
                gotoAndStop(2);
            } else {
                gotoAndStop(1);
            };
        }
        function frame1(){
            stop();
        }
        function frame15(){
            stop();
        }
        function frame30(){
            gotoAndStop(1);
        }

    }
}//package com.settrade.streaming5.page.component.settingcontent 
﻿package com.settrade.streaming5.page.component.volumepicker {
    import fl.controls.*;
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.page.component.pricepicker.*;
    import flash.ui.*;

    public class VolumePicker extends MovieClip {

        public var box:MovieClip;
        private var logger:Logger;
        private var popupVolumeTarget:String = "";
        private var delay:Number = 0;
        private var stepVolume:Number = 0;
        private var alertService:AlertService;
        protected var _diffUpsideX:Number = 0;
        protected var _diffUpsideY:Number = 0;
        protected var _upsideMode:Boolean = false;
        protected var _target:TextInput;
        protected var _nextFocus:TextInput = null;
        protected var _neighborPopup:Array;
        protected var _currentSystem:System;

        public function VolumePicker(){
            this.logger = new Logger(prototype.constructor);
            this._neighborPopup = new Array();
            this._currentSystem = System.EQUITY;
            addFrameScript(0, this.frame1, 2, this.frame3);
            super();
            this.visible = false;
            this.gotoAndPlay("hide");
            this.addEventListener(FocusEvent.FOCUS_OUT, this.popVolFocusOutHandler);
            this.serMouseEnabled();
            this.box.closeButton.addEventListener(MouseEvent.CLICK, this.popVolCloseClickHandler);
            this.box.minus1000Button.addEventListener(MouseEvent.CLICK, this.popVolMinus1000ClickHandler);
            this.box.minus1000Button.addEventListener(MouseEvent.MOUSE_DOWN, this.popVolMinus1000DownHandler);
            this.box.minus1000Button.addEventListener(MouseEvent.MOUSE_UP, this.popVolumeMouseUpHandler);
            this.box.minus1000Button.addEventListener(MouseEvent.MOUSE_OUT, this.popVolumeMouseUpHandler);
            this.box.minus100Button.addEventListener(MouseEvent.CLICK, this.popVolMinus100ClickHandler);
            this.box.minus100Button.addEventListener(MouseEvent.MOUSE_DOWN, this.popVolMinus100DownHandler);
            this.box.minus100Button.addEventListener(MouseEvent.MOUSE_UP, this.popVolumeMouseUpHandler);
            this.box.minus100Button.addEventListener(MouseEvent.MOUSE_OUT, this.popVolumeMouseUpHandler);
            this.box.plus100Button.addEventListener(MouseEvent.CLICK, this.popVolPlus100ClickHandler);
            this.box.plus100Button.addEventListener(MouseEvent.MOUSE_DOWN, this.popVolPlus100DownHandler);
            this.box.plus100Button.addEventListener(MouseEvent.MOUSE_UP, this.popVolumeMouseUpHandler);
            this.box.plus100Button.addEventListener(MouseEvent.MOUSE_OUT, this.popVolumeMouseUpHandler);
            this.box.plus1000Button.addEventListener(MouseEvent.CLICK, this.popVolPlus1000ClickHandler);
            this.box.plus1000Button.addEventListener(MouseEvent.MOUSE_DOWN, this.popVolPlus1000DownHandler);
            this.box.plus1000Button.addEventListener(MouseEvent.MOUSE_UP, this.popVolumeMouseUpHandler);
            this.box.plus1000Button.addEventListener(MouseEvent.MOUSE_OUT, this.popVolumeMouseUpHandler);
            this.alertService = AlertService.getInstance();
        }
        private function serMouseEnabled(){
            this.box.minusMuchLabel.mouseEnabled = false;
            this.box.minusLessLabel.mouseEnabled = false;
            this.box.plusMuchLabel.mouseEnabled = false;
            this.box.plusLessLabel.mouseEnabled = false;
        }
        public function initPopupVolume(nowTarget:TextInput, nextFocus:TextInput, currentSystem:System){
            this._target = nowTarget;
            this._nextFocus = nextFocus;
            this._currentSystem = currentSystem;
            this.setLabel(currentSystem);
            this.visible = false;
            this.gotoAndPlay("hide");
        }
        public function goToUpsideMode(diffX:Number, diffY:Number){
            this.box.gotoAndStop(2);
            this.x = (this.x - diffX);
            this.y = (this.y - diffY);
            this._diffUpsideX = diffX;
            this._diffUpsideY = diffY;
            this._upsideMode = true;
            this.serMouseEnabled();
        }
        public function popVolFocusOutHandler(event:MouseEvent):void{
            this.logger.debug("popVolFocusOutHandlerpopVolFocusOutHandler");
        }
        public function popVolCloseClickHandler(event:MouseEvent):void{
            this.visible = false;
            this.gotoAndPlay("hide");
            trace(this.alertService.setFocus);
            if (this._upsideMode == true){
                this.x = (this.x + this._diffUpsideX);
                this.y = (this.y + this._diffUpsideY);
                this._upsideMode = false;
                this._diffUpsideX = 0;
                this._diffUpsideY = 0;
            };
            if (this._nextFocus != null){
                this.alertService.setFocus(this._nextFocus);
            };
        }
        public function setFocusToNext():void{
            if (this._nextFocus != null){
                this.alertService.setFocus(this._nextFocus);
            };
        }
        public function popVolMinus1000ClickHandler(event:MouseEvent):void{
            if (this._currentSystem.isEquity()){
                this.steppingVolume(-1000);
            } else {
                this.steppingVolume(-10);
            };
        }
        function popVolMinus1000DownHandler(event:MouseEvent=undefined):void{
            addEventListener(Event.ENTER_FRAME, this.popVolumeMouseDown);
            this.delay = 0;
            if (this._currentSystem.isEquity()){
                this.stepVolume = -1000;
            } else {
                this.stepVolume = -10;
            };
        }
        public function popVolMinus100ClickHandler(event:MouseEvent):void{
            if (this._currentSystem.isEquity()){
                this.steppingVolume(-100);
            } else {
                this.steppingVolume(-1);
            };
        }
        function popVolMinus100DownHandler(event:MouseEvent=undefined):void{
            addEventListener(Event.ENTER_FRAME, this.popVolumeMouseDown);
            this.delay = 0;
            if (this._currentSystem.isEquity()){
                this.stepVolume = -100;
            } else {
                this.stepVolume = -1;
            };
        }
        public function popVolPlus100ClickHandler(event:MouseEvent):void{
            if (this._currentSystem.isEquity()){
                this.steppingVolume(100);
            } else {
                this.steppingVolume(1);
            };
        }
        function popVolPlus100DownHandler(event:MouseEvent=undefined):void{
            addEventListener(Event.ENTER_FRAME, this.popVolumeMouseDown);
            this.delay = 0;
            if (this._currentSystem.isEquity()){
                this.stepVolume = 100;
            } else {
                this.stepVolume = 1;
            };
        }
        public function popVolPlus1000ClickHandler(event:MouseEvent):void{
            if (this._currentSystem.isEquity()){
                this.steppingVolume(1000);
            } else {
                this.steppingVolume(10);
            };
        }
        function popVolPlus1000DownHandler(event:MouseEvent=undefined):void{
            addEventListener(Event.ENTER_FRAME, this.popVolumeMouseDown);
            this.delay = 0;
            if (this._currentSystem.isEquity()){
                this.stepVolume = 1000;
            } else {
                this.stepVolume = 10;
            };
        }
        function popVolumeMouseUpHandler(event:MouseEvent=undefined):void{
            removeEventListener(Event.ENTER_FRAME, this.popVolumeMouseDown);
            this.delay = 0;
        }
        public function steppingVolume(amount:int=0):void{
            var target:* = this.target;
            var targetValue:* = ThemeManager.removeComma(target.text);
            var val:* = ((isNaN(parseInt(targetValue))) ? 0 : parseInt(targetValue));
            val = (val + amount);
            if (val < 0){
                val = 0;
            };
            target.text = ThemeManager.addComma(val);
        }
        function popVolumeMouseDown(event:Event):void{
            var mod:*;
            if (this.delay > 3){
                mod = (this.delay % 3);
                if (mod == 0){
                    this.steppingVolume(this.stepVolume);
                };
            };
            this.delay++;
        }
        public function handleKeyboardEvent(event:KeyboardEvent):void{
            if (event.keyCode == Keyboard.UP){
                if (this._currentSystem.isEquity()){
                    this.steppingVolume(100);
                } else {
                    this.steppingVolume(1);
                };
            } else {
                if (event.keyCode == Keyboard.DOWN){
                    if (this._currentSystem.isEquity()){
                        this.steppingVolume(-100);
                    } else {
                        this.steppingVolume(-1);
                    };
                };
            };
        }
        public function hideVolumePicker():void{
            this.visible = false;
            this.gotoAndPlay("hide");
            if (this._upsideMode == true){
                this._upsideMode = false;
                this.x = (this.x + this._diffUpsideX);
                this._diffUpsideX = 0;
                this.y = (this.y + this._diffUpsideY);
                this._diffUpsideY = 0;
            };
        }
        public function hideAllOtherPopup():void{
            var i:int;
            while (i < this._neighborPopup.length) {
                if ((this._neighborPopup[i] is VolumePicker)){
                    VolumePicker(this._neighborPopup[i]).hideVolumePicker();
                } else {
                    if ((this._neighborPopup[i] is PricePicker)){
                        PricePicker(this._neighborPopup[i]).hidePricePicker();
                    };
                };
                i++;
            };
        }
        public function showPopupVolume(forceUpsideMode:Boolean=false, diffX:Number=0, diffY:Number=0, upsideMode:Boolean=false):void{
            this.logger.debug(((((("Y is : " + this.getBounds(stage).y) + " / Iceberg Height : ") + this.height) + " / WidgetSize : ") + StreamingAttribute.widgetGridSize.height));
            if (((((((this.getBounds(stage).y + this.height) > (34 + (StreamingAttribute.widgetGridSize.height * 153)))) && ((upsideMode == true)))) || ((forceUpsideMode == true)))){
                if (this._upsideMode == false){
                    this.goToUpsideMode(diffX, diffY);
                };
            };
            if (this.visible == false){
                this.hideAllOtherPopup();
                this.visible = true;
                this.gotoAndPlay("show");
                this.alertService.setFocus(this._target);
            };
        }
        public function get target():TextInput{
            return (this._target);
        }
        public function set target(value:TextInput):void{
            this._target = value;
        }
        public function get nextFocus():TextInput{
            return (this._nextFocus);
        }
        public function set nextFocus(value:TextInput):void{
            this._nextFocus = value;
        }
        public function get currentSystem():System{
            return (this._currentSystem);
        }
        public function set currentSystem(value:System):void{
            this._currentSystem = value;
        }
        public function setNeighborPopup(allPopup:Array):void{
            var i:int;
            while (i < allPopup.length) {
                if (allPopup[i] != this){
                    this._neighborPopup.push(allPopup[i]);
                };
                i++;
            };
        }
        public function setLabel(value:System):void{
            if (value.isEquity()){
                this.box.minusMuchLabel.text = "1000";
                this.box.minusLessLabel.text = "100";
                this.box.plusMuchLabel.text = "1000";
                this.box.plusLessLabel.text = "100";
            } else {
                this.box.minusMuchLabel.text = "10";
                this.box.minusLessLabel.text = "1";
                this.box.plusMuchLabel.text = "10";
                this.box.plusLessLabel.text = "1";
            };
        }
        function frame1(){
            stop();
        }
        function frame3(){
            stop();
        }

    }
}//package com.settrade.streaming5.page.component.volumepicker 
﻿package com.settrade.streaming5.page.component.calendar {
    import flash.display.*;
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import flash.text.*;

    public class CalendarBox extends MovieClip {

        public var calendar:Calendar;
        public var dateText:TextField;
        public var button:SimpleButton;
        protected var _selectDate:Date;
        protected var _onSelectDate:Function;
        protected var _untilDate:Date;

        public function CalendarBox(){
            super();
            this.button.addEventListener(MouseEvent.CLICK, this.onClick);
            this.calendar.visible = false;
            this.dateText.mouseEnabled = false;
            this._selectDate = new Date();
            this.setDateText();
        }
        private function onClick(e:MouseEvent):void{
            if (!this.calendar.visible){
                this.calendar.visible = true;
                this.calendar.setCurrentMonth(this._selectDate);
                this.calendar.setActiveDate(this._selectDate);
                this.calendar.onSelectDate = this.onSelectDateHandler;
                stage.addEventListener(MouseEvent.CLICK, this.onStageClick);
            } else {
                this.calendar.visible = false;
                stage.removeEventListener(FocusEvent.FOCUS_OUT, this.onStageClick);
                this.calendar.onSelectDate = null;
            };
        }
        private function onStageClick(e:MouseEvent):void{
            if (e.target != this){
                if ((e.target is DisplayObject)){
                    if (this.contains(DisplayObject(e.target))){
                        return;
                    };
                };
                this.calendar.visible = false;
                stage.removeEventListener(FocusEvent.FOCUS_OUT, this.onStageClick);
                this.calendar.onSelectDate = null;
            };
        }
        private function setDateText():void{
            this.dateText.text = StreamingTimeFormatter.DATE_SLASH_FORMAT.format(this._selectDate);
        }
        private function onSelectDateHandler(date:Date):void{
            this.calendar.visible = false;
            this._selectDate = date;
            this.setDateText();
            stage.removeEventListener(FocusEvent.FOCUS_OUT, this.onStageClick);
            this.calendar.onSelectDate = null;
            if (this._onSelectDate != null){
                this._onSelectDate(date);
            };
        }
        public function get selectDate():Date{
            return (this._selectDate);
        }
        public function set selectDate(value:Date):void{
            this._selectDate = value;
        }
        public function set onSelectDate(value:Function):void{
            this._onSelectDate = value;
        }
        public function get untilDate():Date{
            return (this._untilDate);
        }
        public function set untilDate(value:Date):void{
            this._untilDate = value;
            this.calendar.untilDate = value;
            if (value == null){
                this.calendar.isEnableCurrentMonth = true;
                this.calendar.isEnableUntilDate = false;
            } else {
                this.calendar.isEnableCurrentMonth = false;
                this.calendar.isEnableUntilDate = true;
            };
        }

    }
}//package com.settrade.streaming5.page.component.calendar 
﻿package com.settrade.streaming5.page.component.calendar {
    import flash.display.*;
    import flash.events.*;
    import com.settrade.streaming5.service.*;
    import flash.text.*;

    public class CalendarDateLabel extends MovieClip {

        const IDLE:String = "Idle";
        const DISABLED:String = "Disabled";

        public var todayBorder:MovieClip;
        public var border:MovieClip;
        public var dateLabel:TextField;
        public var overlay:MovieClip;
        private var _date:Date;
        private var state:String;
        private var _onActive:Function;
        private var dataCount:int;

        public function CalendarDateLabel(){
            super();
            this.addEventListener(MouseEvent.MOUSE_DOWN, this.onClickActiveListner);
            this.mouseChildren = false;
            this._date = null;
            this.disabled();
            this.dataCount = 0;
        }
        private function refreshText():void{
            if (this.dateLabel != null){
                if (this._date != null){
                    this.dateLabel.text = this._date.date.toString();
                    this.setToday();
                } else {
                    this.dateLabel.text = "";
                };
            };
        }
        public function idle():void{
            this.visible = true;
            this.state = this.IDLE;
            gotoAndStop(this.IDLE);
            this.refreshText();
            this.setHandCursor(true);
        }
        public function disabled():void{
            this.visible = true;
            this.state = this.DISABLED;
            gotoAndStop(this.DISABLED);
            this.refreshText();
            this.setHandCursor(false);
        }
        public function active():void{
            this.border.visible = true;
            if (this._onActive != null){
                this._onActive(this);
            };
        }
        public function inactive():void{
            this.border.visible = false;
        }
        public function setToday():void{
            var currentDate:Date = SynctimeService.getInstance().getTime();
            if (((((((!((this.date == null))) && ((currentDate.fullYear == this.date.fullYear)))) && ((currentDate.month == this.date.month)))) && ((currentDate.date == this.date.date)))){
                this.todayBorder.visible = true;
            } else {
                this.todayBorder.visible = false;
            };
        }
        public function hide():void{
            this.visible = false;
            this.setHandCursor(false);
        }
        private function setHandCursor(isHand:Boolean):void{
            this.buttonMode = isHand;
            this.useHandCursor = isHand;
        }
        private function onClickActiveListner(e:MouseEvent):void{
            if (this.state == this.IDLE){
                this.active();
            };
        }
        public function get date():Date{
            return (this._date);
        }
        public function set date(value:Date):void{
            this._date = value;
            this.refreshText();
        }
        public function set onActive(value:Function):void{
            this._onActive = value;
        }
        public function setHeat(alpha:Number):void{
            this.overlay.alpha = alpha;
        }
        public function clearHeat():void{
            this.overlay.alpha = 0;
            this.dataCount = 0;
        }
        public function addHeat():void{
            this.dataCount++;
            this.idle();
            var alpha:Number = (this.dataCount / 10);
            if (alpha > 1){
                alpha = 1;
            };
            this.setHeat(alpha);
        }

    }
}//package com.settrade.streaming5.page.component.calendar 
﻿package com.settrade.streaming5.page.component.calendar {
    import flash.display.*;
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import com.settrade.streaming5.service.*;
    import flash.text.*;

    public class Calendar extends MovieClip {

        public var left:MovieClip;
        public var right:MovieClip;
        public var month:TextField;
        public var matrix:CalendarMatrix;
        protected var _onSelectDate:Function;
        private var _onSelectMonth:Function;
        protected var _selectDate:Date;
        protected var currentMonth:Date;
        protected var _isEnableCurrentMonth:Boolean;
        protected var _isEnableUntilDate:Boolean;
        protected var _untilDate:Date;

        public function Calendar(){
            super();
            this.left.buttonMode = true;
            this.left.useHandCursor = true;
            this.left.addEventListener(MouseEvent.CLICK, this.onDecreaseMonth);
            this.right.buttonMode = true;
            this.right.useHandCursor = true;
            this.right.addEventListener(MouseEvent.CLICK, this.onIncreaseMonth);
            this.matrix.onSelectDate = this.selectDateHandler;
            this._isEnableCurrentMonth = true;
            this.createCalendar(new Date());
        }
        public function setCurrentMonth(date:Date):void{
            this.currentMonth.month = date.month;
            this.currentMonth.fullYear = date.fullYear;
            this.refresh();
        }
        private function onDecreaseMonth(e:MouseEvent):void{
            this.currentMonth.month = (this.currentMonth.month - 1);
            this.refresh();
            this.onChangeMonth();
        }
        private function onIncreaseMonth(e:MouseEvent):void{
            this.currentMonth.month = (this.currentMonth.month + 1);
            this.refresh();
            this.onChangeMonth();
        }
        public function createCalendar(date:Date):void{
            this.currentMonth = new Date(date);
            this.currentMonth.date = 1;
            this.refresh();
            this.onChangeMonth();
        }
        private function onChangeMonth():void{
            if (this._onSelectMonth != null){
                this._onSelectMonth(this.currentMonth);
            };
        }
        public function setActiveDate(date:Date):void{
            this._selectDate = date;
            this.matrix.setActiveDate(date);
        }
        public function enableCurrentMonth():void{
            var currentDate:Date = new Date();
            currentDate.setTime(this.currentMonth.getTime());
            while (this.currentMonth.month == currentDate.month) {
                this.addHeatMap(currentDate);
                currentDate.date = (currentDate.date + 1);
            };
        }
        public function enableUntilDate():void{
            var date:Date = this.untilDate;
            if (date == null){
                date = new Date();
            };
            var now:Date = SynctimeService.getInstance().getTime();
            now.hours = 0;
            now.minutes = 0;
            now.seconds = 0;
            now.milliseconds = 0;
            var currentDate:Date = new Date();
            currentDate.setTime(this.currentMonth.getTime());
            while ((((this.currentMonth.month == currentDate.month)) && ((currentDate.time <= date.time)))) {
                if (currentDate.time >= now.time){
                    this.addHeatMap(currentDate);
                };
                currentDate.date = (currentDate.date + 1);
            };
        }
        public function refresh():void{
            this.clearHeatMap();
            this.month.text = StreamingTimeFormatter.MONTH_FORMAT.format(this.currentMonth);
            this.matrix.createCalendar(this.currentMonth);
            if (this._isEnableCurrentMonth){
                this.enableCurrentMonth();
            };
            if (this._isEnableUntilDate){
                this.enableUntilDate();
            };
        }
        public function clearHeatMap():void{
            this.matrix.clearHeatMap();
        }
        private function selectDateHandler(date:Date):void{
            this._selectDate = date;
            if (this._onSelectDate != null){
                this._onSelectDate(date);
            };
        }
        public function addHeatMap(date:Date):void{
            this.matrix.addHeatMap(date);
        }
        public function set onSelectDate(value:Function):void{
            this._onSelectDate = value;
        }
        public function set onSelectMonth(value:Function):void{
            this._onSelectMonth = value;
        }
        public function get isEnableCurrentMonth():Boolean{
            return (this._isEnableCurrentMonth);
        }
        public function set isEnableCurrentMonth(value:Boolean):void{
            this._isEnableCurrentMonth = value;
        }
        public function get isEnableUntilDate():Boolean{
            return (this._isEnableUntilDate);
        }
        public function set isEnableUntilDate(value:Boolean):void{
            this._isEnableUntilDate = value;
        }
        public function get untilDate():Date{
            return (this._untilDate);
        }
        public function set untilDate(value:Date):void{
            this._untilDate = value;
        }
        public function get selectDate():Date{
            return (this._selectDate);
        }
        public function set selectDate(value:Date):void{
            this._selectDate = value;
        }

    }
}//package com.settrade.streaming5.page.component.calendar 
﻿package com.settrade.streaming5.page.component.calendar {
    import fl.controls.*;
    import flash.display.*;
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import com.settrade.streaming5.service.*;

    public class CalendarTime extends MovieClip {

        public var calendar:Calendar;
        public var hourSlider:Slider;
        public var minuteSlider:Slider;
        public var secondSlider:Slider;
        public var closeBtn:Button;
        protected var _date:Date;
        protected var _onChangeDateTime:Function;
        protected var _onClose:Function;

        public function CalendarTime(){
            super();
            this._date = new Date();
            this.calendar.onSelectDate = this.onCalendarSelect;
            this.hourSlider.addEventListener(Event.CHANGE, this.onChangeHour);
            this.minuteSlider.addEventListener(Event.CHANGE, this.onChangeMinute);
            this.secondSlider.addEventListener(Event.CHANGE, this.onChangeSecond);
            this.closeBtn.setStyle("textFormat", ThemeManager.defaultButtonFont);
            this.closeBtn.setStyle("embedFonts", true);
            this.closeBtn.setStyle("textColor", 0xFFFFFF);
            this.closeBtn.addEventListener(MouseEvent.CLICK, this.onCloseHandler);
            this.clear();
        }
        public function clear():void{
            this._date = SynctimeService.getInstance().getTime();
            this.refresh();
        }
        private function onCloseHandler(e:MouseEvent):void{
            if (this._onClose != null){
                this._onClose();
            };
        }
        private function onChangeHour(e:Event):void{
            this._date.hours = this.hourSlider.value;
            this.notifyChangeDateTime();
        }
        private function onChangeMinute(e:Event):void{
            this._date.minutes = this.minuteSlider.value;
            this.notifyChangeDateTime();
        }
        private function onChangeSecond(e:Event):void{
            this._date.seconds = this.secondSlider.value;
            this.notifyChangeDateTime();
        }
        private function onCalendarSelect(date:Date):void{
            this._date.fullYear = date.fullYear;
            this._date.month = date.month;
            this._date.date = date.date;
            this.notifyChangeDateTime();
        }
        private function notifyChangeDateTime():void{
            if (this.onChangeDateTime != null){
                this.onChangeDateTime(this._date);
            };
        }
        public function get date():Date{
            return (this._date);
        }
        public function set date(value:Date):void{
            this._date = value;
            this.refresh();
        }
        public function get untilDate():Date{
            return (this.calendar.untilDate);
        }
        public function set untilDate(value:Date):void{
            this.calendar.untilDate = value;
            if (value == null){
                this.calendar.isEnableCurrentMonth = true;
                this.calendar.isEnableUntilDate = false;
            } else {
                this.calendar.isEnableCurrentMonth = false;
                this.calendar.isEnableUntilDate = true;
            };
        }
        public function get onChangeDateTime():Function{
            return (this._onChangeDateTime);
        }
        public function set onChangeDateTime(value:Function):void{
            this._onChangeDateTime = value;
        }
        public function get onClose():Function{
            return (this._onClose);
        }
        public function set onClose(value:Function):void{
            this._onClose = value;
        }
        public function refresh():void{
            this.refreshCalendar();
            this.refreshSlider();
        }
        private function refreshSlider():void{
            this.hourSlider.value = this._date.hours;
            this.minuteSlider.value = this._date.minutes;
            this.secondSlider.value = this._date.seconds;
        }
        private function refreshCalendar():void{
            this.calendar.setCurrentMonth(this._date);
            this.calendar.setActiveDate(this._date);
        }

    }
}//package com.settrade.streaming5.page.component.calendar 
﻿package com.settrade.streaming5.page.component.calendar {
    import flash.display.*;
    import com.settrade.streaming5.utils.*;

    public class CalendarMatrix extends MovieClip {

        const PADDING:Number = 1;
        const LABEL_WIDTH:Number = 23;
        const LABEL_HEIGHT:Number = 18;

        public var background:MovieClip;
        private var labelMatrix:Array;
        private var activeLabel:CalendarDateLabel;
        private var _onSelectDate:Function;

        public function CalendarMatrix(){
            super();
            this.initDateLabel();
            this.activeLabel = null;
        }
        private function initDateLabel():void{
            var j:int;
            var label:CalendarDateLabel;
            this.labelMatrix = new Array(7);
            var i:int;
            while (i < 7) {
                this.labelMatrix[i] = new Array(6);
                j = 0;
                while (j < 6) {
                    label = new CalendarDateLabel();
                    this.adjustLabelPosition(i, j, label);
                    addChild(label);
                    this.labelMatrix[i][j] = label;
                    this.labelMatrix[i][j].onActive = this.onActiveDate;
                    j++;
                };
                i++;
            };
        }
        private function adjustLabelPosition(x:int, y:int, label:MovieClip):void{
            label.x = (x * (this.LABEL_WIDTH + this.PADDING));
            label.y = (y * (this.LABEL_HEIGHT + this.PADDING));
        }
        public function createCalendar(date:Date):void{
            var j:int;
            this.activeLabel = null;
            var calendarArray:Array = CalendarUtil.getCalendarArray(date);
            var i:int;
            while (i < calendarArray.length) {
                j = 0;
                while (j < calendarArray[i].length) {
                    this.labelMatrix[i][j].disabled();
                    this.labelMatrix[i][j].inactive();
                    this.labelMatrix[i][j].date = calendarArray[i][j];
                    j++;
                };
                i++;
            };
            i = 0;
            while (i < calendarArray.length) {
                j = calendarArray[i].length;
                while (j < this.labelMatrix[i].length) {
                    this.labelMatrix[i][j].disabled();
                    this.labelMatrix[i][j].inactive();
                    this.labelMatrix[i][j].hide();
                    this.labelMatrix[i][j].date = null;
                    j++;
                };
                i++;
            };
            this.setBackgroundSize(calendarArray[0].length);
        }
        private function setBackgroundSize(row:int):void{
            this.background.height = ((this.LABEL_HEIGHT + this.PADDING) * row);
        }
        public function setActiveDate(date:Date):void{
            var j:*;
            var i:* = 0;
            while (i < this.labelMatrix.length) {
                j = 0;
                while (j < this.labelMatrix[i].length) {
                    if (CalendarUtil.isEqualDate(this.labelMatrix[i][j].date, date)){
                        this.labelMatrix[i][j].active();
                    };
                    j++;
                };
                i++;
            };
        }
        private function onActiveDate(label:CalendarDateLabel):void{
            if (((!((this.activeLabel == null))) && (!((this.activeLabel == label))))){
                this.activeLabel.inactive();
            };
            this.activeLabel = label;
            if (this._onSelectDate != null){
                this._onSelectDate(label.date);
            };
        }
        public function set onSelectDate(value:Function):void{
            this._onSelectDate = value;
        }
        public function clearHeatMap():void{
            var j:int;
            var i:int;
            while (i < this.labelMatrix.length) {
                j = 0;
                while (j < this.labelMatrix[i].length) {
                    if (this.labelMatrix[i][j].date == null){
                        this.labelMatrix[i][j].hide();
                    } else {
                        this.labelMatrix[i][j].disabled();
                        this.labelMatrix[i][j].clearHeat();
                    };
                    j++;
                };
                i++;
            };
        }
        public function addHeatMap(date:Date):void{
            var j:int;
            var i:int;
            while (i < this.labelMatrix.length) {
                j = 0;
                while (j < this.labelMatrix[i].length) {
                    if (((((((!((this.labelMatrix[i][j].date == null))) && ((date.fullYear == this.labelMatrix[i][j].date.fullYear)))) && ((date.month == this.labelMatrix[i][j].date.month)))) && ((date.date == this.labelMatrix[i][j].date.date)))){
                        this.labelMatrix[i][j].addHeat();
                    };
                    j++;
                };
                i++;
            };
        }

    }
}//package com.settrade.streaming5.page.component.calendar 
﻿package com.settrade.streaming5.page.component.chart {
    import flash.events.*;
    import com.fusioncharts.components.*;
    import com.events.*;

    public class StreamingFusionChart extends FusionCharts {

        const EMPTY_XML;

        var alreadyRendered:Boolean;
        var syncDataXml:XML;

        public function StreamingFusionChart(){
            this.EMPTY_XML = <chart/>
            ;
            super();
            this.alreadyRendered = false;
            addEventListener(FCEvent.FCRenderEvent, this.onRender);
        }
        private function onRender(event:Event):void{
            this.alreadyRendered = true;
            this.syncRender();
        }
        private function syncRender():void{
            if (this.alreadyRendered){
                this.FCDataXML = this.syncDataXml;
                this.FCRender();
            };
        }
        public function syncSetData(xml:XML):void{
            this.syncDataXml = xml;
            this.syncRender();
        }

    }
}//package com.settrade.streaming5.page.component.chart 
﻿package com.settrade.streaming5.page.component.chart.quote {
    import flash.display.*;
    import com.settrade.streaming5.utils.chart.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.page.component.chart.*;

    public class QuoteIntradayDisplayValueChart extends MovieClip {

        private static var logger:Logger = new Logger(prototype.constructor);

        var chart:StreamingFusionChart;
        var generator:QuoteIntradayDisplayValueChartXmlGenerator;
        var isInitChart:Boolean;
        var _width:Number;
        var _height:Number;

        public function QuoteIntradayDisplayValueChart(width:Number=600, height:Number=130){
            super();
            this._width = width;
            this._height = height;
            this.isInitChart = false;
            this.generator = new QuoteIntradayDisplayValueChartXmlGenerator(this._width);
        }
        private function initChart():void{
            if (!this.isInitChart){
                this.chart = new StreamingFusionChart();
                this.chart.FCChartType = "Area2D";
                this.chart.width = this._width;
                this.chart.height = this._height;
                this.chart.x = 0;
                this.chart.y = 0;
                this.chart.FCDataXML = this.generator.createEmptyChart();
                this.chart.FCRender();
                this.addChild(this.chart);
            };
            this.isInitChart = true;
        }
        public function clear():void{
            if (this.isInitChart){
                this.chart.syncSetData(this.generator.createEmptyChart());
            };
        }
        public function createChartFromData(intradayChartResponseMessage:IntradayChartResponseMessage){
            this.initChart();
            this.chart.syncSetData(this.generator.createChartFromIntradayChartResponseMessage(intradayChartResponseMessage));
        }
        override public function set width(value:Number):void{
            this._width = value;
            this.generator.width = this._width;
        }
        override public function set height(value:Number):void{
            this._height = value;
        }

    }
}//package com.settrade.streaming5.page.component.chart.quote 
﻿package com.settrade.streaming5.page.component.datepicker {
    import fl.controls.*;
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import flash.geom.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.dispatcher.*;
    import com.settrade.streaming5.message.control.*;

    public class DateTimePicker extends MovieClip {

        public var calendar:CalendarTime;
        public var dateText:TextInput;
        public var button:SimpleButton;
        protected var _selectDate:Date;
        protected var _onSelectDate:Function;
        protected var _untilDate:Date;

        public function DateTimePicker(){
            super();
            this.dateText.setStyle("textFormat", ThemeManager.defaultTextInputFont);
            this.dateText.setStyle("textPadding", 1);
            this.dateText.maxChars = 19;
            this.button.addEventListener(MouseEvent.CLICK, this.onClick);
            this.dateText.addEventListener(Event.CHANGE, this.onEditText);
            this.calendar.visible = false;
            this.clear();
        }
        private function onEditText(e:Event):void{
            if (this.isValidText()){
                this._selectDate = this.getDateFromTextBox();
                this.calendar.date = this._selectDate;
            } else {
                this._selectDate = null;
            };
        }
        public function clear():void{
            this.clearValue();
            this.untilDate = null;
        }
        public function clearValue():void{
            var clearTime:Date = SynctimeService.getInstance().getTime();
            clearTime.hours = 23;
            clearTime.minutes = 59;
            clearTime.seconds = 0;
            this._selectDate = clearTime;
            this.setDateText();
        }
        public function isValidText():Boolean{
            return ((this.dateText.text == StreamingTimeFormatter.DATE_TIME_FORMAT.format(this.getDateFromTextBox())));
        }
        private function getDateFromTextBox():Date{
            var dateArray:Array;
            var timeArray:Array;
            var day:int;
            var month:int;
            var year:int;
            var hour:int;
            var minute:int;
            var second:int;
            var text:String = this.dateText.text;
            var textArray:Array = text.split(" ");
            if (textArray.length == 2){
                dateArray = textArray[0].split("/");
                timeArray = textArray[1].split(":");
                if ((((dateArray.length == 3)) && ((timeArray.length == 3)))){
                    day = int(dateArray[0]);
                    month = (int(dateArray[1]) - 1);
                    year = int(dateArray[2]);
                    hour = int(timeArray[0]);
                    minute = int(timeArray[1]);
                    second = int(timeArray[2]);
                    return (new Date(year, month, day, hour, minute, second, 0));
                };
            };
            return (new Date());
        }
        private function onClick(e:MouseEvent):void{
            var message:PopupStateChangeMessage;
            if (!this.calendar.visible){
                if (this._selectDate == null){
                    this.clearValue();
                };
                this.calendar.visible = true;
                this.calendar.date = this._selectDate;
                this.calendar.onChangeDateTime = this.onSelectDateHandler;
                this.calendar.onClose = this.onCloseHandler;
                this.arrangePosition();
                stage.addEventListener(MouseEvent.CLICK, this.onStageClick);
                message = new PopupStateChangeMessage(PopupState.SHOWING, this.calendar);
                MessageDispatcher.getInstance().notifyControlMessage(message);
            } else {
                this.close();
            };
        }
        private function arrangePosition():void{
            var bound:Rectangle = this.calendar.getBounds(stage);
            if (bound.y < 0){
                this.calendar.y = (this.button.y + this.button.height);
            } else {
                if ((bound.y + bound.height) > stage.stageHeight){
                    this.calendar.y = (this.button.y - this.calendar.height);
                };
            };
        }
        private function onStageClick(e:MouseEvent):void{
            if ((e.target is DisplayObject)){
                if (this.contains(DisplayObject(e.target))){
                    return;
                };
            };
            this.close();
        }
        private function close():void{
            this.calendar.visible = false;
            stage.removeEventListener(MouseEvent.CLICK, this.onStageClick);
            this.calendar.onChangeDateTime = null;
            this.calendar.onClose = null;
            var message:PopupStateChangeMessage = new PopupStateChangeMessage(PopupState.HIDING, this.calendar);
            MessageDispatcher.getInstance().notifyControlMessage(message);
        }
        private function onCloseHandler():void{
            this.close();
        }
        private function setDateText():void{
            this.dateText.text = StreamingTimeFormatter.DATE_TIME_FORMAT.format(this._selectDate);
        }
        private function onSelectDateHandler(date:Date):void{
            this._selectDate = date;
            this.setDateText();
            if (this._onSelectDate != null){
                this._onSelectDate(date);
            };
        }
        public function get selectDate():Date{
            return (this._selectDate);
        }
        public function set selectDate(value:Date):void{
            this._selectDate = value;
        }
        public function set onSelectDate(value:Function):void{
            this._onSelectDate = value;
        }
        public function get untilDate():Date{
            return (this._untilDate);
        }
        public function set untilDate(value:Date):void{
            this._untilDate = value;
            this.calendar.untilDate = value;
        }

    }
}//package com.settrade.streaming5.page.component.datepicker 
﻿package com.settrade.streaming5.page.component.datepicker {
    import fl.controls.*;
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import flash.geom.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.dispatcher.*;
    import com.settrade.streaming5.message.control.*;

    public class DatePicker extends MovieClip {

        public var calendar:Calendar;
        public var dateText:TextInput;
        public var button:SimpleButton;
        protected var _selectDate:Date;
        protected var _onSelectDate:Function;
        protected var _untilDate:Date;

        public function DatePicker(){
            super();
            this.dateText.setStyle("textFormat", ThemeManager.defaultTextInputFont);
            this.dateText.setStyle("textPadding", 1);
            this.dateText.maxChars = 10;
            this.button.addEventListener(MouseEvent.CLICK, this.onClick);
            this.dateText.addEventListener(Event.CHANGE, this.onEditText);
            this.calendar.visible = false;
            this.clear();
        }
        private function onEditText(e:Event):void{
            var message:PopupStateChangeMessage;
            if (this.calendar.visible){
                this.calendar.visible = false;
                stage.removeEventListener(MouseEvent.CLICK, this.onStageClick);
                this.calendar.onSelectDate = null;
                message = new PopupStateChangeMessage(PopupState.HIDING, this.calendar);
                MessageDispatcher.getInstance().notifyControlMessage(message);
            };
            if (this.isValidText()){
                this._selectDate = this.getDateFromTextBox();
            } else {
                this._selectDate = null;
            };
        }
        public function clear():void{
            this._selectDate = SynctimeService.getInstance().getTime();
            this.setDateText();
        }
        public function isValidText():Boolean{
            return ((this.dateText.text == StreamingTimeFormatter.DATE_SLASH_FORMAT.format(this.getDateFromTextBox())));
        }
        private function getDateFromTextBox():Date{
            var day:int;
            var month:int;
            var year:int;
            var text:String = this.dateText.text;
            var textArray:Array = text.split("/");
            if (textArray.length == 3){
                day = int(textArray[0]);
                month = (int(textArray[1]) - 1);
                year = int(textArray[2]);
                return (new Date(year, month, day, 0, 0, 0, 0));
            };
            return (new Date());
        }
        private function onClick(e:MouseEvent):void{
            var message:PopupStateChangeMessage;
            if (!this.calendar.visible){
                if (this._selectDate == null){
                    this.clear();
                };
                this.calendar.visible = true;
                this.calendar.setCurrentMonth(this._selectDate);
                this.calendar.setActiveDate(this._selectDate);
                this.calendar.onSelectDate = this.onSelectDateHandler;
                this.arrangePosition();
                stage.addEventListener(MouseEvent.CLICK, this.onStageClick);
                message = new PopupStateChangeMessage(PopupState.SHOWING, this.calendar);
                MessageDispatcher.getInstance().notifyControlMessage(message);
            } else {
                this.calendar.visible = false;
                stage.removeEventListener(MouseEvent.CLICK, this.onStageClick);
                this.calendar.onSelectDate = null;
                message = new PopupStateChangeMessage(PopupState.HIDING, this.calendar);
                MessageDispatcher.getInstance().notifyControlMessage(message);
            };
        }
        private function arrangePosition():void{
            var bound:Rectangle = this.calendar.getBounds(stage);
            if (bound.y < 0){
                this.calendar.y = this.button.y;
            } else {
                if ((bound.y + bound.height) > stage.stageHeight){
                    this.calendar.y = (this.button.y - this.calendar.height);
                };
            };
        }
        private function onStageClick(e:MouseEvent):void{
            if ((e.target is DisplayObject)){
                if (((this.calendar.contains(DisplayObject(e.target))) || ((e.target == this.button)))){
                    return;
                };
            };
            this.calendar.visible = false;
            stage.removeEventListener(MouseEvent.CLICK, this.onStageClick);
            this.calendar.onSelectDate = null;
            var message:PopupStateChangeMessage = new PopupStateChangeMessage(PopupState.HIDING, this.calendar);
            MessageDispatcher.getInstance().notifyControlMessage(message);
        }
        private function setDateText():void{
            this.dateText.text = StreamingTimeFormatter.DATE_SLASH_FORMAT.format(this._selectDate);
        }
        private function onSelectDateHandler(date:Date):void{
            this.calendar.visible = false;
            this._selectDate = date;
            this.setDateText();
            stage.removeEventListener(MouseEvent.CLICK, this.onStageClick);
            this.calendar.onSelectDate = null;
            if (this._onSelectDate != null){
                this._onSelectDate(date);
            };
            var message:PopupStateChangeMessage = new PopupStateChangeMessage(PopupState.HIDING, this.calendar);
            MessageDispatcher.getInstance().notifyControlMessage(message);
        }
        public function get selectDate():Date{
            return (this._selectDate);
        }
        public function set selectDate(value:Date):void{
            this._selectDate = value;
        }
        public function set onSelectDate(value:Function):void{
            this._onSelectDate = value;
        }
        public function get untilDate():Date{
            return (this._untilDate);
        }
        public function set untilDate(value:Date):void{
            this._untilDate = value;
            this.calendar.untilDate = value;
            if (value == null){
                this.calendar.isEnableCurrentMonth = true;
                this.calendar.isEnableUntilDate = false;
            } else {
                this.calendar.isEnableCurrentMonth = false;
                this.calendar.isEnableUntilDate = true;
            };
        }

    }
}//package com.settrade.streaming5.page.component.datepicker 
﻿package com.settrade.streaming5.page.component.marketticker {
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.page.component.dynamiclabel.*;
    import __AS3__.vec.*;
    import flash.text.*;

    public class MarketTickerRow extends MovieClip {

        const SYMBOL_WIDTH_RATIO:Number = 0.4;
        const SIDE_WIDTH_RATIO:Number = 0.05;
        const VOLUME_WIDTH_RATIO:Number = 0.35;
        const PRICE_WIDTH_RATIO:Number = 0.2;
        const DERIVATIVES_SYMBOL_WIDTH_RATIO:Number = 0.55;
        const DERIVATIVES_VOLUME_WIDTH_RATIO:Number = 0.2;

        protected var _symbol:DynamicLabel;
        protected var _side:DynamicLabel;
        protected var _volume:DynamicLabel;
        protected var _price:DynamicLabel;

        public function MarketTickerRow(x:Number, y:Number, width:Number, height:Number, textFormat:TextFormat=null, isDerivatives:Boolean=false){
            var symbolWidth:Number;
            var volumeWidth:Number;
            super();
            var rowWidth:Number = (width - 10);
            var rowHeight:Number = height;
            if (isDerivatives){
                symbolWidth = (rowWidth * this.DERIVATIVES_SYMBOL_WIDTH_RATIO);
                volumeWidth = (rowWidth * this.DERIVATIVES_VOLUME_WIDTH_RATIO);
            } else {
                symbolWidth = (rowWidth * this.SYMBOL_WIDTH_RATIO);
                volumeWidth = (rowWidth * this.VOLUME_WIDTH_RATIO);
            };
            var sideWidth:Number = (rowWidth * this.SIDE_WIDTH_RATIO);
            var priceWidth:Number = (rowWidth * this.PRICE_WIDTH_RATIO);
            var symbolData:DynamicData = new DynamicData(DynamicData.TYPE_LABEL, "");
            symbolData.textAlign = TextFormatAlign.LEFT;
            this._symbol = new DynamicLabel(symbolData, textFormat);
            this._symbol.width = symbolWidth;
            this._symbol.height = rowHeight;
            this._symbol.x = 0;
            this._symbol.y = 0;
            this._symbol.setTextAlign(TextFormatAlign.LEFT);
            var sideData:DynamicData = new DynamicData(DynamicData.TYPE_LABEL, "");
            sideData.textAlign = TextFormatAlign.CENTER;
            this._side = new DynamicLabel(sideData, textFormat);
            this._side.width = sideWidth;
            this._side.height = rowHeight;
            this._side.x = (this._symbol.x + this._symbol.width);
            this._side.y = 0;
            this._side.setTextAlign(TextFormatAlign.CENTER);
            var volumeData:DynamicData = new DynamicData(DynamicData.TYPE_LABEL, "");
            volumeData.textAlign = TextFormatAlign.RIGHT;
            this._volume = new DynamicLabel(volumeData, textFormat);
            this._volume.width = volumeWidth;
            this._volume.height = rowHeight;
            this._volume.x = (this._side.x + this._side.width);
            this._volume.y = 0;
            this._volume.setTextAlign(TextFormatAlign.RIGHT);
            var priceData:DynamicData = new DynamicData(DynamicData.TYPE_LABEL, "");
            priceData.textAlign = TextFormatAlign.RIGHT;
            this._price = new DynamicLabel(priceData, textFormat);
            this._price.width = priceWidth;
            this._price.height = rowHeight;
            this._price.x = (this._volume.x + this._volume.width);
            this._price.y = 0;
            this._price.setTextAlign(TextFormatAlign.RIGHT);
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
            this.addChild(this._symbol);
            this.addChild(this._side);
            this.addChild(this._volume);
            this.addChild(this._price);
            this.scaleX = 1;
            this.scaleY = 1;
        }
        public function clear():void{
            this._symbol.loadStaticData(false, "");
            this._side.loadStaticData(false, "");
            this._volume.loadStaticData(false, "");
            this._price.loadStaticData(false, "");
            this.graphics.clear();
        }
        public function setRow(symbol:String, side:OrderSide, volume:Number, price:Number, trend:Trend, priceDigit:int=2){
            this.setSymbol(symbol, trend);
            this.setSide(side);
            this.setVolume(volume, side);
            this.setPrice(price, trend, priceDigit);
            this.drawTrend(trend);
        }
        public function setSymbol(symbol:String, trend:Trend=null):void{
            if (trend == null){
                this._symbol.loadStaticData(false, symbol, this.getColorByTrend(Trend.NO_DATA));
            } else {
                this._symbol.loadStaticData(false, symbol, this.getColorByTrend(trend));
            };
            this._symbol.setTextAlign(TextFormatAlign.LEFT);
        }
        public function setSide(side:OrderSide):void{
            if (side == OrderSide.BUY){
                this._side.loadStaticData(false, this.orderSideToString(side), ThemeManager.BUY_VOLUME_COLOR);
            } else {
                if (side == OrderSide.SELL){
                    this._side.loadStaticData(false, this.orderSideToString(side), ThemeManager.SELL_VOLUME_COLOR);
                } else {
                    this._side.loadStaticData(false, this.orderSideToString(side), ThemeManager.LABEL_COLOR);
                };
            };
            this._side.setTextAlign(TextFormatAlign.CENTER);
        }
        public function setVolume(volume:Number, side:OrderSide=null):void{
            if (isNaN(volume)){
                this._volume.loadStaticData(false, "");
            } else {
                if (side == OrderSide.BUY){
                    this._volume.loadStaticData(false, StreamingNumberFormatter.formatVolume(volume), ThemeManager.BUY_VOLUME_COLOR);
                } else {
                    if (side == OrderSide.SELL){
                        this._volume.loadStaticData(false, StreamingNumberFormatter.formatVolume(volume), ThemeManager.SELL_VOLUME_COLOR);
                    } else {
                        this._volume.loadStaticData(false, StreamingNumberFormatter.formatVolume(volume), ThemeManager.LABEL_COLOR);
                    };
                };
            };
        }
        public function setPrice(price:Number, trend:Trend=null, priceDigit:int=2):void{
            if (isNaN(price)){
                this._price.loadStaticData(false, "");
            } else {
                if (trend == null){
                    this._price.loadStaticData(false, StreamingNumberFormatter.formatPriceWithPrecision(price, priceDigit), this.getColorByTrend(Trend.NO_DATA));
                } else {
                    this._price.loadStaticData(false, StreamingNumberFormatter.formatPriceWithPrecision(price, priceDigit), this.getColorByTrend(trend));
                };
            };
        }
        private function getColorByTrend(trend:Trend):int{
            if (trend.isUp()){
                return (ThemeManager.GAINER_COLOR);
            };
            if (trend.isDown()){
                return (ThemeManager.LOSER_COLOR);
            };
            if (trend.isNoChange()){
                return (ThemeManager.UNCHANGED_COLOR);
            };
            return (ThemeManager.LABEL_COLOR);
        }
        private function orderSideToString(side:OrderSide):String{
            if (side == OrderSide.BUY){
                return ("B");
            };
            if (side == OrderSide.SELL){
                return ("S");
            };
            return ("");
        }
        private function drawTrend(trend:Trend=null):void{
            var vertices:Vector.<Number> = new Vector.<Number>();
            this.graphics.clear();
            var xOffset:int = (this._price.x + this._price.width);
            var yOffset:int = ((this.height / 2) - 7);
            if (trend != null){
                if (trend.isUp()){
                    vertices.push((xOffset + 0), (yOffset + 6));
                    vertices.push((xOffset + 4.5), (yOffset + 0));
                    vertices.push((xOffset + 9), (yOffset + 6));
                    this.graphics.beginFill(ThemeManager.GAINER_COLOR);
                    this.graphics.drawTriangles(vertices);
                    this.graphics.endFill();
                } else {
                    if (trend.isDown()){
                        vertices.push((xOffset + 0), (yOffset + 0));
                        vertices.push((xOffset + 4.5), (yOffset + 6));
                        vertices.push((xOffset + 9), (yOffset + 0));
                        this.graphics.beginFill(ThemeManager.LOSER_COLOR);
                        this.graphics.drawTriangles(vertices);
                        this.graphics.endFill();
                    };
                };
            };
        }
        private function setText(textField:TextField, text:String):void{
            textField.text = text;
        }
        private function setColor(textField:TextField, color:int):void{
            textField.textColor = color;
        }
        private function setAlign(textField:TextField, align:String):void{
            var format:TextFormat = textField.getTextFormat();
            format.align = align;
            textField.defaultTextFormat = format;
            textField.autoSize = TextFieldAutoSize.NONE;
        }
        public function get symbol():DynamicLabel{
            return (this._symbol);
        }

    }
}//package com.settrade.streaming5.page.component.marketticker 
﻿package com.settrade.streaming5.page.component.marketticker {
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import com.settrade.streaming5.widget.config.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.message.feed.*;
    import flash.utils.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.page.*;
    import com.settrade.log.logger.*;

    public class MarketTicker extends StreamingMovieClip {

        private static var logger:Logger = new Logger(prototype.constructor);

        const ROW_PADDING:Number = 5;

        protected var _rowList:Array;
        protected var _rowWidth:Number;
        protected var _rowHeight:Number;
        protected var _rowHighlightHeight:Number;
        protected var _rowPitch:Number;
        protected var _rowNum:int;
        protected var _colNum:int;
        protected var _totalRow:int;
        protected var _instrumentTypesArray:Array;
        protected var _tickerRowClass:Class;
        protected var _tickerFilter:TickerFilter;
        protected var _isTickerSum:Boolean = false;
        protected var _onMarketTickerRowClickCallback:Function = null;
        var pointer:int = 0;
        var marketTickerService:MarketTickerService;

        public function MarketTicker(rowNum:int=15){
            this._rowList = new Array();
            this._instrumentTypesArray = new Array();
            this.marketTickerService = MarketTickerService.getInstance();
            super();
            logger.debug("Market Ticker version 1");
        }
        public function initWithRowNumber(rowNum:int=15, colNum:int=1, rowWidth:Number=NaN, isDerivatives:Boolean=false){
            this.initWithRowNumberAndSpecificRow(MarketTickerRow, rowNum, colNum, rowWidth, isDerivatives);
        }
        public function initWithRowNumberAndSpecificRow(tickerRowClass:Class, rowNum:int=15, colNum:int=1, rowWidth:Number=NaN, isDerivatives:Boolean=false){
            var j:int;
            var x:Number;
            var y:Number;
            var row:*;
            if (rowWidth != NaN){
                this._rowWidth = rowWidth;
            } else {
                this._rowWidth = (this.width / colNum);
            };
            this._rowNum = rowNum;
            this._colNum = colNum;
            this._totalRow = (this._rowNum * this._colNum);
            if (colNum == 1){
                this._rowPitch = 0;
            } else {
                this._rowPitch = ((this.width - (this._rowWidth * this._colNum)) / (this._colNum - 1));
            };
            var extraHeight:* = (this._rowNum * 8);
            this._rowHeight = ((this.height / this._rowNum) + (extraHeight / this._rowNum));
            this._rowHighlightHeight = (this._rowHeight - 8);
            var i:int;
            while (i < this._colNum) {
                j = 0;
                while (j < this._rowNum) {
                    x = ((i * this._rowWidth) + (i * this._rowPitch));
                    y = -4;
                    if (j > 0){
                        y = ((this._rowList[(j - 1)].y + this._rowHeight) - 8);
                    };
                    row = new tickerRowClass(x, y, this._rowWidth, this._rowHeight, null, isDerivatives);
                    row.addEventListener(MouseEvent.CLICK, this.onTickerRowMouseClick);
                    this._rowList.push(row);
                    addChild(row);
                    j++;
                };
                i++;
            };
            this.scaleX = 1;
            this.scaleY = 1;
            this._tickerRowClass = tickerRowClass;
            this._tickerFilter = new TickerFilter();
        }
        public function setMarketTickerRowOnClickCallback(callback:Function):void{
            this._onMarketTickerRowClickCallback = callback;
        }
        public function updateTickerConfig(tickerConfig:TickerConfig):void{
            this._isTickerSum = tickerConfig.isTickerSum;
            logger.info(("update ticker config ticker sum to " + this._isTickerSum));
            this._tickerFilter.loadConfig(tickerConfig);
            this.clear();
        }
        override public function startService():void{
            if (this._isTickerSum){
                this.marketTickerService.reRegistMarketTickerSum(this);
            } else {
                this.marketTickerService.reRegistMarketTicker(this);
            };
            addEventListener(MessageReceiveEvent.MARKET_TICKER, this.onReceiveMarketTicker);
            if (this._tickerFilter != null){
                this._tickerFilter.startService();
            };
            logger.info("Start Service");
        }
        override public function stopService():void{
            super.stopService();
            if (this._tickerFilter != null){
                this._tickerFilter.stopService();
            };
            this.marketTickerService.unregistMarketTicker(this);
            removeEventListener(MessageReceiveEvent.MARKET_TICKER, this.onReceiveMarketTicker);
        }
        public function setTickerInstrumentTypes(instrumentTypesArray:Array):void{
            this._instrumentTypesArray = instrumentTypesArray;
        }
        private function clear():void{
            var i:* = 0;
            while (i < this._totalRow) {
                this._rowList[i].clear();
                i++;
            };
            this.pointer = 0;
            this.graphics.clear();
        }
        private function onReceiveMarketTicker(e:MessageReceiveEvent):void{
            var message:MarketTickerFeedMessage = (e.message as MarketTickerFeedMessage);
            if ((((((this._instrumentTypesArray.indexOf(message.instrumentType) > -1)) && (this._tickerFilter.isValidTicker(message)))) && ((this._isTickerSum == message.isSum)))){
                if (this.isClass(this._tickerRowClass, "MarketTickerWithPChangeRow")){
                    this._rowList[this.pointer].setRow(message.instrumentId, message.orderSide, message.volume, message.price, message.change, message.trend, message.priceDigit);
                } else {
                    this._rowList[this.pointer].setRow(message.instrumentId, message.orderSide, message.volume, message.price, message.trend, message.priceDigit);
                };
                this.drawHighlight(this.pointer);
                this.pointer = ((this.pointer + 1) % this._totalRow);
            };
        }
        private function onTickerRowMouseClick(e:MouseEvent):void{
            var target:* = e.target;
            while (!((target is this._tickerRowClass))) {
                target = target.parent;
            };
            if (this._onMarketTickerRowClickCallback != null){
                this._onMarketTickerRowClickCallback(target.symbol.text);
            };
        }
        private function drawHighlight(rowIndex:int):void{
            var colIndex:int;
            var x:int;
            var y:int;
            var width:Number;
            var height:Number;
            if (rowIndex < this._totalRow){
                colIndex = Math.floor((rowIndex / this._rowNum));
                this.graphics.clear();
                this.graphics.beginFill(0xFFFFFF, 0.2);
                x = 0;
                y = ((this._rowHighlightHeight * (rowIndex % this._rowNum)) - 2);
                width = this._rowWidth;
                height = this._rowHighlightHeight;
                if (colIndex == 0){
                    x = 0;
                    width = (this._rowWidth + (this._rowPitch / 2));
                } else {
                    x = (this._rowList[rowIndex].x - (this._rowPitch / 2));
                    width = (this._rowWidth + this._rowPitch);
                };
                this.graphics.drawRect(x, y, width, height);
                this.graphics.endFill();
            };
        }
        private function getRowHeight():Number{
            if (this._rowList.length > 0){
                return (this._rowList[0].height);
            };
            return (0);
        }
        private function getRowWidth():Number{
            if (this._rowList.length > 0){
                return (this._rowList[0].width);
            };
            return (0);
        }
        private function isClass(inputClass, name:String):Boolean{
            return ((getQualifiedClassName(inputClass).indexOf(name) > -1));
        }

    }
}//package com.settrade.streaming5.page.component.marketticker 
﻿package com.settrade.streaming5.page.component.instrumentticker {
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.message.feed.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.page.*;
    import com.settrade.log.logger.*;
    import flash.globalization.*;

    public class InstrumentTicker extends StreamingMovieClip {

        public static const MOST_RECENT_MODE:int = 1;
        public static const LEAST_RECENT_MODE:int = 2;

        private static var logger:Logger = new Logger(prototype.constructor);

        protected var _rowList:Array;
        protected var _rowWidth:int;
        protected var _rowHeight:int;
        protected var _rowHighlightHeight:int;
        protected var _rowNum:int;
        protected var _colNum:int;
        protected var _totalRow:int;
        protected var _currentSymbol:String;
        protected var _isStartService:Boolean = false;
        protected var _mode:int;
        protected var _lastSequenceId:int;
        protected var _holderWidth:Number;
        protected var _holderHeight:Number;
        var pointer:int = 0;
        var instrumentTickerService:InstrumentTickerService;

        public function InstrumentTicker(holder:MovieClip){
            this._rowList = new Array();
            this.instrumentTickerService = InstrumentTickerService.getInstance();
            super();
            if (holder != null){
                this.x = holder.x;
                this.y = holder.y;
                this.width = holder.width;
                this.height = holder.height;
                this._holderWidth = holder.width;
                this._holderHeight = holder.height;
                holder.parent.addChildAt(this, holder.parent.getChildIndex(holder));
                holder.parent.removeChild(holder);
            };
        }
        public function initWithRowNumber(rowNum:int=5, colNum:int=2, mode:int=1, rowOffset:int=0):void{
            var row:int;
            var yPos:Number;
            var tickerRow:InstrumentTickerRow;
            this._rowWidth = (this._holderWidth / colNum);
            this._rowNum = rowNum;
            this._colNum = colNum;
            this._totalRow = ((this._rowNum * this._colNum) - rowOffset);
            this._mode = mode;
            var extraHeight:* = (this._rowNum * 8);
            this._rowHeight = ((this._holderHeight / this._rowNum) + (extraHeight / this._rowNum));
            this._rowHighlightHeight = this._rowHeight;
            var currentRow:* = 0;
            var col:int;
            while (col < this._colNum) {
                row = 0;
                while ((((((((col > 0)) && ((row < this._rowNum)))) || ((((col == 0)) && ((row < (this._rowNum - rowOffset))))))) && ((currentRow < this._totalRow)))) {
                    if (row == 0){
                        yPos = 0;
                        if ((((col == 0)) && ((rowOffset > 0)))){
                            yPos = ((rowOffset - 1) * this._rowHeight);
                        };
                        tickerRow = new InstrumentTickerRow((this._rowWidth * col), yPos, this._rowWidth, this._rowHeight);
                    } else {
                        tickerRow = new InstrumentTickerRow((this._rowWidth * col), ((this._rowList[(currentRow - 1)].y + this._rowHeight) - 8), this._rowWidth, this._rowHeight);
                    };
                    tickerRow.clearRowData();
                    this._rowList.push(tickerRow);
                    addChild(tickerRow);
                    currentRow++;
                    row++;
                };
                col++;
            };
            this.scaleX = 1;
            this.scaleY = 1;
            this.mouseChildren = false;
            this.mouseEnabled = false;
        }
        override public function startService():void{
            this.addEventListener(MessageReceiveEvent.INSTRUMENT_TICKER, this.onReceiveInstrumentTicker);
            this._isStartService = true;
            logger.info("Start Service");
        }
        override public function stopService():void{
            super.stopService();
            this.removeEventListener(MessageReceiveEvent.INSTRUMENT_TICKER, this.onReceiveInstrumentTicker);
            this._isStartService = false;
            logger.info("Stop Service");
        }
        public function registWithSymbol(symbol:String):void{
            if (this._isStartService){
                this.clearTicker();
                this._currentSymbol = symbol;
                this.instrumentTickerService.reRegistTicker([this._currentSymbol], this);
                this.pointer = 0;
                this._lastSequenceId = 0;
            };
        }
        protected function onReceiveInstrumentTicker(e:MessageReceiveEvent):void{
            var df:DateTimeFormatter;
            var sequenceId:int;
            var message:InstrumentTickerFeedMessage = (e.message as InstrumentTickerFeedMessage);
            if (message.instrumentId == this._currentSymbol){
                df = new DateTimeFormatter("en-US");
                sequenceId = message.sequenceId;
                if (sequenceId > this._lastSequenceId){
                    df.setDateTimePattern("HH:mm:ss");
                    this.addTicker(df.format(message.time), message.orderSide, message.volume, message.price, message.trend, message.priceDigit);
                    this._lastSequenceId = message.sequenceId;
                };
            };
        }
        protected function drawHighlight(rowIndex:int):void{
            if (rowIndex < this._totalRow){
                this.graphics.clear();
                this.graphics.beginFill(0xFFFFFF, 0.2);
                this.graphics.drawRect(this._rowList[rowIndex].x, this._rowList[rowIndex].y, this._rowWidth, this._rowList[rowIndex].height);
                this.graphics.endFill();
            };
        }
        public function clearTicker():void{
            var i:* = 0;
            while (i < this._totalRow) {
                this._rowList[i].clearRowData();
                i++;
            };
            this.graphics.clear();
        }
        protected function addTicker(time:String, side:OrderSide, volume:Number, price:Number, trend:Trend, priceDigit:int=2){
            var i:*;
            if (this._mode == MOST_RECENT_MODE){
                i = (this._totalRow - 1);
                while (i > 0) {
                    this._rowList[i].setRowWithAnotherRow(this._rowList[(i - 1)]);
                    i--;
                };
                this._rowList[0].setRow(time, side, volume, price, trend, priceDigit);
            } else {
                if (this._mode == LEAST_RECENT_MODE){
                    this._rowList[this.pointer].setRow(time, side, volume, price, trend, priceDigit);
                    this.drawHighlight(this.pointer);
                    this.pointer = ((this.pointer + 1) % this._totalRow);
                };
            };
        }

    }
}//package com.settrade.streaming5.page.component.instrumentticker 
﻿package com.settrade.streaming5.page.component.instrumentticker {
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.page.component.dynamiclabel.*;
    import flash.text.*;
    import com.settrade.log.logger.*;

    public class InstrumentTickerRow extends MovieClip {

        private static var logger:Logger = new Logger(prototype.constructor);

        const TIME_WIDTH_RATIO:Number = 0.3;
        const SIDE_WIDTH_RATIO:Number = 0.1;
        const VOLUME_WIDTH_RATIO:Number = 0.3;
        const PRICE_WIDTH_RATIO:Number = 0.3;
        const MARGIN_WIDTH:Number = 20;
        const PADDING_TOP:Number = 0;

        protected var _timeLabel:DynamicLabel;
        protected var _sideLabel:DynamicLabel;
        protected var _volumeLabel:DynamicLabel;
        protected var _priceLabel:DynamicLabel;
        protected var _timeData:DynamicData;
        protected var _sideData:DynamicData;
        protected var _volumeData:DynamicData;
        protected var _priceData:DynamicData;
        protected var _priceDigit:int;
        protected var _currentTrend:Trend;

        public function InstrumentTickerRow(x:Number, y:Number, width:Number, height:Number, textFormat:TextFormat=null){
            super();
            var rowWidth:Number = (width - this.MARGIN_WIDTH);
            var rowHeight:Number = height;
            var timeWidth:Number = (rowWidth * this.TIME_WIDTH_RATIO);
            var sideWidth:Number = (rowWidth * this.SIDE_WIDTH_RATIO);
            var volumeWidth:Number = (rowWidth * this.VOLUME_WIDTH_RATIO);
            var priceWidth:Number = (rowWidth * this.PRICE_WIDTH_RATIO);
            this._timeData = new DynamicData(DynamicData.TYPE_LABEL, "");
            this._timeData.textAlign = TextFormatAlign.LEFT;
            this._timeLabel = new DynamicLabel(this._timeData, textFormat);
            this._timeLabel.width = timeWidth;
            this._timeLabel.height = rowHeight;
            this._timeLabel.x = (this.MARGIN_WIDTH / 2);
            this._timeLabel.y = this.PADDING_TOP;
            this._timeLabel.setTextAlign(TextFormatAlign.LEFT);
            this._sideData = new DynamicData(DynamicData.TYPE_LABEL, "");
            this._sideData.textAlign = TextFormatAlign.CENTER;
            this._sideLabel = new DynamicLabel(this._sideData, textFormat);
            this._sideLabel.width = sideWidth;
            this._sideLabel.height = rowHeight;
            this._sideLabel.x = (this._timeLabel.x + this._timeLabel.width);
            this._sideLabel.y = this.PADDING_TOP;
            this._sideLabel.setTextAlign(TextFormatAlign.CENTER);
            this._volumeData = new DynamicData(DynamicData.TYPE_VOLUME, NaN);
            this._volumeData.textAlign = TextFormatAlign.RIGHT;
            this._volumeLabel = new DynamicLabel(this._volumeData, textFormat);
            this._volumeLabel.width = volumeWidth;
            this._volumeLabel.height = rowHeight;
            this._volumeLabel.x = (this._sideLabel.x + this._sideLabel.width);
            this._volumeLabel.y = this.PADDING_TOP;
            this._volumeLabel.setTextAlign(TextFormatAlign.RIGHT);
            this._priceData = new DynamicData(DynamicData.TYPE_PRICE, NaN);
            this._priceData.textAlign = TextFormatAlign.RIGHT;
            this._priceLabel = new DynamicLabel(this._priceData, textFormat);
            this._priceLabel.width = priceWidth;
            this._priceLabel.height = rowHeight;
            this._priceLabel.x = (this._volumeLabel.x + this._volumeLabel.width);
            this._priceLabel.y = this.PADDING_TOP;
            this._priceLabel.setTextAlign(TextFormatAlign.RIGHT);
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
            this.addChild(this._timeLabel);
            this.addChild(this._sideLabel);
            this.addChild(this._volumeLabel);
            this.addChild(this._priceLabel);
            this.scaleX = 1;
            this.scaleY = 1;
            this.mouseChildren = false;
            this.mouseEnabled = false;
        }
        public function clearRowData():void{
            this.setTime("");
            this.setSide(OrderSide.NO_SIDE);
            this.setVolume(NaN);
            this.setPrice(NaN);
        }
        public function setRow(time:String, side:OrderSide, volume:Number, price:Number, trend:Trend, priceDigit:int=2){
            this.setTime(time);
            this.setSide(side);
            this.setVolume(volume, side);
            this.setPrice(price, trend, priceDigit);
        }
        public function setRowWithAnotherRow(row:InstrumentTickerRow){
            this.setRow(row.timeData.displayValue, this.orderSideFromString(row.sideData.displayValue), row.volumeData.numberValue, row.priceData.numberValue, row.currentTrend, row.priceDigit);
        }
        public function setTime(time:String):void{
            var data:DynamicData = this._timeData.clone();
            data.updateData(time);
            this._timeLabel.updateData(false, time, ThemeManager.LABEL_COLOR, true);
            this._timeLabel.setTextAlign(TextFormatAlign.LEFT);
            this._timeData.updateData(time);
        }
        public function setSide(side:OrderSide):void{
            var data:DynamicData = this._sideData.clone();
            data.updateData(this.orderSideToString(side));
            if (side == OrderSide.BUY){
                this._sideLabel.updateData(false, this.orderSideToString(side), ThemeManager.BUY_VOLUME_COLOR, true);
            } else {
                if (side == OrderSide.SELL){
                    this._sideLabel.updateData(false, this.orderSideToString(side), ThemeManager.SELL_VOLUME_COLOR, true);
                } else {
                    this._sideLabel.updateData(false, this.orderSideToString(side), ThemeManager.LABEL_COLOR, true);
                };
            };
            this._sideLabel.setTextAlign(TextFormatAlign.CENTER);
            this._sideData.updateData(this.orderSideToString(side));
        }
        public function setVolume(volume:Number, side:OrderSide=null):void{
            var data:DynamicData = this._volumeData.clone();
            if (isNaN(volume)){
                data.updateData(NaN);
                this._volumeLabel.updateData(false, "", ThemeManager.UNCHANGED_VOLUME_COLOR, true);
                this._volumeData.updateData(NaN);
            } else {
                data.updateData(volume);
                if (side == OrderSide.BUY){
                    this._volumeLabel.updateData(false, StreamingNumberFormatter.formatVolume(volume), ThemeManager.BUY_VOLUME_COLOR, true);
                } else {
                    if (side == OrderSide.SELL){
                        this._volumeLabel.updateData(false, StreamingNumberFormatter.formatVolume(volume), ThemeManager.SELL_VOLUME_COLOR, true);
                    } else {
                        this._volumeLabel.updateData(false, StreamingNumberFormatter.formatVolume(volume), ThemeManager.LABEL_COLOR, true);
                    };
                };
                this._volumeData.updateData(volume);
            };
        }
        public function setPrice(price:Number, trend:Trend=null, priceDigit:int=2):void{
            var data:DynamicData = this._priceData.clone();
            if (isNaN(price)){
                data.updateData(NaN);
                this._priceLabel.updateData(false, "", ThemeManager.UNCHANGED_VOLUME_COLOR, true);
                this._priceLabel.setTextAlign(TextFormatAlign.RIGHT);
                this._priceData.updateData(NaN);
                priceDigit = 2;
            } else {
                data.updateData(price);
                if (trend == null){
                    this._priceLabel.updateData(false, StreamingNumberFormatter.formatPriceWithPrecision(price, priceDigit), this.getColorByTrend(Trend.NO_DATA), true);
                } else {
                    this._priceLabel.updateData(false, StreamingNumberFormatter.formatPriceWithPrecision(price, priceDigit), this.getColorByTrend(trend), true);
                };
                this._priceLabel.setTextAlign(TextFormatAlign.RIGHT);
                this._priceData.updateData(price);
                this._priceDigit = priceDigit;
            };
        }
        private function getColorByTrend(trend:Trend):int{
            this._currentTrend = trend;
            if (trend.isUp()){
                return (ThemeManager.GAINER_COLOR);
            };
            if (trend.isDown()){
                return (ThemeManager.LOSER_COLOR);
            };
            if (trend.isNoChange()){
                return (ThemeManager.UNCHANGED_COLOR);
            };
            return (ThemeManager.LABEL_COLOR);
        }
        private function orderSideToString(side:OrderSide):String{
            if (side == OrderSide.BUY){
                return ("B");
            };
            if (side == OrderSide.SELL){
                return ("S");
            };
            return ("");
        }
        private function orderSideFromString(side:String):OrderSide{
            if (side == "B"){
                return (OrderSide.BUY);
            };
            if (side == "S"){
                return (OrderSide.SELL);
            };
            return (OrderSide.NO_SIDE);
        }
        public function get timeData():DynamicData{
            return (this._timeData);
        }
        public function get sideData():DynamicData{
            return (this._sideData);
        }
        public function get volumeData():DynamicData{
            return (this._volumeData);
        }
        public function get priceData():DynamicData{
            return (this._priceData);
        }
        public function get currentTrend():Trend{
            return (this._currentTrend);
        }
        public function get priceDigit():int{
            return (this._priceDigit);
        }

    }
}//package com.settrade.streaming5.page.component.instrumentticker 
﻿package com.settrade.streaming5.page.component.bidoffer {
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.widget.component.*;
    import com.settrade.streaming5.message.feed.info.*;
    import com.settrade.log.logger.*;

    public class BidOffer extends StreamingComponent {

        private static var logger:Logger = new Logger(prototype.constructor);

        protected var _rowList:Array;
        protected var _rowWidth:int;
        protected var _rowHeight:int;
        protected var _rowNum:int;
        protected var _hasSelfService:Boolean = true;
        protected var _previousClose:Number = 0;
        protected var _clearDataFlag:Boolean = true;
        protected var _oldTotalVol:Number = 0;
        protected var _currentInstrumentId:String = "";
        protected var _iWidth:Number = 0;
        protected var _iHeight:Number = 0;
        var instrumentInfoService:InfoService;

        public function BidOffer(holder:MovieClip=null){
            this._rowList = new Array();
            this.instrumentInfoService = InfoService.getInstance();
            super();
            if (holder != null){
                this.x = holder.x;
                this.y = holder.y;
                this._iWidth = holder.width;
                this._iHeight = holder.height;
                holder.parent.addChildAt(this, holder.parent.getChildIndex(holder));
                holder.parent.removeChild(holder);
            };
        }
        public function initWithRowNumber(rowNum:int):void{
            var row:BidOfferRow;
            this._rowWidth = this._iWidth;
            this._rowNum = rowNum;
            this._rowHeight = ((this._iHeight + (this._rowNum * 4)) / this._rowNum);
            if (this._rowHeight > 21){
                this._rowHeight = 21;
            };
            var calculatedGap:Number = (((this._iHeight + (this._rowNum * 4)) - (this._rowNum * this._rowHeight)) / 2);
            var i:int;
            while (i < this._rowNum) {
                row = new BidOfferRow(0, ((calculatedGap + (i * this._rowHeight)) - (i * 3)), this._rowWidth, this._rowHeight, i);
                this._rowList.push(row);
                addChild(row);
                i++;
            };
            this.scaleX = 1;
            this.scaleY = 1;
        }
        override public function startService():void{
            if (this._hasSelfService){
                this.addEventListener(MessageReceiveEvent.INFO, this.onReceiveInstrumentInfo);
            };
        }
        override public function stopService():void{
            super.stopService();
            this.removeEventListener(MessageReceiveEvent.INFO, this.onReceiveInstrumentInfo);
        }
        public function clearBidOffer():void{
            this.updateBidAtIndex(0, NaN, NaN, NaN, 2);
            this.updateBidAtIndex(1, NaN, NaN, NaN, 2);
            this.updateBidAtIndex(2, NaN, NaN, NaN, 2);
            this.updateBidAtIndex(3, NaN, NaN, NaN, 2);
            this.updateBidAtIndex(4, NaN, NaN, NaN, 2);
            this.updateOfferAtIndex(0, NaN, NaN, NaN, 2);
            this.updateOfferAtIndex(1, NaN, NaN, NaN, 2);
            this.updateOfferAtIndex(2, NaN, NaN, NaN, 2);
            this.updateOfferAtIndex(3, NaN, NaN, NaN, 2);
            this.updateOfferAtIndex(4, NaN, NaN, NaN, 2);
            this.calculateBidVolBar();
            this.calculateOfferVolBar();
            this._currentInstrumentId = "";
        }
        public function updateBidAtIndex(index:int, volume:Number, price, close:Number, priceDigit:int, isMatch:Boolean=false):void{
            if (index >= this._rowNum){
                return;
            };
            if (isNaN(volume)){
                this._rowList[index].setBidVolText("", !(this._clearDataFlag));
            } else {
                if (isMatch){
                    this._rowList[index].setBidVol(volume, !(this._clearDataFlag), ThemeManager.MATCHED_VOLUME_COLOR);
                } else {
                    this._rowList[index].setBidVol(volume, !(this._clearDataFlag));
                };
            };
            if ((price is Number)){
                if (isNaN(price)){
                    this._rowList[index].setBidPriceText("", !(this._clearDataFlag));
                } else {
                    this._rowList[index].setBidPriceWithRefPrice(price, close, !(this._clearDataFlag), priceDigit);
                };
            } else {
                if ((price is String)){
                    this._rowList[index].setBidPriceText(price, !(this._clearDataFlag));
                };
            };
            if (index == 0){
                this._rowList[index].setCurrentInstrumentId(this._currentInstrumentId);
            };
        }
        public function updateOfferAtIndex(index:int, volume:Number, price, close:Number, priceDigit:int, isMatch:Boolean=false):void{
            if (index >= this._rowNum){
                return;
            };
            if (isNaN(volume)){
                this._rowList[index].setOfferVolText("", !(this._clearDataFlag));
            } else {
                if (isMatch){
                    this._rowList[index].setOfferVol(volume, !(this._clearDataFlag), ThemeManager.MATCHED_VOLUME_COLOR);
                } else {
                    this._rowList[index].setOfferVol(volume, !(this._clearDataFlag));
                };
            };
            if ((price is Number)){
                if (isNaN(price)){
                    this._rowList[index].setOfferPriceText("", !(this._clearDataFlag));
                } else {
                    this._rowList[index].setOfferPriceWithRefPrice(price, close, !(this._clearDataFlag), priceDigit);
                };
            } else {
                if ((price is String)){
                    this._rowList[index].setOfferPriceText(price, !(this._clearDataFlag));
                };
            };
            if (index == 0){
                this._rowList[index].setCurrentInstrumentId(this._currentInstrumentId);
            };
        }
        private function calculateBidVolBar(isMatch:Boolean=false):void{
            var sumBid:Number = 0;
            var sumOffer:Number = 0;
            var sum:Number = 0;
            var i:* = 0;
            while (i < this._rowNum) {
                if (this._rowList[i].getBidVol() > sumBid){
                    sumBid = this._rowList[i].getBidVol();
                };
                if (this._rowList[i].getOfferVol() > sumOffer){
                    sumOffer = this._rowList[i].getOfferVol();
                };
                i++;
            };
            sum = Math.max(sumBid, sumOffer);
            i = 0;
            while (i < this._rowNum) {
                if (i == 0){
                    this._rowList[i].recalculateBidBar(sum, isMatch);
                } else {
                    this._rowList[i].recalculateBidBar(sum);
                };
                i++;
            };
        }
        private function calculateOfferVolBar(isMath:Boolean=false):void{
            var sumBid:Number = 0;
            var sumOffer:Number = 0;
            var sum:Number = 0;
            var i:* = 0;
            while (i < this._rowNum) {
                if (this._rowList[i].getBidVol() > sumBid){
                    sumBid = this._rowList[i].getBidVol();
                };
                if (this._rowList[i].getOfferVol() > sumOffer){
                    sumOffer = this._rowList[i].getOfferVol();
                };
                i++;
            };
            sum = Math.max(sumBid, sumOffer);
            i = 0;
            while (i < this._rowNum) {
                if (i == 0){
                    this._rowList[i].recalculateOfferBar(sum, isMath);
                } else {
                    this._rowList[i].recalculateOfferBar(sum);
                };
                i++;
            };
        }
        public function onReceiveInstrumentInfo(e:MessageReceiveEvent):void{
            var market:InfoInitialMarket;
            var derivativesMarket:InfoInitialMarketDerivatives;
            var bidoffer:InfoBidOfferInstrument;
            var bidFlag:PriceType;
            var askFlag:PriceType;
            var bidPrice2:Number;
            var bidPrice3:Number;
            var bidPrice4:Number;
            var bidPrice5:Number;
            var bidVol1:Number;
            var bidVol2:Number;
            var bidVol3:Number;
            var bidVol4:Number;
            var bidVol5:Number;
            var askPrice2:Number;
            var askPrice3:Number;
            var askPrice4:Number;
            var askPrice5:Number;
            var askVol1:Number;
            var askVol2:Number;
            var askVol3:Number;
            var askVol4:Number;
            var askVol5:Number;
            var isBidMatch:Boolean;
            var isOfferMatch:Boolean;
            var bidPriceString1:String;
            var bidPrice1:Number;
            var askPriceString1:String;
            var askPrice1:Number;
            var oldBidVol:Number;
            var oldOfferVol:Number;
            var bidVolDiff:Number;
            var offerVolDiff:Number;
            var totalVolDiff:Number;
            var message:InfoFeedMessage = (e.message as InfoFeedMessage);
            var priceDigit:int = message.priceDigit;
            this._currentInstrumentId = message.instrumentId;
            if (message.hasInitMarket){
                market = message.initialMarket;
                if (message.instrumentType.isDerivatives()){
                    derivativesMarket = InfoInitialMarketDerivatives(message.initialMarket);
                    this._previousClose = derivativesMarket.previousSettle;
                } else {
                    this._previousClose = market.previousClose;
                };
            };
            if (message.hasBidOffer){
                bidoffer = (message.bidOffer as InfoBidOfferInstrument);
                bidFlag = bidoffer.bidFlag;
                askFlag = bidoffer.askFlag;
                if (bidFlag.isATO()){
                    bidPriceString1 = "ATO";
                } else {
                    if (bidFlag.isATC()){
                        bidPriceString1 = "ATC";
                    } else {
                        if (bidFlag.isMP()){
                            bidPriceString1 = "MP";
                        } else {
                            bidPrice1 = bidoffer.bidPrice1;
                        };
                    };
                };
                bidPrice2 = bidoffer.bidPrice2;
                bidPrice3 = bidoffer.bidPrice3;
                bidPrice4 = bidoffer.bidPrice4;
                bidPrice5 = bidoffer.bidPrice5;
                bidVol1 = bidoffer.bidVolume1;
                bidVol2 = bidoffer.bidVolume2;
                bidVol3 = bidoffer.bidVolume3;
                bidVol4 = bidoffer.bidVolume4;
                bidVol5 = bidoffer.bidVolume5;
                if (askFlag.isATO()){
                    askPriceString1 = "ATO";
                } else {
                    if (askFlag.isATC()){
                        askPriceString1 = "ATC";
                    } else {
                        if (askFlag.isMP()){
                            askPriceString1 = "MP";
                        } else {
                            askPrice1 = bidoffer.askPrice1;
                        };
                    };
                };
                askPrice2 = bidoffer.askPrice2;
                askPrice3 = bidoffer.askPrice3;
                askPrice4 = bidoffer.askPrice4;
                askPrice5 = bidoffer.askPrice5;
                askVol1 = bidoffer.askVolume1;
                askVol2 = bidoffer.askVolume2;
                askVol3 = bidoffer.askVolume3;
                askVol4 = bidoffer.askVolume4;
                askVol5 = bidoffer.askVolume5;
                isBidMatch = false;
                isOfferMatch = false;
                if (message.hasSummary){
                    oldBidVol = this._rowList[0].getBidVol();
                    oldOfferVol = this._rowList[0].getOfferVol();
                    bidVolDiff = (oldBidVol - bidVol1);
                    offerVolDiff = (oldOfferVol - askVol1);
                    totalVolDiff = (message.summary.totalVolume - this._oldTotalVol);
                    if (((bidFlag.isATOATC()) || (bidFlag.isMP()))){
                        isBidMatch = (((bidVol1 < oldBidVol)) && ((bidVolDiff == totalVolDiff)));
                        this.updateBidAtIndex(0, bidVol1, bidPriceString1, this._previousClose, priceDigit, isBidMatch);
                    } else {
                        isBidMatch = (((bidVol1 < oldBidVol)) && ((bidVolDiff == totalVolDiff)));
                        this.updateBidAtIndex(0, bidVol1, bidPrice1, this._previousClose, priceDigit, isBidMatch);
                    };
                    if (((askFlag.isATOATC()) || (askFlag.isMP()))){
                        isOfferMatch = (((askVol1 < oldOfferVol)) && ((offerVolDiff == totalVolDiff)));
                        this.updateOfferAtIndex(0, askVol1, askPriceString1, this._previousClose, priceDigit, isOfferMatch);
                    } else {
                        isOfferMatch = (((askVol1 < oldOfferVol)) && ((offerVolDiff == totalVolDiff)));
                        this.updateOfferAtIndex(0, askVol1, askPrice1, this._previousClose, priceDigit, isOfferMatch);
                    };
                    this._oldTotalVol = message.summary.totalVolume;
                } else {
                    if (((bidFlag.isATOATC()) || (bidFlag.isMP()))){
                        this.updateBidAtIndex(0, bidVol1, bidPriceString1, priceDigit, this._previousClose);
                    } else {
                        this.updateBidAtIndex(0, bidVol1, bidPrice1, priceDigit, this._previousClose);
                    };
                    if (((askFlag.isATOATC()) || (askFlag.isMP()))){
                        this.updateOfferAtIndex(0, askVol1, askPriceString1, priceDigit, this._previousClose);
                    } else {
                        this.updateOfferAtIndex(0, askVol1, askPrice1, priceDigit, this._previousClose);
                    };
                };
                this.updateBidAtIndex(1, bidVol2, bidPrice2, this._previousClose, priceDigit);
                this.updateBidAtIndex(2, bidVol3, bidPrice3, this._previousClose, priceDigit);
                this.updateBidAtIndex(3, bidVol4, bidPrice4, this._previousClose, priceDigit);
                this.updateBidAtIndex(4, bidVol5, bidPrice5, this._previousClose, priceDigit);
                this.updateOfferAtIndex(1, askVol2, askPrice2, this._previousClose, priceDigit);
                this.updateOfferAtIndex(2, askVol3, askPrice3, this._previousClose, priceDigit);
                this.updateOfferAtIndex(3, askVol4, askPrice4, this._previousClose, priceDigit);
                this.updateOfferAtIndex(4, askVol5, askPrice5, this._previousClose, priceDigit);
            };
        }
        public function notifyChangeInstrumentIdAndPrice(instrumentId:String, orderSide:OrderSide, priceType:PriceType, price:Number, priceDigit:Number):void{
            var parentRef:* = this.parent;
            if (((!((parentRef == null))) && (parentRef["notifyChangeInstrumentIdAndPrice"]))){
                parentRef.notifyChangeInstrumentIdAndPrice(instrumentId, orderSide, priceType, price, priceDigit);
            };
        }
        public function get hasSelfService():Boolean{
            return (this._hasSelfService);
        }
        public function set hasSelfService(value:Boolean):void{
            this._hasSelfService = value;
        }
        public function get clearDataFlag():Boolean{
            return (this._clearDataFlag);
        }
        public function set clearDataFlag(value:Boolean):void{
            this._clearDataFlag = value;
        }

    }
}//package com.settrade.streaming5.page.component.bidoffer 
﻿package com.settrade.streaming5.page.component.bidoffer {
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import com.settrade.streaming5.page.component.dynamiclabel.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.service.*;
    import flash.text.*;
    import com.settrade.log.logger.*;
    import fl.transitions.easing.*;
    import fl.transitions.*;
    import flash.ui.*;

    public class BidOfferRow extends MovieClip {

        private static var logger:Logger = new Logger(prototype.constructor);

        const BAR_HEIGHT:int = 1;
        const BAR_WIDTH_RATIO:Number = 0.475;
        const VOL_WIDTH_RATIO:Number = 0.325;
        const PRICE_WIDTH_RATIO:Number = 0.175;
        const OFFER_BAR_X_RATIO:Number = 0.525;
        const BID_BAR_X_RATIO:Number = 0.4875;
        const WIDTH_MARGIN:Number = 20;
        const PADDING_LEFT:Number = 10;
        const PADDING_TOP:Number = -4;

        protected var _bidVol:DynamicLabel;
        protected var _bidPrice:DynamicLabel;
        protected var _offerVol:DynamicLabel;
        protected var _offerPrice:DynamicLabel;
        protected var _bidVolData:DynamicData;
        protected var _bidPriceData:DynamicData;
        protected var _offerVolData:DynamicData;
        protected var _offerPriceData:DynamicData;
        protected var _offerBar:MovieClip;
        protected var _extraOfferBar:MovieClip;
        protected var _bidBar:MovieClip;
        protected var _extraBidBar:MovieClip;
        protected var _isAnimate:Boolean = false;
        protected var _offerPercent:Number = 0;
        protected var _bidPercent:Number = 0;
        protected var _currentInstrumentId:String = "";

        public function BidOfferRow(x:Number, y:Number, width:Number, height:Number, index:int){
            this._offerBar = new MovieClip();
            this._extraOfferBar = new MovieClip();
            this._bidBar = new MovieClip();
            this._extraBidBar = new MovieClip();
            super();
            var labelWidth:Number = (width - this.WIDTH_MARGIN);
            var labelHeight:Number = (((height - 2) + 1) + 8);
            var volWidth:Number = (labelWidth * this.VOL_WIDTH_RATIO);
            var priceWidth:Number = (labelWidth * this.PRICE_WIDTH_RATIO);
            this._bidVolData = new DynamicData(DynamicData.TYPE_VOLUME, NaN);
            this._bidVolData.textAlign = TextFormatAlign.RIGHT;
            this._bidVol = new DynamicLabel(this._bidVolData);
            this._bidVol.width = volWidth;
            this._bidVol.height = labelHeight;
            this._bidVol.x = this.PADDING_LEFT;
            this._bidVol.y = this.PADDING_TOP;
            this._bidVol.setTextAlign(TextFormatAlign.RIGHT);
            this._bidPriceData = new DynamicData(DynamicData.TYPE_PRICE, NaN);
            this._bidPriceData.textAlign = TextFormatAlign.RIGHT;
            this._bidPrice = new DynamicLabel(this._bidPriceData);
            this._bidPrice.width = priceWidth;
            this._bidPrice.height = labelHeight;
            this._bidPrice.x = (this._bidVol.x + this._bidVol.width);
            this._bidPrice.y = this.PADDING_TOP;
            this._bidPrice.setTextAlign(TextFormatAlign.RIGHT);
            this._offerPriceData = new DynamicData(DynamicData.TYPE_PRICE, NaN);
            this._offerPriceData.textAlign = TextFormatAlign.RIGHT;
            this._offerPrice = new DynamicLabel(this._offerPriceData);
            this._offerPrice.width = priceWidth;
            this._offerPrice.height = labelHeight;
            this._offerPrice.x = (this._bidPrice.x + this._bidPrice.width);
            this._offerPrice.y = this.PADDING_TOP;
            this._offerPrice.setTextAlign(TextFormatAlign.RIGHT);
            this._offerVolData = new DynamicData(DynamicData.TYPE_VOLUME, NaN);
            this._offerVolData.textAlign = TextFormatAlign.RIGHT;
            this._offerVol = new DynamicLabel(this._offerVolData);
            this._offerVol.width = volWidth;
            this._offerVol.height = labelHeight;
            this._offerVol.x = (this._offerPrice.x + this._offerPrice.width);
            this._offerVol.y = this.PADDING_TOP;
            this._offerVol.setTextAlign(TextFormatAlign.RIGHT);
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
            addChild(this._bidVol);
            addChild(this._bidPrice);
            addChild(this._offerPrice);
            addChild(this._offerVol);
            addChild(this._offerBar);
            addChild(this._extraOfferBar);
            addChild(this._bidBar);
            addChild(this._extraBidBar);
            if (index == 0){
                this._bidPrice.addEventListener(MouseEvent.MOUSE_OVER, this.onPriceMouseOver);
                this._bidPrice.addEventListener(MouseEvent.MOUSE_OUT, this.onPriceMouseOut);
                this._bidPrice.addEventListener(MouseEvent.MOUSE_DOWN, this.onBidPriceMouseDown);
                this._bidPrice.addEventListener(MouseEvent.MOUSE_UP, this.onPriceMouseUp);
                this._offerPrice.addEventListener(MouseEvent.MOUSE_OVER, this.onPriceMouseOver);
                this._offerPrice.addEventListener(MouseEvent.MOUSE_OUT, this.onPriceMouseOut);
                this._offerPrice.addEventListener(MouseEvent.MOUSE_DOWN, this.onOfferPriceMouseDown);
                this._offerPrice.addEventListener(MouseEvent.MOUSE_UP, this.onPriceMouseUp);
                this._isAnimate = true;
            };
        }
        private function onPriceMouseOver(e:MouseEvent):void{
            Mouse.cursor = MouseCursor.BUTTON;
        }
        private function onPriceMouseOut(e:MouseEvent):void{
            Mouse.cursor = MouseCursor.AUTO;
            this.graphics.clear();
        }
        private function onBidPriceMouseDown(e:MouseEvent):void{
            var parentRef:BidOffer;
            var priceType:PriceType = PriceType.LIMIT;
            var price:Number = NaN;
            if (this._bidPriceData.displayValue == "ATO"){
                priceType = PriceType.ATO;
            } else {
                if (this._bidPriceData.displayValue == "ATC"){
                    priceType = PriceType.ATC;
                } else {
                    price = this._bidPriceData.numberValue;
                };
            };
            if (StreamingAttribute.applicationMode.isPro()){
                if ((this.parent is BidOffer)){
                    parentRef = BidOffer(this.parent);
                    if (parentRef != null){
                        parentRef.notifyChangeInstrumentIdAndPrice(this._currentInstrumentId, OrderSide.SELL, priceType, price, this._bidPriceData.priceDigit);
                    };
                };
            } else {
                NotifyPlaceOrderService.getInstance().notifyPlaceOrder(this._currentInstrumentId, OrderSide.SELL, priceType, price, this._bidPriceData.priceDigit);
            };
            this.graphics.beginFill(0xFFFFFF, 0.5);
            this.graphics.drawRect(this._bidPrice.x, this._bidPrice.y, this._bidPrice.width, this._bidPrice.textField.textHeight);
            this.graphics.endFill();
        }
        private function onOfferPriceMouseDown(e:MouseEvent):void{
            var parentRef:BidOffer;
            var priceType:PriceType = PriceType.LIMIT;
            var price:Number = NaN;
            if (this._offerPriceData.displayValue == "ATO"){
                priceType = PriceType.ATO;
            } else {
                if (this._offerPriceData.displayValue == "ATC"){
                    priceType = PriceType.ATC;
                } else {
                    price = this._offerPriceData.numberValue;
                };
            };
            if (StreamingAttribute.applicationMode.isPro()){
                if ((this.parent is BidOffer)){
                    parentRef = BidOffer(this.parent);
                    if (parentRef != null){
                        parentRef.notifyChangeInstrumentIdAndPrice(this._currentInstrumentId, OrderSide.BUY, priceType, price, this._offerPriceData.priceDigit);
                    };
                };
            } else {
                NotifyPlaceOrderService.getInstance().notifyPlaceOrder(this._currentInstrumentId, OrderSide.BUY, priceType, price, this._offerPriceData.priceDigit);
            };
            this.graphics.beginFill(0xFFFFFF, 0.5);
            this.graphics.drawRect(this._offerPrice.x, this._offerPrice.y, this._offerPrice.width, this._offerPrice.textField.textHeight);
            this.graphics.endFill();
        }
        private function onPriceMouseUp(e:MouseEvent):void{
            this.graphics.clear();
        }
        public function setCurrentInstrumentId(instrumentId:String):void{
            this._currentInstrumentId = instrumentId;
        }
        public function setBidVol(vol:Number, blink:Boolean, color:int=-1):void{
            var data:DynamicData;
            if (this._bidVolData.numberValue != vol){
                data = this._bidVolData.clone();
                data.updateData(vol);
                this._bidVol.currentColor = ThemeManager.UNCHANGED_VOLUME_COLOR;
                if (color == -1){
                    this._bidVol.updateData(blink, StreamingNumberFormatter.formatVolume(vol), this._bidVolData.getBlinkColor(data), false);
                } else {
                    this._bidVol.updateData(blink, StreamingNumberFormatter.formatVolume(vol), color, false);
                };
                this._bidVol.setTextAlign(TextFormatAlign.RIGHT);
                this._bidVolData.updateData(vol);
            };
        }
        public function setBidVolText(vol:String, blink:Boolean):void{
            if (this._bidVolData.displayValue != vol){
                this._bidVol.currentColor = ThemeManager.UNCHANGED_VOLUME_COLOR;
                this._bidVol.updateData(blink, vol, ThemeManager.LABEL_COLOR, false);
                this._bidVolData.updateData(NaN);
            };
        }
        public function setBidPriceWithRefPrice(price:Number, refPrice:Number, blink:Boolean, priceDigit:int=2):void{
            var data:DynamicData;
            var color:int;
            if (this._bidPriceData.numberValue != price){
                data = this._bidPriceData.clone();
                data.updateData(price);
                if (price == 0){
                    color = ThemeManager.LABEL_COLOR;
                } else {
                    color = this._bidPriceData.getBlinkColor(data, refPrice);
                };
                this._bidPrice.updateData(blink, StreamingNumberFormatter.formatPriceWithPrecision(price, priceDigit), color, true);
                this._bidPrice.setTextAlign(TextFormatAlign.RIGHT);
                this._bidPriceData.updateData(price, priceDigit);
            };
        }
        public function setBidPriceText(price:String, blink:Boolean):void{
            if (this._bidPriceData.displayValue != price){
                this._bidPrice.updateData(blink, price, ThemeManager.LABEL_COLOR, true);
                this._bidPriceData.updateData(price);
            };
        }
        public function setOfferVol(vol:Number, blink:Boolean, color:int=-1):void{
            var data:DynamicData;
            if (this._offerVolData.numberValue != vol){
                data = this._offerVolData.clone();
                data.updateData(vol);
                this._offerVol.currentColor = ThemeManager.UNCHANGED_VOLUME_COLOR;
                if (color == -1){
                    this._offerVol.updateData(blink, StreamingNumberFormatter.formatVolume(vol), this._offerVolData.getBlinkColor(data), false);
                } else {
                    this._offerVol.updateData(blink, StreamingNumberFormatter.formatVolume(vol), color, false);
                };
                this._offerVol.setTextAlign(TextFormatAlign.RIGHT);
                this._offerVolData.updateData(vol);
            };
        }
        public function setOfferVolText(vol:String, blink:Boolean):void{
            if (this._offerVolData.displayValue != vol){
                this._offerVol.currentColor = ThemeManager.UNCHANGED_VOLUME_COLOR;
                this._offerVol.updateData(blink, vol, ThemeManager.LABEL_COLOR, false);
                this._offerVolData.updateData(NaN);
            };
        }
        public function setOfferPriceWithRefPrice(price:Number, refPrice:Number, blink:Boolean, priceDigit:int=2):void{
            var data:DynamicData;
            var color:int;
            if (this._offerPriceData.numberValue != price){
                data = this._offerPriceData.clone();
                data.updateData(price);
                if (price == 0){
                    color = ThemeManager.LABEL_COLOR;
                } else {
                    color = this._offerPriceData.getBlinkColor(data, refPrice);
                };
                this._offerPrice.updateData(blink, StreamingNumberFormatter.formatPriceWithPrecision(price, priceDigit), color, true);
                this._offerPrice.setTextAlign(TextFormatAlign.RIGHT);
                this._offerPriceData.updateData(price, priceDigit);
            };
        }
        public function setOfferPriceText(price:String, blink:Boolean):void{
            if (this._offerPriceData.displayValue != price){
                this._offerPrice.updateData(blink, price, ThemeManager.LABEL_COLOR, true);
                this._offerPriceData.updateData(price);
            };
        }
        public function recalculateOfferBar(sum:Number, isMatched:Boolean=false):void{
            var percent:Number;
            if (sum == 0){
                this.animateOfferBar(0, isMatched);
            } else {
                percent = 0;
                if (!isNaN(this._offerVolData.numberValue)){
                    percent = ((this._offerVolData.numberValue / sum) * 100);
                };
                this.animateOfferBar(percent, isMatched);
            };
        }
        public function recalculateBidBar(sum:Number, isMatched:Boolean=false):void{
            var percent:Number;
            if (sum == 0){
                this.animateBidBar(0, isMatched);
            } else {
                percent = 0;
                if (!isNaN(this._bidVolData.numberValue)){
                    percent = ((this._bidVolData.numberValue / sum) * 100);
                };
                this.animateBidBar(percent, isMatched);
            };
        }
        private function animateOfferBar(percent:Number, isMatched:Boolean=false):void{
            var tween:Tween;
            var oldOfferPercent:Number = this._offerPercent;
            this._offerPercent = percent;
            var diffPercent:Number = (this._offerPercent - oldOfferPercent);
            if (((isMatched) && ((diffPercent < 0)))){
                diffPercent = Math.abs(diffPercent);
                this._extraOfferBar.graphics.clear();
                this._extraOfferBar.graphics.beginFill(ThemeManager.LABEL_GRAY_COLOR);
                this._extraOfferBar.graphics.drawRect(0, 0, 1, this.BAR_HEIGHT);
                this._extraOfferBar.graphics.endFill();
                this._offerBar.graphics.clear();
                this._offerBar.graphics.beginFill(ThemeManager.SELL_VOLUME_COLOR);
                this._offerBar.graphics.drawRect(0, 0, 1, this.BAR_HEIGHT);
                this._offerBar.graphics.endFill();
                this._extraOfferBar.x = (this.getOfferBarX() + (this.getBarPixelWidth() * percent));
                if ((this._offerVol.textField.textHeight + this._offerVol.textField.y) > 0){
                    this._extraOfferBar.y = ((this._offerVol.y + this._offerVol.textField.textHeight) + this._offerVol.textField.y);
                };
                this._offerBar.x = this.getOfferBarX();
                this._offerBar.width = (this.getBarPixelWidth() * percent);
                if ((this._offerVol.textField.textHeight + this._offerVol.textField.y) > 0){
                    this._offerBar.y = ((this._offerVol.y + this._offerVol.textField.textHeight) + this._offerVol.textField.y);
                };
                if (this._isAnimate){
                    tween = new Tween(this._extraOfferBar, "width", Strong.easeOut, (this.getBarPixelWidth() * diffPercent), 0, 0.5, true);
                } else {
                    this._extraOfferBar.width = 0;
                };
            } else {
                this._extraOfferBar.graphics.clear();
                this._offerBar.graphics.clear();
                this._offerBar.graphics.beginFill(ThemeManager.SELL_VOLUME_COLOR);
                this._offerBar.graphics.drawRect(0, 0, 1, this.BAR_HEIGHT);
                this._offerBar.graphics.endFill();
                this._offerBar.x = this.getOfferBarX();
                if ((this._offerVol.textField.textHeight + this._offerVol.textField.y) > 0){
                    this._offerBar.y = ((this._offerVol.y + this._offerVol.textField.textHeight) + this._offerVol.textField.y);
                };
                if (this._isAnimate){
                    tween = new Tween(this._offerBar, "width", Strong.easeOut, (this.getBarPixelWidth() * oldOfferPercent), (this.getBarPixelWidth() * percent), 0.5, true);
                } else {
                    this._offerBar.width = (this.getBarPixelWidth() * percent);
                };
            };
        }
        private function animateBidBar(percent:Number, isMatched:Boolean=false):void{
            var tween:Tween;
            var tween2:Tween;
            var oldBidPercent:Number = this._bidPercent;
            this._bidPercent = percent;
            var diffPercent:Number = (this._bidPercent - oldBidPercent);
            if (((isMatched) && ((diffPercent < 0)))){
                diffPercent = Math.abs(diffPercent);
                this._extraBidBar.graphics.clear();
                this._extraBidBar.graphics.beginFill(ThemeManager.LABEL_GRAY_COLOR);
                this._extraBidBar.graphics.drawRect(0, 0, 1, this.BAR_HEIGHT);
                this._extraBidBar.graphics.endFill();
                this._bidBar.graphics.clear();
                this._bidBar.graphics.beginFill(ThemeManager.BUY_VOLUME_COLOR);
                this._bidBar.graphics.drawRect(0, 0, 1, this.BAR_HEIGHT);
                this._bidBar.graphics.endFill();
                this._extraBidBar.x = (this.getBidBarX() - (this.getBarPixelWidth() * oldBidPercent));
                if ((this._bidVol.textField.y + this._bidVol.textField.textHeight) > 0){
                    this._extraBidBar.y = ((this._bidVol.y + this._bidVol.textField.y) + this._bidVol.textField.textHeight);
                };
                this._bidBar.x = (this.getBidBarX() - (this.getBarPixelWidth() * percent));
                this._bidBar.width = (this.getBarPixelWidth() * percent);
                if ((this._bidVol.textField.y + this._bidVol.textField.textHeight) > 0){
                    this._bidBar.y = ((this._bidVol.y + this._bidVol.textField.y) + this._bidVol.textField.textHeight);
                };
                if (this._isAnimate){
                    tween = new Tween(this._extraBidBar, "width", Strong.easeOut, (this.getBarPixelWidth() * diffPercent), 0, 0.5, true);
                    tween2 = new Tween(this._extraBidBar, "x", Strong.easeOut, (this.getBidBarX() - (this.getBarPixelWidth() * oldBidPercent)), (this.getBidBarX() - (this.getBarPixelWidth() * percent)), 0.5, true);
                } else {
                    this._extraBidBar.width = 0;
                    this._extraBidBar.x = (this.getBidBarX() - (this.getBarPixelWidth() * percent));
                };
            } else {
                this._extraBidBar.graphics.clear();
                this._bidBar.graphics.clear();
                this._bidBar.graphics.beginFill(ThemeManager.BUY_VOLUME_COLOR);
                this._bidBar.graphics.drawRect(0, 0, 1, this.BAR_HEIGHT);
                this._bidBar.graphics.endFill();
                this._bidBar.x = (this.getBidBarX() - (this.getBarPixelWidth() * percent));
                if ((this._bidVol.textField.y + this._bidVol.textField.textHeight) > 0){
                    this._bidBar.y = ((this._bidVol.y + this._bidVol.textField.y) + this._bidVol.textField.textHeight);
                };
                if (this._isAnimate){
                    tween = new Tween(this._bidBar, "width", Strong.easeOut, (this.getBarPixelWidth() * oldBidPercent), (this.getBarPixelWidth() * percent), 0.5, true);
                    tween2 = new Tween(this._bidBar, "x", Strong.easeOut, (this.getBidBarX() - (this.getBarPixelWidth() * oldBidPercent)), (this.getBidBarX() - (this.getBarPixelWidth() * percent)), 0.5, true);
                } else {
                    this._bidBar.width = (this.getBarPixelWidth() * percent);
                    this._bidBar.x = (this.getBidBarX() - (this.getBarPixelWidth() * percent));
                };
            };
        }
        private function getBarPixelWidth():Number{
            return (((this.width * this.BAR_WIDTH_RATIO) / 100));
        }
        private function getBidBarX():Number{
            return ((this.width * this.BID_BAR_X_RATIO));
        }
        private function getOfferBarX():Number{
            return ((this.width * this.OFFER_BAR_X_RATIO));
        }
        public function getBidVol():Number{
            if (isNaN(this._bidVolData.numberValue)){
                return (0);
            };
            return (this._bidVolData.numberValue);
        }
        public function getOfferVol():Number{
            if (isNaN(this._offerVolData.numberValue)){
                return (0);
            };
            return (this._offerVolData.numberValue);
        }
        public function get offerPercent():Number{
            return (this._offerPercent);
        }
        public function set offerPercent(value:Number):void{
            this._offerPercent = value;
        }
        public function get bidPercent():Number{
            return (this._bidPercent);
        }
        public function set bidPercent(value:Number):void{
            this._bidPercent = value;
        }

    }
}//package com.settrade.streaming5.page.component.bidoffer 
﻿package com.settrade.streaming5.page.component.dynamiclabel {
    import fl.controls.*;
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import com.settrade.streaming5.manager.*;
    import flash.utils.*;
    import flash.geom.*;
    import com.settrade.streaming5.config.generic.*;
    import flash.text.*;
    import com.settrade.log.logger.*;

    public class DynamicLabel extends Label {

        public static const TYPE_LABEL = 1;
        public static const TYPE_PRICE = 2;
        public static const TYPE_VOLUME = 3;

        private static var logger:Logger = new Logger(prototype.constructor);

        var MINIMUM_FONT_SIZE:int = 8;
        protected var _blinkSquare:Sprite;
        protected var _currentColor:int;
        protected var _maxFontScale:Number = 0.5;
        protected var _defaultFontSize:Number;
        protected var _textAlign:String;
        protected var _data:DynamicData;
        protected var _blinkTimer:Timer;
        protected var _overlayTimer:Timer;
        protected var _elipsisPoint:Point;
        protected var _elipsisDirection:Direction;
        protected var fullString:String = "";
        protected var _iHeight:Number;

        public function DynamicLabel(data:DynamicData=null, textFormat:TextFormat=null, holder:MovieClip=null){
            var displayConfig:DisplayTextConfig;
            var defaultTextFormat:TextFormat;
            this._blinkSquare = new Sprite();
            this._elipsisPoint = new Point(20, 0);
            this._elipsisDirection = Direction.UP;
            super();
            if (data != null){
                if (textFormat == null){
                    displayConfig = DisplayTextConfig(GenericSettingManager.getInstance().getConfig(ConfigType.GENERIC_DISPLAY_TEXT));
                    if (data.type == DynamicData.TYPE_VOLUME){
                        setStyle("textFormat", ThemeManager.defaultVolumeFont);
                    } else {
                        defaultTextFormat = ThemeManager.defaultFont;
                        defaultTextFormat.size = displayConfig.fontSize;
                        setStyle("textFormat", defaultTextFormat);
                    };
                    this._defaultFontSize = displayConfig.fontSize;
                    this.setTextAlign(data.textAlign);
                } else {
                    setStyle("textFormat", textFormat);
                    this._defaultFontSize = (textFormat.size as Number);
                    this.setTextAlign(textFormat.align);
                };
                this._currentColor = data.currentColor;
                this._data = data.clone();
                this.updateData(false, data.displayValue, data.currentColor, true);
            };
            addChild(this._blinkSquare);
            if (holder != null){
                this.x = holder.x;
                this.y = holder.y;
                this.width = holder.width;
                this.height = holder.height;
                this._iHeight = holder.height;
                holder.parent.addChildAt(this, holder.parent.getChildIndex(holder));
                holder.parent.removeChild(holder);
            };
            this._blinkTimer = new Timer(150, 1);
            this._blinkTimer.addEventListener(TimerEvent.TIMER_COMPLETE, this.stopBlink);
            this._overlayTimer = new Timer(1000, 1);
            this._overlayTimer.addEventListener(TimerEvent.TIMER_COMPLETE, this.stopOverlay);
        }
        public function setElipsisPointAndDirection(point:Point, direction:Direction):void{
            this._elipsisPoint = point;
            this._elipsisDirection = direction;
        }
        public function updateData(blink:Boolean, value:String, color:int, isChangeColor:Boolean, isAutoResize:Boolean=true, isElipsis:Boolean=false, elipsisLength:int=12):void{
            if (((!((this._overlayTimer == null))) && (this._overlayTimer.running))){
                this.stopOverlay(null);
            };
            if ((((this.text == " ")) || ((value == " ")))){
                blink = false;
            };
            if (this.text != value){
                this.text = value;
                this.updateColor(blink, color, isChangeColor);
            } else {
                this.updateColor(false, color, isChangeColor);
            };
            if (isElipsis){
                this.elipsis(elipsisLength);
            } else {
                removeEventListener(MouseEvent.MOUSE_OVER, this.onMouseOver);
                removeEventListener(MouseEvent.MOUSE_OUT, this.onMouseOut);
            };
            if (isAutoResize){
                this.autosize();
            };
            this.updateTextAlign();
        }
        public function updateColor(isBlink:Boolean, color:int, isChangeColor:Boolean):void{
            if (isBlink){
                this.blink(color, isChangeColor);
            } else {
                if (isChangeColor){
                    this.setTextColor(color);
                } else {
                    this.setTextColor(this._currentColor);
                };
            };
        }
        public function loadPriceData(blink:Boolean, value:Number, close:Number=NaN, precision:int=2):void{
            var newData:DynamicData = this._data.clone();
            newData.type = DynamicData.TYPE_PRICE;
            this._data.type = DynamicData.TYPE_PRICE;
            newData.updateData(value);
            this.updateData(blink, StreamingNumberFormatter.formatPriceWithPrecision(value, precision), this._data.getBlinkColor(newData, close), true);
            this._data = newData;
        }
        public function loadVolumeData(blink:Boolean, value:Number, totalVolume:Number=NaN):void{
            var newData:DynamicData = this._data.clone();
            newData.type = DynamicData.TYPE_VOLUME;
            this._data.type = DynamicData.TYPE_VOLUME;
            newData.updateData(value);
            this._currentColor = ThemeManager.UNCHANGED_VOLUME_COLOR;
            this.updateData(blink, StreamingNumberFormatter.formatVolume(value), this._data.getBlinkColor(newData, totalVolume), false);
            this._data = newData;
        }
        public function loadChangeData(blink:Boolean, value:Number, close:Number=NaN):void{
            var newData:DynamicData = this._data.clone();
            newData.type = DynamicData.TYPE_CHG;
            this._data.type = DynamicData.TYPE_CHG;
            newData.updateData(value);
            this.updateData(blink, StreamingNumberFormatter.formatChange(value), this._data.getBlinkColor(newData, close), true);
            this._data = newData;
        }
        public function loadPChangeData(blink:Boolean, value:Number, close:Number=NaN):void{
            var newData:DynamicData = this._data.clone();
            newData.type = DynamicData.TYPE_PCHG;
            this._data.type = DynamicData.TYPE_PCHG;
            newData.updateData(value);
            this.updateData(blink, StreamingNumberFormatter.formatPChange(value), this._data.getBlinkColor(newData, close), true);
            this._data = newData;
        }
        public function loadChangeAndPChangeData(blink:Boolean, value:Number, pvalue:Number, close:Number=NaN):void{
            var newData:DynamicData = this._data.clone();
            newData.type = DynamicData.TYPE_LABEL;
            this._data.type = DynamicData.TYPE_LABEL;
            newData.updateData(value);
            this.updateData(blink, (((StreamingNumberFormatter.formatChange(value) + " (") + StreamingNumberFormatter.formatPChange(pvalue)) + ")"), this._data.getBlinkColor(newData, close), true);
            this._data = newData;
        }
        public function loadStaticData(blink:Boolean, value:String, refColor:int=-1):void{
            var newData:DynamicData = this._data.clone();
            newData.type = DynamicData.TYPE_LABEL;
            this._data.type = DynamicData.TYPE_LABEL;
            newData.updateData(value);
            this._currentColor = ThemeManager.LABEL_COLOR;
            newData.currentColor = ThemeManager.LABEL_COLOR;
            this.updateData(blink, value, this._data.getBlinkColor(newData, NaN, refColor), true);
            this._data = newData;
        }
        public function setBackgroundColor(color:int):void{
            this.textField.background = true;
            this.textField.backgroundColor = color;
        }
        public function blink(color:int, isChangeColor:Boolean=false):void{
            this.highlight(true);
            this.overlay(color, isChangeColor);
            this._blinkTimer.start();
        }
        public function getCurrentTextColor():int{
            return (this.textField.textColor);
        }
        public function setTextAlign(align:String):void{
            var tf:TextFormat = this.textField.getTextFormat();
            if (tf == null){
                tf = new TextFormat();
            };
            tf.align = align;
            this.textField.setTextFormat(tf);
            this._textAlign = align;
        }
        public function setTextFormat(textFormat:TextFormat):void{
            this.textField.setTextFormat(textFormat);
        }
        public function getStringValue():String{
            return (this.text);
        }
        private function highlight(enable:Boolean):void{
            if (enable){
                this._blinkSquare.graphics.beginFill(ThemeManager.LABEL_BLINK_OVERLAY_COLOR);
                this._blinkSquare.graphics.drawRect(0, (this.textField.y + 2), this.width, (this.textField.textHeight - 2));
                this._blinkSquare.alpha = 0.5;
                this._blinkSquare.graphics.endFill();
            } else {
                this._blinkSquare.graphics.clear();
            };
        }
        private function overlay(blinkColor:int, isChangeColor:Boolean):void{
            this.setTextColor(blinkColor);
            if (!isChangeColor){
                this._overlayTimer.start();
            };
        }
        private function stopBlink(event:TimerEvent):void{
            this.highlight(false);
            this._blinkTimer.stop();
        }
        private function stopOverlay(event:TimerEvent):void{
            this.setTextColor(this._currentColor);
            this._overlayTimer.stop();
        }
        private function setTextColor(color:int):void{
            this.textField.textColor = color;
            var f:TextFormat = this.textField.getTextFormat();
            f.color = color;
            this.textField.setTextFormat(f);
        }
        private function autosize():void{
            var f:TextFormat = this.textField.getTextFormat();
            f.size = this._defaultFontSize;
            this.textField.setTextFormat(f);
            while (this.textField.textWidth > (this.textField.width - 4)) {
                f.size = (int(f.size) - 1);
                this.textField.setTextFormat(f);
                if (f.size < this.MINIMUM_FONT_SIZE){
                    f.size = this._defaultFontSize;
                    this.textField.setTextFormat(f);
                    break;
                };
            };
            this.textField.height = (this.textField.textHeight + 4);
            if (f.size < this._defaultFontSize){
                this.textField.y = ((this._iHeight - this.textField.height) / 2);
            };
        }
        private function elipsis(elipsisLength:int):void{
            if (this.textField.text.length > elipsisLength){
                this.fullString = this.textField.text;
                this.textField.text = this.textField.text.substring(0, elipsisLength).concat("...");
                addEventListener(MouseEvent.MOUSE_OVER, this.onMouseOver);
                addEventListener(MouseEvent.MOUSE_OUT, this.onMouseOut);
            } else {
                removeEventListener(MouseEvent.MOUSE_OVER, this.onMouseOver);
                removeEventListener(MouseEvent.MOUSE_OUT, this.onMouseOut);
            };
        }
        private function onMouseOver(e:MouseEvent):void{
            logger.debug("WHATTT MOUSE OVER");
            if (this._elipsisPoint == null){
                logger.debug("WHATTT MOUSE OVER NULL");
                TooltipService.getInstance().showTooltipWithDirection(DisplayObject(this), this.fullString, this._elipsisDirection);
            } else {
                logger.debug("WHATTT MOUSE OVER NOT NULL");
                TooltipService.getInstance().showTooltipWithLocalPositionAndDirection(DisplayObject(this), this.fullString, this._elipsisPoint, this._elipsisDirection);
            };
        }
        private function onMouseOut(e:MouseEvent):void{
            TooltipService.getInstance().hideTooltip();
        }
        private function updateTextAlign():void{
            this.setTextAlign(this._textAlign);
        }
        public function get maxFontScale():Number{
            return (this._maxFontScale);
        }
        public function set maxFontScale(value:Number):void{
            this._maxFontScale = value;
        }
        public function get currentColor():int{
            return (this._currentColor);
        }
        public function set currentColor(value:int):void{
            this._currentColor = value;
            this.updateColor(false, this._currentColor, true);
        }
        override public function set height(value:Number):void{
            super.height = value;
            this.autosize();
        }
        override public function set width(value:Number):void{
            super.width = value;
            this.autosize();
        }

    }
}//package com.settrade.streaming5.page.component.dynamiclabel 
﻿package com.settrade.streaming5.page.component.dynamiclabel {
    import com.settrade.streaming5.utils.*;
    import flash.text.*;
    import com.settrade.log.logger.*;

    public class DynamicData {

        public static const TYPE_LABEL = 1;
        public static const TYPE_PRICE = 2;
        public static const TYPE_VOLUME = 3;
        public static const TYPE_CHG = 4;
        public static const TYPE_PCHG = 5;
        public static const TYPE_VALUE = 6;

        private static var logger:Logger = new Logger(prototype.constructor);

        protected var _type:int;
        protected var _displayValue:String;
        protected var _numberValue:Number;
        protected var _priceDigit:int;
        public var _currentColor:int;
        protected var _backgroundColor:int;
        protected var _textAlign:String;
        protected var _oldRefValue:Number = 0;

        public function DynamicData(type:int, value, priceDigit:int=2){
            super();
            this._type = type;
            this._backgroundColor = -1;
            this._priceDigit = priceDigit;
            this.updateData(value, priceDigit);
            this.updateType(type);
        }
        public function updateData(value, priceDigit:int=2):void{
            if (value == null){
                this._numberValue = NaN;
                this._displayValue = " ";
            } else {
                if ((value is String)){
                    this._numberValue = NaN;
                    this._displayValue = value;
                } else {
                    if ((value is Number)){
                        this._numberValue = value;
                        if (isNaN(value)){
                            this._displayValue = " ";
                        } else {
                            this._displayValue = this.formatNumber(value, priceDigit);
                        };
                    } else {
                        this._numberValue = NaN;
                        this._displayValue = " ";
                    };
                };
            };
            this._priceDigit = priceDigit;
        }
        public function updateDataWithDynamicData(data:DynamicData, refValue:Number=NaN, refColor:int=-1):void{
            if (data.type == DynamicData.TYPE_LABEL){
                this.updateData(data.displayValue, data.priceDigit);
                if (refColor != -1){
                    this._currentColor = refColor;
                };
            } else {
                if ((((((data.displayValue == "ATO")) || ((data.displayValue == "ATC")))) || ((data.displayValue == "MP")))){
                    this.updateData(data.displayValue, data.priceDigit);
                    if (this.isChangeColor()){
                        this._currentColor = this.getBlinkColor(data, refValue);
                    };
                } else {
                    this.updateData(data.numberValue, data.priceDigit);
                    if (this.isChangeColor()){
                        this._currentColor = this.getBlinkColor(data, refValue);
                    };
                };
            };
        }
        public function clearData():void{
            if (this._type == TYPE_LABEL){
                this.updateData(" ");
            } else {
                this.updateData(NaN);
            };
        }
        public function getBlinkColor(data:DynamicData, refValue:Number=NaN, refColor:int=-1):int{
            var volDiff:Number;
            var totalVolDiff:Number;
            switch (data.type){
                case TYPE_LABEL:
                    if (refColor != -1){
                        return (refColor);
                    };
                    return (data.currentColor);
                case TYPE_PRICE:
                    if (((((!(isNaN(refValue))) && (!((refValue == 0))))) && ((data.numberValue > 0)))){
                        if (data.numberValue > refValue){
                            return (ThemeManager.GAINER_COLOR);
                        };
                        if (data.numberValue < refValue){
                            return (ThemeManager.LOSER_COLOR);
                        };
                        return (ThemeManager.UNCHANGED_COLOR);
                    };
                    return (ThemeManager.LABEL_COLOR);
                case TYPE_VOLUME:
                    if (!isNaN(refValue)){
                        volDiff = Math.abs((this._numberValue - data.numberValue));
                        totalVolDiff = Math.abs((refValue - this._oldRefValue));
                        this._oldRefValue = refValue;
                        if (data.numberValue > this._numberValue){
                            return (ThemeManager.INCREASED_VOLUME_COLOR);
                        };
                        if (data.numberValue < this._numberValue){
                            if (volDiff == totalVolDiff){
                                return (ThemeManager.MATCHED_VOLUME_COLOR);
                            };
                            return (ThemeManager.CANCELLED_VOLUME_COLOR);
                        };
                        return (ThemeManager.UNCHANGED_VOLUME_COLOR);
                    };
                    if (data.numberValue > this._numberValue){
                        return (ThemeManager.INCREASED_VOLUME_COLOR);
                    };
                    if (data.numberValue < this._numberValue){
                        return (ThemeManager.CANCELLED_VOLUME_COLOR);
                    };
                    return (ThemeManager.UNCHANGED_VOLUME_COLOR);
                case TYPE_CHG:
                    if ((Math.round((data.numberValue * 100)) / 100) > 0){
                        return (ThemeManager.GAINER_COLOR);
                    };
                    if ((Math.round((data.numberValue * 100)) / 100) < 0){
                        return (ThemeManager.LOSER_COLOR);
                    };
                    return (ThemeManager.UNCHANGED_COLOR);
                case TYPE_PCHG:
                    if ((Math.round((data.numberValue * 100)) / 100) > 0){
                        return (ThemeManager.GAINER_COLOR);
                    };
                    if ((Math.round((data.numberValue * 100)) / 100) < 0){
                        return (ThemeManager.LOSER_COLOR);
                    };
                    return (ThemeManager.UNCHANGED_COLOR);
                case TYPE_VALUE:
                    if (data.numberValue > this._numberValue){
                        return (ThemeManager.INCREASED_VOLUME_COLOR);
                    };
                    if (data.numberValue < this._numberValue){
                        return (ThemeManager.CANCELLED_VOLUME_COLOR);
                    };
                    return (ThemeManager.UNCHANGED_VOLUME_COLOR);
            };
            return (ThemeManager.GAINER_COLOR);
        }
        public function isChangeColor():Boolean{
            return ((((((((this._type == DynamicData.TYPE_PRICE)) || ((this._type == DynamicData.TYPE_CHG)))) || ((this._type == DynamicData.TYPE_PCHG)))) || ((this._type == DynamicData.TYPE_LABEL))));
        }
        private function formatNumber(value:Number, priceDigit:int):String{
            if (this._type == DynamicData.TYPE_VOLUME){
                return (StreamingNumberFormatter.formatVolume(value));
            };
            if (this._type == DynamicData.TYPE_PRICE){
                if (priceDigit == -1){
                    return (StreamingNumberFormatter.formatPrice(value));
                };
                return (StreamingNumberFormatter.formatPriceWithPrecision(value, priceDigit));
            };
            if (this._type == DynamicData.TYPE_CHG){
                return (StreamingNumberFormatter.formatChange(value));
            };
            if (this._type == DynamicData.TYPE_PCHG){
                return (StreamingNumberFormatter.formatPChange(value));
            };
            if (this._type == DynamicData.TYPE_VALUE){
                return (StreamingNumberFormatter.formatVolume(value));
            };
            return ((value + ""));
        }
        private function updateType(type:int):void{
            switch (type){
                case TYPE_LABEL:
                    this._currentColor = ThemeManager.LABEL_COLOR;
                    this._textAlign = TextFormatAlign.LEFT;
                    break;
                case TYPE_PRICE:
                    this._currentColor = ThemeManager.LABEL_COLOR;
                    this._textAlign = TextFormatAlign.RIGHT;
                    break;
                case TYPE_VOLUME:
                    this._currentColor = ThemeManager.UNCHANGED_VOLUME_COLOR;
                    this._textAlign = TextFormatAlign.RIGHT;
                    break;
                case TYPE_CHG:
                    this._currentColor = ThemeManager.UNCHANGED_COLOR;
                    this._textAlign = TextFormatAlign.RIGHT;
                    break;
                case TYPE_PCHG:
                    this._currentColor = ThemeManager.UNCHANGED_COLOR;
                    this._textAlign = TextFormatAlign.RIGHT;
                    break;
                case TYPE_VALUE:
                    this._currentColor = ThemeManager.LABEL_COLOR;
                    this._textAlign = TextFormatAlign.RIGHT;
                    break;
            };
        }
        public function get currentColor():int{
            return (this._currentColor);
        }
        public function set currentColor(value:int):void{
            this._currentColor = value;
        }
        public function get textAlign():String{
            return (this._textAlign);
        }
        public function set textAlign(value:String):void{
            this._textAlign = value;
        }
        public function get type():int{
            return (this._type);
        }
        public function set type(value:int):void{
            this.updateType(value);
            this._type = value;
        }
        public function get displayValue():String{
            return (this._displayValue);
        }
        public function set displayValue(value:String):void{
            this._displayValue = value;
        }
        public function get numberValue():Number{
            return (this._numberValue);
        }
        public function set numberValue(value:Number):void{
            this._numberValue = value;
        }
        public function get backgroundColor():int{
            return (this._backgroundColor);
        }
        public function set backgroundColor(value:int):void{
            this._backgroundColor = value;
        }
        public function get priceDigit():int{
            return (this._priceDigit);
        }
        public function clone():DynamicData{
            var newData:*;
            if (this._type == DynamicData.TYPE_LABEL){
                newData = new DynamicData(this._type, this._displayValue);
            } else {
                newData = new DynamicData(this._type, this._numberValue);
            };
            newData.updateDataWithDynamicData(this);
            return (newData);
        }

    }
}//package com.settrade.streaming5.page.component.dynamiclabel 
﻿package com.settrade.streaming5.page.component.pricepicker {
    import com.settrade.streaming5.language.*;
    import fl.controls.*;
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.config.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.widget.component.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.page.component.*;
    import com.settrade.streaming5.page.component.volumepicker.*;

    public class PricePicker extends WidgetComponent {

        public var box:MovieClip;
        private var logger:Logger;
        protected var lastRequestId:Number = 0;
        protected var currentCeiling:Number = 0;
        protected var currentFloor:Number = 0;
        protected var currentSpread:Number = 0;
        protected var currentClose:Number = 0;
        protected var currentLast:Number = 0;
        protected var currentBestBid:Number = 0;
        protected var currentBestOffer:Number = 0;
        protected var currentPriceDigit:int = 0;
        public var currentStepPrice:Number = 0;
        protected var _staticDataLoaded:Boolean = false;
        protected var _stepMode:String = "";
        protected var delay:Number = 0;
        protected var selectBestBidFlag:Boolean = false;
        protected var _target:TextInput;
        protected var _nextFocus:DisplayObject = null;
        protected var _currentInstrumentType:InstrumentType;
        private var orderEntryConfig:OrderEntryConfig;
        private var settingManager:SettingManager;
        private var alertService:AlertService;
        private var staticDataService:StaticDataService;
        private var _symbolAutoCompleteList:SymbolAutoComplete;
        protected var _neighborPopup:Array;
        protected var _sideBuyRadio:RadioButton;
        protected var _sideSellRadio:RadioButton;
        private var currentLanguage:ILanguageConfig;

        public function PricePicker(){
            this.logger = new Logger(prototype.constructor);
            this._neighborPopup = new Array();
            addFrameScript(0, this.frame1, 2, this.frame3);
            super();
            this.alertService = AlertService.getInstance();
            this.staticDataService = StaticDataService.getInstance();
            this.settingManager = SettingManager.getInstance();
            this.visible = false;
            this.box.closeButton.addEventListener(MouseEvent.CLICK, this.popPriceCloseClickHandler);
            this.box.minusButton.addEventListener(MouseEvent.CLICK, this.popPriceMinusClickHandler);
            this.box.minusButton.addEventListener(MouseEvent.MOUSE_DOWN, this.popPriceMinusDownHandler);
            this.box.minusButton.addEventListener(MouseEvent.MOUSE_UP, this.popPriceMinusUpHandler);
            this.box.minusButton.addEventListener(MouseEvent.MOUSE_OUT, this.popPriceMinusUpHandler);
            this.box.plusButton.addEventListener(MouseEvent.CLICK, this.popPricePlusClickHandler);
            this.box.plusButton.addEventListener(MouseEvent.MOUSE_DOWN, this.popPricePlusDownHandler);
            this.box.plusButton.addEventListener(MouseEvent.MOUSE_UP, this.popPricePlusUpHandler);
            this.box.plusButton.addEventListener(MouseEvent.MOUSE_OUT, this.popPricePlusUpHandler);
            this.box.priceButton.addEventListener(MouseEvent.CLICK, this.popPricePriceClickHandler);
            this.orderEntryConfig = OrderEntryConfig(this.settingManager.getConfig(ConfigType.ORDER_ENTRY));
            addEventListener(MessageReceiveEvent.STATIC_DATA, this.onReceiveStaticData);
            changeLanguage(LanguageManager.currentLanguageConfig);
        }
        public function initPopupPrice(nowTarget:TextInput, nextFocus:TextInput){
            this._target = nowTarget;
            this._nextFocus = nextFocus;
            this._currentInstrumentType = InstrumentType.NO_TYPE;
            this.visible = false;
            this.gotoAndPlay("hide");
        }
        public function goToUpsideMode(diffX:Number, diffY:Number){
            this.box.gotoAndStop(2);
            this.x = (this.x - diffX);
            this.y = (this.y - diffY);
        }
        public function getStaticData(symbol:String){
            this.logger.debug((("getStaticData(" + symbol) + ")"));
            this._staticDataLoaded = false;
            this.box.priceDisplayBox.text = "";
            this._target.text = "";
            this._currentInstrumentType = InstrumentListService.getInstance().getInstrumentType(symbol);
            if (this._currentInstrumentType.isEquity()){
                this.lastRequestId = this.staticDataService.getStaticData(symbol, System.EQUITY);
            } else {
                if (this._currentInstrumentType.isDerivatives()){
                    this.lastRequestId = this.staticDataService.getStaticData(symbol, System.DERIV);
                };
            };
        }
        public function onReceiveStaticData(e:MessageReceiveEvent):void{
            var message:StaticDataResponseMessage = StaticDataResponseMessage(e.message);
            if (message.requestId == this.lastRequestId){
                this._staticDataLoaded = true;
                this.currentCeiling = message.ceiling;
                this.currentFloor = message.floor;
                this.currentSpread = message.spread;
                this.currentLast = message.last;
                this.currentClose = message.close;
                this.currentBestBid = message.firstBid;
                this.currentBestOffer = message.firstAsk;
                this.currentStepPrice = this.getShowPrice();
                this.currentPriceDigit = message.priceDigit;
                if (this._currentInstrumentType == InstrumentType.EQUITY){
                    this.box.priceDisplayBox.text = ThemeManager.numberFormat(this.currentStepPrice, 2, true);
                } else {
                    this.box.priceDisplayBox.text = ThemeManager.numberFormat(this.currentStepPrice, this.currentPriceDigit, true);
                };
                this.logger.debug(((((((("onReceiveStaticData " + this.currentLast) + ":") + this.currentBestBid) + ":") + this.currentBestOffer) + ":") + this.currentStepPrice));
                this.logger.debug(((("onReceiveStaticData orderEntryConfig.isAutoFillPrice=" + this.orderEntryConfig.isAutoFillPrice) + " : selectBestBidFlag=") + this.selectBestBidFlag));
                if ((((this.orderEntryConfig.isAutoFillPrice == true)) && ((this.selectBestBidFlag == false)))){
                    if (this._currentInstrumentType == InstrumentType.EQUITY){
                        this._target.text = ThemeManager.numberFormat(this.currentStepPrice, 2, true);
                    } else {
                        if (this.currentStepPrice != int.MIN_VALUE){
                            this._target.text = ThemeManager.numberFormat(this.currentStepPrice, this.currentPriceDigit, true);
                        };
                    };
                };
                if (this.selectBestBidFlag == true){
                    this.selectBestBidFlag = false;
                };
            };
        }
        public function getShowPrice():Number{
            var correctPrice:*;
            if ((((this._sideBuyRadio == null)) || ((this._sideSellRadio == null)))){
                return (0);
            };
            var showPrice:Number = 0;
            if (this._currentInstrumentType == InstrumentType.EQUITY){
                if (this._sideBuyRadio.selected == true){
                    if (this.currentBestOffer != 0){
                        showPrice = this.currentBestOffer;
                    } else {
                        if (((!((this.currentLast == 0))) && (!(isNaN(this.currentLast))))){
                            showPrice = this.currentLast;
                        } else {
                            showPrice = this.currentClose;
                        };
                    };
                } else {
                    if (this._sideSellRadio.selected == true){
                        if (this.currentBestBid != 0){
                            showPrice = this.currentBestBid;
                        } else {
                            if (((!((this.currentLast == 0))) && (!(isNaN(this.currentLast))))){
                                showPrice = this.currentLast;
                            } else {
                                showPrice = this.currentClose;
                            };
                        };
                    } else {
                        if (((!((this.currentLast == 0))) && (!(isNaN(this.currentLast))))){
                            showPrice = this.currentLast;
                        } else {
                            showPrice = this.currentClose;
                        };
                    };
                };
                this.logger.debug(((((((((("getShowPrice:" + this.currentBestBid) + ":") + this.currentBestOffer) + ":") + this.currentLast) + ":") + this.currentClose) + "==") + showPrice));
                return (showPrice);
            };
            if (this._sideBuyRadio.selected){
                if (!isNaN(this.currentBestOffer)){
                    showPrice = this.currentBestOffer;
                } else {
                    if (!isNaN(this.currentLast)){
                        showPrice = this.currentLast;
                    } else {
                        showPrice = this.currentClose;
                    };
                };
            } else {
                if (this._sideSellRadio.selected){
                    if (!isNaN(this.currentBestBid)){
                        showPrice = this.currentBestBid;
                    } else {
                        if (!isNaN(this.currentLast)){
                            showPrice = this.currentLast;
                        } else {
                            showPrice = this.currentClose;
                        };
                    };
                } else {
                    if (!isNaN(this.currentLast)){
                        showPrice = this.currentLast;
                    } else {
                        showPrice = this.currentClose;
                    };
                };
            };
            if (isNaN(showPrice)){
                showPrice = int.MIN_VALUE;
            };
            if (((!((this.currentSpread == 0))) && (!((this.currentSpread == int.MIN_VALUE))))){
                correctPrice = (Math.round((showPrice / this.currentSpread)) * this.currentSpread);
                return (correctPrice);
            };
            return (showPrice);
        }
        public function getCurrentStepPrice():void{
            this.logger.debug(this._target.text);
            if ((((this._target.text == "")) || (isNaN(Number(StreamingNumberFormatter.removeComma(this._target.text)))))){
                this.currentStepPrice = this.getShowPrice();
            } else {
                this.currentStepPrice = Number(StreamingNumberFormatter.removeComma(this._target.text));
            };
        }
        public function popPriceCloseClickHandler(event:MouseEvent):void{
            this.visible = false;
            this.alertService.setFocus(this._nextFocus);
        }
        public function popPriceMinusClickHandler(event:MouseEvent):void{
            this._stepMode = "down";
            this.steppingPrice(true);
        }
        function popPriceMinusDownHandler(event:MouseEvent=undefined):void{
            addEventListener(Event.ENTER_FRAME, this.popPriceMinusMouseDown);
            this.delay = 0;
        }
        function popPriceMinusUpHandler(event:MouseEvent=undefined):void{
            removeEventListener(Event.ENTER_FRAME, this.popPriceMinusMouseDown);
            this.delay = 0;
        }
        public function popPricePlusClickHandler(event:MouseEvent):void{
            this._stepMode = "up";
            this.steppingPrice(true);
        }
        function popPricePlusDownHandler(event:MouseEvent=undefined):void{
            addEventListener(Event.ENTER_FRAME, this.popPricePlusMouseDown);
            this.delay = 0;
        }
        function popPricePlusUpHandler(event:MouseEvent=undefined):void{
            removeEventListener(Event.ENTER_FRAME, this.popPricePlusMouseDown);
            this.delay = 0;
        }
        public function popPricePriceClickHandler(event:MouseEvent):void{
            this.target.text = this.box.priceDisplayBox.text;
            this.visible = false;
            this.alertService.setFocus(this._nextFocus);
        }
        public function hidePricePicker():void{
            this.visible = false;
        }
        public function hideAllOtherPopup():void{
            var i:int;
            while (i < this._neighborPopup.length) {
                if ((this._neighborPopup[i] is VolumePicker)){
                    VolumePicker(this._neighborPopup[i]).hideVolumePicker();
                } else {
                    if ((this._neighborPopup[i] is PricePicker)){
                        PricePicker(this._neighborPopup[i]).hidePricePicker();
                    };
                };
                i++;
            };
        }
        function popPricePlusMouseDown(event:Event):void{
            var mod:*;
            if (this.delay > 3){
                mod = (this.delay % 3);
                if (mod == 0){
                    this._stepMode = "up";
                    this.steppingPrice(false);
                };
            };
            this.delay++;
        }
        function popPriceMinusMouseDown(event:Event):void{
            var mod:*;
            if (this.delay > 3){
                mod = (this.delay % 3);
                if (mod == 0){
                    this._stepMode = "down";
                    this.steppingPrice(false);
                };
            };
            this.delay++;
        }
        public function setDisplayPrice():void{
            if (this._currentInstrumentType == InstrumentType.EQUITY){
                this.box.priceDisplayBox.text = ThemeManager.numberFormat(this.currentStepPrice, 2, true);
            } else {
                this.box.priceDisplayBox.text = ThemeManager.numberFormat(this.currentStepPrice, this.currentPriceDigit, true);
            };
        }
        public function steppingPrice(fromClickFlag:Boolean=false):void{
            var spread:Number;
            var newVal:Number;
            var newSpreadDown:Number;
            if (this._staticDataLoaded){
                if (((!((this.currentSpread == 0))) || (this._currentInstrumentType.isDerivatives()))){
                    if (this._stepMode == "up"){
                        newVal = (this.currentStepPrice + this.currentSpread);
                    } else {
                        if (this._stepMode == "down"){
                            newVal = (this.currentStepPrice - this.currentSpread);
                        };
                    };
                } else {
                    spread = this.getSpread(this.currentStepPrice);
                    newVal = 0;
                    if (this._stepMode == "up"){
                        newVal = (this.currentStepPrice + spread);
                    } else {
                        if (this._stepMode == "down"){
                            newVal = (this.currentStepPrice - spread);
                            newSpreadDown = this.getSpread(newVal);
                            if (newSpreadDown != spread){
                                newVal = (this.currentStepPrice - newSpreadDown);
                            };
                        };
                    };
                };
                if ((((newVal < this.currentFloor)) || ((newVal > this.currentCeiling)))){
                    if (fromClickFlag){
                        this.alertService.alert(StringUtil.generateStringWithArguments(this.currentLanguage.ALERT_INVALID_PRICE, ThemeManager.numberFormat(this.currentFloor, 2, true), ThemeManager.numberFormat(this.currentCeiling, 2, true)), this._target);
                    };
                    if (newVal < this.currentFloor){
                        this.currentStepPrice = this.currentFloor;
                    } else {
                        this.currentStepPrice = this.currentCeiling;
                    };
                } else {
                    this.currentStepPrice = newVal;
                };
                if (this._currentInstrumentType == InstrumentType.EQUITY){
                    this._target.text = ThemeManager.numberFormat(this.currentStepPrice, 2, true);
                    this.box.priceDisplayBox.text = ThemeManager.numberFormat(this.currentStepPrice, 2, true);
                } else {
                    this._target.text = ThemeManager.numberFormat(this.currentStepPrice, this.currentPriceDigit, true);
                    this.box.priceDisplayBox.text = ThemeManager.numberFormat(this.currentStepPrice, this.currentPriceDigit, true);
                };
            };
        }
        public function showFetchedPrice():void{
            this.currentStepPrice = this.getShowPrice();
            if (this.orderEntryConfig.isAutoFillPrice == true){
                if (this._currentInstrumentType == InstrumentType.EQUITY){
                    this._target.text = ThemeManager.numberFormat(this.currentStepPrice, 2, true);
                } else {
                    if (isNaN(Number(this.currentStepPrice))){
                        this._target.text = "";
                    } else {
                        this._target.text = ThemeManager.numberFormat(this.currentStepPrice, this.currentPriceDigit, true);
                    };
                };
            };
        }
        public function checkUpsideMode(upsideMode:Boolean, diffX:Number, diffY:Number):void{
            if (((((this.getBounds(stage).y + this.height) > (34 + (StreamingAttribute.widgetGridSize.height * 153)))) && ((upsideMode == true)))){
                this.goToUpsideMode(diffX, diffY);
            };
        }
        function getSpread(current_price:Number):Number{
            var spread:Number;
            if (current_price < 2){
                spread = 0.01;
            } else {
                if ((((current_price >= 2)) && ((current_price < 5)))){
                    spread = 0.02;
                } else {
                    if ((((current_price >= 5)) && ((current_price < 10)))){
                        spread = 0.05;
                    } else {
                        if ((((current_price >= 10)) && ((current_price < 25)))){
                            spread = 0.1;
                        } else {
                            if ((((current_price >= 25)) && ((current_price < 100)))){
                                spread = 0.25;
                            } else {
                                if ((((current_price >= 100)) && ((current_price < 200)))){
                                    spread = 0.5;
                                } else {
                                    if ((((current_price >= 200)) && ((current_price < 400)))){
                                        spread = 1;
                                    } else {
                                        spread = 2;
                                    };
                                };
                            };
                        };
                    };
                };
            };
            return (spread);
        }
        public function get target():TextInput{
            return (this._target);
        }
        public function set target(value:TextInput):void{
            this._target = value;
        }
        public function get nextFocus():DisplayObject{
            return (this._nextFocus);
        }
        public function set nextFocus(value:DisplayObject):void{
            this._nextFocus = value;
        }
        public function get currentInstrumentType():InstrumentType{
            return (this._currentInstrumentType);
        }
        public function set currentInstrumentType(value:InstrumentType):void{
            this._currentInstrumentType = value;
        }
        public function get stepMode():String{
            return (this._stepMode);
        }
        public function set stepMode(value:String):void{
            this._stepMode = value;
        }
        public function setNeighborPopup(allPopup:Array):void{
            var i:int;
            while (i < allPopup.length) {
                if (allPopup[i] != this){
                    this._neighborPopup.push(allPopup[i]);
                };
                i++;
            };
        }
        public function setRadioBuySell(buy:RadioButton, sell:RadioButton):void{
            this._sideBuyRadio = buy;
            this._sideSellRadio = sell;
            var a:Boolean;
            var b:Boolean;
            if (this._sideBuyRadio != null){
                a = true;
            };
            if (this._sideSellRadio != null){
                b = true;
            };
            this.logger.debug(((("Set RadioButton : " + a) + " / ") + b));
        }
        public function get staticDataLoaded():Boolean{
            return (this._staticDataLoaded);
        }
        public function set staticDataLoaded(value:Boolean):void{
            this._staticDataLoaded = value;
        }
        override protected function onChangeLanguage(language:ILanguageConfig):void{
            this.currentLanguage = language;
        }
        function frame1(){
            stop();
        }
        function frame3(){
            stop();
        }

    }
}//package com.settrade.streaming5.page.component.pricepicker 
﻿package com.settrade.streaming5.page.component.twolevelcombobox {
    import fl.controls.listClasses.*;
    import flash.display.*;
    import com.settrade.streaming5.utils.*;
    import __AS3__.vec.*;
    import com.settrade.log.logger.*;

    public class StreamingComboBoxCellRenderer extends CellRenderer implements ICellRenderer {

        private static var logger:Logger = new Logger(prototype.constructor);

        protected var _hasSecondLevelList:Boolean = false;
        protected var _arrow;

        public function StreamingComboBoxCellRenderer(){
            this._arrow = new Sprite();
            super();
            addChild(this._arrow);
        }
        override public function set data(value:Object):void{
            super.data = value;
            this.mouseEnabled = !(value["disabled"]);
            this._hasSecondLevelList = value["hasSecondLevelList"];
        }
        override protected function drawBackground():void{
            var vertices:Vector.<Number>;
            super.drawBackground();
            this._arrow.graphics.clear();
            if (this._hasSecondLevelList){
                vertices = new Vector.<Number>();
                vertices.push((this.width - 10), (this.height * 0.25));
                vertices.push((this.width - 10), (this.height * 0.75));
                vertices.push((this.width - 5), (this.height * 0.5));
                this._arrow.graphics.beginFill(0xFFFFFF);
                this._arrow.graphics.drawTriangles(vertices);
                this._arrow.graphics.endFill();
            };
        }
        override protected function drawLayout():void{
            super.drawLayout();
            if (data["disabled"]){
                textField.setTextFormat(ThemeManager.defaultDropdownSeparatorFont);
            } else {
                textField.setTextFormat(ThemeManager.defaultDropdownFont);
            };
        }

    }
}//package com.settrade.streaming5.page.component.twolevelcombobox 
﻿package com.settrade.streaming5.page.component.twolevelcombobox {
    import fl.controls.*;
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import flash.utils.*;
    import com.settrade.streaming5.common.*;
    import flash.text.*;
    import com.settrade.streaming5.dispatcher.*;
    import fl.data.*;
    import fl.events.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;

    public class StreamingComboBox extends ComboBox {

        private static var logger:Logger = new Logger(prototype.constructor);

        const SECOND_LEVEL_ROW_COUNT:int = 6;

        protected var _selectedFirstLevelString:String = "";
        protected var _selectedFirstLevelIndex:int = -1;
        protected var _selectedSecondLevelString:String = "";
        protected var _selectedSecondLevelIndex:int = -1;
        protected var _filterComboBoxVPosition:int = -1;
        protected var _tempSelectedIndex:int = -1;
        protected var _itemHasTwoLevelDictionary:Dictionary;
        protected var _secondLevelList:List;
        protected var _isEnableSecondLevelList:Boolean = false;
        protected var _onSecondLevelListSelectedCallback:Function;
        protected var _secondLabelTextField:TextField;

        public function StreamingComboBox(){
            this._itemHasTwoLevelDictionary = new Dictionary();
            super();
            this.dropdown.setStyle("cellRenderer", StreamingComboBoxCellRenderer);
        }
        override public function open():void{
            var ev:ListEvent;
            super.open();
            stage.addEventListener(MouseEvent.MOUSE_DOWN, this.onStageClick);
            logger.debug(((("Root Width :: " + this.root.width) + " / Stage Width :: ") + stage.width));
            if ((this.dropdown.getBounds(stage).y + this.dropdown.height) > (34 + (StreamingAttribute.widgetGridSize.height * 153))){
                this.dropdown.y = (this.y - this.dropdown.height);
            };
            var message:PopupStateChangeMessage = new PopupStateChangeMessage(PopupState.SHOWING, DisplayObject(this.dropdown));
            MessageDispatcher.getInstance().notifyControlMessage(message);
            if (this._selectedFirstLevelString != ""){
                ev = new ListEvent(ListEvent.ITEM_ROLL_OVER, false, false, -1, this.selectedIndex);
                this.onComboBoxListRollOver(ev);
            };
        }
        override public function close():void{
            super.close();
            stage.removeEventListener(MouseEvent.MOUSE_DOWN, this.onStageClick);
            var message:PopupStateChangeMessage = new PopupStateChangeMessage(PopupState.HIDING, DisplayObject(this.dropdown));
            MessageDispatcher.getInstance().notifyControlMessage(message);
            if (this._isEnableSecondLevelList){
                this._secondLevelList.visible = false;
            };
        }
        override protected function onListChange(event:Event):void{
            var listEvent:ListEvent;
            var list:List;
            logger.info(event.toString());
            if (event.type == ListEvent.ITEM_CLICK){
                listEvent = ListEvent(event);
                if (this._itemHasTwoLevelDictionary[listEvent.item.data]){
                    logger.info((list.selectedItem.data + " is two level"));
                } else {
                    logger.info((list.selectedItem.data + " is normal"));
                    super.onListChange(event);
                };
            } else {
                if (event.type == Event.CHANGE){
                    list = List(event.target);
                    if (this._itemHasTwoLevelDictionary[list.selectedItem.data]){
                        logger.info((list.selectedItem.data + " is two level"));
                    } else {
                        logger.info((list.selectedItem.data + " is normal"));
                        super.onListChange(event);
                    };
                };
            };
        }
        public function forceClose(e:TimerEvent=null):void{
            this.close();
        }
        override protected function onStageClick(e:MouseEvent):void{
            if (((this.contains(DisplayObject(e.target))) || (list.contains(DisplayObject(e.target))))){
                return;
            };
            super.onStageClick(e);
        }
        override protected function focusOutHandler(event:FocusEvent):void{
        }
        public function initTwoLevelList(twoLevelDictionary:Dictionary, onSecondLevelListSelectedCallback:Function=null):void{
            if (((!((this._secondLevelList == null))) && (contains(this._secondLevelList)))){
                removeChild(this._secondLevelList);
            };
            this._secondLevelList = new List();
            this._secondLevelList.y = this.height;
            this._secondLevelList.width = (this.width * 0.8);
            this._secondLevelList.visible = false;
            logger.info(("Get Bounds :: x = " + this.getBounds(stage).x));
            logger.info(("Dropdown Width = " + this.dropdownWidth));
            if ((this.getBounds(stage).x + (2 * this.dropdownWidth)) > (StreamingAttribute.widgetGridSize.width * 419)){
                this._secondLevelList.x = -(this._secondLevelList.width);
            } else {
                this._secondLevelList.x = this.width;
            };
            addChild(this._secondLevelList);
            this._secondLevelList.addEventListener(ListEvent.ITEM_CLICK, this.onSecondLevelListSelected);
            this._secondLevelList.addEventListener(ListEvent.ITEM_ROLL_OVER, this.onSecondLevelListRollOver);
            this._secondLevelList.addEventListener(ListEvent.ITEM_ROLL_OUT, this.onSecondLevelListRollOut);
            this._secondLevelList.setRendererStyle("textFormat", ThemeManager.defaultDropdownFont);
            this._secondLevelList.setRendererStyle("embedFonts", true);
            this._secondLevelList.setStyle("cellRenderer", StreamingComboBoxCellRenderer);
            if (((!((this._secondLabelTextField == null))) && (contains(this._secondLabelTextField)))){
                removeChild(this._secondLabelTextField);
            };
            this._secondLabelTextField = new TextField();
            this._secondLabelTextField.height = 25;
            this._secondLabelTextField.visible = false;
            addChild(this._secondLabelTextField);
            this._isEnableSecondLevelList = true;
            addEventListener(Event.CHANGE, this.onComboBoxChange);
            addEventListener(ListEvent.ITEM_ROLL_OVER, this.onComboBoxListRollOver);
            this._itemHasTwoLevelDictionary = twoLevelDictionary;
            this._onSecondLevelListSelectedCallback = onSecondLevelListSelectedCallback;
        }
        public function setSecondLevelListProvider(provider:DataProvider):void{
            this._secondLevelList.dataProvider = provider;
            this._secondLevelList.rowCount = Math.min(this._secondLevelList.dataProvider.length, this.SECOND_LEVEL_ROW_COUNT);
        }
        private function onComboBoxListRollOver(event:ListEvent, isShowSecondLevelList:Boolean=true):void{
            if (this._itemHasTwoLevelDictionary[getItemAt(int(event.rowIndex)).data] != null){
                this._selectedFirstLevelString = getItemAt(int(event.rowIndex)).data;
                this._selectedFirstLevelIndex = int(event.rowIndex);
                this._secondLevelList.dataProvider = this._itemHasTwoLevelDictionary[getItemAt(int(event.rowIndex)).data];
                this._secondLevelList.rowCount = Math.min(this._secondLevelList.dataProvider.length, this.SECOND_LEVEL_ROW_COUNT);
                if (((!((this._selectedSecondLevelIndex == -1))) && ((((this._selectedSecondLevelIndex < this._secondLevelList.dataProvider.length)) && ((this._selectedSecondLevelString == this._secondLevelList.getItemAt(this._selectedSecondLevelIndex).data)))))){
                    this._secondLevelList.selectedIndex = this._selectedSecondLevelIndex;
                };
                this._secondLevelList.y = (this.dropdown.getBounds(this).y + ((int(event.rowIndex) * this.dropdown.rowHeight) - this.dropdown.verticalScrollPosition));
                this._secondLevelList.visible = isShowSecondLevelList;
            } else {
                this._selectedFirstLevelString = "";
                this._selectedFirstLevelIndex = -1;
                this._secondLevelList.visible = false;
            };
        }
        private function onComboBoxChange(event:Event):void{
            if (this._itemHasTwoLevelDictionary[selectedItem.data] != null){
                logger.debug("No intend to close");
            } else {
                this.forceClose();
            };
            this._secondLabelTextField.visible = false;
        }
        private function onSecondLevelListSelected(event:ListEvent):void{
            var xPos:Number;
            var yPos:Number;
            var textWidth:Number;
            var textHeight:Number;
            this.forceClose();
            this._secondLabelTextField.visible = false;
            this._onSecondLevelListSelectedCallback(this._selectedFirstLevelString, this._secondLevelList.getItemAt(int(event.rowIndex)));
            this.selectedIndex = this._selectedFirstLevelIndex;
            this._selectedSecondLevelString = this._secondLevelList.getItemAt(int(event.rowIndex)).data;
            this._selectedSecondLevelIndex = int(event.rowIndex);
            if (this._selectedSecondLevelIndex != -1){
                this._secondLabelTextField.defaultTextFormat = ThemeManager.defaultDropdownFont;
                this._secondLabelTextField.embedFonts = true;
                this._secondLabelTextField.text = this._selectedFirstLevelString;
                xPos = (this._secondLabelTextField.textWidth + 4);
                yPos = 2;
                textWidth = ((this.textField.width - this._secondLabelTextField.textWidth) + 5);
                textHeight = this.height;
                this._secondLabelTextField.text = ((" (" + this._selectedSecondLevelString) + ")");
                this._secondLabelTextField.width = textWidth;
                this._secondLabelTextField.mouseEnabled = false;
                this._secondLabelTextField.x = xPos;
                this._secondLabelTextField.y = yPos;
                this._secondLabelTextField.visible = true;
            };
        }
        private function onSecondLevelListRollOut(e:ListEvent):void{
        }
        private function onSecondLevelListRollOver(e:ListEvent):void{
        }
        override public function set selectedIndex(value:int):void{
            super.selectedIndex = value;
            if (this._secondLabelTextField != null){
                this._secondLabelTextField.visible = false;
            };
        }
        public function setTwoLevelSelectedIndex(firstLevelIndex:int, secondLevelIndex:int):void{
            var ev:ListEvent = new ListEvent(ListEvent.ITEM_ROLL_OVER, false, false, -1, firstLevelIndex);
            this.onComboBoxListRollOver(ev, false);
            ev = new ListEvent(ListEvent.ITEM_CLICK, false, false, -1, secondLevelIndex);
            this.onSecondLevelListSelected(ev);
        }
        public function get selectedSecondLevelIndex():int{
            return (this._selectedSecondLevelIndex);
        }
        public function get selectedFirstLevelString():String{
            return (this._selectedFirstLevelString);
        }
        public function getSelectedItem():Object{
            var dataProvider:DataProvider;
            if (this._itemHasTwoLevelDictionary[this._selectedFirstLevelString] != null){
                dataProvider = this._itemHasTwoLevelDictionary[this._selectedFirstLevelString];
                return (dataProvider.getItemAt(this._selectedSecondLevelIndex));
            };
            return (selectedItem);
        }
        public function getSelectedIndex():int{
            if (this._itemHasTwoLevelDictionary[this._selectedFirstLevelString] != null){
                return (this._selectedSecondLevelIndex);
            };
            return (selectedIndex);
        }

    }
}//package com.settrade.streaming5.page.component.twolevelcombobox 
﻿package com.settrade.streaming5.page.component.tooltip {
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;

    public class TooltipArrow extends MovieClip {

        protected var _direction:Direction;
        private var _arrowBase:Number;
        private var _arrowHeight:Number;

        public function TooltipArrow(){
            super();
            this._arrowBase = this.width;
            this._arrowHeight = this.height;
            this.mouseEnabled = false;
            this._direction = Direction.UP;
            this.rotateByDirection();
        }
        private function rotateByDirection():void{
            switch (this._direction){
                case Direction.UP:
                    this.rotation = 0;
                    break;
                case Direction.DOWN:
                    this.rotation = 180;
                    break;
                case Direction.LEFT:
                    this.rotation = 270;
                    break;
                case Direction.RIGHT:
                    this.rotation = 90;
                    break;
            };
        }
        public function set direction(direction:Direction):void{
            this._direction = direction;
            this.rotateByDirection();
        }
        public function get direction():Direction{
            return (this._direction);
        }
        public function get arrowBase():Number{
            return (this._arrowBase);
        }
        public function get arrowHeight():Number{
            return (this._arrowHeight);
        }

    }
}//package com.settrade.streaming5.page.component.tooltip 
﻿package com.settrade.streaming5.page.component.tooltip {
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;

    public class Tooltip extends MovieClip {

        public var content:TooltipContent;
        public var arrow:TooltipArrow;
        private var _direction:Direction;
        private var _contentPosition:Number;

        public function Tooltip(){
            super();
            this.mouseEnabled = false;
            this._direction = Direction.UP;
            this._contentPosition = 0.5;
            this.redraw();
        }
        public function clear():void{
            this.content.text = "";
        }
        public function redraw():void{
            this.redrawDirection();
        }
        private function getArrowDirection():Direction{
            switch (this._direction){
                case Direction.UP:
                    return (Direction.DOWN);
                case Direction.DOWN:
                    return (Direction.UP);
                case Direction.LEFT:
                    return (Direction.RIGHT);
                case Direction.RIGHT:
                    return (Direction.LEFT);
                default:
                    return (Direction.DOWN);
            };
        }
        private function redrawDirection():void{
            this.redrawDirectionArrow();
            this.arragePosition();
        }
        private function redrawDirectionArrow():void{
            this.arrow.direction = this.getArrowDirection();
        }
        private function arragePosition():void{
            this.arrangecontentPosition();
            this.arrangeContentPosition();
        }
        private function arrangeContentPosition():void{
            switch (this._direction){
                case Direction.UP:
                    this.content.x = (((-((this.content.targetWidth - (this.arrow.arrowBase + (this.content.getHorizontalCornerMargin() * 2)))) * this._contentPosition) - (this.arrow.arrowBase / 2)) - this.content.getHorizontalCornerMargin());
                    this.content.y = (-(this.arrow.arrowHeight) - this.content.targetHeight);
                    break;
                case Direction.DOWN:
                    this.content.x = (((-((this.content.targetWidth - (this.arrow.arrowBase + (this.content.getHorizontalCornerMargin() * 2)))) * this._contentPosition) - (this.arrow.arrowBase / 2)) - this.content.getHorizontalCornerMargin());
                    this.content.y = this.arrow.arrowHeight;
                    break;
                case Direction.LEFT:
                    this.content.x = (-(this.arrow.arrowHeight) - this.content.targetWidth);
                    this.content.y = (((-((this.content.targetHeight - (this.arrow.arrowBase + (this.content.getVerticalCornerMargin() * 2)))) * this._contentPosition) - (this.arrow.arrowBase / 2)) - this.content.getVerticalCornerMargin());
                    break;
                case Direction.RIGHT:
                    this.content.x = this.arrow.arrowHeight;
                    this.content.y = (((-((this.content.targetHeight - (this.arrow.arrowBase + (this.content.getVerticalCornerMargin() * 2)))) * this._contentPosition) - (this.arrow.arrowBase / 2)) - this.content.getVerticalCornerMargin());
                    break;
            };
        }
        private function arrangecontentPosition():void{
            switch (this._direction){
                case Direction.UP:
                    this.arrow.x = 0;
                    this.arrow.y = (-(this.arrow.arrowHeight) / 2);
                    break;
                case Direction.DOWN:
                    this.arrow.x = 0;
                    this.arrow.y = (this.arrow.arrowHeight / 2);
                    break;
                case Direction.LEFT:
                    this.arrow.x = (-(this.arrow.arrowHeight) / 2);
                    this.arrow.y = 0;
                    break;
                case Direction.RIGHT:
                    this.arrow.x = (this.arrow.arrowHeight / 2);
                    this.arrow.y = 0;
                    break;
            };
        }
        public function get direction():Direction{
            return (this._direction);
        }
        public function set direction(value:Direction):void{
            this._direction = value;
        }
        public function set text(text:String):void{
            this.content.text = text;
        }
        public function get contentPosition():Number{
            return (this._contentPosition);
        }
        public function set contentPosition(value:Number):void{
            this._contentPosition = value;
            if (this.contentPosition > 1){
                this.contentPosition = 1;
            } else {
                if (this.contentPosition < 0){
                    this.contentPosition = 0;
                };
            };
        }

    }
}//package com.settrade.streaming5.page.component.tooltip 
﻿package com.settrade.streaming5.page.component.tooltip {
    import flash.display.*;
    import flash.geom.*;
    import flash.text.*;

    public class TooltipContent extends MovieClip {

        private const TOP_MARGIN:Number = 0;
        private const SIDE_MARGIN:Number = 8;
        private const CORNER_MARGIN:Number = 4;
        private const MIN_WIDTH:Number = 0;
        private const MIN_HEIGHT:Number = 0;

        public var background:TooltipBackground;
        public var tooltipText:TextField;
        private var _targetWidth:Number;
        private var _targetHeight:Number;
        private var _originalWidth:Number;
        private var _originalHeight:Number;

        public function TooltipContent(){
            super();
            this._originalWidth = this.width;
            this._originalHeight = this.height;
            this.background.scale9Grid = new Rectangle(this.CORNER_MARGIN, this.CORNER_MARGIN, (this.background.width - (this.CORNER_MARGIN * 2)), (this.background.height - (this.CORNER_MARGIN * 2)));
            this.mouseEnabled = false;
            this.tooltipText.mouseEnabled = false;
            this.background.mouseEnabled = false;
            this.tooltipText.wordWrap = false;
            this.tooltipText.autoSize = TextFieldAutoSize.LEFT;
            this.tooltipText.x = this.SIDE_MARGIN;
            this.tooltipText.y = this.TOP_MARGIN;
        }
        public function set text(text:String):void{
            this.tooltipText.text = text;
            this.calculateTargetWidth();
            this.redraw();
        }
        private function calculateTargetWidth():void{
            this._targetWidth = (this.tooltipText.textWidth + (this.SIDE_MARGIN * 2));
            this._targetHeight = (this.tooltipText.height + (this.TOP_MARGIN * 2));
            this._targetWidth = (((this._targetWidth > this.MIN_WIDTH)) ? this._targetWidth : this.MIN_WIDTH);
            this._targetHeight = (((this._targetHeight > this.MIN_HEIGHT)) ? this._targetHeight : this.MIN_HEIGHT);
        }
        public function get targetWidth():Number{
            return (this._targetWidth);
        }
        public function get targetHeight():Number{
            return (this._targetHeight);
        }
        private function redraw():void{
            this.resizeBackground();
        }
        private function resizeBackground():void{
            this.background.width = this._targetWidth;
            this.background.height = this._targetHeight;
        }
        public function getVerticalCornerMargin():Number{
            return (this.CORNER_MARGIN);
        }
        public function getHorizontalCornerMargin():Number{
            return (this.CORNER_MARGIN);
        }

    }
}//package com.settrade.streaming5.page.component.tooltip 
﻿package com.settrade.streaming5.page.component.headerpage {
    import flash.display.*;
    import flash.events.*;
    import com.settrade.streaming5.manager.*;
    import flash.text.*;

    public class SubButton extends MovieClip {

        public var displayName:TextField;
        public var icon_new:MovieClip;
        private var pageManager:PageManager;
        private var pageName:String;
        private var pageId:String;
        private var forceActivateButton:Function;

        public function SubButton(pageName:String, pageId:String, forceActivateButton:Function){
            super();
            this.pageManager = PageManager.getInstance();
            this.pageName = pageName;
            this.pageId = pageId;
            this.forceActivateButton = forceActivateButton;
            this.displayName.text = pageName;
            tabEnabled = false;
            addEventListener(MouseEvent.MOUSE_DOWN, this.buttonClickHandler);
            addEventListener(MouseEvent.MOUSE_OVER, this.buttonOverHandler);
            addEventListener(MouseEvent.MOUSE_OUT, this.buttonOutHandler);
        }
        public function newBadge(show:Boolean=true):void{
            this.icon_new.visible = show;
        }
        private function buttonOutHandler(e:MouseEvent):void{
        }
        private function buttonOverHandler(e:MouseEvent):void{
        }
        private function buttonClickHandler(e:MouseEvent):void{
            this.forceActivateButton((this.pageName == "Settings"));
            this.pageManager.showPage(this.pageId);
        }

    }
}//package com.settrade.streaming5.page.component.headerpage 
﻿package com.settrade.streaming5.page.component.headerpage {
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import com.settrade.streaming5.widget.config.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.common.*;
    import flash.text.*;
    import com.settrade.streaming5.page.*;
    import com.settrade.streaming5.dispatcher.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;

    public class MainButton extends StreamingMovieClip {

        private static var logger:Logger = new Logger(prototype.constructor);

        public var highlight:SimpleButton;
        public var displayName:TextField;
        public var icon_new:MovieClip;
        public var line1:MovieClip;
        public var line2:MovieClip;
        public var moreArrow:MovieClip;
        public var subButtonContainer:MovieClip;
        private var pageManager:PageManager;
        private var activateButton:Function;
        private var pageId:String;
        private var index:int;
        private var doesClickMenu:Boolean;
        private var _currentPageName:String;

        public function MainButton(){
            super();
            addFrameScript(0, this.frame1, 9, this.frame10, 19, this.frame20);
            visible = false;
            tabEnabled = false;
            this.doesClickMenu = false;
            this.highlight.addEventListener(MouseEvent.MOUSE_DOWN, this.buttonClickHandler);
            this.pageManager = PageManager.getInstance();
            this.subButtonContainer.visible = false;
            addEventListener(MessageControlEvent.THEME_CHANGE, this.changeTheme);
        }
        private function changeTheme(e:MessageControlEvent):void{
            ThemeManager.changeClipBackground(getChildByName("line1"), ThemeManager.HEADERPAGE_SEPERATOR);
            ThemeManager.changeClipBackground(getChildByName("line2"), ThemeManager.HEADERPAGE_SEPERATOR);
            TextField(this.displayName).textColor = ThemeManager.HEADERPAGE_COLOR;
        }
        public function initialize(index:int, pageName:String, pageId:String, activateButton:Function):void{
            visible = true;
            this.index = index;
            this.activateButton = activateButton;
            this.pageId = pageId;
            this.displayName.text = pageName;
            while (this.displayName.textWidth > 85) {
                this.displayName.text = this.displayName.text.substring(0, (this.displayName.text.length - 1));
            };
            this.displayName.autoSize = TextFieldAutoSize.CENTER;
            this.setCurrentPageName(this.displayName.text);
        }
        public function deinitialize():void{
            visible = false;
            this.subButtonContainer.visible = false;
        }
        public function newBadge(show:Boolean=true):void{
            this.icon_new.visible = show;
        }
        public function setLanguage(display:String, isEnglish:Boolean){
            this.displayName.text = display;
            this.displayName.embedFonts = isEnglish;
        }
        public function initMoreMenu(index:int, pageList:Array, activateButton:Function){
            var page:WidgetPageConfig;
            var subButton:SubButton;
            visible = true;
            this.index = index;
            this.activateButton = activateButton;
            this.displayName.text = "More";
            this.setCurrentPageName("More");
            this.subButtonContainer.removeChildren();
            var buttonCount:int;
            var i:int;
            while (i < pageList.length) {
                page = WidgetPageConfig(pageList[i]);
                subButton = new SubButton(page.name, page.id, this.forceActivateButton);
                subButton.x = 0;
                subButton.y = ((buttonCount * subButton.height) - 0.1);
                this.subButtonContainer.addChildAt(subButton, 0);
                buttonCount++;
                if (((StreamingAttribute.isChangeMajorVersion) && ((i == pageList.indexOf(WidgetPageManager.SETTINGS))))){
                    subButton.newBadge();
                };
                i++;
            };
            addEventListener(MouseEvent.MOUSE_OVER, this.buttonOverHandler);
            addEventListener(MouseEvent.MOUSE_OUT, this.buttonOutHandler);
        }
        public function removeMoreMenu(){
            this.subButtonContainer.removeChildren();
            this.subButtonContainer.visible = false;
            removeEventListener(MouseEvent.MOUSE_OVER, this.buttonOverHandler);
            removeEventListener(MouseEvent.MOUSE_OUT, this.buttonOutHandler);
        }
        public function setCurrentPageName(pageName:String):void{
            this._currentPageName = pageName;
        }
        private function buttonOutHandler(e:MouseEvent):void{
            var message:PopupStateChangeMessage;
            logger.debug("button out");
            this.subButtonContainer.visible = false;
            if (!this.doesClickMenu){
                message = new PopupStateChangeMessage(PopupState.HIDING, this);
                MessageDispatcher.getInstance().notifyControlMessage(message);
            } else {
                this.doesClickMenu = false;
            };
        }
        private function buttonOverHandler(e:MouseEvent):void{
            logger.debug("button over");
            this.subButtonContainer.visible = true;
            var message:PopupStateChangeMessage = new PopupStateChangeMessage(PopupState.SHOWING, this);
            MessageDispatcher.getInstance().notifyControlMessage(message);
        }
        private function buttonClickHandler(e:MouseEvent):void{
            logger.debug("button click");
            if (((!((this._currentPageName == "Settings"))) && (!((this._currentPageName == "More"))))){
                this.activateButton(this.index);
            };
            this.doesClickMenu = true;
            this.pageManager.showPage(this.pageId);
        }
        private function forceActivateButton(isSettings:Boolean){
            logger.debug("button force click");
            if (!isSettings){
                this.activateButton(this.index);
                this.subButtonContainer.visible = false;
            };
            this.doesClickMenu = isSettings;
        }
        public function get currentPageName():String{
            return (this._currentPageName);
        }
        public function set currentPageName(value:String):void{
            this._currentPageName = value;
        }
        function frame1(){
            stop();
        }
        function frame10(){
            stop();
        }
        function frame20(){
            gotoAndStop(1);
        }

    }
}//package com.settrade.streaming5.page.component.headerpage 
﻿package com.settrade.streaming5.page.component {
    import com.settrade.streaming5.language.*;
    import fl.controls.*;
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import com.settrade.streaming5.page.component.dynamiclabel.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.config.*;
    import flash.geom.*;
    import com.settrade.streaming5.service.*;
    import flash.text.*;
    import com.settrade.streaming5.page.*;
    import com.settrade.streaming5.widget.component.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.streaming5.dispatcher.*;
    import fl.data.*;
    import fl.managers.*;
    import fl.events.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;
    import flash.ui.*;

    public class SymbolAutoComplete extends StreamingMovieClip {

        private static var logger:Logger = new Logger(prototype.constructor);

        const SYMBOL_SHORTCUT_PATTERN:String = "@args → @args";

        public var enterSymbolFull:MovieClip;
        public var enterSymbolOverlayFull:MovieClip;
        public var list:List;
        public var symbolInputBox:TextInput;
        public var enterSymbolOverlayShort:MovieClip;
        public var symbolSelectorButton:search_icon;
        public var enterSymbolShort:MovieClip;
        protected var _instrumentList:Array;
        protected var _shortcutInstrumentList:Array;
        protected var _displayList:Array;
        protected var _callbackFunction:Function;
        protected var _isAutoFill:Boolean = true;
        protected var _isShowLabel:Boolean = true;
        protected var _isEnabled:Boolean = true;
        protected var _isAllowEmpty:Boolean = false;
        protected var _isSmallMode:Boolean = false;
        protected var _isInit:Boolean = false;
        protected var _currentValidationId:Number = -1;
        protected var _symbolData:DynamicData;
        protected var symbolLabel:DynamicLabel;
        protected var _listPageSize:int;
        protected var _currentSymbol:String = "";
        protected var _currentSymbolSelectorSystem:System = null;
        protected var _hasExceptionInstrumentList:Boolean;
        protected var instrumentListService:InstrumentListService;
        protected var alertService:AlertService;
        protected var instrumentIdValidatorService:InstrumentIdValidatorService;
        private var _enterSymbolOverlayShort:Sprite;
        private var _enterSymbolShort:MovieClip;
        private var _list:List;
        private var _symbolSelectorButton:SimpleButton;
        private var _symbolInputBox:TextInput;
        private var _enterSymbolOverlayFull:Sprite;
        private var _enterSymbolFull:MovieClip;

        public function SymbolAutoComplete(componentHolder:MovieClip=null, isSmallMode:Boolean=false){
            this._instrumentList = new Array();
            this._shortcutInstrumentList = new Array();
            this._displayList = new Array();
            this.instrumentListService = InstrumentListService.getInstance();
            this.alertService = AlertService.getInstance();
            this.instrumentIdValidatorService = InstrumentIdValidatorService.getInstance();
            super();
            addFrameScript(0, this.frame1);
            this.getReference();
            if (!isSmallMode){
                this._enterSymbolOverlayShort.visible = false;
                this._enterSymbolShort.visible = false;
                this.initComponent();
            };
            if (componentHolder != null){
                this.x = componentHolder.x;
                this.y = componentHolder.y;
                componentHolder.parent.addChildAt(this, componentHolder.parent.getChildIndex(componentHolder));
                componentHolder.parent.removeChild(componentHolder);
            };
            addEventListener(MessageControlEvent.THEME_CHANGE, this.onChangeTheme);
            this._listPageSize = 7;
        }
        private function getReference():void{
            this._enterSymbolOverlayShort = Sprite(this.getChildByName("enterSymbolOverlayShort"));
            this._enterSymbolShort = MovieClip(this.getChildByName("enterSymbolShort"));
            this._list = List(this.getChildByName("list"));
            this._symbolSelectorButton = SimpleButton(this.getChildByName("symbolSelectorButton"));
            this._symbolInputBox = TextInput(this.getChildByName("symbolInputBox"));
            this._enterSymbolOverlayFull = Sprite(this.getChildByName("enterSymbolOverlayFull"));
            this._enterSymbolFull = MovieClip(this.getChildByName("enterSymbolFull"));
        }
        private function initComponent():void{
            var inputBoxTextFormat:TextFormat;
            var labelTextFormat:TextFormat;
            if (!this._isInit){
                this._list.addEventListener(ListEvent.ITEM_CLICK, this.onListChange);
                this._list.setRendererStyle("textFormat", ThemeManager.defaultDropdownFont);
                this._list.setRendererStyle("embedFonts", true);
                this._symbolSelectorButton.addEventListener(MouseEvent.MOUSE_DOWN, this.onSymbolSelectorButtonMouseClick);
                inputBoxTextFormat = new TextFormat();
                inputBoxTextFormat.font = "Arial";
                inputBoxTextFormat.bold = true;
                inputBoxTextFormat.color = ThemeManager.LABEL_BLACK_COLOR;
                inputBoxTextFormat.size = 20;
                labelTextFormat = new TextFormat();
                labelTextFormat.font = "Arial";
                labelTextFormat.bold = true;
                labelTextFormat.color = ThemeManager.WHITE_COLOR;
                labelTextFormat.size = 20;
                this._symbolInputBox.visible = false;
                this._symbolInputBox.addEventListener(KeyboardEvent.KEY_DOWN, this.onSymbolBoxKeyPress);
                this._symbolInputBox.addEventListener(Event.CHANGE, this.toUpperCase);
                this._symbolInputBox.setStyle("textFormat", inputBoxTextFormat);
                this._symbolInputBox.restrict = "a-zA-Z0-9&.\\- ";
                this._symbolData = new DynamicData(DynamicData.TYPE_LABEL, "");
                this.symbolLabel = new DynamicLabel(this._symbolData, labelTextFormat);
                this.symbolLabel.setTextAlign(TextFormatAlign.LEFT);
                this.symbolLabel.x = this._symbolInputBox.x;
                this.symbolLabel.y = this._symbolInputBox.y;
                this.symbolLabel.width = this._symbolInputBox.width;
                this.symbolLabel.height = this._symbolInputBox.height;
                addChild(this.symbolLabel);
                if (this._isSmallMode){
                    this._enterSymbolOverlayShort.visible = false;
                } else {
                    this._enterSymbolOverlayFull.visible = false;
                };
                addEventListener(MessageReceiveEvent.INSTRUMENT_ID_VALIDATOR, this.onReceiveInstrumentIdValidatorMessage);
                addEventListener(MessageControlEvent.CONFIG_CHANGE, this.onConfigChange);
                this._hasExceptionInstrumentList = false;
                this._isInit = true;
                this.changeLanguage(LanguageManager.currentLanguageConfig);
            };
        }
        override public function changeLanguage(language:ILanguageConfig):void{
            this._enterSymbolFull.textLabel.text = language.ENTER_INSTRUMENT_ID;
            this._enterSymbolShort.textLabel.text = language.ENTER_INSTRUMENT_ID;
            var isEnglish:Boolean = LanguageManager.currentLanguage.isEnglish();
            this._enterSymbolFull.textLabel.embedFonts = isEnglish;
            this._enterSymbolShort.textLabel.embedFonts = isEnglish;
        }
        private function onReceiveInstrumentIdValidatorMessage(e:MessageReceiveEvent):void{
            var message:InstrumentIdValidatorResponseMessage = InstrumentIdValidatorResponseMessage(e.message);
            if (message.requestId == this._currentValidationId){
                if (message.result){
                    this._symbolInputBox.visible = !(this._isShowLabel);
                    this.symbolLabel.visible = this._isShowLabel;
                    this.hideList();
                    this.symbolLabel.updateData(false, this._symbolInputBox.text, 0xFFFFFF, true, false);
                    this._symbolData.updateData(this._symbolInputBox.text);
                    this._currentSymbol = this._symbolData.displayValue;
                    this._callbackFunction(this._currentSymbol);
                } else {
                    this.alertService.alert(message.alertMessage);
                    this.symbolInputBoxDoneEditing();
                };
            };
        }
        public function useSmallMode():void{
            removeChild(this._enterSymbolOverlayFull);
            removeChild(this._enterSymbolFull);
            this._enterSymbolOverlayShort.visible = false;
            this._enterSymbolShort.visible = true;
            this._symbolSelectorButton.addEventListener(MouseEvent.MOUSE_DOWN, this.onSymbolSelectorButtonMouseClick);
            this._list.width = 156;
            this._symbolInputBox.width = 156;
            this.symbolLabel.width = 156;
            this._symbolSelectorButton.x = 158;
            this._isSmallMode = true;
            this.initComponent();
        }
        public function setPageSize(pageSize:int):void{
            this._listPageSize = pageSize;
        }
        public function setCallback(callback:Function):void{
            this._callbackFunction = callback;
        }
        public function setTextInputDelegate(inputBox:TextInput):void{
            this._symbolInputBox = inputBox;
            this._symbolInputBox.addEventListener(KeyboardEvent.KEY_DOWN, this.onSymbolBoxKeyPress);
            this._symbolInputBox.addEventListener(Event.CHANGE, this.toUpperCase);
            this._symbolInputBox.addEventListener(FocusEvent.FOCUS_IN, this.onSymbolBoxFocus);
            this._symbolInputBox.restrict = "a-zA-Z0-9&.\\- ";
            removeChild(this.symbolLabel);
            if (this._isSmallMode){
                this._enterSymbolShort.visible = false;
            } else {
                this._enterSymbolFull.visible = false;
            };
        }
        public function setSymbolLabelTextAlign(align:String):void{
            this.symbolLabel.setTextAlign(align);
        }
        public function loadInstrumentList(instrumentListTypeArray:Array=null):void{
            var instrumentList:Array;
            if (instrumentListTypeArray == null){
                instrumentList = InstrumentListManager.getInstance().getInstrumentListWithOutException();
            } else {
                instrumentList = InstrumentListManager.getInstance().getInstrumentListByInstrumentListTypeArray(instrumentListTypeArray);
            };
            this._instrumentList = instrumentList;
            this._displayList = instrumentList;
            this._displayList.sort();
            this._list.dataProvider = new DataProvider(this._displayList);
            if (instrumentListTypeArray != null){
                this._hasExceptionInstrumentList = (instrumentListTypeArray.indexOf(InstrumentListType.STOCK_FUTURES_UNDERLYING) > -1);
            };
            this.handleEnabled(this._isEnabled);
            this.loadManagerConfig();
        }
        public function loadInstrumentListWithFilterOut(instrumentListTypeFilterOutArray:Array):void{
            var instrumentList:Array = InstrumentListManager.getInstance().getInstrumentListFilterOutByInstrumentListTypeArray(instrumentListTypeFilterOutArray);
            this._instrumentList = instrumentList;
            this._displayList = instrumentList;
            this._displayList.sort();
            this._list.dataProvider = new DataProvider(this._displayList);
            this.handleEnabled(this._isEnabled);
            this.loadManagerConfig();
        }
        public function clearSelectedSymbol():void{
            this._symbolInputBox.visible = !(this._isShowLabel);
            logger.debug(("isShowLabel :: " + this._isShowLabel));
            this.symbolLabel.visible = this._isShowLabel;
            this.hideList();
            this.symbolLabel.updateData(false, " ", 0xFFFFFF, true, false);
            this._symbolData.updateData("");
            this._currentSymbol = "";
            if (this._callbackFunction != null){
                this._callbackFunction(this._currentSymbol);
            };
            if (this._isSmallMode){
                this._enterSymbolShort.visible = true;
            } else {
                this._enterSymbolFull.visible = true;
            };
        }
        public function showList():void{
            var focusManager:FocusManager = new FocusManager(this);
            if (focusManager.getFocus() == this._symbolInputBox){
                this.update();
                this._symbolInputBox.setSelection(0, this._symbolInputBox.text.length);
            };
        }
        public function hideList():void{
            this._list.visible = false;
            if (stage != null){
                stage.removeEventListener(MouseEvent.CLICK, this.onStageMouseClick);
            };
            var message:PopupStateChangeMessage = new PopupStateChangeMessage(PopupState.HIDING, DisplayObject(this._list));
            MessageDispatcher.getInstance().notifyControlMessage(message);
        }
        public function showSymbolSelector():void{
            this._symbolSelectorButton.visible = true;
        }
        public function hideSymbolSelector():void{
            this._symbolSelectorButton.visible = false;
        }
        public function update():void{
            this.autoAdjustPageSize();
            this._list.visible = true;
            var name:String = this._symbolInputBox.text;
            this._displayList = this.startsWith(name, this._instrumentList);
            this._displayList.sort();
            this.addShortcutToDisplayList(name);
            this._list.dataProvider = new DataProvider(this._displayList);
            this._list.rowCount = Math.min(this._list.dataProvider.length, this._listPageSize);
            if (name.length == 0){
                this._isAutoFill = false;
            };
            this._list.selectedIndex = 0;
            this._list.scrollToIndex(0);
            if (stage != null){
                stage.addEventListener(MouseEvent.CLICK, this.onStageMouseClick);
            };
            var message:PopupStateChangeMessage = new PopupStateChangeMessage(PopupState.SHOWING, DisplayObject(this._list));
            MessageDispatcher.getInstance().notifyControlMessage(message);
        }
        public function updateSymbol(symbol:String, textColor:int=0xFFFFFF):void{
            if (this._isSmallMode){
                logger.debug("Short Hide");
                this._enterSymbolShort.visible = false;
            } else {
                logger.debug("Full Hide");
                this._enterSymbolFull.visible = false;
            };
            if (symbol != this._currentSymbol){
                if ((((symbol.length == 0)) && (this._isAllowEmpty))){
                    logger.debug("clearSelectedSymbol");
                    this.clearSelectedSymbol();
                } else {
                    logger.debug("Non - clearSelectedSymbol");
                    if (this._isShowLabel){
                        logger.debug("_isShowLabel");
                        this.symbolLabel.updateData(false, symbol, textColor, true);
                        this._symbolData.updateData(symbol);
                    };
                    this._currentSymbol = symbol;
                };
            } else {
                logger.debug("updateSymbolColor");
                this.updateSymbolColor(textColor);
            };
        }
        public function symbolInputBoxDoneEditing():void{
            var selectedSymbol:String = this._symbolInputBox.text;
            var shortcutInstrumentId:String = this.getShortcutInstrumentId(selectedSymbol);
            if (((!((shortcutInstrumentId == null))) && (!(this._isShowLabel)))){
                this._symbolInputBox.text = shortcutInstrumentId;
                this._currentSymbol = shortcutInstrumentId;
            };
            this._symbolInputBox.visible = !(this._isShowLabel);
            this.symbolLabel.visible = this._isShowLabel;
            this.hideList();
            if ((((this._currentSymbol == "")) && (this._isShowLabel))){
                if (this._isSmallMode){
                    this._enterSymbolShort.visible = true;
                } else {
                    this._enterSymbolFull.visible = true;
                };
            };
        }
        public function updateSymbolColor(textColor:int=0xFFFFFF):void{
            this.symbolLabel.updateData(false, this.symbolLabel.text, textColor, true);
        }
        private function autoAdjustPageSize():void{
            var expectedHeight:Number;
            var expectedRowCount:int;
            var bounds:Rectangle = getBounds(stage);
            if ((bounds.y + bounds.height) > stage.stageHeight){
                expectedHeight = (stage.stageHeight - (bounds.y + this._symbolInputBox.height));
                expectedRowCount = Math.floor((expectedHeight / this._list.rowHeight));
                this.setPageSize(expectedRowCount);
            };
        }
        private function onConfigChange(e:MessageControlEvent):void{
            var message:ConfigChangeMessage = ConfigChangeMessage(e.message);
            if (message.config.type.isSymbolShortcutConfig()){
                this.loadManagerConfig();
            };
        }
        private function loadManagerConfig():void{
            var settingManager:SettingManager = SettingManager.getInstance();
            this.loadConfig(ShortcutInstrumentIdConfig(settingManager.getConfig(ConfigType.SHORTCUT_SYMBOL)));
        }
        private function loadConfig(config:ShortcutInstrumentIdConfig):void{
            var shortcut:ShortcutInstrumentId;
            this._shortcutInstrumentList.length = 0;
            for each (shortcut in config.shortCutList) {
                this._shortcutInstrumentList.push(shortcut);
            };
        }
        private function addShortcutToDisplayList(name:String):void{
            var shortcut:ShortcutInstrumentId;
            for each (shortcut in this._shortcutInstrumentList) {
                if ((((shortcut.key == name)) && (!((this._instrumentList.indexOf(shortcut.instrumentId) == -1))))){
                    this._displayList.unshift(StringUtil.generateStringWithArguments(this.SYMBOL_SHORTCUT_PATTERN, shortcut.key, shortcut.instrumentId));
                };
            };
        }
        private function isValidShortcut(text:String):Boolean{
            return (!((this.getShortcutInstrumentId == null)));
        }
        private function getShortcutInstrumentId(text:String):String{
            var shortcut:ShortcutInstrumentId;
            var formattedText:String;
            for each (shortcut in this._shortcutInstrumentList) {
                formattedText = StringUtil.generateStringWithArguments(this.SYMBOL_SHORTCUT_PATTERN, shortcut.key, shortcut.instrumentId);
                if (text == formattedText){
                    return (shortcut.instrumentId);
                };
            };
            return (null);
        }
        private function onChangeTheme(e:MessageControlEvent):void{
            TextField(this._enterSymbolFull.textLabel).textColor = ThemeManager.SYMBOL_INPUTBOX_COLOR;
            ThemeManager.changeClipBackground(DisplayObject(this._enterSymbolFull), ThemeManager.SYMBOL_INPUTBOX_COLOR);
            TextField(this._enterSymbolShort.textLabel).textColor = ThemeManager.SYMBOL_INPUTBOX_COLOR;
            ThemeManager.changeClipBackground(DisplayObject(this._enterSymbolShort), ThemeManager.SYMBOL_INPUTBOX_COLOR);
            ThemeManager.changeClipBackground(DisplayObject(this._symbolSelectorButton), ThemeManager.SYMBOL_INPUTBOX_COLOR);
        }
        private function onStageMouseClick(e:MouseEvent):void{
            if (!this.contains(DisplayObject(e.target))){
                this.symbolInputBoxDoneEditing();
            };
            logger.debug((e.target.parent + ""));
        }
        private function onSymbolLabelMouseOver(e:MouseEvent):void{
            Mouse.cursor = MouseCursor.BUTTON;
            if (this._isSmallMode){
                this._enterSymbolOverlayShort.visible = true;
            } else {
                this._enterSymbolOverlayFull.visible = true;
            };
        }
        private function onSymbolLabelMouseOut(e:MouseEvent):void{
            Mouse.cursor = MouseCursor.AUTO;
            if (this._isSmallMode){
                this._enterSymbolOverlayShort.visible = false;
            } else {
                this._enterSymbolOverlayFull.visible = false;
            };
        }
        private function onSymbolLabelMouseDown(e:MouseEvent):void{
            this._symbolInputBox.visible = true;
            this._symbolInputBox.text = this.getRealSymbol(this.symbolLabel.text);
            this._symbolInputBox.dispatchEvent(new Event(Event.CHANGE));
            this._symbolInputBox.setFocus();
            this.symbolLabel.visible = false;
            if (this._isSmallMode){
                this._enterSymbolShort.visible = false;
            } else {
                this._enterSymbolFull.visible = false;
            };
            if ((this.parent is WidgetComponent)){
                WidgetComponent(this.parent).focus();
            };
        }
        private function onSymbolBoxKeyPress(event:KeyboardEvent):void{
            var shortcutInstrumentId:String;
            var message:PopupStateChangeMessage;
            if (event.charCode == Keyboard.ENTER){
                this.submitSymbol();
            } else {
                if (event.charCode == Keyboard.TAB){
                    shortcutInstrumentId = this.getShortcutInstrumentId(this._symbolInputBox.text);
                    if (shortcutInstrumentId != null){
                        this._symbolInputBox.text = shortcutInstrumentId;
                    };
                    this.symbolInputBoxDoneEditing();
                };
            };
            if (this._list.visible){
                if ((((event.keyCode == Keyboard.UP)) || ((event.keyCode == Keyboard.PAGE_UP)))){
                    if (this._list.selectedIndex > 0){
                        this._list.scrollToIndex(--this._list.selectedIndex);
                        this._symbolInputBox.text = this._list.selectedItem.data;
                    };
                } else {
                    if ((((event.keyCode == Keyboard.DOWN)) || ((event.keyCode == Keyboard.PAGE_DOWN)))){
                        if (this._list.selectedIndex < (this._displayList.length - 1)){
                            this._list.scrollToIndex(++this._list.selectedIndex);
                            this._symbolInputBox.text = this._list.selectedItem.data;
                        };
                    } else {
                        if (event.keyCode == Keyboard.HOME){
                            this._list.selectedIndex = 0;
                            this._list.scrollToIndex(this._list.selectedIndex);
                        } else {
                            if (event.keyCode == Keyboard.END){
                                this._list.selectedIndex = (this._displayList.length - 1);
                                this._list.scrollToIndex(this._list.selectedIndex);
                            } else {
                                if (event.keyCode == Keyboard.BACKSPACE){
                                    this._isAutoFill = false;
                                } else {
                                    if (event.keyCode == Keyboard.ENTER){
                                        this._list.visible = false;
                                        this._isAutoFill = true;
                                        message = new PopupStateChangeMessage(PopupState.HIDING, DisplayObject(this._list));
                                        MessageDispatcher.getInstance().notifyControlMessage(message);
                                    } else {
                                        this._isAutoFill = true;
                                    };
                                };
                            };
                        };
                    };
                };
            };
        }
        public function submitSymbol():void{
            var shortcutInstrumentId:String;
            if (this._symbolInputBox.text != ""){
                this._symbolInputBox.text = StringUtil.trim(this._symbolInputBox.text);
                shortcutInstrumentId = this.getShortcutInstrumentId(this._symbolInputBox.text);
                if (shortcutInstrumentId != null){
                    this._symbolInputBox.visible = !(this._isShowLabel);
                    this.symbolLabel.visible = this._isShowLabel;
                    this.hideList();
                    this.updateSymbol(shortcutInstrumentId, 0xFFFFFF);
                    this._symbolInputBox.text = shortcutInstrumentId;
                    this._callbackFunction(this._currentSymbol);
                } else {
                    if (((((!(this._hasExceptionInstrumentList)) && (this.instrumentListService.isValidInstrumentId(this._symbolInputBox.text)))) || (((this._hasExceptionInstrumentList) && (this.instrumentListService.isValidInstrumentIdIncludeException(this._symbolInputBox.text)))))){
                        this._symbolInputBox.visible = !(this._isShowLabel);
                        this.symbolLabel.visible = this._isShowLabel;
                        this.hideList();
                        this.updateSymbol(this._symbolInputBox.text, 0xFFFFFF);
                        this._callbackFunction(this._currentSymbol);
                    } else {
                        this._currentValidationId = this.instrumentIdValidatorService.validateInstrumentId(this._symbolInputBox.text);
                    };
                };
            } else {
                if (this._isAllowEmpty){
                    this.clearSelectedSymbol();
                } else {
                    this.alertService.alert("Please insert symbol");
                };
            };
        }
        private function onSymbolBoxFocus(event:FocusEvent):void{
            if ((((((this._symbolInputBox.text.length > 0)) && (!(this._list.visible)))) && (this._isShowLabel))){
                this.showList();
            };
        }
        private function onDelayUpdateSymbolAutoComplete(event:TimerEvent):void{
            this.update();
        }
        private function toUpperCase(evt:Event):void{
            var textLength:int;
            evt.target.text = evt.target.text.toUpperCase();
            if ((((evt.target.text.length > 0)) && (!(this._list.visible)))){
                this.showList();
            } else {
                this.hideList();
            };
            this.update();
            if (((this._isAutoFill) && ((this._list.dataProvider.length > 0)))){
                textLength = evt.target.text.length;
                evt.target.text = this._list.selectedItem.data;
                evt.target.setSelection(textLength, evt.target.text.length);
            };
        }
        private function startsWith(pNeedle:String, pHayStack:Array):Array{
            var hay:String;
            var result:Array = [];
            for each (hay in pHayStack) {
                if (hay.match(("^" + pNeedle))){
                    result.push(hay);
                };
            };
            return (result);
        }
        private function onListChange(event:ListEvent):void{
            var selectedSymbol:String = event.item.data;
            var shortcutInstrumentId:String = this.getShortcutInstrumentId(selectedSymbol);
            if (shortcutInstrumentId != null){
                selectedSymbol = shortcutInstrumentId;
            };
            this._symbolInputBox.text = selectedSymbol;
            this._symbolInputBox.visible = !(this._isShowLabel);
            this.symbolLabel.visible = this._isShowLabel;
            this.hideList();
            if (this._currentSymbol != selectedSymbol){
                this.symbolLabel.updateData(false, this._symbolInputBox.text, 0xFFFFFF, true);
                this._symbolData.updateData(this._symbolInputBox.text);
            };
            this._currentSymbol = this._symbolData.displayValue;
            this._callbackFunction(this._currentSymbol);
        }
        private function onSymbolSelectorSelectSymbol(symbol:String):void{
            this.updateSymbol(symbol);
            this._callbackFunction(symbol);
        }
        private function onSymbolSelectorButtonMouseClick(e:MouseEvent):void{
            PageManager.getInstance().showPage(PageName.SYMBOL_SELECTOR, {
                callback:this.onSymbolSelectorSelectSymbol,
                system:this._currentSymbolSelectorSystem
            });
        }
        private function getRealSymbol(symbol:String):String{
            if (symbol.indexOf(" (") > 0){
                symbol = symbol.substring(0, symbol.indexOf(" ("));
            };
            symbol = StringUtil.trim(symbol);
            return (symbol);
        }
        public function get isShowLabel():Boolean{
            return (this._isShowLabel);
        }
        public function set isShowLabel(value:Boolean):void{
            this._isShowLabel = value;
            this.symbolLabel.visible = this._isShowLabel;
        }
        public function get isEnabled():Boolean{
            return (this._isEnabled);
        }
        public function set isEnabled(value:Boolean):void{
            this._isEnabled = value;
            this.handleEnabled(value);
            if (this._currentSymbol == ""){
                if (this._isSmallMode){
                    this._enterSymbolShort.visible = this._isEnabled;
                } else {
                    this._enterSymbolFull.visible = this._isEnabled;
                };
            };
        }
        private function handleEnabled(isEnable:Boolean):void{
            if (isEnable){
                this.symbolLabel.addEventListener(MouseEvent.MOUSE_DOWN, this.onSymbolLabelMouseDown);
                this.symbolLabel.addEventListener(MouseEvent.MOUSE_OVER, this.onSymbolLabelMouseOver);
                this.symbolLabel.addEventListener(MouseEvent.MOUSE_OUT, this.onSymbolLabelMouseOut);
            } else {
                this.symbolLabel.removeEventListener(MouseEvent.MOUSE_DOWN, this.onSymbolLabelMouseDown);
                this.symbolLabel.removeEventListener(MouseEvent.MOUSE_OVER, this.onSymbolLabelMouseOver);
                this.symbolLabel.removeEventListener(MouseEvent.MOUSE_OUT, this.onSymbolLabelMouseOut);
            };
        }
        public function get currentSymbol():String{
            return (this.getRealSymbol(this._currentSymbol));
        }
        public function get isAllowEmpty():Boolean{
            return (this._isAllowEmpty);
        }
        public function set isAllowEmpty(value:Boolean):void{
            this._isAllowEmpty = value;
        }
        public function set currentSymbolSelectorSystem(value:System):void{
            this._currentSymbolSelectorSystem = value;
        }
        function frame1(){
            stop();
        }

    }
}//package com.settrade.streaming5.page.component 
﻿package com.settrade.streaming5.page.component.datagrid {
    import fl.controls.listClasses.*;
    import fl.controls.*;
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import com.settrade.streaming5.page.component.dynamiclabel.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.manager.*;
    import flash.utils.*;
    import com.settrade.streaming5.common.*;
    import flash.geom.*;
    import __AS3__.vec.*;
    import flash.text.*;
    import com.settrade.streaming5.page.*;
    import fl.events.*;
    import com.settrade.log.logger.*;
    import flash.ui.*;

    public class StreamingDataGrid extends StreamingMovieClip {

        private static var logger:Logger = new Logger(prototype.constructor);

        const SWAP_MODE_SHIFT = 1;
        const SWAP_MODE_SWAP = 2;
        const SCROLLBAR_FETCH_TIMER = 250;
        const STOP_SCROLL_RENDER_TIMER = 100;
        const FAVOURITE_MAX_COUNT = 20;
        const SORT_DELAYED_REDRAW_TIME = 50;
        const VERSION = 120092013;

        private var _configuration:Object;
        private var defaults:Object;
        private var _headerArray:Array;
        protected var _dataRowArray:Array;
        protected var _dataDictionary:Dictionary;
        protected var _columnLabelArray:Array;
        protected var _columnLabelDictionary:Dictionary;
        protected var _columnTypeDictionary:Dictionary;
        protected var _columnNameArray:Array;
        protected var _columnIndexDictionary:Dictionary;
        protected var _keyColumnName:String = null;
        protected var _keyRowIndexDictionary:Dictionary;
        private var _separatorCount:int;
        private var _separatorArray:Array;
        private var _currentSeparatorIndex:int;
        private var _oldPosX:int;
        private var _originColumn:int;
        private var _isDraggingSeparator:Boolean;
        private var _isDraggingHeader:Boolean;
        private var _currentDraggingObj:Object;
        private var _headerOverlay:Sprite;
        private var _dataRowClass;
        protected var _scrollBarTimer:Timer;
        protected var _stopScrollRenderTimer:Timer;
        protected var _columnWidthArray:Array;
        protected var _defaultFont:TextFormat = null;
        private var _onCellSelectedCallbackFunction:Function = null;
        private var _onScrollBarScrollCallbackFunction:Function = null;
        private var _onDeleteDataRowCallbackFunction:Function = null;
        private var _onAddDataRowCallbackFunction:Function = null;
        private var _onUpdateDataRowCallbackFunction:Function = null;
        private var _onSwapDataRowCallbackFunction:Function = null;
        private var _onTableHeaderClickCallbackFunction:Function = null;
        private var _onTableHeaderStartDragging:Function = null;
        private var _onTableAdjustHeaderCallbackFunction:Function = null;
        private var _cellChangeButtonMouseClickCallbackFunction:Function = null;
        private var _cellDetailButtonMouseClickCallbackFunction:Function = null;
        private var _cellChangeOkButtonMouseClickCallbackFunction:Function = null;
        private var _onCheckBoxCheckedCallbackFunction:Function = null;
        private var _scrollBar:ScrollBar;
        private var lastScrollRenderTime:Date;
        private var lastMouseWheelRenderTime:Date;
        private var scrollDelayTime:Number = 20;
        protected var _isShowFavourite:Boolean = false;
        protected var _isShowSymbolEdit:Boolean = false;
        protected var _isEditMode:Boolean = false;
        public var selectedIndex:int = -1;
        var marginTop:int;
        var marginLeft:int;
        protected var dataGridWidth:int = 0;
        var rowOffset:int = 0;
        var _swapMode:int = 1;
        var _configArray:Array;
        var _width:int;
        var dataRowHeader:DataRowHeader;

        public function StreamingDataGrid(componentHolder:MovieClip=null){
            this.defaults = {
                headerMargin:22,
                rowCount:100,
                rowHeight:18,
                rowWidth:100,
                scrollBarWidth:20,
                pageSize:10,
                hoverCellBackgroundColor:0x7F7F7F,
                selectedCellBackgroundColor:0x7F7F7F,
                enableSort:false,
                enableAdjustColumn:false,
                enableCellHoverHighlight:true
            };
            this._headerArray = new Array();
            this._dataRowArray = new Array();
            this._dataDictionary = new Dictionary();
            this._columnLabelArray = new Array();
            this._columnLabelDictionary = new Dictionary();
            this._columnTypeDictionary = new Dictionary();
            this._columnNameArray = new Array();
            this._columnIndexDictionary = new Dictionary();
            this._keyRowIndexDictionary = new Dictionary();
            this._separatorArray = new Array();
            this._headerOverlay = new Sprite();
            this._scrollBarTimer = new Timer(this.SCROLLBAR_FETCH_TIMER, 1);
            this._stopScrollRenderTimer = new Timer(this.STOP_SCROLL_RENDER_TIMER, 1);
            this._columnWidthArray = new Array();
            this.lastScrollRenderTime = new Date();
            this.lastMouseWheelRenderTime = new Date();
            super();
            if (componentHolder != null){
                this.x = componentHolder.x;
                this.y = componentHolder.y;
                this.width = componentHolder.width;
                this.height = componentHolder.height;
                componentHolder.parent.addChildAt(this, componentHolder.parent.getChildIndex(componentHolder));
                componentHolder.parent.removeChild(componentHolder);
                this.dataGridWidth = (componentHolder.width - this.defaults.scrollBarWidth);
            };
            this._configuration = this.defaults;
            this._width = this.width;
            this._scrollBarTimer.addEventListener(TimerEvent.TIMER, this.onScrollBarTimerTick);
            this._stopScrollRenderTimer.addEventListener(TimerEvent.TIMER, this.onStopScrollRenderTimerTick);
            this.scaleX = 1;
            this.scaleY = 1;
            addEventListener(MouseEvent.MOUSE_WHEEL, this.onMouseWheelScroll);
            addEventListener(KeyboardEvent.KEY_DOWN, this.onKeyboardKeyDown);
            this.tabEnabled = false;
            this.focusRect = false;
            addEventListener(MessageControlEvent.THEME_CHANGE, this.onChangeTheme);
        }
        public function initDataGrid(headerArray:Array, swapMode:int, conf:Object, dataRowClass:Class, defaultFont:TextFormat=null, headerDefaultFont:TextFormat=null){
            var i:int;
            this._swapMode = swapMode;
            this._dataRowClass = dataRowClass;
            this._defaultFont = defaultFont;
            this.setConfig(conf);
            this.marginTop = this._configuration.headerMargin;
            this.marginLeft = 0;
            var tableWidth:Number = 0;
            var columnHeaderAlignmentArray:Array = new Array();
            this._columnNameArray = new Array();
            this._columnLabelArray = new Array();
            this._columnWidthArray = new Array();
            this._columnIndexDictionary = new Dictionary();
            this._dataDictionary = new Dictionary();
            this._columnTypeDictionary = new Dictionary();
            this._columnLabelDictionary = new Dictionary();
            i = 0;
            while (i < headerArray.length) {
                this._columnNameArray.push(headerArray[i].name);
                this._columnIndexDictionary[headerArray[i].name] = i;
                this._columnWidthArray.push(headerArray[i].width);
                tableWidth = (tableWidth + headerArray[i].width);
                this._dataDictionary[headerArray[i].name] = new Array();
                this._columnTypeDictionary[headerArray[i].name] = headerArray[i].type;
                if (headerArray[i].label == null){
                    this._columnLabelDictionary[headerArray[i].name] = headerArray[i].name;
                    this._columnLabelArray.push(headerArray[i].name);
                } else {
                    this._columnLabelDictionary[headerArray[i].name] = headerArray[i].label;
                    this._columnLabelArray.push(headerArray[i].label);
                };
                if (headerArray[i].alignment == null){
                    columnHeaderAlignmentArray.push(TextFormatAlign.CENTER);
                } else {
                    columnHeaderAlignmentArray.push(headerArray[i].alignment);
                };
                i++;
            };
            this.dataRowHeader = new DataRowHeader();
            this.dataRowHeader.initDataRow(this._columnLabelArray, this._columnWidthArray, this._configuration.headerMargin, headerDefaultFont);
            this.dataRowHeader.x = 0;
            this.dataRowHeader.y = 0;
            addChild(this.dataRowHeader);
            addChild(this._headerOverlay);
            i = 0;
            while (i < this._columnNameArray.length) {
                this.dataRowHeader.getColumnAtIndex(i).mouseChildren = false;
                this.dataRowHeader.getColumnAtIndex(i).addEventListener(MouseEvent.CLICK, this.onClickHeader);
                this.dataRowHeader.getColumnAtIndex(i).addEventListener(MouseEvent.MOUSE_DOWN, this.onStartHeaderDragging);
                this.dataRowHeader.getColumnAtIndex(i).addEventListener(MouseEvent.MOUSE_MOVE, this.onStartHeaderDraggingAndMove);
                i++;
            };
            this.dataRowHeader.updateTextAlignment(columnHeaderAlignmentArray);
            i = 0;
            while (i < (this._columnNameArray.length - 1)) {
                this._separatorArray[i] = new TableSeparator();
                if (i == 0){
                    this._separatorArray[i].x = this.dataRowHeader.getRowWidth(i);
                } else {
                    this._separatorArray[i].x = (this._separatorArray[(i - 1)].x + this.dataRowHeader.getRowWidth(i));
                };
                this._separatorArray[i].y = (this._configuration.rowHeight / 2);
                this._separatorArray[i].addEventListener(MouseEvent.MOUSE_DOWN, this.onStartDraggingSeparator);
                this._separatorArray[i].addEventListener(MouseEvent.ROLL_OVER, this.onMouseOverSeparator);
                this._separatorArray[i].addEventListener(MouseEvent.ROLL_OUT, this.onMouseOutSeparator);
                this._separatorArray[i].visible = this._isEditMode;
                addChild(this._separatorArray[i]);
                i++;
            };
            addEventListener(MouseEvent.MOUSE_UP, this.onStopDragging);
            this._scrollBar = new ScrollBar();
            this._scrollBar.addEventListener(ScrollEvent.SCROLL, this.onScrollBarScroll);
            this._scrollBar.visible = false;
            addChild(this._scrollBar);
            this.dataGridWidth = tableWidth;
            this.scaleX = 1;
            this.scaleY = 1;
            if (this.isClass(this._dataRowClass, "OrderStatusDataRow")){
                KeyboardShortcutManager.getInstance().attachKeyboardShortcutEvent(this);
            };
        }
        public function initDataGridWithOutHeader(headerArray:Array, swapMode:int, conf:Object, dataRowClass:Class, defaultFont:TextFormat=null){
            var i:int;
            this._swapMode = swapMode;
            this._dataRowClass = dataRowClass;
            this._defaultFont = defaultFont;
            this.setConfig(conf);
            var tableWidth:Number = 0;
            this._columnNameArray = new Array();
            this._columnLabelArray = new Array();
            this._columnWidthArray = new Array();
            this._columnIndexDictionary = new Dictionary();
            this._dataDictionary = new Dictionary();
            this._columnTypeDictionary = new Dictionary();
            this._columnLabelDictionary = new Dictionary();
            i = 0;
            while (i < headerArray.length) {
                this._columnNameArray.push(headerArray[i].name);
                this._columnIndexDictionary[headerArray[i].name] = i;
                this._columnWidthArray.push(headerArray[i].width);
                tableWidth = (tableWidth + headerArray[i].width);
                this._dataDictionary[headerArray[i].name] = new Array();
                this._columnTypeDictionary[headerArray[i].name] = headerArray[i].type;
                if (headerArray[i].name == null){
                    this._columnLabelDictionary[headerArray[i].name] = headerArray[i].name;
                    this._columnLabelArray.push(headerArray[i].name);
                } else {
                    this._columnLabelDictionary[headerArray[i].name] = headerArray[i].label;
                    this._columnLabelArray.push(headerArray[i].label);
                };
                i++;
            };
            this._scrollBar = new ScrollBar();
            this._scrollBar.addEventListener(ScrollEvent.SCROLL, this.onScrollBarScroll);
            this._scrollBar.visible = false;
            addChild(this._scrollBar);
            this.marginTop = 0;
            this.dataGridWidth = tableWidth;
            this.scaleX = 1;
            this.scaleY = 1;
        }
        public function addHeaderLeftMargin(margin:Number):void{
            this.dataRowHeader.addLeftMargin(margin);
        }
        public function updateHeaderRow(headerArray:Array):void{
            var i:int;
            var columnIndex:int;
            if (this.dataRowHeader != null){
                i = 0;
                while (i < headerArray.length) {
                    columnIndex = this.getColumnIndexByColumnName(headerArray[i].name);
                    if (columnIndex > -1){
                        this.dataRowHeader.updateHeaderRow(headerArray[i].label, columnIndex);
                    };
                    i++;
                };
            };
        }
        public function updateHeaderWithColor(columnName:String, color:uint):void{
            this.dataRowHeader.updateHeaderWithColor(columnName, color);
        }
        public function setKeyColumnName(name:String):void{
            this._keyColumnName = name;
            this._keyRowIndexDictionary = new Dictionary();
        }
        public function addOrUpdateItem(items:Array):void{
            var columnName:String;
            var columnData:*;
            if (items.length <= 0){
                return;
            };
            var i:* = 0;
            while (i < items.length) {
                columnName = items[i].name;
                columnData = items[i].data;
                if (columnName == this._keyColumnName){
                    if (((!((this._keyRowIndexDictionary[columnData] == null))) && (!((this._keyRowIndexDictionary[columnData] == -1))))){
                        this.updateRow(this._keyRowIndexDictionary[columnData], items);
                    } else {
                        this.addItem(items);
                    };
                    break;
                };
                i++;
            };
        }
        public function addOrUpdateItemAtIndex(items:Array, index:int):void{
            var columnName:String;
            var columnData:*;
            if (items.length <= 0){
                return;
            };
            var i:* = 0;
            while (i < items.length) {
                columnName = items[i].name;
                columnData = items[i].data;
                if (columnName == this._keyColumnName){
                    if (((!((this._keyRowIndexDictionary[columnData] == null))) && (!((this._keyRowIndexDictionary[columnData] == -1))))){
                        this.updateRow(this._keyRowIndexDictionary[columnData], items);
                    } else {
                        this.addItemAtIndex(items, index);
                    };
                    break;
                };
                i++;
            };
        }
        public function addItemAtIndexWithBlink(items:Array, index:int):void{
            this.addItemAtIndex(items, index);
            this.blinkAtIndex(index);
        }
        public function addItemAtIndex(items:Array, index:int):void{
            var columnName:String;
            var columnData:*;
            var columnPriceDigit:int;
            var columnDynamicData:DynamicData;
            var j:*;
            var key:Object;
            var dataArray:Array;
            var referedColumnName:String;
            var itemsArray:Array;
            var _dataRow:*;
            if (items.length <= 0){
                return;
            };
            var i:* = 0;
            while (i < items.length) {
                columnName = items[i].name;
                columnData = items[i].data;
                columnPriceDigit = -1;
                if (items[i].digit != null){
                    columnPriceDigit = items[i].digit;
                };
                if (this._dataDictionary[columnName] == undefined){
                    this._dataDictionary[columnName] = new Array();
                };
                if (columnName == this._keyColumnName){
                    this._keyRowIndexDictionary[columnData] = index;
                    if (index < this.getRowCount()){
                        j = index;
                        while (j < this.getRowCount()) {
                            this._keyRowIndexDictionary[this._dataDictionary[this._keyColumnName][j].displayValue] = (j + 1);
                            j++;
                        };
                    };
                };
                columnDynamicData = new DynamicData(this._columnTypeDictionary[columnName], columnData, columnPriceDigit);
                this._dataDictionary[columnName].splice(index, 0, columnDynamicData);
                i++;
            };
            if (this.isClass(this._dataRowClass, "OrderStatusDataRow")){
                if (this._dataDictionary["check_box"] == undefined){
                    this._dataDictionary["check_box"] = new Array();
                };
                this._dataDictionary["check_box"].splice(index, 0, false);
            };
            if (items.length < this._columnNameArray.length){
                for (key in this._dataDictionary) {
                    dataArray = this._dataDictionary[key];
                    columnName = String(key);
                    referedColumnName = items[0].name;
                    if (dataArray.length < this._dataDictionary[referedColumnName].length){
                        dataArray.push(new DynamicData(this._columnTypeDictionary[columnName], null, columnPriceDigit));
                    };
                };
            };
            if (this._dataRowArray.length < this._configuration.pageSize){
                itemsArray = this.getRowData(this._dataRowArray.length);
                _dataRow = new this._dataRowClass();
                _dataRow.initDataRow(itemsArray, this._columnWidthArray, this._configuration.rowHeight, this._defaultFont);
                if (this.isClass(this._dataRowClass, "MarketWatchDataRow")){
                    _dataRow.setMarketWatchCallBackFunction(this.onDeleteTableRow, this.onMoveUpTableRow, this.onMoveDownTableRow, this.onAddSymbol, this.onUpdateSymbol);
                    _dataRow.loadSymbolAutoCompleteList();
                    _dataRow.canShowSymbolEdit = this._isShowFavourite;
                };
                if (this.isClass(this._dataRowClass, "OrderStatusDataRow")){
                    _dataRow.setCancelOrderCheckBoxCheckedCallbackFunction(this.onCheckboxChecked);
                    _dataRow.setChangeButtonMouseClickCallbackFunction(this._cellChangeButtonMouseClickCallbackFunction);
                    _dataRow.setDetailButtonMouseClickCallbackFunction(this._cellDetailButtonMouseClickCallbackFunction);
                    _dataRow.setChangeOkButtonMouseClickCallbackFunction(this._cellChangeOkButtonMouseClickCallbackFunction);
                };
                _dataRow.addEventListener(MouseEvent.MOUSE_OVER, this.onCellMouseOver);
                _dataRow.addEventListener(MouseEvent.MOUSE_OUT, this.onCellMouseOut);
                _dataRow.addEventListener(MouseEvent.CLICK, this.onCellSelected);
                _dataRow.x = 0;
                _dataRow.y = (this.marginTop + (this._configuration.rowHeight * this._dataRowArray.length));
                this._dataRowArray.push(_dataRow);
                addChildAt(_dataRow, 1);
                this.redrawDataRow();
            } else {
                if (this.rowIsVisible(index)){
                    this.redrawDataRow();
                };
            };
        }
        public function addItem(items:Array):void{
            this.addItemAtIndex(items, this.getRowCount());
        }
        public function addInvisibleColumnNames(columnDataArray:Array):void{
            var i:* = 0;
            while (i < columnDataArray.length) {
                this._dataDictionary[columnDataArray[i].name] = new Array();
                this._columnLabelDictionary[columnDataArray[i].name] = columnDataArray[i].label;
                this._columnTypeDictionary[columnDataArray[i].name] = columnDataArray[i].type;
                i++;
            };
        }
        public function updateRow(rowIndex:int, items:Array):void{
            var columnName:String;
            var columnData:*;
            var columnPriceDigit:int;
            var i:* = 0;
            while (i < items.length) {
                columnName = items[i].name;
                columnData = items[i].data;
                columnPriceDigit = 2;
                if (items[i].digit != null){
                    columnPriceDigit = items[i].digit;
                };
                this.updateCell(columnData, rowIndex, columnName, columnPriceDigit);
                i++;
            };
        }
        public function updateRowWithBlink(rowIndex:int, items:Array):void{
            this.updateRow(rowIndex, items);
            this.blinkAtIndex(rowIndex);
        }
        public function blinkAtIndex(rowIndex:int):void{
            if (this.rowIsVisible(rowIndex)){
                this._dataRowArray[(rowIndex - this.rowOffset)].blink(5);
            };
        }
        public function updateCell(value, rowIndex:int, columnName:String, priceDigit:int=2):void{
            if (rowIndex == -1){
                return;
            };
            var data:DynamicData;
            if (this._dataDictionary[columnName] == null){
                this._dataDictionary[columnName] = new Array();
            };
            if (this._dataDictionary[columnName][rowIndex] == null){
                data = new DynamicData(this.getColumnTypeByColumnName(columnName), value, priceDigit);
                this._dataDictionary[columnName][rowIndex] = data;
            } else {
                data = this._dataDictionary[columnName][rowIndex];
                data.updateData(value, priceDigit);
            };
            var columnIndex = -1;
            if (columnName != null){
                columnIndex = this.getColumnIndexByColumnName(columnName);
            } else {
                return;
            };
            if ((((columnIndex == -1)) || ((this._dataDictionary[columnName].length == 0)))){
                return;
            };
            if (this.rowIsVisible(rowIndex)){
                this._dataRowArray[(rowIndex - this.rowOffset)].setCellDataAtIndex(columnIndex, columnName, data, true, this.getDataDictionaryAtRowIndex(rowIndex));
            };
        }
        public function updateColumnNameByColumnName(columnName:String, newColumnName:String, newColumnType:int):void{
            var columnIndex = -1;
            if (columnName != null){
                columnIndex = this.getColumnIndexByColumnName(columnName);
            };
            if (columnIndex == -1){
                return;
            };
            this._columnNameArray[columnIndex] = newColumnName;
            this._columnLabelArray[columnIndex] = this._columnLabelDictionary[newColumnName];
            this._columnIndexDictionary[newColumnName] = columnIndex;
            this._columnIndexDictionary[columnName] = -1;
            this.dataRowHeader.setCellDataAtIndex(columnIndex, columnName, new DynamicData(DynamicData.TYPE_LABEL, this._columnLabelDictionary[newColumnName]));
            var i:* = 0;
            while (i < this._dataDictionary[columnName].length) {
                if (this._dataDictionary[newColumnName] != null){
                    if (this._dataDictionary[newColumnName][i] != null){
                        this._dataDictionary[newColumnName][i].type = newColumnType;
                    } else {
                        this._dataDictionary[newColumnName][i] = new DynamicData(newColumnType, null);
                    };
                };
                i++;
            };
            this.redrawDataRow();
        }
        public function removeRowAtIndex(index:int):void{
            var key:Object;
            var i:*;
            var keyValue:String = "";
            for (key in this._dataDictionary) {
                if (key == this._keyColumnName){
                    if (this.isClass(this._dataRowClass, "MarketWatchDataRow")){
                        keyValue = this.getRealSymbol(this._dataDictionary[key][index].displayValue);
                    } else {
                        keyValue = this._dataDictionary[key][index].displayValue;
                    };
                };
                this._dataDictionary[key].splice(index, 1);
            };
            if (keyValue != ""){
                i = index;
                while (i < this.getRowCount()) {
                    if (this.isClass(this._dataRowClass, "MarketWatchDataRow")){
                        this._keyRowIndexDictionary[this.getRealSymbol(this._dataDictionary[this._keyColumnName][i].displayValue)] = i;
                    } else {
                        this._keyRowIndexDictionary[this._dataDictionary[this._keyColumnName][i].displayValue] = i;
                    };
                    i++;
                };
                this._keyRowIndexDictionary[keyValue] = -1;
            };
            if ((((this.rowOffset > 0)) && (((this.rowOffset + this._configuration.pageSize) > (this.getRowCount() + 1))))){
                this.rowOffset--;
            };
            this.redrawDataRow();
        }
        public function getTableHeaderArrangement():Array{
            var header:Object;
            var tableHeaderArray:Array = new Array();
            var i:* = 0;
            while (i < this._columnNameArray.length) {
                header = new Object();
                header.name = this._columnNameArray[i];
                header.label = this._columnLabelDictionary[this._columnNameArray[i]];
                header.type = this._columnTypeDictionary[this._columnNameArray[i]];
                header.width = this._columnWidthArray[i];
                tableHeaderArray.push(header);
                i++;
            };
            return (tableHeaderArray);
        }
        public function getCellData(rowIndex:int, columnName:String){
            return (this._dataDictionary[columnName][rowIndex]);
        }
        public function getRowData(rowIndex:int):Array{
            var tmpArray:Array;
            var i:int;
            if (rowIndex < this._dataDictionary[this._columnNameArray[0]].length){
                tmpArray = new Array();
                i = 0;
                while (i < this._columnNameArray.length) {
                    tmpArray.push(this._dataDictionary[this._columnNameArray[i]][rowIndex]);
                    i++;
                };
                return (tmpArray);
            };
            return (null);
        }
        public function getRowDataDictionary(rowIndex:int):Dictionary{
            var tmpDictionary:Dictionary;
            var key:Object;
            var keyString:String;
            if (rowIndex < this._dataDictionary[this._columnNameArray[0]].length){
                tmpDictionary = new Dictionary();
                for (key in this._dataDictionary) {
                    keyString = String(key);
                    tmpDictionary[keyString] = this._dataDictionary[keyString][rowIndex];
                };
                return (tmpDictionary);
            };
            return (new Dictionary());
        }
        public function getSelectedRowDataDictionary():Dictionary{
            if (this.selectedIndex > -1){
                return (this.getRowDataDictionary(this.selectedIndex));
            };
            return (null);
        }
        public function getSelectedRowIndex():int{
            return (this.selectedIndex);
        }
        public function getVisibleRowData():Array{
            var tmpArray:Array = new Array();
            var i:int = this.rowOffset;
            while (i < (this.rowOffset + this._configuration.pageSize)) {
                if (i < this.getRowCount()){
                    tmpArray.push(this.getRowData(i));
                };
                i++;
            };
            return (tmpArray);
        }
        public function getCheckedRow():Array{
            var i:*;
            var checkedRowArray:Array = new Array();
            if (this.isClass(this._dataRowClass, "OrderStatusDataRow")){
                i = 0;
                while (i < this.getRowCount()) {
                    if (this._dataDictionary["check_box"][i]){
                        checkedRowArray.push(this.getRowDataDictionary(i));
                    };
                    i++;
                };
            };
            return (checkedRowArray);
        }
        public function getCheckableRow():Array{
            var i:*;
            var checkableRow:Array = new Array();
            if (this.isClass(this._dataRowClass, "OrderStatusDataRow")){
                i = 0;
                while (i < this.getRowCount()) {
                    if (this._dataDictionary["CanCancel"][i].displayValue == "true"){
                        checkableRow.push(this.getRowDataDictionary(i));
                    };
                    i++;
                };
            };
            return (checkableRow);
        }
        public function getColumnIndexByColumnName(columnName:String):int{
            if (this._columnIndexDictionary[columnName] != null){
                return (this._columnIndexDictionary[columnName]);
            };
            return (-1);
        }
        public function getColumnNameByColumnIndex(columnIndex:int):String{
            if (this._columnNameArray[columnIndex] != null){
                return (this._columnNameArray[columnIndex]);
            };
            return ("");
        }
        public function getRowIndexByColumnAndValue(columnName:String, value):int{
            var i:*;
            var data:DynamicData;
            if (this._dataDictionary[columnName] == null){
                this._dataDictionary[columnName] = new Array();
            };
            if (((((!((this._keyColumnName == null))) && ((this._keyColumnName == columnName)))) && (!((this._keyRowIndexDictionary[value] == null))))){
                return (this._keyRowIndexDictionary[value]);
            };
            i = 0;
            while (i < this._dataDictionary[columnName].length) {
                data = this._dataDictionary[columnName][i];
                if (data.displayValue == value){
                    return (i);
                };
                i++;
            };
            return (-1);
        }
        public function getAllRowIndexByColumnAndValue(columnName:String, value):Array{
            var i:*;
            var data:DynamicData;
            var indexArray:Array = new Array();
            if (this._dataDictionary[columnName] == null){
                this._dataDictionary[columnName] = new Array();
            };
            if (((((!((this._keyColumnName == null))) && ((this._keyColumnName == columnName)))) && (!((this._keyRowIndexDictionary[value] == null))))){
                return (this._keyRowIndexDictionary[value]);
            };
            i = 0;
            while (i < this._dataDictionary[columnName].length) {
                data = this._dataDictionary[columnName][i];
                if (data.displayValue == value){
                    indexArray.push(i);
                };
                i++;
            };
            return (indexArray);
        }
        public function getColumnXByColumnName(columnName:String):Number{
            var index:int = this.getColumnIndexByColumnName(columnName);
            if (index >= 0){
                return (this.dataRowHeader.getColumnAtIndex(index).x);
            };
            return (-1);
        }
        public function getColumnWidthByColumnName(columnName:String):Number{
            var index:int = this.getColumnIndexByColumnName(columnName);
            if (index >= 0){
                return (this.dataRowHeader.getColumnAtIndex(index).width);
            };
            return (-1);
        }
        public function getColumnHeaderByColumnName(columnName:String){
            var index:int = this.getColumnIndexByColumnName(columnName);
            if (index >= 0){
                return (this.dataRowHeader.getColumnAtIndex(index));
            };
            return (null);
        }
        public function getColumnTypeByColumnName(columnName:String):int{
            return (this._columnTypeDictionary[columnName]);
        }
        public function getColumnTypeByColumnIndex(columnIndex:int):int{
            return (this._columnTypeDictionary[this._columnNameArray[columnIndex]]);
        }
        public function clearTable(clearOffsetFlag:Boolean=true):void{
            var key:Object;
            for (key in this._dataDictionary) {
                this._dataDictionary[key].length = 0;
            };
            this._keyRowIndexDictionary = new Dictionary();
            this.selectedIndex = -1;
            if (clearOffsetFlag){
                this.rowOffset = 0;
            };
            if (this.dataRowHeader != null){
                this.dataRowHeader.clearSorting();
            };
            this.hideAllChangePriceAndVolume();
            this.redrawDataRow();
            this.redrawScrollBar();
        }
        public function reloadTable():void{
            this.internalReloadTable(true);
        }
        public function reloadTableWithoutClearingTheOffset():void{
            this.internalReloadTable(false);
        }
        private function internalReloadTable(clearOffsetFlag:Boolean=true):void{
            var key:Object;
            var clonedDictionary:Dictionary = new Dictionary();
            for (key in this._dataDictionary) {
                clonedDictionary[key] = this._dataDictionary[key];
            };
            this.clearTable(clearOffsetFlag);
            for (key in clonedDictionary) {
                this._dataDictionary[key] = clonedDictionary[key];
            };
            this.redrawTable();
        }
        public function adjustTableSize(newSize:int):void{
            var i:*;
            var oldSize:int = this._configuration.pageSize;
            this.updateConfig("pageSize", newSize);
            if (oldSize < newSize){
                this.scrollToTop();
                this.redrawTable();
            } else {
                if (oldSize > newSize){
                    i = newSize;
                    while (i < oldSize) {
                        if (this._dataRowArray[i] != null){
                            removeChild(this._dataRowArray[i]);
                        };
                        i++;
                    };
                    this._dataRowArray.splice(newSize, (oldSize - newSize));
                    this.redrawScrollBar();
                };
            };
        }
        public function get isShowSymbolEdit():Boolean{
            return (this._isShowSymbolEdit);
        }
        public function enableFavouriteMode(isEnable:Boolean):void{
            var i:*;
            if (this.isClass(this._dataRowClass, "MarketWatchDataRow")){
                i = 0;
                while (i < this._dataRowArray.length) {
                    this._dataRowArray[i].canShowSymbolEdit = isEnable;
                    i++;
                };
            };
        }
        public function showAllSymbolEdit():void{
            var i:* = 0;
            while (i < this._dataRowArray.length) {
                if (((((this.isClass(this._dataRowClass, "MarketWatchDataRow")) && (!(this._dataRowArray[i].isAddFavouriteRow)))) && ((i < this.getRowCount())))){
                    this._dataRowArray[i].showSymbolEdit(false);
                    this._dataRowArray[i].isShowAllSymbolEdit = true;
                };
                i++;
            };
            this._isShowSymbolEdit = true;
        }
        public function hideAllSymbolEdit(isEdit:Boolean=true):void{
            var i:* = 0;
            while (i < this._dataRowArray.length) {
                if (this.isClass(this._dataRowClass, "MarketWatchDataRow")){
                    this._dataRowArray[i].hideSymbolEdit(isEdit);
                    this._dataRowArray[i].isShowAllSymbolEdit = false;
                };
                i++;
            };
            this._isShowSymbolEdit = false;
        }
        public function addHeaderExtraMenuButtonAtIndex(index:int):void{
            this.dataRowHeader.drawExtraMenuButtonAtIndex(index);
        }
        public function notifyChangeInstrumentIdAndPrice(instrumentId:String, orderSide:OrderSide, priceType:PriceType, price:Number, priceDigit:Number):void{
            logger.trace("will notify change");
            var parentRef:* = this.parent;
            if (((!((parentRef == null))) && (parentRef["notifyChangeInstrumentIdAndPrice"]))){
                logger.trace("notify change");
                parentRef.notifyChangeInstrumentIdAndPrice(instrumentId, orderSide, priceType, price, priceDigit);
            };
        }
        private function isShowAddFavouriteButton():Boolean{
            return (((((this._isShowFavourite) && ((this.getRowCount() < this.FAVOURITE_MAX_COUNT)))) && (!(((!(StreamingAttribute.isPrimaryScreen)) && (StreamingAttribute.isMarketRep))))));
        }
        public function setOrderStatusCallbackFunction(cellChangeButtonMouseClickCallbackFunction:Function, cellDetailButtonMouseClickCallbackFunction:Function, onCheckBoxCheckedCallbackFunction:Function=null, cellChangeOkButtonMouseClickCallbackFunction:Function=null):void{
            this._cellChangeButtonMouseClickCallbackFunction = cellChangeButtonMouseClickCallbackFunction;
            this._cellDetailButtonMouseClickCallbackFunction = cellDetailButtonMouseClickCallbackFunction;
            this._cellChangeOkButtonMouseClickCallbackFunction = cellChangeOkButtonMouseClickCallbackFunction;
            this._onCheckBoxCheckedCallbackFunction = onCheckBoxCheckedCallbackFunction;
        }
        public function selectAllCheckbox(isSelect:Boolean=true):void{
            var i:*;
            if (((this.isClass(this._dataRowClass, "OrderStatusDataRow")) && ((this.getRowCount() > 0)))){
                i = 0;
                while (i < this._dataDictionary["check_box"].length) {
                    this._dataDictionary["check_box"][i] = ((isSelect) && ((this._dataDictionary["CanCancel"][i].displayValue == "true")));
                    if (this.rowIsVisible(i)){
                        this._dataRowArray[(i - this.rowOffset)].setCheckbox(this._dataDictionary["check_box"][i]);
                    };
                    i++;
                };
            };
        }
        public function selectCheckbox(rowIndex:int, isSelect:Boolean=true):void{
            if (((((this.isClass(this._dataRowClass, "OrderStatusDataRow")) && ((this.getRowCount() > 0)))) && ((rowIndex < this.getRowCount())))){
                this._dataDictionary["check_box"][rowIndex] = ((isSelect) && ((this._dataDictionary["CanCancel"][rowIndex].displayValue == "true")));
                if (this.rowIsVisible(rowIndex)){
                    this._dataRowArray[(rowIndex - this.rowOffset)].setCheckbox(this._dataDictionary["check_box"][rowIndex]);
                };
            };
        }
        public function selectCheckboxFromList(orderAraayList:Array=null):void{
            var i:*;
            var j:*;
            if (((((this.isClass(this._dataRowClass, "OrderStatusDataRow")) && ((this.getRowCount() > 0)))) && (!((orderAraayList == null))))){
                i = 0;
                while (i < this._dataDictionary["check_box"].length) {
                    j = 0;
                    while (j < orderAraayList.length) {
                        if (orderAraayList[j] == this._dataDictionary["OrderNo"][i].displayValue){
                            this._dataDictionary["check_box"][i] = true;
                            if (this.rowIsVisible(i)){
                                this._dataRowArray[(i - this.rowOffset)].setCheckbox(this._dataDictionary["check_box"][i]);
                            };
                        };
                        j++;
                    };
                    i++;
                };
            };
        }
        public function showChangePriceAndVolume(orderNo:String):void{
            var rowIndex:int;
            var row:OrderStatusDataRow;
            if (this.isClass(this._dataRowClass, "OrderStatusDataRow")){
                this.hideAllChangePriceAndVolume();
                rowIndex = this.getRowIndexByColumnAndValue("OrderNo", orderNo);
                if ((((rowIndex > -1)) && (this.rowIsVisible(rowIndex)))){
                    row = this._dataRowArray[this.getDataRowIndex(rowIndex)];
                    row.showChangePriceAndVolume();
                };
            };
        }
        public function hideAllChangePriceAndVolume():void{
            var i:*;
            var row:OrderStatusDataRow;
            if (this.isClass(this._dataRowClass, "OrderStatusDataRow")){
                i = 0;
                while (i < this._dataRowArray.length) {
                    row = this._dataRowArray[i];
                    row.hideChangePriceAndVolume();
                    i++;
                };
            };
        }
        public function changeOrderAtRowIndex(rowIndex:int):void{
            var orderNo:String;
            if (rowIndex > -1){
                orderNo = this._dataDictionary["OrderNo"][rowIndex].displayValue;
                this._cellChangeButtonMouseClickCallbackFunction(orderNo);
            };
        }
        function onClickHeader(e:MouseEvent):void{
            if (this._configuration.enableSort){
                if ((((this.getColumnCount() > 0)) && ((this.getRowCount() > 0)))){
                    this.sort(this.findColumnIndexByPosition(e.stageX), this._dataRowArray[0].getSortFunction(this.findColumnIndexByPosition(e.stageX), true), this._dataRowArray[0].getSortFunction(this.findColumnIndexByPosition(e.stageX), false));
                };
            } else {
                if (this.isClass(this._dataRowClass, "MarketWatchDataRow")){
                    if (this._onTableHeaderClickCallbackFunction != null){
                        this._onTableHeaderClickCallbackFunction(this.findColumnIndexByPosition(e.stageX));
                    };
                };
            };
        }
        function onStartHeaderDragging(e:MouseEvent):void{
            var isLockedHeader = (this.getColumnNameByColumnIndex(this.findColumnIndexByPosition(e.stageX)) == "symbol");
            if (((this._configuration.enableAdjustColumn) && (!(isLockedHeader)))){
                e.target.startDrag(false, new Rectangle(this.marginLeft, 0, (this.dataGridWidth - e.target.width), 0));
                e.target.parent.setChildIndex(e.target, (e.target.parent.numChildren - 1));
                e.target.alpha = 0.5;
                this._currentDraggingObj = e.target;
                this._oldPosX = e.stageX;
                this._originColumn = this.findColumnIndexByPosition(this._oldPosX);
                this._isDraggingHeader = true;
            };
        }
        function onStartHeaderDraggingAndMove(e:MouseEvent):void{
            var targetColumnIndex:int;
            var isLockedHeader:Boolean;
            if (((this._isDraggingHeader) && (this._configuration.enableAdjustColumn))){
                if (this._onTableHeaderStartDragging != null){
                    this._onTableHeaderStartDragging();
                };
                targetColumnIndex = this.findColumnIndexByPosition(e.stageX);
                isLockedHeader = (this.getColumnNameByColumnIndex(targetColumnIndex) == "symbol");
                if (isLockedHeader){
                    return;
                };
                if (targetColumnIndex != this._originColumn){
                    if (e.stageX < this._oldPosX){
                        this.overlayHeaderAtIndex(targetColumnIndex, Direction.LEFT);
                    } else {
                        this.overlayHeaderAtIndex(targetColumnIndex, Direction.RIGHT);
                    };
                } else {
                    this.overlayHeaderAtIndex(targetColumnIndex, Direction.DOWN);
                };
            };
        }
        function onStartDraggingSeparator(e:MouseEvent):void{
            var i:*;
            var dragLeftBoundary:Number;
            var dragWidth:Number;
            if (this._configuration.enableAdjustColumn){
                i = 0;
                while (i < (this._columnNameArray.length - 1)) {
                    if (this._separatorArray[i].x == e.target.x){
                        this._currentSeparatorIndex = i;
                    };
                    i++;
                };
                dragLeftBoundary = 0;
                dragWidth = 0;
                if (this._currentSeparatorIndex == 0){
                    dragLeftBoundary = (this.marginLeft + this.getMaximumVisibleColumnTextWidth(0));
                    dragWidth = ((this._separatorArray[1].x - this.getMaximumVisibleColumnTextWidth(1)) - (this.marginLeft + this.getMaximumVisibleColumnTextWidth(0)));
                    e.target.startDrag(false, new Rectangle(dragLeftBoundary, (this._configuration.rowHeight / 2), dragWidth, 0));
                } else {
                    if (this._currentSeparatorIndex == ((this._columnNameArray.length - 1) - 1)){
                        dragLeftBoundary = (this._separatorArray[(this._currentSeparatorIndex - 1)].x + this.getMaximumVisibleColumnTextWidth(this._currentSeparatorIndex));
                        dragWidth = ((this._separatorArray[this._currentSeparatorIndex].x - (this._separatorArray[(this._currentSeparatorIndex - 1)].x + this.getMaximumVisibleColumnTextWidth(this._currentSeparatorIndex))) + ((this.dataGridWidth - this._separatorArray[this._currentSeparatorIndex].x) - this.getMaximumVisibleColumnTextWidth((this._currentSeparatorIndex + 1))));
                        e.target.startDrag(false, new Rectangle(dragLeftBoundary, (this._configuration.rowHeight / 2), dragWidth, 0));
                    } else {
                        dragLeftBoundary = (this._separatorArray[(this._currentSeparatorIndex - 1)].x + this.getMaximumVisibleColumnTextWidth(this._currentSeparatorIndex));
                        dragWidth = ((this._separatorArray[(this._currentSeparatorIndex + 1)].x - this._separatorArray[(this._currentSeparatorIndex - 1)].x) - (this.getMaximumVisibleColumnTextWidth(this._currentSeparatorIndex) + this.getMaximumVisibleColumnTextWidth((this._currentSeparatorIndex + 1))));
                        e.target.startDrag(false, new Rectangle(dragLeftBoundary, (this._configuration.rowHeight / 2), dragWidth, 0));
                    };
                };
                this._oldPosX = e.target.x;
                this._isDraggingSeparator = true;
                if (this._onTableHeaderStartDragging != null){
                    this._onTableHeaderStartDragging();
                };
            };
        }
        function onStopDragging(e:MouseEvent):void{
            var i:*;
            var diff:int;
            var isLockedHeader:Boolean;
            logger.trace(("Stop dragging at " + e.stageX));
            Mouse.cursor = MouseCursor.AUTO;
            stopDrag();
            if (((this._isDraggingSeparator) && (this._configuration.enableAdjustColumn))){
                if (e.target.x > this._oldPosX){
                    diff = (Math.min(e.target.x, this._separatorArray[this._currentSeparatorIndex].x) - this._oldPosX);
                } else {
                    if (e.target.x <= this._oldPosX){
                        diff = (Math.max(e.target.x, this._separatorArray[this._currentSeparatorIndex].x) - this._oldPosX);
                    };
                };
                this.dataRowHeader.getColumnAtIndex(this._currentSeparatorIndex).width = (this.dataRowHeader.getColumnAtIndex(this._currentSeparatorIndex).width + diff);
                if (this.dataRowHeader.isExtraField(this._currentSeparatorIndex)){
                    this.dataRowHeader.drawExtraMenuButtonAtIndex(this._currentSeparatorIndex);
                };
                this._columnWidthArray[this._currentSeparatorIndex] = this.dataRowHeader.getColumnAtIndex(this._currentSeparatorIndex).width;
                this.dataRowHeader.getColumnAtIndex((this._currentSeparatorIndex + 1)).x = (this.dataRowHeader.getColumnAtIndex((this._currentSeparatorIndex + 1)).x + diff);
                this.dataRowHeader.getColumnAtIndex((this._currentSeparatorIndex + 1)).width = (this.dataRowHeader.getColumnAtIndex((this._currentSeparatorIndex + 1)).width + (diff * -1));
                this._columnWidthArray[(this._currentSeparatorIndex + 1)] = this.dataRowHeader.getColumnAtIndex((this._currentSeparatorIndex + 1)).width;
                i = 0;
                while (i < this._dataRowArray.length) {
                    this._dataRowArray[i].setColumnWidth(this._currentSeparatorIndex, (this._dataRowArray[i].getColumnWidth(this._currentSeparatorIndex) + diff));
                    this._dataRowArray[i].setColumnPosition((this._currentSeparatorIndex + 1), (this._dataRowArray[i].getColumnX((this._currentSeparatorIndex + 1)) + diff), (this._dataRowArray[i].getColumnWidth((this._currentSeparatorIndex + 1)) - diff));
                    i++;
                };
                this._isDraggingSeparator = false;
            } else {
                if (((this._isDraggingHeader) && (this._configuration.enableAdjustColumn))){
                    isLockedHeader = (this.getColumnNameByColumnIndex(this.findColumnIndexByPosition(e.stageX)) == "symbol");
                    this._currentDraggingObj.alpha = 1;
                    if (!isLockedHeader){
                        this.shiftColumn(this._oldPosX, e.stageX);
                    } else {
                        this.shiftColumn(this._oldPosX, this._oldPosX);
                    };
                    this._isDraggingHeader = false;
                    this._headerOverlay.graphics.clear();
                };
            };
        }
        function onMouseOverSeparator(e:MouseEvent):void{
            Mouse.cursor = MouseCursor.HAND;
        }
        function onMouseOutSeparator(e:MouseEvent):void{
            if (!this._isDraggingSeparator){
                Mouse.cursor = MouseCursor.AUTO;
            };
        }
        private function onScrollBarScroll(event:ScrollEvent):void{
            var newRowOffset:* = Math.floor(event.target.scrollPosition);
            if (this.rowOffset == newRowOffset){
                return;
            };
            this.rowOffset = newRowOffset;
            if (new Date().getTime() <= (this.lastScrollRenderTime.getTime() + this.scrollDelayTime)){
                return;
            };
            this.redrawDataRow();
            this._scrollBarTimer.reset();
            this._scrollBarTimer.start();
            this._stopScrollRenderTimer.reset();
            this._stopScrollRenderTimer.start();
            this.hideAllChangePriceAndVolume();
            if (!this._isEditMode){
                this.hideAllSymbolEdit(this._isEditMode);
            };
            this.lastScrollRenderTime = new Date();
            TooltipService.getInstance().hideTooltip();
        }
        public function onMouseWheelScroll(event:MouseEvent):void{
            var newRowOffset:*;
            var rowCount:*;
            var index:*;
            if (!(event.target is CellRenderer)){
                if (this._isShowFavourite){
                    rowCount = Math.min(20, (this.getRowCount() + 1));
                } else {
                    rowCount = this.getRowCount();
                };
                if (event.delta > 0){
                    if (this.rowOffset > 0){
                        newRowOffset = (Math.floor(this.rowOffset) - event.delta);
                    } else {
                        return;
                    };
                } else {
                    if (this.rowOffset < (rowCount - this._configuration.pageSize)){
                        newRowOffset = (Math.floor(this.rowOffset) - event.delta);
                    } else {
                        return;
                    };
                };
                if (this.rowOffset == newRowOffset){
                    return;
                };
                newRowOffset = Math.min(newRowOffset, (rowCount - this._configuration.pageSize));
                if (newRowOffset < 0){
                    newRowOffset = 0;
                };
                this._scrollBar.scrollPosition = newRowOffset;
                this.rowOffset = newRowOffset;
                if (new Date().getTime() <= (this.lastMouseWheelRenderTime.getTime() + this.scrollDelayTime)){
                    return;
                };
                this.redrawDataRow();
                this._scrollBarTimer.reset();
                this._scrollBarTimer.start();
                this._stopScrollRenderTimer.reset();
                this._stopScrollRenderTimer.start();
                this.hideAllChangePriceAndVolume();
                this.lastMouseWheelRenderTime = new Date();
                TooltipService.getInstance().hideTooltip();
                if (this.isClass(this._dataRowClass, "MarketWatchDataRow")){
                    for (index in this._dataRowArray) {
                        this._dataRowArray[index].hideSymbolAutoCompleteList();
                    };
                };
            };
        }
        public function onCellSelected(event:MouseEvent):void{
            var rowDataDictionary:Dictionary;
            var cellIndex:int;
            var target:* = event.target;
            if ((((target == null)) || ((target is CellRenderer)))){
                return;
            };
            while (!((target is DataCell))) {
                if (target == stage){
                    return;
                };
                if (target.hasOwnProperty("parent")){
                    target = target.parent;
                } else {
                    return;
                };
            };
            if (this.getRowIndex(target) < this.getRowCount()){
                this.selectedIndex = this.getRowIndex(target);
                if (this._onCellSelectedCallbackFunction != null){
                    rowDataDictionary = this.getRowDataDictionary(this.selectedIndex);
                    cellIndex = target.getColumnIndexByX(event.stageX);
                    this._onCellSelectedCallbackFunction(rowDataDictionary, cellIndex);
                };
                this.redrawDataRow();
            };
        }
        private function onCellMouseOver(event:MouseEvent):void{
            var target:*;
            if (this._configuration.enableCellHoverHighlight){
                target = event.target;
                while (!((target is DataCell))) {
                    target = target.parent;
                };
                if (((!((this.getRowIndex(target) == this.selectedIndex))) && ((this.getRowIndex(target) < this.getRowCount())))){
                    target.setBackgroundColor(this._configuration.hoverCellBackgroundColor);
                };
            };
        }
        private function onCellMouseOut(event:MouseEvent):void{
            var target:*;
            if (this._configuration.enableCellHoverHighlight){
                target = event.target;
                while (!((target is DataCell))) {
                    target = target.parent;
                };
                if (this.getRowIndex(target) != this.selectedIndex){
                    target.clearHighlight();
                };
            };
        }
        public function onKeyboardKeyDown(event:KeyboardEvent):void{
            var rowDataDictionary:Dictionary;
            if (event.keyCode == 38){
                if (this.selectedIndex > 0){
                    if (this.selectedIndex == this.rowOffset){
                        this.rowOffset--;
                        this.selectedIndex--;
                        this.redrawDataRow();
                        this._scrollBar.scrollPosition--;
                        this._scrollBarTimer.reset();
                        this._scrollBarTimer.start();
                    } else {
                        this.selectedIndex--;
                        if (((((!(this.rowIsVisible(this.selectedIndex))) && ((this.selectedIndex < this.rowOffset)))) && ((this.selectedIndex > 0)))){
                            this.rowOffset = this.selectedIndex;
                            this._scrollBarTimer.reset();
                            this._scrollBarTimer.start();
                        } else {
                            if (((((!(this.rowIsVisible(this.selectedIndex))) && ((this.selectedIndex > this.rowOffset)))) && ((this.selectedIndex > 0)))){
                                this.rowOffset = ((this.selectedIndex - this._configuration.pageSize) + 1);
                                this._scrollBarTimer.reset();
                                this._scrollBarTimer.start();
                            };
                        };
                        this.redrawDataRow();
                    };
                    if (this._onCellSelectedCallbackFunction != null){
                        rowDataDictionary = this.getRowDataDictionary(this.selectedIndex);
                        this._onCellSelectedCallbackFunction(rowDataDictionary);
                    };
                    TooltipService.getInstance().hideTooltip();
                    this.hideAllChangePriceAndVolume();
                };
            } else {
                if (event.keyCode == 40){
                    if (this.selectedIndex < (this.getRowCount() - 1)){
                        if (this.selectedIndex == ((this.rowOffset + this._configuration.pageSize) - 1)){
                            this.rowOffset++;
                            this.selectedIndex++;
                            this.redrawDataRow();
                            this._scrollBar.scrollPosition++;
                            this._scrollBarTimer.reset();
                            this._scrollBarTimer.start();
                        } else {
                            this.selectedIndex++;
                            if (((((!(this.rowIsVisible(this.selectedIndex))) && ((this.selectedIndex < this.rowOffset)))) && ((this.selectedIndex > 0)))){
                                this.rowOffset = this.selectedIndex;
                                this._scrollBarTimer.reset();
                                this._scrollBarTimer.start();
                            } else {
                                if (((((!(this.rowIsVisible(this.selectedIndex))) && ((this.selectedIndex > this.rowOffset)))) && ((this.selectedIndex > 0)))){
                                    this.rowOffset = ((this.selectedIndex - this._configuration.pageSize) + 1);
                                    this._scrollBarTimer.reset();
                                    this._scrollBarTimer.start();
                                };
                            };
                            this.redrawDataRow();
                        };
                        if (this._onCellSelectedCallbackFunction != null){
                            rowDataDictionary = this.getRowDataDictionary(this.selectedIndex);
                            this._onCellSelectedCallbackFunction(rowDataDictionary);
                        };
                        TooltipService.getInstance().hideTooltip();
                        this.hideAllChangePriceAndVolume();
                    };
                };
            };
        }
        private function onScrollBarTimerTick(event:TimerEvent):void{
            if (this._onScrollBarScrollCallbackFunction != null){
                this._onScrollBarScrollCallbackFunction();
            };
        }
        private function onStopScrollRenderTimerTick(event:TimerEvent):void{
            this.redrawDataRow();
        }
        private function onCheckboxChecked(isChecked:Boolean, row:DataCell):void{
            var rowIndex = -1;
            var i:* = 0;
            while (i < this._dataRowArray.length) {
                if (this._dataRowArray[i] == row){
                    rowIndex = i;
                    break;
                };
                i++;
            };
            this._dataDictionary["check_box"][(this.rowOffset + rowIndex)] = isChecked;
            if (this._onCheckBoxCheckedCallbackFunction != null){
                this._onCheckBoxCheckedCallbackFunction(isChecked, this.getDataDictionaryAtRowIndex((this.rowOffset + rowIndex)));
            };
        }
        private function onDeleteTableRow(row:DataCell):void{
            var rowIndex = -1;
            var i:* = 0;
            while (i < this._dataRowArray.length) {
                if (this._dataRowArray[i] == row){
                    rowIndex = i;
                    break;
                };
                i++;
            };
            var dataArray:Array = this.clone(row.getDataArray());
            this.removeRowAtIndex((this.rowOffset + rowIndex));
            if (this._onDeleteDataRowCallbackFunction != null){
                this._onDeleteDataRowCallbackFunction(dataArray);
            };
            this.redrawTable();
        }
        private function onMoveUpTableRow(row:DataCell):void{
            var dict:Array;
            var tmpData:DynamicData;
            var rowIndex = -1;
            var i:* = 0;
            while (i < this._dataRowArray.length) {
                if (this._dataRowArray[i] == row){
                    rowIndex = i;
                    break;
                };
                i++;
            };
            if (rowIndex == 0){
                return;
            };
            var realRowIndex:int = (rowIndex + this.rowOffset);
            var fromKey:DynamicData = this.getDataDictionaryAtRowIndex(realRowIndex)[this._keyColumnName];
            var toKey:DynamicData = this.getDataDictionaryAtRowIndex((realRowIndex - 1))[this._keyColumnName];
            var fromKeyString:String = this.getRealSymbol(fromKey.displayValue);
            var toKeyString:String = this.getRealSymbol(toKey.displayValue);
            var fromIndex:int = this._keyRowIndexDictionary[fromKeyString];
            this._keyRowIndexDictionary[fromKeyString] = this._keyRowIndexDictionary[toKeyString];
            this._keyRowIndexDictionary[toKeyString] = fromIndex;
            for each (dict in this._dataDictionary) {
                tmpData = dict[(this.rowOffset + rowIndex)];
                dict[(this.rowOffset + rowIndex)] = dict[((this.rowOffset + rowIndex) - 1)];
                dict[((this.rowOffset + rowIndex) - 1)] = tmpData;
            };
            this.redrawDataRow();
            if (!this._isShowSymbolEdit){
                this._dataRowArray[rowIndex].showSymbolEdit();
                this._dataRowArray[rowIndex].hideSymbolEdit();
                this._dataRowArray[(rowIndex - 1)].showSymbolEdit();
            };
            if (this._onSwapDataRowCallbackFunction != null){
                this._onSwapDataRowCallbackFunction(fromKeyString, toKeyString);
            };
        }
        private function onMoveDownTableRow(row:DataCell):void{
            var dict:Array;
            var tmpData:DynamicData;
            var rowIndex = -1;
            var i:* = 0;
            while (i < this._dataRowArray.length) {
                if (this._dataRowArray[i] == row){
                    rowIndex = i;
                    break;
                };
                i++;
            };
            if (rowIndex == (this._configuration.pageSize - 1)){
                return;
            };
            var realRowIndex:int = (rowIndex + this.rowOffset);
            var fromKey:DynamicData = this.getDataDictionaryAtRowIndex(realRowIndex)[this._keyColumnName];
            var toKey:DynamicData = this.getDataDictionaryAtRowIndex((realRowIndex + 1))[this._keyColumnName];
            var fromKeyString:String = this.getRealSymbol(fromKey.displayValue);
            var toKeyString:String = this.getRealSymbol(toKey.displayValue);
            var fromIndex:int = this._keyRowIndexDictionary[fromKeyString];
            this._keyRowIndexDictionary[fromKeyString] = this._keyRowIndexDictionary[toKeyString];
            this._keyRowIndexDictionary[toKeyString] = fromIndex;
            for each (dict in this._dataDictionary) {
                tmpData = dict[(this.rowOffset + rowIndex)];
                dict[(this.rowOffset + rowIndex)] = dict[((this.rowOffset + rowIndex) + 1)];
                dict[((this.rowOffset + rowIndex) + 1)] = tmpData;
            };
            this.redrawDataRow();
            if (!this._isShowSymbolEdit){
                this._dataRowArray[rowIndex].showSymbolEdit();
                this._dataRowArray[rowIndex].hideSymbolEdit();
                this._dataRowArray[(rowIndex + 1)].showSymbolEdit();
            };
            if (this._onSwapDataRowCallbackFunction != null){
                this._onSwapDataRowCallbackFunction(fromKeyString, toKeyString);
            };
        }
        private function onAddSymbol(symbol:String):void{
            this.addItem([{
                name:"symbol",
                data:symbol
            }]);
            this.redrawTable();
            if (this._onAddDataRowCallbackFunction != null){
                this._onAddDataRowCallbackFunction(symbol);
            };
        }
        private function onUpdateSymbol(oldSymbol:String, symbol:String):void{
            var index:int = this.getRowIndexByColumnAndValue("symbol", oldSymbol);
            this.updateCell(symbol, index, "symbol");
            this._keyRowIndexDictionary[symbol] = index;
            logger.info((((((("update symbol [" + oldSymbol) + "] at row ") + index) + " to symbol [") + symbol) + "]"));
            if (this._onUpdateDataRowCallbackFunction != null){
                this._onUpdateDataRowCallbackFunction(index, oldSymbol, symbol);
            };
        }
        private function onChangeTheme(e:MessageControlEvent):void{
            logger.info(("Before change " + this._configuration.hoverCellBackgroundColor));
            logger.info(("Data grid change hover color to " + ThemeManager.TABLE_HOVER_CELL_COLOR));
            this.updateConfig("hoverCellBackgroundColor", ThemeManager.TABLE_HOVER_CELL_COLOR);
            this.updateConfig("selectedCellBackgroundColor", ThemeManager.TABLE_SELECTED_CELL_COLOR);
            logger.info(("After change " + this._configuration.hoverCellBackgroundColor));
        }
        public function updateConfig(key:String, value):void{
            if (this._configuration[key] != null){
                this._configuration[key] = value;
            };
        }
        public function drawBackground(color:uint):void{
            this.graphics.clear();
            this.graphics.beginFill(color);
            this.graphics.drawRect(0, this.marginTop, this.width, this._scrollBar.height);
            this.graphics.endFill();
        }
        public function clearBackground():void{
            this.graphics.clear();
        }
        public function updateCellBackgroundColor(color:uint, rowIndex:int, columnName:String):void{
            var data:DynamicData = this._dataDictionary[columnName][rowIndex];
            data.backgroundColor = color;
        }
        public function updateRowBackgroundColor(color:uint, rowIndex:int):void{
            var i:* = 0;
            while (i < this._columnNameArray.length) {
                this.updateCellBackgroundColor(color, rowIndex, this._columnNameArray[i]);
                i++;
            };
        }
        public function scrollToTop():void{
            this._scrollBar.scrollPosition = 0;
            this.selectedIndex = 0;
            this.redrawDataRow();
        }
        public function scrollToBottom():void{
            this._scrollBar.scrollPosition = this._scrollBar.maxScrollPosition;
        }
        public function highlightCell(index:int){
            if (this.rowIsVisible(index)){
                this.selectedIndex = index;
                this.redrawDataRow();
            };
        }
        private function sort(columnIndex:int, comparatorASC:Function, comparatorDESC:Function):void{
            var key:Object;
            var delayedRedrawTimer:Timer;
            var tmpArray2:Array;
            var remapIndex:int;
            if ((((comparatorASC == null)) || ((comparatorDESC == null)))){
                return;
            };
            var columnName:String = this._columnNameArray[columnIndex];
            var originArray:Array = this.clone(this._dataDictionary[columnName]);
            var isDESC:Boolean = (((this.dataRowHeader.sortArray[columnIndex] == null)) || (!(this.dataRowHeader.sortArray[columnIndex])));
            if (isDESC){
                this._dataDictionary[columnName] = this.mergesort(this._dataDictionary[columnName], comparatorASC);
                this.dataRowHeader.sort(columnIndex, true);
            } else {
                this._dataDictionary[columnName] = this.mergesort(this._dataDictionary[columnName], comparatorDESC);
                this.dataRowHeader.sort(columnIndex, false);
            };
            this._keyRowIndexDictionary = new Dictionary();
            var mappingDictionary:* = new Dictionary();
            var i:int;
            while (i < this._dataDictionary[columnName].length) {
                if (mappingDictionary[this._dataDictionary[columnName][i].displayValue] == null){
                    mappingDictionary[this._dataDictionary[columnName][i].displayValue] = i;
                };
                if (columnName == this._keyColumnName){
                    this._keyRowIndexDictionary[this._dataDictionary[columnName][i]] = i;
                };
                i++;
            };
            var remapArray:Array = new Array();
            var lastItem:String;
            i = 0;
            while (i < originArray.length) {
                if (originArray[i].displayValue == lastItem){
                    remapArray[i] = (remapArray[(i - 1)] + 1);
                } else {
                    remapArray[i] = mappingDictionary[originArray[i].displayValue];
                };
                lastItem = originArray[i].displayValue;
                i++;
            };
            if (this.isClass(this._dataRowClass, "OrderStatusDataRow")){
                i = 0;
                while (i < this._dataDictionary["check_box"].length) {
                    this._dataDictionary["check_box"][i] = false;
                    i++;
                };
                if (this._onCheckBoxCheckedCallbackFunction != null){
                    this._onCheckBoxCheckedCallbackFunction(false, null);
                };
            };
            for (key in this._dataDictionary) {
                if (key != columnName){
                    tmpArray2 = new Array(this._dataDictionary[key].length);
                    i = 0;
                    while (i < this._dataDictionary[key].length) {
                        remapIndex = remapArray[i];
                        while (tmpArray2[remapIndex] != null) {
                            remapIndex++;
                        };
                        tmpArray2[remapIndex] = this._dataDictionary[key][i];
                        if (key == this._keyColumnName){
                            this._keyRowIndexDictionary[this._dataDictionary[key][i]] = remapIndex;
                        };
                        i++;
                    };
                    this._dataDictionary[key] = tmpArray2.slice();
                };
            };
            this.redrawDataRow();
            delayedRedrawTimer = new Timer(this.SORT_DELAYED_REDRAW_TIME, 1);
            delayedRedrawTimer.addEventListener(TimerEvent.TIMER, this.delayedRedrawDataRow);
            delayedRedrawTimer.start();
        }
        private function mergesort(a:Array, compareFunction:Function):Array{
            var middle:uint;
            var left:Array;
            var right:Array;
            var j:uint;
            var k:uint;
            var i:uint;
            if (a.length <= 1){
                return (a);
            };
            middle = (a.length / 2);
            left = new Array(middle);
            right = new Array((a.length - middle));
            j = 0;
            k = 0;
            i = 0;
            while (i < middle) {
                var _temp1 = j;
                j = (j + 1);
                var _local9 = _temp1;
                left[_local9] = a[i];
                i++;
            };
            i = middle;
            while (i < a.length) {
                var _temp2 = k;
                k = (k + 1);
                _local9 = _temp2;
                right[_local9] = a[i];
                i++;
            };
            left = this.mergesort(left, compareFunction);
            right = this.mergesort(right, compareFunction);
            if (compareFunction(left[(left.length - 1)], right[0]) <= 0){
                return (left.concat(right));
            };
            a = this.merge(left, right, compareFunction);
            return (a);
        }
        private function merge(left:Array, right:Array, compareFunction:Function):Array{
            var result:Array = new Array((left.length + right.length));
            var j:uint;
            var k:uint;
            var m:uint;
            while ((((j < left.length)) && ((k < right.length)))) {
                if (compareFunction(left[j], right[k]) <= 0){
                    var _temp1 = m;
                    m = (m + 1);
                    var _local8 = _temp1;
                    var _temp2 = j;
                    j = (j + 1);
                    result[_local8] = left[_temp2];
                } else {
                    var _temp3 = m;
                    m = (m + 1);
                    _local8 = _temp3;
                    var _temp4 = k;
                    k = (k + 1);
                    result[_local8] = right[_temp4];
                };
            };
            while (j < left.length) {
                var _temp5 = m;
                m = (m + 1);
                _local8 = _temp5;
                result[_local8] = left[j];
                j++;
            };
            while (k < right.length) {
                var _temp6 = m;
                m = (m + 1);
                _local8 = _temp6;
                result[_local8] = right[k];
                k++;
            };
            return (result);
        }
        private function shiftColumn(origin:int, destination:int):void{
            logger.trace(((("Shift column from " + origin) + " to ") + destination));
            var originColumnIndex:int = this._originColumn;
            var destinationColumnIndex:int = this.findColumnIndexByPosition(destination);
            logger.trace(((("origin column " + originColumnIndex) + ", destination ") + destinationColumnIndex));
            if ((((originColumnIndex > -1)) && ((destinationColumnIndex > -1)))){
                this.swapColumn(originColumnIndex, destinationColumnIndex, this._swapMode);
            };
            this.redrawDataRow();
        }
        private function findColumnIndexByPosition(inputX:int):int{
            var i:* = 0;
            while (i < this._columnNameArray.length) {
                if (this._isDraggingHeader){
                    if (i != this._originColumn){
                        if ((((inputX >= this.dataRowHeader.getColumnAtIndex(i).getBounds(stage).x)) && ((inputX < (this.dataRowHeader.getColumnAtIndex(i).getBounds(stage).x + this.dataRowHeader.getColumnAtIndex(i).getBounds(stage).width))))){
                            return (i);
                        };
                    } else {
                        if (this._originColumn == 0){
                            if (inputX < this.dataRowHeader.getColumnAtIndex(1).getBounds(stage).x){
                                return (this._originColumn);
                            };
                        } else {
                            if (this._originColumn == (this._columnNameArray.length - 1)){
                                if (inputX >= (this.dataRowHeader.getColumnAtIndex((this._originColumn - 1)).getBounds(stage).x + this.dataRowHeader.getColumnAtIndex((this._originColumn - 1)).getBounds(stage).width)){
                                    return (this._originColumn);
                                };
                            } else {
                                if ((((inputX >= (this.dataRowHeader.getColumnAtIndex((this._originColumn - 1)).getBounds(stage).x + this.dataRowHeader.getColumnAtIndex((this._originColumn - 1)).getBounds(stage).width))) && ((inputX < this.dataRowHeader.getColumnAtIndex((this._originColumn + 1)).getBounds(stage).x)))){
                                    return (this._originColumn);
                                };
                            };
                        };
                    };
                } else {
                    if ((((inputX >= this.dataRowHeader.getColumnAtIndex(i).getBounds(stage).x)) && ((inputX < (this.dataRowHeader.getColumnAtIndex(i).getBounds(stage).x + this.dataRowHeader.getColumnAtIndex(i).getBounds(stage).width))))){
                        return (i);
                    };
                };
                i++;
            };
            return (-1);
        }
        private function overlayHeaderAtIndex(index:int, direction:Direction):void{
            var verticesDown:Vector.<Number>;
            var verticesUp:Vector.<Number>;
            var x:Number = this.dataRowHeader.getColumnAtIndex(index).x;
            var y:Number = this.dataRowHeader.getColumnAtIndex(index).y;
            var width:Number = this.dataRowHeader.getColumnAtIndex(index).width;
            var height:Number = this.dataRowHeader.getColumnAtIndex(index).height;
            var overlayBarwidth:Number = 1;
            var overlayTriangle:Number = 4;
            if (direction.isLeft()){
                verticesDown = new Vector.<Number>();
                verticesDown.push((x + (overlayTriangle * -1)), y);
                verticesDown.push(x, (y + (overlayTriangle * 2)));
                verticesDown.push((x + overlayTriangle), y);
                verticesUp = new Vector.<Number>();
                verticesUp.push((x + (overlayTriangle * -1)), (y + height));
                verticesUp.push(x, ((y + height) - (overlayTriangle * 2)));
                verticesUp.push((x + overlayTriangle), (y + height));
                this._headerOverlay.graphics.clear();
                this._headerOverlay.graphics.beginFill(0xFFFFFF);
                this._headerOverlay.graphics.drawRect((x - overlayBarwidth), y, (overlayBarwidth * 2), height);
                this._headerOverlay.graphics.drawTriangles(verticesDown);
                this._headerOverlay.graphics.drawTriangles(verticesUp);
                this._headerOverlay.alpha = 0.8;
                this._headerOverlay.graphics.endFill();
            } else {
                if (direction.isRight()){
                    verticesDown = new Vector.<Number>();
                    verticesDown.push(((x + width) + (overlayTriangle * -1)), y);
                    verticesDown.push((x + width), (y + (overlayTriangle * 2)));
                    verticesDown.push(((x + width) + overlayTriangle), y);
                    verticesUp = new Vector.<Number>();
                    verticesUp.push(((x + width) + (overlayTriangle * -1)), (y + height));
                    verticesUp.push((x + width), ((y + height) - (overlayTriangle * 2)));
                    verticesUp.push(((x + width) + overlayTriangle), (y + height));
                    this._headerOverlay.graphics.clear();
                    this._headerOverlay.graphics.beginFill(0xFFFFFF);
                    this._headerOverlay.graphics.drawRect(((x + width) - overlayBarwidth), y, (overlayBarwidth * 2), height);
                    this._headerOverlay.graphics.drawTriangles(verticesDown);
                    this._headerOverlay.graphics.drawTriangles(verticesUp);
                    this._headerOverlay.alpha = 0.8;
                    this._headerOverlay.graphics.endFill();
                } else {
                    this._headerOverlay.graphics.clear();
                    this._headerOverlay.graphics.beginFill(0xFFFFFF);
                    this._headerOverlay.graphics.drawRect(x, y, width, height);
                    this._headerOverlay.graphics.drawTriangles(verticesDown);
                    this._headerOverlay.graphics.drawTriangles(verticesUp);
                    this._headerOverlay.alpha = 0.3;
                    this._headerOverlay.graphics.endFill();
                };
            };
        }
        private function swapColumn(originColumnIndex:int, destinationColumnIndex:int, swapMode:int=2):void{
            var i:int;
            var tmpData:*;
            var tmpColumn:*;
            var tmpColumnName:String;
            if (swapMode == this.SWAP_MODE_SWAP){
                tmpData = this.dataRowHeader.getColumnAtIndex(originColumnIndex);
                this.dataRowHeader.setColumnAtIndex(originColumnIndex, this.dataRowHeader.getColumnAtIndex(destinationColumnIndex));
                this.dataRowHeader.setColumnAtIndex(destinationColumnIndex, tmpData);
                tmpData = this._dataDictionary[this._columnNameArray[originColumnIndex]];
                this._dataDictionary[this._columnNameArray[originColumnIndex]] = this._dataDictionary[this._columnNameArray[destinationColumnIndex]];
                this._dataDictionary[this._columnNameArray[destinationColumnIndex]] = tmpData;
                tmpData = this._columnNameArray[originColumnIndex];
                this._columnNameArray[originColumnIndex] = this._columnNameArray[destinationColumnIndex];
                this._columnNameArray[destinationColumnIndex] = tmpData;
                this._columnIndexDictionary[this._columnNameArray[destinationColumnIndex]] = originColumnIndex;
                this._columnIndexDictionary[tmpData] = destinationColumnIndex;
            } else {
                if (swapMode == this.SWAP_MODE_SHIFT){
                    if (originColumnIndex < destinationColumnIndex){
                        tmpColumn = this.dataRowHeader.getColumnAtIndex(originColumnIndex);
                        tmpColumnName = this._columnNameArray[originColumnIndex];
                        i = originColumnIndex;
                        while (i < destinationColumnIndex) {
                            this.dataRowHeader.setColumnAtIndex(i, this.dataRowHeader.getColumnAtIndex((i + 1)));
                            this._columnIndexDictionary[this._columnNameArray[(i + 1)]] = i;
                            this._columnNameArray[i] = this._columnNameArray[(i + 1)];
                            i++;
                        };
                        this.dataRowHeader.setColumnAtIndex(destinationColumnIndex, tmpColumn);
                        this._columnNameArray[destinationColumnIndex] = tmpColumnName;
                        this._columnIndexDictionary[tmpColumnName] = destinationColumnIndex;
                    } else {
                        if (originColumnIndex > destinationColumnIndex){
                            tmpColumn = this.dataRowHeader.getColumnAtIndex(originColumnIndex);
                            tmpColumnName = this._columnNameArray[originColumnIndex];
                            i = originColumnIndex;
                            while (i > destinationColumnIndex) {
                                this.dataRowHeader.setColumnAtIndex(i, this.dataRowHeader.getColumnAtIndex((i - 1)));
                                this._columnIndexDictionary[this._columnNameArray[(i - 1)]] = i;
                                this._columnNameArray[i] = this._columnNameArray[(i - 1)];
                                i--;
                            };
                            this.dataRowHeader.setColumnAtIndex(destinationColumnIndex, tmpColumn);
                            this._columnNameArray[destinationColumnIndex] = tmpColumnName;
                            this._columnIndexDictionary[tmpColumnName] = destinationColumnIndex;
                        };
                    };
                };
            };
            i = 0;
            while (i < this._columnNameArray.length) {
                if (i == 0){
                    this.dataRowHeader.getColumnAtIndex(i).x = this.marginLeft;
                } else {
                    this.dataRowHeader.getColumnAtIndex(i).x = (this.dataRowHeader.getColumnAtIndex((i - 1)).x + this.dataRowHeader.getColumnAtIndex((i - 1)).width);
                };
                this._columnWidthArray[i] = this.dataRowHeader.getColumnAtIndex(i).width;
                i++;
            };
            i = 0;
            while (i < this._separatorArray.length) {
                this._separatorArray[i].x = (this.dataRowHeader.getColumnAtIndex(i).x + this.dataRowHeader.getColumnAtIndex(i).width);
                i++;
            };
            i = 0;
            while (i < this._dataRowArray.length) {
                this._dataRowArray[i].swapColumn(originColumnIndex, destinationColumnIndex, swapMode);
                i++;
            };
            if (this._onTableAdjustHeaderCallbackFunction != null){
                this._onTableAdjustHeaderCallbackFunction();
            };
        }
        public function redrawTable(delayedTime:Number=50){
            var i:*;
            var dataArray:Array;
            var _dataRow:*;
            var j:*;
            if (this._dataRowArray.length < this._configuration.pageSize){
                i = this._dataRowArray.length;
                while (i < this._configuration.pageSize) {
                    dataArray = this.getRowData(this._dataRowArray.length);
                    if (dataArray == null){
                        dataArray = new Array();
                        j = 0;
                        while (j < this._columnNameArray.length) {
                            if (this._columnTypeDictionary[this._columnNameArray[j]] == DynamicData.TYPE_LABEL){
                                dataArray.push(new DynamicData(DynamicData.TYPE_LABEL, ""));
                            } else {
                                dataArray.push(new DynamicData(this._columnTypeDictionary[this._columnNameArray[j]], NaN));
                            };
                            j++;
                        };
                    };
                    _dataRow = new this._dataRowClass();
                    _dataRow.initDataRow(dataArray, this._columnWidthArray, this._configuration.rowHeight, this._defaultFont);
                    if (this.isClass(this._dataRowClass, "MarketWatchDataRow")){
                        _dataRow.setMarketWatchCallBackFunction(this.onDeleteTableRow, this.onMoveUpTableRow, this.onMoveDownTableRow, this.onAddSymbol, this.onUpdateSymbol);
                        _dataRow.loadSymbolAutoCompleteList();
                    };
                    if (this.isClass(this._dataRowClass, "OrderStatusDataRow")){
                        _dataRow.setCancelOrderCheckBoxCheckedCallbackFunction(this.onCheckboxChecked);
                        _dataRow.setChangeButtonMouseClickCallbackFunction(this._cellChangeButtonMouseClickCallbackFunction);
                        _dataRow.setDetailButtonMouseClickCallbackFunction(this._cellDetailButtonMouseClickCallbackFunction);
                        _dataRow.setChangeOkButtonMouseClickCallbackFunction(this._cellChangeOkButtonMouseClickCallbackFunction);
                    };
                    _dataRow.addEventListener(MouseEvent.MOUSE_OVER, this.onCellMouseOver);
                    _dataRow.addEventListener(MouseEvent.MOUSE_OUT, this.onCellMouseOut);
                    _dataRow.addEventListener(MouseEvent.CLICK, this.onCellSelected);
                    _dataRow.x = 0;
                    _dataRow.y = (this.marginTop + (this._configuration.rowHeight * this._dataRowArray.length));
                    this._dataRowArray.push(_dataRow);
                    addChildAt(_dataRow, 0);
                    this.redrawDataRow();
                    i++;
                };
            };
            var delayedRedrawTimer:Timer = new Timer(delayedTime, 1);
            delayedRedrawTimer.addEventListener(TimerEvent.TIMER, this.delayedRedrawDataRow);
            delayedRedrawTimer.start();
            this.redrawScrollBar();
        }
        private function delayedRedrawDataRow(event:TimerEvent):void{
            this.redrawDataRow();
        }
        private function redrawDataRow(){
            var index:*;
            var realIndex:int;
            var isAddFavouriteButtonIndexLessThanOnePage:Boolean;
            var isAddFavouriteButtonIndexMoreThanOnePage:Boolean;
            var inputDataDictionary:Dictionary;
            var row:OrderStatusDataRow;
            for (index in this._dataRowArray) {
                if (this.isClass(this._dataRowClass, "MarketWatchDataRow")){
                    isAddFavouriteButtonIndexLessThanOnePage = (((((this.rowOffset == 0)) && ((this.getRowCount() < this._configuration.pageSize)))) && ((index == this.getRowCount())));
                    isAddFavouriteButtonIndexMoreThanOnePage = ((((index + this.rowOffset) == this.getRowCount())) && ((this.rowOffset == ((this.getRowCount() + 1) - this._configuration.pageSize))));
                    if (((this.isShowAddFavouriteButton()) && (((isAddFavouriteButtonIndexLessThanOnePage) || (isAddFavouriteButtonIndexMoreThanOnePage))))){
                        if (this._isShowSymbolEdit){
                            this._dataRowArray[index].hideSymbolEdit();
                        };
                        this._dataRowArray[index].setRowData(null, this._columnNameArray);
                        this._dataRowArray[index].showAddButton();
                    } else {
                        if (index < this.getRowCount()){
                            inputDataDictionary = this.getRowDataDictionary(this.getDataDictionaryIndex(index));
                            this._dataRowArray[index].setRowData(inputDataDictionary, this._columnNameArray);
                        } else {
                            this._dataRowArray[index].setRowData(null, this._columnNameArray);
                            this._dataRowArray[index].hideSymbolEdit();
                        };
                        this._dataRowArray[index].hideAddButton();
                    };
                } else {
                    if (this.getDataDictionaryIndex(index) < this.getRowCount()){
                        inputDataDictionary = this.getRowDataDictionary(this.getDataDictionaryIndex(index));
                        this._dataRowArray[index].setRowData(inputDataDictionary, this._columnNameArray);
                    } else {
                        this._dataRowArray[index].setRowData(null, this._columnNameArray);
                    };
                };
                if (((!((this.selectedIndex == -1))) && (((index + this.rowOffset) == this.selectedIndex)))){
                    this._dataRowArray[index].setBackgroundColor(this._configuration.selectedCellBackgroundColor);
                } else {
                    this._dataRowArray[index].clearHighlight();
                };
                realIndex = (index + this.rowOffset);
                if (((this.rowIsVisible(realIndex)) && (this.isClass(this._dataRowClass, "OrderStatusDataRow")))){
                    row = this._dataRowArray[index];
                    if (((!((this._dataDictionary["check_box"] == null))) && ((realIndex < this._dataDictionary["check_box"].length)))){
                        row.setCheckbox(this._dataDictionary["check_box"][realIndex]);
                    } else {
                        row.setCheckbox(false);
                    };
                };
            };
            if (this._isShowSymbolEdit){
                this.showAllSymbolEdit();
            };
        }
        private function redrawScrollBar():void{
            this._scrollBar.visible = (this.getRowCount() >= this._configuration.pageSize);
            if (this.isShowAddFavouriteButton()){
                this._scrollBar.setScrollProperties(this._configuration.pageSize, 0, ((this.getRowCount() + 1) - this._configuration.pageSize));
            } else {
                this._scrollBar.setScrollProperties(this._configuration.pageSize, 0, (this.getRowCount() - this._configuration.pageSize));
            };
            this._scrollBar.setSize(this._configuration.scrollBarWidth, (this._configuration.rowHeight * this._configuration.pageSize));
            this._scrollBar.scrollPosition = this.rowOffset;
            this._scrollBar.x = this.dataGridWidth;
            this._scrollBar.y = this.marginTop;
        }
        private function getRowIndex(dataRow:DataCell):int{
            return ((((dataRow.getYPosition() - this.marginTop) / this._configuration.rowHeight) + this.rowOffset));
        }
        private function getDataRowIndex(actualRowIndex:int):int{
            return ((actualRowIndex - this.rowOffset));
        }
        private function getDataDictionaryIndex(dataRowIndex:int):int{
            return ((dataRowIndex + this.rowOffset));
        }
        private function getMaximumVisibleColumnTextWidth(column:int):int{
            var tmpWidth:int = int.MIN_VALUE;
            var i:* = 0;
            while (i < this._dataRowArray.length) {
                if (this._dataRowArray[i].getColumnTextWidth(column) > tmpWidth){
                    tmpWidth = this._dataRowArray[i].getColumnTextWidth(column);
                };
                i++;
            };
            return ((tmpWidth + 3));
        }
        public function getRowCount():int{
            if (((((!((this._dataDictionary == null))) && ((this._columnNameArray.length > 0)))) && (!((this._dataDictionary[this._columnNameArray[0]] == null))))){
                if (this._keyColumnName == null){
                    return (this._dataDictionary[this._columnNameArray[0]].length);
                };
                return (this._dataDictionary[this._keyColumnName].length);
            };
            return (0);
        }
        private function getColumnCount():int{
            if (this.dataRowHeader != null){
                return (this._columnNameArray.length);
            };
            return (0);
        }
        private function setConfig(conf:Object){
            var key:String;
            if (conf != null){
                for (key in this.defaults) {
                    if (conf[key] == null){
                        this._configuration[key] = this.defaults[key];
                    } else {
                        this._configuration[key] = conf[key];
                    };
                };
            };
        }
        private function getDataDictionaryAtRowIndex(rowIndex:int):Dictionary{
            var key:Object;
            var resultDictionary:Dictionary = new Dictionary();
            for (key in this._dataDictionary) {
                resultDictionary[key] = this._dataDictionary[key][rowIndex];
            };
            return (resultDictionary);
        }
        private function rowIsVisible(rowIndex:int):Boolean{
            return ((((rowIndex >= this.rowOffset)) && ((rowIndex < (this.rowOffset + this._configuration.pageSize)))));
        }
        private function clone(source){
            var myBA:ByteArray = new ByteArray();
            myBA.writeObject(source);
            myBA.position = 0;
            return (myBA.readObject());
        }
        override public function set height(value:Number):void{
            super.height = value;
        }
        public function get dataDictionary():Dictionary{
            return (this._dataDictionary);
        }
        public function get isEditMode():Boolean{
            return (this._isEditMode);
        }
        public function set isEditMode(value:Boolean):void{
            this._isEditMode = value;
        }
        public function get columnTypeDictionary():Dictionary{
            return (this._columnTypeDictionary);
        }
        public function set columnTypeDictionary(value:Dictionary):void{
            this._columnTypeDictionary = value;
        }
        public function get isShowFavourite():Boolean{
            return (this._isShowFavourite);
        }
        public function set isShowFavourite(value:Boolean):void{
            this._isShowFavourite = value;
            this.enableFavouriteMode(this._isShowFavourite);
        }
        public function set onCellSelectedCallbackFunction(value:Function):void{
            this._onCellSelectedCallbackFunction = value;
        }
        public function set onScrollBarScrollCallbackFunction(value:Function):void{
            this._onScrollBarScrollCallbackFunction = value;
        }
        public function set onDeleteDataRowCallbackFunction(value:Function):void{
            this._onDeleteDataRowCallbackFunction = value;
        }
        public function set onAddDataRowCallbackFunction(value:Function):void{
            this._onAddDataRowCallbackFunction = value;
        }
        public function set onUpdateDataRowCallbackFunction(value:Function):void{
            this._onUpdateDataRowCallbackFunction = value;
        }
        public function set onSwapDataRowCallbackFunction(value:Function):void{
            this._onSwapDataRowCallbackFunction = value;
        }
        public function set onTableHeaderClickCallbackFunction(value:Function):void{
            this._onTableHeaderClickCallbackFunction = value;
        }
        public function set onTableHeaderStartDragging(value:Function):void{
            this._onTableHeaderStartDragging = value;
        }
        public function set onTableAdjustHeaderCallbackFunction(value:Function):void{
            this._onTableAdjustHeaderCallbackFunction = value;
        }
        private function isClass(inputClass, name:String):Boolean{
            return ((getQualifiedClassName(inputClass).indexOf(name) > -1));
        }
        private function getRealSymbol(symbol:String):String{
            if (symbol.indexOf(" (") > 0){
                symbol = symbol.substring(0, symbol.indexOf(" ("));
            };
            return (symbol);
        }

    }
}//package com.settrade.streaming5.page.component.datagrid 
﻿package com.settrade.streaming5.page.component.datagrid {
    import flash.display.*;
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.page.component.dynamiclabel.*;
    import __AS3__.vec.*;
    import flash.text.*;

    public class DataRowHeader extends DynamicDataRow {

        public var sortArray:Array;
        protected var _sortTriangle:Sprite;
        protected var _extraFieldList:Array;

        public function DataRowHeader(){
            this.sortArray = new Array();
            this._sortTriangle = new Sprite();
            this._extraFieldList = new Array();
            super();
        }
        override public function initDataRow(itemsArray:Array, columnWidthArray:Array, rowHeight:int, defaultFont:TextFormat=null):void{
            var newItemsArray:* = new Array();
            var i:* = 0;
            while (i < itemsArray.length) {
                newItemsArray.push(new DynamicData(DynamicData.TYPE_LABEL, itemsArray[i]));
                i++;
            };
            if (defaultFont == null){
                ThemeManager.updateDefaultFontFormat();
                defaultFont = ThemeManager.defaultFont;
            };
            super.initDataRow(newItemsArray, columnWidthArray, rowHeight, defaultFont);
            this.sortArray = new Array();
            this._sortTriangle = new Sprite();
            this._extraFieldList = new Array();
        }
        public function updateHeaderRow(headerName:String, index:int):void{
            setCellDataAtIndex(index, "", new DynamicData(DynamicData.TYPE_LABEL, headerName));
        }
        public function updateHeader(index:int, text:String):void{
            setCellDataAtIndex(index, "", new DynamicData(DynamicData.TYPE_LABEL, text));
        }
        public function updateHeaderWithColor(columnName:String, color:uint):void{
            setCellTextColor(columnName, color);
        }
        public function addLeftMargin(margin:Number):void{
            var label:DynamicLabel;
            var _averageCheckboxMargin:Number = (margin / _columnWidthArray.length);
            var i:* = 0;
            while (i < _columnWidthArray.length) {
                _columnWidthArray[i] = (_columnWidthArray[i] - _averageCheckboxMargin);
                label = _columnArray[i];
                label.width = _columnWidthArray[i];
                if (i == 0){
                    label.x = (margin + 0);
                } else {
                    label.x = (_columnArray[(i - 1)].x + _columnArray[(i - 1)].width);
                };
                i++;
            };
        }
        public function updateTextAlignment(textAlignArray:Array):void{
            var label:DynamicLabel;
            var i:* = 0;
            while (i < textAlignArray.length) {
                label = _columnArray[i];
                label.setTextAlign(textAlignArray[i]);
                i++;
            };
        }
        public function clearSorting():void{
            this.sortArray.length = 0;
            if (this._sortTriangle.parent != null){
                this._sortTriangle.parent.removeChild(this._sortTriangle);
            };
        }
        public function sort(columnIndex:int, isASC:Boolean):void{
            var xOffset:int = (this.getColumnWidth(columnIndex) - 5);
            var yOffset:int = ((this.height / 2) - 3);
            var vertices:Vector.<Number> = new Vector.<Number>();
            if (isASC){
                vertices.push((xOffset + 0), (yOffset + 6));
                vertices.push((xOffset + 3), (yOffset + 0));
                vertices.push((xOffset + 6), (yOffset + 6));
                this.sortArray[columnIndex] = true;
            } else {
                vertices.push((xOffset + 0), (yOffset + 0));
                vertices.push((xOffset + 3), (yOffset + 6));
                vertices.push((xOffset + 6), (yOffset + 0));
                this.sortArray[columnIndex] = false;
            };
            if (this._sortTriangle.parent != null){
                this._sortTriangle.parent.removeChild(this._sortTriangle);
            };
            this._sortTriangle.graphics.clear();
            this._sortTriangle.graphics.beginFill(0xFFFFFF);
            this._sortTriangle.graphics.drawTriangles(vertices);
            this._sortTriangle.graphics.endFill();
            _columnArray[columnIndex].addChild(this._sortTriangle);
        }
        override public function setColumnWidth(index:int, inputWidth:int):void{
            super.setColumnWidth(index, inputWidth);
            this.sort(index, this.sortArray[index]);
        }
        override public function setColumnPosition(index:int, inputX:int, inputWidth:int):void{
            super.setColumnPosition(index, inputX, inputWidth);
        }
        public function isExtraField(index:int):Boolean{
            return ((this._extraFieldList.indexOf(_columnArray[index]) > -1));
        }
        public function drawExtraMenuButtonAtIndex(index:int):void{
            var buttonSize = 8;
            var rightMargin = 13;
            var xOffset:int = ((_columnArray[index].width - buttonSize) - rightMargin);
            var yOffset:int = (_columnArray[index].height - buttonSize);
            var vertices:Vector.<Number> = new Vector.<Number>();
            vertices.push((xOffset + buttonSize), (yOffset + 0));
            vertices.push((xOffset + buttonSize), (yOffset + buttonSize));
            vertices.push((xOffset + 0), (yOffset + buttonSize));
            _columnArray[index].graphics.clear();
            _columnArray[index].graphics.beginFill(1684758);
            _columnArray[index].graphics.drawTriangles(vertices);
            _columnArray[index].graphics.endFill();
            this._extraFieldList.push(_columnArray[index]);
        }

    }
}//package com.settrade.streaming5.page.component.datagrid 
﻿package com.settrade.streaming5.page.component.datagrid {
    import flash.display.*;
    import flash.events.*;
    import com.settrade.streaming5.page.component.dynamiclabel.*;
    import flash.utils.*;
    import flash.text.*;
    import com.settrade.log.logger.*;

    public class DynamicDataRow extends MovieClip implements DataCell {

        private static var logger:Logger = new Logger(prototype.constructor);

        const SWAP_MODE_SHIFT = 1;
        const SWAP_MODE_SWAP = 2;

        protected var _columnArray:Array;
        protected var _dataArray:Array;
        protected var _rowHeight:Number;
        protected var _columnWidthArray:Array;
        private var isSetAlignment:Boolean = false;
        protected var _hilightSquare:Sprite;

        public function DynamicDataRow(){
            this._columnArray = new Array();
            this._dataArray = new Array();
            this._hilightSquare = new Sprite();
            super();
        }
        public function initDataRow(itemsArray:Array, columnWidthArray:Array, rowHeight:int, defaultFont:TextFormat=null):void{
            var label:DynamicLabel;
            this._rowHeight = rowHeight;
            addChild(this._hilightSquare);
            var i:* = 0;
            while (i < itemsArray.length) {
                label = new DynamicLabel(itemsArray[i], defaultFont);
                if (i == 0){
                    label.x = 0;
                } else {
                    label.x = (this._columnArray[(i - 1)].x + this._columnArray[(i - 1)].width);
                };
                label.width = columnWidthArray[i];
                label.height = rowHeight;
                this._columnArray.push(label);
                this._dataArray.push(itemsArray[i].clone());
                addChild(label);
                i++;
            };
            this._columnWidthArray = columnWidthArray.slice();
        }
        public function getRowWidth(i):int{
            return (this._columnWidthArray[i]);
        }
        public function getColumnCount():int{
            return (this._columnArray.length);
        }
        public function getColumnAtIndex(index:int){
            if (index < this._columnArray.length){
                return (this._columnArray[index]);
            };
            return (null);
        }
        public function getColumnArray():Array{
            return (this._columnArray);
        }
        public function getDataArray():Array{
            return (this._dataArray);
        }
        public function getColumnWidth(index:int):int{
            if (index < this._columnArray.length){
                return (this._columnArray[index].width);
            };
            return (-1);
        }
        public function getColumnTextWidth(index:int):int{
            if (index < this._columnArray.length){
                return ((this._columnArray[index].textField.textWidth + 10));
            };
            return (-1);
        }
        public function getColumnX(index:int):int{
            if (index < this._columnArray.length){
                return (this._columnArray[index].getBounds(stage).x);
            };
            return (-1);
        }
        public function getColumnIndexByX(x:Number):int{
            var i:* = 0;
            while (i < this._columnArray.length) {
                if ((((this._columnArray[i].getBounds(stage).x < x)) && (((this._columnArray[i].getBounds(stage).x + this._columnArray[i].width) >= x)))){
                    return (i);
                };
                i++;
            };
            return (-1);
        }
        public function getYPosition():int{
            return (this.y);
        }
        public function setCellDataAtIndex(index:int, columnName:String, value:DynamicData, blink:Boolean=false, refDictionary:Dictionary=null):void{
            if (this._columnArray.length > index){
                if (this._dataArray[index] == null){
                    logger.fatal((("set cell data at index " + index) + " is bug ja"));
                };
                this._columnArray[index].updateData(blink, value.displayValue, this._dataArray[index].getBlinkColor(value), this._dataArray[index].isChangeColor());
                this._dataArray[index].updateDataWithDynamicData(value);
                if (value.backgroundColor != -1){
                    this.setBackgroundColorAtIndex(index, value.backgroundColor);
                };
            };
        }
        public function setCellTextColor(columnName:String, color:uint):void{
            if (this.getColumnIndexByColumnName(columnName) != -1){
                this._columnArray[this.getColumnIndexByColumnName(columnName)].updateColor(false, color, true);
            };
        }
        public function setRowData(dataDictionary:Dictionary, columnNameArray:Array, blink:Boolean=false):void{
            var value:DynamicData;
            var index:int;
            while (index < columnNameArray.length) {
                value = new DynamicData(DynamicData.TYPE_LABEL, "");
                if (dataDictionary != null){
                    value = dataDictionary[columnNameArray[index]];
                };
                this.setCellDataAtIndex(index, columnNameArray[index], value, blink, dataDictionary);
                if (!this.isSetAlignment){
                    this.updateAlignment(index, columnNameArray[index]);
                };
                index++;
            };
            this.isSetAlignment = true;
        }
        public function updateAlignment(columnIndex:int, columnName:String):void{
        }
        public function setColumnAtIndex(index:int, obj):void{
            if (index < this._columnArray.length){
                this._columnArray[index] = obj;
            };
        }
        public function setCellTextStyle(textFormat:TextFormat):void{
            var i:* = 0;
            while (i < this._columnArray.length) {
                this._columnArray[i].setStyle("textFormat", textFormat);
                i++;
            };
        }
        public function setColumnPosition(index:int, inputX:int, inputWidth:int):void{
            if (index < this._columnArray.length){
                this._columnArray[index].x = inputX;
                this._columnArray[index].width = inputWidth;
            };
        }
        public function setColumnWidth(index:int, inputWidth:int):void{
            if (index < this._columnArray.length){
                this._columnArray[index].width = inputWidth;
            };
        }
        public function setColumnX(index:int, inputX:int):void{
            if (index < this._columnArray.length){
                this._columnArray[index].x = inputX;
            };
        }
        public function setBackgroundColor(color:uint):void{
            this._hilightSquare.graphics.clear();
            this._hilightSquare.graphics.beginFill(color);
            this._hilightSquare.graphics.drawRect(0, 2, this.width, this._rowHeight);
            this._hilightSquare.alpha = 0.5;
            this._hilightSquare.graphics.endFill();
        }
        public function setBackgroundColorAtIndex(index:int, color:uint):void{
            this._columnArray[index].graphics.clear();
            this._columnArray[index].graphics.beginFill(color, 0.5);
            this._columnArray[index].graphics.drawRect(0, 2, this._columnArray[index].width, this._rowHeight);
            this._columnArray[index].graphics.endFill();
        }
        public function clearBackgroundColorAtIndex(index:int):void{
            this._columnArray[index].graphics.clear();
        }
        public function showHighlight():void{
            this._hilightSquare.graphics.clear();
            this._hilightSquare.graphics.beginFill(0x7F7F7F);
            this._hilightSquare.graphics.drawRect(0, 2, this.width, this._rowHeight);
            this._hilightSquare.alpha = 0.5;
            this._hilightSquare.graphics.endFill();
        }
        public function clearHighlight():void{
            this._hilightSquare.graphics.clear();
        }
        public function blink(times:int):void{
            var blinkTimer:Timer = new Timer(150, times);
            blinkTimer.addEventListener(TimerEvent.TIMER, this.onBlink);
            blinkTimer.start();
        }
        public function restoreBackgroundColor():void{
            var label:*;
            for each (label in this._columnArray) {
                if ((label is DynamicLabel)){
                    label.graphics.clear();
                };
            };
            this.clearHighlight();
        }
        public function shiftColumn(origin:int, destination:int):void{
            var originColumnIndex:int = this.findColumnIndexByPosition(origin);
            var destinationColumnIndex:int = this.findColumnIndexByPosition(destination);
            this.swapColumn(originColumnIndex, destinationColumnIndex);
        }
        public function swapColumn(originColumnIndex:int, destinationColumnIndex:int, swapMode:int=2):void{
            var i:*;
            var tmpData:*;
            var tmp:*;
            var tmp2:*;
            if (swapMode == this.SWAP_MODE_SWAP){
                tmpData = this._columnArray[originColumnIndex];
                this._columnArray[originColumnIndex] = this._columnArray[destinationColumnIndex];
                this._columnArray[destinationColumnIndex] = tmpData;
            } else {
                if (swapMode == this.SWAP_MODE_SHIFT){
                    if (originColumnIndex < destinationColumnIndex){
                        tmp = this._columnArray[originColumnIndex];
                        tmp2 = this._dataArray[originColumnIndex];
                        i = originColumnIndex;
                        while (i < destinationColumnIndex) {
                            this._columnArray[i] = this._columnArray[(i + 1)];
                            this._dataArray[i] = this._dataArray[(i + 1)];
                            i++;
                        };
                        this._columnArray[destinationColumnIndex] = tmp;
                        this._dataArray[destinationColumnIndex] = tmp2;
                    } else {
                        if (originColumnIndex > destinationColumnIndex){
                            tmp = this._columnArray[originColumnIndex];
                            tmp2 = this._dataArray[originColumnIndex];
                            i = originColumnIndex;
                            while (i > destinationColumnIndex) {
                                this._columnArray[i] = this._columnArray[(i - 1)];
                                this._dataArray[i] = this._dataArray[(i - 1)];
                                i--;
                            };
                            this._columnArray[destinationColumnIndex] = tmp;
                            this._dataArray[destinationColumnIndex] = tmp2;
                        };
                    };
                };
            };
            i = 0;
            while (i < this._columnArray.length) {
                if (i == 0){
                    this._columnArray[i].x = 0;
                } else {
                    this._columnArray[i].x = (this._columnArray[(i - 1)].x + this._columnArray[(i - 1)].width);
                };
                i++;
            };
        }
        private function findColumnIndexByPosition(inputX:int):int{
            var i:* = 0;
            while (i < this._columnArray.length) {
                if ((((inputX >= this._columnArray[i].getBounds(stage).x)) && ((inputX < (this._columnArray[i].getBounds(stage).x + this._columnArray[i].width))))){
                    return (i);
                };
                i++;
            };
            return (-1);
        }
        private function onBlink(event:TimerEvent):void{
            this.showHighlight();
            var blinkTimer:Timer = new Timer(100, 1);
            blinkTimer.addEventListener(TimerEvent.TIMER_COMPLETE, this.stopBlink);
            blinkTimer.start();
        }
        private function stopBlink(event:TimerEvent):void{
            this.clearHighlight();
        }
        protected function getColumnIndexByColumnName(columnName:String):int{
            var dataGrid:StreamingDataGrid;
            var index:int;
            if ((this.parent is StreamingDataGrid)){
                dataGrid = (this.parent as StreamingDataGrid);
                index = dataGrid.getColumnIndexByColumnName(columnName);
            };
            return (index);
        }

    }
}//package com.settrade.streaming5.page.component.datagrid 
﻿package com.settrade.streaming5.page.component.datagrid {

    public interface DataCell {

        function setColumnWidth(_arg1:int, _arg2:int):void;
        function setColumnX(_arg1:int, _arg2:int):void;
        function setColumnPosition(_arg1:int, _arg2:int, _arg3:int):void;
        function setBackgroundColor(_arg1:uint):void;
        function getColumnWidth(_arg1:int):int;
        function getColumnX(_arg1:int):int;
        function getColumnIndexByX(_arg1:Number):int;
        function getYPosition():int;
        function getDataArray():Array;

    }
}//package com.settrade.streaming5.page.component.datagrid 
﻿package com.settrade.streaming5.page.component.datagrid {
    import fl.controls.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import com.settrade.streaming5.page.component.dynamiclabel.*;
    import flash.utils.*;
    import flash.text.*;
    import com.settrade.log.logger.*;
    import flash.ui.*;

    public class OrderStatusDataRow extends DynamicDataRow {

        protected static var logger:Logger = new Logger(prototype.constructor);

        const CHECK_BOX_WIDTH:int = 25;
        const DEFAULT_LABEL_COLOR:uint = 0xCCCCCC;

        protected var _cancelOrderCheckBox:CheckBox;
        protected var _changeButton;
        protected var _detailButton;
        protected var _canChange:Boolean = false;
        protected var _changePriceTextField:TextInput;
        protected var _changeVolumeTextField:TextInput;
        protected var _changeOkButton;
        protected var _changeCancelButton;
        protected var _changeOkButtonMouseClickCallBack:Function = null;
        protected var _cancelOrderCheckBoxCheckedCallBack:Function = null;
        protected var _changeButtonMouseClickCallBack:Function = null;
        protected var _detailButtonMouseClickCallBack:Function = null;
        protected var sortStringColumnArray:Array;
        protected var sortNumberColumnArray:Array;
        protected var noSortColumnArray:Array;
        protected var _rowWidth:Number;

        public function OrderStatusDataRow(){
            this._cancelOrderCheckBox = new CheckBox();
            this.sortStringColumnArray = ["AccountNo", "OrderNo", "Symbol", "Time", "Date", "Side", "Status", "EnterId"];
            this.sortNumberColumnArray = ["Price", "Volume", "IcebergVol", "Matched", "Balance", "Cancelled"];
            this.noSortColumnArray = ["Detail", "Change"];
            super();
        }
        override public function initDataRow(itemsArray:Array, columnWidthArray:Array, rowHeight:int, defaultFont:TextFormat=null):void{
            var textfield:TextField;
            _rowHeight = rowHeight;
            _columnWidthArray = columnWidthArray.slice();
            addChild(_hilightSquare);
            this._rowWidth = 0;
            var _averageCheckboxMargin:Number = (this.CHECK_BOX_WIDTH / _columnWidthArray.length);
            var i:* = 0;
            while (i < _columnWidthArray.length) {
                this._rowWidth = (this._rowWidth + _columnWidthArray[i]);
                _columnWidthArray[i] = (_columnWidthArray[i] - _averageCheckboxMargin);
                i++;
            };
            i = 0;
            while (i < itemsArray.length) {
                textfield = new TextField();
                if (i == 0){
                    textfield.x = (this.CHECK_BOX_WIDTH + 0);
                } else {
                    textfield.x = (_columnArray[(i - 1)].x + _columnArray[(i - 1)].width);
                };
                textfield.width = _columnWidthArray[i];
                textfield.height = (rowHeight + 2);
                textfield.selectable = false;
                textfield.defaultTextFormat = ThemeManager.defaultFont;
                _columnArray.push(textfield);
                addChild(textfield);
                _dataArray.push(itemsArray[i].clone());
                i++;
            };
            this.initComponent();
        }
        protected function initComponent():void{
            this._cancelOrderCheckBox.x = 0;
            this._cancelOrderCheckBox.label = "";
            this._cancelOrderCheckBox.visible = false;
            this._cancelOrderCheckBox.focusEnabled = false;
            this._cancelOrderCheckBox.tabEnabled = false;
            this._cancelOrderCheckBox.addEventListener(Event.CHANGE, this.onCancelOrderCheckBoxChange);
            addChild(this._cancelOrderCheckBox);
            var changeButtonClass:Class = Class(getDefinitionByName("ChangeButton"));
            this._changeButton = new (changeButtonClass)();
            this._changeButton.y = 2;
            this._changeButton.visible = false;
            this._changeButton.addEventListener(MouseEvent.CLICK, this.onChangeButtonMouseClick);
            this._changeButton.focusEnabled = false;
            addChild(this._changeButton);
            var detailButtonClass:Class = Class(getDefinitionByName("DetailButton"));
            this._detailButton = new (detailButtonClass)();
            this._detailButton.y = 2;
            this._detailButton.visible = false;
            this._detailButton.addEventListener(MouseEvent.CLICK, this.onDetailButtonMouseClick);
            this._detailButton.focusEnabled = false;
            addChild(this._detailButton);
            var changeOkButtonClass:Class = Class(getDefinitionByName("OkButton"));
            this._changeOkButton = new (changeOkButtonClass)();
            this._changeOkButton.visible = false;
            this._changeOkButton.addEventListener(MouseEvent.CLICK, this.onChangeOkButtonMouseClick);
            this._changeOkButton.focusEnabled = false;
            addChild(this._changeOkButton);
            var changeCancelButtonClass:Class = Class(getDefinitionByName("CancelButton"));
            this._changeCancelButton = new (changeCancelButtonClass)();
            this._changeCancelButton.visible = false;
            this._changeCancelButton.addEventListener(MouseEvent.CLICK, this.onChangeCancelButtonMouseClick);
            this._changeCancelButton.focusEnabled = false;
            addChild(this._changeCancelButton);
            this._changePriceTextField = new TextInput();
            this._changePriceTextField.visible = false;
            this._changePriceTextField.setStyle("textFormat", ThemeManager.defaultTextInputFont);
            this._changePriceTextField.restrict = "0-9\\.\\-";
            this._changePriceTextField.addEventListener(KeyboardEvent.KEY_DOWN, this.onChangePriceTextFieldKeyboardKeyDown);
            addChild(this._changePriceTextField);
            this._changeVolumeTextField = new TextInput();
            this._changeVolumeTextField.visible = false;
            this._changeVolumeTextField.setStyle("textFormat", ThemeManager.defaultTextInputFont);
            this._changeVolumeTextField.restrict = "0-9";
            this._changeVolumeTextField.addEventListener(KeyboardEvent.KEY_DOWN, this.onChangeVolumeTextFieldKeyboardKeyDown);
            addChild(this._changeVolumeTextField);
            graphics.clear();
            graphics.beginFill(ThemeManager.LABEL_BLACK_COLOR);
            graphics.drawRect(0, _rowHeight, this._rowWidth, 1);
            graphics.endFill();
        }
        override public function setCellDataAtIndex(index:int, columnName:String, value:DynamicData, blink:Boolean=false, refDictionary:Dictionary=null):void{
            var textfield:TextField;
            var _local7:OrderSide;
            var _local8:DerivativesOrderSide;
            var _local9:Boolean;
            var _local10:Boolean;
            var canCancel:Boolean;
            if (columnName == "Price"){
                if (isNaN(value.numberValue)){
                    value.type = DynamicData.TYPE_LABEL;
                } else {
                    value.type = DynamicData.TYPE_PRICE;
                };
            };
            if ((((columnName == "Change")) || ((columnName == "Detail")))){
                _columnArray[index].text = "";
                _dataArray[index].updateDataWithDynamicData(new DynamicData(DynamicData.TYPE_LABEL, ""));
            } else {
                if (_columnArray.length > index){
                    if (_dataArray[index] == null){
                        logger.fatal((("set cell data at index " + index) + " is bug ja"));
                    };
                    _columnArray[index].text = value.displayValue;
                    _dataArray[index].updateDataWithDynamicData(value);
                };
            };
            switch (columnName){
                case "Symbol":
                    if (((!((refDictionary == null))) && (!((refDictionary["CanCancel"] == null))))){
                        canCancel = (refDictionary["CanCancel"].displayValue == "true");
                        if (!canCancel){
                            this._cancelOrderCheckBox.selected = false;
                            this._cancelOrderCheckBox.visible = false;
                        } else {
                            this._cancelOrderCheckBox.visible = true;
                        };
                    } else {
                        this._cancelOrderCheckBox.visible = false;
                    };
                    textfield = _columnArray[index];
                    this.setTextFieldColor(textfield, this.DEFAULT_LABEL_COLOR);
                    break;
                case "Side":
                    _local7 = OrderSide.lookUpFromOrder(value.displayValue);
                    _local8 = DerivativesOrderSide.lookupFromOrder(value.displayValue);
                    if (((_local7.isBuy()) || (_local8.isLong()))){
                        textfield = _columnArray[index];
                        this.setTextFieldColor(textfield, ThemeManager.ORDER_BUY_COLOR);
                        this.graphics.clear();
                        this.graphics.beginFill(ThemeManager.ORDER_STATUS_BUY_BG_COLOR, 1);
                        this.graphics.drawRect(0, 1, this._rowWidth, (_rowHeight - 1));
                        this.graphics.endFill();
                    } else {
                        if (((_local7.isSell()) || (_local8.isShort()))){
                            textfield = _columnArray[index];
                            this.setTextFieldColor(textfield, ThemeManager.ORDER_SELL_COLOR);
                            this.graphics.clear();
                            this.graphics.beginFill(ThemeManager.ORDER_STATUS_SELL_BG_COLOR, 1);
                            this.graphics.drawRect(0, 1, this._rowWidth, (_rowHeight - 1));
                            this.graphics.endFill();
                        } else {
                            if (_local7.isShort()){
                                textfield = _columnArray[index];
                                this.setTextFieldColor(textfield, ThemeManager.ORDER_SHORT_COLOR);
                                this.graphics.clear();
                                this.graphics.beginFill(ThemeManager.ORDER_STATUS_SHORT_BG_COLOR, 1);
                                this.graphics.drawRect(0, 1, this._rowWidth, (_rowHeight - 1));
                                this.graphics.endFill();
                            } else {
                                if (_local7.isCover()){
                                    textfield = _columnArray[index];
                                    this.setTextFieldColor(textfield, ThemeManager.ORDER_COVER_COLOR);
                                    this.graphics.clear();
                                    this.graphics.beginFill(ThemeManager.ORDER_STATUS_COVER_BG_COLOR, 1);
                                    this.graphics.drawRect(0, 1, this._rowWidth, (_rowHeight - 1));
                                    this.graphics.endFill();
                                } else {
                                    textfield = _columnArray[index];
                                    this.setTextFieldColor(textfield, ThemeManager.LABEL_COLOR);
                                    this.graphics.clear();
                                };
                            };
                        };
                    };
                    break;
                case "Change":
                    _local9 = (value.displayValue == "true");
                    this._canChange = _local9;
                    this._changeButton.visible = _local9;
                    this._changeButton.x = getColumnX(index);
                    break;
                case "Detail":
                    _local10 = (value.displayValue == "true");
                    this._detailButton.visible = _local10;
                    this._detailButton.x = getColumnX(index);
                    break;
                default:
                    textfield = _columnArray[index];
                    this.setTextFieldColor(textfield, this.DEFAULT_LABEL_COLOR);
            };
        }
        override public function updateAlignment(columnIndex:int, columnName:String):void{
            var _local3:TextField;
            switch (columnName){
                case "Price":
                case "Volume":
                case "Matched":
                case "Balance":
                case "Cancelled":
                case "IcebergVol":
                    _local3 = _columnArray[columnIndex];
                    this.setTextFieldAlign(_local3, TextFormatAlign.RIGHT);
                    break;
                case "Time":
                case "Status":
                case "Position":
                case "Side":
                case "Validity":
                    _local3 = _columnArray[columnIndex];
                    this.setTextFieldAlign(_local3, TextFormatAlign.CENTER);
                    break;
            };
        }
        public function setCancelOrderCheckBoxCheckedCallbackFunction(callbackFunction:Function):void{
            this._cancelOrderCheckBoxCheckedCallBack = callbackFunction;
        }
        public function setChangeButtonMouseClickCallbackFunction(callbackFunction:Function):void{
            this._changeButtonMouseClickCallBack = callbackFunction;
        }
        public function setDetailButtonMouseClickCallbackFunction(callbackFunction:Function):void{
            this._detailButtonMouseClickCallBack = callbackFunction;
        }
        public function setChangeOkButtonMouseClickCallbackFunction(callbackFunction:Function):void{
            this._changeOkButtonMouseClickCallBack = callbackFunction;
        }
        public function isSelected():Boolean{
            return (this._cancelOrderCheckBox.selected);
        }
        public function setCheckbox(isChecked:Boolean):void{
            this._cancelOrderCheckBox.selected = isChecked;
        }
        public function showChangePriceAndVolume():void{
            var price:Number;
            var volume:int;
            if (this._canChange){
                price = getDataArray()[getColumnIndexByColumnName("Price")].numberValue;
                volume = getDataArray()[getColumnIndexByColumnName("Volume")].numberValue;
                if (!isNaN(price)){
                    this._changePriceTextField.x = getColumnX(getColumnIndexByColumnName("Price"));
                    this._changePriceTextField.width = getColumnWidth(getColumnIndexByColumnName("Price"));
                    this._changePriceTextField.text = price.toString();
                    this._changePriceTextField.visible = true;
                    this._changePriceTextField.setFocus();
                };
                this._changeVolumeTextField.x = getColumnX(getColumnIndexByColumnName("Volume"));
                this._changeVolumeTextField.width = getColumnWidth(getColumnIndexByColumnName("Volume"));
                this._changeVolumeTextField.text = volume.toString();
                this._changeVolumeTextField.visible = true;
                if (isNaN(price)){
                    this._changeVolumeTextField.setFocus();
                };
                this._changeOkButton.x = getColumnX(getColumnIndexByColumnName("Matched"));
                this._changeOkButton.visible = true;
                this._changeCancelButton.x = ((this._changeOkButton.x + this._changeOkButton.width) + 2);
                this._changeCancelButton.visible = true;
            };
        }
        public function hideChangePriceAndVolume():void{
            this._changePriceTextField.text = "";
            this._changeVolumeTextField.text = "";
            this._changePriceTextField.visible = false;
            this._changeVolumeTextField.visible = false;
            this._changeOkButton.visible = false;
            this._changeCancelButton.visible = false;
        }
        private function onCancelOrderCheckBoxChange(event:Event):void{
            var target:CheckBox;
            if (this._cancelOrderCheckBoxCheckedCallBack != null){
                target = CheckBox(event.target);
                this._cancelOrderCheckBoxCheckedCallBack(target.selected, this);
            };
        }
        private function onDetailButtonMouseClick(e:MouseEvent):void{
            var orderNo:String;
            if (this._detailButtonMouseClickCallBack != null){
                orderNo = getDataArray()[getColumnIndexByColumnName("OrderNo")].displayValue;
                this._detailButtonMouseClickCallBack(orderNo);
            };
        }
        private function onChangeButtonMouseClick(e:MouseEvent):void{
            var orderNo:String;
            logger.info("on change button mouse click is called");
            if (this._changeButtonMouseClickCallBack != null){
                orderNo = getDataArray()[getColumnIndexByColumnName("OrderNo")].displayValue;
                logger.info(("OrderNo is " + orderNo));
                this._changeButtonMouseClickCallBack(orderNo);
            };
        }
        private function onChangeOkButtonMouseClick(e:MouseEvent):void{
            this.submitChangeOrder();
        }
        private function onChangeCancelButtonMouseClick(e:MouseEvent):void{
            this.hideChangePriceAndVolume();
        }
        private function onChangePriceTextFieldKeyboardKeyDown(e:KeyboardEvent):void{
            if (e.keyCode == Keyboard.ENTER){
                this._changeVolumeTextField.setFocus();
            };
        }
        private function onChangeVolumeTextFieldKeyboardKeyDown(e:KeyboardEvent):void{
            if (e.keyCode == Keyboard.ENTER){
                this.submitChangeOrder();
            };
        }
        private function submitChangeOrder():void{
            var orderNo:* = null;
            var price:* = NaN;
            var volume:* = 0;
            if (this._changeOkButtonMouseClickCallBack != null){
                orderNo = getDataArray()[getColumnIndexByColumnName("OrderNo")].displayValue;
                price = NaN;
                volume = 0;
                try {
                    if (this._changePriceTextField.visible){
                        price = parseFloat(this._changePriceTextField.text);
                    };
                    volume = parseInt(this._changeVolumeTextField.text);
                } catch(e:Error) {
                    price = NaN;
                    volume = 0;
                };
                this.hideChangePriceAndVolume();
                this._changeOkButtonMouseClickCallBack(orderNo, price, volume);
            };
        }
        public function getSortFunction(index:int, isASC:Boolean):Function{
            if (this.isIndexAvailableInColumnNameArray(index, this.sortNumberColumnArray)){
                if (isASC){
                    return (this.numberSortASC);
                };
                return (this.numberSortDESC);
            };
            if (this.isIndexAvailableInColumnNameArray(index, this.noSortColumnArray)){
                return (null);
            };
            if (isASC){
                return (this.stringSortASC);
            };
            return (this.stringSortDESC);
        }
        private function isIndexAvailableInColumnNameArray(index:int, array:Array):Boolean{
            var string:String;
            for each (string in array) {
                if (getColumnIndexByColumnName(string) == index){
                    return (true);
                };
            };
            return (false);
        }
        public function stringSortASC(str1:DynamicData, str2:DynamicData):int{
            if (str1.displayValue < str2.displayValue){
                return (-1);
            };
            if (str1.displayValue > str2.displayValue){
                return (1);
            };
            return (0);
        }
        public function stringSortDESC(str1:DynamicData, str2:DynamicData):int{
            if (str1.displayValue > str2.displayValue){
                return (-1);
            };
            if (str1.displayValue < str2.displayValue){
                return (1);
            };
            return (0);
        }
        public function numberSortASC(num1:DynamicData, num2:DynamicData):int{
            if ((((num1.numberValue < num2.numberValue)) || (isNaN(num2.numberValue)))){
                return (-1);
            };
            if ((((num1.numberValue > num2.numberValue)) || (isNaN(num1.numberValue)))){
                return (1);
            };
            return (0);
        }
        public function numberSortDESC(num1:DynamicData, num2:DynamicData):int{
            if ((((num1.numberValue > num2.numberValue)) || (isNaN(num1.numberValue)))){
                return (-1);
            };
            if ((((num1.numberValue < num2.numberValue)) || (isNaN(num2.numberValue)))){
                return (1);
            };
            return (0);
        }
        private function clone(source){
            var myBA:ByteArray = new ByteArray();
            myBA.writeObject(source);
            myBA.position = 0;
            return (myBA.readObject());
        }
        private function setTextFieldAlign(textField:TextField, align:String):void{
            var textFormat:TextFormat = textField.defaultTextFormat;
            textFormat.align = align;
            textField.defaultTextFormat = textFormat;
        }
        private function setTextFieldColor(textField:TextField, color:int):void{
            textField.textColor = color;
        }

    }
}//package com.settrade.streaming5.page.component.datagrid 
﻿package com.settrade.streaming5.page.component.datagrid {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import com.settrade.streaming5.page.component.dynamiclabel.*;
    import flash.utils.*;
    import flash.text.*;
    import com.settrade.log.logger.*;

    public class PortfolioDataRow extends DynamicDataRow {

        private static var logger:Logger = new Logger(prototype.constructor);

        protected var _caFlag;
        protected var _ltdFlag;
        protected var _toolTip;
        protected var _currentLTDToolTipText:String = "";

        public function PortfolioDataRow(){
            super();
        }
        override public function initDataRow(itemsArray:Array, columnWidthArray:Array, rowHeight:int, defaultFont:TextFormat=null):void{
            super.initDataRow(itemsArray, columnWidthArray, rowHeight, defaultFont);
            var iconClass:Class = Class(getDefinitionByName("CaFlag"));
            var ltdFlagIconClass:Class = Class(getDefinitionByName("LtdFlag"));
            var toolTipClass:Class = Class(getDefinitionByName("TooltipCA"));
            this._caFlag = new (iconClass)();
            this._ltdFlag = new (ltdFlagIconClass)();
            this._ltdFlag.text.mouseEnabled = false;
            this._toolTip = new (toolTipClass)();
            this._toolTip.setText(" ");
            addChild(this._caFlag);
            addChild(this._ltdFlag);
            addChild(this._toolTip);
            this._caFlag.visible = false;
            this._ltdFlag.visible = false;
            this._toolTip.visible = false;
            this._caFlag.addEventListener(MouseEvent.MOUSE_OVER, this.onCaFlagMouseOver);
            this._caFlag.addEventListener(MouseEvent.MOUSE_OUT, this.onCaFlagMouseOut);
            this._ltdFlag.addEventListener(MouseEvent.MOUSE_OVER, this.onLtdFlagMouseOver);
            this._ltdFlag.addEventListener(MouseEvent.MOUSE_OUT, this.onLtdFlagMouseOut);
        }
        override public function setCellDataAtIndex(index:int, columnName:String, value:DynamicData, blink:Boolean=false, refDictionary:Dictionary=null):void{
            var label:DynamicLabel;
            super.setCellDataAtIndex(index, columnName, value, blink, refDictionary);
            var caFlag:String = "";
            var ltdFlag:String = "";
            var ltdDetail:String = "";
            this._caFlag.visible = false;
            this._toolTip.visible = false;
            this._ltdFlag.visible = false;
            if (refDictionary != null){
                if (refDictionary["ca_flag"] != null){
                    caFlag = refDictionary["ca_flag"].displayValue;
                };
                if (refDictionary["ltd_flag"] != null){
                    ltdFlag = refDictionary["ltd_flag"].displayValue;
                    logger.debug(("received ltd flag is " + ltdFlag));
                    this._ltdFlag.visible = ((!((ltdFlag == null))) && ((StringUtil.trim(ltdFlag).length > 0)));
                    if (StringUtil.trim(ltdFlag).length > 0){
                        this._ltdFlag.text.text = ltdFlag;
                    };
                };
                if (refDictionary["ltd_detail"] != null){
                    ltdDetail = refDictionary["ltd_detail"].displayValue;
                };
            };
            var dynamicLabel:DynamicLabel = _columnArray[getColumnIndexByColumnName("symbol")];
            if (StringUtil.trim(caFlag).length > 0){
                this._caFlag.x = (dynamicLabel.textField.textWidth + 5);
                this._caFlag.visible = true;
                this._toolTip.x = ((dynamicLabel.textField.textWidth + 5) + this._caFlag.width);
                this._toolTip.setText(caFlag);
            } else {
                if (StringUtil.trim(ltdFlag).length > 0){
                    this._ltdFlag.x = (dynamicLabel.textField.textWidth + 5);
                    this._ltdFlag.visible = true;
                    this._toolTip.x = ((dynamicLabel.textField.textWidth + 5) + this._ltdFlag.width);
                    this._toolTip.setText(ltdFlag);
                    this._currentLTDToolTipText = ltdDetail;
                } else {
                    this._caFlag.visible = false;
                };
            };
            if ((((index == getColumnIndexByColumnName("average_cost"))) || ((index == getColumnIndexByColumnName("average_price"))))){
                label = _columnArray[index];
                label.updateData(false, StreamingNumberFormatter.formatPriceWithPrecision(value.numberValue, 4), ThemeManager.LABEL_COLOR, false);
            };
            if (index == getColumnIndexByColumnName("deriv_cost")){
                label = _columnArray[index];
                label.updateData(false, StreamingNumberFormatter.formatPriceWithPrecision(value.numberValue, StreamingNumberFormatter.derivCostPrecision), ThemeManager.LABEL_COLOR, false);
            };
        }
        private function onCaFlagMouseOver(e:MouseEvent):void{
            this._toolTip.visible = true;
        }
        private function onCaFlagMouseOut(e:MouseEvent):void{
            this._toolTip.visible = false;
        }
        private function onLtdFlagMouseOver(e:MouseEvent):void{
            TooltipService.getInstance().showTooltipWithDirection(this._ltdFlag, this._currentLTDToolTipText, Direction.RIGHT);
        }
        private function onLtdFlagMouseOut(e:MouseEvent):void{
            TooltipService.getInstance().hideTooltip();
        }
        public function getSortFunction(index:int, isASC:Boolean):Function{
            if ((((((((((getColumnIndexByColumnName("symbol") == index)) || ((getColumnIndexByColumnName("side") == index)))) || ((getColumnIndexByColumnName("position") == index)))) || ((getColumnIndexByColumnName("account_no") == index)))) || ((getColumnIndexByColumnName("dealdate") == index)))){
                if (isASC){
                    return (this.stringSortASC);
                };
                return (this.stringSortDESC);
            };
            if (isASC){
                return (this.numberSortASC);
            };
            return (this.numberSortDESC);
        }
        public function stringSortASC(str1:DynamicData, str2:DynamicData):int{
            if (str1.displayValue < str2.displayValue){
                return (-1);
            };
            if (str1.displayValue > str2.displayValue){
                return (1);
            };
            return (0);
        }
        public function stringSortDESC(str1:DynamicData, str2:DynamicData):int{
            if (str1.displayValue > str2.displayValue){
                return (-1);
            };
            if (str1.displayValue < str2.displayValue){
                return (1);
            };
            return (0);
        }
        public function numberSortASC(num1:DynamicData, num2:DynamicData):int{
            if ((((num1.numberValue < num2.numberValue)) || (isNaN(num1.numberValue)))){
                return (-1);
            };
            if ((((num1.numberValue > num2.numberValue)) || (isNaN(num2.numberValue)))){
                return (1);
            };
            return (0);
        }
        public function numberSortDESC(num1:DynamicData, num2:DynamicData):int{
            if ((((num1.numberValue > num2.numberValue)) || (isNaN(num2.numberValue)))){
                return (-1);
            };
            if ((((num1.numberValue < num2.numberValue)) || (isNaN(num1.numberValue)))){
                return (1);
            };
            return (0);
        }

    }
}//package com.settrade.streaming5.page.component.datagrid 
﻿package com.settrade.streaming5.page {
    import com.settrade.streaming5.language.*;

    public interface ILanguageChangeable {

        function changeLanguage(_arg1:ILanguageConfig):void;

    }
}//package com.settrade.streaming5.page 
﻿package com.settrade.streaming5.page {

    public interface IStreamingComponent {

        function startService():void;
        function stopService():void;

    }
}//package com.settrade.streaming5.page 
﻿package com.settrade.streaming5.page {
    import com.settrade.streaming5.language.*;
    import flash.display.*;
    import com.settrade.streaming5.event.*;
    import flash.utils.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.dispatcher.*;
    import com.settrade.streaming5.message.control.*;

    public class StreamingMovieClip extends MovieClip implements IStreamingComponent {

        var dispatcher:MessageDispatcher;
        private var messageEventMap:Dictionary;
        private var _registerService:RegisterService;

        public function StreamingMovieClip(){
            super();
            this.stop();
            this.dispatcher = MessageDispatcher.getInstance();
            this.messageEventMap = new Dictionary();
            this._registerService = RegisterService.getInstance();
            this.addEventListener(MessageControlEvent.CHANGE_LANGUAGE, this.onReceiveChangeLanguage);
        }
        override public function addEventListener(type:String, listener:Function, useCapture:Boolean=false, priority:int=0, useWeakReference:Boolean=false):void{
            if (MessageEvent.isMessageEvent(type)){
                this.dispatcher.addEventListener(type, listener, useCapture, priority, useWeakReference);
                this.messageEventMap[type] = listener;
                return;
            };
            super.addEventListener(type, listener, useCapture, priority, useWeakReference);
        }
        override public function removeEventListener(type:String, listener:Function, useCapture:Boolean=false):void{
            if (MessageEvent.isMessageEvent(type)){
                this.dispatcher.removeEventListener(type, listener, useCapture);
                this.messageEventMap[type] = null;
                return;
            };
            super.removeEventListener(type, listener, useCapture);
        }
        public function removeAllMessageEventListener():void{
            var k:Object;
            var value:Function;
            var key:String;
            for (k in this.messageEventMap) {
                value = this.messageEventMap[k];
                key = String(k);
                if (value != null){
                    this.removeEventListener(key, value);
                };
            };
        }
        public function synchronousStartService():void{
        }
        public function synchronousStopService():void{
        }
        public function startService():void{
        }
        public function stopService():void{
            this.removeAllMessageEventListener();
            this._registerService.unregistComponent(this);
        }
        public function changeLanguage(language:ILanguageConfig):void{
        }
        public function onShowPage(object:Object):void{
        }
        protected function bringToFront(movieclip:MovieClip):void{
            this.setChildIndex(movieclip, (this.numChildren - 1));
        }
        protected function sendToBack(movieclip:MovieClip):void{
            this.setChildIndex(movieclip, 0);
        }
        private function onReceiveChangeLanguage(e:MessageControlEvent):void{
            var message:ChangeLanguageMessage = ChangeLanguageMessage(e.message);
            this.changeLanguage(message.language);
        }

    }
}//package com.settrade.streaming5.page 
﻿package com.settrade.streaming5.page {
    import fl.controls.*;
    import flash.events.*;
    import flash.utils.*;
    import com.settrade.streaming5.register.*;
    import flash.text.*;

    public class RegisterViewer extends StreamingMovieClip {

        protected var iWidth:Number;
        protected var iHeight:Number;
        var registerableBox:ComboBox;
        var sourceList:List;
        var registList:List;
        var currentRegister:IRegister;
        var currentItem:Object;
        var timer:Timer;

        public function RegisterViewer(){
            super();
            this.iWidth = 400;
            this.iHeight = 300;
            this.currentRegister = null;
            this.timer = new Timer(1000);
            this.timer.addEventListener(TimerEvent.TIMER, this.onTimer);
            this.initComponent();
        }
        override public function startService():void{
            this.timer.start();
        }
        override public function stopService():void{
            this.timer.stop();
        }
        private function onTimer(e:TimerEvent):void{
            this.refresh();
        }
        private function initComponent():void{
            this.initCombobox();
            this.initSourceList();
            this.initRegistList();
            this.arrangeComponent();
        }
        private function initCombobox():void{
            this.registerableBox = new ComboBox();
            addChild(this.registerableBox);
            this.registerableBox.addEventListener(Event.CHANGE, this.onSelectCombobox);
            this.registerableBox.addItem({
                label:"---Select---",
                value:null
            });
            this.insertRegister(InfoRegister.getInstance());
            this.insertRegister(InstrumentTickerRegister.getInstance());
            this.insertRegister(IntradayChartRegister.getInstance());
            this.insertRegister(MarketSummaryRegister.getInstance());
            this.insertRegister(MarketTickerRegister.getInstance());
            this.insertRegister(OrderRegister.getInstance());
            this.insertRegister(SnapshotRegister.getInstance());
            this.insertRegister(VolumeByPriceDetailRegister.getInstance());
            this.insertRegister(InstrumentListRegister.getInstance());
        }
        private function onSelectCombobox(e:Event):void{
            this.currentRegister = IRegister(this.registerableBox.selectedItem.value);
            this.currentItem = null;
            this.refresh();
        }
        private function refresh():void{
            var status:RegisterStatus;
            this.clear();
            if (this.currentRegister != null){
                status = this.currentRegister.getStatus();
                this.updateSelectList(status);
                this.updateRegistList();
            };
        }
        private function updateRegistList():void{
            var object:Object;
            if (this.sourceList.selectedItem != null){
                for each (object in this.sourceList.selectedItem.value) {
                    this.registList.addItem({label:object});
                };
            };
        }
        private function updateSelectList(status:RegisterStatus):void{
            var key:Object;
            var i:*;
            this.sourceList.addItem({
                label:"ALL",
                key:"ALL",
                value:status.registerList
            });
            for (key in status.registerMap) {
                this.sourceList.addItem({
                    label:this.getClassName(key),
                    key:key,
                    value:status.registerMap[key]
                });
            };
            i = 0;
            while (i < this.sourceList.length) {
                if (this.currentItem == this.sourceList.getItemAt(i).key){
                    this.sourceList.selectedIndex = i;
                };
                i++;
            };
        }
        private function clear():void{
            this.sourceList.removeAll();
            this.registList.removeAll();
        }
        private function insertRegister(register:IRegister):void{
            this.registerableBox.addItem({
                label:this.getClassName(register),
                value:register
            });
        }
        private function getClassName(object:Object):String{
            var className:String = getQualifiedClassName(object);
            if (className.indexOf("::") != -1){
                className = className.substring((className.indexOf("::") + 2));
            };
            return (className);
        }
        private function initRegistList():void{
            this.registList = new List();
            addChild(this.registList);
        }
        private function initSourceList():void{
            this.sourceList = new List();
            this.sourceList.addEventListener(Event.CHANGE, this.onSelectSourceList);
            addChild(this.sourceList);
        }
        private function onSelectSourceList(e:Event):void{
            this.registList.removeAll();
            this.currentItem = this.sourceList.selectedItem.key;
            this.updateRegistList();
        }
        private function arrangeComponent():void{
            this.registerableBox.x = 0;
            this.registerableBox.y = 0;
            this.registerableBox.width = this.iWidth;
            this.sourceList.x = 0;
            this.sourceList.y = this.registerableBox.height;
            this.sourceList.width = (this.iWidth / 2);
            this.sourceList.height = (this.iHeight - this.registerableBox.height);
            this.registList.x = (this.iWidth / 2);
            this.registList.y = this.registerableBox.height;
            this.registList.width = (this.iWidth / 2);
            this.registList.height = (this.iHeight - this.registerableBox.height);
        }
        public function setFontStyle(format:TextFormat):void{
            this.sourceList.setRendererStyle("textFormat", format);
            this.registList.setRendererStyle("textFormat", format);
            this.registerableBox.setStyle("textFormat", format);
            this.registerableBox.dropdown.setRendererStyle("textFormat", format);
        }
        public function resize(width:Number, height:Number):void{
            this.iWidth = width;
            this.iHeight = height;
            this.arrangeComponent();
            dispatchEvent(new Event(Event.RESIZE));
        }
        override public function set width(value:Number):void{
            this.resize(value, this.iHeight);
        }
        override public function set height(value:Number):void{
            this.resize(this.iWidth, value);
        }

    }
}//package com.settrade.streaming5.page 
﻿package com.settrade.streaming5.page {
    import flash.display.*;

    public class PreloadPage extends MovieClip {

        public var preloadui:MovieClip;
        public var bgContainer:MovieClip;

        public function PreloadPage(){
            super();
            var square:Sprite = new Sprite();
            this.bgContainer.addChild(square);
            square.graphics.beginFill(0);
            square.graphics.drawRect(0, 0, stage.stageWidth, stage.stageHeight);
            square.graphics.endFill();
            this.preloadui.x = 0;
            this.preloadui.y = ((stage.stageHeight / 2) - (this.preloadui.height / 2));
        }
    }
}//package com.settrade.streaming5.page 
﻿package com.settrade.streaming5.page {
    import fl.controls.*;
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import com.settrade.streaming5.message.feed.*;
    import com.settrade.streaming5.manager.*;
    import flash.utils.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.lab.initializer.*;
    import com.settrade.streaming5.datacomponent.parser.*;
    import com.settrade.streaming5.connection.common.*;
    import com.settrade.streaming5.message.feed.info.*;
    import com.settrade.streaming5.dispatcher.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.raw.feed.*;

    public class CustomizeController extends StreamingMovieClip {

        protected var button:Button;
        protected var button2:Button;
        protected var button3:Button;
        protected var generateTickerButton:Button;
        protected var area:TextArea;
        protected var labBtn:Button;
        protected var getColorButton:Button;
        protected var setColorButton:Button;
        protected var sequenceId = 0;
        var logger:Logger;
        var tickerSequenceId:int = 100000;
        var tickerCount:int = 10000;
        var instrumentId:String = "S50H15";
        var tickerTimer:Timer;

        public function CustomizeController(){
            this.logger = new Logger(".Memory");
            super();
            this.initComponent();
            this.addEventListener(Event.RESIZE, this.resizeHandler);
            this.arrangeComponent();
        }
        private function initComponent():void{
            this.button = new Button();
            this.button.label = "Click";
            this.button.addEventListener(MouseEvent.CLICK, this.onClick);
            this.addChild(this.button);
            this.button2 = new Button();
            this.button2.label = "Click2";
            this.button2.addEventListener(MouseEvent.CLICK, this.onClick2);
            this.addChild(this.button2);
            this.button3 = new Button();
            this.button3.label = "Stat";
            this.button3.addEventListener(MouseEvent.CLICK, this.onClick3);
            this.addChild(this.button3);
            this.generateTickerButton = new Button();
            this.generateTickerButton.label = "Start Feed";
            this.generateTickerButton.addEventListener(MouseEvent.CLICK, this.onGenerateTickerButtonClick);
            this.addChild(this.generateTickerButton);
            this.getColorButton = new Button();
            this.getColorButton.label = "Get Color";
            this.getColorButton.addEventListener(MouseEvent.CLICK, this.onGetColorButtonClick);
            this.addChild(this.getColorButton);
            this.setColorButton = new Button();
            this.setColorButton.label = "Set Color";
            this.setColorButton.addEventListener(MouseEvent.CLICK, this.onSetColorButtonClick);
            this.addChild(this.setColorButton);
            this.area = new TextArea();
            this.area.width = 200;
            this.addChild(this.area);
            this.labBtn = new Button();
            this.labBtn.label = "LAB";
            this.labBtn.addEventListener(MouseEvent.CLICK, this.onEnterLab);
            this.addChild(this.labBtn);
        }
        private function onSetColorButtonClick(e:MouseEvent):void{
            var color:Array = this.area.text.split(",");
            if (color.length == 3){
                ThemeManager.GAINER_COLOR = parseInt(color[0]);
                ThemeManager.UNCHANGED_COLOR = parseInt(color[1]);
                ThemeManager.UNCHANGED_VOLUME_COLOR = parseInt(color[1]);
                ThemeManager.defaultVolumeFont.color = ThemeManager.UNCHANGED_VOLUME_COLOR;
                ThemeManager.LOSER_COLOR = parseInt(color[2]);
            };
        }
        private function onGetColorButtonClick(e:MouseEvent):void{
            var binString:String = this.area.text;
            var binaryParser:DispatcherBinaryMessageParser = new DispatcherBinaryMessageParser();
            var byteArray:StreamingByteArray = new StreamingByteArray();
            byteArray.writeUTFBytes(binString);
            byteArray.position = 0;
            var binMessage:BinaryFeedMessage = new BinaryFeedMessage(null, Source.HTTP_RESPONSE, MessageFormat.DISPATCHER_BINARY, byteArray);
            var parsedMessage:InfoFeedMessage = InfoFeedMessage(binaryParser.parseMessage(binMessage));
            MessageDispatcher.getInstance().notifyReceiveMessage(parsedMessage);
        }
        private function onClick3(e:MouseEvent):void{
            var log:Logger = new Logger(".UrlLoaderStat");
            log.info(UrlLoaderStatManager.getInstance().toString());
        }
        override public function startService():void{
            this.area.text = StreamingAttribute.buildTime;
        }
        private function onEnterLab(e:MouseEvent):void{
            LabInitializer.getInstance().root = DisplayObjectContainer(this.root);
            LabInitializer.getInstance().initialize();
        }
        private function arrangeComponent():void{
            this.button.x = 0;
            this.button.y = 0;
            this.button2.x = this.button.width;
            this.button2.y = 0;
            this.button3.x = (this.button2.x + this.button2.width);
            this.button3.y = 0;
            this.generateTickerButton.x = (this.button3.x + this.button3.width);
            this.generateTickerButton.y = 0;
            this.area.x = 0;
            this.area.y = this.button.height;
            this.labBtn.x = 0;
            this.labBtn.y = (this.area.y + this.area.height);
            this.getColorButton.x = (this.labBtn.x + this.labBtn.width);
            this.getColorButton.y = this.labBtn.y;
            this.setColorButton.x = (this.getColorButton.x + this.getColorButton.width);
            this.setColorButton.y = this.getColorButton.y;
        }
        private function onGenerateTickerButtonClick(e:MouseEvent):void{
            this.logger.info("Start Feed");
            var tickerPerSec = 20;
            var timerTick:Number = (1000 / tickerPerSec);
            this.tickerTimer = new Timer(timerTick);
            this.tickerTimer.addEventListener(TimerEvent.TIMER, this.onTickerTimerTick);
            this.tickerTimer.start();
        }
        private function onTickerTimerTick(e:TimerEvent):void{
            this.logger.info("Timer Tick");
            var tickerMessage:InstrumentTickerFeedMessage = new InstrumentTickerFeedMessage(null);
            tickerMessage.instrumentId = this.instrumentId;
            tickerMessage.orderSide = OrderSide.BUY;
            tickerMessage.sequenceId = ++this.tickerSequenceId;
            tickerMessage.price = 300;
            tickerMessage.volume = 100;
            MessageDispatcher.getInstance().notifyReceiveMessage(tickerMessage);
        }
        private function onClick2(e:MouseEvent):void{
            PageManager.getInstance().showPage(this.area.text);
        }
        private function onClick(e:MouseEvent):void{
            var message1:OrderStatusDerivativesAllFeedMessage = new OrderStatusDerivativesAllFeedMessage(Source.NO_SOURCE);
            message1.accountNumber = "artd2";
            message1.balanceVolume = 10000000;
            message1.canCancel = true;
            message1.cancelVolume = 0;
            message1.canChange = true;
            message1.instrumentId = "S50M15";
            message1.isMatch = false;
            message1.matchVolume = 10000100;
            message1.orderNumber = (new Date().getTime() % 100000000).toString();
            message1.position = DerivativesPosition.OPEN;
            message1.orderSide = DerivativesOrderSide.LONG;
            message1.priceType = DerivativesPriceType.MP_MTL;
            message1.status = "Pending(OF)";
            message1.volume = 10000200;
            dispatcher.notifyReceiveMessage(message1);
            var message2:OrderStatusDerivativesAllFeedMessage = new OrderStatusDerivativesAllFeedMessage(Source.NO_SOURCE);
            message2.accountNumber = "artd2";
            message2.balanceVolume = 10000000;
            message2.canCancel = true;
            message2.cancelVolume = 0;
            message2.canChange = true;
            message2.instrumentId = "S50M15";
            message2.isMatch = true;
            message2.matchVolume = 10000100;
            message2.orderNumber = (new Date().getTime() % 100000000).toString();
            message2.position = DerivativesPosition.OPEN;
            message2.orderSide = DerivativesOrderSide.LONG;
            message2.priceType = DerivativesPriceType.MP_MTL;
            message2.status = "Matched";
            message2.volume = 10000200;
            dispatcher.notifyReceiveMessage(message2);
        }
        private function resizeHandler(e:Event):void{
        }
        override public function set width(value:Number):void{
        }
        override public function set height(value:Number):void{
        }

    }
}//package com.settrade.streaming5.page 
﻿package com.settrade.streaming5.register {
    import com.settrade.streaming5.message.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class MessageRegister implements IRegister {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:MessageRegister;

        protected var registerFactory:RegisterFactory;

        public function MessageRegister(){
            super();
            this.registerFactory = RegisterFactory.getInstance();
        }
        public static function getInstance():MessageRegister{
            if (instance == null){
                instance = new (MessageRegister)();
            };
            return (instance);
        }

        public function regist(registList:IRegisterable, source:Object):void{
            var message:Message;
            var register:IRegister;
            if ((registList is Message)){
                message = Message(registList);
                register = this.registerFactory.getRegister(message);
                register.regist(registList, source);
            } else {
                logger.error("Invalid Object Type");
                throw (new Error("Invalid Object Type"));
            };
        }
        public function unregist(unregistList:IUnregisterable, source:Object):void{
            var message:Message;
            var register:IRegister;
            if ((unregistList is Message)){
                message = Message(unregistList);
                register = this.registerFactory.getRegister(message);
                register.unregist(unregistList, source);
            } else {
                logger.error("Invalid Object Type");
                throw (new Error("Invalid Object Type"));
            };
        }
        public function unregistSource(source:Object):void{
            var register:IRegister;
            var registerList:Vector.<IRegister> = this.registerFactory.getAllRegister();
            for each (register in registerList) {
                register.unregistSource(source);
            };
        }
        public function unregistAll():void{
            var register:IRegister;
            var registerList:Vector.<IRegister> = this.registerFactory.getAllRegister();
            for each (register in registerList) {
                register.unregistAll();
            };
        }
        public function flush():RequestMessage{
            var register:IRegister;
            var requestMessage:RequestMessage;
            var message:MultipleRequestMessage = new MultipleRequestMessage();
            var registerList:Vector.<IRegister> = this.registerFactory.getAllRegister();
            for each (register in registerList) {
                requestMessage = register.flush();
                if (requestMessage != null){
                    message.add(requestMessage);
                };
            };
            return (message);
        }
        public function flushOnConnectPush():RequestMessage{
            var register:IRegister;
            var requestMessage:RequestMessage;
            var message:MultipleRequestMessage = new MultipleRequestMessage();
            var registerList:Vector.<IRegister> = this.registerFactory.getPushRegister();
            for each (register in registerList) {
                requestMessage = register.flush();
                if (requestMessage != null){
                    message.add(requestMessage);
                };
            };
            return (message);
        }
        public function flushOnInterval():RequestMessage{
            var register:IRegister;
            var requestMessage:RequestMessage;
            var message:MultipleRequestMessage = new MultipleRequestMessage();
            var registerList:Vector.<IRegister> = this.registerFactory.getPullIntervalRegister();
            for each (register in registerList) {
                requestMessage = register.flush();
                if (requestMessage != null){
                    message.add(requestMessage);
                };
            };
            return (message);
        }
        public function getRegistList(source:Object):Array{
            var register:IRegister;
            var registList:Array = new Array();
            var registerList:Vector.<IRegister> = this.registerFactory.getAllRegister();
            for each (register in registerList) {
                registList.push(register.getRegistList(source));
            };
            return (registList);
        }
        public function isRegister(verifyObject:IRegisterVerifiable, source:Object){
            var message:Message;
            var register:IRegister;
            if ((verifyObject is Message)){
                message = Message(verifyObject);
                register = this.registerFactory.getRegister(message);
                register.isRegister(verifyObject, source);
            } else {
                logger.error("Invalid Object Type");
                throw (new Error("Invalid Object Type"));
            };
        }
        public function getStatus():RegisterStatus{
            throw (new Error("UnSupport Function"));
        }

    }
}//package com.settrade.streaming5.register 
﻿package com.settrade.streaming5.register {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.manager.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class InstrumentTickerOddLotRegister extends SimpleRegister {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:InstrumentTickerOddLotRegister;

        protected var instrumentTickerManager:InstrumentTickerOddLotManager;

        public function InstrumentTickerOddLotRegister(){
            super();
            this.instrumentTickerManager = InstrumentTickerOddLotManager.getInstance();
        }
        public static function getInstance():InstrumentTickerOddLotRegister{
            if (instance == null){
                instance = new (InstrumentTickerOddLotRegister)();
            };
            return (instance);
        }

        override public function regist(registerable:IRegisterable, source:Object):void{
            var instrumentId:String;
            for each (instrumentId in registerable.registList) {
                this.instrumentTickerManager.clearSequenceId(instrumentId);
            };
            super.regist(registerable, source);
        }
        override protected function getRegistMessage():RequestMessage{
            var registVector:Vector.<String>;
            var unregistVector:Vector.<String>;
            var sequenceVector:Vector.<int>;
            var currentInstrumentId:String;
            var message:InstrumentTickerOddLotRequestMessage;
            if ((((this.newRegistList.length > 0)) || ((this.registList.length > 0)))){
                registVector = new Vector.<String>();
                unregistVector = new Vector.<String>();
                sequenceVector = new Vector.<int>();
                currentInstrumentId = "";
                for each (currentInstrumentId in registList) {
                    unregistVector.push(currentInstrumentId);
                };
                for each (currentInstrumentId in newRegistList) {
                    registVector.push(currentInstrumentId);
                    sequenceVector.push(this.instrumentTickerManager.getSequenceId(currentInstrumentId));
                };
                message = new InstrumentTickerOddLotRequestMessage(registVector, unregistVector, sequenceVector);
                return (message);
            };
            return (null);
        }

    }
}//package com.settrade.streaming5.register 
﻿package com.settrade.streaming5.register {
    import com.settrade.streaming5.manager.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.marketticker.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class MarketTickerRegister extends SimpleRegister {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:MarketTickerRegister;

        protected var marketTickerManager:MarketTickerManager;
        protected var isSum:Boolean;
        protected var newIsSum:Boolean;

        public function MarketTickerRegister(){
            super();
            this.marketTickerManager = MarketTickerManager.getInstance();
            this.isSum = false;
            this.newIsSum = false;
        }
        public static function getInstance():MarketTickerRegister{
            if (instance == null){
                instance = new (MarketTickerRegister)();
            };
            return (instance);
        }

        override protected function getUniqueArray():Array{
            var value:Object;
            var registList:Array;
            var obj:MarketTickerRegisterToken;
            var isUnique:Boolean;
            var obj2:MarketTickerRegisterToken;
            var uniqueArray:Array = new Array();
            for each (value in sourceRegisterableMap) {
                registList = (value as Array);
                for each (obj in registList) {
                    isUnique = true;
                    for each (obj2 in uniqueArray) {
                        if (obj.equals(obj2)){
                            isUnique = false;
                            break;
                        };
                    };
                    if (isUnique){
                        uniqueArray.push(obj);
                    };
                };
            };
            return (uniqueArray);
        }
        override protected function getRegistMessage():RequestMessage{
            var systemList:Vector.<MarketTickerRegisterToken>;
            var oldSystemList:Vector.<MarketTickerRegisterToken>;
            var sequenceList:Vector.<int>;
            var token:MarketTickerRegisterToken;
            if ((((this.newRegistList.length > 0)) || ((this.registList.length > 0)))){
                logger.debug("Get Regist Message");
                systemList = new Vector.<MarketTickerRegisterToken>();
                oldSystemList = new Vector.<MarketTickerRegisterToken>();
                sequenceList = new Vector.<int>();
                token = null;
                for each (token in this.registList) {
                    oldSystemList.push(token);
                };
                for each (token in this.newRegistList) {
                    systemList.push(token);
                    sequenceList.push(this.marketTickerManager.getSequenceId(token.system, token.isSum));
                };
                return (new MarketTickerRequestMessage(systemList, sequenceList, oldSystemList));
            };
            return (null);
        }
        override public function flush():RequestMessage{
            var message:RequestMessage = super.flush();
            return (message);
        }

    }
}//package com.settrade.streaming5.register 
﻿package com.settrade.streaming5.register {
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class VolumeByPriceDetailRegister extends SimpleRegister {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:VolumeByPriceDetailRegister;

        public static function getInstance():VolumeByPriceDetailRegister{
            if (instance == null){
                instance = new (VolumeByPriceDetailRegister)();
            };
            return (instance);
        }

        override protected function getRegistMessage():RequestMessage{
            var message:MultipleRequestMessage;
            var instrumentId:String;
            var volumeByPriceDetailRequestMessage:VolumeByPriceDetailRequestMessage;
            if (this.newRegistList.length > 0){
                message = new MultipleRequestMessage();
                for each (instrumentId in newRegistList) {
                    volumeByPriceDetailRequestMessage = new VolumeByPriceDetailRequestMessage(instrumentId);
                    message.add(volumeByPriceDetailRequestMessage);
                };
                return (message);
            };
            return (null);
        }

    }
}//package com.settrade.streaming5.register 
﻿package com.settrade.streaming5.register {
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.request.intradaychart.*;
    import com.settrade.log.logger.*;

    public class IntradayChartRegister extends SimpleRegister {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:IntradayChartRegister;

        public static function getInstance():IntradayChartRegister{
            if (instance == null){
                instance = new (IntradayChartRegister)();
            };
            return (instance);
        }

        override protected function getUniqueArray():Array{
            var value:Object;
            var registList:Array;
            var obj:IntradayChartRegisterToken;
            var isUnique:Boolean;
            var obj2:IntradayChartRegisterToken;
            var uniqueArray:Array = new Array();
            for each (value in sourceRegisterableMap) {
                registList = (value as Array);
                for each (obj in registList) {
                    isUnique = true;
                    for each (obj2 in uniqueArray) {
                        if (obj.equals(obj2)){
                            isUnique = false;
                            break;
                        };
                    };
                    if (isUnique){
                        uniqueArray.push(obj);
                    };
                };
            };
            return (uniqueArray);
        }
        override protected function getRegistMessage():RequestMessage{
            var message:MultipleRequestMessage;
            var token:IntradayChartRegisterToken;
            var intradayChartMessage:IntradayChartRequestMessage;
            if (this.newRegistList.length > 0){
                message = new MultipleRequestMessage();
                for each (token in newRegistList) {
                    intradayChartMessage = new IntradayChartRequestMessage(token.instrumentId, token.chartType);
                    message.add(intradayChartMessage);
                };
                return (message);
            };
            return (null);
        }

    }
}//package com.settrade.streaming5.register 
﻿package com.settrade.streaming5.register {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import flash.utils.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.request.info.*;
    import com.settrade.log.logger.*;

    public class InfoRegister extends SimpleRegister {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:InfoRegister;

        public function InfoRegister(){
            super();
        }
        public static function getInstance():InfoRegister{
            if (instance == null){
                instance = new (InfoRegister)();
            };
            return (instance);
        }

        override public function unregist(unregisterable:IUnregisterable, source:Object):void{
            var obj:InfoRegisterToken;
            var i:*;
            var unregistList:Array = unregisterable.unregistList;
            var sourceRegistList:Array = (sourceRegisterableMap[source] as Array);
            if (sourceRegistList == null){
                return;
            };
            for each (obj in unregistList) {
                i = 0;
                while (i < sourceRegistList.length) {
                    if (InfoRegisterToken(sourceRegistList[i]).equals(obj)){
                        sourceRegistList.splice(i, 1);
                        break;
                    };
                    i++;
                };
            };
        }
        override protected function getUniqueArray():Array{
            var value:Object;
            var uniqueArray:Array;
            var uniqueId:String;
            var registList:Array;
            var obj:InfoRegisterToken;
            var currentMode:InstrumentInfoType;
            var uniqueMode:InstrumentInfoType;
            var uniqueSet:Dictionary = new Dictionary();
            for each (value in sourceRegisterableMap) {
                registList = (value as Array);
                for each (obj in registList) {
                    currentMode = uniqueSet[obj.instrumentId];
                    if ((((currentMode == null)) || ((currentMode.compareTo(obj.mode) < 0)))){
                        uniqueSet[obj.instrumentId] = obj.mode;
                    };
                };
            };
            uniqueArray = new Array();
            for (uniqueId in uniqueSet) {
                uniqueMode = uniqueSet[uniqueId];
                uniqueArray.push(new InfoRegisterToken(uniqueId, uniqueMode));
            };
            return (uniqueArray);
        }
        override protected function getRegistMessage():RequestMessage{
            var registVector:Vector.<InfoRegisterToken>;
            var unregistVector:Vector.<InfoRegisterToken>;
            var curToken:InfoRegisterToken;
            var message:InfoRequestMessage;
            if ((((this.newRegistList.length > 0)) || ((this.registList.length > 0)))){
                registVector = new Vector.<InfoRegisterToken>();
                unregistVector = new Vector.<InfoRegisterToken>();
                curToken = null;
                for each (curToken in registList) {
                    unregistVector.push(curToken);
                };
                for each (curToken in newRegistList) {
                    registVector.push(curToken);
                };
                message = new InfoRequestMessage(registVector, unregistVector);
                return (message);
            };
            return (null);
        }

    }
}//package com.settrade.streaming5.register 
﻿package com.settrade.streaming5.register {
    import flash.utils.*;

    public class RegisterStatus {

        public var registerList:Array;
        public var registerMap:Dictionary;

        public function RegisterStatus(){
            super();
            this.registerList = new Array();
            this.registerMap = new Dictionary();
        }
        public function toString():String{
            var str2:String;
            var str:String = "[";
            for each (str2 in this.registerList) {
                str = (str + (str2 + ","));
            };
            str = (str + "]");
            return (str);
        }

    }
}//package com.settrade.streaming5.register 
﻿package com.settrade.streaming5.register {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.manager.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class InstrumentTickerRegister extends SimpleRegister {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:InstrumentTickerRegister;

        protected var instrumentTickerManager:InstrumentTickerManager;

        public function InstrumentTickerRegister(){
            super();
            this.instrumentTickerManager = InstrumentTickerManager.getInstance();
        }
        public static function getInstance():InstrumentTickerRegister{
            if (instance == null){
                instance = new (InstrumentTickerRegister)();
            };
            return (instance);
        }

        override public function regist(registerable:IRegisterable, source:Object):void{
            var instrumentId:String;
            for each (instrumentId in registerable.registList) {
                this.instrumentTickerManager.clearSequenceId(instrumentId);
            };
            super.regist(registerable, source);
        }
        override protected function getRegistMessage():RequestMessage{
            var registVector:Vector.<String>;
            var unregistVector:Vector.<String>;
            var sequenceVector:Vector.<int>;
            var currentInstrumentId:String;
            var message:InstrumentTickerRequestMessage;
            if ((((this.newRegistList.length > 0)) || ((this.registList.length > 0)))){
                registVector = new Vector.<String>();
                unregistVector = new Vector.<String>();
                sequenceVector = new Vector.<int>();
                currentInstrumentId = "";
                for each (currentInstrumentId in registList) {
                    unregistVector.push(currentInstrumentId);
                };
                for each (currentInstrumentId in newRegistList) {
                    registVector.push(currentInstrumentId);
                    sequenceVector.push(this.instrumentTickerManager.getSequenceId(currentInstrumentId));
                };
                message = new InstrumentTickerRequestMessage(registVector, unregistVector, sequenceVector);
                return (message);
            };
            return (null);
        }

    }
}//package com.settrade.streaming5.register 
﻿package com.settrade.streaming5.register {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.response.orderstatus.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class OrderClickRegister extends SimpleRegister {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:OrderClickRegister;

        public static function getInstance():OrderClickRegister{
            if (instance == null){
                instance = new (OrderClickRegister)();
            };
            return (instance);
        }

        override public function regist(registerable:IRegisterable, source:Object):void{
            super.regist(registerable, source);
            this.flush();
        }
        override public function unregist(unregisterable:IUnregisterable, source:Object):void{
            super.unregist(unregisterable, source);
            this.flush();
        }
        override public function unregistSource(source:Object):void{
            super.unregistSource(source);
            this.flush();
        }
        override public function unregistAll():void{
            super.unregistAll();
            this.flush();
        }
        override protected function getRegistMessage():RequestMessage{
            return (null);
        }
        override protected function getUniqueArray():Array{
            var value:Object;
            var registList:Array;
            var obj:OrderStatusClickRegisterToken;
            var isUnique:Boolean;
            var obj2:OrderStatusClickRegisterToken;
            var uniqueArray:Array = new Array();
            for each (value in sourceRegisterableMap) {
                registList = (value as Array);
                for each (obj in registList) {
                    isUnique = true;
                    for each (obj2 in uniqueArray) {
                        if (obj.equals(obj2)){
                            isUnique = false;
                            break;
                        };
                    };
                    if (isUnique){
                        uniqueArray.push(obj);
                    };
                };
            };
            return (uniqueArray);
        }
        public function hasRegisterToken():Boolean{
            return ((registList.length > 0));
        }
        public function isRegist(obj:OrderStatusClickRegisterToken):Boolean{
            var obj2:OrderStatusClickRegisterToken;
            for each (obj2 in registList) {
                if (obj.equals(obj2)){
                    return (true);
                };
            };
            return (false);
        }
        public function isRegistAccount(account:Account):Boolean{
            var obj2:OrderStatusClickRegisterToken;
            for each (obj2 in registList) {
                if (obj2.account == account){
                    return (true);
                };
            };
            return (false);
        }
        public function getRegistListByAccount(account:Account):Array{
            var obj2:OrderStatusClickRegisterToken;
            var instrumentList:Array = new Array();
            for each (obj2 in registList) {
                if (obj2.account == account){
                    instrumentList.push(obj2.instrumentId);
                };
            };
            return (instrumentList);
        }

    }
}//package com.settrade.streaming5.register 
﻿package com.settrade.streaming5.register {
    import com.settrade.streaming5.message.*;
    import com.settrade.streaming5.message.request.*;

    public interface IRegister {

        function getRegistList(_arg1:Object):Array;
        function isRegister(_arg1:IRegisterVerifiable, _arg2:Object);
        function regist(_arg1:IRegisterable, _arg2:Object):void;
        function unregist(_arg1:IUnregisterable, _arg2:Object):void;
        function unregistSource(_arg1:Object):void;
        function unregistAll():void;
        function flush():RequestMessage;
        function getStatus():RegisterStatus;

    }
}//package com.settrade.streaming5.register 
﻿package com.settrade.streaming5.register {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import flash.utils.*;
    import __AS3__.vec.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.error.*;

    public class RegisterFactory {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:RegisterFactory;

        protected var infoRegister:InfoRegister;
        protected var instrumentTickerRegister:InstrumentTickerRegister;
        protected var marketSummaryRegister:MarketSummaryRegister;
        protected var marketTickerRegister:MarketTickerRegister;
        protected var snapshotRegister:SnapshotRegister;
        protected var intradayChartRegister:IntradayChartRegister;
        protected var instrumentListRegister:InstrumentListRegister;
        protected var volumeByPriceDetailRegister:VolumeByPriceDetailRegister;
        protected var orderRegister:OrderRegister;
        protected var all:Vector.<IRegister>;
        protected var pushRegister:Vector.<IRegister>;
        protected var pullIntervalRegister:Vector.<IRegister>;
        protected var registerMap:Dictionary;

        public function RegisterFactory(){
            super();
            this.infoRegister = InfoRegister.getInstance();
            this.instrumentTickerRegister = InstrumentTickerRegister.getInstance();
            this.instrumentListRegister = InstrumentListRegister.getInstance();
            this.marketSummaryRegister = MarketSummaryRegister.getInstance();
            this.marketTickerRegister = MarketTickerRegister.getInstance();
            this.snapshotRegister = SnapshotRegister.getInstance();
            this.orderRegister = OrderRegister.getInstance();
            this.intradayChartRegister = IntradayChartRegister.getInstance();
            this.volumeByPriceDetailRegister = VolumeByPriceDetailRegister.getInstance();
            this.all = new Vector.<IRegister>();
            this.all.push(this.infoRegister, this.instrumentTickerRegister, this.marketSummaryRegister, this.marketTickerRegister, this.snapshotRegister);
            this.pushRegister = new Vector.<IRegister>();
            this.pushRegister.push(this.infoRegister, this.instrumentTickerRegister, this.marketSummaryRegister, this.marketTickerRegister, this.snapshotRegister, this.orderRegister);
            this.pullIntervalRegister = new Vector.<IRegister>();
            this.pullIntervalRegister.push(this.intradayChartRegister, this.volumeByPriceDetailRegister, this.instrumentListRegister);
        }
        public static function getInstance():RegisterFactory{
            if (instance == null){
                instance = new (RegisterFactory)();
            };
            return (instance);
        }

        private function initRegisterMap(){
            this.registerMap = new Dictionary();
            this.registerMap[MessageType.INFO_REQUEST] = this.infoRegister;
            this.registerMap[MessageType.INSTRUMENT_TICKER_REQUEST] = this.instrumentTickerRegister;
            this.registerMap[MessageType.MARKET_SUMMARY_REQUEST] = this.marketSummaryRegister;
            this.registerMap[MessageType.MARKET_TICKER_REQUEST] = this.marketTickerRegister;
            this.registerMap[MessageType.SNAPSHOT_REQUEST] = this.snapshotRegister;
            this.registerMap[MessageType.INFO_FEED] = this.infoRegister;
            this.registerMap[MessageType.INSTRUMENT_TICKER_FEED] = this.instrumentTickerRegister;
            this.registerMap[MessageType.MARKET_SUMMARY_FEED] = this.marketSummaryRegister;
            this.registerMap[MessageType.MARKET_TICKER_FEED] = this.marketTickerRegister;
            this.registerMap[MessageType.SNAPSHOT_FEED] = this.snapshotRegister;
        }
        public function getRegister(message:Message):IRegister{
            var register:IRegister = IRegister(this.registerMap[message.type]);
            if (register == null){
                throw (new InvalidMessageTypeError(message));
            };
            return (register);
        }
        public function getAllRegister():Vector.<IRegister>{
            var register:IRegister;
            var list:Vector.<IRegister> = new Vector.<IRegister>();
            for each (register in this.all) {
                list.push(register);
            };
            return (list);
        }
        public function getPushRegister():Vector.<IRegister>{
            var register:IRegister;
            var list:Vector.<IRegister> = new Vector.<IRegister>();
            for each (register in this.pushRegister) {
                list.push(register);
            };
            return (list);
        }
        public function getPullIntervalRegister():Vector.<IRegister>{
            var register:IRegister;
            var list:Vector.<IRegister> = new Vector.<IRegister>();
            for each (register in this.pullIntervalRegister) {
                list.push(register);
            };
            return (list);
        }

    }
}//package com.settrade.streaming5.register 
﻿package com.settrade.streaming5.register {
    import com.settrade.streaming5.message.*;
    import flash.utils.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class SimpleRegister implements IRegister {

        private static var logger:Logger = new Logger(prototype.constructor);

        protected var sourceRegisterableMap:Dictionary;
        protected var registList:Array;
        protected var newRegistList:Array;

        public function SimpleRegister(){
            super();
            this.sourceRegisterableMap = new Dictionary();
            this.registList = new Array();
            this.newRegistList = new Array();
        }
        public function getRegistList(source:Object):Array{
            var sourceRegistList:Array = (this.sourceRegisterableMap[source] as Array);
            return ((((sourceRegistList == null)) ? new Array(0) : sourceRegistList));
        }
        public function isRegister(verifyObject:IRegisterVerifiable, source:Object){
            var obj:Object = verifyObject.verifyObject;
            return (!((this.getRegistList(source).indexOf(obj) == -1)));
        }
        public function regist(registerable:IRegisterable, source:Object):void{
            var obj:Object;
            var registList:Array = registerable.registList;
            var sourceRegistList:Array = (this.sourceRegisterableMap[source] as Array);
            if (sourceRegistList == null){
                sourceRegistList = new Array();
                this.sourceRegisterableMap[source] = sourceRegistList;
            };
            for each (obj in registList) {
                sourceRegistList.push(obj);
            };
        }
        public function unregist(unregisterable:IUnregisterable, source:Object):void{
            var obj:Object;
            var index:int;
            var unregistList:Array = unregisterable.unregistList;
            var sourceRegistList:Array = (this.sourceRegisterableMap[source] as Array);
            if (sourceRegistList == null){
                return;
            };
            for each (obj in unregistList) {
                index = sourceRegistList.indexOf(obj);
                sourceRegistList.splice(index, 1);
            };
        }
        public function unregistSource(source:Object):void{
            this.sourceRegisterableMap[source] = null;
        }
        public function unregistAll():void{
            this.sourceRegisterableMap = new Dictionary();
        }
        protected function refresh():void{
            var uniqueList:Array = this.getUniqueArray();
            this.newRegistList = uniqueList;
        }
        protected function getUniqueArray():Array{
            var value:Object;
            var uniqueArray:Array;
            var uniqueObj:Object;
            var registList:Array;
            var obj:Object;
            var uniqueSet:Dictionary = new Dictionary();
            for each (value in this.sourceRegisterableMap) {
                registList = (value as Array);
                for each (obj in registList) {
                    if (uniqueSet[obj] == null){
                        uniqueSet[obj] = obj;
                    };
                };
            };
            uniqueArray = new Array();
            for each (uniqueObj in uniqueSet) {
                uniqueArray.push(uniqueObj);
            };
            return (uniqueArray);
        }
        public function flush():RequestMessage{
            this.refresh();
            var registMessage:RequestMessage = this.getRegistMessage();
            this.registList = this.newRegistList;
            return (registMessage);
        }
        protected function getRegistMessage():RequestMessage{
            throw (new Error("Must Override This Method"));
        }
        public function getStatus():RegisterStatus{
            var source:Object;
            var tmpRegistList:Array;
            var obj2:*;
            var arr:Array;
            var tmp:Array;
            var obj:Object;
            var status:RegisterStatus = new RegisterStatus();
            var registMap:Dictionary = new Dictionary();
            for (source in this.sourceRegisterableMap) {
                arr = (this.sourceRegisterableMap[source] as Array);
                tmp = new Array();
                for each (obj in arr) {
                    tmp.push(obj.toString());
                };
                if (tmp.length > 0){
                    registMap[source] = tmp;
                };
            };
            tmpRegistList = new Array();
            for each (obj2 in this.registList) {
                tmpRegistList.push(obj2);
            };
            status.registerList = tmpRegistList;
            status.registerMap = registMap;
            return (status);
        }
        public function getAllRegistList():Array{
            return (this.registList);
        }

    }
}//package com.settrade.streaming5.register 
﻿package com.settrade.streaming5.register {
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class SnapshotRegister extends SimpleRegister {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:SnapshotRegister;

        public function SnapshotRegister(){
            super();
        }
        public static function getInstance():SnapshotRegister{
            if (instance == null){
                instance = new (SnapshotRegister)();
            };
            return (instance);
        }

        override protected function getRegistMessage():RequestMessage{
            var registVector:Vector.<String>;
            var unregistVector:Vector.<String>;
            var curSymbol:String;
            var message:SnapshotRequestMessage;
            if ((((this.newRegistList.length > 0)) || ((this.registList.length > 0)))){
                registVector = new Vector.<String>();
                unregistVector = new Vector.<String>();
                curSymbol = "";
                for each (curSymbol in registList) {
                    unregistVector.push(curSymbol);
                };
                for each (curSymbol in newRegistList) {
                    registVector.push(curSymbol);
                };
                message = new SnapshotRequestMessage(registVector, unregistVector);
                return (message);
            };
            return (null);
        }

    }
}//package com.settrade.streaming5.register 
﻿package com.settrade.streaming5.register {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import flash.utils.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.streaming5.message.request.info.*;
    import com.settrade.log.logger.*;

    public class InfoOddLotRegister extends SimpleRegister {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:InfoOddLotRegister;

        public function InfoOddLotRegister(){
            super();
        }
        public static function getInstance():InfoOddLotRegister{
            if (instance == null){
                instance = new (InfoOddLotRegister)();
            };
            return (instance);
        }

        override public function unregist(unregisterable:IUnregisterable, source:Object):void{
            var obj:InfoRegisterToken;
            var i:*;
            var unregistList:Array = unregisterable.unregistList;
            var sourceRegistList:Array = (sourceRegisterableMap[source] as Array);
            if (sourceRegistList == null){
                return;
            };
            for each (obj in unregistList) {
                i = 0;
                while (i < sourceRegistList.length) {
                    if (InfoRegisterToken(sourceRegistList[i]).equals(obj)){
                        sourceRegistList.splice(i, 1);
                        break;
                    };
                    i++;
                };
            };
        }
        override protected function getUniqueArray():Array{
            var value:Object;
            var uniqueArray:Array;
            var uniqueId:String;
            var registList:Array;
            var obj:InfoRegisterToken;
            var currentMode:InstrumentInfoType;
            var uniqueMode:InstrumentInfoType;
            var uniqueSet:Dictionary = new Dictionary();
            for each (value in sourceRegisterableMap) {
                registList = (value as Array);
                for each (obj in registList) {
                    currentMode = uniqueSet[obj.instrumentId];
                    if ((((currentMode == null)) || ((currentMode.compareTo(obj.mode) < 0)))){
                        uniqueSet[obj.instrumentId] = obj.mode;
                    };
                };
            };
            uniqueArray = new Array();
            for (uniqueId in uniqueSet) {
                uniqueMode = uniqueSet[uniqueId];
                uniqueArray.push(new InfoRegisterToken(uniqueId, uniqueMode));
            };
            return (uniqueArray);
        }
        override protected function getRegistMessage():RequestMessage{
            var registVector:Vector.<InfoRegisterToken>;
            var unregistVector:Vector.<InfoRegisterToken>;
            var curToken:InfoRegisterToken;
            var message:InfoOddLotRequestMessage;
            if ((((this.newRegistList.length > 0)) || ((this.registList.length > 0)))){
                registVector = new Vector.<InfoRegisterToken>();
                unregistVector = new Vector.<InfoRegisterToken>();
                curToken = null;
                for each (curToken in registList) {
                    unregistVector.push(curToken);
                };
                for each (curToken in newRegistList) {
                    registVector.push(curToken);
                };
                message = new InfoOddLotRequestMessage(registVector, unregistVector);
                return (message);
            };
            return (null);
        }

    }
}//package com.settrade.streaming5.register 
﻿package com.settrade.streaming5.register {
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class InstrumentListRegister extends SimpleRegister {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:InstrumentListRegister;

        public static function getInstance():InstrumentListRegister{
            if (instance == null){
                instance = new (InstrumentListRegister)();
            };
            return (instance);
        }

        override protected function getUniqueArray():Array{
            var value:Object;
            var registList:Array;
            var obj:InstrumentListRequestMessage;
            var isUnique:Boolean;
            var obj2:InstrumentListRequestMessage;
            var uniqueArray:Array = new Array();
            for each (value in sourceRegisterableMap) {
                registList = (value as Array);
                for each (obj in registList) {
                    isUnique = true;
                    for each (obj2 in uniqueArray) {
                        if (obj.equals(obj2)){
                            isUnique = false;
                            break;
                        };
                    };
                    if (isUnique){
                        uniqueArray.push(obj);
                    };
                };
            };
            return (uniqueArray);
        }
        override protected function getRegistMessage():RequestMessage{
            var message:MultipleRequestMessage;
            var token:InstrumentListRequestMessage;
            if (this.newRegistList.length > 0){
                message = new MultipleRequestMessage();
                for each (token in newRegistList) {
                    message.add(token);
                };
                return (message);
            };
            return (null);
        }

    }
}//package com.settrade.streaming5.register 
﻿package com.settrade.streaming5.register {
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class MarketSummaryRegister extends SimpleRegister {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:MarketSummaryRegister;

        public static function getInstance():MarketSummaryRegister{
            if (instance == null){
                instance = new (MarketSummaryRegister)();
            };
            return (instance);
        }

        override protected function getRegistMessage():RequestMessage{
            if ((((this.newRegistList.length > 0)) || ((this.registList.length > 0)))){
                return (new MarketSummaryRequestMessage());
            };
            return (null);
        }

    }
}//package com.settrade.streaming5.register 
﻿package com.settrade.streaming5.register {
    import com.settrade.streaming5.common.*;
    import __AS3__.vec.*;
    import com.settrade.streaming5.message.request.*;
    import com.settrade.log.logger.*;

    public class OrderRegister extends SimpleRegister {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:OrderRegister;

        public static function getInstance():OrderRegister{
            if (instance == null){
                instance = new (OrderRegister)();
            };
            return (instance);
        }

        override protected function getRegistMessage():RequestMessage{
            var registVector:Vector.<Account>;
            var unregistVector:Vector.<Account>;
            var curAccount:Account;
            var message:OrderStatusPushRequestMessage;
            if ((((this.newRegistList.length > 0)) || ((this.registList.length > 0)))){
                registVector = new Vector.<Account>();
                unregistVector = new Vector.<Account>();
                curAccount = null;
                for each (curAccount in registList) {
                    unregistVector.push(curAccount);
                };
                for each (curAccount in newRegistList) {
                    registVector.push(curAccount);
                };
                message = new OrderStatusPushRequestMessage(registVector, unregistVector, StreamingAttribute.realtimeClientType);
                return (message);
            };
            return (null);
        }

    }
}//package com.settrade.streaming5.register 
﻿package com.settrade.streaming5.utils {
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import flash.events.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.message.response.orderstatus.*;
    import com.settrade.streaming5.message.response.setcalendar.*;
    import com.settrade.streaming5.common.*;
    import flash.geom.*;
    import com.settrade.streaming5.dispatcher.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.control.*;
    import flash.external.*;

    public class JavascriptInterface {

        public static const CONSOLE_LOG = "log";
        public static const CONSOLE_WARN = "warn";
        public static const CONSOLE_ERROR = "error";

        private static var logger:Logger = new Logger(prototype.constructor);

        public function JavascriptInterface(){
            super();
        }
        public static function initChangeInstrumentIdCallback():void{
            logger.info("Initializing change instrument callback");
            ExternalInterface.addCallback("changeInstrumentId", function (instrumentId:String, widgetId:String):void{
                logger.info(((("Html Holder change instrument id to " + instrumentId) + " for widget ") + widgetId));
                var message:HtmlHolderChangeInstrumentIdMessage = new HtmlHolderChangeInstrumentIdMessage(instrumentId, widgetId);
                MessageDispatcher.getInstance().notifyControlMessage(message);
            });
            ExternalInterface.addCallback("handleWheel", function (event:Object){
                var mEvent:MouseEvent;
                var obj:InteractiveObject;
                var stage:Stage = KeyboardShortcutManager.getInstance().stage;
                var mousePoint:Point = new Point(stage.mouseX, stage.mouseY);
                var objects:Array = stage.getObjectsUnderPoint(mousePoint);
                var i:int = (objects.length - 1);
                while (i >= 0) {
                    if ((objects[i] is InteractiveObject)){
                        obj = (objects[i] as InteractiveObject);
                        break;
                    };
                    if ((((objects[i] is Shape)) && ((objects[i] as Shape).parent))){
                        obj = (objects[i] as Shape).parent;
                        break;
                    };
                    i--;
                };
                if (obj){
                    mEvent = new MouseEvent(MouseEvent.MOUSE_WHEEL, true, false, mousePoint.x, mousePoint.y, obj, event.ctrlKey, event.altKey, event.shiftKey, false, Number(event.delta));
                    obj.dispatchEvent(mEvent);
                };
            });
        }
        public static function console(text:String, logLevel:String):void{
            ExternalInterface.call(("console." + logLevel), text);
        }
        public static function alert(text:String):void{
            ExternalInterface.call("alert", text);
        }
        public static function openPopup(url:String):void{
            ExternalInterface.call("window.open", url, "_blank");
        }
        public static function openEquityDetailWindow(orderStatusEquity:OrderStatusEquity):void{
            var accountEquity:AccountEquity;
            var account:Account = AccountManager.getInstance().getAccountByAccountNumberAndSystem(orderStatusEquity.accountNumber, System.EQUITY);
            var tradeDate:String = orderStatusEquity.tradeDate.split("/").reverse().join("-");
            if (((!((account == null))) && (account.system.isEquity()))){
                accountEquity = AccountEquity(account);
                if (accountEquity.orderType.isDgw()){
                    ExternalInterface.call("openEquityDetailWindow", orderStatusEquity.orderNumber, "", orderStatusEquity.accountNumber, tradeDate);
                    return;
                };
            };
            ExternalInterface.call("openEquityDetailWindow", orderStatusEquity.orderNumberSeos, orderStatusEquity.orderNumberFis, orderStatusEquity.accountNumber, tradeDate);
        }
        public static function openEquityDetailWindowMktRep(orderStatusEquity:OrderStatusEquity):void{
            ExternalInterface.call("openEquityDetailWindowMktRep", orderStatusEquity.orderNumber, orderStatusEquity.accountNumber, orderStatusEquity.tradeDate);
        }
        public static function openDerivativesDetailWindow(orderStatusDerivatives:OrderStatusDerivatives):void{
            ExternalInterface.call("openDerivativesDetailWindow", orderStatusDerivatives.orderNumber);
        }
        public static function openDerivativesDetailWindowMktRep(orderStatusDerivatives:OrderStatusDerivatives):void{
            ExternalInterface.call("openDerivativesDetailWindowMktRep", orderStatusDerivatives.orderNumber, orderStatusDerivatives.accountNumber);
        }
        public static function openChangePin(system:System):void{
            ExternalInterface.call("openChangePin", system.feedName);
        }
        public static function openChangePassword():void{
            ExternalInterface.call("openChangePassword");
        }
        public static function openContractSpec(symbol:String):void{
            ExternalInterface.call("openContractSpec", symbol);
        }
        public static function openPopupKitco():void{
            ExternalInterface.call("openPopupKitco");
        }
        public static function openPopupGoldTraders():void{
            ExternalInterface.call("openPopupGoldTraders");
        }
        public static function openPopupGoldPriceConverter():void{
            ExternalInterface.call("openPopupGoldPriceConverter");
        }
        public static function openPopupSilverPriceConverter():void{
            ExternalInterface.call("openPopupSilverPriceConverter");
        }
        public static function openPopupICE():void{
            ExternalInterface.call("openPopupICE");
        }
        public static function openPopupOilPriceConverter():void{
            ExternalInterface.call("openPopupOilPriceConverter");
        }
        public static function openPopupCurrencySpotPrice():void{
            ExternalInterface.call("openPopupCurrencySpotPrice");
        }
        public static function openTurnoverList(level:String="T1"):void{
            ExternalInterface.call("openTurnoverList", level);
        }
        public static function openOrderStatusMeaning():void{
            ExternalInterface.call("openOrderStatusMeaning");
        }
        public static function openCircuitBreaker():void{
            ExternalInterface.call("openCircuitBreaker");
        }
        public static function openMultiOrderHelpPage():void{
            ExternalInterface.call("openMultiOrderHelpPage");
        }
        public static function openMarginRate():void{
            ExternalInterface.call("openMarginRate");
        }
        public static function openManual():void{
            ExternalInterface.call("openManual");
        }
        public static function openSetCalendarDetail(calendar:SetCalendar):void{
            ExternalInterface.call("openSetCalendarDetail", encodeURIComponent(calendar.toJsonString()));
        }
        public static function openResearch(link:String):void{
            ExternalInterface.call("openResearch", link);
        }
        public static function openAnnouncement(notificationId:String):void{
            ExternalInterface.call("openAnnouncement", notificationId);
        }
        public static function openRealtimeNews(newsId:String, filePath:String):void{
            ExternalInterface.call("openNews", newsId, filePath);
        }
        public static function openRealtimeNewsAttachment(newsId:String, newsSource:String):void{
            ExternalInterface.call("openNewsAttachment", newsId, newsSource);
        }
        public static function openMoreRealtimeNews(newsType:NewsType, language:Language):void{
            ExternalInterface.call("openMoreNews", newsType.feedValue, language.feedValue);
        }
        public static function setTitleHost(host:String):void{
            ExternalInterface.call("setTitleHost", host);
        }
        public static function openStreaming5Screen2():void{
            ExternalInterface.call("openStreaming5Screen2");
        }
        public static function openIndexGraph(index:String):void{
            ExternalInterface.call("openIndexGraph", index);
        }
        public static function openMultiOrderUploadWindow(account:Account):void{
            ExternalInterface.call("openMultiOrderUploadWindow", account.accountNumber);
        }
        public static function openSimsWindow(symbol:String):void{
            ExternalInterface.call("openSimsWindow", symbol);
        }
        public static function openMultiOrderDerivUploadWindow():void{
            ExternalInterface.call("openMultiOrderDerivUploadWindow");
        }
        public static function openMultiOrderDerivHelpPage():void{
            ExternalInterface.call("openMultiOrderDerivHelpPage");
        }
        public static function reloadScreen():void{
            ExternalInterface.call("refresh");
        }
        public static function setHtmlComponentPosition(id:String, x:Number, y:Number, width:Number, height:Number):void{
            ExternalInterface.call("setComponentPosition", id, x, y, width, height);
        }
        public static function showHtmlComponent(id:String):void{
            ExternalInterface.call("showComponent", id);
        }
        public static function hideHtmlComponent(id:String):void{
            ExternalInterface.call("hideComponent", id);
        }
        public static function setHtmlComponentInstrumentId(id:String, instrumentId:String):void{
            ExternalInterface.call("setComponentInstrumentId", id, instrumentId);
        }
        public static function addHtmlComponent(id:String, url:String):void{
            ExternalInterface.call("addComponent", id, url);
        }
        public static function sendStatisticEvent(category:String, action:String, label:String):void{
            ExternalInterface.call("sendStatisticEvent", category, action, label);
        }
        public static function openNewWindowByKey(key:String, ... _args):void{
            ExternalInterface.call("openNewWindowByKey", key, _args);
        }

    }
}//package com.settrade.streaming5.utils 
﻿package com.settrade.streaming5.utils {

    public class StringUtil {

        public static function trim(str:String):String{
            var startIndex:int;
            while (isWhitespace(str.charAt(startIndex))) {
                startIndex++;
            };
            var endIndex:int = (str.length - 1);
            while (isWhitespace(str.charAt(endIndex))) {
                endIndex--;
            };
            if (endIndex >= startIndex){
                return (str.slice(startIndex, (endIndex + 1)));
            };
            return ("");
        }
        public static function trimArrayElements(value:String, delimiter:String):String{
            var items:Array;
            var len:int;
            var i:int;
            if (((!((value == ""))) && (!((value == null))))){
                items = value.split(delimiter);
                len = items.length;
                i = 0;
                while (i < len) {
                    items[i] = StringUtil.trim(items[i]);
                    i++;
                };
                if (len > 0){
                    value = items.join(delimiter);
                };
            };
            return (value);
        }
        public static function isWhitespace(character:String):Boolean{
            switch (character){
                case " ":
                case "\t":
                case "\r":
                case "\n":
                case "\f":
                    return (true);
                default:
                    return (false);
            };
        }
        public static function substitute(str:String, ... _args):String{
            var args:Array;
            var len:uint = _args.length;
            if ((((len == 1)) && ((_args[0] is Array)))){
                args = (_args[0] as Array);
                len = args.length;
            } else {
                args = _args;
            };
            var i:int;
            while (i < len) {
                str = str.replace(new RegExp((("\\{" + i) + "\\}"), "g"), args[i]);
                i++;
            };
            return (str);
        }
        public static function generateStringWithArguments(hay:String, ... _args):String{
            var needle:String;
            for each (needle in _args) {
                hay = hay.replace("@args", needle);
            };
            return (hay);
        }

    }
}//package com.settrade.streaming5.utils 
﻿package com.settrade.streaming5.utils {

    public class CalendarUtil {

        public static function getCalendarArrayByMonthAndYear(month:int, year:int):Array{
            var date:Date = new Date(year, month, 1, 0, 0, 0, 0);
            date.month = (date.month - 1);
            return (getCalendarArray(date));
        }
        public static function getCalendarArray(date:Date):Array{
            var i:*;
            var pushDate:Date;
            var currentDate:Date = new Date(date);
            currentDate.date = 1;
            currentDate.hours = 0;
            currentDate.minutes = 0;
            currentDate.milliseconds = 0;
            currentDate.date = (currentDate.date - currentDate.day);
            var dateArray:Array = new Array(7);
            i = 0;
            while (i < 7) {
                dateArray[i] = new Array();
                i++;
            };
            var j:* = 0;
            while (j < 6) {
                i = 0;
                while (i < 7) {
                    pushDate = new Date(currentDate);
                    dateArray[i].push(pushDate);
                    currentDate.date = (currentDate.date + 1);
                    i++;
                };
                j++;
            };
            return (dateArray);
        }
        public static function getQuarter(date:Date):Number{
            return ((Math.floor((date.month / 3)) + 1));
        }
        public static function isEqualDate(date1:Date, date2:Date):Boolean{
            return (((((((((!((date1 == null))) && (!((date2 == null))))) && ((date1.fullYear == date2.fullYear)))) && ((date1.month == date2.month)))) && ((date1.date === date2.date))));
        }

    }
}//package com.settrade.streaming5.utils 
﻿package com.settrade.streaming5.utils {
    import flash.globalization.*;

    public class StreamingNumberFormatter {

        public static const PRICE_PRECISION:int = 2;
        public static const VOLUME_PRECISION:int = 0;
        public static const CHANGE_PRECISION:int = 2;
        public static const PCHANGE_PRECISION:int = 2;

        public static var derivCostPrecision:int = 2;
        protected static var _volumeFormatter:NumberFormatter;
        protected static var _priceFormatter:NumberFormatter;
        protected static var _changeFormatter:NumberFormatter;
        protected static var _pChangeFormatter:NumberFormatter;
        protected static var _generalFormatter:NumberFormatter;

        public function StreamingNumberFormatter(){
            super();
        }
        public static function formatPrice(value:Number):String{
            return (formatPriceWithPrecision(value, PRICE_PRECISION));
        }
        public static function formatVolumeMillionLimit(value:Number):String{
            if (value > 1000000){
                return ((formatVolume(Math.floor((value / 1000000))) + "M"));
            };
            return (formatVolume(value));
        }
        public static function formatPriceWithPrecision(value:Number, precision:int):String{
            if (_priceFormatter == null){
                _priceFormatter = new NumberFormatter("");
                _priceFormatter.leadingZero = true;
                _priceFormatter.trailingZeros = true;
            };
            _priceFormatter.fractionalDigits = precision;
            if (isNaN(value)){
                return ("");
            };
            return (_priceFormatter.formatNumber(value));
        }
        public static function formatVolume(value:Number):String{
            if (_volumeFormatter == null){
                _volumeFormatter = new NumberFormatter("");
                _volumeFormatter.fractionalDigits = VOLUME_PRECISION;
                _volumeFormatter.leadingZero = true;
                _volumeFormatter.trailingZeros = true;
            };
            if (isNaN(value)){
                return ("");
            };
            return (_volumeFormatter.formatNumber(value));
        }
        public static function formatChange(value:Number):String{
            return (formatChangeWithPrecision(value, CHANGE_PRECISION));
        }
        public static function formatChangeWithPrecision(value:Number, precision:int):String{
            if (_changeFormatter == null){
                _changeFormatter = new NumberFormatter("");
                _changeFormatter.leadingZero = true;
                _changeFormatter.trailingZeros = true;
            };
            _changeFormatter.fractionalDigits = precision;
            if (isNaN(value)){
                return ("");
            };
            if (value > 0){
                return (("+" + _changeFormatter.formatNumber(value)));
            };
            if (value < 0){
                return (_changeFormatter.formatNumber(value));
            };
            return (_changeFormatter.formatNumber(value));
        }
        public static function formatPChange(value:Number):String{
            if (_pChangeFormatter == null){
                _pChangeFormatter = new NumberFormatter("");
                _pChangeFormatter.fractionalDigits = PCHANGE_PRECISION;
                _pChangeFormatter.leadingZero = true;
                _pChangeFormatter.trailingZeros = true;
            };
            if (isNaN(value)){
                return ("");
            };
            if (value > 0){
                return ((("+" + _pChangeFormatter.formatNumber(value)) + "%"));
            };
            if (value < 0){
                return ((_pChangeFormatter.formatNumber(value) + "%"));
            };
            return ((_pChangeFormatter.formatNumber(value) + "%"));
        }
        public static function formatIntWithLeadingZero(value:int, digit:int):String{
            var ret:String = ("" + value);
            while (ret.length < digit) {
                ret = ("0" + ret);
            };
            return (ret);
        }
        public static function addComma(inputTxt:String):String{
            var isMinus:Boolean;
            var decimal:String;
            var count:int;
            var result:String;
            var i:int;
            var myPattern:RegExp = /,/g;
            var tmpInput:String = inputTxt.replace(myPattern, "");
            if (!isNaN(Number(tmpInput))){
                isMinus = Boolean((Number(tmpInput) < 0));
                if (isMinus){
                    tmpInput = tmpInput.substring(1, tmpInput.length);
                };
                decimal = "";
                if (tmpInput.indexOf(".") != -1){
                    decimal = tmpInput.substring(tmpInput.indexOf("."), tmpInput.length);
                    tmpInput = tmpInput.substring(0, tmpInput.indexOf("."));
                    if ((((tmpInput == null)) || ((tmpInput.length == 0)))){
                        tmpInput = "0";
                    };
                };
                tmpInput = (parseFloat(tmpInput) + "");
                count = 0;
                result = "";
                i = (tmpInput.length - 1);
                while (i >= 0) {
                    if (count == 3){
                        result = ("," + result);
                        count = 0;
                    };
                    result = (tmpInput.charAt(i) + result);
                    count++;
                    i--;
                };
                if (isMinus){
                    result = ("-" + result);
                };
                result = (result + decimal);
                return (result);
            };
            return (inputTxt);
        }
        public static function removeComma(decimal:String):String{
            var myPattern:RegExp;
            if (decimal != ""){
                myPattern = /,/g;
                return (decimal.replace(myPattern, ""));
            };
            return ("");
        }

        public function formatIntWithPrecision(value:int, precision:int=0):String{
            if (_generalFormatter == null){
                _generalFormatter = new NumberFormatter("");
                _generalFormatter.leadingZero = true;
                _generalFormatter.trailingZeros = true;
            };
            _generalFormatter.fractionalDigits = precision;
            return (_generalFormatter.formatInt(value));
        }
        public function formatNumberWithPrecision(value:Number, precision:int=0):String{
            if (_generalFormatter == null){
                _generalFormatter = new NumberFormatter("");
                _generalFormatter.leadingZero = true;
                _generalFormatter.trailingZeros = true;
            };
            _generalFormatter.fractionalDigits = precision;
            if (isNaN(value)){
                return ("");
            };
            return (_generalFormatter.formatNumber(value));
        }

    }
}//package com.settrade.streaming5.utils 
﻿package com.settrade.streaming5.utils.crypto {
    import flash.utils.*;

    public class MD5 {

        public static var digest:ByteArray;

        public static function hash(s:String):String{
            var ba:ByteArray = new ByteArray();
            ba.writeUTFBytes(s);
            return (hashBinary(ba));
        }
        public static function hashBytes(s:ByteArray):String{
            return (hashBinary(s));
        }
        public static function hashBinary(s:ByteArray):String{
            var aa:int;
            var bb:int;
            var cc:int;
            var dd:int;
            var a = 1732584193;
            var b = -271733879;
            var c = -1732584194;
            var d = 271733878;
            var x:Array = createBlocks(s);
            var len:int = x.length;
            var i:int;
            while (i < len) {
                aa = a;
                bb = b;
                cc = c;
                dd = d;
                a = ff(a, b, c, d, x[int((i + 0))], 7, -680876936);
                d = ff(d, a, b, c, x[int((i + 1))], 12, -389564586);
                c = ff(c, d, a, b, x[int((i + 2))], 17, 606105819);
                b = ff(b, c, d, a, x[int((i + 3))], 22, -1044525330);
                a = ff(a, b, c, d, x[int((i + 4))], 7, -176418897);
                d = ff(d, a, b, c, x[int((i + 5))], 12, 1200080426);
                c = ff(c, d, a, b, x[int((i + 6))], 17, -1473231341);
                b = ff(b, c, d, a, x[int((i + 7))], 22, -45705983);
                a = ff(a, b, c, d, x[int((i + 8))], 7, 1770035416);
                d = ff(d, a, b, c, x[int((i + 9))], 12, -1958414417);
                c = ff(c, d, a, b, x[int((i + 10))], 17, -42063);
                b = ff(b, c, d, a, x[int((i + 11))], 22, -1990404162);
                a = ff(a, b, c, d, x[int((i + 12))], 7, 1804603682);
                d = ff(d, a, b, c, x[int((i + 13))], 12, -40341101);
                c = ff(c, d, a, b, x[int((i + 14))], 17, -1502002290);
                b = ff(b, c, d, a, x[int((i + 15))], 22, 1236535329);
                a = gg(a, b, c, d, x[int((i + 1))], 5, -165796510);
                d = gg(d, a, b, c, x[int((i + 6))], 9, -1069501632);
                c = gg(c, d, a, b, x[int((i + 11))], 14, 643717713);
                b = gg(b, c, d, a, x[int((i + 0))], 20, -373897302);
                a = gg(a, b, c, d, x[int((i + 5))], 5, -701558691);
                d = gg(d, a, b, c, x[int((i + 10))], 9, 38016083);
                c = gg(c, d, a, b, x[int((i + 15))], 14, -660478335);
                b = gg(b, c, d, a, x[int((i + 4))], 20, -405537848);
                a = gg(a, b, c, d, x[int((i + 9))], 5, 568446438);
                d = gg(d, a, b, c, x[int((i + 14))], 9, -1019803690);
                c = gg(c, d, a, b, x[int((i + 3))], 14, -187363961);
                b = gg(b, c, d, a, x[int((i + 8))], 20, 1163531501);
                a = gg(a, b, c, d, x[int((i + 13))], 5, -1444681467);
                d = gg(d, a, b, c, x[int((i + 2))], 9, -51403784);
                c = gg(c, d, a, b, x[int((i + 7))], 14, 1735328473);
                b = gg(b, c, d, a, x[int((i + 12))], 20, -1926607734);
                a = hh(a, b, c, d, x[int((i + 5))], 4, -378558);
                d = hh(d, a, b, c, x[int((i + 8))], 11, -2022574463);
                c = hh(c, d, a, b, x[int((i + 11))], 16, 1839030562);
                b = hh(b, c, d, a, x[int((i + 14))], 23, -35309556);
                a = hh(a, b, c, d, x[int((i + 1))], 4, -1530992060);
                d = hh(d, a, b, c, x[int((i + 4))], 11, 1272893353);
                c = hh(c, d, a, b, x[int((i + 7))], 16, -155497632);
                b = hh(b, c, d, a, x[int((i + 10))], 23, -1094730640);
                a = hh(a, b, c, d, x[int((i + 13))], 4, 681279174);
                d = hh(d, a, b, c, x[int((i + 0))], 11, -358537222);
                c = hh(c, d, a, b, x[int((i + 3))], 16, -722521979);
                b = hh(b, c, d, a, x[int((i + 6))], 23, 76029189);
                a = hh(a, b, c, d, x[int((i + 9))], 4, -640364487);
                d = hh(d, a, b, c, x[int((i + 12))], 11, -421815835);
                c = hh(c, d, a, b, x[int((i + 15))], 16, 530742520);
                b = hh(b, c, d, a, x[int((i + 2))], 23, -995338651);
                a = ii(a, b, c, d, x[int((i + 0))], 6, -198630844);
                d = ii(d, a, b, c, x[int((i + 7))], 10, 1126891415);
                c = ii(c, d, a, b, x[int((i + 14))], 15, -1416354905);
                b = ii(b, c, d, a, x[int((i + 5))], 21, -57434055);
                a = ii(a, b, c, d, x[int((i + 12))], 6, 1700485571);
                d = ii(d, a, b, c, x[int((i + 3))], 10, -1894986606);
                c = ii(c, d, a, b, x[int((i + 10))], 15, -1051523);
                b = ii(b, c, d, a, x[int((i + 1))], 21, -2054922799);
                a = ii(a, b, c, d, x[int((i + 8))], 6, 1873313359);
                d = ii(d, a, b, c, x[int((i + 15))], 10, -30611744);
                c = ii(c, d, a, b, x[int((i + 6))], 15, -1560198380);
                b = ii(b, c, d, a, x[int((i + 13))], 21, 1309151649);
                a = ii(a, b, c, d, x[int((i + 4))], 6, -145523070);
                d = ii(d, a, b, c, x[int((i + 11))], 10, -1120210379);
                c = ii(c, d, a, b, x[int((i + 2))], 15, 718787259);
                b = ii(b, c, d, a, x[int((i + 9))], 21, -343485551);
                a = (a + aa);
                b = (b + bb);
                c = (c + cc);
                d = (d + dd);
                i = (i + 16);
            };
            digest = new ByteArray();
            digest.writeInt(a);
            digest.writeInt(b);
            digest.writeInt(c);
            digest.writeInt(d);
            digest.position = 0;
            return ((((IntUtil.toHex(a) + IntUtil.toHex(b)) + IntUtil.toHex(c)) + IntUtil.toHex(d)));
        }
        private static function f(x:int, y:int, z:int):int{
            return (((x & y) | (~(x) & z)));
        }
        private static function g(x:int, y:int, z:int):int{
            return (((x & z) | (y & ~(z))));
        }
        private static function h(x:int, y:int, z:int):int{
            return (((x ^ y) ^ z));
        }
        private static function i(x:int, y:int, z:int):int{
            return ((y ^ (x | ~(z))));
        }
        private static function transform(func:Function, a:int, b:int, c:int, d:int, x:int, s:int, t:int):int{
            var tmp:int = (((a + int(func(b, c, d))) + x) + t);
            return ((IntUtil.rol(tmp, s) + b));
        }
        private static function ff(a:int, b:int, c:int, d:int, x:int, s:int, t:int):int{
            return (transform(f, a, b, c, d, x, s, t));
        }
        private static function gg(a:int, b:int, c:int, d:int, x:int, s:int, t:int):int{
            return (transform(g, a, b, c, d, x, s, t));
        }
        private static function hh(a:int, b:int, c:int, d:int, x:int, s:int, t:int):int{
            return (transform(h, a, b, c, d, x, s, t));
        }
        private static function ii(a:int, b:int, c:int, d:int, x:int, s:int, t:int):int{
            return (transform(i, a, b, c, d, x, s, t));
        }
        private static function createBlocks(s:ByteArray):Array{
            var blocks:Array = new Array();
            var len:int = (s.length * 8);
            var mask = 0xFF;
            var i:int;
            while (i < len) {
                blocks[int((i >> 5))] = (blocks[int((i >> 5))] | ((s[(i / 8)] & mask) << (i % 32)));
                i = (i + 8);
            };
            blocks[int((len >> 5))] = (blocks[int((len >> 5))] | (128 << (len % 32)));
            blocks[int(((((len + 64) >>> 9) << 4) + 14))] = len;
            return (blocks);
        }

    }
}//package com.settrade.streaming5.utils.crypto 
﻿package com.settrade.streaming5.utils.crypto {

    public class IntUtil {

        private static var hexChars:String = "0123456789abcdef";

        public static function rol(x:int, n:int):int{
            return (((x << n) | (x >>> (32 - n))));
        }
        public static function ror(x:int, n:int):uint{
            var nn:int = (32 - n);
            return (((x << nn) | (x >>> (32 - nn))));
        }
        public static function toHex(n:int, bigEndian:Boolean=false):String{
            var i:int;
            var x:int;
            var s:String = "";
            if (bigEndian){
                i = 0;
                while (i < 4) {
                    s = (s + (hexChars.charAt(((n >> (((3 - i) * 8) + 4)) & 15)) + hexChars.charAt(((n >> ((3 - i) * 8)) & 15))));
                    i++;
                };
            } else {
                x = 0;
                while (x < 4) {
                    s = (s + (hexChars.charAt(((n >> ((x * 8) + 4)) & 15)) + hexChars.charAt(((n >> (x * 8)) & 15))));
                    x++;
                };
            };
            return (s);
        }

    }
}//package com.settrade.streaming5.utils.crypto 
﻿package com.settrade.streaming5.utils {
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.message.*;
    import flash.events.*;
    import com.settrade.streaming5.message.control.notification.*;
    import com.settrade.streaming5.message.response.orderstatus.*;
    import com.settrade.streaming5.service.*;
    import flash.text.*;
    import fl.managers.*;
    import com.yahoo.astra.fl.managers.*;

    public class AlertService {

        private static var instance:AlertService;

        private var rootRef:MovieClip;
        private var targetComponent;
        private var fm:FocusManager;
        var buttonTextFormat:TextFormat;
        protected var messageIdList:Array;
        var SPACE:String = "                              ";

        public function AlertService(){
            super();
            this.buttonTextFormat = new TextFormat();
            this.buttonTextFormat.bold = true;
            this.buttonTextFormat.color = 0xFFFFFF;
            this.messageIdList = new Array();
        }
        public static function getInstance():AlertService{
            if (instance == null){
                instance = new (AlertService)();
            };
            return (instance);
        }

        public function setRootRef(ref:MovieClip):void{
            this.rootRef = ref;
            this.fm = new FocusManager(this.rootRef);
        }
        public function alertFailMessage(message:IFailMessage, targetComp=null, titleMessage:String="Error !!!", iconName:String="AlertErrorIcon"):void{
            this.alertLockMessageId(message.message, message.id, targetComp, titleMessage, iconName);
        }
        public function alertLockMessageId(alertMessage:String, messageId:Number, targetComp=null, titleMessage:String="Error !!!", iconName:String="AlertErrorIcon"):void{
            if (this.messageIdList.indexOf(messageId) == -1){
                this.messageIdList.push(messageId);
                this.alert(alertMessage, targetComp, titleMessage, iconName);
            };
        }
        public function alert(alertMessage:String, targetComp=null, titleMessage:String="Error !!!", iconName:String="AlertErrorIcon"):void{
            var buttons:Array;
            if (this.rootRef != null){
                buttons = new Array();
                buttons.push("OK");
                AlertManager.padding = 15;
                AlertManager.modalBackgroundBlur = 1;
                AlertManager.overlayAlpha = 0.1;
                AlertManager.setButtonStyle("textFormat", this.buttonTextFormat);
                AlertManager.createAlert(this.rootRef, alertMessage, titleMessage, buttons, this.alertClickHandler, iconName, true);
                AlertManager.textColor = 0xCCCCCC;
                this.targetComponent = targetComp;
            };
        }
        public function alertTest(alertMessage1:String, alertMessage2:String, targetComp=null, titleMessage:String="Error !!!", iconName:String="AlertErrorIcon"):void{
            var buttons:Array = new Array();
            buttons.push("OK");
            AlertManager.padding = 15;
            AlertManager.modalBackgroundBlur = 1;
            AlertManager.overlayAlpha = 0.1;
            AlertManager.setButtonStyle("textFormat", this.buttonTextFormat);
            AlertManager.createAlert(this.rootRef, "Test1", titleMessage, buttons, this.alertClickHandler, iconName, true);
            AlertManager.createAlert(this.rootRef, "Test2", titleMessage, buttons, this.alertClickHandler, iconName, true);
            AlertManager.createAlert(this.rootRef, "Test3", titleMessage, buttons, this.alertClickHandler, iconName, true);
            AlertManager.createAlert(this.rootRef, "Test4", "Eror asdfghkpyphyjk[o", buttons, this.alertClickHandler, iconName, true);
            AlertManager.createAlert(this.rootRef, "Test5", titleMessage, buttons, this.alertClickHandler, iconName, true);
            AlertManager.createAlert(this.rootRef, "Test6", titleMessage, buttons, this.alertClickHandler, iconName, true);
            AlertManager.createAlert(this.rootRef, "Test7", titleMessage, buttons, this.alertClickHandler, iconName, true);
            AlertManager.createAlert(this.rootRef, "Test8", titleMessage, buttons, this.alertClickHandler, iconName, true);
            AlertManager.createAlert(this.rootRef, "Test9", titleMessage, buttons, this.alertClickHandler, iconName, true);
            AlertManager.createAlert(this.rootRef, "Test10", titleMessage, buttons, this.alertClickHandler, iconName, true);
            AlertManager.createAlert(this.rootRef, "Test11", titleMessage, buttons, this.alertClickHandler, iconName, true);
            this.targetComponent = targetComp;
        }
        public function alertTest2(alertMessage1:String, alertMessage2:String, targetComp=null, titleMessage:String="Error !!!", iconName:String="AlertErrorIcon"):void{
            var buttons:Array = new Array();
            buttons.push("OK");
            AlertManager.padding = 15;
            AlertManager.modalBackgroundBlur = 1;
            AlertManager.overlayAlpha = 0.1;
            AlertManager.setButtonStyle("textFormat", this.buttonTextFormat);
            AlertManager.createAlert(this.rootRef, "Test1", titleMessage, buttons, this.alertClickHandler, iconName, true);
            AlertManager.createAlert(this.rootRef, "Test2", titleMessage, buttons, this.alertClickHandler, iconName, true);
            this.targetComponent = targetComp;
        }
        public function alertClickHandler(event:MouseEvent):void{
            if (this.targetComponent != null){
                this.targetComponent.setFocus();
            };
        }
        public function alertWarning(alertMessage:String, onConfirmFunction:Function=null, onCancelFunction:Function=null, targetComp=null):void{
            var alertMessage:* = alertMessage;
            var onConfirmFunction = onConfirmFunction;
            var onCancelFunction = onCancelFunction;
            var targetComp = targetComp;
            var buttons:* = new Array();
            buttons.push("Confirm");
            buttons.push("Cancel");
            AlertManager.padding = 15;
            AlertManager.modalBackgroundBlur = 1;
            AlertManager.overlayAlpha = 0.3;
            AlertManager.setButtonStyle("textFormat", this.buttonTextFormat);
            AlertManager.buttonSpacing = 5;
            var alertWarningClickHandler:* = function (event:MouseEvent){
                if ((((event.target.name == "Confirm")) && (!((onConfirmFunction == null))))){
                    onConfirmFunction();
                } else {
                    if ((((event.target.name == "Cancel")) && (!((onCancelFunction == null))))){
                        onCancelFunction();
                    };
                };
            };
            AlertManager.createAlert(this.rootRef, alertMessage, "Warning !!", buttons, alertWarningClickHandler, "AlertWarningIcon", true);
            AlertManager.textColor = 0xCCCCCC;
        }
        public function alertCustomize(alertMessage:String, alertTitle:String, buttons:Array, onButtonFunction:Array=null, targetComp=null, iconName:String="AlertWarningIcon"):void{
            var alertMessage:* = alertMessage;
            var alertTitle:* = alertTitle;
            var buttons:* = buttons;
            var onButtonFunction = onButtonFunction;
            var targetComp = targetComp;
            var iconName:String = iconName;
            if (onButtonFunction == null){
                onButtonFunction = new Array();
            };
            AlertManager.padding = 15;
            AlertManager.modalBackgroundBlur = 1;
            AlertManager.overlayAlpha = 0.3;
            AlertManager.setButtonStyle("textFormat", this.buttonTextFormat);
            AlertManager.buttonSpacing = 5;
            var alertWarningClickHandler:* = function (event:MouseEvent){
                var index:int = buttons.indexOf(event.target.name);
                var callback:Function = onButtonFunction[index];
                if (callback != null){
                    callback();
                };
            };
            AlertManager.createAlert(this.rootRef, alertMessage, alertTitle, buttons, alertWarningClickHandler, iconName, true);
            AlertManager.textColor = 0xCCCCCC;
        }
        public function alertBuying(symbol, qty, price, market:String="E", validity:String="", publishVol:String="", priceDecimal:int=2, onConfirmFunction:Function=null, onCancelFunction:Function=null):void{
            var symbol:* = symbol;
            var qty:* = qty;
            var price:* = price;
            var market:String = market;
            var validity:String = validity;
            var publishVol:String = publishVol;
            var priceDecimal:int = priceDecimal;
            var onConfirmFunction = onConfirmFunction;
            var onCancelFunction = onCancelFunction;
            var txt:* = (("Buy : \t" + symbol) + "\n");
            txt = (txt + (("Volume : \t" + ThemeManager.numberFormat(parseFloat(qty), 0, true)) + "\n"));
            txt = (txt + (("Price : \t" + ((isNaN(parseFloat(price))) ? price : ThemeManager.numberFormat(price, priceDecimal, true))) + "\n"));
            if (validity != "Day"){
                txt = (txt + (("Validity : \t" + validity) + "\n"));
            };
            if (!isNaN(parseFloat(publishVol))){
                if (market == "E"){
                    txt = (txt + (("Iceberg Volume : \t" + ThemeManager.numberFormat(parseFloat(publishVol), 0, true)) + "\n"));
                } else {
                    txt = (txt + (("Publish Volume : \t" + ThemeManager.numberFormat(parseFloat(publishVol), 0, true)) + "\n"));
                };
            };
            if (market == "E"){
                txt = (txt + (("\nTotal Amount : " + ((isNaN(parseFloat(price))) ? "N/A" : ThemeManager.numberFormat((parseFloat(price) * parseFloat(qty)), 2, true))) + " Baht\n"));
            } else {
                txt = (txt + "\n");
            };
            txt = (txt + "(Commission and VAT not included)\n\n");
            var buttons:* = new Array();
            buttons.push("Buy");
            buttons.push("Cancel");
            AlertManager.padding = 15;
            AlertManager.modalBackgroundBlur = 1;
            AlertManager.overlayAlpha = 0.3;
            AlertManager.buttonSpacing = 5;
            AlertManager.setButtonStyle("textFormat", this.buttonTextFormat);
            var alertBuyingClickHandler:* = function (event:MouseEvent){
                if ((((event.target.name == "Buy")) && (!((onConfirmFunction == null))))){
                    onConfirmFunction();
                } else {
                    if ((((event.target.name == "Cancel")) && (!((onCancelFunction == null))))){
                        onCancelFunction();
                    };
                };
            };
            AlertManager.createAlert(this.rootRef, txt, "Placing Order Confirmation", buttons, alertBuyingClickHandler, "AlertBuyingIcon", true);
        }
        public function alertSelling(symbol, qty, price, market:String="E", validity:String="", publishVol:String="", priceDecimal:int=2, onConfirmFunction:Function=null, onCancelFunction:Function=null):void{
            var symbol:* = symbol;
            var qty:* = qty;
            var price:* = price;
            var market:String = market;
            var validity:String = validity;
            var publishVol:String = publishVol;
            var priceDecimal:int = priceDecimal;
            var onConfirmFunction = onConfirmFunction;
            var onCancelFunction = onCancelFunction;
            var txt:* = (("Sell : \t" + symbol) + "\n");
            txt = (txt + (("Volume : \t" + ThemeManager.numberFormat(parseFloat(qty), 0, true)) + "\n"));
            txt = (txt + (("Price : \t" + ((isNaN(parseFloat(price))) ? price : ThemeManager.numberFormat(price, priceDecimal, true))) + "\n"));
            if (validity != "Day"){
                txt = (txt + (("Validity : \t" + validity) + "\n"));
            };
            if (!isNaN(parseFloat(publishVol))){
                if (market == "E"){
                    txt = (txt + (("Iceberg Volume : \t" + ThemeManager.numberFormat(parseFloat(publishVol), 0, true)) + "\n"));
                } else {
                    txt = (txt + (("Publish Volume : \t" + ThemeManager.numberFormat(parseFloat(publishVol), 0, true)) + "\n"));
                };
            };
            if (market == "E"){
                txt = (txt + (("\nTotal Amount : " + ((isNaN(parseFloat(price))) ? "N/A" : ThemeManager.numberFormat((parseFloat(price) * parseFloat(qty)), 2, true))) + " Baht\n"));
            } else {
                txt = (txt + "\n");
            };
            txt = (txt + "(Commission and VAT not included)\n\n");
            var buttons:* = new Array();
            buttons.push("Sell");
            buttons.push("Cancel");
            AlertManager.padding = 15;
            AlertManager.modalBackgroundBlur = 1;
            AlertManager.overlayAlpha = 0.3;
            AlertManager.buttonSpacing = 5;
            AlertManager.setButtonStyle("textFormat", this.buttonTextFormat);
            var alertSellingClickHandler:* = function (event:MouseEvent){
                if ((((event.target.name == "Sell")) && (!((onConfirmFunction == null))))){
                    onConfirmFunction();
                } else {
                    if ((((event.target.name == "Cancel")) && (!((onCancelFunction == null))))){
                        onCancelFunction();
                    };
                };
            };
            AlertManager.createAlert(this.rootRef, txt, "Placing Order Confirmation", buttons, alertSellingClickHandler, "AlertSellingIcon", true);
        }
        public function alertBuyingNewTrading(symbol, qty, price, market:String="E", validity:String="", publishVol:String="", priceDecimal:int=2, onConfirmFunction:Function=null, onCancelFunction:Function=null):void{
            var symbol:* = symbol;
            var qty:* = qty;
            var price:* = price;
            var market:String = market;
            var validity:String = validity;
            var publishVol:String = publishVol;
            var priceDecimal:int = priceDecimal;
            var onConfirmFunction = onConfirmFunction;
            var onCancelFunction = onCancelFunction;
            var txt:* = (("Buy : \t" + symbol) + "\n");
            txt = (txt + (("Volume : \t" + ThemeManager.numberFormat(parseFloat(qty), 0, true)) + "\n"));
            txt = (txt + (("Price : \t" + ((isNaN(parseFloat(price))) ? price : ThemeManager.numberFormat(price, priceDecimal, true))) + "\n"));
            if (validity != "Day"){
                txt = (txt + (("Validity : \t" + validity) + "\n"));
            };
            if (!isNaN(parseFloat(publishVol))){
                txt = (txt + (("Iceberg Volume : \t" + ThemeManager.numberFormat(parseFloat(publishVol), 0, true)) + "\n"));
            };
            if (market == "E"){
                txt = (txt + (("\nTotal Amount : " + ((isNaN(parseFloat(price))) ? "N/A" : ThemeManager.numberFormat((parseFloat(price) * parseFloat(qty)), 2, true))) + " Baht\n"));
            } else {
                txt = (txt + "\n");
            };
            txt = (txt + "(Commission and VAT not included)\n\n");
            var buttons:* = new Array();
            buttons.push("Buy");
            buttons.push("Cancel");
            AlertManager.padding = 15;
            AlertManager.modalBackgroundBlur = 1;
            AlertManager.overlayAlpha = 0.3;
            AlertManager.buttonSpacing = 5;
            AlertManager.setButtonStyle("textFormat", this.buttonTextFormat);
            var alertBuyingClickHandler:* = function (event:MouseEvent){
                if ((((event.target.name == "Buy")) && (!((onConfirmFunction == null))))){
                    onConfirmFunction();
                } else {
                    if ((((event.target.name == "Cancel")) && (!((onCancelFunction == null))))){
                        onCancelFunction();
                    };
                };
            };
            AlertManager.createAlert(this.rootRef, txt, "Placing Order Confirmation", buttons, alertBuyingClickHandler, "AlertBuyingIcon", true);
        }
        public function alertSellingNewTrading(symbol, qty, price, market:String="E", validity:String="", publishVol:String="", priceDecimal:int=2, onConfirmFunction:Function=null, onCancelFunction:Function=null):void{
            var symbol:* = symbol;
            var qty:* = qty;
            var price:* = price;
            var market:String = market;
            var validity:String = validity;
            var publishVol:String = publishVol;
            var priceDecimal:int = priceDecimal;
            var onConfirmFunction = onConfirmFunction;
            var onCancelFunction = onCancelFunction;
            var txt:* = (("Sell : \t" + symbol) + "\n");
            txt = (txt + (("Volume : \t" + ThemeManager.numberFormat(parseFloat(qty), 0, true)) + "\n"));
            txt = (txt + (("Price : \t" + ((isNaN(parseFloat(price))) ? price : ThemeManager.numberFormat(price, priceDecimal, true))) + "\n"));
            if (validity != "Day"){
                txt = (txt + (("Validity : \t" + validity) + "\n"));
            };
            if (!isNaN(parseFloat(publishVol))){
                txt = (txt + (("Iceberg Volume : \t" + ThemeManager.numberFormat(parseFloat(publishVol), 0, true)) + "\n"));
            };
            if (market == "E"){
                txt = (txt + (("\nTotal Amount : " + ((isNaN(parseFloat(price))) ? "N/A" : ThemeManager.numberFormat((parseFloat(price) * parseFloat(qty)), 2, true))) + " Baht\n"));
            } else {
                txt = (txt + "\n");
            };
            txt = (txt + "(Commission and VAT not included)\n\n");
            var buttons:* = new Array();
            buttons.push("Sell");
            buttons.push("Cancel");
            AlertManager.padding = 15;
            AlertManager.modalBackgroundBlur = 1;
            AlertManager.overlayAlpha = 0.3;
            AlertManager.buttonSpacing = 5;
            AlertManager.setButtonStyle("textFormat", this.buttonTextFormat);
            var alertSellingClickHandler:* = function (event:MouseEvent){
                if ((((event.target.name == "Sell")) && (!((onConfirmFunction == null))))){
                    onConfirmFunction();
                } else {
                    if ((((event.target.name == "Cancel")) && (!((onCancelFunction == null))))){
                        onCancelFunction();
                    };
                };
            };
            AlertManager.createAlert(this.rootRef, txt, "Placing Order Confirmation", buttons, alertSellingClickHandler, "AlertSellingIcon", true);
        }
        public function alertBuySellNotification(message:PriceVolumeNotificationMessage):void{
            var message:* = message;
            var txt:* = message.toNotificationString();
            var buttons:* = new Array();
            buttons.push("Buy");
            buttons.push("Sell");
            buttons.push("Cancel");
            AlertManager.padding = 15;
            AlertManager.modalBackgroundBlur = 1;
            AlertManager.overlayAlpha = 0.3;
            AlertManager.buttonSpacing = 5;
            AlertManager.setButtonStyle("textFormat", this.buttonTextFormat);
            var alertBuyingClickHandler:* = function (event:MouseEvent){
                if (event.target.name == "Buy"){
                    if (message.matchCriteria.condition.isPriceCondition()){
                        NotifyPlaceOrderService.getInstance().notifyPlaceOrder(message.matchCriteria.instrumentId, OrderSide.BUY, PriceType.LIMIT, message.matchCriteria.value);
                    } else {
                        NotifyPlaceOrderService.getInstance().notifyPlaceOrder(message.matchCriteria.instrumentId, OrderSide.BUY, PriceType.LIMIT);
                    };
                } else {
                    if (event.target.name == "Sell"){
                        if (message.matchCriteria.condition.isPriceCondition()){
                            NotifyPlaceOrderService.getInstance().notifyPlaceOrder(message.matchCriteria.instrumentId, OrderSide.SELL, PriceType.LIMIT, message.matchCriteria.value);
                        } else {
                            NotifyPlaceOrderService.getInstance().notifyPlaceOrder(message.matchCriteria.instrumentId, OrderSide.SELL, PriceType.LIMIT);
                        };
                    };
                };
            };
            AlertManager.createAlert(this.rootRef, txt, "Price Volume Alert", buttons, alertBuyingClickHandler, "AlertNotiIcon", true);
        }
        public function alertOrderNotification(message:OrderNotificationMessage):void{
            var message:* = message;
            var txt:* = message.toAlertString();
            var buttons:* = new Array();
            buttons.push("Close");
            buttons.push("Detail");
            AlertManager.padding = 15;
            AlertManager.modalBackgroundBlur = 1;
            AlertManager.overlayAlpha = 0.3;
            AlertManager.buttonSpacing = 5;
            AlertManager.setButtonStyle("textFormat", this.buttonTextFormat);
            var alertHandler:* = function (event:MouseEvent){
                if (event.target.name == "Detail"){
                    if (message.orderStatus.system.isEquity()){
                        JavascriptInterface.openEquityDetailWindow(OrderStatusEquity(message.orderStatus));
                    } else {
                        if (message.orderStatus.system.isDeriv()){
                            JavascriptInterface.openDerivativesDetailWindow(OrderStatusDerivatives(message.orderStatus));
                        };
                    };
                };
            };
            AlertManager.createAlert(this.rootRef, txt, "Order Alert", buttons, alertHandler, "AlertNotiIcon", true);
        }
        public function setFocus(target):void{
            this.fm.setFocus(target);
        }
        public function clearFocus():void{
            this.fm.setFocus(this.rootRef.blankButton);
        }
        public function isShowAlert():Boolean{
            return ((AlertManager.getQueueCount() > 0));
        }

    }
}//package com.settrade.streaming5.utils 
﻿package com.settrade.streaming5.utils.chart {
    import com.settrade.streaming5.utils.*;

    public class IntradayBaseChartValueXmlGenerator extends IntradayChartValueXmlGenerator {

        public function IntradayBaseChartValueXmlGenerator(){
            super();
        }
        override protected function addDefaultChartAttribute(xml:XML):void{
            super.addDefaultChartAttribute(xml);
            this.addStaticChartAttyibute(xml);
            this.addFontChartAttribute(xml);
            this.addTooltipChartAttribute(xml);
        }
        private function addTooltipChartAttribute(xml:XML):void{
            xml.@toolTipBgColor = "333333";
            xml.@toolTipBorderColor = "333333";
        }
        private function addStaticChartAttyibute(xml:XML):void{
            xml.@animation = "0";
            xml.@canvasLeftMargin = "75";
            xml.@canvasRightMargin = "0";
            xml.@chartTopMargin = "5";
            xml.@chartBottomMargin = "0";
            xml.@chartLeftMargin = "0";
            xml.@chartRightMargin = "20";
            xml.@useEllipsesWhenOverflow = "0";
            xml.@labelDisplay = "NONE";
            xml.@showValues = "0";
            xml.@bgAlpha = "0";
            xml.@bgColor = "000000";
            xml.@showBorder = "0";
            xml.@showAlternateHGridColor = "0";
            xml.@canvasBgAlpha = "0";
            xml.@canvasBorderThickness = "0";
            xml.@plotFillAlpha = ThemeManager.CHART_INTRADAY_AREA_ALPHA;
            xml.@plotGradientColor = "";
            xml.@adjustDiv = "0";
            xml.@forceDecimals = "1";
            xml.@decimals = "2";
            xml.@showPlotBorder = "0";
            xml.@formatNumberScale = "0";
        }
        private function addFontChartAttribute(xml:XML):void{
            xml.@baseFontColor = ThemeManager.STATIC_LABEL_COLOR.toString(16);
            xml.@baseFont = ThemeManager.DEFAULT_FONT_NAME;
            xml.@baseFontSize = ThemeManager.CHART_INTRADAY_FONT_SIZE;
        }
        override protected function getChartStyle():XML{
            var xml:XML = super.getChartStyle();
            var tooltipStyleXml:XML = BASE_STYLE_STYLE_XML.copy();
            tooltipStyleXml.@name = "tooltipFont";
            tooltipStyleXml.@type = "font";
            tooltipStyleXml.@size = ThemeManager.CHART_PORFOLIO_COLUMN_TOOLTIP_FONT_SIZE;
            var tooltipApplyXml:XML = BASE_STYLE_APPLY_XML.copy();
            tooltipApplyXml.@toObject = "ToolTip";
            tooltipApplyXml.@styles = "tooltipFont";
            xml.definition.appendChild(tooltipStyleXml);
            xml.application.appendChild(tooltipApplyXml);
            return (xml);
        }
        override protected function getDivLineNumber():int{
            return (2);
        }

    }
}//package com.settrade.streaming5.utils.chart 
﻿package com.settrade.streaming5.utils.chart {
    import flash.globalization.*;

    public class IntradayChartLabelGenerator {

        private static const START_TIME:Date = new Date(null, null, null, 9, 30, 0, 0);
        private static const END_TIME:Date = new Date(null, null, null, 17, 0, 0, 0);
        private static const BREAK_TIME_START:Array = new Array(new Date(null, null, null, 12, 30, 0, 0));
        private static const BREAK_TIME_END:Array = new Array(new Date(null, null, null, 14, 30, 0, 0));
        private static const NIGHT_START_TIME:Date = new Date(null, null, 1, 19, 30, 0, 0);
        private static const NIGHT_END_TIME:Date = new Date(null, null, 2, 17, 0, 0, 0);
        private static const NIGHT_BREAK_TIME_START:Array = new Array(new Date(null, null, 1, 22, 30, 0, 0), new Date(null, null, 2, 12, 30, 0, 0));
        private static const NIGHT_BREAK_TIME_END:Array = new Array(new Date(null, null, 2, 9, 30, 0, 0), new Date(null, null, 2, 14, 30, 0, 0));
        private static const TIME_SPREAD_MIN = 3;
        private static const TIME_SPREAD_MILLISECOND = 180000;

        private static var LABEL_FORMAT:DateTimeFormatter = new DateTimeFormatter("en_US");
        private static var TOOLTIP_FORMAT:DateTimeFormatter = new DateTimeFormatter("en_US");
        private static var LABEL:Array = new Array();
        private static var TOOLTIP:Array = new Array();
        private static var NIGHT_LABEL:Array = new Array();
        private static var NIGHT_TOOLTIP:Array = new Array();
        private static var isInitLabel:Boolean = false;
        private static var isInitTooltip:Boolean = false;
        private static var isInitNightLabel:Boolean = false;
        private static var isInitNightTooltip:Boolean = false;

        public function IntradayChartLabelGenerator(){
            super();
        }
        public static function getLabel():Array{
            initDayLabel();
            return (LABEL);
        }
        public static function getTooltip():Array{
            initDayTooltip();
            return (TOOLTIP);
        }
        public static function getNightLabel():Array{
            initNightLabel();
            return (NIGHT_LABEL);
        }
        public static function getNightTooltip():Array{
            initNightTooltip();
            return (NIGHT_TOOLTIP);
        }
        private static function initDayLabel():void{
            if (!isInitLabel){
                LABEL = initLabel(START_TIME, END_TIME, BREAK_TIME_START, BREAK_TIME_END);
                isInitLabel = true;
            };
        }
        private static function initDayTooltip():void{
            if (!isInitTooltip){
                TOOLTIP = initTootip(START_TIME, END_TIME, BREAK_TIME_START, BREAK_TIME_END);
                isInitTooltip = true;
            };
        }
        private static function initNightLabel():void{
            if (!isInitNightLabel){
                NIGHT_LABEL = initLabel(NIGHT_START_TIME, NIGHT_END_TIME, NIGHT_BREAK_TIME_START, NIGHT_BREAK_TIME_END);
                isInitLabel = true;
            };
        }
        private static function initNightTooltip():void{
            if (!isInitNightTooltip){
                NIGHT_TOOLTIP = initTootip(NIGHT_START_TIME, NIGHT_END_TIME, NIGHT_BREAK_TIME_START, NIGHT_BREAK_TIME_END);
                isInitTooltip = true;
            };
        }
        private static function initTootip(startTime:Date, endTime:Date, breakTimeStart:Array, breakTimeEnd:Array):Array{
            var curTimeDate:Date;
            var tooltip:*;
            var breakIndex:int;
            var tooltipArray:Array = new Array();
            var curTime:Number = startTime.getTime();
            while (curTime <= endTime.getTime()) {
                curTimeDate = new Date();
                curTimeDate.setTime(curTime);
                tooltip = TOOLTIP_FORMAT.format(curTimeDate);
                tooltipArray.push(tooltip);
                if (breakIndex < breakTimeStart.length){
                    if (breakTimeStart[breakIndex].getTime() <= curTime){
                        curTime = (breakTimeEnd[breakIndex].getTime() - TIME_SPREAD_MILLISECOND);
                        breakIndex++;
                    };
                };
                curTime = (curTime + TIME_SPREAD_MILLISECOND);
            };
            return (tooltipArray);
        }
        private static function initLabel(startTime:Date, endTime:Date, breakTimeStart:Array, breakTimeEnd:Array, isIncludeStart:Boolean=false):Array{
            var tmpCurHour:Date;
            var curTimeDate:Date;
            var label:*;
            var breakIndex:int;
            var curHour:int = startTime.hours;
            var labelArray:Array = new Array();
            if (isIncludeStart){
                tmpCurHour = startTime;
                tmpCurHour.setTime((tmpCurHour.getTime() - ((60 * 60) * 1000)));
            };
            var curTime:Number = startTime.getTime();
            while (curTime <= endTime.getTime()) {
                curTimeDate = new Date();
                curTimeDate.setTime(curTime);
                label = "";
                if (curTimeDate.hours != curHour){
                    curHour = curTimeDate.hours;
                    label = LABEL_FORMAT.format(curTimeDate);
                };
                labelArray.push(label);
                if (breakIndex < breakTimeStart.length){
                    if (breakTimeStart[breakIndex].getTime() <= curTime){
                        curTime = (breakTimeEnd[breakIndex].getTime() - TIME_SPREAD_MILLISECOND);
                        curHour = breakTimeEnd[breakIndex].hours;
                        breakIndex++;
                    };
                };
                curTime = (curTime + TIME_SPREAD_MILLISECOND);
            };
            return (labelArray);
        }

        LABEL_FORMAT.setDateTimePattern("H");
        TOOLTIP_FORMAT.setDateTimePattern("H:mm");
        initDayLabel();
        initNightLabel();
        initDayTooltip();
        initNightTooltip();
    }
}//package com.settrade.streaming5.utils.chart 
﻿package com.settrade.streaming5.utils.chart {
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.message.response.*;
    import com.settrade.log.logger.*;
    import com.settrade.streaming5.message.response.intradaychart.*;

    public class IntradayChartValueXmlGenerator extends ChartXmlGenerator {

        private static var logger:Logger = new Logger(prototype.constructor);

        public function IntradayChartValueXmlGenerator(){
            super();
        }
        override public function createChartFromData(chartDataList:Array):XML{
            throw (new Error("Non Suppor Function"));
        }
        public function createChartFromIntradayChartResponseMessage(message:IntradayChartResponseMessage):XML{
            var value:Array = this.getValueFromChart(message);
            var label:Array = this.getLabelFromChart(message);
            var tooltip:Array = this.getTooltipFromChart(message);
            var xml:XML = this.createChartFromValueList(value, label, tooltip);
            this.appendBoundary(xml, message);
            xml.appendChild(this.createTrendLineFromIntradayChartResponseMessage(message));
            var change:Number = (message.last - message.prevClose);
            if (change > 0){
                xml.@plotFillColor = ThemeManager.CHART_INTRADAY_AREA_POSITIVE_COLOR;
                xml.@plotGradientColor = ThemeManager.CHART_INTRADAY_AREA_POSITIVE_GRADIENT_COLOR;
            } else {
                if (change < 0){
                    xml.@plotFillColor = ThemeManager.CHART_INTRADAY_AREA_NEGATIVE_COLOR;
                    xml.@plotGradientColor = ThemeManager.CHART_INTRADAY_AREA_NEGATIVE_GRADIENT_COLOR;
                } else {
                    xml.@plotFillColor = ThemeManager.CHART_INTRADAY_AREA_NEUTRAL_AREA_COLOR;
                    xml.@plotGradientColor = ThemeManager.CHART_INTRADAY_AREA_NEUTRAL_GRADIENT_COLOR;
                };
            };
            return (xml);
        }
        protected function createTrendLineFromIntradayChartResponseMessage(message:IntradayChartResponseMessage):XML{
            var xml:XML = BASE_TRENDLINES_XML.copy();
            xml.appendChild(this.createLineFromIntradayChartResponseMessage(message));
            return (xml);
        }
        protected function createLineFromIntradayChartResponseMessage(message:IntradayChartResponseMessage):XML{
            var xml:XML = createLineXmlByValue(message.prevClose);
            xml.@displayValue = " ";
            xml.@color = ThemeManager.CHART_INTRADAY_CLOSE_COLOR;
            xml.@showOnTop = "1";
            return (xml);
        }
        protected function getLabelFromChart(message:IntradayChartResponseMessage):Array{
            return (((message.isNight) ? IntradayChartLabelGenerator.getNightLabel() : IntradayChartLabelGenerator.getLabel()));
        }
        protected function getTooltipFromChart(message:IntradayChartResponseMessage):Array{
            return (((message.isNight) ? IntradayChartLabelGenerator.getNightTooltip() : IntradayChartLabelGenerator.getTooltip()));
        }
        protected function getValueFromChart(message:IntradayChartResponseMessage):Array{
            var tmpArray:Array;
            var data:PriceValueIntradayChartData;
            if (message.chartType.isPriceValue()){
                tmpArray = new Array();
                for each (data in message.value) {
                    tmpArray.push(data.value);
                };
                return (tmpArray);
            };
            return (message.value);
        }
        override protected function addDefaultChartAttribute(xml:XML):void{
            super.addDefaultChartAttribute(xml);
            xml.@numDivLines = this.getDivLineNumber();
        }
        private function appendBoundary(xml:XML, message:IntradayChartResponseMessage):void{
            var spread:Number;
            var realMax:Number;
            var realMin:Number;
            var diff:Number;
            var N:int;
            var timesOfSpread:int;
            var lowerBound:Number;
            var upperBound:Number;
            var max:Number = this.getMax(message);
            var min:Number = this.getMin(message);
            if (max >= min){
                spread = this.getSpread(message);
                realMax = (max + spread);
                realMin = ((Math.ceil(((min / spread) - 1E-6)) - 1) * spread);
                realMin = (((realMin < 0)) ? 0 : realMin);
                diff = (realMax - realMin);
                N = Math.ceil((diff / spread));
                timesOfSpread = int(Math.ceil((N / (this.getDivLineNumber() + 1))));
                lowerBound = realMin;
                upperBound = (realMin + ((timesOfSpread * spread) * (this.getDivLineNumber() + 1)));
                xml.@yAxisMinValue = lowerBound;
                xml.@yAxisMaxValue = upperBound;
            };
        }
        private function getSpread(message:IntradayChartResponseMessage):Number{
            var max:Number = this.getMax(message);
            var spread:Number = message.spread;
            if (isNaN(spread)){
                spread = EquityUtils.getSpreadDown(max);
            };
            return (spread);
        }
        private function getMax(message:IntradayChartResponseMessage):Number{
            var value:Number;
            var maxValue:Number = Number.MIN_VALUE;
            for each (value in this.getValueFromChart(message)) {
                if (value > maxValue){
                    maxValue = value;
                };
            };
            return (maxValue);
        }
        private function getMin(message:IntradayChartResponseMessage):Number{
            var value:Number;
            var minValue:Number = Number.MAX_VALUE;
            for each (value in this.getValueFromChart(message)) {
                if (value < minValue){
                    minValue = value;
                };
            };
            return (minValue);
        }
        private function createChartFromValueList(valueList:Array, labelList:Array, tooltipList:Array, tooltextDigit:int=2):XML{
            var value:Number;
            var i:int;
            var setXml:XML;
            var emptyXml:XML;
            var xml:XML = baseChartXml.copy();
            var labelIndex:int;
            for each (value in valueList) {
                setXml = createSetDataXMLByValue(value);
                setXml.@label = labelList[labelIndex];
                setXml.@tooltext = ((tooltipList[labelIndex] + ", ") + StreamingNumberFormatter.formatPriceWithPrecision(value, tooltextDigit));
                labelIndex++;
                xml.appendChild(setXml);
            };
            i = labelIndex;
            while (i < labelList.length) {
                emptyXml = createEmptySetDataXML();
                emptyXml.@label = labelList[i];
                xml.appendChild(emptyXml);
                i++;
            };
            return (xml);
        }
        protected function getDivLineNumber():int{
            return (2);
        }

    }
}//package com.settrade.streaming5.utils.chart 
﻿package com.settrade.streaming5.utils.chart {
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.message.response.*;

    public class QuoteIntradayDisplayValueChartXmlGenerator extends IntradayChartValueXmlGenerator {

        var _width:Number;

        public function QuoteIntradayDisplayValueChartXmlGenerator(width:Number){
            super();
            this._width = width;
        }
        override public function createChartFromIntradayChartResponseMessage(message:IntradayChartResponseMessage):XML{
            var xml:XML = super.createChartFromIntradayChartResponseMessage(message);
            var labelList:Array = this.getLabelFromChart(message);
            xml.@canvasPadding = (((this._width - 75) - 20) / (labelList.length + 1));
            return (xml);
        }
        override protected function addDefaultChartAttribute(xml:XML):void{
            super.addDefaultChartAttribute(xml);
            this.addStaticChartAttyibute(xml);
            this.addFontChartAttribute(xml);
            this.addTooltipChartAttribute(xml);
        }
        private function addTooltipChartAttribute(xml:XML):void{
            xml.@toolTipBgColor = "333333";
            xml.@toolTipBorderColor = "333333";
        }
        private function addStaticChartAttyibute(xml:XML):void{
            xml.@animation = "0";
            xml.@canvasBorderColor = ThemeManager.CHART_QUOTE_HISTORICAL_DISPLAY_AREA_BORDER_COLOR;
            xml.@canvasLeftMargin = "75";
            xml.@canvasRightMargin = "0";
            xml.@chartTopMargin = "5";
            xml.@chartBottomMargin = "0";
            xml.@chartLeftMargin = "0";
            xml.@chartRightMargin = "20";
            xml.@useEllipsesWhenOverflow = "0";
            xml.@labelDisplay = "NONE";
            xml.@showValues = "0";
            xml.@bgAlpha = "0";
            xml.@bgColor = "000000";
            xml.@showBorder = "0";
            xml.@showAlternateHGridColor = "0";
            xml.@canvasBgAlpha = "0";
            xml.@canvasBorderThickness = "0";
            xml.@plotFillColor = ThemeManager.CHART_QUOTE_HISTORICAL_DISPLAY_AREA_COLOR;
            xml.@plotFillAlpha = ThemeManager.CHART_QUOTE_HISTORICAL_DISPLAY_AREA_ALPHA;
            xml.@plotGradientColor = ThemeManager.CHART_QUOTE_HISTORICAL_DISPLAY_AREA_GRADIENT_COLOR;
            xml.@showPlotBorder = "0";
            xml.@adjustDiv = "0";
            xml.@forceDecimals = "1";
            xml.@decimals = "2";
            xml.@formatNumberScale = "0";
            xml.@yAxisValuesPadding = "10";
        }
        private function addFontChartAttribute(xml:XML):void{
            xml.@baseFontColor = ThemeManager.STATIC_LABEL_COLOR.toString(16);
            xml.@baseFont = ThemeManager.DEFAULT_FONT_NAME;
            xml.@baseFontSize = ThemeManager.CHART_QUOTE_HISTORICAL_DISPLAY_FONT_SIZE;
        }
        override protected function getChartStyle():XML{
            var xml:XML = super.getChartStyle();
            var tooltipStyleXml:XML = BASE_STYLE_STYLE_XML.copy();
            tooltipStyleXml.@name = "tooltipFont";
            tooltipStyleXml.@type = "font";
            tooltipStyleXml.@size = ThemeManager.CHART_PORFOLIO_COLUMN_TOOLTIP_FONT_SIZE;
            var tooltipApplyXml:XML = BASE_STYLE_APPLY_XML.copy();
            tooltipApplyXml.@toObject = "ToolTip";
            tooltipApplyXml.@styles = "tooltipFont";
            xml.definition.appendChild(tooltipStyleXml);
            xml.application.appendChild(tooltipApplyXml);
            return (xml);
        }
        public function get width():Number{
            return (this._width);
        }
        public function set width(value:Number):void{
            this._width = value;
        }
        override protected function getDivLineNumber():int{
            return (3);
        }

    }
}//package com.settrade.streaming5.utils.chart 
﻿package com.settrade.streaming5.utils.chart {
    import com.settrade.streaming5.common.*;

    public class ChartXmlGenerator {

        protected static const BASE_XML:XML = <chart></chart>
        ;
        protected static const BASE_SET_XML:XML = <set/>
        ;
        protected static const BASE_STYLE_XML:XML = <styles><definition></definition><application></application></styles>
        ;
        protected static const BASE_STYLE_STYLE_XML:XML = <style/>
        ;
        protected static const BASE_STYLE_APPLY_XML:XML = <apply/>
        ;
        protected static const BASE_CATAGORIES_XML:XML = <categories/>
        ;
        protected static const BASE_CATAGORY_XML:XML = <category/>
        ;
        protected static const BASE_DATASET_XML:XML = <dataset/>
        ;
        protected static const BASE_TRENDLINES_XML:XML = <trendLines/>
        ;
        protected static const BASE_LINE_XML:XML = <line/>
        ;

        protected var baseChartXml:XML;

        public function ChartXmlGenerator(){
            super();
            this.baseChartXml = BASE_XML.copy();
            this.addDefaultChartAttribute(this.baseChartXml);
            this.addDefaultChartStyle(this.baseChartXml);
        }
        public function createChartFromData(chartDataList:Array):XML{
            var chartData:ChartData;
            var xml:XML = this.baseChartXml.copy();
            for each (chartData in chartDataList) {
                xml.appendChild(this.createSetDataXML(chartData));
            };
            return (xml);
        }
        protected function createCategoryXMLByName(name:String):XML{
            var xml:XML = BASE_CATAGORY_XML.copy();
            xml.@label = name;
            return (xml);
        }
        protected function createLineXmlByValue(value:Number):XML{
            var xml:XML = BASE_LINE_XML.copy();
            xml.@startValue = value;
            return (xml);
        }
        protected function createSetDataXMLByValue(value:Number):XML{
            var xml:XML = BASE_SET_XML.copy();
            xml.@value = value;
            return (xml);
        }
        protected function createSetDataXML(chartData:ChartData):XML{
            var xml:XML = BASE_SET_XML.copy();
            xml.@label = chartData.label;
            xml.@value = chartData.value;
            return (xml);
        }
        protected function createEmptySetDataXML():XML{
            var xml:XML = BASE_SET_XML.copy();
            return (xml);
        }
        public function createEmptyChart():XML{
            var xml:XML = this.baseChartXml.copy();
            return (xml);
        }
        protected function addDefaultChartAttribute(xml:XML):void{
            if (StreamingAttribute.watermarkUrl != ""){
                xml.@bgImage = StreamingAttribute.watermarkUrl;
                xml.@bgImageAlpha = "100";
                xml.@bgImageDisplayMode = "fit";
            };
        }
        protected function addDefaultChartStyle(xml:XML):void{
            xml.appendChild(this.getChartStyle());
        }
        protected function getChartStyle():XML{
            return (BASE_STYLE_XML.copy());
        }

    }
}//package com.settrade.streaming5.utils.chart 
﻿package com.settrade.streaming5.utils.chart {
    import com.settrade.streaming5.utils.*;
    import com.settrade.streaming5.message.response.historicalchart.*;
    import flash.globalization.*;

    public class QuoteHistoricalDisplayValueChartXmlGenerator extends ChartXmlGenerator {

        private static var DATE_FORMAT:DateTimeFormatter = new DateTimeFormatter("en_US");

        var maxColumn:int;
        var splitColumn:int;
        var _width:Number;

        public function QuoteHistoricalDisplayValueChartXmlGenerator(width:Number, maxColumn:int=10, splitColumn:int=8){
            super();
            this.maxColumn = maxColumn;
            this.splitColumn = splitColumn;
            this._width = width;
        }
        override public function createChartFromData(chartDataList:Array):XML{
            var chartData:ChartData;
            var setXML:XML;
            var xml:XML = baseChartXml.copy();
            var step:int;
            var i:* = 0;
            while (i < chartDataList.length) {
                chartData = ChartData(chartDataList[i]);
                setXML = createSetDataXML(chartData);
                if (this.isShowValue(i, chartDataList.length, step)){
                    step++;
                    setXML.@showLabel = "1";
                } else {
                    setXML.@showLabel = "0";
                };
                xml.appendChild(setXML);
                i++;
            };
            xml.@canvasPadding = (((this._width - 75) - 20) / (chartDataList.length + 1));
            return (xml);
        }
        public function createChartFromHistoricalChartMessage(message:HistoricalChartResponseMessage, startIndex:int=-2147483648, endIndex:int=-2147483648):XML{
            var historicalChartData:HistoricalChartData;
            var chartData:ChartData;
            var spread:Number;
            var realMax:Number;
            var realMin:Number;
            var diff:Number;
            var N:int;
            var timesOfSpread:int;
            var lowerBound:Number;
            var upperBound:Number;
            var dataList:Array = message.data;
            if (endIndex == startIndex){
                endIndex++;
                startIndex--;
            };
            if (((!((startIndex == int.MIN_VALUE))) && (!((endIndex == int.MIN_VALUE))))){
                if (startIndex < 0){
                    startIndex = 0;
                };
                if (endIndex > (dataList.length - 1)){
                    endIndex = (dataList.length - 1);
                };
                dataList.splice(0, startIndex);
                dataList.splice(((endIndex - startIndex) + 1));
            };
            var chartDataList:Array = new Array();
            var step:int;
            var minValue:Number = Number.MAX_VALUE;
            var maxValue:Number = 0;
            var i:* = 0;
            while (i < dataList.length) {
                historicalChartData = HistoricalChartData(dataList[i]);
                chartData = new ChartData(DATE_FORMAT.format(historicalChartData.date), historicalChartData.value);
                chartDataList.push(chartData);
                if (historicalChartData.value < minValue){
                    minValue = historicalChartData.value;
                };
                if (historicalChartData.value > maxValue){
                    maxValue = historicalChartData.value;
                };
                i++;
            };
            var xml:XML = this.createChartFromData(chartDataList);
            if (maxValue >= minValue){
                spread = this.getSpread(maxValue, message);
                realMax = (maxValue + spread);
                realMin = ((Math.ceil(((minValue / spread) - 1E-6)) - 1) * spread);
                realMin = (((realMin < 0)) ? 0 : realMin);
                diff = (realMax - realMin);
                N = Math.ceil((diff / spread));
                timesOfSpread = int(Math.ceil((N / (this.getDivLineNumber() + 1))));
                lowerBound = realMin;
                upperBound = (realMin + ((timesOfSpread * spread) * (this.getDivLineNumber() + 1)));
                xml.@yAxisMinValue = lowerBound;
                xml.@yAxisMaxValue = upperBound;
            };
            return (xml);
        }
        private function getDivLineNumber():int{
            return (3);
        }
        private function getSpread(max:Number, message:HistoricalChartResponseMessage):Number{
            var spread:Number = message.spread;
            if (isNaN(spread)){
                spread = EquityUtils.getSpreadDown(max);
            };
            return (spread);
        }
        override protected function addDefaultChartAttribute(xml:XML):void{
            super.addDefaultChartAttribute(xml);
            this.addStaticChartAttribute(xml);
            this.addFontChartAttribute(xml);
            this.addTooltipChartAttribute(xml);
        }
        private function addTooltipChartAttribute(xml:XML):void{
            xml.@toolTipBgColor = "333333";
            xml.@toolTipBorderColor = "333333";
        }
        private function addStaticChartAttribute(xml:XML):void{
            xml.@animation = "0";
            xml.@numDivLines = this.getDivLineNumber();
            xml.@canvasBorderColor = ThemeManager.CHART_QUOTE_HISTORICAL_DISPLAY_AREA_BORDER_COLOR;
            xml.@canvasLeftMargin = "75";
            xml.@canvasRightMargin = "0";
            xml.@chartTopMargin = "5";
            xml.@chartBottomMargin = "0";
            xml.@chartLeftMargin = "0";
            xml.@chartRightMargin = "20";
            xml.@useEllipsesWhenOverflow = "0";
            xml.@labelDisplay = "NONE";
            xml.@showValues = "0";
            xml.@bgAlpha = "0";
            xml.@bgColor = "000000";
            xml.@showBorder = "0";
            xml.@showAlternateHGridColor = "0";
            xml.@canvasBgAlpha = "0";
            xml.@canvasBorderThickness = "0";
            xml.@plotFillColor = ThemeManager.CHART_QUOTE_HISTORICAL_DISPLAY_AREA_COLOR;
            xml.@plotFillAlpha = ThemeManager.CHART_QUOTE_HISTORICAL_DISPLAY_AREA_ALPHA;
            xml.@plotGradientColor = ThemeManager.CHART_QUOTE_HISTORICAL_DISPLAY_AREA_GRADIENT_COLOR;
            xml.@showPlotBorder = "0";
            xml.@adjustDiv = "0";
            xml.@forceDecimals = "1";
            xml.@decimals = "2";
            xml.@formatNumberScale = "0";
            xml.@yAxisValuesPadding = "10";
        }
        private function addFontChartAttribute(xml:XML):void{
            xml.@baseFontColor = ThemeManager.STATIC_LABEL_COLOR.toString(16);
            xml.@baseFont = ThemeManager.DEFAULT_FONT_NAME;
            xml.@baseFontSize = ThemeManager.CHART_QUOTE_HISTORICAL_DISPLAY_FONT_SIZE;
        }
        override protected function getChartStyle():XML{
            var xml:XML = super.getChartStyle();
            var tooltipStyleXml:XML = BASE_STYLE_STYLE_XML.copy();
            tooltipStyleXml.@name = "tooltipFont";
            tooltipStyleXml.@type = "font";
            tooltipStyleXml.@size = ThemeManager.CHART_PORFOLIO_COLUMN_TOOLTIP_FONT_SIZE;
            var tooltipApplyXml:XML = BASE_STYLE_APPLY_XML.copy();
            tooltipApplyXml.@toObject = "ToolTip";
            tooltipApplyXml.@styles = "tooltipFont";
            xml.definition.appendChild(tooltipStyleXml);
            xml.application.appendChild(tooltipApplyXml);
            return (xml);
        }
        private function isShowValue(index:int, length:int, step:int):Boolean{
            if (length <= this.maxColumn){
                return (true);
            };
            if ((((index == 0)) || ((index == (length - 1))))){
                return (true);
            };
            var calLength:* = (length - 1);
            var calMaxColumn:* = (this.splitColumn - 1);
            var spread:int = (calLength / calMaxColumn);
            var mod:int = (calLength % calMaxColumn);
            var adder:int = (((((calMaxColumn - mod) + 1) > step)) ? 0 : ((mod - calMaxColumn) + step));
            var value:int = ((step * spread) + adder);
            if (index == value){
                return (true);
            };
            return (false);
        }
        public function get width():Number{
            return (this._width);
        }
        public function set width(value:Number):void{
            this._width = value;
        }

        DATE_FORMAT.setDateTimePattern("dd MMM");
    }
}//package com.settrade.streaming5.utils.chart 
﻿package com.settrade.streaming5.utils.chart {
    import com.settrade.streaming5.utils.*;
    import com.settrade.log.logger.*;

    public class PortfolioColumnChartXmlGenerator extends ChartXmlGenerator {

        protected static const MAX_RECORD:int = 50;

        private static var logger:Logger = new Logger(prototype.constructor);

        public function PortfolioColumnChartXmlGenerator(){
            super();
        }
        override protected function addDefaultChartAttribute(xml:XML):void{
            super.addDefaultChartAttribute(xml);
            this.addStaticChartAttirbute(xml);
            this.addFontChartAttribute(xml);
            this.addTooltipChartAttribute(xml);
        }
        override public function createChartFromData(chartDataList:Array):XML{
            if (chartDataList.length > MAX_RECORD){
                chartDataList.sort(this.onSortChartData);
                chartDataList = chartDataList.slice(0, MAX_RECORD);
            };
            chartDataList.sortOn("value", (Array.NUMERIC | Array.DESCENDING));
            return (super.createChartFromData(chartDataList));
        }
        private function onSortChartData(chartData1:ChartData, chartData2:ChartData):Number{
            return ((Math.abs(chartData1.value) - Math.abs(chartData2.value)));
        }
        private function addStaticChartAttirbute(xml:XML):void{
            xml.@numberSuffix = "%";
            xml.@animation = "0";
            xml.@showLabels = "0";
            xml.@showValues = "0";
            xml.@bgAlpha = "0";
            xml.@bgColor = "000000";
            xml.@borderAlpha = "0";
            xml.@canvasBgAlpha = "0";
            xml.@showAlternateHGridColor = "0";
            xml.@showPlotBorder = "0";
            xml.@canvasBorderThickness = "1";
            xml.@zeroPlaneThickness = "1";
            xml.@divLineIsDashed = "1";
            xml.@divLineDashLen = "3";
            xml.@divLineDashGap = "2";
            xml.@divLineThickness = "1";
            xml.@plotGradientColor = "";
        }
        private function addFontChartAttribute(xml:XML):void{
            xml.@baseFontColor = ThemeManager.STATIC_LABEL_COLOR.toString(16);
            xml.@baseFont = ThemeManager.DEFAULT_FONT_NAME;
            xml.@baseFontSize = ThemeManager.CHART_PORFOLIO_COLUMN_FONT_SIZE;
        }
        private function addTooltipChartAttribute(xml:XML):void{
            xml.@toolTipBgColor = "000000";
            xml.@toolTipBorderColor = "FFFFFF";
        }
        override protected function getChartStyle():XML{
            var xml:XML = super.getChartStyle();
            var tooltipStyleXml:XML = BASE_STYLE_STYLE_XML.copy();
            tooltipStyleXml.@name = "tooltipFont";
            tooltipStyleXml.@type = "font";
            tooltipStyleXml.@size = ThemeManager.CHART_PORFOLIO_COLUMN_TOOLTIP_FONT_SIZE;
            var tooltipApplyXml:XML = BASE_STYLE_APPLY_XML.copy();
            tooltipApplyXml.@toObject = "ToolTip";
            tooltipApplyXml.@styles = "tooltipFont";
            xml.definition.appendChild(tooltipStyleXml);
            xml.application.appendChild(tooltipApplyXml);
            return (xml);
        }
        override protected function createSetDataXML(chartData:ChartData):XML{
            var xml:XML = super.createSetDataXML(chartData);
            var color:String = "";
            if (chartData.value > 0){
                color = ThemeManager.CHART_PORFOLIO_COLUMN_PLOT_POSITIVE_COLOR;
            } else {
                if (chartData.value < 0){
                    color = ThemeManager.CHART_PORFOLIO_COLUMN_PLOT_NEGATIVE_COLOR;
                };
            };
            xml.@color = color;
            return (xml);
        }

    }
}//package com.settrade.streaming5.utils.chart 
﻿package com.settrade.streaming5.utils.chart {

    public class ChartData {

        protected var _label:String;
        protected var _value:Number;

        public function ChartData(label:String, value:Number){
            super();
            this._label = label;
            this._value = value;
        }
        public function get label():String{
            return (this._label);
        }
        public function get value():Number{
            return (this._value);
        }

    }
}//package com.settrade.streaming5.utils.chart 
﻿package com.settrade.streaming5.utils {
    import com.settrade.streaming5.enumuration.*;
    import flash.geom.*;

    public class ScreenTypeUtils {

        private static const WIDE_RATIO:Number = 1.93846153846154;
        private static const NORMAL_RATIO:Number = 1.56716417910448;
        private static const HEADER_MARGIN:Number = 33;
        private static const CANVAS_MARGIN:Number = 0;
        private static const INNER_MARGIN_X:Number = 1.5;
        private static const INNER_MARGIN_Y:Number = 1;
        private static const WIDGET_WIDTH:Number = 419;
        private static const WIDGET_HEIGHT:Number = 153;

        public function ScreenTypeUtils(){
            super();
        }
        public static function getScreenType(width:Number, height:Number):ScreenType{
            var ratio:Number = (width / height);
            var errorWide:Number = Math.abs((ratio - WIDE_RATIO));
            var errorNormal:Number = Math.abs((ratio - NORMAL_RATIO));
            if (errorWide <= errorNormal){
                return (ScreenType.WIDE);
            };
            return (ScreenType.NORMAL);
        }
        public static function getScreenSize(width:Number, height:Number):Rectangle{
            var gridWidth:int = Math.floor((width / WIDGET_WIDTH));
            var gridHeight:int = Math.floor(((height - HEADER_MARGIN) / WIDGET_HEIGHT));
            return (new Rectangle(0, 0, gridWidth, gridHeight));
        }

    }
}//package com.settrade.streaming5.utils 
﻿package com.settrade.streaming5.utils {
    import com.settrade.streaming5.utils.datetime.*;
    import flash.globalization.*;

    public class StreamingTimeFormatter {

        public static var FULL_DATE_FORMAT:IStreamingDateTimeFormatter = new LongDateTimeFormatter();
        public static var DATE_SLASH_FORMAT:IStreamingDateTimeFormatter = new DateSlashFormatter();
        public static var DATE_TIME_FORMAT:IStreamingDateTimeFormatter = new FullDateTimeFormatter();
        public static var MONTH_FORMAT:IStreamingDateTimeFormatter = new MonthFormatter();
        public static var MONTH_FORMAT_SHORT:DateTimeFormatter = new DateTimeFormatter("en-US");
        public static var TIME_FORMAT:DateTimeFormatter = new DateTimeFormatter("en-US");
        public static var HEADER_FORMAT:IStreamingDateTimeFormatter = new HeaderDateTimerFormatter();

        public function StreamingTimeFormatter(){
            super();
        }
        MONTH_FORMAT_SHORT.setDateTimePattern("dd/MM");
        TIME_FORMAT.setDateTimePattern("HH:mm:ss");
    }
}//package com.settrade.streaming5.utils 
﻿package com.settrade.streaming5.utils {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.widget.config.*;
    import com.settrade.streaming5.event.*;
    import com.settrade.streaming5.message.feed.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.message.response.instrumentlist.*;
    import com.settrade.streaming5.service.*;
    import com.settrade.streaming5.dispatcher.*;

    public class TickerFilter {

        protected var config:TickerConfig;
        protected var marketInstrumentIdList:Array;
        protected var isReady:Boolean;
        protected var requestId:Number;

        public function TickerFilter(){
            super();
            this.isReady = true;
        }
        public function startService():void{
            this.readConfig();
            MessageDispatcher.getInstance().addEventListener(MessageReceiveEvent.INSTRUMENT_LIST, this.onReceiveInstrumentList);
        }
        public function stopService():void{
            InstrumentListService.getInstance().unregistSource(this);
            MessageDispatcher.getInstance().removeEventListener(MessageReceiveEvent.INSTRUMENT_LIST, this.onReceiveInstrumentList);
        }
        private function readConfig():void{
            if (this.config != null){
                if (((((!(this.config.isCriteria)) && (this.config.isSet))) && (this.config.isMarketBy))){
                    this.isReady = false;
                    this.loadInstrumentList();
                } else {
                    this.isReady = true;
                };
            };
        }
        public function loadConfig(config:TickerConfig):void{
            InstrumentListService.getInstance().unregistSource(this);
            this.config = config;
            this.readConfig();
        }
        private function loadInstrumentList():void{
            MessageDispatcher.getInstance().addEventListener(MessageReceiveEvent.INSTRUMENT_LIST, this.onReceiveInstrumentList);
            InstrumentListService.getInstance().getInstrumentList(this.config.listName, "", this.config.boardType, this.config.boardSubType, this);
        }
        private function onReceiveInstrumentList(e:MessageReceiveEvent):void{
            var message:InstrumentListResponseMessage = InstrumentListResponseMessage(e.message);
            if (this.config != null){
                if ((((((message.listName == this.config.listName)) && ((message.boardType == this.config.boardType)))) && ((message.boardSubType == this.config.boardSubType)))){
                    this.marketInstrumentIdList = message.instrumentIdList;
                    this.isReady = true;
                };
            };
        }
        public function isValidTicker(message:MarketTickerFeedMessage):Boolean{
            if (this.config == null){
                return (true);
            };
            if (!this.isReady){
                return (false);
            };
            if (this.config.isCriteria){
                return (this.isValidTickerCritaria(message));
            };
            return (this.isValidTickerMarket(message));
        }
        private function isValidTickerCritaria(message:MarketTickerFeedMessage):Boolean{
            if (((((!(this.config.isFavourite)) && (!(this.config.isValue)))) && (!(this.config.isVolume)))){
                return (true);
            };
            return (((((this.isValidTickerFavorite(message)) && (this.isValidTickerValue(message)))) && (this.isValidTickerVolume(message))));
        }
        private function isValidTickerVolume(message:MarketTickerFeedMessage):Boolean{
            if (!this.config.isVolume){
                return (true);
            };
            return ((message.volume >= this.config.volume));
        }
        private function isValidTickerValue(message:MarketTickerFeedMessage):Boolean{
            if (!this.config.isValue){
                return (true);
            };
            return (((message.price * message.volume) >= this.config.value));
        }
        private function isValidTickerFavorite(message:MarketTickerFeedMessage):Boolean{
            if (!this.config.isFavourite){
                return (true);
            };
            var favouriteList:Array = FavouriteListManager.getInstance().getFavouriteListByIndex(this.config.favouriteIndex);
            return ((favouriteList.indexOf(message.instrumentId) > -1));
        }
        private function isValidTickerMarket(message:MarketTickerFeedMessage):Boolean{
            return (((this.isValidSet(message)) || (this.isValidTfex(message))));
        }
        private function isValidSet(message:MarketTickerFeedMessage):Boolean{
            if (!this.config.isSet){
                return (false);
            };
            if (!message.instrumentType.isEquity()){
                return (false);
            };
            if (((!(this.config.isSecuritiesType)) && (!(this.config.isMarketBy)))){
                return (true);
            };
            return (((this.isValidSetRanking(message)) && (this.isValidSetSecuritiesType(message))));
        }
        private function isValidSetRanking(message:MarketTickerFeedMessage):Boolean{
            if (!this.config.isMarketBy){
                return (true);
            };
            return ((this.marketInstrumentIdList.indexOf(message.instrumentId) > -1));
        }
        private function isValidSetSecuritiesType(message:MarketTickerFeedMessage):Boolean{
            if (!this.config.isSecuritiesType){
                return (true);
            };
            if (this.config.isSecuritiesTypeAll){
                return (true);
            };
            var tickerType:EquityTickerSubType = EquityTickerSubType(message.tickerSubType);
            if (((!(this.config.isSecuritiesTypeCommon)) && (tickerType.isCommon()))){
                return (false);
            };
            if (((!(this.config.isSecuritiesTypeDerivativesWarrant)) && (tickerType.isDerivativesWarrant()))){
                return (false);
            };
            if (((!(this.config.isSecuritiesTypeForeign)) && (tickerType.isForeign()))){
                return (false);
            };
            if (((!(this.config.isSecuritiesTypeWarrant)) && (tickerType.isWarrant()))){
                return (false);
            };
            if (((!(this.config.isSecuritiesTypeEtf)) && (tickerType.isETF()))){
                return (false);
            };
            if (((!(this.config.isSecuritiesTypeConvertible)) && (tickerType.isConvertible()))){
                return (false);
            };
            if (((!(this.config.isSecuritiesTypePreferred)) && (tickerType.isPreferred()))){
                return (false);
            };
            if (((!(this.config.isSecuritiesTypeUnitTrust)) && (tickerType.isUnitTrust()))){
                return (false);
            };
            return (true);
        }
        private function isValidTfex(message:MarketTickerFeedMessage):Boolean{
            if (!this.config.isTfex){
                return (false);
            };
            if (!message.instrumentType.isDerivatives()){
                return (false);
            };
            if (this.config.isTfexAll){
                return (true);
            };
            return (((this.isValidFutures(message)) || (this.isValidOptions(message))));
        }
        private function isValidOptions(message:MarketTickerFeedMessage):Boolean{
            if (!this.config.isOptions){
                return (false);
            };
            return (message.instrumentType.isOptions());
        }
        private function isValidFutures(message:MarketTickerFeedMessage):Boolean{
            if (!this.config.isFutures){
                return (false);
            };
            if (!message.instrumentType.isFutures()){
                return (false);
            };
            if (this.config.isFuturesAll){
                return (true);
            };
            var tickerType:DerivativesTickerSubType = DerivativesTickerSubType(message.tickerSubType);
            if (((!(this.config.isFuturesCurrency)) && (tickerType.isCurrency()))){
                return (false);
            };
            if (((!(this.config.isFuturesEnergy)) && (tickerType.isEnergy()))){
                return (false);
            };
            if (((!(this.config.isFuturesEquityIndex)) && (tickerType.isIndex()))){
                return (false);
            };
            if (((!(this.config.isFuturesMetal)) && (tickerType.isMetal()))){
                return (false);
            };
            if (((!(this.config.isFuturesInterestRate)) && (tickerType.isInterest()))){
                return (false);
            };
            if (((!(this.config.isFuturesSingleStock)) && (tickerType.isStock()))){
                return (false);
            };
            return (true);
        }

    }
}//package com.settrade.streaming5.utils 
﻿package com.settrade.streaming5.utils.adapter {
    import fl.controls.*;
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.utils.*;
    import flash.events.*;
    import com.settrade.streaming5.manager.*;
    import com.settrade.streaming5.config.*;
    import flash.ui.*;

    public class AccountShortcutAdapter {

        private static var instance:AccountShortcutAdapter;

        public function AccountShortcutAdapter(){
            super();
        }
        public static function getInstance():AccountShortcutAdapter{
            if (instance == null){
                instance = new (AccountShortcutAdapter)();
            };
            return (instance);
        }

        private function get config():ShortcutAccountConfig{
            return (ShortcutAccountConfig(SettingManager.getInstance().getConfig(ConfigType.SHORTCUT_ACCOUNT)));
        }
        public function apply(textInput:TextInput):void{
            var textInput:* = textInput;
            textInput.addEventListener(Event.CHANGE, function (e:Event):void{
                var accountNo:String = getShortcut(textInput.text);
                if (accountNo == ""){
                    TooltipService.getInstance().hideTooltip();
                } else {
                    TooltipService.getInstance().showVerticalTooltip(textInput, ((textInput.text + " = ") + accountNo));
                };
            }, false, 1);
            textInput.addEventListener(KeyboardEvent.KEY_DOWN, function (e:KeyboardEvent):void{
                var accountNo:String;
                if ((((e.charCode == Keyboard.ENTER)) || ((e.charCode == Keyboard.TAB)))){
                    accountNo = getShortcut(textInput.text);
                    if (accountNo != ""){
                        textInput.text = accountNo;
                        TooltipService.getInstance().hideTooltip();
                    };
                };
            }, false, 1);
            textInput.addEventListener(FocusEvent.FOCUS_OUT, function (e:FocusEvent):void{
                var accountNo:String = getShortcut(textInput.text);
                if (accountNo != ""){
                    textInput.text = accountNo;
                    TooltipService.getInstance().hideTooltip();
                };
            }, false, 1);
        }
        private function getShortcut(text:String):String{
            var shortcut:ShortcutAccount;
            for each (shortcut in this.config.shortCutList) {
                if (shortcut.key == text){
                    return (shortcut.account);
                };
            };
            return ("");
        }

    }
}//package com.settrade.streaming5.utils.adapter 
﻿package com.settrade.streaming5.utils {
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import flash.utils.*;
    import flash.geom.*;
    import com.settrade.log.logger.*;

    public class TooltipService {

        private static var logger:Logger = new Logger(prototype.constructor);
        protected static var instance:TooltipService;

        public var isShiftContent:Boolean;
        public var isShiftTooltip:Boolean;
        var isInitTooltip:Boolean;
        var stage:Stage;
        var tooltip;

        public function TooltipService(){
            super();
            this.isInitTooltip = false;
            this.isShiftContent = true;
            this.isShiftTooltip = true;
            this.stage = null;
            this.tooltip = null;
        }
        public static function getInstance():TooltipService{
            if (instance == null){
                instance = new (TooltipService)();
            };
            return (instance);
        }

        private function initialTooltip(src:DisplayObject):void{
            var tooltipClass:Class;
            if (src.stage != null){
                this.stage = src.stage;
                tooltipClass = Class(getDefinitionByName("com.settrade.streaming5.page.component.tooltip.Tooltip"));
                this.tooltip = new (tooltipClass)();
                this.tooltip.visible = true;
                this.stage.addChild(this.tooltip);
                this.isInitTooltip = true;
            };
        }
        public function showTooltipWithLocalPositionAndDirection(src:DisplayObject, text:String, localPosition:Point, direction:Direction){
            if (!this.isInitTooltip){
                this.initialTooltip(src);
            };
            var stageCoordinate:Point = src.localToGlobal(new Point(localPosition.x, localPosition.y));
            this.tooltip.visible = true;
            this.tooltip.text = text;
            this.tooltip.direction = direction;
            this.tooltip.x = stageCoordinate.x;
            this.tooltip.y = stageCoordinate.y;
            this.tooltip.contentPosition = 0.5;
            this.tooltip.redraw();
            if (this.isShiftContent){
                this.shiftContentIfExceedBorder(direction);
            };
            if (this.isShiftTooltip){
                this.shiftTooltipIfExceedBorder(src, direction);
            };
        }
        public function showTooltipWithDirection(src:DisplayObject, text:String, direction:Direction):void{
            this.showTooltipWithLocalPositionAndDirection(src, text, this.calculateLocalPositionByDirection(src, direction), direction);
        }
        private function calculateLocalPositionByDirection(src:DisplayObject, direction:Direction):Point{
            var noScaleWidth:Number = (src.width / src.scaleX);
            var noScaleHeight:Number = (src.height / src.scaleY);
            switch (direction){
                case Direction.UP:
                    return (new Point((noScaleWidth / 2), 0));
                case Direction.DOWN:
                    return (new Point((noScaleWidth / 2), noScaleHeight));
                case Direction.LEFT:
                    return (new Point(0, (noScaleHeight / 2)));
                case Direction.RIGHT:
                    return (new Point(noScaleWidth, (noScaleHeight / 2)));
                default:
                    return (new Point(0, 0));
            };
        }
        private function shiftContentIfExceedBorder(direction:Direction):void{
            var boundary:Rectangle = this.tooltip.getBounds(this.stage);
            switch (direction){
                case Direction.UP:
                case Direction.DOWN:
                    if (boundary.x < 0){
                        this.tooltip.contentPosition = 0;
                        this.tooltip.redraw();
                    } else {
                        if ((boundary.x + boundary.width) > this.stage.stageWidth){
                            this.tooltip.contentPosition = 1;
                            this.tooltip.redraw();
                        };
                    };
                    break;
                case Direction.LEFT:
                case Direction.RIGHT:
                    if (boundary.y < 0){
                        this.tooltip.contentPosition = 0;
                        this.tooltip.redraw();
                    } else {
                        if ((boundary.y + boundary.height) > this.stage.stageHeight){
                            this.tooltip.contentPosition = 1;
                            this.tooltip.redraw();
                        };
                    };
                    break;
            };
        }
        private function shiftTooltipIfExceedBorder(src:DisplayObject, direction:Direction):void{
            var boundary:Rectangle = this.tooltip.getBounds(this.stage);
            var sourceBoundary:Rectangle = src.getBounds(this.stage);
            var isExceedLeftBorder = (boundary.x < 0);
            var isExceedRightBorder = ((boundary.x + boundary.width) > this.stage.stageWidth);
            var isExceedTopBorder = (boundary.y < 0);
            var isExceedBottomBorder = ((boundary.y + boundary.height) > this.stage.stageHeight);
            switch (direction){
                case Direction.UP:
                case Direction.DOWN:
                    if (((isExceedLeftBorder) && (!(isExceedRightBorder)))){
                        this.tooltip.x = (sourceBoundary.x + sourceBoundary.width);
                    } else {
                        if (((isExceedRightBorder) && (!(isExceedLeftBorder)))){
                            this.tooltip.x = sourceBoundary.x;
                        };
                    };
                    break;
                case Direction.LEFT:
                case Direction.RIGHT:
                    if (((isExceedTopBorder) && (!(isExceedBottomBorder)))){
                        this.tooltip.y = (sourceBoundary.y + sourceBoundary.height);
                    } else {
                        if (((isExceedBottomBorder) && (!(isExceedTopBorder)))){
                            this.tooltip.y = sourceBoundary.y;
                        };
                    };
                    break;
            };
        }
        public function showTooltip(src:DisplayObject, text:String):void{
            this.showHorizontalTooltip(src, text);
        }
        public function showHorizontalTooltip(src:DisplayObject, text:String):void{
            this.showTooltipWithDirection(src, text, this.suggestHorizontalDirection(src));
        }
        public function showVerticalTooltip(src:DisplayObject, text:String):void{
            this.showTooltipWithDirection(src, text, this.suggestVerticalDirection(src));
        }
        private function suggestVerticalDirection(src:DisplayObject):Direction{
            var bound:Rectangle = src.getBounds(src.stage);
            var globalOrigin:Point = new Point((bound.x + (bound.width / 2)), (bound.y + (bound.height / 2)));
            if (globalOrigin.y > (src.stage.stageHeight / 2)){
                return (Direction.UP);
            };
            return (Direction.DOWN);
        }
        private function suggestHorizontalDirection(src:DisplayObject):Direction{
            var bound:Rectangle = src.getBounds(src.stage);
            var globalOrigin:Point = new Point((bound.x + (bound.width / 2)), (bound.y + (bound.height / 2)));
            if (globalOrigin.x > (src.stage.stageWidth / 2)){
                return (Direction.LEFT);
            };
            return (Direction.RIGHT);
        }
        public function hideTooltip():void{
            if (this.tooltip != null){
                this.tooltip.visible = false;
                this.tooltip.clear();
            };
        }

    }
}//package com.settrade.streaming5.utils 
﻿package com.settrade.streaming5.utils {
    import flash.display.*;
    import flash.text.*;
    import fl.motion.*;
    import com.settrade.log.logger.*;

    public class ThemeManager {

        public static var STATIC_LABEL_COLOR:uint = 0xFFFFFF;
        public static var LOSER_COLOR:uint = 15801115;
        public static var GAINER_COLOR:uint = 0x2CAE00;
        public static var UNCHANGED_COLOR:uint = 14335047;
        public static var WHITE_COLOR:uint = 0xFFFFFF;
        public static var LABEL_COLOR:uint = 0xCCCCCC;
        public static var LABEL_BLACK_COLOR:uint = 0;
        public static var LABEL_GRAY_COLOR:uint = 0xCCCCCC;
        public static var LABEL_DATA_TOPIC:uint = 0x999999;
        public static var LABEL_CUSTOMER_DATA:uint = 14335047;
        public static var BUY_VOLUME_COLOR:uint = 1947104;
        public static var SELL_VOLUME_COLOR:uint = 14228683;
        public static var MATCHED_VOLUME_COLOR:uint = 13395711;
        public static var INCREASED_VOLUME_COLOR:uint = 0x5FB700;
        public static var CANCELLED_VOLUME_COLOR:uint = 14552065;
        public static var UNCHANGED_VOLUME_COLOR:uint = 14335047;
        public static var ORDER_BUY_COLOR:uint = 304126;
        public static var ORDER_SELL_COLOR:uint = 14893729;
        public static var ORDER_SHORT_COLOR:uint = 13351423;
        public static var ORDER_COVER_COLOR:uint = 11010047;
        public static var LABEL_BLINK_OVERLAY_COLOR:uint = 7258345;
        public static var LABEL_INDEX_NAME_COLOR:uint = 0xCCCCCC;
        public static var SYMBOL_INPUTBOX_COLOR:uint = 0x666666;
        public static var BACKGROUND_COLOR:uint = 0;
        public static var HEADER_BACKGROUND_COLOR:uint = 0;
        public static var HEADERPAGE_BACKGROUND_COLOR:uint = 0;
        public static var HEADERPAGE_COLOR:uint = 0xFFFFFF;
        public static var SEPERATOR_COLOR:uint = 0x666666;
        public static var HEADERPAGE_SEPERATOR:uint = 0;
        public static var HEADERPAGE_BGGRADIENT_ENABLE:Boolean = true;
        public static var BACKGROUND_COLOR_OPACITY:Number = 1;
        public static var HEADER_BACKGROUND_COLOR_OPACITY:Number = 1;
        public static var HEADERPAGE_BACKGROUND_COLOR_OPACITY:Number = 1;
        public static var HEADERPAGE_COLOR_OPACITY:Number = 1;
        public static var ORDER_STATUS_BUY_BG_COLOR:uint = 6707;
        public static var ORDER_STATUS_SELL_BG_COLOR:uint = 0x320033;
        public static var ORDER_STATUS_SHORT_BG_COLOR:uint = 5651812;
        public static var ORDER_STATUS_COVER_BG_COLOR:uint = 411714;
        public static var ORDER_STATUS_SUCCESS_BG_COLOR:uint = 0x2B4200;
        public static var ORDER_STATUS_WARNING_BG_COLOR:uint = 5126416;
        public static var ORDER_STATUS_FAILED_BG_COLOR:uint = 5047300;
        public static var defaultFont:TextFormat;
        public static var defaultVolumeFont:TextFormat;
        public static var defaultTextInputFont:TextFormat;
        public static var defaultTextInputAlignRightFont:TextFormat;
        public static var defaultDropdownFont:TextFormat;
        public static var defaultDisabledDropdownFont:TextFormat;
        public static var defaultDropdownSeparatorFont:TextFormat;
        public static var defaultDynamicDataFont:TextFormat;
        public static var defaultHeaderFont:TextFormat;
        public static var defaultAlertFont:TextFormat;
        public static var defaultButtonFont:TextFormat;
        public static var defaultDisabledButtonFont:TextFormat;
        public static var defaultPopupFont:TextFormat;
        public static var defaultOrderStatusFont:TextFormat;
        public static var defaultTableHeaderFont:TextFormat;
        public static var defaultLinkFont:TextFormat;
        public static var defaultWidgetListFont:TextFormat;
        public static var defaultTemplateListFont:TextFormat;
        public static var DEFAULT_FONT_NAME = "Arial";
        public static var GOTHIC_FONT_NAME = "CenturyGothic";
        public static var TABLE_HOVER_CELL_COLOR:uint = 0x7F7F7F;
        public static var TABLE_SELECTED_CELL_COLOR:uint = 0x7F7F7F;
        public static var CHART_QUOTE_HISTORICAL_SELECTOR_COLOR:String = "666666";
        public static var CHART_QUOTE_HISTORICAL_SELECTOR_FONT_SIZE:uint = 12;
        public static var CHART_QUOTE_HISTORICAL_SELECTOR_FONT_COLOR:uint = 0;
        public static var CHART_VOLUME_BY_PRICE_BUY_COLOR:String = "0x1DB5E0,0x67CDEB,0x1DB5E0";
        public static var CHART_VOLUME_BY_PRICE_SELL_COLOR:String = "0xD91CCB,0xEA5EDF,0xD91CCB";
        public static var CHART_VOLUME_BY_PRICE_FONT_SIZE:uint = 14;
        public static var CHART_VOLUME_BY_PRICE_TOOLTIP_FONT_SIZE:uint = 12;
        public static var CHART_VOLUME_BY_PRICE_XAXIS_FONT_SIZE:uint = 10;
        public static var CHART_VOLUME_BY_PRICE_YAXIS_FONT_SIZE:uint = 10;
        public static var CHART_PORFOLIO_PIE_COLOR:String = "04a3fe,DE0C01,e342a1,DABC47,2CAE00,FF9900";
        public static var CHART_PORFOLIO_PIE_LEGEND_BACKGROUND_COLOR:uint = 0x252525;
        public static var CHART_PORFOLIO_PIE_FONT_SIZE:uint = 12;
        public static var CHART_PORFOLIO_PIE_TOOLTIP_FONT_SIZE:uint = 12;
        public static var CHART_PORFOLIO_PIE_LEGEND_FONT_SIZE:uint = 10;
        public static var CHART_PORFOLIO_COLUMN_FONT_SIZE:uint = 10;
        public static var CHART_PORFOLIO_COLUMN_TOOLTIP_FONT_SIZE:uint = 12;
        public static var CHART_PORFOLIO_COLUMN_PLOT_POSITIVE_COLOR:String = "2CAE00,539D00";
        public static var CHART_PORFOLIO_COLUMN_PLOT_NEGATIVE_COLOR:String = "DE0C01,D20000";
        public static var CHART_QUOTE_HISTORICAL_SELECTOR_SLIDER_OVERLAY_COLOR:uint = 0x666666;
        public static var CHART_QUOTE_HISTORICAL_SELECTOR_SLIDER_OVERLAY_ALPHA:Number = 0.5;
        public static var CHART_QUOTE_HISTORICAL_DISPLAY_COLUMN_PRIMARY_COLOR:String = "0066FF";
        public static var CHART_QUOTE_HISTORICAL_DISPLAY_COLUMN_SECONDARY_COLOR:String = "0099FF";
        public static var CHART_QUOTE_HISTORICAL_DISPLAY_AREA_GRADIENT_COLOR:String = "67CDEB";
        public static var CHART_QUOTE_HISTORICAL_DISPLAY_AREA_COLOR:String = "0F5A71";
        public static var CHART_QUOTE_HISTORICAL_DISPLAY_AREA_ALPHA:String = "80";
        public static var CHART_QUOTE_HISTORICAL_DISPLAY_AREA_BORDER_COLOR:String = "333333";
        public static var CHART_QUOTE_HISTORICAL_DISPLAY_AREA_PLOT_BORDER_COLOR:String = "AAAAAA";
        public static var CHART_QUOTE_HISTORICAL_DISPLAY_FONT_SIZE:uint = 10;
        public static var CHART_INTRADAY_AREA_ALPHA:String = "70";
        public static var CHART_INTRADAY_FONT_SIZE:uint = 10;
        public static var CHART_INTRADAY_CLOSE_COLOR:String = "DABC47";
        public static var CHART_INTRADAY_AREA_POSITIVE_GRADIENT_COLOR:String = "2CAE00";
        public static var CHART_INTRADAY_AREA_POSITIVE_COLOR:String = "155300";
        public static var CHART_INTRADAY_AREA_NEGATIVE_GRADIENT_COLOR:String = "DE0C01";
        public static var CHART_INTRADAY_AREA_NEGATIVE_COLOR:String = "6F0500";
        public static var CHART_INTRADAY_AREA_NEUTRAL_GRADIENT_COLOR:String = "DABC47";
        public static var CHART_INTRADAY_AREA_NEUTRAL_AREA_COLOR:String = "756217";
        private static var logger:Logger = new Logger(prototype.constructor);

        public function ThemeManager(){
            super();
            this.initialTextFormat();
        }
        public static function initialTextFormatWithFontSize(fontSize:int):void{
            defaultFont = new TextFormat();
            defaultFont.font = DEFAULT_FONT_NAME;
            defaultFont.size = fontSize;
            defaultFont.bold = true;
            defaultFont.rightMargin = 3;
            defaultFont.color = ThemeManager.LABEL_COLOR;
            defaultVolumeFont = new TextFormat();
            defaultVolumeFont.font = DEFAULT_FONT_NAME;
            defaultVolumeFont.size = fontSize;
            defaultVolumeFont.bold = true;
            defaultVolumeFont.rightMargin = 3;
            defaultVolumeFont.color = ThemeManager.UNCHANGED_VOLUME_COLOR;
            defaultDropdownFont = new TextFormat();
            defaultDropdownFont.font = DEFAULT_FONT_NAME;
            defaultDropdownFont.size = 13;
            defaultDropdownFont.bold = true;
            defaultDropdownFont.rightMargin = 3;
            defaultDropdownFont.color = ThemeManager.WHITE_COLOR;
            defaultDisabledDropdownFont = new TextFormat();
            defaultDisabledDropdownFont.font = DEFAULT_FONT_NAME;
            defaultDisabledDropdownFont.size = 13;
            defaultDisabledDropdownFont.bold = true;
            defaultDisabledDropdownFont.rightMargin = 3;
            defaultDisabledDropdownFont.color = ThemeManager.LABEL_GRAY_COLOR;
            defaultDropdownSeparatorFont = new TextFormat();
            defaultDropdownSeparatorFont.font = DEFAULT_FONT_NAME;
            defaultDropdownSeparatorFont.align = TextFormatAlign.CENTER;
            defaultDropdownSeparatorFont.size = 13;
            defaultDropdownSeparatorFont.bold = true;
            defaultDropdownSeparatorFont.color = ThemeManager.LABEL_GRAY_COLOR;
            defaultTextInputFont = new TextFormat();
            defaultTextInputFont.font = DEFAULT_FONT_NAME;
            defaultTextInputFont.size = 12;
            defaultTextInputFont.bold = true;
            defaultTextInputFont.color = ThemeManager.LABEL_BLACK_COLOR;
            defaultTextInputAlignRightFont = new TextFormat();
            defaultTextInputAlignRightFont.font = DEFAULT_FONT_NAME;
            defaultTextInputAlignRightFont.size = 12;
            defaultTextInputAlignRightFont.bold = true;
            defaultTextInputAlignRightFont.color = ThemeManager.LABEL_BLACK_COLOR;
            defaultTextInputAlignRightFont.align = "right";
            defaultButtonFont = new TextFormat();
            defaultButtonFont.font = DEFAULT_FONT_NAME;
            defaultButtonFont.size = 10;
            defaultButtonFont.bold = true;
            defaultButtonFont.color = ThemeManager.LABEL_BLACK_COLOR;
            defaultDisabledButtonFont = new TextFormat();
            defaultDisabledButtonFont.font = DEFAULT_FONT_NAME;
            defaultDisabledButtonFont.size = 10;
            defaultDisabledButtonFont.bold = true;
            defaultDisabledButtonFont.color = ThemeManager.LABEL_GRAY_COLOR;
            defaultDynamicDataFont = new TextFormat();
            defaultDynamicDataFont.font = DEFAULT_FONT_NAME;
            defaultDynamicDataFont.size = 11.5;
            defaultDynamicDataFont.rightMargin = 2;
            defaultDynamicDataFont.bold = true;
            defaultDynamicDataFont.color = ThemeManager.LABEL_COLOR;
            defaultDynamicDataFont.align = TextFormatAlign.RIGHT;
            defaultHeaderFont = new TextFormat();
            defaultHeaderFont.font = DEFAULT_FONT_NAME;
            defaultHeaderFont.size = 10;
            defaultHeaderFont.color = ThemeManager.WHITE_COLOR;
            defaultHeaderFont.bold = true;
            defaultHeaderFont.align = TextFormatAlign.CENTER;
            defaultHeaderFont.leftMargin = 0;
            defaultHeaderFont.rightMargin = 0;
            defaultAlertFont = new TextFormat();
            defaultAlertFont.font = DEFAULT_FONT_NAME;
            defaultAlertFont.size = 12;
            defaultAlertFont.color = ThemeManager.WHITE_COLOR;
            defaultAlertFont.bold = true;
            defaultPopupFont = new TextFormat();
            defaultPopupFont.font = DEFAULT_FONT_NAME;
            defaultPopupFont.size = fontSize;
            defaultPopupFont.color = ThemeManager.ORDER_BUY_COLOR;
            defaultPopupFont.bold = true;
            defaultOrderStatusFont = new TextFormat();
            defaultOrderStatusFont.font = DEFAULT_FONT_NAME;
            defaultOrderStatusFont.size = fontSize;
            defaultOrderStatusFont.color = ThemeManager.LABEL_COLOR;
            defaultOrderStatusFont.bold = true;
            defaultTableHeaderFont = new TextFormat();
            defaultTableHeaderFont.font = DEFAULT_FONT_NAME;
            defaultTableHeaderFont.size = 9;
            defaultTableHeaderFont.color = ThemeManager.WHITE_COLOR;
            defaultTableHeaderFont.bold = true;
            defaultTableHeaderFont.align = TextFormatAlign.CENTER;
            defaultTableHeaderFont.leftMargin = 0;
            defaultTableHeaderFont.rightMargin = 0;
            defaultLinkFont = new TextFormat();
            defaultLinkFont.font = DEFAULT_FONT_NAME;
            defaultLinkFont.bold = true;
            defaultLinkFont.underline = true;
            defaultLinkFont.color = 6737151;
            defaultLinkFont.size = 13;
            defaultWidgetListFont = new TextFormat();
            defaultWidgetListFont.font = DEFAULT_FONT_NAME;
            defaultWidgetListFont.size = fontSize;
            defaultWidgetListFont.bold = true;
            defaultWidgetListFont.align = TextFormatAlign.CENTER;
            defaultWidgetListFont.color = ThemeManager.LABEL_COLOR;
            defaultTemplateListFont = new TextFormat();
            defaultTemplateListFont.font = DEFAULT_FONT_NAME;
            defaultTemplateListFont.size = 14;
            defaultTemplateListFont.bold = true;
            defaultTemplateListFont.align = TextFormatAlign.CENTER;
            defaultTemplateListFont.color = 0x999999;
        }
        public static function getDefaultTextFormat(){
            return (defaultFont);
        }
        public static function getPriceTextColorByRef(input:Number, ref:Number):uint{
            var color:uint;
            if ((((ref == int.MIN_VALUE)) || ((input == int.MIN_VALUE)))){
                color = ThemeManager.LABEL_COLOR;
            } else {
                if (input == 0){
                    color = ThemeManager.LABEL_COLOR;
                } else {
                    if (input > ref){
                        color = ThemeManager.GAINER_COLOR;
                    } else {
                        if (input == ref){
                            color = ThemeManager.UNCHANGED_COLOR;
                        } else {
                            if (input < ref){
                                color = ThemeManager.LOSER_COLOR;
                            } else {
                                color = ThemeManager.LABEL_COLOR;
                            };
                        };
                    };
                };
            };
            return (color);
        }
        public static function getPriceTextColorByChange(chg:Number):uint{
            var color:uint;
            if (chg > 0){
                color = ThemeManager.GAINER_COLOR;
            } else {
                if (chg == 0){
                    color = ThemeManager.UNCHANGED_COLOR;
                } else {
                    if (chg < 0){
                        color = ThemeManager.LOSER_COLOR;
                    } else {
                        color = ThemeManager.LABEL_COLOR;
                    };
                };
            };
            return (color);
        }
        public static function getSideTextColor(side:String):uint{
            var color:uint;
            if (side == "B"){
                color = ThemeManager.BUY_VOLUME_COLOR;
            } else {
                if (side == "S"){
                    color = ThemeManager.SELL_VOLUME_COLOR;
                } else {
                    color = ThemeManager.LABEL_COLOR;
                };
            };
            return (color);
        }
        public static function getVolumeTextColorByRef(input:Number, ref:Number, totalVol:Number, totalVolRef:Number):uint{
            var color:uint;
            if (((isNaN(ref)) || (isNaN(totalVolRef)))){
                color = ThemeManager.UNCHANGED_COLOR;
            } else {
                if ((((input == 0)) || ((input == ref)))){
                    color = ThemeManager.UNCHANGED_COLOR;
                } else {
                    if (((((input - ref) == (totalVolRef - totalVol))) && (!((totalVolRef == totalVol))))){
                        color = ThemeManager.MATCHED_VOLUME_COLOR;
                    } else {
                        if (input > ref){
                            color = ThemeManager.INCREASED_VOLUME_COLOR;
                        } else {
                            if (input < ref){
                                color = ThemeManager.CANCELLED_VOLUME_COLOR;
                            } else {
                                color = ThemeManager.LABEL_COLOR;
                            };
                        };
                    };
                };
            };
            return (color);
        }
        public static function numberFormat(num:Object, decimalPrecision:Number=0, addCommaFlag:Boolean=false, signFlag:Boolean=false):String{
            var token:Array;
            var absInteger:String;
            var len:int;
            var txtInteger:String;
            var j:int;
            var i:*;
            var output:String = "";
            if (num === ""){
                return ("");
            };
            if (isNaN(Number(num))){
                return (String(num));
            };
            num = Number(num);
            if (num == int.MIN_VALUE){
                return (output);
            };
            output = num.toFixed(decimalPrecision);
            if ((((num === 0)) && ((decimalPrecision == 0)))){
                output = "0";
            };
            if (addCommaFlag){
                token = output.split(".");
                absInteger = "";
                if (token.length > 1){
                    absInteger = Math.abs(token[0]).toString();
                } else {
                    absInteger = Math.abs(parseInt(output)).toString();
                };
                len = absInteger.length;
                txtInteger = "";
                j = len;
                i = (len - 3);
                while (i > 0) {
                    txtInteger = (("," + absInteger.substring(i, (i + 3))) + txtInteger);
                    j = i;
                    i = (i - 3);
                };
                output = (absInteger.substring(0, j) + txtInteger);
                if (token.length > 1){
                    output = (output + ("." + token[1]));
                };
                if (num < 0){
                    output = ("-" + output);
                };
            };
            if (signFlag){
                if (num > 0){
                    output = ("+" + output);
                };
            };
            return (output);
        }
        public static function invertNumberFormat(input:String):Number{
            var pattern:RegExp = /,/g;
            var invertedStr:String = input.replace(pattern, "");
            var output:Number = parseFloat(invertedStr);
            return (output);
        }
        public static function getATOATCMPPrice(flag:uint, price:Number){
            if (flag == 0){
                return (price);
            };
            var result:String = "";
            switch (flag){
                case 1:
                    result = "MP";
                    break;
                case 2:
                    result = "ATO";
                    break;
                case 3:
                    result = "ATC";
                    break;
            };
            return (result);
        }
        public static function isWhitespace(ch:String):Boolean{
            return (Boolean((((((((((ch == "\r")) || ((ch == "\n")))) || ((ch == "\f")))) || ((ch == "\t")))) || ((ch == " ")))));
        }
        public static function trim(original:String):String{
            var characters:Array = original.split("");
            var i:Number = 0;
            while (i < characters.length) {
                if (isWhitespace(characters[i])){
                    characters.splice(i, 1);
                    i--;
                } else {
                    break;
                };
                i++;
            };
            i = (characters.length - 1);
            while (i >= 0) {
                if (isWhitespace(characters[i])){
                    characters.splice(i, 1);
                } else {
                    break;
                };
                i--;
            };
            return (characters.join(""));
        }
        public static function addComma(inputTxt:String):String{
            var isMinus:Boolean;
            var decimal:String;
            var count:int;
            var result:String;
            var i:int;
            var myPattern:RegExp = /,/g;
            var tmpInput:String = inputTxt.replace(myPattern, "");
            if (!isNaN(Number(tmpInput))){
                isMinus = Boolean((Number(tmpInput) < 0));
                if (isMinus){
                    tmpInput = tmpInput.substring(1, tmpInput.length);
                };
                decimal = "";
                if (tmpInput.indexOf(".") != -1){
                    decimal = tmpInput.substring(tmpInput.indexOf("."), tmpInput.length);
                    tmpInput = tmpInput.substring(0, tmpInput.indexOf("."));
                };
                tmpInput = (parseFloat(tmpInput) + "");
                count = 0;
                result = "";
                i = (tmpInput.length - 1);
                while (i >= 0) {
                    if (count == 3){
                        result = ("," + result);
                        count = 0;
                    };
                    result = (tmpInput.charAt(i) + result);
                    count++;
                    i--;
                };
                if (isMinus){
                    result = ("-" + result);
                };
                result = (result + decimal);
                return (result);
            };
            return (inputTxt);
        }
        public static function removeComma(decimal:String):String{
            var myPattern:RegExp;
            if (decimal != ""){
                myPattern = /,/g;
                return (decimal.replace(myPattern, ""));
            };
            return ("");
        }
        public static function changeClipBackground(clip:DisplayObject, color:uint, opacity:Number=1):void{
            logger.trace(("offset is " + (opacity - 1)));
            var colorObj:Color = new Color();
            colorObj.color = color;
            clip.transform.colorTransform = colorObj;
        }
        public static function updateDefaultFontFormat():void{
            defaultFont.color = ThemeManager.LABEL_COLOR;
        }
        public static function importTheme(colorObj:Object):void{
            ThemeManager.GAINER_COLOR = colorObj.GAINER_COLOR;
            ThemeManager.UNCHANGED_COLOR = colorObj.UNCHANGED_COLOR;
            ThemeManager.UNCHANGED_VOLUME_COLOR = colorObj.UNCHANGED_VOLUME_COLOR;
            ThemeManager.LOSER_COLOR = colorObj.LOSER_COLOR;
            ThemeManager.BUY_VOLUME_COLOR = colorObj.BUY_VOLUME_COLOR;
            ThemeManager.SELL_VOLUME_COLOR = colorObj.SELL_VOLUME_COLOR;
            ThemeManager.LABEL_COLOR = colorObj.LABEL_COLOR;
            ThemeManager.BACKGROUND_COLOR = colorObj.BACKGROUND_COLOR;
            ThemeManager.BACKGROUND_COLOR_OPACITY = (colorObj.BACKGROUND_COLOR_OPACITY / 100);
            ThemeManager.HEADER_BACKGROUND_COLOR = colorObj.HEADER_BACKGROUND_COLOR;
            ThemeManager.HEADER_BACKGROUND_COLOR_OPACITY = (colorObj.HEADER_BACKGROUND_COLOR_OPACITY / 100);
            ThemeManager.HEADERPAGE_BACKGROUND_COLOR = colorObj.HEADERPAGE_BACKGROUND_COLOR;
            ThemeManager.HEADERPAGE_BACKGROUND_COLOR_OPACITY = (colorObj.HEADERPAGE_BACKGROUND_COLOR_OPACITY / 100);
            ThemeManager.HEADERPAGE_COLOR = colorObj.HEADERPAGE_COLOR;
            ThemeManager.LABEL_INDEX_NAME_COLOR = colorObj.LABEL_INDEX_NAME_COLOR;
            ThemeManager.SYMBOL_INPUTBOX_COLOR = colorObj.SYMBOL_INPUTBOX_COLOR;
            ThemeManager.SEPERATOR_COLOR = colorObj.SEPERATOR_COLOR;
            ThemeManager.LABEL_DATA_TOPIC = colorObj.LABEL_DATA_TOPIC;
            ThemeManager.INCREASED_VOLUME_COLOR = colorObj.INCREASED_VOLUME_COLOR;
            ThemeManager.CANCELLED_VOLUME_COLOR = colorObj.CANCELLED_VOLUME_COLOR;
            ThemeManager.MATCHED_VOLUME_COLOR = colorObj.MATCHED_VOLUME_COLOR;
            ThemeManager.LABEL_CUSTOMER_DATA = colorObj.LABEL_CUSTOMER_DATA;
            ThemeManager.TABLE_HOVER_CELL_COLOR = colorObj.TABLE_HOVER_CELL_COLOR;
            ThemeManager.TABLE_SELECTED_CELL_COLOR = colorObj.TABLE_SELECTED_CELL_COLOR;
            ThemeManager.HEADERPAGE_BGGRADIENT_ENABLE = colorObj.HEADERPAGE_BGGRADIENT_ENABLE;
        }

        public function setDefaultLabelColor():void{
            STATIC_LABEL_COLOR = 0xFFFFFF;
            LOSER_COLOR = 15801115;
            GAINER_COLOR = 0x2CAE00;
            UNCHANGED_COLOR = 14335047;
            WHITE_COLOR = 0xFFFFFF;
            LABEL_COLOR = 0xCCCCCC;
            LABEL_BLACK_COLOR = 0;
            LABEL_GRAY_COLOR = 0xCCCCCC;
            LABEL_DATA_TOPIC = 0x999999;
            BUY_VOLUME_COLOR = 1947104;
            SELL_VOLUME_COLOR = 14228683;
            MATCHED_VOLUME_COLOR = 13395711;
            INCREASED_VOLUME_COLOR = 0x2CAE00;
            (CANCELLED_VOLUME_COLOR == 14552065);
            UNCHANGED_VOLUME_COLOR = 14335047;
            ORDER_BUY_COLOR = 304126;
            ORDER_SELL_COLOR = 14893729;
            ORDER_SHORT_COLOR = 16135432;
            ORDER_COVER_COLOR = 974813;
            BACKGROUND_COLOR = 0;
            HEADER_BACKGROUND_COLOR = 0;
            HEADERPAGE_BACKGROUND_COLOR = 0;
            HEADERPAGE_COLOR = 0;
            LABEL_INDEX_NAME_COLOR = 0xCCCCCC;
            SYMBOL_INPUTBOX_COLOR = 0x666666;
            SEPERATOR_COLOR = 0x666666;
            BACKGROUND_COLOR_OPACITY = 1;
            HEADER_BACKGROUND_COLOR_OPACITY = 1;
            HEADERPAGE_BACKGROUND_COLOR_OPACITY = 1;
            HEADERPAGE_COLOR_OPACITY = 1;
        }
        public function setWhiteLabelColor():void{
            STATIC_LABEL_COLOR = 6697881;
            LOSER_COLOR = 16711937;
            GAINER_COLOR = 104961;
            UNCHANGED_COLOR = 0xFF9900;
            WHITE_COLOR = 0x333333;
            LABEL_COLOR = 0x333333;
            LABEL_BLACK_COLOR = 0;
            LABEL_GRAY_COLOR = 0xCCCCCC;
            LABEL_DATA_TOPIC = 0x999999;
            BUY_VOLUME_COLOR = 92159;
            SELL_VOLUME_COLOR = 16712191;
            INCREASED_VOLUME_COLOR = 104961;
            CANCELLED_VOLUME_COLOR = 16711937;
            MATCHED_VOLUME_COLOR = 13395711;
            UNCHANGED_VOLUME_COLOR = 0xFF9900;
            ORDER_BUY_COLOR = 304126;
            ORDER_SELL_COLOR = 14893729;
            ORDER_SHORT_COLOR = 16135432;
            ORDER_COVER_COLOR = 974813;
            BACKGROUND_COLOR = 0;
            HEADER_BACKGROUND_COLOR = 0;
            HEADERPAGE_BACKGROUND_COLOR = 0;
            HEADERPAGE_COLOR = 0;
            LABEL_INDEX_NAME_COLOR = 0xCCCCCC;
            SYMBOL_INPUTBOX_COLOR = 0x666666;
            SEPERATOR_COLOR = 0x666666;
            BACKGROUND_COLOR_OPACITY = 1;
            HEADER_BACKGROUND_COLOR_OPACITY = 1;
            HEADERPAGE_BACKGROUND_COLOR_OPACITY = 1;
            HEADERPAGE_COLOR_OPACITY = 1;
        }
        private function initialTextFormat():void{
            defaultFont = new TextFormat();
            defaultFont.font = DEFAULT_FONT_NAME;
            defaultFont.size = 14;
            defaultFont.bold = true;
            defaultFont.rightMargin = 3;
            defaultFont.color = ThemeManager.LABEL_COLOR;
            defaultVolumeFont = new TextFormat();
            defaultVolumeFont.font = DEFAULT_FONT_NAME;
            defaultVolumeFont.size = 14;
            defaultVolumeFont.bold = true;
            defaultVolumeFont.rightMargin = 3;
            defaultVolumeFont.color = ThemeManager.UNCHANGED_VOLUME_COLOR;
            defaultDropdownFont = new TextFormat();
            defaultDropdownFont.font = DEFAULT_FONT_NAME;
            defaultDropdownFont.size = 13;
            defaultDropdownFont.bold = true;
            defaultDropdownFont.rightMargin = 3;
            defaultDropdownFont.color = ThemeManager.WHITE_COLOR;
            defaultDisabledDropdownFont = new TextFormat();
            defaultDisabledDropdownFont.font = DEFAULT_FONT_NAME;
            defaultDisabledDropdownFont.size = 13;
            defaultDisabledDropdownFont.bold = true;
            defaultDisabledDropdownFont.rightMargin = 3;
            defaultDisabledDropdownFont.color = ThemeManager.LABEL_GRAY_COLOR;
            defaultDropdownSeparatorFont = new TextFormat();
            defaultDropdownSeparatorFont.font = DEFAULT_FONT_NAME;
            defaultDropdownSeparatorFont.align = TextFormatAlign.CENTER;
            defaultDropdownSeparatorFont.size = 13;
            defaultDropdownSeparatorFont.bold = true;
            defaultDropdownSeparatorFont.color = ThemeManager.LABEL_GRAY_COLOR;
            defaultTextInputFont = new TextFormat();
            defaultTextInputFont.font = DEFAULT_FONT_NAME;
            defaultTextInputFont.size = 12;
            defaultTextInputFont.bold = true;
            defaultTextInputFont.color = ThemeManager.LABEL_BLACK_COLOR;
            defaultTextInputAlignRightFont = new TextFormat();
            defaultTextInputAlignRightFont.font = DEFAULT_FONT_NAME;
            defaultTextInputAlignRightFont.size = 12;
            defaultTextInputAlignRightFont.bold = true;
            defaultTextInputAlignRightFont.color = ThemeManager.LABEL_BLACK_COLOR;
            defaultTextInputAlignRightFont.align = "right";
            defaultButtonFont = new TextFormat();
            defaultButtonFont.font = DEFAULT_FONT_NAME;
            defaultButtonFont.size = 10;
            defaultButtonFont.bold = true;
            defaultButtonFont.color = ThemeManager.LABEL_BLACK_COLOR;
            defaultDisabledButtonFont = new TextFormat();
            defaultDisabledButtonFont.font = DEFAULT_FONT_NAME;
            defaultDisabledButtonFont.size = 10;
            defaultDisabledButtonFont.bold = true;
            defaultDisabledButtonFont.color = ThemeManager.LABEL_GRAY_COLOR;
            defaultDynamicDataFont = new TextFormat();
            defaultDynamicDataFont.font = DEFAULT_FONT_NAME;
            defaultDynamicDataFont.size = 11.5;
            defaultDynamicDataFont.rightMargin = 2;
            defaultDynamicDataFont.bold = true;
            defaultDynamicDataFont.color = ThemeManager.LABEL_COLOR;
            defaultDynamicDataFont.align = TextFormatAlign.RIGHT;
            defaultHeaderFont = new TextFormat();
            defaultHeaderFont.font = DEFAULT_FONT_NAME;
            defaultHeaderFont.size = 10;
            defaultHeaderFont.color = ThemeManager.WHITE_COLOR;
            defaultHeaderFont.bold = true;
            defaultHeaderFont.align = TextFormatAlign.CENTER;
            defaultHeaderFont.leftMargin = 0;
            defaultHeaderFont.rightMargin = 0;
            defaultAlertFont = new TextFormat();
            defaultAlertFont.font = DEFAULT_FONT_NAME;
            defaultAlertFont.size = 12;
            defaultAlertFont.color = ThemeManager.WHITE_COLOR;
            defaultAlertFont.bold = true;
            defaultPopupFont = new TextFormat();
            defaultPopupFont.font = DEFAULT_FONT_NAME;
            defaultPopupFont.size = 14;
            defaultPopupFont.color = ThemeManager.ORDER_BUY_COLOR;
            defaultPopupFont.bold = true;
            defaultOrderStatusFont = new TextFormat();
            defaultOrderStatusFont.font = DEFAULT_FONT_NAME;
            defaultOrderStatusFont.size = 14;
            defaultOrderStatusFont.color = ThemeManager.LABEL_COLOR;
            defaultOrderStatusFont.bold = true;
            defaultTableHeaderFont = new TextFormat();
            defaultTableHeaderFont.font = DEFAULT_FONT_NAME;
            defaultTableHeaderFont.size = 9;
            defaultTableHeaderFont.color = ThemeManager.WHITE_COLOR;
            defaultTableHeaderFont.bold = true;
            defaultTableHeaderFont.align = TextFormatAlign.CENTER;
            defaultTableHeaderFont.leftMargin = 0;
            defaultTableHeaderFont.rightMargin = 0;
            defaultLinkFont = new TextFormat();
            defaultLinkFont.font = DEFAULT_FONT_NAME;
            defaultLinkFont.bold = true;
            defaultLinkFont.underline = true;
            defaultLinkFont.color = 6737151;
            defaultLinkFont.size = 13;
            defaultWidgetListFont = new TextFormat();
            defaultWidgetListFont.font = DEFAULT_FONT_NAME;
            defaultWidgetListFont.size = 14;
            defaultWidgetListFont.bold = true;
            defaultWidgetListFont.align = TextFormatAlign.CENTER;
            defaultWidgetListFont.color = ThemeManager.LABEL_COLOR;
            defaultTemplateListFont = new TextFormat();
            defaultTemplateListFont.font = DEFAULT_FONT_NAME;
            defaultTemplateListFont.size = 14;
            defaultTemplateListFont.bold = true;
            defaultTemplateListFont.align = TextFormatAlign.CENTER;
            defaultTemplateListFont.color = 0x999999;
        }

    }
}//package com.settrade.streaming5.utils 
﻿package com.settrade.streaming5.utils {
    import com.settrade.streaming5.enumuration.*;
    import com.settrade.streaming5.widget.config.*;
    import com.settrade.streaming5.common.*;
    import com.settrade.log.logger.*;

    public class DefaultWidgetPageProUtils {

        private static var logger:Logger = new Logger(prototype.constructor);
        public static var EMPTY:WidgetPageConfig = new WidgetPageConfig("", "", 3, 4);
        public static var MARKET_WATCH:WidgetPageConfig = createMarketWatch();
        public static var BUY_SELL:WidgetPageConfig = createBuySell();
        public static var PORFOLIO:WidgetPageConfig = createPortfolio();
        public static var BID_OFFER:WidgetPageConfig = createBidOffer();
        public static var TICKER:WidgetPageConfig = createTicker();
        public static var QUOTE:WidgetPageConfig = createQuote();
        public static var NEWS:WidgetPageConfig = createNews();
        public static var RESEARCH:WidgetPageConfig = createResearch();
        public static var BUY_SELL_MKT:WidgetPageConfig = createBuySellMkt();
        public static var DEAL_SUMMARY:WidgetPageConfig = createDealSummary();
        public static var ACCOUNT_INFO:WidgetPageConfig = createAccountInfo();
        public static var TRADE_REPORT:WidgetPageConfig = createTradeReport();
        public static var ORDER_STATUS_SEARCH:WidgetPageConfig = createOrderStausSearch();
        public static var OPTIONS_SUMMARY:WidgetPageConfig = createOptionsSummary();
        public static var SETTINGS:WidgetPageConfig = createSettings();

        var configList:Array;

        public static function reInitPages():void{
            MARKET_WATCH = createMarketWatch();
            BUY_SELL = createBuySell();
            PORFOLIO = createPortfolio();
            BID_OFFER = createBidOffer();
            TICKER = createTicker();
            QUOTE = createQuote();
            NEWS = createNews();
            RESEARCH = createResearch();
            BUY_SELL_MKT = createBuySellMkt();
            DEAL_SUMMARY = createDealSummary();
            ACCOUNT_INFO = createAccountInfo();
            TRADE_REPORT = createTradeReport();
            ORDER_STATUS_SEARCH = createOrderStausSearch();
            OPTIONS_SUMMARY = createOptionsSummary();
        }
        public static function getDefaultConfig():Array{
            var clone:WidgetPageConfig;
            var tmpList:Array = new Array();
            if (StreamingAttribute.isMarketRep){
                tmpList.push(MARKET_WATCH);
                tmpList.push(BUY_SELL_MKT);
                tmpList.push(PORFOLIO);
                tmpList.push(DEAL_SUMMARY);
                tmpList.push(TICKER);
                tmpList.push(QUOTE);
            } else {
                tmpList.push(MARKET_WATCH);
                tmpList.push(BUY_SELL);
                tmpList.push(PORFOLIO);
                tmpList.push(BID_OFFER);
                tmpList.push(TICKER);
                tmpList.push(QUOTE);
            };
            if (!((StreamingAttribute.isMarketRep) && (!(StreamingAttribute.isPrimaryScreen)))){
                tmpList.push(SETTINGS);
            };
            var realList:Array = new Array();
            var i:int;
            while (i < tmpList.length) {
                clone = tmpList[i].clone();
                if (clone.id != SETTINGS.id){
                    clone.id = i.toString();
                };
                realList.push(clone);
                i++;
            };
            return (realList);
        }
        private static function createMarketWatch():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig("", "Market", getWidgetPageWidth(), getWidgetPageHeight());
            group = new WidgetGroupConfig();
            group.widgetGroup = WidgetGroup.GROUP_ONE;
            component = new WidgetComponentConfig("Watch_3_3", 0, 0);
            group.add(component);
            if (StreamingAttribute.screenType.isNormal()){
                component = new WidgetComponentConfig("Place_3_2", 0, 3);
            } else {
                component = new WidgetComponentConfig("Place_3_1", 0, 3);
            };
            group.add(component);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createBuySell():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig("", "Click", getWidgetPageWidth(), getWidgetPageHeight());
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("QuoteSet_1_1", 0, 0);
            group.add(component);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            group.widgetGroup = WidgetGroup.GROUP_ONE;
            if (StreamingAttribute.screenType.isNormal()){
                component = new WidgetComponentConfig("Place_3_2", 0, 3);
            } else {
                component = new WidgetComponentConfig("Place_3_1", 0, 3);
            };
            group.add(component);
            component = new WidgetComponentConfig("Click_2_3", 1, 0);
            group.add(component);
            component = new WidgetComponentConfig("Fav_1_2", 0, 1);
            group.add(component);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createPortfolio():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig("", "Portfolio", getWidgetPageWidth(), getWidgetPageHeight());
            group = new WidgetGroupConfig();
            group.widgetGroup = WidgetGroup.GROUP_ONE;
            component = new WidgetComponentConfig("PortDeal_3_2", 0, 0);
            group.add(component);
            component = new WidgetComponentConfig("AccInfo_1_1", 0, 2);
            group.add(component);
            component = new WidgetComponentConfig("ChartPort_1_1", 1, 2);
            group.add(component);
            component = new WidgetComponentConfig("ChartProfit_1_1", 2, 2);
            group.add(component);
            if (StreamingAttribute.screenType.isNormal()){
                component = new WidgetComponentConfig("Place_3_2", 0, 3);
            } else {
                component = new WidgetComponentConfig("Place_3_1", 0, 3);
            };
            group.add(component);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createBidOffer():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig("", "Bids Offers", getWidgetPageWidth(), getWidgetPageHeight());
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("QuoteSet_1_1", 0, 0);
            group.add(component);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Bid3_1_1", 1, 0);
            group.add(component);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Bid3_1_1", 2, 0);
            group.add(component);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Bid3_1_1", 0, 1);
            group.add(component);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Bid3_1_1", 1, 1);
            group.add(component);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Bid3_1_1", 2, 1);
            group.add(component);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Bid3_1_1", 0, 2);
            group.add(component);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Bid3_1_1", 1, 2);
            group.add(component);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Bid3_1_1", 2, 2);
            group.add(component);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            group.widgetGroup = WidgetGroup.GROUP_ONE;
            if (StreamingAttribute.screenType.isNormal()){
                component = new WidgetComponentConfig("Place_3_2", 0, 3);
            } else {
                component = new WidgetComponentConfig("Place_3_1", 0, 3);
            };
            group.add(component);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createTicker():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig("", "Ticker", getWidgetPageWidth(), getWidgetPageHeight());
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Ticker_3_3", 0, 0);
            group.add(component);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            group.widgetGroup = WidgetGroup.GROUP_ONE;
            if (StreamingAttribute.screenType.isNormal()){
                component = new WidgetComponentConfig("Place_3_2", 0, 3);
            } else {
                component = new WidgetComponentConfig("Place_3_1", 0, 3);
            };
            group.add(component);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createQuote():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig("", "Quote", getWidgetPageWidth(), getWidgetPageHeight());
            group = new WidgetGroupConfig();
            group.widgetGroup = WidgetGroup.GROUP_ONE;
            component = new WidgetComponentConfig("Quote_3_2", 0, 0);
            group.add(component);
            component = new WidgetComponentConfig("Bid5_1_1", 0, 2);
            group.add(component);
            component = new WidgetComponentConfig("PercentBuy_1_1", 1, 2);
            group.add(component);
            component = new WidgetComponentConfig("ChartDay_1_1", 2, 2);
            group.add(component);
            if (StreamingAttribute.screenType.isNormal()){
                component = new WidgetComponentConfig("Place_3_2", 0, 3);
            } else {
                component = new WidgetComponentConfig("Place_3_1", 0, 3);
            };
            group.add(component);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createNews():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig("", "News", getWidgetPageWidth(), getWidgetPageHeight());
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("News_3_2", 0, 0);
            group.add(component);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Calendar_1_1", 0, 2);
            group.add(component);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Oppday_2_1", 1, 2);
            group.add(component);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            if (StreamingAttribute.screenType.isNormal()){
                component = new WidgetComponentConfig("Place_3_2", 0, 3);
            } else {
                component = new WidgetComponentConfig("Place_3_1", 0, 3);
            };
            group.add(component);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createResearch():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig("", "Research", getWidgetPageWidth(), getWidgetPageHeight());
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Research_3_3", 0, 0);
            group.add(component);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            if (StreamingAttribute.screenType.isNormal()){
                component = new WidgetComponentConfig("Place_3_2", 0, 3);
            } else {
                component = new WidgetComponentConfig("Place_3_1", 0, 3);
            };
            group.add(component);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createBuySellMkt():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig("", "Click Mkt", getWidgetPageWidth(), getWidgetPageHeight());
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("QuoteSet_1_1", 0, 0);
            group.add(component);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            group.widgetGroup = WidgetGroup.GROUP_ONE;
            component = new WidgetComponentConfig("Announcement_1_1", 2, 0);
            group.add(component);
            component = new WidgetComponentConfig("TickerId_1_1", 1, 0);
            group.add(component);
            component = new WidgetComponentConfig("Fav_1_2", 0, 1);
            group.add(component);
            component = new WidgetComponentConfig("Click_2_2", 1, 1);
            group.add(component);
            component = new WidgetComponentConfig("Port_3_1", 0, 3);
            group.add(component);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createDealSummary():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig("", "Total Deal", getWidgetPageWidth(), getWidgetPageHeight());
            group = new WidgetGroupConfig();
            group.widgetGroup = WidgetGroup.GROUP_ONE;
            if (StreamingAttribute.screenType.isNormal()){
                component = new WidgetComponentConfig("Place_3_2", 0, 3);
            } else {
                component = new WidgetComponentConfig("Place_3_1", 0, 3);
            };
            group.add(component);
            component = new WidgetComponentConfig("Deal_3_2", 0, 0);
            group.add(component);
            component = new WidgetComponentConfig("Port_3_1", 0, 2);
            group.add(component);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createAccountInfo():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig("", "A/C Info", getWidgetPageWidth(), getWidgetPageHeight());
            group = new WidgetGroupConfig();
            group.widgetGroup = WidgetGroup.GROUP_ONE;
            if (StreamingAttribute.screenType.isNormal()){
                component = new WidgetComponentConfig("Place_3_2", 0, 3);
            } else {
                component = new WidgetComponentConfig("Place_3_1", 0, 3);
            };
            group.add(component);
            component = new WidgetComponentConfig("AccInfo_3_3", 0, 0);
            group.add(component);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createTradeReport():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig("", "TradeReport", getWidgetPageWidth(), getWidgetPageHeight());
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("BlockTrade_2_2", 0, 0);
            group.add(component);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("QuoteSet_1_1", 2, 0);
            group.add(component);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Bid3_1_1", 2, 1);
            group.add(component);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("Bid3_1_1", 2, 2);
            group.add(component);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("BlockTradeInfo_2_1", 0, 2);
            group.add(component);
            page.addWidgetGroupConfig(group);
            group = new WidgetGroupConfig();
            if (StreamingAttribute.screenType.isNormal()){
                component = new WidgetComponentConfig("Place_3_2", 0, 3);
            } else {
                component = new WidgetComponentConfig("Place_3_1", 0, 3);
            };
            group.add(component);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createOrderStausSearch():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig("", "SearchOrder", getWidgetPageWidth(), getWidgetPageHeight());
            group = new WidgetGroupConfig();
            component = new WidgetComponentConfig("OrderSearch_3_4", 0, 0);
            group.add(component);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createOptionsSummary():WidgetPageConfig{
            var group:WidgetGroupConfig;
            var component:WidgetComponentConfig;
            var page:WidgetPageConfig = new WidgetPageConfig("", "OptionsSum", getWidgetPageWidth(), getWidgetPageHeight());
            group = new WidgetGroupConfig();
            group.widgetGroup = WidgetGroup.GROUP_ONE;
            component = new WidgetComponentConfig("Greek_3_2", 0, 0);
            group.add(component);
            component = new WidgetComponentConfig("Bid5_1_1", 0, 2);
            group.add(component);
            component = new WidgetComponentConfig("TickerId_1_1", 1, 2);
            group.add(component);
            component = new WidgetComponentConfig("ChartDay_1_1", 2, 2);
            group.add(component);
            if (StreamingAttribute.screenType.isNormal()){
                component = new WidgetComponentConfig("Place_3_2", 0, 3);
            } else {
                component = new WidgetComponentConfig("Place_3_1", 0, 3);
            };
            group.add(component);
            page.addWidgetGroupConfig(group);
            return (page);
        }
        private static function createSettings():WidgetPageConfig{
            var page:WidgetPageConfig = new WidgetPageConfig(PageName.SETTING, "Settings", 3, 3);
            return (page);
        }
        private static function getWidgetPageWidth():int{
            if (StreamingAttribute.screenType.isNormal()){
                return (3);
            };
            return (3);
        }
        private static function getWidgetPageHeight():int{
            if (StreamingAttribute.screenType.isNormal()){
                return (5);
            };
            return (4);
        }

    }
}//package com.settrade.streaming5.utils 
﻿package com.settrade.streaming5.utils {

    public class VersionUtil {

        public static function isChangeVersion(lastVersion:String, currentVersion:String):Boolean{
            return (!((lastVersion == currentVersion)));
        }
        public static function isChangeMajorVersion(lastVersion:String, currentVersion:String):Boolean{
            var lastToken:Array = lastVersion.split(".");
            var currentToken:Array = currentVersion.split(".");
            if ((((lastToken.length < 2)) && ((currentToken.length < 2)))){
                return (false);
            };
            return (((!((lastToken[0] == currentToken[0]))) || (!((lastToken[1] == currentToken[1])))));
        }

    }
}//package com.settrade.streaming5.utils 
﻿package com.settrade.streaming5.utils {
    import com.settrade.log.logger.*;

    public class TimerHelper {

        public var logger:Logger;
        public var startTime:Date;
        private var stopList:Array;

        public function TimerHelper(name, isStart:Boolean=true){
            super();
            this.logger = new Logger(name);
            if (isStart){
                this.start();
            };
        }
        public function start():void{
            this.startTime = new Date();
            this.stopList = new Array();
            this.logger.info(("Timer Start:" + this.startTime.getTime()));
        }
        public function stop(eventName:String=""):void{
            var time:Date = new Date();
            var fromStart:Number = (time.getTime() - this.startTime.getTime());
            this.stopList.push({
                event:eventName,
                time:fromStart
            });
            this.logger.debug(this.getLogString(eventName, fromStart));
        }
        private function getLogString(eventName:String, fromStart:Number):String{
            return (((("(" + eventName) + ")ms From Start:") + fromStart));
        }
        public function summarize():void{
            var obj:Object;
            var sum:String = "\n";
            for each (obj in this.stopList) {
                sum = (sum + (this.getLogString(obj.event, obj.time) + "\n"));
            };
            this.logger.info(sum);
        }
        public function getSummarizeList():Array{
            return (this.stopList.slice(0));
        }

    }
}//package com.settrade.streaming5.utils 
﻿package com.settrade.streaming5.utils {

    public class WidgetSizeUtils {

        private static const CANVAS_MARGIN:Number = 0;
        private static const INNER_MARGIN_X:Number = 1.5;
        private static const INNER_MARGIN_Y:Number = 1;
        public static const WIDGET_WIDTH:Number = 419;
        public static const WIDGET_HEIGHT:Number = 153;

        public function WidgetSizeUtils(){
            super();
        }
        public static function getWidgetHeight(widgetHeight:int):Number{
            return (((WIDGET_HEIGHT * widgetHeight) + (INNER_MARGIN_Y * (widgetHeight - 1))));
        }
        public static function getWidgetWidth(widgetWidth:int):Number{
            return (((WIDGET_WIDTH * widgetWidth) + (INNER_MARGIN_X * (widgetWidth - 1))));
        }

    }
}//package com.settrade.streaming5.utils 
﻿package com.settrade.streaming5.utils {

    public class EquityUtils {

        public static function getSpreadUp(current_price:Number):Number{
            var spread:Number;
            if (current_price < 2){
                spread = 0.01;
            } else {
                if ((((current_price >= 2)) && ((current_price < 5)))){
                    spread = 0.02;
                } else {
                    if ((((current_price >= 5)) && ((current_price < 10)))){
                        spread = 0.05;
                    } else {
                        if ((((current_price >= 10)) && ((current_price < 25)))){
                            spread = 0.1;
                        } else {
                            if ((((current_price >= 25)) && ((current_price < 100)))){
                                spread = 0.25;
                            } else {
                                if ((((current_price >= 100)) && ((current_price < 200)))){
                                    spread = 0.5;
                                } else {
                                    if ((((current_price >= 200)) && ((current_price < 400)))){
                                        spread = 1;
                                    } else {
                                        spread = 2;
                                    };
                                };
                            };
                        };
                    };
                };
            };
            return (spread);
        }
        public static function getSpreadDown(current_price:Number):Number{
            var spread:Number;
            if (current_price <= 2){
                spread = 0.01;
            } else {
                if ((((current_price > 2)) && ((current_price <= 5)))){
                    spread = 0.02;
                } else {
                    if ((((current_price > 5)) && ((current_price <= 10)))){
                        spread = 0.05;
                    } else {
                        if ((((current_price > 10)) && ((current_price <= 25)))){
                            spread = 0.1;
                        } else {
                            if ((((current_price > 25)) && ((current_price <= 100)))){
                                spread = 0.25;
                            } else {
                                if ((((current_price > 100)) && ((current_price <= 200)))){
                                    spread = 0.5;
                                } else {
                                    if ((((current_price > 200)) && ((current_price <= 400)))){
                                        spread = 1;
                                    } else {
                                        spread = 2;
                                    };
                                };
                            };
                        };
                    };
                };
            };
            return (spread);
        }

    }
}//package com.settrade.streaming5.utils 
﻿package com.settrade.streaming5.utils.datetime {
    import com.settrade.streaming5.manager.*;

    public class MonthHelper {

        public function MonthHelper(){
            super();
        }
        public static function getMonth(index:int):String{
            switch (index){
                case 0:
                    return (LanguageManager.currentLanguageConfig.MONTH_JANUARY);
                case 1:
                    return (LanguageManager.currentLanguageConfig.MONTH_FEBRUARY);
                case 2:
                    return (LanguageManager.currentLanguageConfig.MONTH_MARCH);
                case 3:
                    return (LanguageManager.currentLanguageConfig.MONTH_APRIL);
                case 4:
                    return (LanguageManager.currentLanguageConfig.MONTH_MAY);
                case 5:
                    return (LanguageManager.currentLanguageConfig.MONTH_JUNE);
                case 6:
                    return (LanguageManager.currentLanguageConfig.MONTH_JULY);
                case 7:
                    return (LanguageManager.currentLanguageConfig.MONTH_AUGUST);
                case 8:
                    return (LanguageManager.currentLanguageConfig.MONTH_SEPTEMBER);
                case 9:
                    return (LanguageManager.currentLanguageConfig.MONTH_OCTOBER);
                case 10:
                    return (LanguageManager.currentLanguageConfig.MONTH_NOVEMBER);
                case 11:
                    return (LanguageManager.currentLanguageConfig.MONTH_DECEMBER);
            };
            return ("");
        }

    }
}//package com.settrade.streaming5.utils.datetime 
﻿package com.settrade.streaming5.utils.datetime {
    import com.settrade.streaming5.utils.*;

    public class DateSlashFormatter implements IStreamingDateTimeFormatter {

        public function format(dateTime:Date):String{
            var year:String = dateTime.fullYear.toString();
            var month:String = StreamingNumberFormatter.formatIntWithLeadingZero((dateTime.month + 1), 2);
            var day:String = StreamingNumberFormatter.formatIntWithLeadingZero(dateTime.date, 2);
            return (((((day + "/") + month) + "/") + year));
        }

    }
}//package com.settrade.streaming5.utils.datetime 
﻿package com.settrade.streaming5.utils.datetime {

    public class LongDateTimeFormatter implements IStreamingDateTimeFormatter {

        public function format(dateTime:Date):String{
            if (dateTime == null){
                return ("");
            };
            var year:String = dateTime.fullYear.toString();
            var month:String = MonthHelper.getMonth(dateTime.month);
            var day:String = dateTime.date.toString();
            return (((((day + " ") + month) + " ") + year));
        }

    }
}//package com.settrade.streaming5.utils.datetime 
﻿package com.settrade.streaming5.utils.datetime {

    public interface IStreamingDateTimeFormatter {

        function format(_arg1:Date):String;

    }
}//package com.settrade.streaming5.utils.datetime 
﻿package com.settrade.streaming5.utils.datetime {
    import com.settrade.streaming5.utils.*;

    public class FullDateTimeFormatter implements IStreamingDateTimeFormatter {

        public function format(dateTime:Date):String{
            var year:String = dateTime.fullYear.toString();
            var month:String = StreamingNumberFormatter.formatIntWithLeadingZero((dateTime.month + 1), 2);
            var day:String = StreamingNumberFormatter.formatIntWithLeadingZero(dateTime.date, 2);
            var hour:String = StreamingNumberFormatter.formatIntWithLeadingZero(dateTime.hours, 2);
            var minute:String = StreamingNumberFormatter.formatIntWithLeadingZero(dateTime.minutes, 2);
            var second:String = StreamingNumberFormatter.formatIntWithLeadingZero(dateTime.seconds, 2);
            return (((((((((((day + "/") + month) + "/") + year) + " ") + hour) + ":") + minute) + ":") + second));
        }

    }
}//package com.settrade.streaming5.utils.datetime 
﻿package com.settrade.streaming5.utils.datetime {

    public class MonthFormatter implements IStreamingDateTimeFormatter {

        public function MonthFormatter(){
            super();
        }
        public function format(dateTime:Date):String{
            var year:String = dateTime.fullYear.toString();
            var month:String = MonthHelper.getMonth(dateTime.month);
            return (((month + " ") + year));
        }

    }
}//package com.settrade.streaming5.utils.datetime 
﻿package com.settrade.streaming5.utils.datetime {
    import com.settrade.streaming5.utils.*;

    public class HeaderDateTimerFormatter implements IStreamingDateTimeFormatter {

        const months:Array;

        public function HeaderDateTimerFormatter(){
            this.months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            super();
        }
        public function format(dateTime:Date):String{
            dateTime.minutes = ((dateTime.minutes + dateTime.timezoneOffset) + (7 * 60));
            var year:String = (dateTime.fullYear % 100).toString();
            var month:String = this.months[dateTime.month];
            var day:String = StreamingNumberFormatter.formatIntWithLeadingZero(dateTime.date, 2);
            var hour:String = StreamingNumberFormatter.formatIntWithLeadingZero(dateTime.hours, 2);
            var minute:String = StreamingNumberFormatter.formatIntWithLeadingZero(dateTime.minutes, 2);
            var second:String = StreamingNumberFormatter.formatIntWithLeadingZero(dateTime.seconds, 2);
            return (((((((((((day + " ") + month) + " ") + year) + "   ") + hour) + ":") + minute) + ":") + second));
        }

    }
}//package com.settrade.streaming5.utils.datetime 
﻿package com.yahoo.astra.fl.controls.containerClasses {
    import fl.core.*;
    import com.settrade.streaming5.utils.*;
    import flash.text.*;

    public class MessageBox extends UIComponent {

        protected var _textField:TextField;
        protected var _autoSizeStyle:String;
        private var defaultStyles:Object;

        public function MessageBox(){
            this.defaultStyles = {textFormat:new TextFormat("Arial", 15, ThemeManager.LABEL_COLOR, true)};
            super();
            this._textField = new TextField();
            this._autoSizeStyle = TextFieldAutoSize.CENTER;
            this.setStyle("textFormat", (this.defaultStyles["textFormat"] as TextFormat));
        }
        public function get textField():TextField{
            return (this._textField);
        }
        public function get autoSizeStyle():String{
            return (this._autoSizeStyle);
        }
        public function set autoSizeStyle(value:String):void{
            this._autoSizeStyle = value;
        }
        public function drawMessage(maxTextWidth:int, minTextWidth:int, messageText:String):void{
            var textFieldWidth:int = this.getTextFieldWidth(messageText, maxTextWidth, minTextWidth);
            this._textField.multiline = false;
            this._textField.wordWrap = true;
            this._textField.autoSize = this._autoSizeStyle;
            this._textField.width = textFieldWidth;
            this._textField.height = 5;
            var tF:TextFormat = (getStyle("textFormat") as TextFormat);
            tF.align = this._autoSizeStyle;
            this._textField.defaultTextFormat = tF;
            this._textField.text = messageText;
            this.width = this._textField.width;
        }
        protected function getTextFieldWidth(message:String, maxTextWidth:int, minTextWidth:int):int{
            var textFieldWidth:int;
            var tempText:TextField = new TextField();
            var tF:TextFormat = new TextFormat("_sans", 15);
            tF.align = this._autoSizeStyle;
            tempText.defaultTextFormat = (this.getStyle("textFormat") as TextFormat);
            tempText.width = 10;
            tempText.height = 5;
            tempText.wordWrap = false;
            tempText.multiline = false;
            tempText.autoSize = TextFieldAutoSize.LEFT;
            tempText.text = message;
            var tempTextWidth:int = Math.round(tempText.width);
            if (tempTextWidth > maxTextWidth){
                textFieldWidth = maxTextWidth;
            } else {
                if (tempTextWidth > minTextWidth){
                    textFieldWidth = tempTextWidth;
                } else {
                    textFieldWidth = minTextWidth;
                };
            };
            if (this._autoSizeStyle == TextFieldAutoSize.LEFT){
                textFieldWidth = (textFieldWidth + 1);
            };
            return (textFieldWidth);
        }

    }
}//package com.yahoo.astra.fl.controls.containerClasses 
﻿package com.yahoo.astra.fl.controls.containerClasses {
    import fl.core.*;
    import fl.controls.*;
    import flash.text.*;
    import fl.events.*;
    import com.yahoo.astra.utils.*;
    import com.yahoo.astra.fl.utils.*;

    public class AutoSizeButton extends Button {

        private static var defaultStyles:Object = {
            focusRectPadding:1,
            icon:null,
            upSkin:"Button_upSkin",
            downSkin:"Button_downSkin",
            overSkin:"Button_overSkin",
            disabledSkin:"Button_disabledSkin",
            selectedUpSkin:"Button_selectedUpSkin",
            selectedDownSkin:"Button_selectedUpSkin",
            selectedOverSkin:"Button_selectedUpSkin",
            selectedDisabledSkin:"Button_selectedDisabledSkin",
            focusRectSkin:"focusRectSkin",
            textPadding:10,
            verticalTextPadding:2,
            textFormat:null,
            disabledTextFormat:null,
            embedFonts:false
        };

        public function AutoSizeButton(){
            super();
        }
        public static function getStyleDefinition():Object{
            return (defaultStyles);
        }

        override public function set label(value:String):void{
            this._label = value;
        }
        override protected function configUI():void{
            super.configUI();
            this.textField.autoSize = TextFieldAutoSize.LEFT;
            this.setStyle("focusRectPadding", getStyleDefinition().focusRectPadding);
        }
        override protected function draw():void{
            if (this.textField.text != this._label){
                this.textField.text = this._label;
                this.width = (this.textField.width + ((this.getStyleValue("textPadding") as Number) * 2));
                this.dispatchEvent(new ComponentEvent(ComponentEvent.LABEL_CHANGE));
            };
            super.draw();
            this.drawFocus(isFocused);
        }
        override public function setStyle(style:String, value:Object):void{
            if ((((instanceStyles[style] === value)) && (!((value is TextFormat))))){
                return;
            };
            if ((value is InstanceFactory)){
                instanceStyles[style] = UIComponentUtil.getDisplayObjectInstance(this, (value as InstanceFactory).createInstance());
            } else {
                instanceStyles[style] = value;
            };
            invalidate(InvalidationType.STYLES);
        }

    }
}//package com.yahoo.astra.fl.controls.containerClasses 
﻿package com.yahoo.astra.fl.controls.containerClasses {
    import fl.core.*;
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.text.*;
    import fl.events.*;
    import flash.filters.*;
    import com.yahoo.astra.utils.*;
    import com.yahoo.astra.fl.utils.*;
    import flash.ui.*;

    public class DialogBox extends UIComponent {

        public static var createAccessibilityImplementation:Function;
        private static var defaultStyles:Object = {skin:"Background_skin"};

        protected const TITLE:String = "title";
        protected const BUTTONS:String = "buttons";

        protected var _titleBar:TitleBar;
        protected var _dragOffSetY:Number;
        protected var _dragOffSetX:Number;
        protected var _buttonBar:ButtonBar;
        protected var _minWidth:int;
        protected var _maxWidth:int;
        protected var _padding:int;
        protected var _stage:Stage;
        protected var _skin:DisplayObject;
        protected var _messageBox:MessageBox;
        protected var _message:TextField;
        public var messageText:String;
        protected var _titleDrawn:Boolean;
        protected var _buttonsDrawn:Boolean;
        protected var _iconClass:DisplayObject;
        protected var _hasIcon:Boolean;
        protected var _icons:Dictionary;
        public var hasDropShadow:Boolean;
        public var shadowDirection:String;

        public function DialogBox(container:Stage){
            this._icons = new Dictionary();
            super();
            this._stage = container;
            tabChildren = false;
            this.visible = false;
        }
        public static function getStyleDefinition():Object{
            return (defaultStyles);
        }

        public function get titleBar():TitleBar{
            return (this._titleBar);
        }
        public function setTitleBar(value:TitleBar):void{
            this._titleBar = value;
        }
        public function get buttonBar():ButtonBar{
            return (this._buttonBar);
        }
        public function get minWidth():int{
            return (this._minWidth);
        }
        public function set minWidth(value:int):void{
            this._minWidth = value;
        }
        public function get maxWidth():int{
            return (this._maxWidth);
        }
        public function set maxWidth(value:int):void{
            this._maxWidth = value;
            this._buttonBar.maxWidth = (this._maxWidth - (this._padding * 2));
            this._titleBar.maxWidth = this._maxWidth;
        }
        public function get padding():int{
            return (this._padding);
        }
        public function set padding(value:int):void{
            this._padding = value;
            this._buttonBar.maxWidth = (this._maxWidth - (this._padding * 2));
        }
        public function get messageBox():MessageBox{
            return (this._messageBox);
        }
        public function get buttonHeight():int{
            return (this._buttonBar.height);
        }
        public function set buttonHeight(value:int):void{
            this._buttonBar.height = value;
        }
        public function get buttonRowSpacing():int{
            return (this._buttonBar.rowSpacing);
        }
        public function set buttonRowSpacing(value:int):void{
            this._buttonBar.rowSpacing = value;
        }
        public function get buttonSpacing():int{
            return (this._buttonBar.spacing);
        }
        public function set buttonSpacing(value:int):void{
            this._buttonBar.spacing = value;
        }
        public function positionAlert():void{
            var left:int = ((this._stage.stageWidth / 2) - (this.width / 2));
            var top:int = ((this._stage.stageHeight / 3) - (this.height / 2));
            this.x = (((left > 0)) ? left : 0);
            this.y = (((top > 0)) ? top : 0);
        }
        public function update(message:String, title:String, buttons:Array, listeners:Array, icon:String=null):void{
            var i:* = null;
            var message:* = message;
            var title:* = title;
            var buttons:* = buttons;
            var listeners:* = listeners;
            var icon = icon;
            this._hasIcon = !((icon == null));
            this._iconClass = null;
            for (i in this._icons) {
                this._icons[i].visible = false;
                if (((this._hasIcon) && ((icon == i)))){
                    this._iconClass = this._icons[i];
                    this._iconClass.visible = true;
                };
            };
            if (((this._hasIcon) && ((this._iconClass == null)))){
                try {
                    this._iconClass = (this._icons[icon] = getDisplayObjectInstance(icon));
                    this.addChild(this._iconClass);
                } catch(e:Error) {
                    _hasIcon = false;
                    delete _icons[icon];
                };
            };
            this._titleDrawn = (this._buttonsDrawn = false);
            this.setFocus();
            if (message != this.messageText){
                this.messageText = message;
            };
            if (title != this._titleBar.text){
                this._titleBar.text = title;
            } else {
                this._titleDrawn = true;
            };
            this._buttonBar.drawButtons(buttons, listeners);
        }
        override public function setStyle(style:String, value:Object):void{
            if ((((instanceStyles[style] === value)) && (!((value is TextFormat))))){
                return;
            };
            if ((value is InstanceFactory)){
                instanceStyles[style] = UIComponentUtil.getDisplayObjectInstance(this, (value as InstanceFactory).createInstance());
            } else {
                instanceStyles[style] = value;
            };
            invalidate(InvalidationType.STYLES);
        }
        override protected function configUI():void{
            this._titleBar = new TitleBar();
            this._titleBar.buttonMode = true;
            this._titleBar.useHandCursor = true;
            this._titleBar.name = this.TITLE;
            this._titleBar.addEventListener(MouseEvent.MOUSE_DOWN, this.startDragAlert);
            this._titleBar.addEventListener(ComponentEvent.RESIZE, this.resizeHandler);
            this.addChild(this._titleBar);
            this._messageBox = new MessageBox();
            this._message = this._messageBox.textField;
            this._message.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, this.keyFocusChangeHandler);
            this.addChild(this._message);
            this._buttonBar = new ButtonBar();
            this._buttonBar.name = this.BUTTONS;
            this.addChild(this._buttonBar);
            this._buttonBar.addEventListener(ComponentEvent.RESIZE, this.resizeHandler);
        }
        protected function resizeHandler(evnt:ComponentEvent):void{
            var targetName:String = evnt.target.name;
            if (targetName == this.TITLE){
                this._titleDrawn = true;
            };
            if (targetName == this.BUTTONS){
                this._buttonsDrawn = true;
            };
            if (((this._titleDrawn) && (this._buttonsDrawn))){
                this.drawMessage();
            };
        }
        protected function drawMessage():void{
            var minTextWidth:int;
            var maxTextWidth:int;
            var max:int;
            var totalPadding:int = (this._padding * 2);
            if (this.messageText != null){
                max = Math.max(this._minWidth, (this._buttonBar.width + totalPadding), this._titleBar.width);
                if (max > this._minWidth){
                    maxTextWidth = (this._maxWidth - totalPadding);
                    minTextWidth = (max - totalPadding);
                } else {
                    maxTextWidth = (this._maxWidth - totalPadding);
                    minTextWidth = (this._minWidth - totalPadding);
                };
                if (this._hasIcon){
                    maxTextWidth = (maxTextWidth - (this._iconClass.width + this._padding));
                    minTextWidth = (minTextWidth - (this._iconClass.width + this._padding));
                    this._messageBox.autoSizeStyle = TextFieldAutoSize.LEFT;
                    this._iconClass.y = (this._titleBar.height + this._padding);
                } else {
                    this._messageBox.autoSizeStyle = TextFieldAutoSize.CENTER;
                };
                this._messageBox.drawMessage(maxTextWidth, minTextWidth, this.messageText);
                this._titleBar.y = 0;
                this._message.y = (this._titleBar.height + this._padding);
                if (this._hasIcon){
                    this._buttonBar.y = (Math.max(this._message.getBounds(this).bottom, this._iconClass.getBounds(this).bottom) + this._padding);
                    this.setSize(((this._message.width + (this._padding * 2)) + (this._iconClass.width + this._padding)), ((this._buttonBar.height + this._buttonBar.y) + this._padding));
                    this._iconClass.x = (Math.round((this.width / 2)) - Math.round((((this._iconClass.width + this._padding) + this._message.width) / 2)));
                    this._message.x = ((this._iconClass.x + this._iconClass.width) + this._padding);
                } else {
                    this._buttonBar.y = (this._message.getBounds(this).bottom + this._padding);
                    this.setSize((this._message.width + (this._padding * 2)), ((this._buttonBar.height + this._buttonBar.y) + this._padding));
                    this._message.x = (Math.round((this.width / 2)) - Math.round((this._message.width / 2)));
                };
                this._buttonBar.x = Math.round(((this.width / 2) - (this._buttonBar.width / 2)));
                this._titleBar.drawBackground(this.width);
                this.drawSkin();
                this.positionAlert();
                this.visible = true;
            };
        }
        protected function drawSkin():void{
            var shadowAngle:int;
            var filters:Array;
            var dropShadow:DropShadowFilter;
            if (this._skin != this.getDisplayObjectInstance(getStyleValue("skin"))){
                if (this.getChildAt(0) == this._skin){
                    this.removeChildAt(0);
                };
                this._skin = getDisplayObjectInstance(getStyleValue("skin"));
                this.addChildAt(this._skin, 0);
            };
            if (this._skin != null){
                this._skin.width = this.width;
                this._skin.height = this.height;
                if (this.hasDropShadow){
                    shadowAngle = ((this.shadowDirection)=="left") ? 135 : 45;
                    filters = [];
                    dropShadow = new DropShadowFilter(2, shadowAngle, 0, 0.5, 4, 4, 1, 1, false, false, false);
                    filters.push(dropShadow);
                    this._skin.filters = filters;
                };
            };
        }
        protected function startDragAlert(evnt:MouseEvent):void{
            this._dragOffSetX = Math.round((evnt.localX * evnt.target.scaleX));
            this._dragOffSetY = Math.round((evnt.localY * evnt.target.scaleY));
            this._stage.addEventListener(MouseEvent.MOUSE_MOVE, this.dragAlert, false, 0, true);
            this._stage.addEventListener(MouseEvent.MOUSE_UP, this.stopAlertDrag, false, 0, true);
            this._titleBar.removeEventListener(MouseEvent.MOUSE_DOWN, this.startDragAlert);
        }
        protected function dragAlert(evnt:MouseEvent):void{
            if ((((((((evnt.stageX < this._stage.stageWidth)) && ((evnt.stageY < this._stage.stageHeight)))) && ((evnt.stageX > 0)))) && ((evnt.stageY > 0)))){
                this.x = (evnt.stageX - this._dragOffSetX);
                this.y = (evnt.stageY - this._dragOffSetY);
                evnt.updateAfterEvent();
            };
        }
        protected function stopAlertDrag(evnt:MouseEvent):void{
            this._stage.removeEventListener(MouseEvent.MOUSE_MOVE, this.dragAlert);
            this._stage.removeEventListener(MouseEvent.MOUSE_UP, this.stopAlertDrag);
            this._stage.removeEventListener(Event.MOUSE_LEAVE, this.stopAlertDrag);
            this._titleBar.addEventListener(MouseEvent.MOUSE_DOWN, this.startDragAlert);
        }
        protected function keyFocusChangeHandler(event:FocusEvent):void{
            if (event.keyCode == Keyboard.TAB){
                event.preventDefault();
                this._buttonBar.focusIndex = 0;
                if (event.shiftKey){
                    this._buttonBar.setFocusIndex(event.shiftKey);
                };
                this._buttonBar.setFocus();
                this._buttonBar.setFocusButton();
            };
        }
        override protected function initializeAccessibility():void{
            if (DialogBox.createAccessibilityImplementation != null){
                DialogBox.createAccessibilityImplementation(this);
            };
        }

    }
}//package com.yahoo.astra.fl.controls.containerClasses 
﻿package com.yahoo.astra.fl.controls.containerClasses {
    import fl.core.*;
    import flash.events.*;
    import fl.events.*;
    import flash.ui.*;

    public class ButtonBar extends UIComponent {

        public var _buttons:Array;
        private var _cachedButtons:Array;
        protected var _left:Number = 0;
        protected var _focusIndex:int;
        protected var _focusButton:AutoSizeButton;
        public var spacing:int;
        public var rowSpacing:int;
        public var maxWidth:int;
        protected var _length:uint;
        protected var _buttonsLoaded:uint;
        protected var _rows:Array;
        protected var _currentRow:uint;
        private var defaultButtonStyles:Object;

        public function ButtonBar(){
            this._buttons = [];
            this._cachedButtons = [];
            this.defaultButtonStyles = {};
            super();
            this.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, this.keyFocusChangeHandler);
            this.addEventListener(KeyboardEvent.KEY_DOWN, this.navigationKeyDownHandler);
            tabChildren = false;
        }
        override public function set height(ht:Number):void{
            _height = ht;
        }
        override public function get width():Number{
            return (_width);
        }
        public function get focusIndex():int{
            return (this._focusIndex);
        }
        public function set focusIndex(value:int):void{
            this._focusIndex = value;
        }
        public function drawButtons(labels:Array, listeners:Array):void{
            var newButton:AutoSizeButton;
            var label:String;
            var listlen:uint;
            var j:uint;
            this._currentRow = (this._buttonsLoaded = (this._left = (_width = 0)));
            this._rows = [];
            this._rows[this._currentRow] = {};
            this._rows[this._currentRow].buttons = [];
            this._rows[this._currentRow].width = 0;
            this.removeChildrenExtended();
            this.setFocus();
            this._focusIndex = 0;
            var cachedLen:Number = this._cachedButtons.length;
            var len:uint = (this._length = labels.length);
            var i:uint;
            while (i < len) {
                label = labels[i];
                if (i < cachedLen){
                    newButton = this._cachedButtons[i];
                    newButton.textField.text = "";
                    newButton.visible = true;
                    newButton.label = (newButton.name = label);
                } else {
                    newButton = new AutoSizeButton();
                    newButton.height = _height;
                    this.addChild(newButton);
                    newButton.addEventListener(ComponentEvent.LABEL_CHANGE, this.buttonChangeHandler);
                    newButton.label = (newButton.name = label);
                    newButton.useHandCursor = true;
                    this._cachedButtons.push(newButton);
                };
                listlen = listeners.length;
                j = 0;
                while (j < listlen) {
                    newButton.addEventListener(MouseEvent.CLICK, listeners[j]);
                    j++;
                };
                newButton.drawNow();
                newButton.tabIndex = (i + 1);
                this._buttons.push({
                    button:newButton,
                    listeners:listeners
                });
                i++;
            };
            this.setFocusButton();
            this.setButtonStyles();
        }
        public function removeChildrenExtended():void{
            this._buttons.forEach(this.disableButtons);
            this._buttons = [];
        }
        public function buttonChangeHandler(evnt:ComponentEvent):void{
            var len:uint;
            var thisButton:AutoSizeButton = (evnt.target as AutoSizeButton);
            if ((this._left + thisButton.width) <= this.maxWidth){
                thisButton.x = this._left;
                this._left = (this._left + (thisButton.width + this.spacing));
                this._rows[this._currentRow].width = (this._left - this.spacing);
                this._rows[this._currentRow].buttons.push(thisButton);
                _width = Math.max(_width, this._rows[this._currentRow].width);
                thisButton.y = ((thisButton.height * this._currentRow) + (this.rowSpacing * this._currentRow));
            } else {
                this._left = (thisButton.x = 0);
                this._currentRow++;
                this._rows[this._currentRow] = {};
                this._rows[this._currentRow].buttons = [];
                this._rows[this._currentRow].width = thisButton.width;
                this._rows[this._currentRow].buttons.push(thisButton);
                thisButton.y = ((thisButton.height * this._currentRow) + (this.rowSpacing * this._currentRow));
                _width = Math.max(thisButton.width, _width);
                this._left = (this._left + (thisButton.width + this.spacing));
            };
            this._buttonsLoaded++;
            if (this._buttonsLoaded == this._length){
                len = this._rows.length;
                if (len > 1){
                    this._rows.forEach(this.centerButtonRow);
                    _height = (thisButton.y + thisButton.height);
                    this.dispatchEvent(new ComponentEvent(ComponentEvent.RESIZE));
                } else {
                    this.dispatchEvent(new ComponentEvent(ComponentEvent.RESIZE));
                };
            };
        }
        public function setFocusButton():void{
            this._focusButton = this._buttons[this._focusIndex].button;
            this._focusButton.setFocus();
            this._focusButton.drawFocus(true);
        }
        public function setFocusIndex(decrem:Boolean):void{
            var len:int = (this._buttons.length - 1);
            if (decrem){
                if (this._focusIndex == 0){
                    this._focusIndex = len;
                } else {
                    this._focusIndex--;
                };
            } else {
                if (this._focusIndex == len){
                    this._focusIndex = 0;
                } else {
                    this._focusIndex++;
                };
            };
            this.setFocusButton();
        }
        public function setButtonStyle(name:String, style:Object):void{
            var i:int;
            this.defaultButtonStyles[name] = style;
            if (((!((this._buttons == null))) && ((this._buttons.length > 0)))){
                i = 0;
                while (i < this._buttons.length) {
                    (this._buttons[i].button as UIComponent).setStyle(name, style);
                    i++;
                };
            };
        }
        protected function centerButtonRow(element, index:Number, arr:Array):void{
            var wid:uint = element.width;
            var buttons:Array = element.buttons;
            var i:uint;
            while (i < buttons.length) {
                buttons[i].x = (buttons[i].x + Math.round(((_width - wid) / 2)));
                i++;
            };
        }
        protected function disableButtons(element, index:Number, arr:Array):void{
            var button:AutoSizeButton = element.button;
            var listeners:Array = element.listeners;
            var len:uint = listeners.length;
            var i:uint;
            while (i < len) {
                button.removeEventListener(MouseEvent.CLICK, listeners[i]);
                i++;
            };
            button.visible = false;
        }
        protected function navigationKeyDownHandler(evnt:KeyboardEvent):void{
            switch (evnt.keyCode){
                case Keyboard.RIGHT:
                    this.setFocusIndex(false);
                    break;
                case Keyboard.LEFT:
                    this.setFocusIndex(true);
                    break;
                case Keyboard.ENTER:
                    this._focusButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
                    break;
            };
        }
        protected function keyFocusChangeHandler(evnt:FocusEvent):void{
            if (evnt.keyCode == Keyboard.TAB){
                evnt.preventDefault();
                this.setFocusIndex(evnt.shiftKey);
            };
        }
        private function setButtonStyles():void{
            var n:String;
            var len:int = this._buttons.length;
            var i:int;
            while (i < len) {
                for (n in this.defaultButtonStyles) {
                    (this._buttons[i].button as UIComponent).setStyle(n, this.defaultButtonStyles[n]);
                };
                i++;
            };
        }
        override protected function draw():void{
            this.setButtonStyles();
        }

    }
}//package com.yahoo.astra.fl.controls.containerClasses 
﻿package com.yahoo.astra.fl.controls.containerClasses {
    import fl.core.*;
    import fl.controls.*;
    import flash.display.*;
    import flash.text.*;
    import fl.events.*;
    import com.yahoo.astra.utils.*;
    import com.yahoo.astra.fl.utils.*;

    public class TitleBar extends Label {

        private static var defaultStyles:Object = {
            backgroundSkin:"Title_skin",
            textFormat:new TextFormat("Arial", 15, 0xFFFFFF, true, false, false, "", "", TextFormatAlign.LEFT, 0, 0, 0, 0)
        };

        private const TITLEBAR_STYLES:Object;

        protected var background:DisplayObject;
        public var maxWidth:int;
        private var _titleText:String = "";

        public function TitleBar(){
            this.TITLEBAR_STYLES = {
                backgroundSkin:"backgroundSkin",
                textFormat:"textFormat"
            };
            super();
            this.setTitleBarStyles();
        }
        public static function getStyleDefinition():Object{
            return (mergeStyles(defaultStyles));
        }

        override public function set text(value:String):void{
            if (value == this.text){
                return;
            };
            _html = false;
            this._titleText = value;
            textField.text = this._titleText;
            if (((componentInspectorSetting) && ((value == defaultLabel)))){
                return;
            };
            if (textField.autoSize != TextFieldAutoSize.NONE){
                invalidate(InvalidationType.SIZE);
            };
        }
        override public function get height():Number{
            var ht:Number = actualHeight;
            if (!isNaN(ht)){
                ht = _height;
            };
            if (!isNaN(ht)){
                ht = this.textField.height;
            };
            return (_height);
        }
        public function drawBackground(wid:Number):void{
            if (this.background != getDisplayObjectInstance(getStyleValue("backgroundSkin"))){
                if (this.getChildAt(0) == this.background){
                    this.removeChild(this.background);
                };
                this.background = getDisplayObjectInstance(getStyleValue("backgroundSkin"));
                this.addChildAt(this.background, 0);
            };
            if (this.background != null){
                this.background.width = wid;
                this.background.height = _height;
            };
        }
        override public function setStyle(style:String, value:Object):void{
            if ((((instanceStyles[style] === value)) && (!((value is TextFormat))))){
                return;
            };
            if ((value is InstanceFactory)){
                instanceStyles[style] = UIComponentUtil.getDisplayObjectInstance(this, (value as InstanceFactory).createInstance());
            } else {
                instanceStyles[style] = value;
            };
            invalidate(InvalidationType.STYLES);
        }
        override protected function configUI():void{
            super.configUI();
            this.textField.mouseEnabled = false;
            this.wordWrap = false;
            this.textField.autoSize = TextFieldAutoSize.LEFT;
        }
        override protected function drawLayout():void{
            var txtW:Number;
            var txtH:Number;
            var truncatedText:String;
            var tempText:String;
            var resized:Boolean;
            textField.width = width;
            textField.height = this.height;
            if (textField.autoSize != TextFieldAutoSize.NONE){
                txtW = textField.width;
                txtH = textField.height;
                resized = ((!((_width == txtW))) || (!((_height == txtH))));
                _width = txtW;
                _height = txtH;
                switch (textField.autoSize){
                    case TextFieldAutoSize.CENTER:
                        textField.x = ((actualWidth / 2) - (textField.width / 2));
                        break;
                    case TextFieldAutoSize.LEFT:
                        textField.x = 0;
                        break;
                    case TextFieldAutoSize.RIGHT:
                        textField.x = -((textField.width - actualWidth));
                        break;
                };
            } else {
                textField.width = actualWidth;
                textField.height = actualHeight;
                textField.x = 0;
            };
            if (((((((((!(isNaN(_width))) && (!(isNaN(this.maxWidth))))) && ((this.maxWidth > 0)))) && ((_width > 0)))) && ((_width > this.maxWidth)))){
                tempText = this._titleText;
                truncatedText = ((tempText.lastIndexOf(" "))>0) ? (tempText.slice(0, tempText.lastIndexOf(" ")) + "...") : (tempText.slice(0, (this.textField.getCharIndexAtPoint(this.maxWidth, Math.round((_height / 2))) - 3)) + "...");
                textField.text = truncatedText;
                this.drawLayout();
            } else {
                dispatchEvent(new ComponentEvent(ComponentEvent.RESIZE, true));
            };
        }
        private function setTitleBarStyles():void{
            var i:String;
            for (i in this.TITLEBAR_STYLES) {
                this.setStyle(this.TITLEBAR_STYLES[i], defaultStyles[i]);
            };
        }

    }
}//package com.yahoo.astra.fl.controls.containerClasses 
﻿package com.yahoo.astra.fl.managers {
    import fl.core.*;
    import flash.display.*;
    import com.settrade.streaming5.enumuration.*;
    import flash.events.*;
    import flash.text.*;
    import com.settrade.streaming5.dispatcher.*;
    import flash.filters.*;
    import com.yahoo.astra.fl.controls.containerClasses.*;
    import com.yahoo.astra.utils.*;
    import com.settrade.streaming5.message.control.*;

    public class AlertManager extends UIComponent {

        private static var _alertQueue:Array = [];
        private static var _alert:DialogBox;
        private static var _alertManager:AlertManager;
        private static var _stage:Stage;
        private static var _allowInstantiation:Boolean = true;
        public static var overlayAlpha:Number = 0.2;
        public static var modalBackgroundBlur:int = 2;
        public static var maxWidth:int = 360;
        public static var minWidth:int = 300;
        public static var padding:int = 5;
        public static var buttonSpacing:int = 2;
        public static var buttonRowSpacing:int = 1;
        public static var buttonHeight:int = 20;
        private static var _titleTextColor:uint;
        private static var closeAllButtonEn:Boolean;
        private static var initCloseAllButton:Boolean;
        public static var hasDropShadow:Boolean = true;
        public static var shadowDirection:String = "right";
        private static var _overlay:Sprite;

        protected var container:DisplayObject;
        protected var parentFilters:Array;
        public var titleBarStyles:Object;
        public var messageBoxStyles:Object;
        private var buttonStyles:Object;
        private var alertStyles:Object;
        private var _livePreviewTitleBar:Sprite;
        private var _livePreviewSkin:Sprite;

        public function AlertManager(container:DisplayObject=null){
            this.titleBarStyles = {};
            this.messageBoxStyles = {};
            this.buttonStyles = {};
            this.alertStyles = {};
            super();
            if (isLivePreview){
                this._livePreviewSkin = (getDisplayObjectInstance("Background_skin") as Sprite);
                this._livePreviewTitleBar = (getDisplayObjectInstance("Title_skin") as Sprite);
                this.addChild(this._livePreviewSkin);
                this.addChild(this._livePreviewTitleBar);
            } else {
                if (_allowInstantiation){
                    if (container != null){
                        _stage = container.stage;
                    } else {
                        if (this.stage){
                            _stage = stage;
                            parent.removeChild(this);
                        };
                    };
                    _allowInstantiation = false;
                    if (_stage){
                        _stage.addEventListener(Event.RESIZE, this.stageResizeHandler, false, 0, true);
                        _stage.addEventListener(Event.FULLSCREEN, this.stageResizeHandler, false, 0, true);
                        _stage.addChild(this);
                    };
                    _overlay = new Sprite();
                    addChild(_overlay);
                    _overlay.visible = false;
                };
            };
            closeAllButtonEn = false;
            initCloseAllButton = false;
        }
        private static function setStage(container:Stage):void{
            _stage = container;
            _stage.addEventListener(Event.RESIZE, _alertManager.stageResizeHandler, false, 0, true);
            _stage.addEventListener(Event.FULLSCREEN, _alertManager.stageResizeHandler, false, 0, true);
            _stage.addChild(_alertManager);
            _overlay = new Sprite();
            _alertManager.addChild(_overlay);
            _overlay.visible = false;
        }
        public static function get titleTextColor():uint{
            var tf:TextFormat;
            AlertManager.getInstance();
            if (_alertManager.titleBarStyles.textFormat != null){
                tf = (_alertManager.titleBarStyles.textFormat as TextFormat);
            } else {
                if (((!((_alert.titleBar == null))) && (!(((_alert.titleBar as UIComponent).getStyle("textFormat") == null))))){
                    tf = ((_alert.titleBar as UIComponent).getStyle("textFormat") as TextFormat);
                } else {
                    tf = new TextFormat("_sans", 13, 0xFF0000, true, false, false, "", "", TextFormatAlign.LEFT, 0, 0, 0, 0);
                };
            };
            return ((tf.color as uint));
        }
        public static function set titleTextColor(value:uint):void{
            var tempTf:TextFormat;
            if (isNaN(value)){
                return;
            };
            AlertManager.getInstance();
            if (_alertManager.titleBarStyles.textFormat != null){
                tempTf = (_alertManager.titleBarStyles.textFormat as TextFormat);
            } else {
                if (((!((_alert.titleBar == null))) && (!(((_alert.titleBar as UIComponent).getStyle("textFormat") == null))))){
                    tempTf = ((_alert.titleBar as UIComponent).getStyle("textFormat") as TextFormat);
                } else {
                    tempTf = new TextFormat("_sans", 13, 0xFF0000, true, false, false, "", "", TextFormatAlign.LEFT, 0, 0, 0, 0);
                };
            };
            AlertManager.setTitleBarStyle("textFormat", TextUtil.changeTextFormatProps(TextUtil.cloneTextFormat(tempTf), {color:value}));
        }
        public static function get textColor():uint{
            var tf:TextFormat;
            AlertManager.getInstance();
            if (_alertManager.messageBoxStyles.textFormat != null){
                tf = (_alertManager.messageBoxStyles.textFormat as TextFormat);
            } else {
                if (((!((_alert.messageBox == null))) && (!(((_alert.messageBox as UIComponent).getStyle("textFormat") == null))))){
                    tf = ((_alert.messageBox as UIComponent).getStyle("textFormat") as TextFormat);
                } else {
                    tf = new TextFormat("_sans", 13, 0xFF0000);
                };
            };
            return ((tf.color as uint));
        }
        public static function set textColor(value:uint):void{
            var tempTf:TextFormat;
            if (isNaN(value)){
                return;
            };
            AlertManager.getInstance();
            if (_alertManager.messageBoxStyles.textFormat != null){
                tempTf = (_alertManager.messageBoxStyles.textFormat as TextFormat);
            } else {
                if (((!((_alert.messageBox == null))) && (!(((_alert.messageBox as UIComponent).getStyle("textFormat") == null))))){
                    tempTf = ((_alert.messageBox as UIComponent).getStyle("textFormat") as TextFormat);
                } else {
                    tempTf = new TextFormat("_sans", 13, 0xFF0000);
                };
            };
            AlertManager.setMessageBoxStyle("textFormat", TextUtil.changeTextFormatProps(TextUtil.cloneTextFormat(tempTf), {color:value}));
        }
        public static function getInstance(container:DisplayObject=null):AlertManager{
            if (_alertManager == null){
                _allowInstantiation = true;
                _alertManager = new AlertManager(container);
                _allowInstantiation = false;
            };
            return (_alertManager);
        }
        public static function createAlert(container:DisplayObject, message:String, title:String="Alert", buttons:Array=null, callBackFunction:Function=null, iconClass:String=null, isModal:Boolean=true, props:Object=null):AlertManager{
            var newFilters:Array;
            AlertManager.getInstance(container);
            if (_stage == null){
                setStage(container.stage);
            };
            if (_alert == null){
                _alert = new DialogBox(_stage);
                _alertManager.addChild(_alert);
            };
            _alertManager.copyRendererStylesToChild(_alert.titleBar, _alertManager.titleBarStyles);
            _alertManager.copyRendererStylesToChild(_alert.messageBox, _alertManager.messageBoxStyles);
            _alertManager.setButtonStyles(_alertManager.buttonStyles);
            _alertManager.copyRendererStylesToChild(_alert, _alertManager.alertStyles);
            if (buttons == null){
                buttons = ["OK"];
            };
            var functions:Array = [];
            if (callBackFunction != null){
                functions.push(callBackFunction);
            };
            functions.push(_alertManager.manageQueue);
            var alertParams:Object = {
                message:message,
                title:title,
                isModal:isModal,
                buttons:buttons,
                functions:functions,
                iconClass:iconClass,
                props:props,
                container:container
            };
            if (_alertQueue.length == 0){
                _alert.maxWidth = ((((!((props == null))) && (!(isNaN(props.maxWidth))))) ? (Math.round(props.maxWidth) as int) : maxWidth);
                _alert.minWidth = ((((!((props == null))) && (!(isNaN(props.minWidth))))) ? (Math.round(props.minWidth) as int) : minWidth);
                _alert.padding = ((((!((props == null))) && (!(isNaN(props.padding))))) ? (Math.round(props.padding) as int) : padding);
                _alert.buttonHeight = ((((!((props == null))) && (!(isNaN(props.buttonHeight))))) ? (Math.round(props.buttonHeight) as int) : buttonHeight);
                _alert.buttonRowSpacing = ((((!((props == null))) && (!(isNaN(props.buttonRowSpacing))))) ? (Math.round(props.buttonRowSpacing) as int) : buttonRowSpacing);
                _alert.buttonSpacing = ((((!((props == null))) && (!(isNaN(props.buttonSpacing))))) ? (Math.round(props.buttonSpacing) as int) : buttonSpacing);
                _alert.hasDropShadow = ((((!((props == null))) && (!((props.hasDropShadow == null))))) ? props.hasDropShadow : hasDropShadow);
                _alert.shadowDirection = ((((!((props == null))) && (!((props.shadowDirection == null))))) ? props.shadowDirection : shadowDirection);
                if (((!((props == null))) && (!((props.titleBarStyles == null))))){
                    _alertManager.copyRendererStylesToChild(_alert.titleBar, props.titleBarStyles);
                };
                if (((!((props == null))) && (!((props.messageBoxStyles == null))))){
                    _alertManager.copyRendererStylesToChild(_alert.messageBox, props.messageBoxStyles);
                };
                if (((!((props == null))) && (!(isNaN(props.textColor))))){
                    _alert.messageBox.setStyle("textFormat", _alertManager.replaceUIComponentTextColor((_alert.messageBox as UIComponent), props.textColor));
                };
                if (((!((props == null))) && (!(isNaN(props.titleTextColor))))){
                    _alert.titleBar.setStyle("textFormat", _alertManager.replaceUIComponentTextColor((_alert.titleBar as UIComponent), props.titleTextColor));
                };
                if (((!((props == null))) && (!((props.buttonStyles == null))))){
                    _alertManager.setButtonStyles(props.buttonStyles);
                };
                if (((!((props == null))) && (!((props.alertStyles == null))))){
                    _alertManager.copyRendererStylesToChild(_alert, props.alertStyles);
                };
                _alert.update(message, title, buttons, functions, iconClass);
                _overlay.visible = isModal;
                if (isModal){
                    _alertManager.container = container;
                    newFilters = _alertManager.container.filters.concat();
                    _alertManager.parentFilters = _alertManager.container.filters.concat();
                    newFilters.push(_alertManager.getBlurFilter());
                    _alertManager.container.filters = newFilters;
                };
                notifyShowAlert();
            };
            _alertQueue.push(alertParams);
            if (_alertQueue.length >= 10){
                initCloseAllButton = true;
                handleMultipleAlert(10);
            };
            return (_alertManager);
        }
        public static function setTitleBarStyle(name:String, style:Object):void{
            AlertManager.getInstance();
            if (_alertManager.titleBarStyles[name] == style){
                return;
            };
            _alertManager.titleBarStyles[name] = style;
            if (((!((_alert == null))) && (!((_alert.titleBar == null))))){
                (_alert.titleBar as UIComponent).setStyle(name, style);
            };
        }
        public static function setMessageBoxStyle(name:String, style:Object):void{
            AlertManager.getInstance();
            if (_alertManager.messageBoxStyles[name] == style){
                return;
            };
            _alertManager.messageBoxStyles[name] = style;
            if (((!((_alert == null))) && (!((_alert.messageBox == null))))){
                (_alert.messageBox as UIComponent).setStyle(name, style);
            };
        }
        public static function setButtonStyle(name:String, style:Object):void{
            AlertManager.getInstance();
            if (_alertManager.buttonStyles[name] == style){
                return;
            };
            _alertManager.buttonStyles[name] = style;
            if (((!((_alert == null))) && (!((_alert.buttonBar == null))))){
                _alert.buttonBar.setButtonStyle(name, style);
            };
        }
        public static function setAlertStyle(name:String, style:Object):void{
            AlertManager.getInstance();
            if (_alertManager.alertStyles[name] == style){
                return;
            };
            _alertManager.alertStyles[name] = style;
            if (_alert != null){
                _alert.setStyle(name, style);
            };
        }
        public static function getQueueCount():int{
            return (_alertQueue.length);
        }
        protected static function handleMultipleAlert(no:int):void{
            var firstAlertQueue:Object;
            if ((((((_alertQueue.length >= no)) && ((closeAllButtonEn == false)))) && ((initCloseAllButton == true)))){
                firstAlertQueue = _alertQueue[0];
                if (firstAlertQueue.buttons.indexOf("Close All") == -1){
                    firstAlertQueue.buttons.push("Close All");
                };
                _alert.update(firstAlertQueue.message, firstAlertQueue.title, firstAlertQueue.buttons, firstAlertQueue.functions, firstAlertQueue.iconClass);
                closeAllButtonEn = true;
            };
        }
        private static function notifyShowAlert():void{
            var message:PopupStateChangeMessage = new PopupStateChangeMessage(PopupState.SHOWING);
            MessageDispatcher.getInstance().notifyControlMessage(message);
        }

        public function manageQueue(evnt:MouseEvent):void{
            var length:*;
            var params:Object;
            var props:Object;
            var newFilters:Array;
            if (evnt.target.name == "Close All"){
                length = _alertQueue.length;
                _alertQueue.splice(0, length);
                _alertManager.container.filters = _alertManager.parentFilters;
                _alert.visible = false;
                _overlay.visible = false;
                evnt.target.visible = false;
                closeAllButtonEn = false;
                initCloseAllButton = false;
                return;
            };
            _alertQueue.splice(0, 1);
            _alertManager.container.filters = _alertManager.parentFilters;
            if (_alertQueue.length > 0){
                _stage.setChildIndex(this, (_stage.numChildren - 1));
                params = _alertQueue[0];
                props = params.props;
                _alert.maxWidth = ((((!((props == null))) && (!(isNaN(props.maxWidth))))) ? (Math.round(props.maxWidth) as int) : maxWidth);
                _alert.minWidth = ((((!((props == null))) && (!(isNaN(props.minWidth))))) ? (Math.round(props.minWidth) as int) : minWidth);
                _alert.padding = ((((!((props == null))) && (!(isNaN(props.padding))))) ? (Math.round(props.padding) as int) : padding);
                _alert.buttonHeight = ((((!((props == null))) && (!(isNaN(props.buttonHeight))))) ? (Math.round(props.buttonHeight) as int) : buttonHeight);
                _alert.buttonRowSpacing = ((((!((props == null))) && (!(isNaN(props.buttonRowSpacing))))) ? (Math.round(props.buttonRowSpacing) as int) : buttonRowSpacing);
                _alert.buttonSpacing = ((((!((props == null))) && (!(isNaN(props.buttonSpacing))))) ? (Math.round(props.buttonSpacing) as int) : buttonSpacing);
                _alert.hasDropShadow = ((((!((props == null))) && (!((props.hasDropShadow == null))))) ? props.hasDropShadow : hasDropShadow);
                _alert.shadowDirection = ((((!((props == null))) && (!((props.shadowDirection == null))))) ? props.shadowDirection : shadowDirection);
                if (((!((props == null))) && (!((props.titleBarStyles == null))))){
                    _alertManager.copyRendererStylesToChild(_alert.titleBar, props.titleBarStyles);
                };
                if (((!((props == null))) && (!((props.messageBoxStyles == null))))){
                    _alertManager.copyRendererStylesToChild(_alert.messageBox, props.messageBoxStyles);
                };
                if (((!((props == null))) && (!(isNaN(props.textColor))))){
                    _alert.messageBox.setStyle("textFormat", _alertManager.replaceUIComponentTextColor((_alert.messageBox as UIComponent), props.textColor));
                };
                if (((!((props == null))) && (!(isNaN(props.titleTextColor))))){
                    _alert.titleBar.setStyle("textFormat", _alertManager.replaceUIComponentTextColor((_alert.titleBar as UIComponent), props.titleTextColor));
                };
                if (((!((props == null))) && (!((props.buttonStyles == null))))){
                    _alertManager.setButtonStyles(props.buttonStyles);
                };
                if (((!((props == null))) && (!((props.alertStyles == null))))){
                    _alertManager.copyRendererStylesToChild(_alert, props.alertStyles);
                };
                _alert.update(params.message, params.title, params.buttons, params.functions, params.iconClass);
                _overlay.visible = params.isModal;
                if (params.isModal){
                    _alertManager.container = params.container;
                    newFilters = _alertManager.container.filters.concat();
                    _alertManager.parentFilters = _alertManager.container.filters.concat();
                    newFilters.push(_alertManager.getBlurFilter());
                    _alertManager.container.filters = newFilters;
                };
                closeAllButtonEn = false;
                handleMultipleAlert(1);
                notifyShowAlert();
            } else {
                _alert.visible = false;
                closeAllButtonEn = false;
                initCloseAllButton = false;
                _overlay.visible = false;
                this.notifyHideAlert();
            };
        }
        public function getBlurFilter():BitmapFilter{
            var blurFilter:BlurFilter = new BlurFilter();
            blurFilter.blurX = modalBackgroundBlur;
            blurFilter.blurY = modalBackgroundBlur;
            blurFilter.quality = BitmapFilterQuality.HIGH;
            return (blurFilter);
        }
        override protected function configUI():void{
            super.configUI();
        }
        override protected function draw():void{
            if (this.isLivePreview){
                this._livePreviewSkin.width = this.width;
                this._livePreviewSkin.height = this.height;
                this._livePreviewTitleBar.width = this.width;
                this._livePreviewTitleBar.height = Math.min(20, (this.height / 5));
            } else {
                this.width = _stage.stageWidth;
                this.height = _stage.stageHeight;
                this.x = _stage.x;
                this.y = _stage.y;
                _overlay.x = (_overlay.y = 0);
                _overlay.width = this.width;
                _overlay.height = this.height;
                _overlay.graphics.clear();
                _overlay.graphics.beginFill(0xEEEEEE, overlayAlpha);
                _overlay.graphics.moveTo(0, 0);
                _overlay.graphics.lineTo(this.width, 0);
                _overlay.graphics.lineTo(this.width, this.height);
                _overlay.graphics.lineTo(0, this.height);
                _overlay.graphics.lineTo(0, 0);
                _overlay.graphics.endFill();
                if (_alert != null){
                    _alert.positionAlert();
                };
            };
        }
        protected function stageResizeHandler(evnt:Event):void{
            this.draw();
        }
        private function setButtonStyles(styleMap:Object):void{
            var n:String;
            for (n in styleMap) {
                _alert.buttonBar.setButtonStyle(n, styleMap[n]);
            };
        }
        private function copyRendererStylesToChild(child:UIComponent, styleMap:Object):void{
            var n:String;
            for (n in styleMap) {
                child.setStyle(n, styleMap[n]);
            };
        }
        private function replaceUIComponentTextColor(ui:UIComponent, value:uint):TextFormat{
            var tempTf:TextFormat;
            if (((!((ui == null))) && (!((ui.getStyle("textFormat") == null))))){
                tempTf = (ui.getStyle("textFormat") as TextFormat);
            } else {
                tempTf = new TextFormat("_sans", 13, value);
            };
            return (TextUtil.changeTextFormatProps(TextUtil.cloneTextFormat(tempTf), {color:value}));
        }
        private function notifyHideAlert():void{
            var message:PopupStateChangeMessage = new PopupStateChangeMessage(PopupState.HIDING);
            MessageDispatcher.getInstance().notifyControlMessage(message);
        }

    }
}//package com.yahoo.astra.fl.managers 
﻿package com.yahoo.astra.fl.utils {
    import fl.core.*;
    import flash.display.*;
    import flash.utils.*;
    import fl.managers.*;
    import com.yahoo.astra.utils.*;

    public class UIComponentUtil {

        public static function getDisplayObjectInstance(target:DisplayObject, input:Object):DisplayObject{
            var target:* = target;
            var input:* = input;
            if ((input is InstanceFactory)){
                return ((InstanceFactory(input).createInstance() as DisplayObject));
            };
            if ((((input is Class)) || ((input is Function)))){
                return ((new (input)() as DisplayObject));
            };
            if ((input is DisplayObject)){
                (input as DisplayObject).x = 0;
                (input as DisplayObject).y = 0;
                return ((input as DisplayObject));
            };
            var classDef:* = null;
            try {
                classDef = getDefinitionByName(input.toString());
            } catch(e:Error) {
                try {
                    classDef = (target.loaderInfo.applicationDomain.getDefinition(input.toString()) as Object);
                } catch(e:Error) {
                };
            };
            if (classDef == null){
                return (null);
            };
            return ((new (classDef)() as DisplayObject));
        }
        public static function getClassDefinition(target:Object):Class{
            var target:* = target;
            if ((target is Class)){
                return ((target as Class));
            };
            return ((getDefinitionByName(getQualifiedClassName(target)) as Class));
            var _slot1:* = e;
            if ((target is DisplayObject)){
                return ((target.loaderInfo.applicationDomain.getDefinition(getQualifiedClassName(target)) as Class));
                var _slot1:* = e;
            };
            return (null);
        }
        public static function getStyleValue(target:UIComponent, styleName:String):Object{
            var classDef:* = null;
            var defaultStyles:* = null;
            var target:* = target;
            var styleName:* = styleName;
            var value:* = target.getStyle(styleName);
            value = ((value) ? value : StyleManager.getComponentStyle(target, styleName));
            if (value){
                return (value);
            };
            classDef = UIComponentUtil.getClassDefinition(target);
            while (defaultStyles == null) {
                if (classDef["getStyleDefinition"] != null){
                    defaultStyles = classDef["getStyleDefinition"]();
                    break;
                };
                try {
                    classDef = (target.loaderInfo.applicationDomain.getDefinition(getQualifiedSuperclassName(classDef)) as Class);
                } catch(err:Error) {
                    try {
                        classDef = (getDefinitionByName(getQualifiedSuperclassName(classDef)) as Class);
                    } catch(e:Error) {
                        defaultStyles = UIComponent.getStyleDefinition();
                        break;
                    };
                };
            };
            if (defaultStyles.hasOwnProperty(styleName)){
                return (defaultStyles[styleName]);
            };
            return (null);
        }

    }
}//package com.yahoo.astra.fl.utils 
﻿package com.yahoo.astra.utils {
    import flash.text.*;

    public class TextUtil {

        public static function getTextWidth(textValue:String, tf:TextFormat):Number{
            var textField:TextField = new TextField();
            textField.selectable = false;
            textField.autoSize = TextFieldAutoSize.LEFT;
            textField.text = textValue;
            textField.setTextFormat(tf);
            return (Math.max(textField.textWidth, textField.width));
        }
        public static function getTextHeight(textValue:String, tf:TextFormat):Number{
            var textField:TextField = new TextField();
            textField.selectable = false;
            textField.autoSize = TextFieldAutoSize.LEFT;
            textField.text = textValue;
            textField.setTextFormat(tf);
            return (textField.textHeight);
        }
        public static function changeTextFormatProps(tf:TextFormat, tfProps:Object):TextFormat{
            var i:String;
            for (i in tfProps) {
                tf[i] = tfProps[i];
            };
            return (tf);
        }
        public static function cloneTextFormat(tf:TextFormat):TextFormat{
            return (new TextFormat(tf.font, tf.size, tf.color, tf.bold, tf.italic, tf.underline, tf.url, tf.target, tf.align, tf.leftMargin, tf.rightMargin, tf.indent, tf.leading));
        }

    }
}//package com.yahoo.astra.utils 
﻿package com.yahoo.astra.utils {
    import flash.utils.*;

    public class InstanceFactory {

        private var _targetClass:Class;
        private var _properties:Object;
        private var _methods:Object;

        public function InstanceFactory(targetClass:Class, properties:Object=null, methods:Object=null){
            this._targetClass = Object;
            super();
            this.targetClass = targetClass;
            this.properties = properties;
            this.methods = methods;
        }
        public function get targetClass():Class{
            return (this._targetClass);
        }
        public function set targetClass(value:Class):void{
            this._targetClass = value;
        }
        public function get properties():Object{
            return (this._properties);
        }
        public function set properties(value:Object):void{
            this._properties = value;
        }
        public function get methods():Object{
            return (this._methods);
        }
        public function set methods(value:Object):void{
            this._methods = value;
        }
        public function createInstance():Object{
            var instance:Object = new this.targetClass();
            this.restoreInstance(instance);
            return (instance);
        }
        public function restoreInstance(instance:Object):void{
            var propName:String;
            var methodName:String;
            var args:Array;
            if (!(instance is this.targetClass)){
                throw (new ArgumentError(("Value to be initialized must be an instance of " + getQualifiedClassName(this.targetClass))));
            };
            if (this.properties){
                for (propName in this.properties) {
                    if (instance.hasOwnProperty(propName)){
                        instance[propName] = this.properties[propName];
                    };
                };
            };
            if (this.methods){
                for (methodName in this.methods) {
                    if ((instance[methodName] is Function)){
                        args = (this.methods[methodName] as Array);
                        instance[methodName].apply(instance, args);
                    };
                };
            };
        }

    }
}//package com.yahoo.astra.utils 
﻿package com.data {

    public class DefaultData {

        public static const SPARKWINLOSS:String = ((((((((((("<chart palette='1' caption='England' subcaption='(2007)' canvasLeftMargin='70'>" + "<dataset>") + "<set value='W' />") + "<set value='L' />") + "<set value='L' />") + "<set value='L' />") + "<set value='L' />") + "<set value='L' />") + "<set value='L' />") + "<set value='L' />") + "</dataset>\t") + "</chart>");
        public static const THERMOMETER:String = (("<chart palette='3' bgColor='FFFFFF' thmFillColor='FF5904' bgAlpha='0' showBorder='0' lowerLimit='0' upperLimit='100' lowerLimitDisplay='Low' upperLimitDisplay='High' numberSuffix='%25' majorTMHeight='4' minorTMNumber='5' useSameFillColor='0' showTickValues='1' decimalPrecision='0' chartTopMargin='25' chartLeftMargin='20' thmbulbRadius='10'>" + "<value>78.9</value>") + "</chart>");
        public static const BULLET:String = ((((((((("<chart palette='3' animation='1' lowerLimit='0' upperLimit='100' showShadow='1' caption='Revenue' colorRangeFillRatio='0,10,80,10' showColorRangeBorder='0' subcaption='US $ (1,000s)' roundRadius='0' numberPrefix='$' numberSuffix='K' showValue='1'>" + "<colorRange>") + "<color minValue='0' maxValue='30' />") + "<color minValue='30' maxValue='50' />") + "<color minValue='50' maxValue='70' />") + "<color minValue='70' maxValue='100' />") + "</colorRange>") + "<value>78.9</value>") + "<target>80</target>") + "</chart>");
        public static const BUBBLE_CHART:String = (((((((((((((((((((((((((("<chart palette='3' numberPrefix='$' is3D='1' animation='1' clipBubbles='1' xAxisMaxValue='100' showPlotBorder='0' xAxisName='Stickiness' yAxisName='Cost Per Service' chartRightMargin='30'>" + "<categories>") + "<category label='0%' x='0' />") + "<category label='20%' x='20' showVerticalLine='1'/>") + " <category label='40%' x='40' showVerticalLine='1'/>") + "<category label='60%' x='60' showVerticalLine='1'/>") + "<category label='80%' x='80' showVerticalLine='1'/>") + "<category label='100%' x='100' showVerticalLine='1'/>") + "</categories>") + "<dataSet showValues='0'>") + "<set x='30' y='1.3' z='116'  name='Traders'/>") + "<set x='32' y='3.5' z='99' name='Farmers'/>") + "<set x='8' y='2.1' z='33' name='Individuals'/>") + "<set x='62' y='2.5' z='72' name='Medium Business Houses'/>") + "<set x='78' y='2.3' z='55' name='Corporate Group A'/>") + "<set x='75' y='1.4' z='58' name='Corporate Group C'/>") + "<set x='68' y='3.7' z='80' name='HNW Individuals'/>") + "<set x='50' y='2.1' z='105' name='Small Business Houses'/>") + "</dataSet>") + "<trendlines>") + "<line startValue='2.5' isTrendZone='0' displayValue='Median Cost' color='0372AB'/>") + "</trendlines>") + "<vTrendlines>") + "<line startValue='0' endValue='60' isTrendZone='1' displayValue='Potential Wins' color='663333' alpha='10'/>") + "<line startValue='60' endValue='100' isTrendZone='1' displayValue='Cash Cows' color='990099' alpha='5'/>") + "</vTrendlines>") + "</chart>");
        public static const HLINEARGAUGE:String = (((((((((((((((("<Chart bgColor='FFFFFF' bgAlpha='0' showBorder='0' upperLimit='100' lowerLimit='-50' gaugeRoundRadius='5' chartBottomMargin='10' ticksBelowGauge='0' " + "showGaugeLabels='0' valueAbovePointer='0' pointerOnTop='1' pointerRadius='9'>") + "<colorRange>") + "<color minValue='0' maxValue='100' name='GOOD'  />") + "<color minValue='35' maxValue='70' name='WEAK' />") + "<color minValue='70' maxValue='100' name='BAD' />") + "</colorRange>") + "<value>-11</value>") + "<styles>") + "<definition>") + "<style name='ValueFont' type='Font' bgColor='333333' size='10' color='FFFFFF'/>") + "</definition>") + "<application>") + "<apply toObject='VALUE' styles='valueFont'/>") + "</application>") + "</styles>") + "</Chart>");
        public static const STACKED_CHARTS:String = ((((((((((((((((((((((((((("<chart caption='Product-wise sales' subcaption='Comparison' numberPrefix='$' chartRightMargin='40' xAxisName='Product' yAxisName='Revenue' >" + "<categories>") + "<category label='Product A' />") + "<category label='Product B' />") + "<category label='Product C' />") + "<category label='Product D' />") + "</categories>") + "<dataset seriesName='2008'>") + "<set value='235000' />") + "<set value='125100' />") + "<set value='464200' />") + "<set value='434500' />") + "</dataset>") + "<dataset seriesName='2007'>") + "<set value='198000' />") + "<set value='109300' />") + "<set value='253600' />") + "<set value='345100' />") + "</dataset>") + "<styles>") + "<definition>") + "<style type='font' name='captionFont' size='16' />") + "</definition>") + "<application>") + "<apply toObject='caption' styles='captionFont' />") + "</application>") + "</styles>") + "</chart>");
        public static const SINGLE_SERIES:String = (((((((("<chart animation='1' caption='Product-wise sales' subcaption='For the year 2008' xAxisName='Product' yAxisName='Revenue' numberPrefix='$' chartRightMargin='40'>" + "<set label='Product A' value='235000' />") + "<set label='Product B' value='125100' />") + "<set label='Product C' value='464200' />") + "<set label='Product D' value='434500' />") + "<styles>") + "<definition><style type='font' name='captionFont' size='16' /></definition><application><apply toObject='caption' styles='captionFont' /></application>") + "</styles>") + "</chart>");
        public static const BULB:String = ((((((("<chart bgColor='C4D283, FFFFFF' decimalPrecision='0' numberSuffix='%25'  lowerLimit='0' upperLimit='100'>" + "<colorRange>") + "<color minValue='0' maxValue='50' name='Normal' code='8BBA00' />") + "<color minValue='50' maxValue='75' name='Warning' code='F6BD0F' />") + "<color minValue='75' maxValue='100' name='Danger' code='FF654F' />") + "</colorRange>") + "<value>52</value>") + "</chart>");
        public static const SPARKCOLUMN:String = (((((((((((((((((("<chart palette='2' caption='Revenue (USD)' subcaption='(12 months)' periodLength='4' highColor='99CC00' lowColor='CC0000'  numberPrefix='$'>" + "<dataset>") + "<set value='3400' />") + "<set value='4400' />") + "<set value='3400' />") + "<set value='7600' />") + "<set value='9400' />") + "<set value='5800' />") + "<set value='2300' />") + "<set value='4600' />") + "<set value='6500' />") + "<set value='6400' />") + "<set value='3400' />") + "<set value='7600' />") + "</dataset>") + "<trendlines>") + "<line startValue='7000' color='FFCC00'/>") + "</trendlines>") + "</chart>");
        public static const STACKEDCOLUMN3DLINEDY:String = (((((((((((((((((((((((((((((((((("<chart caption='Product-wise sales' subcaption='Comparison' numberPrefix='$' chartRightMargin='40' xAxisName='Product' yAxisName='Revenue' >" + "<categories>") + "<category label='Product A' />") + "<category label='Product B' />") + "<category label='Product C' />") + "<category label='Product D' />") + "</categories>") + "<dataset seriesName='2008'>") + "<set value='235000' />") + "<set value='125100' />") + "<set value='464200' />") + "<set value='434500' />") + "<set value='434500' />") + "</dataset>") + "<dataset seriesName='2007'>") + "<set value='198000' />") + "<set value='109300' />") + "<set value='253600' />") + "<set value='345100' />") + "</dataset>") + "<dataset seriesName='2007' parentYAxis='S'>") + "<set value='18000' />") + "<set value='179300' />") + "<set value='223600' />") + "<set value='145100' />") + "</dataset>") + "<styles>") + "<definition>") + "<style type='font' name='captionFont' size='16' />") + "</definition>") + "<application>") + "<apply toObject='caption' styles='captionFont' />") + "</application>") + "</styles>") + "</chart>");
        public static const SCATTER_CHART:String = ((((((((((((((((((((((((((((((((((((((((((((((((((((("<chart palette='2' caption='Server Performance' numDivLines='13' yAxisName='Response Time (sec)' xAxisName='Server Load (TPS)' rotateNames='0' showLegend='1' showNames='1' xAxisMaxValue='100' xAxisMinValue='20' yAxisMaxValue='7' decimals='1'>" + "<categories verticalLineColor='666666' verticalLineThickness='1'>") + "<category label='20' x='20' showVerticalLine='1'/>") + "<category label='30' x='30' showVerticalLine='1'/>") + "<category label='40' x='40' showVerticalLine='1'/>") + "<category label='50' x='50' showVerticalLine='1'/>") + "<category label='60' x='60' showVerticalLine='1'/>") + "<category label='70' x='70' showVerticalLine='1'/>") + "<category label='80' x='80' showVerticalLine='1'/>") + "<category label='90' x='90' showVerticalLine='1'/>") + "<category label='100' x='100' showVerticalLine='0'/>") + "</categories>") + "<dataSet seriesName='Server 1' color='009900' anchorSides='3' anchorRadius='4' anchorBgColor='D5FFD5' anchorBorderColor='009900' >") + "<set y='2.4' x='21' />") + "<set y='3.5' x='32' />") + "<set y='2.5' x='43' />") + "<set y='4.1' x='48' />") + "<set y='3.5' x='50' />") + "<set y='4.6' x='56' />") + "<set y='4.8' x='59' />") + "<set y='4.9' x='73' />") + "<set y='4.6' x='89' />") + "<set y='4.2' x='93' />") + "</dataSet>") + "<dataSet seriesName='Server 2' color='0000FF' anchorSides='4' anchorRadius='4' anchorBgColor='C6C6FF' anchorBorderColor='0000FF'>") + "<set y='1.4' x='23'/>") + "<set y='1.5' x='29'/>") + "<set y='1.5' x='33'/>") + "<set y='1.1' x='41'/>") + "<set y='1.5' x='47'/>") + "<set y='1.6' x='49'/>") + "<set y='1.8' x='51'/>") + "<set y='1.6' x='57'/>") + "<set y='1.2' x='58'/>") + "<set y='1.9' x='61'/>") + "<set y='1.1' x='63'/>") + "<set y='1.9' x='64'/>") + "<set y='1.7' x='71'/>") + "<set y='1.1' x='77'/>") + "<set y='1.3' x='79'/>") + "<set y='1.7' x='83'/>") + "<set y='1.8' x='89'/>") + "<set y='1.9' x='91'/>") + "<set y='1.0' x='93'/>") + "</dataSet>") + "<vTrendlines>") + "<line startValue='20' endValue='65' alpha='5' color='00FF00' />") + "<line startValue='65' endValue='75' alpha='15' color='FFFF00' />") + "<line startValue='75' endValue='100' alpha='15' color='FF0000' />") + "</vTrendlines>") + "<hTrendlines>") + "<line startValue='5.2' displayValue='Check' lineThickness='2' color='FF0000' valueOnRight='1' dashed='1' dashGap='5'/>") + "</hTrendlines>") + "</chart>");
        public static const ANGULARGAUGE:String = ((((((((((((((((("<chart bgColor='FFFFFF' upperLimit='100' lowerLimit='0' showLimits='1' baseFontColor='666666'  majorTMNumber='11' majorTMColor='666666'  majorTMHeight='8' minorTMNumber='5' minorTMColor='666666' " + "minorTMHeight='3' pivotRadius='20' showGaugeBorder='0' gaugeOuterRadius='100' gaugeInnerRadius='90' gaugeOriginX='170' gaugeOriginY='170' gaugeScaleAngle='320' displayValueDistance='10' ") + "placeValuesInside='1' gaugeFillMix='' pivotFillMix='{F0EFEA}, {BEBCB0}' pivotBorderColor='BEBCB0' pivotfillRatio='80,20' showShadow='0' origW='340' origH='340' autoScale='1' >") + "<colorRange>") + "<color minValue='0' maxValue='80' code='00FF00' alpha='0'/>") + "<color minValue='80' maxValue='100' name='Danger' code='FF0000' alpha='50'/>") + "</colorRange>") + "<dials>") + "<dial value='65' bordercolor='FFFFFF' bgColor='bebcb0, f0efea, bebcb0' borderAlpha='0' baseWidth='10' topWidth='3'/>") + "</dials>") + "<annotations origW='340' origH='340' autoScale='1' >") + "<annotationGroup xPos='170' yPos='170' fillRatio='10,125,254' fillPattern='radial'>") + "<annotation type='circle' xPos='0' yPos='0' radius='150' borderColor= 'bebcb0' fillAsGradient='1' fillColor='f0efea, bebcb0'  fillRatio='85,15'/>") + "<annotation type='circle' xPos='0' yPos='0' radius='120' fillColor='bebcb0, f0efea' fillRatio='85,15' />") + "<annotation type='circle' xPos='0' color='FFFFFF' yPos='0' radius='100' borderColor= 'f0efea' />") + "</annotationGroup>") + "</annotations>") + "</chart>");
        public static const MULTI_SERIES:String = (((((((((((((((((((((((((((((("<chart caption='Product-wise sales' subcaption='Comparison' numberPrefix='$'  chartRightMargin='40' xAxisName='Product' yAxisName='Revenue' >" + "<categories>") + "<category label='Product A' />") + "<category label='Product B' />") + "<category label='Product C' />") + "<category label='Product D' />") + "<category label='Product E' />") + "</categories>") + "<dataset seriesName='2008'>") + "<set value='235000' />") + "<set value='125100' />") + "<set value='464200' />") + "<set value='434500' />") + "<set value='368500' />") + "</dataset>") + "<dataset seriesName='2007'>") + "<set value='198000' />") + "<set value='409300' />") + "<set value='253600' />") + "<set value='345100' />") + "<set value='42100' />") + "</dataset>") + "<styles>") + "<definition>") + "<style type='font' name='captionFont' size='16' />") + "</definition>") + "<application>") + "<apply toObject='caption' styles='captionFont' />") + "</application>") + "</styles>") + "</chart>");
        public static const COMBINATION_CHARTS:String = ((((((((((((((((((((((((((("<chart caption='Product-wise sales' subcaption='Comparison' numberPrefix='$'  chartRightMargin='40' xAxisName='Product' yAxisName='Revenue' >" + "<categories>") + "<category label='Product A' />") + "<category label='Product B' />") + "<category label='Product C' />") + "<category label='Product D' />") + "</categories>") + "<dataset seriesName='2008'>") + "<set value='235000' />") + "<set value='125100' />") + "<set value='464200' />") + "<set value='434500' />") + "</dataset>") + "<dataset seriesName='2007' renderAs='Line'>") + "<set value='198000' />") + "<set value='109300' />") + "<set value='253600' />") + "<set value='345100' />") + "</dataset>") + "<styles>") + "<definition>") + "<style type='font' name='captionFont' size='16' />") + "</definition>") + "<application>") + "<apply toObject='caption' styles='captionFont' />") + "</application>") + "</styles>") + "</chart>");
        public static const FUNNEL_PYRAMID:String = (((((((((((((("<chart caption='Conversion Ratio' subcaption='May 2007' decimals='1' baseFontSize='11' isSliced='0' useSameSlantAngle='1' isHollow='0' labelDistance='15'>" + "<set label='Website Visits' value='385634' />") + "<set label='Downloads' value='175631' />") + "<set label='Interested to buy' value='84564' /> ") + "<set label='Contract finalized' value='35654' />") + "<set label='Purchased' value='18342' />") + "<styles>") + "<definition>") + "<style type='font' name='captionFont' size='15' />") + "</definition>") + "<application>") + "<apply toObject='CAPTION' styles='captionFont' />") + "</application>") + "</styles>") + "</chart>");
        public static const LED:String = ((((((("<chart chartBottomMargin='5' lowerLimit='0' upperLimit='100' lowerLimitDisplay='Low' upperLimitDisplay='High' numberSuffix='%25' showTickMarks='1' tickValueDistance='0'  majorTMNumber='5' majorTMHeight='4' minorTMNumber='0' showTickValues='1' decimalPrecision='0' ledGap='1' ledSize='1' ledBoxBgColor='333333' ledBorderColor='666666' borderThickness='2' chartRightMargin='20' >" + "<colorRange>") + "<color minValue='0' maxValue='30' code='FF0000' />") + "<color minValue='30' maxValue='50' code='FFFF00' />") + "<color minValue='50' maxValue='100' code='00FF00' />") + "</colorRange>") + "<value>70</value>") + "</chart>");
        public static const COMBINATION_DY_CHARTS:String = ((((((((((((((((((((((((((("<chart caption='Product-wise sales' subcaption='Comparison' numberPrefix='$' chartRightMargin='40' PYAxisName='Revenue' SYAxisName='Quantity'>" + "<categories>") + "<category label='Product A' />") + "<category label='Product B' />") + "<category label='Product C' />") + "<category label='Product D' />") + "</categories>") + "<dataset seriesName='Revenue'>") + "<set value='235000' />") + "<set value='125100' />") + "<set value='464200' />") + "<set value='434500' />") + "</dataset>") + "<dataset seriesName='Units' parentYAxis='S' renderAs='Line'>") + "<set value='345' />") + "<set value='434' />") + "<set value='546' />") + "<set value='123' />") + "</dataset>") + "<styles>") + "<definition>") + "<style type='font' name='captionFont' size='16' />") + "</definition>") + "<application>") + "<apply toObject='caption' styles='captionFont' />") + "</application>") + "</styles>") + "</chart>");
        public static const SPARKLINE:String = (((((((((((((((((("<chart caption='Profit' palette='1' canvasLeftMargin='110'>" + "<dataset>") + "<set value='3400' />") + "<set value='4400' />") + "<set value='3400' />") + "<set value='7600' />") + "<set value='9400' />") + "<set value='5800' />") + "<set value='2300' />") + "<set value='4600' />") + "<set value='6500' />") + "<set value='6400' />") + "<set value='3400' />") + "<set value='7600' />") + "</dataset>") + "<trendlines>") + "<line startValue='7000' color='FFCC00'/>") + "</trendlines>") + "</chart>");
        public static const GANTT:String = ((((((((((((((((((((((((((((((("<chart dateFormat='dd/mm/yyyy' ganttLineColor='CCCCCC' ganttLineAlpha='20' gridBorderAlpha='20' showTaskNames='1' hoverCapBgColor='F1F1F1' hoverCapBorderColor='333333' paletteThemeColor='333333'>" + "<categories bgColor='333333' baseFont='Arial' baseFontCOlor='FFFFFF' baseFontSize='12'>") + "<category start='1/1/2005' end='31/5/2005' align='center' name='Sales Territory Assignment' fontColor='ffffff' isBold='1' fontSize='16'/>") + "</categories>") + "<categories font='Arial' fontColor='ffffff' isBold='1' fontSize='12' bgColor='333333'>") + "<category start='1/1/2005' end='31/1/2005' name='January'/>") + "<category start='1/2/2005' end='28/2/2005' name='February'/>") + "<category start='1/3/2005' end='31/3/2005' name='March'/>") + "<category start='1/4/2005' end='30/4/2005' name='April'/>") + "<category start='1/5/2005' end='31/5/2005' name='May'/>") + "</categories>") + "<processes headerbgColor='333333' fontColor='ffffff' fontSize='12' bgColor='333333' align='right'>") + "<process Name='Tom' id='1'/>") + "<process Name='Harry' id='2'/>") + "<process Name='Mary' id='4'/>") + "<process Name='Mike' id='3'/>") + "</processes>") + "<tasks color='' alpha='' font='' fontColor='' fontSize='' isAnimated='1'>") + "<task name='North' processId='1' start='3/1/2005' end='4/2/2005' Id='1_1' color='e1f5ff' borderColor='AFD8F8'/>") + "<task name='East' processId='1' start='6/2/2005' end='24/3/2005' Id='1_2' color='e1f5ff' borderColor='AFD8F8'/>") + "<task name='Vacation' processId='1' start='25/3/2005' end='18/4/2005' Id='1_3' color='e1f5ff' borderColor='AFD8F8' height='2' showBorder='1'/>") + "<task name='South' processId='1' start='18/4/2005' end='24/5/2005' Id='1_4' color='e1f5ff' borderColor='AFD8F8'/>") + "<task name='South' processId='2' start='15/1/2005' end='5/3/2005' Id='2_1' color='F6BD0F' borderColor='F6BD0F'/>") + "<task name='West' processId='2' start='21/3/2005' end='10/5/2005' Id='2_2' color='F6BD0F' borderColor='F6BD0F'/>") + "<task name='Global' processId='3' start='7/1/2005' end='26/5/2005' Id='3_1' width='12' color='8BBA00' borderColor='8BBA00'/>") + "<task name='South' processId='4' start='13/2/2005' end='19/4/2005' Id='4_1' width='12' color='FF654F' borderColor='FF654F'/>") + "</tasks>") + "<connectors>") + "<connector fromTaskId='1_2' toTaskId='2_2' color='AFD8F8' thickness='2'/>") + "<connector fromTaskId='2_1' toTaskId='4_1' color='F7CB41' thickness='2'/>") + "</connectors>") + "</chart>");
        public static const CYLINDER:String = (("<chart upperLimit='100' lowerLimit='0'>" + "<value>32</value>") + "</chart>");

    }
}//package com.data 
﻿package com.events {
    import flash.events.*;

    public class FCEvent extends Event {

        public static const FCRenderEvent:String = "FCRenderEvent";
        public static const FCMessageEvent:String = "FCMessageEvent";
        public static const FCAlertEvent:String = "FCAlertEvent";
        public static const FCErrorEvent:String = "FCErrorEvent";
        public static const FCExported:String = "FCExported";
        public static const FCDataXMLInvalidEvent:String = "FCDataXMLInvalidEvent";
        public static const FCClickEvent:String = "FCClickEvent";
        public static const FCLoadEvent:String = "FCLoadEvent";
        public static const FCChartUpdatedEvent:String = "FCChartUpdatedEvent";
        public static const FCNoDataToDisplayEvent:String = "FCNoDataToDisplayEvent";
        public static const FCDataLoadedEvent:String = "FCDataLoadedEvent";
        public static const FCDataLoadErrorEvent:String = "FCDataLoadErrorEvent";

        public var param;

        public function FCEvent(_arg1:String, _arg2):void{
            super(_arg1);
            this.param = _arg2;
        }
        override public function clone():Event{
            return (new FCEvent(type, param));
        }

    }
}//package com.events 
﻿package com.utils {
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import flash.net.*;

    public class ImageUtils {

        public static const V_ALIGN_TOP:String = "top";
        public static const H_ALIGN_MIDDLE:String = "middle";
        public static const V_ALIGN_BOTTOM:String = "bottom";
        public static const DISPLAYMODE_CENTER:String = "center";
        public static const DISPLAYMODE_TILE:String = "tile";
        public static const H_ALIGN_RIGHT:String = "right";
        public static const DISPLAYMODE_STRETCH:String = "stretch";
        public static const DISPLAYMODE_FIT:String = "fit";
        public static const H_ALIGN_LEFT:String = "left";
        public static const DISPLAYMODE_NONE:String = "none";
        public static const DISPLAYMODE_FILL:String = "fill";
        public static const V_ALIGN_MIDDLE:String = "middle";

        private static var mcLoader:Loader;

        public static function setFillDisplayMode(_arg1:DisplayObject, _arg2:Sprite, _arg3:Number, _arg4:Number, _arg5:Number):void{
            var _local6:Matrix;
            var _local7:Number;
            var _local8:Number;
            var _local9:Number;
            var _local10:Number;
            var _local11:Number;
            _local6 = new Matrix();
            _local6.identity();
            _local7 = (_arg3 - (_arg5 * 2));
            _local8 = (_arg4 - (_arg5 * 2));
            _local9 = (_arg1.width / _arg1.height);
            _local10 = (_local7 / _local8);
            _local11 = ((_local9)>_local10) ? (_local8 / _arg1.height) : (_local7 / _arg1.width);
            _local6.scale(_local11, _local11);
            _arg1.transform.matrix = _local6;
            setMaskMcOf(_arg1, _arg2, _arg3, _arg4, _arg5);
        }
        public static function setStretchDisplayMode(_arg1:DisplayObject, _arg2:Number, _arg3:Number, _arg4:Number):void{
            setAlignment(_arg1, _arg2, _arg3, _arg4, V_ALIGN_TOP, H_ALIGN_LEFT);
            _arg1.width = (_arg2 - (_arg4 * 2));
            _arg1.height = (_arg3 - (_arg4 * 2));
        }
        public static function setDisplayMode(_arg1:String, _arg2:DisplayObject, _arg3:Sprite, _arg4:Number, _arg5:Number, _arg6:Number, _arg7:String):DisplayObject{
            _arg7 = _arg7.toLowerCase();
            switch (_arg7){
                case DISPLAYMODE_CENTER:
                    setCenterDisplayMode(_arg2, _arg3, _arg4, _arg5, _arg6);
                    break;
                case DISPLAYMODE_STRETCH:
                    setStretchDisplayMode(_arg2, _arg4, _arg5, _arg6);
                    break;
                case DISPLAYMODE_TILE:
                    return (setTileDisplayMode(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6));
                case DISPLAYMODE_FIT:
                    setFitDisplayMode(_arg2, _arg3, _arg4, _arg5, _arg6);
                    break;
                case DISPLAYMODE_FILL:
                    setFillDisplayMode(_arg2, _arg3, _arg4, _arg5, _arg6);
                    break;
                default:
                    setNoneDisplayMode(_arg2, _arg3, _arg4, _arg5, _arg6);
            };
            return (_arg2);
        }
        public static function setNoneDisplayMode(_arg1:DisplayObject, _arg2:Sprite, _arg3:Number, _arg4:Number, _arg5:Number):void{
            setMaskMcOf(_arg1, _arg2, _arg3, _arg4, _arg5);
        }
        private static function setMaskMcOf(_arg1:DisplayObject, _arg2:Sprite, _arg3:Number, _arg4:Number, _arg5:Number):void{
            var _local6:Sprite;
            _local6 = new Sprite();
            _arg3 = (_arg3 - _arg5);
            _arg4 = (_arg4 - _arg5);
            _local6.graphics.beginFill(0);
            _local6.graphics.moveTo(_arg5, _arg5);
            _local6.graphics.lineTo(_arg3, _arg5);
            _local6.graphics.lineTo(_arg3, _arg4);
            _local6.graphics.lineTo(_arg5, _arg4);
            _local6.graphics.lineTo(_arg5, _arg5);
            _local6.graphics.endFill();
            _arg1.mask = _local6;
            _arg2.addChild(_local6);
        }
        public static function setAlignment(_arg1:DisplayObject, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:String, _arg6:String):void{
            switch (_arg5.toLowerCase()){
                case V_ALIGN_TOP:
                    _arg1.y = _arg4;
                    break;
                case V_ALIGN_MIDDLE:
                    _arg1.y = ((_arg3 / 2) - (_arg1.height / 2));
                    break;
                case V_ALIGN_BOTTOM:
                    _arg1.y = ((_arg3 - _arg1.height) - _arg4);
                    break;
            };
            switch (_arg6.toLowerCase()){
                case H_ALIGN_LEFT:
                    _arg1.x = _arg4;
                    break;
                case H_ALIGN_MIDDLE:
                    _arg1.x = ((_arg2 / 2) - (_arg1.width / 2));
                    break;
                case H_ALIGN_RIGHT:
                    _arg1.x = ((_arg2 - _arg1.width) - _arg4);
                    break;
            };
        }
        public static function setPropOf(_arg1:DisplayObject, _arg2:Object):void{
            switch (_arg2.propName.toLowerCase()){
                case "bgswfalpha":
                    _arg1.alpha = Math.abs((_arg2.value / 100));
                    break;
                case "bgimagealpha":
                    _arg1.alpha = Math.abs((_arg2.value / 100));
                    break;
                case "bgimagevalign":
                    break;
                case "bgimagehalign":
                    break;
                case "bgimagescale":
                    _arg1.scaleX = Math.abs((_arg2.value / 100));
                    _arg1.scaleY = Math.abs((_arg2.value / 100));
                    break;
            };
        }
        private static function loadMultipleSwfs(_arg1:String, _arg2:DisplayObject, _arg3:Sprite, _arg4:Number, _arg5:Number):void{
            var xPos:* = NaN;
            var yPos:* = NaN;
            var i:* = NaN;
            var j:* = NaN;
            var onLoadComplete:* = undefined;
            var imageUrl:* = _arg1;
            var imageMC:* = _arg2;
            var parentMC:* = _arg3;
            var numColumns:* = _arg4;
            var numRows:* = _arg5;
            xPos = 0;
            yPos = 0;
            i = 1;
            while (i <= numRows) {
                xPos = 0;
                j = 1;
                while (j <= numColumns) {
                    onLoadComplete = function (_arg1:Event):void{
                        var _local2:Loader;
                        _local2 = Loader(_arg1.currentTarget.loader);
                        _local2.content.scaleX = imageMC.scaleX;
                        _local2.content.scaleY = imageMC.scaleY;
                        parentMC.addChild(_local2);
                        _local2.contentLoaderInfo.removeEventListener(Event.COMPLETE, onLoadComplete);
                    };
                    mcLoader = new Loader();
                    mcLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onLoadComplete);
                    mcLoader.x = xPos;
                    mcLoader.y = yPos;
                    xPos = (xPos + imageMC.width);
                    mcLoader.load(new URLRequest(imageUrl));
                    j = (j + 1);
                };
                yPos = (yPos + imageMC.height);
                i = (i + 1);
            };
        }
        public static function setCenterDisplayMode(_arg1:DisplayObject, _arg2:Sprite, _arg3:Number, _arg4:Number, _arg5:Number):void{
            setAlignment(_arg1, _arg3, _arg4, _arg5, V_ALIGN_MIDDLE, H_ALIGN_MIDDLE);
            setMaskMcOf(_arg1, _arg2, _arg3, _arg4, _arg5);
        }
        public static function setFitDisplayMode(_arg1:DisplayObject, _arg2:Sprite, _arg3:Number, _arg4:Number, _arg5:Number):void{
            var _local6:Matrix;
            var _local7:Number;
            var _local8:Number;
            var _local9:Number;
            var _local10:Number;
            var _local11:Number;
            _local6 = new Matrix();
            _local6.identity();
            _local7 = (_arg3 - (_arg5 * 2));
            _local8 = (_arg4 - (_arg5 * 2));
            _local9 = (_arg1.width / _arg1.height);
            _local10 = (_local7 / _local8);
            _local11 = ((_local9)>_local10) ? (_local7 / _arg1.width) : (_local8 / _arg1.height);
            _local6.scale(_local11, _local11);
            _arg1.transform.matrix = _local6;
            setMaskMcOf(_arg1, _arg2, _arg3, _arg4, _arg5);
        }
        public static function setTileDisplayMode(_arg1:String, _arg2:DisplayObject, _arg3:Sprite, _arg4:Number, _arg5:Number, _arg6:Number):Sprite{
            var _local7:Boolean;
            var _local8:Number;
            var _local9:Number;
            var _local10:Number;
            var _local11:Number;
            var _local12:Number;
            var _local13:Number;
            var _local14:Sprite;
            var _local15:Matrix;
            var _local16:BitmapData;
            _local7 = (((_arg1.substr((_arg1.length - 3), 3).toLowerCase() == "swf")) ? true : false);
            _local8 = _arg4;
            _local9 = _arg5;
            _local10 = Math.ceil((_local8 / _arg2.width));
            _local11 = Math.ceil((_local9 / _arg2.height));
            _local12 = (_local10 * Math.round(_arg2.width));
            _local13 = (_local11 * Math.round(_arg2.height));
            _arg2.visible = false;
            _local14 = new Sprite();
            if (_local7){
                loadMultipleSwfs(_arg1, _arg2, _local14, _local10, _local11);
            } else {
                _local15 = new Matrix();
                _local15.identity();
                _local15.scale(_arg2.scaleX, _arg2.scaleY);
                _local16 = new BitmapData(Math.round(_arg2.width), Math.round(_arg2.height), true, 0xFFFFFF);
                _local16.draw(_arg2, _local15);
                _local15.identity();
                _local14.graphics.beginBitmapFill(_local16, _local15, true, true);
            };
            _local14.graphics.drawRect(0, 0, _local12, _local13);
            setMaskMcOf(_local14, _arg3, _arg4, _arg5, _arg6);
            _arg3.addChild(_local14);
            return (_local14);
        }

    }
}//package com.utils 
﻿package {
    import flash.display.*;

    public dynamic class RadioButton_selectedUpIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class AlertSuccessIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class SliderThumb_overSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class panelBackground_Shadow extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class SliderThumb_downSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class HeaderRenderer_disabledSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class ScrollArrowUp_upSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class AlertSellingIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CheckBox_overIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class Button_overSkin extends MovieClip {

    }
}//package 
﻿package {
    import com.settrade.streaming5.page.component.calendar.*;

    public dynamic class CalendarMatrix extends CalendarMatrix {

    }
}//package 
﻿package {
    import com.settrade.streaming5.page.component.datepicker.*;

    public dynamic class DatePicker extends DatePicker {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class ScrollArrowUp_overSkin extends MovieClip {

    }
}//package